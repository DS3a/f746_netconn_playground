
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032cc  08015ac0  08015ac0  00025ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d8c  08018d8c  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08018d8c  08018d8c  00028d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d94  08018d94  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018d94  08018d94  00028d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d98  08018d98  00028d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08018d9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08018e2c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08018ecc  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000117a0  200001d0  08018f6c  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011970  08018f6c  00031970  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fcd6  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006fef  00000000  00000000  0005fed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021c0  00000000  00000000  00066ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002070  00000000  00000000  00069088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000112ec  00000000  00000000  0006b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032459  00000000  00000000  0007c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00111159  00000000  00000000  000ae83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001bf996  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000941c  00000000  00000000  001bf9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015aa8 	.word	0x08015aa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08015aa8 	.word	0x08015aa8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fcc4 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f824 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f890 	bl	80006e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c4:	f004 f8a4 	bl	8004710 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <main+0x3c>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <main+0x40>)
 80005ce:	f004 f931 	bl	8004834 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <main+0x44>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <main+0x48>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <main+0x4c>)
 80005de:	f004 f929 	bl	8004834 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <main+0x50>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f004 f8c6 	bl	8004778 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x38>
 80005ee:	bf00      	nop
 80005f0:	08018ac0 	.word	0x08018ac0
 80005f4:	080007fd 	.word	0x080007fd
 80005f8:	200001ec 	.word	0x200001ec
 80005fc:	08018ae4 	.word	0x08018ae4
 8000600:	0800087d 	.word	0x0800087d
 8000604:	200001f0 	.word	0x200001f0

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f014 fa7d 	bl	8014b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <SystemClock_Config+0xd4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <SystemClock_Config+0xd8>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000670:	2319      	movs	r3, #25
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000674:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fa6e 	bl	8002b68 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000692:	f000 f91b 	bl	80008cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000696:	f002 fa17 	bl	8002ac8 <HAL_PWREx_EnableOverDrive>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f914 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2107      	movs	r1, #7
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fcf4 	bl	80030b0 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ce:	f000 f8fd 	bl	80008cc <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xc0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xc0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_GPIO_Init+0xc0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0xc4>)
 800077a:	f002 f971 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800077e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000798:	f001 ffb6 	bl	8002708 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <netconn_init>:

/* USER CODE BEGIN 4 */
void netconn_init(struct netconn *conn_to_init) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  ip_addr_t local_ip;
  IP4_ADDR(&local_ip, 10, 42, 0, 32);
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <netconn_init+0x48>)
 80007b6:	60bb      	str	r3, [r7, #8]

  err_t err;
  do {
    err = netconn_bind(conn_to_init, &local_ip, 30);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	221e      	movs	r2, #30
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f008 f873 	bl	80088ac <netconn_bind>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]
  } while (err != ERR_OK);
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f2      	bne.n	80007b8 <netconn_init+0xc>

  do {
    err = netconn_listen(conn_to_init);
 80007d2:	21ff      	movs	r1, #255	; 0xff
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f008 f8a1 	bl	800891c <netconn_listen_with_backlog>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
  } while (err != ERR_OK);
 80007de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f5      	bne.n	80007d2 <netconn_init+0x26>

  listening = 1;
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <netconn_init+0x4c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20002a0a 	.word	0x20002a0a
 80007f8:	200001fc 	.word	0x200001fc

080007fc <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000804:	f003 f942 	bl	8003a8c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  struct netif *gnetif = get_static_netif();
 8000808:	f003 f936 	bl	8003a78 <get_static_netif>
 800080c:	4603      	mov	r3, r0
 800080e:	60fb      	str	r3, [r7, #12]

  conn = NULL;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <start_conn_handler+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
  conn = netconn_new(NETCONN_TCP);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2010      	movs	r0, #16
 800081c:	f007 ffcc 	bl	80087b8 <netconn_new_with_proto_and_callback>
 8000820:	4603      	mov	r3, r0
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <start_conn_handler+0x74>)
 8000824:	6013      	str	r3, [r2, #0]

  netconn_init(conn);
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <start_conn_handler+0x74>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ffbe 	bl	80007ac <netconn_init>
  err_t err;

  ethernetif_input(gnetif);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f003 fccd 	bl	80041d0 <ethernetif_input>
  sys_check_timeouts();
 8000836:	f011 fb7f 	bl	8011f38 <sys_check_timeouts>
  connected = 1;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <start_conn_handler+0x78>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]

  for(;;) {
    osDelay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f004 f89d 	bl	8004980 <osDelay>

    err = netconn_accept(conn, &newconn);
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <start_conn_handler+0x74>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	490b      	ldr	r1, [pc, #44]	; (8000878 <start_conn_handler+0x7c>)
 800084c:	4618      	mov	r0, r3
 800084e:	f008 f891 	bl	8008974 <netconn_accept>
 8000852:	4603      	mov	r3, r0
 8000854:	72fb      	strb	r3, [r7, #11]
    if (err == ERR_OK) {
 8000856:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d103      	bne.n	8000866 <start_conn_handler+0x6a>
      connected = 1;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <start_conn_handler+0x78>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e7ec      	b.n	8000840 <start_conn_handler+0x44>

    } else
      connected = 1;
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <start_conn_handler+0x78>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
    osDelay(10);
 800086c:	e7e8      	b.n	8000840 <start_conn_handler+0x44>
 800086e:	bf00      	nop
 8000870:	200001f4 	.word	0x200001f4
 8000874:	200001fd 	.word	0x200001fd
 8000878:	200001f8 	.word	0x200001f8

0800087c <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */
  /* Infinite loop */
  for(;;)
  {
	if (connected == 1)
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <start_motor_control+0x24>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d104      	bne.n	8000896 <start_motor_control+0x1a>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800088c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <start_motor_control+0x28>)
 8000892:	f002 f8fe 	bl	8002a92 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f004 f872 	bl	8004980 <osDelay>
	if (connected == 1)
 800089c:	e7f2      	b.n	8000884 <start_motor_control+0x8>
 800089e:	bf00      	nop
 80008a0:	200001fd 	.word	0x200001fd
 80008a4:	40020400 	.word	0x40020400

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 fb51 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40002000 	.word	0x40002000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fc1f 	bl	8001158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <HAL_InitTick+0xe0>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <HAL_InitTick+0xe0>)
 800093e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <HAL_InitTick+0xe0>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000950:	f107 0210 	add.w	r2, r7, #16
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fd7a 	bl	8003454 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096a:	f002 fd5f 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 800096e:	6378      	str	r0, [r7, #52]	; 0x34
 8000970:	e004      	b.n	800097c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000972:	f002 fd5b 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8000976:	4603      	mov	r3, r0
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <HAL_InitTick+0xe4>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	0c9b      	lsrs	r3, r3, #18
 8000986:	3b01      	subs	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_InitTick+0xe8>)
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <HAL_InitTick+0xec>)
 800098e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_InitTick+0xe8>)
 8000992:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000996:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <HAL_InitTick+0xe8>)
 800099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_InitTick+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_InitTick+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_InitTick+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80009b0:	4817      	ldr	r0, [pc, #92]	; (8000a10 <HAL_InitTick+0xe8>)
 80009b2:	f002 fd81 	bl	80034b8 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d11b      	bne.n	80009fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <HAL_InitTick+0xe8>)
 80009c6:	f002 fdd9 	bl	800357c <HAL_TIM_Base_Start_IT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d111      	bne.n	80009fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009d8:	202d      	movs	r0, #45	; 0x2d
 80009da:	f000 fbd9 	bl	8001190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d808      	bhi.n	80009f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	202d      	movs	r0, #45	; 0x2d
 80009ea:	f000 fbb5 	bl	8001158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_InitTick+0xf0>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	e002      	b.n	80009fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3738      	adds	r7, #56	; 0x38
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	431bde83 	.word	0x431bde83
 8000a10:	20000200 	.word	0x20000200
 8000a14:	40002000 	.word	0x40002000
 8000a18:	20000004 	.word	0x20000004

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000a4e:	f002 fe0d 	bl	800366c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000200 	.word	0x20000200

08000a5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <ETH_IRQHandler+0x10>)
 8000a62:	f000 ff7d 	bl	8001960 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20004c58 	.word	0x20004c58

08000a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_kill>:

int _kill(int pid, int sig)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_kill+0x20>)
 8000a8c:	2216      	movs	r2, #22
 8000a8e:	601a      	str	r2, [r3, #0]
	return -1;
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2001196c 	.word	0x2001196c

08000aa4 <_exit>:

void _exit (int status)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ffe5 	bl	8000a80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ab6:	e7fe      	b.n	8000ab6 <_exit+0x12>

08000ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aca:	f3af 8000 	nop.w
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
	}

return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
	}
	return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d205      	bcs.n	8000bd0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <_sbrk+0x6c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	371c      	adds	r7, #28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20050000 	.word	0x20050000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	2000024c 	.word	0x2000024c
 8000bfc:	20011970 	.word	0x20011970
 8000c00:	2001196c 	.word	0x2001196c

08000c04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SystemInit+0x24>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <SystemInit+0x24>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SystemInit+0x28>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	40023800 	.word	0x40023800

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd3 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f013 ff15 	bl	8014a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fca7 	bl	80005b4 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c74:	08018d9c 	.word	0x08018d9c
  ldr r2, =_sbss
 8000c78:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000c7c:	20011970 	.word	0x20011970

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>

08000c82 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <LAN8742_RegisterBusIO+0x28>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <LAN8742_RegisterBusIO+0x28>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <LAN8742_RegisterBusIO+0x28>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cae:	e014      	b.n	8000cda <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d17c      	bne.n	8000e00 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2220      	movs	r2, #32
 8000d18:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e01c      	b.n	8000d5a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	2112      	movs	r1, #18
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	4798      	blx	r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da03      	bge.n	8000d3c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d34:	f06f 0304 	mvn.w	r3, #4
 8000d38:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d3a:	e00b      	b.n	8000d54 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d105      	bne.n	8000d54 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
         break;
 8000d52:	e005      	b.n	8000d60 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2b1f      	cmp	r3, #31
 8000d5e:	d9df      	bls.n	8000d20 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b1f      	cmp	r3, #31
 8000d66:	d902      	bls.n	8000d6e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d68:	f06f 0302 	mvn.w	r3, #2
 8000d6c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d145      	bne.n	8000e00 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6810      	ldr	r0, [r2, #0]
 8000d7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d80:	2100      	movs	r1, #0
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db37      	blt.n	8000dfa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	6810      	ldr	r0, [r2, #0]
 8000d92:	f107 0208 	add.w	r2, r7, #8
 8000d96:	2100      	movs	r1, #0
 8000d98:	4798      	blx	r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db28      	blt.n	8000df2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4798      	blx	r3
 8000da6:	4603      	mov	r3, r0
 8000da8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000daa:	e01c      	b.n	8000de6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dbe:	d80e      	bhi.n	8000dde <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	6810      	ldr	r0, [r2, #0]
 8000dc8:	f107 0208 	add.w	r2, r7, #8
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4798      	blx	r3
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da07      	bge.n	8000de6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000dd6:	f06f 0304 	mvn.w	r3, #4
 8000dda:	613b      	str	r3, [r7, #16]
                 break;
 8000ddc:	e010      	b.n	8000e00 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000dde:	f06f 0301 	mvn.w	r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
               break;
 8000de4:	e00c      	b.n	8000e00 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1dd      	bne.n	8000dac <LAN8742_Init+0xc6>
 8000df0:	e006      	b.n	8000e00 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000df2:	f06f 0304 	mvn.w	r3, #4
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	e002      	b.n	8000e00 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000dfa:	f06f 0303 	mvn.w	r3, #3
 8000dfe:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d112      	bne.n	8000e2c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4798      	blx	r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e10:	bf00      	nop
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4798      	blx	r3
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e24:	d9f5      	bls.n	8000e12 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 }
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4798      	blx	r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da02      	bge.n	8000e5e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e58:	f06f 0304 	mvn.w	r3, #4
 8000e5c:	e06e      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6810      	ldr	r0, [r2, #0]
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da02      	bge.n	8000e7a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e74:	f06f 0304 	mvn.w	r3, #4
 8000e78:	e060      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e84:	2301      	movs	r3, #1
 8000e86:	e059      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	2100      	movs	r1, #0
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da02      	bge.n	8000ea4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e9e:	f06f 0304 	mvn.w	r3, #4
 8000ea2:	e04b      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d11b      	bne.n	8000ee6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <LAN8742_GetLinkState+0x90>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e03a      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e033      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e02c      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e02a      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6810      	ldr	r0, [r2, #0]
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	211f      	movs	r1, #31
 8000ef4:	4798      	blx	r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da02      	bge.n	8000f02 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000efc:	f06f 0304 	mvn.w	r3, #4
 8000f00:	e01c      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	e015      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 031c 	and.w	r3, r3, #28
 8000f16:	2b18      	cmp	r3, #24
 8000f18:	d101      	bne.n	8000f1e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e00e      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f003 031c 	and.w	r3, r3, #28
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d101      	bne.n	8000f2c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e007      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 031c 	and.w	r3, r3, #28
 8000f32:	2b14      	cmp	r3, #20
 8000f34:	d101      	bne.n	8000f3a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f36:	2304      	movs	r3, #4
 8000f38:	e000      	b.n	8000f3c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f3a:	2305      	movs	r3, #5
    }				
  }
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f8fa 	bl	8001142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	200f      	movs	r0, #15
 8000f50:	f7ff fcea 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fcc0 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000250 	.word	0x20000250

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000250 	.word	0x20000250

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	4313      	orrs	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	05fa0000 	.word	0x05fa0000

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff4c 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116a:	f7ff ff61 	bl	8001030 <__NVIC_GetPriorityGrouping>
 800116e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	6978      	ldr	r0, [r7, #20]
 8001176:	f7ff ffb1 	bl	80010dc <NVIC_EncodePriority>
 800117a:	4602      	mov	r2, r0
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff80 	bl	8001088 <__NVIC_SetPriority>
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff54 	bl	800104c <__NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06a      	b.n	8001294 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2223      	movs	r2, #35	; 0x23
 80011cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f003 f87d 	bl	80042d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_ETH_Init+0xf0>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a30      	ldr	r2, [pc, #192]	; (800129c <HAL_ETH_Init+0xf0>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_ETH_Init+0xf0>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_ETH_Init+0xf4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4a2b      	ldr	r2, [pc, #172]	; (80012a0 <HAL_ETH_Init+0xf4>)
 80011f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_ETH_Init+0xf4>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	4927      	ldr	r1, [pc, #156]	; (80012a0 <HAL_ETH_Init+0xf4>)
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_ETH_Init+0xf4>)
 800120a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001222:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001224:	f7ff feb0 	bl	8000f88 <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800122a:	e011      	b.n	8001250 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800122c:	f7ff feac 	bl	8000f88 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800123a:	d909      	bls.n	8001250 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2204      	movs	r2, #4
 8001240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	22e0      	movs	r2, #224	; 0xe0
 8001248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e021      	b.n	8001294 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e4      	bne.n	800122c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 ffac 	bl	80021c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 f853 	bl	8002314 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f001 f8a9 	bl	80023c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	461a      	mov	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f001 f811 	bl	80022a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2210      	movs	r2, #16
 800128e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800

080012a4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d150      	bne.n	8001358 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2223      	movs	r2, #35	; 0x23
 80012ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2204      	movs	r2, #4
 80012c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fa7b 	bl	80017c0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0208 	orr.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fe5c 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0204 	orr.w	r2, r2, #4
 80012fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fe49 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fdf3 	bl	8001f02 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800132e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001332:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800134a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2223      	movs	r2, #35	; 0x23
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e000      	b.n	800135a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
  }
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001372:	2b10      	cmp	r3, #16
 8001374:	d17b      	bne.n	800146e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2223      	movs	r2, #35	; 0x23
 800137a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_ETH_Start_IT+0x114>)
 80013a2:	430b      	orrs	r3, r1
 80013a4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80013b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2204      	movs	r2, #4
 80013c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f9fc 	bl	80017c0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fddd 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 0204 	orr.w	r2, r2, #4
 80013fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff fdca 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fd74 	bl	8001f02 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001430:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001448:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001452:	69d9      	ldr	r1, [r3, #28]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_ETH_Start_IT+0x118>)
 800145a:	430b      	orrs	r3, r1
 800145c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001460:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2223      	movs	r2, #35	; 0x23
 8001466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	00020060 	.word	0x00020060
 800147c:	0001a0c1 	.word	0x0001a0c1

08001480 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800148e:	2b23      	cmp	r3, #35	; 0x23
 8001490:	d16e      	bne.n	8001570 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2223      	movs	r2, #35	; 0x23
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	69d9      	ldr	r1, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_ETH_Stop_IT+0xfc>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	f023 0302 	bic.w	r3, r3, #2
 80014dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014e0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0204 	bic.w	r2, r2, #4
 80014f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fd50 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fcfa 	bl	8001f02 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fd3a 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00e      	b.n	8001558 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	3212      	adds	r2, #18
 8001540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001544:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d9ed      	bls.n	800153a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2210      	movs	r2, #16
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e000      	b.n	8001572 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	fffe5f3e 	.word	0xfffe5f3e

08001580 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d109      	bne.n	80015a4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e045      	b.n	8001630 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015aa:	2b23      	cmp	r3, #35	; 0x23
 80015ac:	d13f      	bne.n	800162e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80015b6:	2201      	movs	r2, #1
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 ff70 	bl	80024a0 <ETH_Prepare_Tx_Descriptors>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015cc:	f043 0202 	orr.w	r2, r3, #2
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02a      	b.n	8001630 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015da:	f3bf 8f4f 	dsb	sy
}
 80015de:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d904      	bls.n	80015fc <HAL_ETH_Transmit_IT+0x7c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	1f1a      	subs	r2, r3, #4
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00d      	beq.n	800162a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	461a      	mov	r2, r3
 8001618:	2304      	movs	r3, #4
 800161a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	461a      	mov	r2, r3
 8001626:	2300      	movs	r3, #0
 8001628:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0a8      	b.n	80017b6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166a:	2b23      	cmp	r3, #35	; 0x23
 800166c:	d001      	beq.n	8001672 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0a1      	b.n	80017b6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	3212      	adds	r2, #18
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001688:	f1c3 0304 	rsb	r3, r3, #4
 800168c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800168e:	e06a      	b.n	8001766 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <HAL_ETH_ReadData+0x88>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d040      	beq.n	8001742 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00c      	beq.n	8001704 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016f4:	3b04      	subs	r3, #4
 80016f6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800171c:	461a      	mov	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	b29b      	uxth	r3, r3
 8001722:	f002 ffa1 	bl	8004668 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	441a      	add	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d902      	bls.n	8001754 <HAL_ETH_ReadData+0x11c>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b04      	subs	r3, #4
 8001752:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	3212      	adds	r2, #18
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db06      	blt.n	800177c <HAL_ETH_ReadData+0x144>
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d202      	bcs.n	800177c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d089      	beq.n	8001690 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	441a      	add	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f815 	bl	80017c0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80017cc:	2301      	movs	r3, #1
 80017ce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017d4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	3212      	adds	r2, #18
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017e8:	e040      	b.n	800186c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d112      	bne.n	8001818 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 ff06 	bl	8004608 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	74fb      	strb	r3, [r7, #19]
 8001806:	e007      	b.n	8001818 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	461a      	mov	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	461a      	mov	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001818:	7cfb      	ldrb	r3, [r7, #19]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d026      	beq.n	800186c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <ETH_UpdateDescriptor+0xe4>)
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	e003      	b.n	8001836 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001834:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001836:	f3bf 8f5f 	dmb	sy
}
 800183a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d902      	bls.n	800185a <ETH_UpdateDescriptor+0x9a>
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	3b04      	subs	r3, #4
 8001858:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	3212      	adds	r2, #18
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	617b      	str	r3, [r7, #20]
      desccount--;
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	3b01      	subs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <ETH_UpdateDescriptor+0xb8>
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1b8      	bne.n	80017ea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	429a      	cmp	r2, r3
 8001880:	d00c      	beq.n	800189c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	461a      	mov	r2, r3
 800188c:	2300      	movs	r3, #0
 800188e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	800045f8 	.word	0x800045f8

080018a8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3318      	adds	r3, #24
 80018b4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018c6:	e03f      	b.n	8001948 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	3304      	adds	r3, #4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3301      	adds	r3, #1
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d028      	beq.n	8001948 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68d9      	ldr	r1, [r3, #12]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db1b      	blt.n	8001944 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	3304      	adds	r3, #4
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fee7 	bl	80046ec <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3304      	adds	r3, #4
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	3301      	adds	r3, #1
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
 8001942:	e001      	b.n	8001948 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <HAL_ETH_ReleaseTxPacket+0xac>
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1b9      	bne.n	80018c8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d112      	bne.n	80019a0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	d109      	bne.n	80019a0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001994:	461a      	mov	r2, r3
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_ETH_IRQHandler+0x178>)
 8001998:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f002 f9fa 	bl	8003d94 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d113      	bne.n	80019da <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10a      	bne.n	80019da <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019cc:	461a      	mov	r2, r3
 80019ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80019d2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f002 f9ed 	bl	8003db4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ec:	d14c      	bne.n	8001a88 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a00:	d142      	bne.n	8001a88 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a08:	f043 0208 	orr.w	r2, r3, #8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a24:	d11a      	bne.n	8001a5c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_ETH_IRQHandler+0x17c>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001a4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a50:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	22e0      	movs	r2, #224	; 0xe0
 8001a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001a5a:	e012      	b.n	8001a82 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	f248 6380 	movw	r3, #34432	; 0x8680
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001a80:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f002 f9a6 	bl	8003dd4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d10e      	bne.n	8001ab4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f81c 	bl	8001ae4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_ETH_IRQHandler+0x180>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_ETH_IRQHandler+0x180>)
 8001ac2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ac6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f815 	bl	8001af8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	00010040 	.word	0x00010040
 8001adc:	007e2000 	.word	0x007e2000
 8001ae0:	40013c00 	.word	0x40013c00

08001ae4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 031c 	and.w	r3, r3, #28
 8001b28:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	02db      	lsls	r3, r3, #11
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001b5c:	f7ff fa14 	bl	8000f88 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b62:	e00d      	b.n	8001b80 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b64:	f7ff fa10 	bl	8000f88 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d301      	bcc.n	8001b78 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e010      	b.n	8001b9a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ec      	bne.n	8001b64 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 031c 	and.w	r3, r3, #28
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	02db      	lsls	r3, r3, #11
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	019b      	lsls	r3, r3, #6
 8001bd0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfc:	f7ff f9c4 	bl	8000f88 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c02:	e00d      	b.n	8001c20 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c04:	f7ff f9c0 	bl	8000f88 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d301      	bcc.n	8001c18 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e009      	b.n	8001c2c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ec      	bne.n	8001c04 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0d9      	b.n	8001dfc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e00b      	b.n	8001e34 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d105      	bne.n	8001e32 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f88f 	bl	8001f4c <ETH_SetMACConfig>

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 031c 	bic.w	r3, r3, #28
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e54:	f001 fade 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8001e58:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d908      	bls.n	8001e74 <HAL_ETH_SetMDIOClockRange+0x38>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d804      	bhi.n	8001e74 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e027      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d908      	bls.n	8001e8e <HAL_ETH_SetMDIOClockRange+0x52>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d204      	bcs.n	8001e8e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f043 030c 	orr.w	r3, r3, #12
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e01a      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d303      	bcc.n	8001e9e <HAL_ETH_SetMDIOClockRange+0x62>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d911      	bls.n	8001ec2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d804      	bhi.n	8001eb8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	e005      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e000      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ec2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	611a      	str	r2, [r3, #16]
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	01312cff 	.word	0x01312cff
 8001ed8:	02160ebf 	.word	0x02160ebf
 8001edc:	03938700 	.word	0x03938700
 8001ee0:	05f5e0ff 	.word	0x05f5e0ff
 8001ee4:	08f0d17f 	.word	0x08f0d17f

08001ee8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7ff f834 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f42:	6193      	str	r3, [r2, #24]
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <ETH_SetMACConfig+0x15c>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	7c1b      	ldrb	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <ETH_SetMACConfig+0x28>
 8001f6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f72:	e000      	b.n	8001f76 <ETH_SetMACConfig+0x2a>
 8001f74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	7c5b      	ldrb	r3, [r3, #17]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <ETH_SetMACConfig+0x38>
 8001f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f82:	e000      	b.n	8001f86 <ETH_SetMACConfig+0x3a>
 8001f84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7fdb      	ldrb	r3, [r3, #31]
 8001f92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	7f92      	ldrb	r2, [r2, #30]
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d102      	bne.n	8001faa <ETH_SetMACConfig+0x5e>
 8001fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa8:	e000      	b.n	8001fac <ETH_SetMACConfig+0x60>
 8001faa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7f1b      	ldrb	r3, [r3, #28]
 8001fb2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fb4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	791b      	ldrb	r3, [r3, #4]
 8001fc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d102      	bne.n	8001fd4 <ETH_SetMACConfig+0x88>
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	e000      	b.n	8001fd6 <ETH_SetMACConfig+0x8a>
 8001fd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	7bdb      	ldrb	r3, [r3, #15]
 8001fdc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fe4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	2001      	movs	r0, #1
 8002008:	f7fe ffca 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002032:	2a00      	cmp	r2, #0
 8002034:	d101      	bne.n	800203a <ETH_SetMACConfig+0xee>
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	e000      	b.n	800203c <ETH_SetMACConfig+0xf0>
 800203a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800203c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002042:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800204a:	2a01      	cmp	r2, #1
 800204c:	d101      	bne.n	8002052 <ETH_SetMACConfig+0x106>
 800204e:	2208      	movs	r2, #8
 8002050:	e000      	b.n	8002054 <ETH_SetMACConfig+0x108>
 8002052:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002054:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800205c:	2a01      	cmp	r2, #1
 800205e:	d101      	bne.n	8002064 <ETH_SetMACConfig+0x118>
 8002060:	2204      	movs	r2, #4
 8002062:	e000      	b.n	8002066 <ETH_SetMACConfig+0x11a>
 8002064:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002066:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800206e:	2a01      	cmp	r2, #1
 8002070:	d101      	bne.n	8002076 <ETH_SetMACConfig+0x12a>
 8002072:	2202      	movs	r2, #2
 8002074:	e000      	b.n	8002078 <ETH_SetMACConfig+0x12c>
 8002076:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002078:	4313      	orrs	r3, r2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe ff85 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	ff20810f 	.word	0xff20810f

080020ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <ETH_SetDMAConfig+0x110>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetDMAConfig+0x2c>
 80020d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020d6:	e000      	b.n	80020da <ETH_SetDMAConfig+0x2e>
 80020d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	7b5b      	ldrb	r3, [r3, #13]
 80020de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	7f52      	ldrb	r2, [r2, #29]
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d102      	bne.n	80020f0 <ETH_SetDMAConfig+0x44>
 80020ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ee:	e000      	b.n	80020f2 <ETH_SetDMAConfig+0x46>
 80020f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7b9b      	ldrb	r3, [r3, #14]
 80020f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002100:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002108:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7f9b      	ldrb	r3, [r3, #30]
 800210e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002110:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002116:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002120:	4313      	orrs	r3, r2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe ff2c 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002160:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002166:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800216c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002174:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002176:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800217e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002184:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800218e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002192:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7fe fefd 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	f8de3f23 	.word	0xf8de3f23

080021c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0a6      	sub	sp, #152	; 0x98
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021fc:	2300      	movs	r3, #0
 80021fe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002206:	2300      	movs	r3, #0
 8002208:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800222c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002234:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fe86 	bl	8001f4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002240:	2301      	movs	r3, #1
 8002242:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002244:	2301      	movs	r3, #1
 8002246:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800226c:	2301      	movs	r3, #1
 800226e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002274:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800227a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800227c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002280:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002288:	2300      	movs	r3, #0
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff08 	bl	80020ac <ETH_SetDMAConfig>
}
 800229c:	bf00      	nop
 800229e:	3798      	adds	r7, #152	; 0x98
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3305      	adds	r3, #5
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	3204      	adds	r2, #4
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <ETH_MACAddressConfig+0x68>)
 80022c6:	4413      	add	r3, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3303      	adds	r3, #3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	061a      	lsls	r2, r3, #24
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3302      	adds	r3, #2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3301      	adds	r3, #1
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4313      	orrs	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <ETH_MACAddressConfig+0x6c>)
 80022f6:	4413      	add	r3, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40028040 	.word	0x40028040
 8002310:	40028044 	.word	0x40028044

08002314 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e03e      	b.n	80023a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	3206      	adds	r2, #6
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d80c      	bhi.n	8002384 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e004      	b.n	800238e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3301      	adds	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d9bd      	bls.n	8002322 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	611a      	str	r2, [r3, #16]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e046      	b.n	8002462 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002410:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002418:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	3212      	adds	r2, #18
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d80c      	bhi.n	8002452 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6919      	ldr	r1, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	e004      	b.n	800245c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d9b5      	bls.n	80023d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b08d      	sub	sp, #52	; 0x34
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3318      	adds	r3, #24
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024e2:	d007      	beq.n	80024f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	3304      	adds	r3, #4
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e0ff      	b.n	80026f8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	3301      	adds	r3, #1
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <ETH_Prepare_Tx_Descriptors+0x264>)
 800250e:	4013      	ands	r3, r2
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	6852      	ldr	r2, [r2, #4]
 8002514:	431a      	orrs	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	431a      	orrs	r2, r3
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	431a      	orrs	r2, r3
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800257a:	f3bf 8f5f 	dmb	sy
}
 800257e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800258c:	e082      	b.n	8002694 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	3301      	adds	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d902      	bls.n	80025cc <ETH_Prepare_Tx_Descriptors+0x12c>
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	3b04      	subs	r3, #4
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ee:	d007      	beq.n	8002600 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	3304      	adds	r3, #4
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d029      	beq.n	8002654 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
 8002612:	e019      	b.n	8002648 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002614:	f3bf 8f5f 	dmb	sy
}
 8002618:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	3301      	adds	r3, #1
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	2b03      	cmp	r3, #3
 8002630:	d902      	bls.n	8002638 <ETH_Prepare_Tx_Descriptors+0x198>
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	3b04      	subs	r3, #4
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	3301      	adds	r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
 8002648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	429a      	cmp	r2, r3
 800264e:	d3e1      	bcc.n	8002614 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e051      	b.n	80026f8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4b25      	ldr	r3, [pc, #148]	; (8002704 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002670:	4013      	ands	r3, r2
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	6852      	ldr	r2, [r2, #4]
 8002676:	431a      	orrs	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	3301      	adds	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002682:	f3bf 8f5f 	dmb	sy
}
 8002686:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af78 	bne.w	800258e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e005      	b.n	80026be <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	3304      	adds	r3, #4
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026de:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80026f2:	b662      	cpsie	i
}
 80026f4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3734      	adds	r7, #52	; 0x34
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	ffffe000 	.word	0xffffe000

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e175      	b.n	8002a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 8164 	bne.w	8002a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d005      	beq.n	800275e <HAL_GPIO_Init+0x56>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d130      	bne.n	80027c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 0201 	and.w	r2, r3, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d017      	beq.n	80027fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80be 	beq.w	8002a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_GPIO_Init+0x324>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_GPIO_Init+0x324>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_GPIO_Init+0x324>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028aa:	4a61      	ldr	r2, [pc, #388]	; (8002a30 <HAL_GPIO_Init+0x328>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d037      	beq.n	8002946 <HAL_GPIO_Init+0x23e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <HAL_GPIO_Init+0x330>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_GPIO_Init+0x23a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x236>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_GPIO_Init+0x338>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x232>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_GPIO_Init+0x33c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x22e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_GPIO_Init+0x340>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x22a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_GPIO_Init+0x344>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x226>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_GPIO_Init+0x348>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x222>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x21e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_GPIO_Init+0x350>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x21a>
 800291e:	2309      	movs	r3, #9
 8002920:	e012      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002922:	230a      	movs	r3, #10
 8002924:	e010      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002926:	2308      	movs	r3, #8
 8002928:	e00e      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800292a:	2307      	movs	r3, #7
 800292c:	e00c      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800292e:	2306      	movs	r3, #6
 8002930:	e00a      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002932:	2305      	movs	r3, #5
 8002934:	e008      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002936:	2304      	movs	r3, #4
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800293a:	2303      	movs	r3, #3
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002946:	2300      	movs	r3, #0
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f002 0203 	and.w	r2, r2, #3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4093      	lsls	r3, r2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002958:	4935      	ldr	r1, [pc, #212]	; (8002a30 <HAL_GPIO_Init+0x328>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800298a:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_GPIO_Init+0x354>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029de:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3301      	adds	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	f67f ae86 	bls.w	8002728 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40021400 	.word	0x40021400
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	40021c00 	.word	0x40021c00
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40022400 	.word	0x40022400
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	041a      	lsls	r2, r3, #16
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	619a      	str	r2, [r3, #24]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af6:	f7fe fa47 	bl	8000f88 <HAL_GetTick>
 8002afa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002afc:	e009      	b.n	8002b12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002afe:	f7fe fa43 	bl	8000f88 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b0c:	d901      	bls.n	8002b12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e022      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d1ee      	bne.n	8002afe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7fe fa2c 	bl	8000f88 <HAL_GetTick>
 8002b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b32:	e009      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b34:	f7fe fa28 	bl	8000f88 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b42:	d901      	bls.n	8002b48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e007      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b54:	d1ee      	bne.n	8002b34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40007000 	.word	0x40007000

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e291      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b98:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_OscConfig+0x62>
 8002ba4:	4b90      	ldr	r3, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x130>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e26b      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x7a>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x9c>
 8002bea:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7e      	ldr	r2, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7b      	ldr	r2, [pc, #492]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a72      	ldr	r2, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6b      	ldr	r2, [pc, #428]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f99e 	bl	8000f88 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe f99a 	bl	8000f88 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e21f      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f98a 	bl	8000f88 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe f986 	bl	8000f88 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e20b      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x110>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d069      	beq.n	8002d7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x190>
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1df      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	493d      	ldr	r1, [pc, #244]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e040      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe f93c 	bl	8000f88 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe f938 	bl	8000f88 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1bd      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4929      	ldr	r1, [pc, #164]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	e018      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe f918 	bl	8000f88 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe f914 	bl	8000f88 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e199      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d038      	beq.n	8002df8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe f8f5 	bl	8000f88 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe f8f1 	bl	8000f88 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e176      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x23a>
 8002dc0:	e01a      	b.n	8002df8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe f8db 	bl	8000f88 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe f8d7 	bl	8000f88 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d903      	bls.n	8002dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e15c      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
 8002de8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b91      	ldr	r3, [pc, #580]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a4 	beq.w	8002f4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e06:	4b8b      	ldr	r3, [pc, #556]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a87      	ldr	r2, [pc, #540]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e3a:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7e      	ldr	r2, [pc, #504]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe f89f 	bl	8000f88 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe f89b 	bl	8000f88 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e120      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x31a>
 8002e74:	4b6f      	ldr	r3, [pc, #444]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x33c>
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a69      	ldr	r2, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	e01c      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x35e>
 8002eac:	4b61      	ldr	r3, [pc, #388]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a60      	ldr	r2, [pc, #384]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a5d      	ldr	r2, [pc, #372]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b58      	ldr	r3, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe f84f 	bl	8000f88 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe f84b 	bl	8000f88 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0ce      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x386>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f839 	bl	8000f88 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f835 	bl	8000f88 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	4b40      	ldr	r3, [pc, #256]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80a4 	beq.w	80030a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d06b      	beq.n	800303c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d149      	bne.n	8003000 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe f806 	bl	8000f88 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe f802 	bl	8000f88 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e087      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fd ffd6 	bl	8000f88 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fd ffd2 	bl	8000f88 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e057      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x478>
 8002ffe:	e04f      	b.n	80030a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fd ffbc 	bl	8000f88 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fd ffb8 	bl	8000f88 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e03d      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x4ac>
 8003032:	e035      	b.n	80030a0 <HAL_RCC_OscConfig+0x538>
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x544>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d028      	beq.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d121      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11a      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003072:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d0      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d910      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b67      	ldr	r3, [pc, #412]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	4965      	ldr	r1, [pc, #404]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0b8      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003110:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a58      	ldr	r2, [pc, #352]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800311a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003128:	4b53      	ldr	r3, [pc, #332]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a52      	ldr	r2, [pc, #328]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003132:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	494d      	ldr	r1, [pc, #308]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d040      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d115      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07f      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b41      	ldr	r3, [pc, #260]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e073      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06b      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003192:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4936      	ldr	r1, [pc, #216]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fd fef0 	bl	8000f88 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7fd feec 	bl	8000f88 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e053      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d210      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 020f 	bic.w	r2, r3, #15
 80031ea:	4922      	ldr	r1, [pc, #136]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e032      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4916      	ldr	r1, [pc, #88]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	490e      	ldr	r1, [pc, #56]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003242:	f000 f821 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003246:	4602      	mov	r2, r0
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	490a      	ldr	r1, [pc, #40]	; (800327c <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	5ccb      	ldrb	r3, [r1, r3]
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a09      	ldr	r2, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1d0>)
 800325c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1d4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fb60 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00
 8003278:	40023800 	.word	0x40023800
 800327c:	08018b08 	.word	0x08018b08
 8003280:	20000000 	.word	0x20000000
 8003284:	20000004 	.word	0x20000004

08003288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b090      	sub	sp, #64	; 0x40
 800328e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
 8003294:	2300      	movs	r3, #0
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003298:	2300      	movs	r3, #0
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x40>
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	f200 80a1 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x34>
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ba:	e09b      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_GetSysClockFreq+0x184>)
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c0:	e09b      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c2:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c6:	e098      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032d2:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d028      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	627a      	str	r2, [r7, #36]	; 0x24
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f0:	2100      	movs	r1, #0
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f4:	fb03 f201 	mul.w	r2, r3, r1
 80032f8:	2300      	movs	r3, #0
 80032fa:	fb00 f303 	mul.w	r3, r0, r3
 80032fe:	4413      	add	r3, r2
 8003300:	4a43      	ldr	r2, [pc, #268]	; (8003410 <HAL_RCC_GetSysClockFreq+0x188>)
 8003302:	fba0 1202 	umull	r1, r2, r0, r2
 8003306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003308:	460a      	mov	r2, r1
 800330a:	62ba      	str	r2, [r7, #40]	; 0x28
 800330c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330e:	4413      	add	r3, r2
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	2200      	movs	r2, #0
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	61fa      	str	r2, [r7, #28]
 800331a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800331e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003322:	f7fc ffc5 	bl	80002b0 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4613      	mov	r3, r2
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332e:	e053      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	2200      	movs	r2, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	617a      	str	r2, [r7, #20]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003342:	f04f 0b00 	mov.w	fp, #0
 8003346:	4652      	mov	r2, sl
 8003348:	465b      	mov	r3, fp
 800334a:	f04f 0000 	mov.w	r0, #0
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	0159      	lsls	r1, r3, #5
 8003354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003358:	0150      	lsls	r0, r2, #5
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	ebb2 080a 	subs.w	r8, r2, sl
 8003362:	eb63 090b 	sbc.w	r9, r3, fp
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003372:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003376:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800337a:	ebb2 0408 	subs.w	r4, r2, r8
 800337e:	eb63 0509 	sbc.w	r5, r3, r9
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	00eb      	lsls	r3, r5, #3
 800338c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003390:	00e2      	lsls	r2, r4, #3
 8003392:	4614      	mov	r4, r2
 8003394:	461d      	mov	r5, r3
 8003396:	eb14 030a 	adds.w	r3, r4, sl
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	eb45 030b 	adc.w	r3, r5, fp
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ae:	4629      	mov	r1, r5
 80033b0:	028b      	lsls	r3, r1, #10
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b8:	4621      	mov	r1, r4
 80033ba:	028a      	lsls	r2, r1, #10
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	2200      	movs	r2, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033cc:	f7fc ff70 	bl	80002b0 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80033e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetSysClockFreq+0x184>)
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3740      	adds	r7, #64	; 0x40
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	00f42400 	.word	0x00f42400
 8003410:	017d7840 	.word	0x017d7840

08003414 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_RCC_GetHCLKFreq+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000000 	.word	0x20000000

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003430:	f7ff fff0 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0a9b      	lsrs	r3, r3, #10
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08018b18 	.word	0x08018b18

08003454 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	220f      	movs	r2, #15
 8003462:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_RCC_GetClockConfig+0x60>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	601a      	str	r2, [r3, #0]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40023c00 	.word	0x40023c00

080034b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e049      	b.n	800355e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f841 	bl	8003566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f000 fa00 	bl	80038fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d001      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e054      	b.n	800363e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <HAL_TIM_Base_Start_IT+0xd0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d022      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d01d      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_TIM_Base_Start_IT+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d018      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_TIM_Base_Start_IT+0xd8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_TIM_Base_Start_IT+0xdc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_TIM_Base_Start_IT+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_TIM_Base_Start_IT+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_TIM_Base_Start_IT+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d115      	bne.n	8003628 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_TIM_Base_Start_IT+0xec>)
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d015      	beq.n	800363a <HAL_TIM_Base_Start_IT+0xbe>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d011      	beq.n	800363a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e008      	b.n	800363a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e000      	b.n	800363c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40010400 	.word	0x40010400
 8003660:	40014000 	.word	0x40014000
 8003664:	40001800 	.word	0x40001800
 8003668:	00010007 	.word	0x00010007

0800366c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0202 	mvn.w	r2, #2
 8003698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f905 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8f7 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f908 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0204 	mvn.w	r2, #4
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8db 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8cd 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8de 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b08      	cmp	r3, #8
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b08      	cmp	r3, #8
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0208 	mvn.w	r2, #8
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8b1 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8a3 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8b4 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b10      	cmp	r3, #16
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b10      	cmp	r3, #16
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0210 	mvn.w	r2, #16
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2208      	movs	r2, #8
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f887 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f879 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f88a 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0201 	mvn.w	r2, #1
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd f85c 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d107      	bne.n	800381c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f91a 	bl	8003a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d10e      	bne.n	800384a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d107      	bne.n	800384a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f90d 	bl	8003a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d10e      	bne.n	8003876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d107      	bne.n	8003876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800386e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f838 	bl	80038e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b20      	cmp	r3, #32
 8003882:	d10e      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b20      	cmp	r3, #32
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0220 	mvn.w	r2, #32
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8cd 	bl	8003a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a40      	ldr	r2, [pc, #256]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391a:	d00f      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3d      	ldr	r2, [pc, #244]	; (8003a14 <TIM_Base_SetConfig+0x118>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00b      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <TIM_Base_SetConfig+0x11c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d007      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <TIM_Base_SetConfig+0x120>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3a      	ldr	r2, [pc, #232]	; (8003a20 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d108      	bne.n	800394e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02b      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d027      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2c      	ldr	r2, [pc, #176]	; (8003a14 <TIM_Base_SetConfig+0x118>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d023      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2b      	ldr	r2, [pc, #172]	; (8003a18 <TIM_Base_SetConfig+0x11c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01f      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <TIM_Base_SetConfig+0x120>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01b      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <TIM_Base_SetConfig+0x124>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d017      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <TIM_Base_SetConfig+0x128>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <TIM_Base_SetConfig+0x12c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00f      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <TIM_Base_SetConfig+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0x134>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a24      	ldr	r2, [pc, #144]	; (8003a34 <TIM_Base_SetConfig+0x138>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <TIM_Base_SetConfig+0x13c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0xf8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <TIM_Base_SetConfig+0x124>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d103      	bne.n	80039fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	615a      	str	r2, [r3, #20]
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800
 8003a1c:	40000c00 	.word	0x40000c00
 8003a20:	40010400 	.word	0x40010400
 8003a24:	40014000 	.word	0x40014000
 8003a28:	40014400 	.word	0x40014400
 8003a2c:	40014800 	.word	0x40014800
 8003a30:	40001800 	.word	0x40001800
 8003a34:	40001c00 	.word	0x40001c00
 8003a38:	40002000 	.word	0x40002000

08003a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return &gnetif;
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <get_static_netif+0x10>)
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000254 	.word	0x20000254

08003a8c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8003a92:	4b98      	ldr	r3, [pc, #608]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003a94:	220a      	movs	r2, #10
 8003a96:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8003a98:	4b96      	ldr	r3, [pc, #600]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003a9a:	222a      	movs	r2, #42	; 0x2a
 8003a9c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003a9e:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8003aa4:	4b93      	ldr	r3, [pc, #588]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003aaa:	4b93      	ldr	r3, [pc, #588]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ab0:	4b91      	ldr	r3, [pc, #580]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003ab6:	4b90      	ldr	r3, [pc, #576]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003abc:	4b8e      	ldr	r3, [pc, #568]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8003ac2:	4b8e      	ldr	r3, [pc, #568]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003ac4:	220a      	movs	r2, #10
 8003ac6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8003ac8:	4b8c      	ldr	r3, [pc, #560]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003aca:	222a      	movs	r2, #42	; 0x2a
 8003acc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003ace:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003ad4:	4b89      	ldr	r3, [pc, #548]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003ada:	2100      	movs	r1, #0
 8003adc:	2000      	movs	r0, #0
 8003ade:	f006 f9cd 	bl	8009e7c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003ae2:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	061a      	lsls	r2, r3, #24
 8003ae8:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	4b80      	ldr	r3, [pc, #512]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003af2:	789b      	ldrb	r3, [r3, #2]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	4313      	orrs	r3, r2
 8003af8:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003afa:	78d2      	ldrb	r2, [r2, #3]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	061a      	lsls	r2, r3, #24
 8003b00:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	0619      	lsls	r1, r3, #24
 8003b06:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	4319      	orrs	r1, r3
 8003b0e:	4b79      	ldr	r3, [pc, #484]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b10:	789b      	ldrb	r3, [r3, #2]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	430b      	orrs	r3, r1
 8003b16:	4977      	ldr	r1, [pc, #476]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b18:	78c9      	ldrb	r1, [r1, #3]
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b22:	431a      	orrs	r2, r3
 8003b24:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	0619      	lsls	r1, r3, #24
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	4319      	orrs	r1, r3
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b34:	789b      	ldrb	r3, [r3, #2]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	496e      	ldr	r1, [pc, #440]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b3c:	78c9      	ldrb	r1, [r1, #3]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b46:	431a      	orrs	r2, r3
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	0619      	lsls	r1, r3, #24
 8003b4e:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	4319      	orrs	r1, r3
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	4965      	ldr	r1, [pc, #404]	; (8003cf4 <MX_LWIP_Init+0x268>)
 8003b60:	78c9      	ldrb	r1, [r1, #3]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	4313      	orrs	r3, r2
 8003b68:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <MX_LWIP_Init+0x274>)
 8003b6a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b6c:	4b62      	ldr	r3, [pc, #392]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	061a      	lsls	r2, r3, #24
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b7c:	789b      	ldrb	r3, [r3, #2]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b84:	78d2      	ldrb	r2, [r2, #3]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	061a      	lsls	r2, r3, #24
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	0619      	lsls	r1, r3, #24
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	4319      	orrs	r1, r3
 8003b98:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003b9a:	789b      	ldrb	r3, [r3, #2]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	4955      	ldr	r1, [pc, #340]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003ba2:	78c9      	ldrb	r1, [r1, #3]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bac:	431a      	orrs	r2, r3
 8003bae:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	0619      	lsls	r1, r3, #24
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	4319      	orrs	r1, r3
 8003bbc:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	494c      	ldr	r1, [pc, #304]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bc6:	78c9      	ldrb	r1, [r1, #3]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	0619      	lsls	r1, r3, #24
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	4319      	orrs	r1, r3
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	430b      	orrs	r3, r1
 8003be8:	4943      	ldr	r1, [pc, #268]	; (8003cf8 <MX_LWIP_Init+0x26c>)
 8003bea:	78c9      	ldrb	r1, [r1, #3]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	0e1b      	lsrs	r3, r3, #24
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	4a44      	ldr	r2, [pc, #272]	; (8003d04 <MX_LWIP_Init+0x278>)
 8003bf4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	061a      	lsls	r2, r3, #24
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c06:	789b      	ldrb	r3, [r3, #2]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c0e:	78d2      	ldrb	r2, [r2, #3]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	061a      	lsls	r2, r3, #24
 8003c14:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	0619      	lsls	r1, r3, #24
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	4319      	orrs	r1, r3
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c24:	789b      	ldrb	r3, [r3, #2]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	4934      	ldr	r1, [pc, #208]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c2c:	78c9      	ldrb	r1, [r1, #3]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c36:	431a      	orrs	r2, r3
 8003c38:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	0619      	lsls	r1, r3, #24
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	4319      	orrs	r1, r3
 8003c46:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c48:	789b      	ldrb	r3, [r3, #2]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	492b      	ldr	r1, [pc, #172]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c50:	78c9      	ldrb	r1, [r1, #3]
 8003c52:	430b      	orrs	r3, r1
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	0619      	lsls	r1, r3, #24
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	4319      	orrs	r1, r3
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c6c:	789b      	ldrb	r3, [r3, #2]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	430b      	orrs	r3, r1
 8003c72:	4922      	ldr	r1, [pc, #136]	; (8003cfc <MX_LWIP_Init+0x270>)
 8003c74:	78c9      	ldrb	r1, [r1, #3]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	0e1b      	lsrs	r3, r3, #24
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <MX_LWIP_Init+0x27c>)
 8003c7e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <MX_LWIP_Init+0x280>)
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <MX_LWIP_Init+0x284>)
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <MX_LWIP_Init+0x27c>)
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <MX_LWIP_Init+0x278>)
 8003c90:	491b      	ldr	r1, [pc, #108]	; (8003d00 <MX_LWIP_Init+0x274>)
 8003c92:	4820      	ldr	r0, [pc, #128]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003c94:	f006 feba 	bl	800aa0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003c98:	481e      	ldr	r0, [pc, #120]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003c9a:	f007 f865 	bl	800ad68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003cb0:	4818      	ldr	r0, [pc, #96]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003cb2:	f007 f869 	bl	800ad88 <netif_set_up>
 8003cb6:	e002      	b.n	8003cbe <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003cb8:	4816      	ldr	r0, [pc, #88]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003cba:	f007 f8d1 	bl	800ae60 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003cc0:	4814      	ldr	r0, [pc, #80]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003cc2:	f007 f963 	bl	800af8c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4814      	ldr	r0, [pc, #80]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003ccc:	f010 ff23 	bl	8014b16 <memset>
  attributes.name = "EthLink";
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <MX_LWIP_Init+0x294>)
 8003cd4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cdc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003ce6:	490b      	ldr	r1, [pc, #44]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003ce8:	480e      	ldr	r0, [pc, #56]	; (8003d24 <MX_LWIP_Init+0x298>)
 8003cea:	f000 fda3 	bl	8004834 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000294 	.word	0x20000294
 8003cf8:	20000298 	.word	0x20000298
 8003cfc:	2000029c 	.word	0x2000029c
 8003d00:	20000288 	.word	0x20000288
 8003d04:	2000028c 	.word	0x2000028c
 8003d08:	20000290 	.word	0x20000290
 8003d0c:	08009d8d 	.word	0x08009d8d
 8003d10:	08004225 	.word	0x08004225
 8003d14:	20000254 	.word	0x20000254
 8003d18:	08003d29 	.word	0x08003d29
 8003d1c:	200002a0 	.word	0x200002a0
 8003d20:	08015ae0 	.word	0x08015ae0
 8003d24:	080044ed 	.word	0x080044ed

08003d28 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003d4e:	2320      	movs	r3, #32
 8003d50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d52:	f3bf 8f4f 	dsb	sy
}
 8003d56:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003d58:	e00b      	b.n	8003d72 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003d5a:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	dcf0      	bgt.n	8003d5a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d78:	f3bf 8f4f 	dsb	sy
}
 8003d7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d7e:	f3bf 8f6f 	isb	sy
}
 8003d82:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_ETH_RxCpltCallback+0x1c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f865 	bl	8004e70 <osSemaphoreRelease>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20004c50 	.word	0x20004c50

08003db4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_ETH_TxCpltCallback+0x1c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f855 	bl	8004e70 <osSemaphoreRelease>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20004c54 	.word	0x20004c54

08003dd4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fe f883 	bl	8001ee8 <HAL_ETH_GetDMAError>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d104      	bne.n	8003df6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <HAL_ETH_ErrorCallback+0x2c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 f83d 	bl	8004e70 <osSemaphoreRelease>
  }
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20004c50 	.word	0x20004c50

08003e04 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b0aa      	sub	sp, #168	; 0xa8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8003e1e:	f107 0310 	add.w	r3, r7, #16
 8003e22:	2264      	movs	r2, #100	; 0x64
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f010 fe75 	bl	8014b16 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003e2c:	4b85      	ldr	r3, [pc, #532]	; (8004044 <low_level_init+0x240>)
 8003e2e:	4a86      	ldr	r2, [pc, #536]	; (8004048 <low_level_init+0x244>)
 8003e30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003e32:	2300      	movs	r3, #0
 8003e34:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003e3a:	23e1      	movs	r3, #225	; 0xe1
 8003e3c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003e42:	2300      	movs	r3, #0
 8003e44:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003e46:	2300      	movs	r3, #0
 8003e48:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003e4a:	4a7e      	ldr	r2, [pc, #504]	; (8004044 <low_level_init+0x240>)
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003e52:	4b7c      	ldr	r3, [pc, #496]	; (8004044 <low_level_init+0x240>)
 8003e54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e58:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003e5a:	4b7a      	ldr	r3, [pc, #488]	; (8004044 <low_level_init+0x240>)
 8003e5c:	4a7b      	ldr	r2, [pc, #492]	; (800404c <low_level_init+0x248>)
 8003e5e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003e60:	4b78      	ldr	r3, [pc, #480]	; (8004044 <low_level_init+0x240>)
 8003e62:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <low_level_init+0x24c>)
 8003e64:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003e66:	4b77      	ldr	r3, [pc, #476]	; (8004044 <low_level_init+0x240>)
 8003e68:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003e6c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e6e:	4875      	ldr	r0, [pc, #468]	; (8004044 <low_level_init+0x240>)
 8003e70:	f7fd f99c 	bl	80011ac <HAL_ETH_Init>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003e7a:	2238      	movs	r2, #56	; 0x38
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4875      	ldr	r0, [pc, #468]	; (8004054 <low_level_init+0x250>)
 8003e80:	f010 fe49 	bl	8014b16 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003e84:	4b73      	ldr	r3, [pc, #460]	; (8004054 <low_level_init+0x250>)
 8003e86:	2221      	movs	r2, #33	; 0x21
 8003e88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003e8a:	4b72      	ldr	r3, [pc, #456]	; (8004054 <low_level_init+0x250>)
 8003e8c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003e90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003e92:	4b70      	ldr	r3, [pc, #448]	; (8004054 <low_level_init+0x250>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003e98:	486f      	ldr	r0, [pc, #444]	; (8004058 <low_level_init+0x254>)
 8003e9a:	f006 fc71 	bl	800a780 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2206      	movs	r2, #6
 8003ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <low_level_init+0x240>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003eb2:	4b64      	ldr	r3, [pc, #400]	; (8004044 <low_level_init+0x240>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	785a      	ldrb	r2, [r3, #1]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ebe:	4b61      	ldr	r3, [pc, #388]	; (8004044 <low_level_init+0x240>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	789a      	ldrb	r2, [r3, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003eca:	4b5e      	ldr	r3, [pc, #376]	; (8004044 <low_level_init+0x240>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	78da      	ldrb	r2, [r3, #3]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003ed6:	4b5b      	ldr	r3, [pc, #364]	; (8004044 <low_level_init+0x240>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	791a      	ldrb	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003ee2:	4b58      	ldr	r3, [pc, #352]	; (8004044 <low_level_init+0x240>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	795a      	ldrb	r2, [r3, #5]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ef4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003efc:	f043 030a 	orr.w	r3, r3, #10
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 fead 	bl	8004c6c <osSemaphoreNew>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4a51      	ldr	r2, [pc, #324]	; (800405c <low_level_init+0x258>)
 8003f16:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f000 fea5 	bl	8004c6c <osSemaphoreNew>
 8003f22:	4603      	mov	r3, r0
 8003f24:	4a4e      	ldr	r2, [pc, #312]	; (8004060 <low_level_init+0x25c>)
 8003f26:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003f28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f2c:	2224      	movs	r2, #36	; 0x24
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f010 fdf0 	bl	8014b16 <memset>
  attributes.name = "EthIf";
 8003f36:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <low_level_init+0x260>)
 8003f38:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003f3a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8003f42:	2330      	movs	r3, #48	; 0x30
 8003f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003f48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4845      	ldr	r0, [pc, #276]	; (8004068 <low_level_init+0x264>)
 8003f52:	f000 fc6f 	bl	8004834 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003f56:	4945      	ldr	r1, [pc, #276]	; (800406c <low_level_init+0x268>)
 8003f58:	4845      	ldr	r0, [pc, #276]	; (8004070 <low_level_init+0x26c>)
 8003f5a:	f7fc fe92 	bl	8000c82 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003f5e:	4844      	ldr	r0, [pc, #272]	; (8004070 <low_level_init+0x26c>)
 8003f60:	f7fc fec1 	bl	8000ce6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003f64:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d164      	bne.n	8004036 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003f6c:	4840      	ldr	r0, [pc, #256]	; (8004070 <low_level_init+0x26c>)
 8003f6e:	f7fc ff62 	bl	8000e36 <LAN8742_GetLinkState>
 8003f72:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	dc06      	bgt.n	8003f8c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f006 ffd4 	bl	800af2c <netif_set_link_down>
      netif_set_down(netif);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f006 ff6b 	bl	800ae60 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003f8a:	e056      	b.n	800403a <low_level_init+0x236>
      switch (PHYLinkState)
 8003f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f90:	3b02      	subs	r3, #2
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d82a      	bhi.n	8003fec <low_level_init+0x1e8>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <low_level_init+0x198>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fbf 	.word	0x08003fbf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fdf 	.word	0x08003fdf
        duplex = ETH_FULLDUPLEX_MODE;
 8003fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8003fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003fbc:	e01f      	b.n	8003ffe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8003fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003fcc:	e017      	b.n	8003ffe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003fdc:	e00f      	b.n	8003ffe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003fea:	e008      	b.n	8003ffe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8003ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003ffc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4619      	mov	r1, r3
 8004004:	480f      	ldr	r0, [pc, #60]	; (8004044 <low_level_init+0x240>)
 8004006:	f7fd fe15 	bl	8001c34 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800400a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004016:	f107 0310 	add.w	r3, r7, #16
 800401a:	4619      	mov	r1, r3
 800401c:	4809      	ldr	r0, [pc, #36]	; (8004044 <low_level_init+0x240>)
 800401e:	f7fd fef3 	bl	8001e08 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004022:	4808      	ldr	r0, [pc, #32]	; (8004044 <low_level_init+0x240>)
 8004024:	f7fd f99e 	bl	8001364 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f006 fead 	bl	800ad88 <netif_set_up>
    netif_set_link_up(netif);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f006 ff48 	bl	800aec4 <netif_set_link_up>
}
 8004034:	e001      	b.n	800403a <low_level_init+0x236>
    Error_Handler();
 8004036:	f7fc fc49 	bl	80008cc <Error_Handler>
}
 800403a:	bf00      	nop
 800403c:	37a8      	adds	r7, #168	; 0xa8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20004c58 	.word	0x20004c58
 8004048:	40028000 	.word	0x40028000
 800404c:	20000130 	.word	0x20000130
 8004050:	20000090 	.word	0x20000090
 8004054:	20004d08 	.word	0x20004d08
 8004058:	08018b20 	.word	0x08018b20
 800405c:	20004c50 	.word	0x20004c50
 8004060:	20004c54 	.word	0x20004c54
 8004064:	08015ae8 	.word	0x08015ae8
 8004068:	080041d1 	.word	0x080041d1
 800406c:	2000000c 	.word	0x2000000c
 8004070:	20004d40 	.word	0x20004d40

08004074 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b092      	sub	sp, #72	; 0x48
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800408c:	f107 030c 	add.w	r3, r7, #12
 8004090:	2230      	movs	r2, #48	; 0x30
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f010 fd3e 	bl	8014b16 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	2230      	movs	r2, #48	; 0x30
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f010 fd37 	bl	8014b16 <memset>

  for(q = p; q != NULL; q = q->next)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	643b      	str	r3, [r7, #64]	; 0x40
 80040ac:	e045      	b.n	800413a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80040ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d902      	bls.n	80040ba <low_level_output+0x46>
      return ERR_IF;
 80040b4:	f06f 030b 	mvn.w	r3, #11
 80040b8:	e065      	b.n	8004186 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80040ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	3348      	adds	r3, #72	; 0x48
 80040ca:	443b      	add	r3, r7
 80040cc:	3b3c      	subs	r3, #60	; 0x3c
 80040ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	895b      	ldrh	r3, [r3, #10]
 80040d4:	4619      	mov	r1, r3
 80040d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3348      	adds	r3, #72	; 0x48
 80040e2:	443b      	add	r3, r7
 80040e4:	3b38      	subs	r3, #56	; 0x38
 80040e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80040e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d011      	beq.n	8004112 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80040ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	f107 000c 	add.w	r0, r7, #12
 80040f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040f8:	460b      	mov	r3, r1
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	440b      	add	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	18c1      	adds	r1, r0, r3
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3348      	adds	r3, #72	; 0x48
 800410c:	443b      	add	r3, r7
 800410e:	3b34      	subs	r3, #52	; 0x34
 8004110:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800411a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	3348      	adds	r3, #72	; 0x48
 8004126:	443b      	add	r3, r7
 8004128:	3b34      	subs	r3, #52	; 0x34
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800412e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004130:	3301      	adds	r3, #1
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	643b      	str	r3, [r7, #64]	; 0x40
 800413a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1b6      	bne.n	80040ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	891b      	ldrh	r3, [r3, #8]
 8004144:	461a      	mov	r2, r3
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <low_level_output+0x11c>)
 8004148:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <low_level_output+0x11c>)
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004152:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <low_level_output+0x11c>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	f007 fb6b 	bl	800b834 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800415e:	490c      	ldr	r1, [pc, #48]	; (8004190 <low_level_output+0x11c>)
 8004160:	480c      	ldr	r0, [pc, #48]	; (8004194 <low_level_output+0x120>)
 8004162:	f7fd fa0d 	bl	8001580 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004166:	bf00      	nop
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <low_level_output+0x124>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fe17 	bl	8004da4 <osSemaphoreAcquire>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f5      	bne.n	8004168 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <low_level_output+0x120>)
 800417e:	f7fd fb93 	bl	80018a8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004182:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004186:	4618      	mov	r0, r3
 8004188:	3748      	adds	r7, #72	; 0x48
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20004d08 	.word	0x20004d08
 8004194:	20004c58 	.word	0x20004c58
 8004198:	20004c54 	.word	0x20004c54

0800419c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <low_level_input+0x2c>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d105      	bne.n	80041bc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80041b0:	f107 030c 	add.w	r3, r7, #12
 80041b4:	4619      	mov	r1, r3
 80041b6:	4805      	ldr	r0, [pc, #20]	; (80041cc <low_level_input+0x30>)
 80041b8:	f7fd fa3e 	bl	8001638 <HAL_ETH_ReadData>
  }

  return p;
 80041bc:	68fb      	ldr	r3, [r7, #12]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20004c4c 	.word	0x20004c4c
 80041cc:	20004c58 	.word	0x20004c58

080041d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <ethernetif_input+0x50>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fddb 	bl	8004da4 <osSemaphoreAcquire>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f5      	bne.n	80041e0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80041f4:	68b8      	ldr	r0, [r7, #8]
 80041f6:	f7ff ffd1 	bl	800419c <low_level_input>
 80041fa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	4798      	blx	r3
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f007 fa68 	bl	800b6e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ea      	bne.n	80041f4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800421e:	e7df      	b.n	80041e0 <ethernetif_input+0x10>
 8004220:	20004c50 	.word	0x20004c50

08004224 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <ethernetif_init+0x1c>
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <ethernetif_init+0x48>)
 8004234:	f240 222d 	movw	r2, #557	; 0x22d
 8004238:	490d      	ldr	r1, [pc, #52]	; (8004270 <ethernetif_init+0x4c>)
 800423a:	480e      	ldr	r0, [pc, #56]	; (8004274 <ethernetif_init+0x50>)
 800423c:	f010 fd08 	bl	8014c50 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2273      	movs	r2, #115	; 0x73
 8004244:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2274      	movs	r2, #116	; 0x74
 800424c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <ethernetif_init+0x54>)
 8004254:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <ethernetif_init+0x58>)
 800425a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fdd1 	bl	8003e04 <low_level_init>

  return ERR_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	08015af0 	.word	0x08015af0
 8004270:	08015b0c 	.word	0x08015b0c
 8004274:	08015b1c 	.word	0x08015b1c
 8004278:	080128b5 	.word	0x080128b5
 800427c:	08004075 	.word	0x08004075

08004280 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	4809      	ldr	r0, [pc, #36]	; (80042b4 <pbuf_free_custom+0x34>)
 8004290:	f006 fb66 	bl	800a960 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <pbuf_free_custom+0x38>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <pbuf_free_custom+0x38>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <pbuf_free_custom+0x3c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fde2 	bl	8004e70 <osSemaphoreRelease>
  }
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	08018b20 	.word	0x08018b20
 80042b8:	20004c4c 	.word	0x20004c4c
 80042bc:	20004c50 	.word	0x20004c50

080042c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80042c4:	f7fc fe60 	bl	8000f88 <HAL_GetTick>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08e      	sub	sp, #56	; 0x38
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a52      	ldr	r2, [pc, #328]	; (8004438 <HAL_ETH_MspInit+0x168>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f040 809e 	bne.w	8004430 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <HAL_ETH_MspInit+0x16c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4a50      	ldr	r2, [pc, #320]	; (800443c <HAL_ETH_MspInit+0x16c>)
 80042fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004300:	4b4e      	ldr	r3, [pc, #312]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	4b4b      	ldr	r3, [pc, #300]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	4a4a      	ldr	r2, [pc, #296]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004312:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004316:	6313      	str	r3, [r2, #48]	; 0x30
 8004318:	4b48      	ldr	r3, [pc, #288]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4b45      	ldr	r3, [pc, #276]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	4a44      	ldr	r2, [pc, #272]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800432a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800432e:	6313      	str	r3, [r2, #48]	; 0x30
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800433c:	4b3f      	ldr	r3, [pc, #252]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	4a3e      	ldr	r2, [pc, #248]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6313      	str	r3, [r2, #48]	; 0x30
 8004348:	4b3c      	ldr	r3, [pc, #240]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	4a38      	ldr	r2, [pc, #224]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6313      	str	r3, [r2, #48]	; 0x30
 8004360:	4b36      	ldr	r3, [pc, #216]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	4a32      	ldr	r2, [pc, #200]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	6313      	str	r3, [r2, #48]	; 0x30
 8004378:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_ETH_MspInit+0x16c>)
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	6313      	str	r3, [r2, #48]	; 0x30
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <HAL_ETH_MspInit+0x16c>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800439c:	2332      	movs	r3, #50	; 0x32
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a8:	2303      	movs	r3, #3
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043ac:	230b      	movs	r3, #11
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b4:	4619      	mov	r1, r3
 80043b6:	4822      	ldr	r0, [pc, #136]	; (8004440 <HAL_ETH_MspInit+0x170>)
 80043b8:	f7fe f9a6 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80043bc:	2386      	movs	r3, #134	; 0x86
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	2302      	movs	r3, #2
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043cc:	230b      	movs	r3, #11
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d4:	4619      	mov	r1, r3
 80043d6:	481b      	ldr	r0, [pc, #108]	; (8004444 <HAL_ETH_MspInit+0x174>)
 80043d8:	f7fe f996 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ea:	2303      	movs	r3, #3
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043ee:	230b      	movs	r3, #11
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f6:	4619      	mov	r1, r3
 80043f8:	4813      	ldr	r0, [pc, #76]	; (8004448 <HAL_ETH_MspInit+0x178>)
 80043fa:	f7fe f985 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80043fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440c:	2303      	movs	r3, #3
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004410:	230b      	movs	r3, #11
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004418:	4619      	mov	r1, r3
 800441a:	480c      	ldr	r0, [pc, #48]	; (800444c <HAL_ETH_MspInit+0x17c>)
 800441c:	f7fe f974 	bl	8002708 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	2105      	movs	r1, #5
 8004424:	203d      	movs	r0, #61	; 0x3d
 8004426:	f7fc fe97 	bl	8001158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800442a:	203d      	movs	r0, #61	; 0x3d
 800442c:	f7fc feb0 	bl	8001190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004430:	bf00      	nop
 8004432:	3738      	adds	r7, #56	; 0x38
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40028000 	.word	0x40028000
 800443c:	40023800 	.word	0x40023800
 8004440:	40020800 	.word	0x40020800
 8004444:	40020000 	.word	0x40020000
 8004448:	40020400 	.word	0x40020400
 800444c:	40021800 	.word	0x40021800

08004450 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <ETH_PHY_IO_Init+0x10>)
 8004456:	f7fd fcf1 	bl	8001e3c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20004c58 	.word	0x20004c58

08004464 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return 0;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4807      	ldr	r0, [pc, #28]	; (80044a4 <ETH_PHY_IO_ReadReg+0x30>)
 8004488:	f7fd fb40 	bl	8001b0c <HAL_ETH_ReadPHYRegister>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004496:	e000      	b.n	800449a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20004c58 	.word	0x20004c58

080044a8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	4807      	ldr	r0, [pc, #28]	; (80044d8 <ETH_PHY_IO_WriteReg+0x30>)
 80044bc:	f7fd fb71 	bl	8001ba2 <HAL_ETH_WritePHYRegister>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80044c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ca:	e000      	b.n	80044ce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20004c58 	.word	0x20004c58

080044dc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044e0:	f7fc fd52 	bl	8000f88 <HAL_GetTick>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0a0      	sub	sp, #128	; 0x80
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	2264      	movs	r2, #100	; 0x64
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f010 fb0a 	bl	8014b16 <memset>
  int32_t PHYLinkState = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	67fb      	str	r3, [r7, #124]	; 0x7c
 800450a:	2300      	movs	r3, #0
 800450c:	67bb      	str	r3, [r7, #120]	; 0x78
 800450e:	2300      	movs	r3, #0
 8004510:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004516:	483a      	ldr	r0, [pc, #232]	; (8004600 <ethernet_link_thread+0x114>)
 8004518:	f7fc fc8d 	bl	8000e36 <LAN8742_GetLinkState>
 800451c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800451e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00c      	beq.n	800454a <ethernet_link_thread+0x5e>
 8004530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004532:	2b01      	cmp	r3, #1
 8004534:	dc09      	bgt.n	800454a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004536:	4833      	ldr	r0, [pc, #204]	; (8004604 <ethernet_link_thread+0x118>)
 8004538:	f7fc ffa2 	bl	8001480 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800453c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800453e:	f006 fc8f 	bl	800ae60 <netif_set_down>
    netif_set_link_down(netif);
 8004542:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004544:	f006 fcf2 	bl	800af2c <netif_set_link_down>
 8004548:	e055      	b.n	80045f6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d14e      	bne.n	80045f6 <ethernet_link_thread+0x10a>
 8004558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455a:	2b01      	cmp	r3, #1
 800455c:	dd4b      	ble.n	80045f6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800455e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004560:	3b02      	subs	r3, #2
 8004562:	2b03      	cmp	r3, #3
 8004564:	d82a      	bhi.n	80045bc <ethernet_link_thread+0xd0>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <ethernet_link_thread+0x80>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458f 	.word	0x0800458f
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800457c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004580:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004586:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004588:	2301      	movs	r3, #1
 800458a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800458c:	e017      	b.n	80045be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800458e:	2300      	movs	r3, #0
 8004590:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004596:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004598:	2301      	movs	r3, #1
 800459a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800459c:	e00f      	b.n	80045be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800459e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80045a4:	2300      	movs	r3, #0
 80045a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80045a8:	2301      	movs	r3, #1
 80045aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80045ac:	e007      	b.n	80045be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80045b2:	2300      	movs	r3, #0
 80045b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80045ba:	e000      	b.n	80045be <ethernet_link_thread+0xd2>
    default:
      break;
 80045bc:	bf00      	nop
    }

    if(linkchanged)
 80045be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d018      	beq.n	80045f6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80045c4:	f107 0308 	add.w	r3, r7, #8
 80045c8:	4619      	mov	r1, r3
 80045ca:	480e      	ldr	r0, [pc, #56]	; (8004604 <ethernet_link_thread+0x118>)
 80045cc:	f7fd fb32 	bl	8001c34 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80045d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80045d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	4619      	mov	r1, r3
 80045de:	4809      	ldr	r0, [pc, #36]	; (8004604 <ethernet_link_thread+0x118>)
 80045e0:	f7fd fc12 	bl	8001e08 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80045e4:	4807      	ldr	r0, [pc, #28]	; (8004604 <ethernet_link_thread+0x118>)
 80045e6:	f7fc fe5d 	bl	80012a4 <HAL_ETH_Start>
      netif_set_up(netif);
 80045ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045ec:	f006 fbcc 	bl	800ad88 <netif_set_up>
      netif_set_link_up(netif);
 80045f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045f2:	f006 fc67 	bl	800aec4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80045f6:	2064      	movs	r0, #100	; 0x64
 80045f8:	f000 f9c2 	bl	8004980 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80045fc:	e78b      	b.n	8004516 <ethernet_link_thread+0x2a>
 80045fe:	bf00      	nop
 8004600:	20004d40 	.word	0x20004d40
 8004604:	20004c58 	.word	0x20004c58

08004608 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004610:	4812      	ldr	r0, [pc, #72]	; (800465c <HAL_ETH_RxAllocateCallback+0x54>)
 8004612:	f006 f931 	bl	800a878 <memp_malloc_pool>
 8004616:	60f8      	str	r0, [r7, #12]
  if (p)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d014      	beq.n	8004648 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f103 0220 	add.w	r2, r3, #32
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_ETH_RxAllocateCallback+0x58>)
 800462c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2241      	movs	r2, #65	; 0x41
 800463e:	2100      	movs	r1, #0
 8004640:	2000      	movs	r0, #0
 8004642:	f006 fe97 	bl	800b374 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004646:	e005      	b.n	8004654 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_ETH_RxAllocateCallback+0x5c>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	08018b20 	.word	0x08018b20
 8004660:	08004281 	.word	0x08004281
 8004664:	20004c4c 	.word	0x20004c4c

08004668 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3b20      	subs	r3, #32
 8004686:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	2200      	movs	r2, #0
 8004692:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e003      	b.n	80046b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e009      	b.n	80046d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	891a      	ldrh	r2, [r3, #8]
 80046c4:	887b      	ldrh	r3, [r7, #2]
 80046c6:	4413      	add	r3, r2
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f2      	bne.n	80046c0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fb2c 	bl	8003d3c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80046e4:	bf00      	nop
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f006 fff7 	bl	800b6e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60bb      	str	r3, [r7, #8]
  return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004722:	f3ef 8310 	mrs	r3, PRIMASK
 8004726:	607b      	str	r3, [r7, #4]
  return(result);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800472e:	f3ef 8311 	mrs	r3, BASEPRI
 8004732:	603b      	str	r3, [r7, #0]
  return(result);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <osKernelInitialize+0x3a>
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <osKernelInitialize+0x64>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004742:	f06f 0305 	mvn.w	r3, #5
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <osKernelInitialize+0x64>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <osKernelInitialize+0x64>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e002      	b.n	8004764 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004762:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20004d60 	.word	0x20004d60

08004778 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	60bb      	str	r3, [r7, #8]
  return(result);
 8004784:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478a:	f3ef 8310 	mrs	r3, PRIMASK
 800478e:	607b      	str	r3, [r7, #4]
  return(result);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004796:	f3ef 8311 	mrs	r3, BASEPRI
 800479a:	603b      	str	r3, [r7, #0]
  return(result);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <osKernelStart+0x3a>
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <osKernelStart+0x68>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d103      	bne.n	80047b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80047aa:	f06f 0305 	mvn.w	r3, #5
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e010      	b.n	80047d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <osKernelStart+0x68>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d109      	bne.n	80047ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80047ba:	f7ff ffa2 	bl	8004702 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <osKernelStart+0x68>)
 80047c0:	2202      	movs	r2, #2
 80047c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80047c4:	f002 f9e4 	bl	8006b90 <vTaskStartScheduler>
      stat = osOK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e002      	b.n	80047d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047d4:	68fb      	ldr	r3, [r7, #12]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20004d60 	.word	0x20004d60

080047e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ea:	f3ef 8305 	mrs	r3, IPSR
 80047ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f6:	f3ef 8310 	mrs	r3, PRIMASK
 80047fa:	607b      	str	r3, [r7, #4]
  return(result);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004802:	f3ef 8311 	mrs	r3, BASEPRI
 8004806:	603b      	str	r3, [r7, #0]
  return(result);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <osKernelGetTickCount+0x3a>
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <osKernelGetTickCount+0x4c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d103      	bne.n	800481e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004816:	f002 faed 	bl	8006df4 <xTaskGetTickCountFromISR>
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	e002      	b.n	8004824 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800481e:	f002 fad9 	bl	8006dd4 <xTaskGetTickCount>
 8004822:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004824:	68fb      	ldr	r3, [r7, #12]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20004d60 	.word	0x20004d60

08004834 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b090      	sub	sp, #64	; 0x40
 8004838:	af04      	add	r7, sp, #16
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004844:	f3ef 8305 	mrs	r3, IPSR
 8004848:	61fb      	str	r3, [r7, #28]
  return(result);
 800484a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 808f 	bne.w	8004970 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004852:	f3ef 8310 	mrs	r3, PRIMASK
 8004856:	61bb      	str	r3, [r7, #24]
  return(result);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d105      	bne.n	800486a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800485e:	f3ef 8311 	mrs	r3, BASEPRI
 8004862:	617b      	str	r3, [r7, #20]
  return(result);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <osThreadNew+0x3e>
 800486a:	4b44      	ldr	r3, [pc, #272]	; (800497c <osThreadNew+0x148>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d07e      	beq.n	8004970 <osThreadNew+0x13c>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d07b      	beq.n	8004970 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800487c:	2318      	movs	r3, #24
 800487e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004888:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d045      	beq.n	800491c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <osThreadNew+0x6a>
        name = attr->name;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <osThreadNew+0x90>
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	2b38      	cmp	r3, #56	; 0x38
 80048b6:	d805      	bhi.n	80048c4 <osThreadNew+0x90>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <osThreadNew+0x94>
        return (NULL);
 80048c4:	2300      	movs	r3, #0
 80048c6:	e054      	b.n	8004972 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00e      	beq.n	80048fe <osThreadNew+0xca>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2bbb      	cmp	r3, #187	; 0xbb
 80048e6:	d90a      	bls.n	80048fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <osThreadNew+0xca>
        mem = 1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	e010      	b.n	8004920 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <osThreadNew+0xec>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <osThreadNew+0xec>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <osThreadNew+0xec>
          mem = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	e001      	b.n	8004920 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d110      	bne.n	8004948 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 ff31 	bl	80067a4 <xTaskCreateStatic>
 8004942:	4603      	mov	r3, r0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e013      	b.n	8004970 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d110      	bne.n	8004970 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	b29a      	uxth	r2, r3
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f001 ff82 	bl	800686a <xTaskCreate>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <osThreadNew+0x13c>
          hTask = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004970:	693b      	ldr	r3, [r7, #16]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3730      	adds	r7, #48	; 0x30
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20004d60 	.word	0x20004d60

08004980 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004988:	f3ef 8305 	mrs	r3, IPSR
 800498c:	613b      	str	r3, [r7, #16]
  return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10f      	bne.n	80049b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004994:	f3ef 8310 	mrs	r3, PRIMASK
 8004998:	60fb      	str	r3, [r7, #12]
  return(result);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049a0:	f3ef 8311 	mrs	r3, BASEPRI
 80049a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <osDelay+0x3c>
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <osDelay+0x58>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d103      	bne.n	80049bc <osDelay+0x3c>
    stat = osErrorISR;
 80049b4:	f06f 0305 	mvn.w	r3, #5
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e007      	b.n	80049cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f002 f8ac 	bl	8006b24 <vTaskDelay>
    }
  }

  return (stat);
 80049cc:	697b      	ldr	r3, [r7, #20]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20004d60 	.word	0x20004d60

080049dc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e8:	f3ef 8305 	mrs	r3, IPSR
 80049ec:	613b      	str	r3, [r7, #16]
  return(result);
 80049ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 8085 	bne.w	8004b00 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f6:	f3ef 8310 	mrs	r3, PRIMASK
 80049fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a02:	f3ef 8311 	mrs	r3, BASEPRI
 8004a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <osMutexNew+0x3a>
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <osMutexNew+0x130>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d074      	beq.n	8004b00 <osMutexNew+0x124>
    if (attr != NULL) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	e001      	b.n	8004a28 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <osMutexNew+0x5c>
      rmtx = 1U;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e001      	b.n	8004a3c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d15c      	bne.n	8004b00 <osMutexNew+0x124>
      mem = -1;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d015      	beq.n	8004a7e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d006      	beq.n	8004a68 <osMutexNew+0x8c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b4f      	cmp	r3, #79	; 0x4f
 8004a60:	d902      	bls.n	8004a68 <osMutexNew+0x8c>
          mem = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	e00c      	b.n	8004a82 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <osMutexNew+0xa6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <osMutexNew+0xa6>
            mem = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e001      	b.n	8004a82 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d112      	bne.n	8004aae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4619      	mov	r1, r3
 8004a94:	2004      	movs	r0, #4
 8004a96:	f000 feb8 	bl	800580a <xQueueCreateMutexStatic>
 8004a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a9c:	e016      	b.n	8004acc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	f000 feb0 	bl	800580a <xQueueCreateMutexStatic>
 8004aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8004aac:	e00e      	b.n	8004acc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004aba:	2004      	movs	r0, #4
 8004abc:	f000 fe8d 	bl	80057da <xQueueCreateMutex>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24
 8004ac2:	e003      	b.n	8004acc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	f000 fe88 	bl	80057da <xQueueCreateMutex>
 8004aca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <osMutexNew+0x110>
        if (attr != NULL) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <osMutexNew+0x104>
          name = attr->name;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e001      	b.n	8004ae4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ae4:	6979      	ldr	r1, [r7, #20]
 8004ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae8:	f001 fdd4 	bl	8006694 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d006      	beq.n	8004b00 <osMutexNew+0x124>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3728      	adds	r7, #40	; 0x28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20004d60 	.word	0x20004d60

08004b10 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2e:	f3ef 8305 	mrs	r3, IPSR
 8004b32:	613b      	str	r3, [r7, #16]
  return(result);
 8004b34:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b46:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <osMutexAcquire+0x52>
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <osMutexAcquire+0xb8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d103      	bne.n	8004b62 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004b5a:	f06f 0305 	mvn.w	r3, #5
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e02c      	b.n	8004bbc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004b68:	f06f 0303 	mvn.w	r3, #3
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	e025      	b.n	8004bbc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	69b8      	ldr	r0, [r7, #24]
 8004b7a:	f000 fe97 	bl	80058ac <xQueueTakeMutexRecursive>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d01b      	beq.n	8004bbc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004b8a:	f06f 0301 	mvn.w	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	e014      	b.n	8004bbc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004b92:	f06f 0302 	mvn.w	r3, #2
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e010      	b.n	8004bbc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	69b8      	ldr	r0, [r7, #24]
 8004b9e:	f001 fa51 	bl	8006044 <xQueueSemaphoreTake>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d009      	beq.n	8004bbc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004bae:	f06f 0301 	mvn.w	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e002      	b.n	8004bbc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004bb6:	f06f 0302 	mvn.w	r3, #2
 8004bba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20004d60 	.word	0x20004d60

08004bcc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be8:	f3ef 8305 	mrs	r3, IPSR
 8004bec:	613b      	str	r3, [r7, #16]
  return(result);
 8004bee:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10f      	bne.n	8004c14 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c00:	f3ef 8311 	mrs	r3, BASEPRI
 8004c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <osMutexRelease+0x50>
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <osMutexRelease+0x9c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d103      	bne.n	8004c1c <osMutexRelease+0x50>
    stat = osErrorISR;
 8004c14:	f06f 0305 	mvn.w	r3, #5
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e01f      	b.n	8004c5c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004c22:	f06f 0303 	mvn.w	r3, #3
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e018      	b.n	8004c5c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004c30:	69b8      	ldr	r0, [r7, #24]
 8004c32:	f000 fe05 	bl	8005840 <xQueueGiveMutexRecursive>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d00f      	beq.n	8004c5c <osMutexRelease+0x90>
        stat = osErrorResource;
 8004c3c:	f06f 0302 	mvn.w	r3, #2
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e00b      	b.n	8004c5c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004c44:	2300      	movs	r3, #0
 8004c46:	2200      	movs	r2, #0
 8004c48:	2100      	movs	r1, #0
 8004c4a:	69b8      	ldr	r0, [r7, #24]
 8004c4c:	f000 fed8 	bl	8005a00 <xQueueGenericSend>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d002      	beq.n	8004c5c <osMutexRelease+0x90>
        stat = osErrorResource;
 8004c56:	f06f 0302 	mvn.w	r3, #2
 8004c5a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20004d60 	.word	0x20004d60

08004c6c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08c      	sub	sp, #48	; 0x30
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7c:	f3ef 8305 	mrs	r3, IPSR
 8004c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c82:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 8086 	bne.w	8004d96 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c96:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <osSemaphoreNew+0x3e>
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <osSemaphoreNew+0x134>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d075      	beq.n	8004d96 <osSemaphoreNew+0x12a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d072      	beq.n	8004d96 <osSemaphoreNew+0x12a>
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d86e      	bhi.n	8004d96 <osSemaphoreNew+0x12a>
    mem = -1;
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cbc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <osSemaphoreNew+0x6e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b4f      	cmp	r3, #79	; 0x4f
 8004cd2:	d902      	bls.n	8004cda <osSemaphoreNew+0x6e>
        mem = 1;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	e00c      	b.n	8004cf4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d108      	bne.n	8004cf4 <osSemaphoreNew+0x88>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <osSemaphoreNew+0x88>
          mem = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	e001      	b.n	8004cf4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfa:	d04c      	beq.n	8004d96 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d128      	bne.n	8004d54 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10a      	bne.n	8004d1e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	9200      	str	r2, [sp, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2100      	movs	r1, #0
 8004d14:	2001      	movs	r0, #1
 8004d16:	f000 fc5f 	bl	80055d8 <xQueueGenericCreateStatic>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d1c:	e005      	b.n	8004d2a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004d1e:	2203      	movs	r2, #3
 8004d20:	2100      	movs	r1, #0
 8004d22:	2001      	movs	r0, #1
 8004d24:	f000 fcda 	bl	80056dc <xQueueGenericCreate>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d022      	beq.n	8004d76 <osSemaphoreNew+0x10a>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01f      	beq.n	8004d76 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d36:	2300      	movs	r3, #0
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d3e:	f000 fe5f 	bl	8005a00 <xQueueGenericSend>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d016      	beq.n	8004d76 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d4a:	f001 fb55 	bl	80063f8 <vQueueDelete>
            hSemaphore = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
 8004d52:	e010      	b.n	8004d76 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d108      	bne.n	8004d6c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fdda 	bl	800591c <xQueueCreateCountingSemaphoreStatic>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24
 8004d6a:	e004      	b.n	8004d76 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fe0f 	bl	8005992 <xQueueCreateCountingSemaphore>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <osSemaphoreNew+0x11e>
          name = attr->name;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e001      	b.n	8004d8e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d8e:	69f9      	ldr	r1, [r7, #28]
 8004d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d92:	f001 fc7f 	bl	8006694 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20004d60 	.word	0x20004d60

08004da4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004dbc:	f06f 0303 	mvn.w	r3, #3
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e04b      	b.n	8004e5c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc4:	f3ef 8305 	mrs	r3, IPSR
 8004dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8004dca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8004de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d026      	beq.n	8004e36 <osSemaphoreAcquire+0x92>
 8004de8:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <osSemaphoreAcquire+0xc4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d122      	bne.n	8004e36 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004df6:	f06f 0303 	mvn.w	r3, #3
 8004dfa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004dfc:	e02d      	b.n	8004e5a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	461a      	mov	r2, r3
 8004e08:	2100      	movs	r1, #0
 8004e0a:	69b8      	ldr	r0, [r7, #24]
 8004e0c:	f001 fa2e 	bl	800626c <xQueueReceiveFromISR>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d003      	beq.n	8004e1e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004e16:	f06f 0302 	mvn.w	r3, #2
 8004e1a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e1c:	e01d      	b.n	8004e5a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <osSemaphoreAcquire+0xb6>
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <osSemaphoreAcquire+0xc8>)
 8004e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004e34:	e011      	b.n	8004e5a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	69b8      	ldr	r0, [r7, #24]
 8004e3a:	f001 f903 	bl	8006044 <xQueueSemaphoreTake>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d00b      	beq.n	8004e5c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004e4a:	f06f 0301 	mvn.w	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e004      	b.n	8004e5c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004e52:	f06f 0302 	mvn.w	r3, #2
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e000      	b.n	8004e5c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004e5a:	bf00      	nop
      }
    }
  }

  return (stat);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20004d60 	.word	0x20004d60
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004e86:	f06f 0303 	mvn.w	r3, #3
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e03e      	b.n	8004f0c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8e:	f3ef 8305 	mrs	r3, IPSR
 8004e92:	617b      	str	r3, [r7, #20]
  return(result);
 8004e94:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	613b      	str	r3, [r7, #16]
  return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <osSemaphoreRelease+0x80>
 8004eb2:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <osSemaphoreRelease+0xa8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d11a      	bne.n	8004ef0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	69b8      	ldr	r0, [r7, #24]
 8004ec6:	f000 ff41 	bl	8005d4c <xQueueGiveFromISR>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d003      	beq.n	8004ed8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004ed0:	f06f 0302 	mvn.w	r3, #2
 8004ed4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ed6:	e018      	b.n	8004f0a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <osSemaphoreRelease+0x9a>
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <osSemaphoreRelease+0xac>)
 8004ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004eee:	e00c      	b.n	8004f0a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	69b8      	ldr	r0, [r7, #24]
 8004ef8:	f000 fd82 	bl	8005a00 <xQueueGenericSend>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d004      	beq.n	8004f0c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004f02:	f06f 0302 	mvn.w	r3, #2
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e000      	b.n	8004f0c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f0a:	bf00      	nop
    }
  }

  return (stat);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20004d60 	.word	0x20004d60
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2c:	f3ef 8305 	mrs	r3, IPSR
 8004f30:	617b      	str	r3, [r7, #20]
  return(result);
 8004f32:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10f      	bne.n	8004f58 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f38:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3c:	613b      	str	r3, [r7, #16]
  return(result);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d105      	bne.n	8004f50 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f44:	f3ef 8311 	mrs	r3, BASEPRI
 8004f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <osSemaphoreDelete+0x40>
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <osSemaphoreDelete+0x68>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d103      	bne.n	8004f60 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8004f58:	f06f 0305 	mvn.w	r3, #5
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	e00e      	b.n	8004f7e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8004f66:	f06f 0303 	mvn.w	r3, #3
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e007      	b.n	8004f7e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8004f6e:	69b8      	ldr	r0, [r7, #24]
 8004f70:	f001 fbba 	bl	80066e8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8004f78:	69b8      	ldr	r0, [r7, #24]
 8004f7a:	f001 fa3d 	bl	80063f8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20004d60 	.word	0x20004d60

08004f8c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f9c:	f3ef 8305 	mrs	r3, IPSR
 8004fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fa2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d16f      	bne.n	8005088 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fac:	617b      	str	r3, [r7, #20]
  return(result);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb8:	613b      	str	r3, [r7, #16]
  return(result);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <osMessageQueueNew+0x3c>
 8004fc0:	4b34      	ldr	r3, [pc, #208]	; (8005094 <osMessageQueueNew+0x108>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d05f      	beq.n	8005088 <osMessageQueueNew+0xfc>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d05c      	beq.n	8005088 <osMessageQueueNew+0xfc>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d059      	beq.n	8005088 <osMessageQueueNew+0xfc>
    mem = -1;
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d029      	beq.n	8005034 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d012      	beq.n	800500e <osMessageQueueNew+0x82>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b4f      	cmp	r3, #79	; 0x4f
 8004fee:	d90e      	bls.n	800500e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	429a      	cmp	r2, r3
 8005006:	d302      	bcc.n	800500e <osMessageQueueNew+0x82>
        mem = 1;
 8005008:	2301      	movs	r3, #1
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	e014      	b.n	8005038 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d110      	bne.n	8005038 <osMessageQueueNew+0xac>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <osMessageQueueNew+0xac>
          mem = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	e001      	b.n	8005038 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d10b      	bne.n	8005056 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2100      	movs	r1, #0
 8005048:	9100      	str	r1, [sp, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fac3 	bl	80055d8 <xQueueGenericCreateStatic>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24
 8005054:	e008      	b.n	8005068 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800505c:	2200      	movs	r2, #0
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fb3b 	bl	80056dc <xQueueGenericCreate>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	e001      	b.n	8005080 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005084:	f001 fb06 	bl	8006694 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800508a:	4618      	mov	r0, r3
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20004d60 	.word	0x20004d60

08005098 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b0:	f3ef 8305 	mrs	r3, IPSR
 80050b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80050b6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050bc:	f3ef 8310 	mrs	r3, PRIMASK
 80050c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050c8:	f3ef 8311 	mrs	r3, BASEPRI
 80050cc:	617b      	str	r3, [r7, #20]
  return(result);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02c      	beq.n	800512e <osMessageQueuePut+0x96>
 80050d4:	4b28      	ldr	r3, [pc, #160]	; (8005178 <osMessageQueuePut+0xe0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d128      	bne.n	800512e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <osMessageQueuePut+0x56>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <osMessageQueuePut+0x56>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80050ee:	f06f 0303 	mvn.w	r3, #3
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050f4:	e039      	b.n	800516a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80050fa:	f107 0210 	add.w	r2, r7, #16
 80050fe:	2300      	movs	r3, #0
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	6a38      	ldr	r0, [r7, #32]
 8005104:	f000 fd82 	bl	8005c0c <xQueueGenericSendFromISR>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d003      	beq.n	8005116 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800510e:	f06f 0302 	mvn.w	r3, #2
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005114:	e029      	b.n	800516a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d026      	beq.n	800516a <osMessageQueuePut+0xd2>
 800511c:	4b17      	ldr	r3, [pc, #92]	; (800517c <osMessageQueuePut+0xe4>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800512c:	e01d      	b.n	800516a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <osMessageQueuePut+0xa2>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800513a:	f06f 0303 	mvn.w	r3, #3
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
 8005140:	e014      	b.n	800516c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005142:	2300      	movs	r3, #0
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	6a38      	ldr	r0, [r7, #32]
 800514a:	f000 fc59 	bl	8005a00 <xQueueGenericSend>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d00b      	beq.n	800516c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800515a:	f06f 0301 	mvn.w	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
 8005160:	e004      	b.n	800516c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005162:	f06f 0302 	mvn.w	r3, #2
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
 8005168:	e000      	b.n	800516c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800516a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800516e:	4618      	mov	r0, r3
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20004d60 	.word	0x20004d60
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005192:	2300      	movs	r3, #0
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005196:	f3ef 8305 	mrs	r3, IPSR
 800519a:	61fb      	str	r3, [r7, #28]
  return(result);
 800519c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a2:	f3ef 8310 	mrs	r3, PRIMASK
 80051a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d105      	bne.n	80051ba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051ae:	f3ef 8311 	mrs	r3, BASEPRI
 80051b2:	617b      	str	r3, [r7, #20]
  return(result);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02c      	beq.n	8005214 <osMessageQueueGet+0x94>
 80051ba:	4b28      	ldr	r3, [pc, #160]	; (800525c <osMessageQueueGet+0xdc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d128      	bne.n	8005214 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <osMessageQueueGet+0x54>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <osMessageQueueGet+0x54>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80051d4:	f06f 0303 	mvn.w	r3, #3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051da:	e038      	b.n	800524e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80051e0:	f107 0310 	add.w	r3, r7, #16
 80051e4:	461a      	mov	r2, r3
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	6a38      	ldr	r0, [r7, #32]
 80051ea:	f001 f83f 	bl	800626c <xQueueReceiveFromISR>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d003      	beq.n	80051fc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80051f4:	f06f 0302 	mvn.w	r3, #2
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051fa:	e028      	b.n	800524e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d025      	beq.n	800524e <osMessageQueueGet+0xce>
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <osMessageQueueGet+0xe0>)
 8005204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005212:	e01c      	b.n	800524e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <osMessageQueueGet+0xa0>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005220:	f06f 0303 	mvn.w	r3, #3
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e013      	b.n	8005250 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	6a38      	ldr	r0, [r7, #32]
 800522e:	f000 fe23 	bl	8005e78 <xQueueReceive>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d00b      	beq.n	8005250 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800523e:	f06f 0301 	mvn.w	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	e004      	b.n	8005250 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005246:	f06f 0302 	mvn.w	r3, #2
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
 800524c:	e000      	b.n	8005250 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800524e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005252:	4618      	mov	r0, r3
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20004d60 	.word	0x20004d60
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	e01e      	b.n	80052ba <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527c:	f3ef 8305 	mrs	r3, IPSR
 8005280:	617b      	str	r3, [r7, #20]
  return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	613b      	str	r3, [r7, #16]
  return(result);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
 8005298:	60fb      	str	r3, [r7, #12]
  return(result);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <osMessageQueueGetCount+0x4e>
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <osMessageQueueGetCount+0x60>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d104      	bne.n	80052b2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80052a8:	69b8      	ldr	r0, [r7, #24]
 80052aa:	f001 f885 	bl	80063b8 <uxQueueMessagesWaitingFromISR>
 80052ae:	61f8      	str	r0, [r7, #28]
 80052b0:	e003      	b.n	80052ba <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80052b2:	69b8      	ldr	r0, [r7, #24]
 80052b4:	f001 f860 	bl	8006378 <uxQueueMessagesWaiting>
 80052b8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80052ba:	69fb      	ldr	r3, [r7, #28]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20004d60 	.word	0x20004d60

080052c8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d4:	f3ef 8305 	mrs	r3, IPSR
 80052d8:	617b      	str	r3, [r7, #20]
  return(result);
 80052da:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10f      	bne.n	8005300 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e0:	f3ef 8310 	mrs	r3, PRIMASK
 80052e4:	613b      	str	r3, [r7, #16]
  return(result);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052ec:	f3ef 8311 	mrs	r3, BASEPRI
 80052f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <osMessageQueueDelete+0x40>
 80052f8:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <osMessageQueueDelete+0x68>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d103      	bne.n	8005308 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8005300:	f06f 0305 	mvn.w	r3, #5
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	e00e      	b.n	8005326 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800530e:	f06f 0303 	mvn.w	r3, #3
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	e007      	b.n	8005326 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005316:	69b8      	ldr	r0, [r7, #24]
 8005318:	f001 f9e6 	bl	80066e8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8005320:	69b8      	ldr	r0, [r7, #24]
 8005322:	f001 f869 	bl	80063f8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20004d60 	.word	0x20004d60

08005334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <vApplicationGetIdleTaskMemory+0x2c>)
 8005344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a06      	ldr	r2, [pc, #24]	; (8005364 <vApplicationGetIdleTaskMemory+0x30>)
 800534a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	601a      	str	r2, [r3, #0]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20004d64 	.word	0x20004d64
 8005364:	20004e20 	.word	0x20004e20

08005368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a07      	ldr	r2, [pc, #28]	; (8005394 <vApplicationGetTimerTaskMemory+0x2c>)
 8005378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a06      	ldr	r2, [pc, #24]	; (8005398 <vApplicationGetTimerTaskMemory+0x30>)
 800537e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20005020 	.word	0x20005020
 8005398:	200050dc 	.word	0x200050dc

0800539c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f103 0208 	add.w	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f103 0208 	add.w	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f103 0208 	add.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005454:	d103      	bne.n	800545e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e00c      	b.n	8005478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3308      	adds	r3, #8
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e002      	b.n	800546c <vListInsert+0x2e>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	429a      	cmp	r2, r3
 8005476:	d2f6      	bcs.n	8005466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6892      	ldr	r2, [r2, #8]
 80054c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6852      	ldr	r2, [r2, #4]
 80054d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d103      	bne.n	80054e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	1e5a      	subs	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10c      	bne.n	8005532 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	b672      	cpsid	i
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	b662      	cpsie	i
 800552c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005532:	f002 fe13 	bl	800815c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	441a      	add	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	3b01      	subs	r3, #1
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	441a      	add	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	22ff      	movs	r2, #255	; 0xff
 8005576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	22ff      	movs	r2, #255	; 0xff
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d114      	bne.n	80055b2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01a      	beq.n	80055c6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3310      	adds	r3, #16
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fdb5 	bl	8007104 <xTaskRemoveFromEventList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d012      	beq.n	80055c6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <xQueueGenericReset+0xd0>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e009      	b.n	80055c6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3310      	adds	r3, #16
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fef0 	bl	800539c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff feeb 	bl	800539c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055c6:	f002 fdfd 	bl	80081c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055ca:	2301      	movs	r3, #1
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10c      	bne.n	8005606 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10c      	bne.n	8005626 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	b672      	cpsid	i
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	b662      	cpsie	i
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <xQueueGenericCreateStatic+0x5a>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <xQueueGenericCreateStatic+0x5e>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericCreateStatic+0x60>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	623b      	str	r3, [r7, #32]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <xQueueGenericCreateStatic+0x8a>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <xQueueGenericCreateStatic+0x8e>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericCreateStatic+0x90>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10c      	bne.n	8005686 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	b672      	cpsid	i
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	b662      	cpsie	i
 8005680:	61fb      	str	r3, [r7, #28]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005686:	2350      	movs	r3, #80	; 0x50
 8005688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b50      	cmp	r3, #80	; 0x50
 800568e:	d00c      	beq.n	80056aa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	b672      	cpsid	i
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	b662      	cpsie	i
 80056a4:	61bb      	str	r3, [r7, #24]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f847 	bl	8005760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3730      	adds	r7, #48	; 0x30
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10c      	bne.n	800570a <xQueueGenericCreate+0x2e>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	b672      	cpsid	i
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	b662      	cpsie	i
 8005704:	613b      	str	r3, [r7, #16]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005710:	2300      	movs	r3, #0
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e004      	b.n	8005720 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	3350      	adds	r3, #80	; 0x50
 8005724:	4618      	mov	r0, r3
 8005726:	f002 fe45 	bl	80083b4 <pvPortMalloc>
 800572a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d011      	beq.n	8005756 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3350      	adds	r3, #80	; 0x50
 800573a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005744:	79fa      	ldrb	r2, [r7, #7]
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f805 	bl	8005760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005756:	69bb      	ldr	r3, [r7, #24]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e002      	b.n	8005782 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800578e:	2101      	movs	r1, #1
 8005790:	69b8      	ldr	r0, [r7, #24]
 8005792:	f7ff feb7 	bl	8005504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00e      	beq.n	80057d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80057c6:	2300      	movs	r3, #0
 80057c8:	2200      	movs	r2, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f917 	bl	8005a00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	4603      	mov	r3, r0
 80057e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057e4:	2301      	movs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6939      	ldr	r1, [r7, #16]
 80057f2:	6978      	ldr	r0, [r7, #20]
 80057f4:	f7ff ff72 	bl	80056dc <xQueueGenericCreate>
 80057f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff ffd3 	bl	80057a6 <prvInitialiseMutex>

		return xNewQueue;
 8005800:	68fb      	ldr	r3, [r7, #12]
	}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800580a:	b580      	push	{r7, lr}
 800580c:	b088      	sub	sp, #32
 800580e:	af02      	add	r7, sp, #8
 8005810:	4603      	mov	r3, r0
 8005812:	6039      	str	r1, [r7, #0]
 8005814:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005816:	2301      	movs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	6939      	ldr	r1, [r7, #16]
 8005828:	6978      	ldr	r0, [r7, #20]
 800582a:	f7ff fed5 	bl	80055d8 <xQueueGenericCreateStatic>
 800582e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ffb8 	bl	80057a6 <prvInitialiseMutex>

		return xNewQueue;
 8005836:	68fb      	ldr	r3, [r7, #12]
	}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10c      	bne.n	800586c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	60fb      	str	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	689c      	ldr	r4, [r3, #8]
 8005870:	f001 fe12 	bl	8007498 <xTaskGetCurrentTaskHandle>
 8005874:	4603      	mov	r3, r0
 8005876:	429c      	cmp	r4, r3
 8005878:	d111      	bne.n	800589e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	1e5a      	subs	r2, r3, #1
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800588c:	2300      	movs	r3, #0
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	6938      	ldr	r0, [r7, #16]
 8005894:	f000 f8b4 	bl	8005a00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e001      	b.n	80058a2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80058a2:	697b      	ldr	r3, [r7, #20]
	}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	60fb      	str	r3, [r7, #12]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	689c      	ldr	r4, [r3, #8]
 80058de:	f001 fddb 	bl	8007498 <xTaskGetCurrentTaskHandle>
 80058e2:	4603      	mov	r3, r0
 80058e4:	429c      	cmp	r4, r3
 80058e6:	d107      	bne.n	80058f8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80058f2:	2301      	movs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e00c      	b.n	8005912 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f000 fba2 	bl	8006044 <xQueueSemaphoreTake>
 8005900:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005912:	697b      	ldr	r3, [r7, #20]
	}
 8005914:	4618      	mov	r0, r3
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd90      	pop	{r4, r7, pc}

0800591c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10c      	bne.n	8005948 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	b672      	cpsid	i
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	b662      	cpsie	i
 8005942:	61bb      	str	r3, [r7, #24]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d90c      	bls.n	800596a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	b672      	cpsid	i
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	b662      	cpsie	i
 8005964:	617b      	str	r3, [r7, #20]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800596a:	2302      	movs	r3, #2
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	2100      	movs	r1, #0
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff fe2f 	bl	80055d8 <xQueueGenericCreateStatic>
 800597a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005988:	69fb      	ldr	r3, [r7, #28]
	}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10c      	bne.n	80059bc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	b672      	cpsid	i
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	b662      	cpsie	i
 80059b6:	613b      	str	r3, [r7, #16]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d90c      	bls.n	80059de <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	b672      	cpsid	i
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	b662      	cpsie	i
 80059d8:	60fb      	str	r3, [r7, #12]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80059de:	2202      	movs	r2, #2
 80059e0:	2100      	movs	r1, #0
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe7a 	bl	80056dc <xQueueGenericCreate>
 80059e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80059f6:	697b      	ldr	r3, [r7, #20]
	}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	; 0x38
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10c      	bne.n	8005a36 <xQueueGenericSend+0x36>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	b672      	cpsid	i
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	b662      	cpsie	i
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <xQueueGenericSend+0x44>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <xQueueGenericSend+0x48>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <xQueueGenericSend+0x4a>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10c      	bne.n	8005a68 <xQueueGenericSend+0x68>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	b672      	cpsid	i
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	b662      	cpsie	i
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d103      	bne.n	8005a76 <xQueueGenericSend+0x76>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <xQueueGenericSend+0x7a>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <xQueueGenericSend+0x7c>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10c      	bne.n	8005a9a <xQueueGenericSend+0x9a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	b672      	cpsid	i
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	b662      	cpsie	i
 8005a94:	623b      	str	r3, [r7, #32]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a9a:	f001 fd0d 	bl	80074b8 <xTaskGetSchedulerState>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <xQueueGenericSend+0xaa>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <xQueueGenericSend+0xae>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueGenericSend+0xb0>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <xQueueGenericSend+0xce>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	b672      	cpsid	i
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	b662      	cpsie	i
 8005ac8:	61fb      	str	r3, [r7, #28]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ace:	f002 fb45 	bl	800815c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <xQueueGenericSend+0xe4>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d129      	bne.n	8005b38 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aea:	f000 fcc2 	bl	8006472 <prvCopyDataToQueue>
 8005aee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d010      	beq.n	8005b1a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	3324      	adds	r3, #36	; 0x24
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fb01 	bl	8007104 <xTaskRemoveFromEventList>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d013      	beq.n	8005b30 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b08:	4b3f      	ldr	r3, [pc, #252]	; (8005c08 <xQueueGenericSend+0x208>)
 8005b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	e00a      	b.n	8005b30 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <xQueueGenericSend+0x208>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b30:	f002 fb48 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e063      	b.n	8005c00 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b3e:	f002 fb41 	bl	80081c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e05c      	b.n	8005c00 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b4c:	f107 0314 	add.w	r3, r7, #20
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fb3d 	bl	80071d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b56:	2301      	movs	r3, #1
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b5a:	f002 fb33 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b5e:	f001 f88b 	bl	8006c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b62:	f002 fafb 	bl	800815c <vPortEnterCritical>
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b72:	d103      	bne.n	8005b7c <xQueueGenericSend+0x17c>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b88:	d103      	bne.n	8005b92 <xQueueGenericSend+0x192>
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b92:	f002 fb17 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b96:	1d3a      	adds	r2, r7, #4
 8005b98:	f107 0314 	add.w	r3, r7, #20
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fb2c 	bl	80071fc <xTaskCheckForTimeOut>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d124      	bne.n	8005bf4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bac:	f000 fd59 	bl	8006662 <prvIsQueueFull>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d018      	beq.n	8005be8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	3310      	adds	r3, #16
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fa4c 	bl	800705c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc6:	f000 fce4 	bl	8006592 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bca:	f001 f863 	bl	8006c94 <xTaskResumeAll>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f47f af7c 	bne.w	8005ace <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <xQueueGenericSend+0x208>)
 8005bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	e772      	b.n	8005ace <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bea:	f000 fcd2 	bl	8006592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bee:	f001 f851 	bl	8006c94 <xTaskResumeAll>
 8005bf2:	e76c      	b.n	8005ace <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf6:	f000 fccc 	bl	8006592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bfa:	f001 f84b 	bl	8006c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3738      	adds	r7, #56	; 0x38
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	b672      	cpsid	i
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	b662      	cpsie	i
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <xQueueGenericSendFromISR+0x40>
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <xQueueGenericSendFromISR+0x44>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <xQueueGenericSendFromISR+0x46>
 8005c50:	2300      	movs	r3, #0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10c      	bne.n	8005c70 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	b672      	cpsid	i
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	b662      	cpsie	i
 8005c6a:	623b      	str	r3, [r7, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d103      	bne.n	8005c7e <xQueueGenericSendFromISR+0x72>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <xQueueGenericSendFromISR+0x76>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <xQueueGenericSendFromISR+0x78>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10c      	bne.n	8005ca2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	b672      	cpsid	i
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	b662      	cpsie	i
 8005c9c:	61fb      	str	r3, [r7, #28]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca2:	f002 fb43 	bl	800832c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	b672      	cpsid	i
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	b662      	cpsie	i
 8005cbe:	61ba      	str	r2, [r7, #24]
 8005cc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <xQueueGenericSendFromISR+0xcc>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d12c      	bne.n	8005d32 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce8:	f000 fbc3 	bl	8006472 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf4:	d112      	bne.n	8005d1c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 f9fe 	bl	8007104 <xTaskRemoveFromEventList>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e007      	b.n	8005d2c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d20:	3301      	adds	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005d30:	e001      	b.n	8005d36 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3738      	adds	r7, #56	; 0x38
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	; 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	b672      	cpsid	i
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	b662      	cpsie	i
 8005d74:	623b      	str	r3, [r7, #32]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <xQueueGiveFromISR+0x50>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	b672      	cpsid	i
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	b662      	cpsie	i
 8005d96:	61fb      	str	r3, [r7, #28]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d103      	bne.n	8005dac <xQueueGiveFromISR+0x60>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <xQueueGiveFromISR+0x64>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <xQueueGiveFromISR+0x66>
 8005db0:	2300      	movs	r3, #0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10c      	bne.n	8005dd0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	b672      	cpsid	i
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	b662      	cpsie	i
 8005dca:	61bb      	str	r3, [r7, #24]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd0:	f002 faac 	bl	800832c <vPortValidateInterruptPriority>
	__asm volatile
 8005dd4:	f3ef 8211 	mrs	r2, BASEPRI
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	b672      	cpsid	i
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	b662      	cpsie	i
 8005dec:	617a      	str	r2, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005df0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d22b      	bcs.n	8005e5c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e1e:	d112      	bne.n	8005e46 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d016      	beq.n	8005e56 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f969 	bl	8007104 <xTaskRemoveFromEventList>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00e      	beq.n	8005e56 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e007      	b.n	8005e56 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	b25a      	sxtb	r2, r3
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e56:	2301      	movs	r3, #1
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5a:	e001      	b.n	8005e60 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f383 8811 	msr	BASEPRI, r3
}
 8005e6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3738      	adds	r7, #56	; 0x38
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	; 0x30
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10c      	bne.n	8005eac <xQueueReceive+0x34>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	b672      	cpsid	i
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	b662      	cpsie	i
 8005ea6:	623b      	str	r3, [r7, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <xQueueReceive+0x42>
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <xQueueReceive+0x46>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueReceive+0x48>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10c      	bne.n	8005ede <xQueueReceive+0x66>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	b672      	cpsid	i
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	b662      	cpsie	i
 8005ed8:	61fb      	str	r3, [r7, #28]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ede:	f001 faeb 	bl	80074b8 <xTaskGetSchedulerState>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <xQueueReceive+0x76>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <xQueueReceive+0x7a>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueReceive+0x7c>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <xQueueReceive+0x9a>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	b672      	cpsid	i
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	b662      	cpsie	i
 8005f0c:	61bb      	str	r3, [r7, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f12:	f002 f923 	bl	800815c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01f      	beq.n	8005f62 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f26:	f000 fb0e 	bl	8006546 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1e5a      	subs	r2, r3, #1
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00f      	beq.n	8005f5a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f8e0 	bl	8007104 <xTaskRemoveFromEventList>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f4a:	4b3d      	ldr	r3, [pc, #244]	; (8006040 <xQueueReceive+0x1c8>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f5a:	f002 f933 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e069      	b.n	8006036 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d103      	bne.n	8005f70 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f68:	f002 f92c 	bl	80081c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e062      	b.n	8006036 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f76:	f107 0310 	add.w	r3, r7, #16
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 f928 	bl	80071d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f84:	f002 f91e 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f88:	f000 fe76 	bl	8006c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f8c:	f002 f8e6 	bl	800815c <vPortEnterCritical>
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f9c:	d103      	bne.n	8005fa6 <xQueueReceive+0x12e>
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb2:	d103      	bne.n	8005fbc <xQueueReceive+0x144>
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fbc:	f002 f902 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fc0:	1d3a      	adds	r2, r7, #4
 8005fc2:	f107 0310 	add.w	r3, r7, #16
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f917 	bl	80071fc <xTaskCheckForTimeOut>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d123      	bne.n	800601c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd6:	f000 fb2e 	bl	8006636 <prvIsQueueEmpty>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f837 	bl	800705c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff0:	f000 facf 	bl	8006592 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ff4:	f000 fe4e 	bl	8006c94 <xTaskResumeAll>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d189      	bne.n	8005f12 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005ffe:	4b10      	ldr	r3, [pc, #64]	; (8006040 <xQueueReceive+0x1c8>)
 8006000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	e780      	b.n	8005f12 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006012:	f000 fabe 	bl	8006592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006016:	f000 fe3d 	bl	8006c94 <xTaskResumeAll>
 800601a:	e77a      	b.n	8005f12 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800601c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601e:	f000 fab8 	bl	8006592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006022:	f000 fe37 	bl	8006c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006028:	f000 fb05 	bl	8006636 <prvIsQueueEmpty>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	f43f af6f 	beq.w	8005f12 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006036:	4618      	mov	r0, r3
 8006038:	3730      	adds	r7, #48	; 0x30
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08e      	sub	sp, #56	; 0x38
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006056:	2300      	movs	r3, #0
 8006058:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10c      	bne.n	800607a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	623b      	str	r3, [r7, #32]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	b672      	cpsid	i
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	b662      	cpsie	i
 8006096:	61fb      	str	r3, [r7, #28]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800609c:	f001 fa0c 	bl	80074b8 <xTaskGetSchedulerState>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <xQueueSemaphoreTake+0x68>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <xQueueSemaphoreTake+0x6c>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <xQueueSemaphoreTake+0x6e>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10c      	bne.n	80060d0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	b672      	cpsid	i
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	b662      	cpsie	i
 80060ca:	61bb      	str	r3, [r7, #24]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d0:	f002 f844 	bl	800815c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d024      	beq.n	800612a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	1e5a      	subs	r2, r3, #1
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060f0:	f001 fb60 	bl	80077b4 <pvTaskIncrementMutexHeldCount>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	3310      	adds	r3, #16
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fffc 	bl	8007104 <xTaskRemoveFromEventList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006112:	4b55      	ldr	r3, [pc, #340]	; (8006268 <xQueueSemaphoreTake+0x224>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006122:	f002 f84f 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	e099      	b.n	800625e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d113      	bne.n	8006158 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00c      	beq.n	8006150 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	b672      	cpsid	i
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	b662      	cpsie	i
 800614a:	617b      	str	r3, [r7, #20]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006150:	f002 f838 	bl	80081c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006154:	2300      	movs	r3, #0
 8006156:	e082      	b.n	800625e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800615e:	f107 030c 	add.w	r3, r7, #12
 8006162:	4618      	mov	r0, r3
 8006164:	f001 f834 	bl	80071d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006168:	2301      	movs	r3, #1
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800616c:	f002 f82a 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006170:	f000 fd82 	bl	8006c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006174:	f001 fff2 	bl	800815c <vPortEnterCritical>
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800617e:	b25b      	sxtb	r3, r3
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006184:	d103      	bne.n	800618e <xQueueSemaphoreTake+0x14a>
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006194:	b25b      	sxtb	r3, r3
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619a:	d103      	bne.n	80061a4 <xQueueSemaphoreTake+0x160>
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a4:	f002 f80e 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061a8:	463a      	mov	r2, r7
 80061aa:	f107 030c 	add.w	r3, r7, #12
 80061ae:	4611      	mov	r1, r2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 f823 	bl	80071fc <xTaskCheckForTimeOut>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d132      	bne.n	8006222 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061be:	f000 fa3a 	bl	8006636 <prvIsQueueEmpty>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d026      	beq.n	8006216 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80061d0:	f001 ffc4 	bl	800815c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 f98b 	bl	80074f4 <xTaskPriorityInherit>
 80061de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80061e0:	f001 fff0 	bl	80081c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 ff35 	bl	800705c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061f4:	f000 f9cd 	bl	8006592 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f8:	f000 fd4c 	bl	8006c94 <xTaskResumeAll>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f af66 	bne.w	80060d0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006204:	4b18      	ldr	r3, [pc, #96]	; (8006268 <xQueueSemaphoreTake+0x224>)
 8006206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	e75c      	b.n	80060d0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006218:	f000 f9bb 	bl	8006592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621c:	f000 fd3a 	bl	8006c94 <xTaskResumeAll>
 8006220:	e756      	b.n	80060d0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006224:	f000 f9b5 	bl	8006592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006228:	f000 fd34 	bl	8006c94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800622c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800622e:	f000 fa02 	bl	8006636 <prvIsQueueEmpty>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	f43f af4b 	beq.w	80060d0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006240:	f001 ff8c 	bl	800815c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006246:	f000 f8fc 	bl	8006442 <prvGetDisinheritPriorityAfterTimeout>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fa28 	bl	80076a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006258:	f001 ffb4 	bl	80081c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800625c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800625e:	4618      	mov	r0, r3
 8006260:	3738      	adds	r7, #56	; 0x38
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	; 0x38
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10c      	bne.n	800629c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	b672      	cpsid	i
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	b662      	cpsie	i
 8006296:	623b      	str	r3, [r7, #32]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <xQueueReceiveFromISR+0x3e>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <xQueueReceiveFromISR+0x42>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <xQueueReceiveFromISR+0x44>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10c      	bne.n	80062ce <xQueueReceiveFromISR+0x62>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	b672      	cpsid	i
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	b662      	cpsie	i
 80062c8:	61fb      	str	r3, [r7, #28]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ce:	f002 f82d 	bl	800832c <vPortValidateInterruptPriority>
	__asm volatile
 80062d2:	f3ef 8211 	mrs	r2, BASEPRI
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	b672      	cpsid	i
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	b662      	cpsie	i
 80062ea:	61ba      	str	r2, [r7, #24]
 80062ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80062ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02f      	beq.n	800635e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630c:	f000 f91b 	bl	8006546 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	1e5a      	subs	r2, r3, #1
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006320:	d112      	bne.n	8006348 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	3310      	adds	r3, #16
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fee8 	bl	8007104 <xTaskRemoveFromEventList>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e007      	b.n	8006358 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800634c:	3301      	adds	r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	b25a      	sxtb	r2, r3
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006358:	2301      	movs	r3, #1
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
 800635c:	e001      	b.n	8006362 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f383 8811 	msr	BASEPRI, r3
}
 800636c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006370:	4618      	mov	r0, r3
 8006372:	3738      	adds	r7, #56	; 0x38
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10c      	bne.n	80063a0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80063a0:	f001 fedc 	bl	800815c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80063aa:	f001 ff0b 	bl	80081c4 <vPortExitCritical>

	return uxReturn;
 80063ae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10c      	bne.n	80063e4 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	b672      	cpsid	i
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	b662      	cpsie	i
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80063ea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10c      	bne.n	8006424 <vQueueDelete+0x2c>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	b672      	cpsid	i
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	b662      	cpsie	i
 800641e:	60bb      	str	r3, [r7, #8]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f95f 	bl	80066e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f002 f887 	bl	8008548 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e001      	b.n	8006464 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006464:	68fb      	ldr	r3, [r7, #12]
	}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d14d      	bne.n	8006534 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f891 	bl	80075c4 <xTaskPriorityDisinherit>
 80064a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	e043      	b.n	8006534 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d119      	bne.n	80064e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6858      	ldr	r0, [r3, #4]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	461a      	mov	r2, r3
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	f00e fb1c 	bl	8014afa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d32b      	bcc.n	8006534 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	e026      	b.n	8006534 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68d8      	ldr	r0, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	461a      	mov	r2, r3
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	f00e fb02 	bl	8014afa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	425b      	negs	r3, r3
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d207      	bcs.n	8006522 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	425b      	negs	r3, r3
 800651c:	441a      	add	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d105      	bne.n	8006534 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3b01      	subs	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d018      	beq.n	800658a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	441a      	add	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	d303      	bcc.n	800657a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	461a      	mov	r2, r3
 8006584:	6838      	ldr	r0, [r7, #0]
 8006586:	f00e fab8 	bl	8014afa <memcpy>
	}
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800659a:	f001 fddf 	bl	800815c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065a6:	e011      	b.n	80065cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d012      	beq.n	80065d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fda5 	bl	8007104 <xTaskRemoveFromEventList>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065c0:	f000 fe82 	bl	80072c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dce9      	bgt.n	80065a8 <prvUnlockQueue+0x16>
 80065d4:	e000      	b.n	80065d8 <prvUnlockQueue+0x46>
					break;
 80065d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	22ff      	movs	r2, #255	; 0xff
 80065dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065e0:	f001 fdf0 	bl	80081c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065e4:	f001 fdba 	bl	800815c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065f0:	e011      	b.n	8006616 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d012      	beq.n	8006620 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3310      	adds	r3, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fd80 	bl	8007104 <xTaskRemoveFromEventList>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800660a:	f000 fe5d 	bl	80072c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	3b01      	subs	r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dce9      	bgt.n	80065f2 <prvUnlockQueue+0x60>
 800661e:	e000      	b.n	8006622 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006620:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	22ff      	movs	r2, #255	; 0xff
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800662a:	f001 fdcb 	bl	80081c4 <vPortExitCritical>
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800663e:	f001 fd8d 	bl	800815c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800664a:	2301      	movs	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	e001      	b.n	8006654 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006654:	f001 fdb6 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 8006658:	68fb      	ldr	r3, [r7, #12]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800666a:	f001 fd77 	bl	800815c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	429a      	cmp	r2, r3
 8006678:	d102      	bne.n	8006680 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e001      	b.n	8006684 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006684:	f001 fd9e 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 8006688:	68fb      	ldr	r3, [r7, #12]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e014      	b.n	80066ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066a4:	4a0f      	ldr	r2, [pc, #60]	; (80066e4 <vQueueAddToRegistry+0x50>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066b0:	490c      	ldr	r1, [pc, #48]	; (80066e4 <vQueueAddToRegistry+0x50>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066ba:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <vQueueAddToRegistry+0x50>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4413      	add	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066c6:	e006      	b.n	80066d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	d9e7      	bls.n	80066a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	200054dc 	.word	0x200054dc

080066e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e016      	b.n	8006724 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <vQueueUnregisterQueue+0x50>)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	4413      	add	r3, r2
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d10b      	bne.n	800671e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <vQueueUnregisterQueue+0x50>)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2100      	movs	r1, #0
 800670c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006710:	4a09      	ldr	r2, [pc, #36]	; (8006738 <vQueueUnregisterQueue+0x50>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]
				break;
 800671c:	e006      	b.n	800672c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b07      	cmp	r3, #7
 8006728:	d9e5      	bls.n	80066f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	200054dc 	.word	0x200054dc

0800673c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800674c:	f001 fd06 	bl	800815c <vPortEnterCritical>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006756:	b25b      	sxtb	r3, r3
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675c:	d103      	bne.n	8006766 <vQueueWaitForMessageRestricted+0x2a>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800676c:	b25b      	sxtb	r3, r3
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006772:	d103      	bne.n	800677c <vQueueWaitForMessageRestricted+0x40>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800677c:	f001 fd22 	bl	80081c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	3324      	adds	r3, #36	; 0x24
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fc89 	bl	80070a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f7ff fefb 	bl	8006592 <prvUnlockQueue>
	}
 800679c:	bf00      	nop
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	; 0x38
 80067a8:	af04      	add	r7, sp, #16
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10c      	bne.n	80067d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	b672      	cpsid	i
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	b662      	cpsie	i
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10c      	bne.n	80067f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	b672      	cpsid	i
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	b662      	cpsie	i
 80067ec:	61fb      	str	r3, [r7, #28]
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067f2:	23bc      	movs	r3, #188	; 0xbc
 80067f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2bbc      	cmp	r3, #188	; 0xbc
 80067fa:	d00c      	beq.n	8006816 <xTaskCreateStatic+0x72>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	b672      	cpsid	i
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	b662      	cpsie	i
 8006810:	61bb      	str	r3, [r7, #24]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006816:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01e      	beq.n	800685c <xTaskCreateStatic+0xb8>
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01b      	beq.n	800685c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2202      	movs	r2, #2
 8006832:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006836:	2300      	movs	r3, #0
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	9302      	str	r3, [sp, #8]
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f850 	bl	80068f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006856:	f000 f8f5 	bl	8006a44 <prvAddNewTaskToReadyList>
 800685a:	e001      	b.n	8006860 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006860:	697b      	ldr	r3, [r7, #20]
	}
 8006862:	4618      	mov	r0, r3
 8006864:	3728      	adds	r7, #40	; 0x28
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800686a:	b580      	push	{r7, lr}
 800686c:	b08c      	sub	sp, #48	; 0x30
 800686e:	af04      	add	r7, sp, #16
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4618      	mov	r0, r3
 8006880:	f001 fd98 	bl	80083b4 <pvPortMalloc>
 8006884:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00e      	beq.n	80068aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800688c:	20bc      	movs	r0, #188	; 0xbc
 800688e:	f001 fd91 	bl	80083b4 <pvPortMalloc>
 8006892:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
 80068a0:	e005      	b.n	80068ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068a2:	6978      	ldr	r0, [r7, #20]
 80068a4:	f001 fe50 	bl	8008548 <vPortFree>
 80068a8:	e001      	b.n	80068ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d017      	beq.n	80068e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	2300      	movs	r3, #0
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	9302      	str	r3, [sp, #8]
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f80e 	bl	80068f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068d8:	69f8      	ldr	r0, [r7, #28]
 80068da:	f000 f8b3 	bl	8006a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068de:	2301      	movs	r3, #1
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	e002      	b.n	80068ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068ea:	69bb      	ldr	r3, [r7, #24]
	}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	461a      	mov	r2, r3
 800690c:	21a5      	movs	r1, #165	; 0xa5
 800690e:	f00e f902 	bl	8014b16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800691c:	440b      	add	r3, r1
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	b672      	cpsid	i
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	b662      	cpsie	i
 800694a:	617b      	str	r3, [r7, #20]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01f      	beq.n	8006996 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	e012      	b.n	8006982 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	7819      	ldrb	r1, [r3, #0]
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	3334      	adds	r3, #52	; 0x34
 800696c:	460a      	mov	r2, r1
 800696e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d006      	beq.n	800698a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b0f      	cmp	r3, #15
 8006986:	d9e9      	bls.n	800695c <prvInitialiseNewTask+0x68>
 8006988:	e000      	b.n	800698c <prvInitialiseNewTask+0x98>
			{
				break;
 800698a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006994:	e003      	b.n	800699e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	2b37      	cmp	r3, #55	; 0x37
 80069a2:	d901      	bls.n	80069a8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069a4:	2337      	movs	r3, #55	; 0x37
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	2200      	movs	r2, #0
 80069b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fd0c 	bl	80053dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	3318      	adds	r3, #24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe fd07 	bl	80053dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	3354      	adds	r3, #84	; 0x54
 80069f8:	2260      	movs	r2, #96	; 0x60
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f00e f88a 	bl	8014b16 <memset>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	4a0c      	ldr	r2, [pc, #48]	; (8006a38 <prvInitialiseNewTask+0x144>)
 8006a06:	659a      	str	r2, [r3, #88]	; 0x58
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <prvInitialiseNewTask+0x148>)
 8006a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <prvInitialiseNewTask+0x14c>)
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	69b8      	ldr	r0, [r7, #24]
 8006a1a:	f001 fa8f 	bl	8007f3c <pxPortInitialiseStack>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a30:	bf00      	nop
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	08018c64 	.word	0x08018c64
 8006a3c:	08018c84 	.word	0x08018c84
 8006a40:	08018c44 	.word	0x08018c44

08006a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a4c:	f001 fb86 	bl	800815c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a50:	4b2d      	ldr	r3, [pc, #180]	; (8006b08 <prvAddNewTaskToReadyList+0xc4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	4a2c      	ldr	r2, [pc, #176]	; (8006b08 <prvAddNewTaskToReadyList+0xc4>)
 8006a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a5a:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <prvAddNewTaskToReadyList+0xc8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a62:	4a2a      	ldr	r2, [pc, #168]	; (8006b0c <prvAddNewTaskToReadyList+0xc8>)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a68:	4b27      	ldr	r3, [pc, #156]	; (8006b08 <prvAddNewTaskToReadyList+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d110      	bne.n	8006a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a70:	f000 fc4e 	bl	8007310 <prvInitialiseTaskLists>
 8006a74:	e00d      	b.n	8006a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a76:	4b26      	ldr	r3, [pc, #152]	; (8006b10 <prvAddNewTaskToReadyList+0xcc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a7e:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <prvAddNewTaskToReadyList+0xc8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d802      	bhi.n	8006a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a8c:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <prvAddNewTaskToReadyList+0xc8>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <prvAddNewTaskToReadyList+0xd0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a1e      	ldr	r2, [pc, #120]	; (8006b14 <prvAddNewTaskToReadyList+0xd0>)
 8006a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a9c:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <prvAddNewTaskToReadyList+0xd0>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <prvAddNewTaskToReadyList+0xd4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d903      	bls.n	8006ab8 <prvAddNewTaskToReadyList+0x74>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <prvAddNewTaskToReadyList+0xd4>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <prvAddNewTaskToReadyList+0xd8>)
 8006ac6:	441a      	add	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4619      	mov	r1, r3
 8006ace:	4610      	mov	r0, r2
 8006ad0:	f7fe fc91 	bl	80053f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ad4:	f001 fb76 	bl	80081c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <prvAddNewTaskToReadyList+0xcc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00e      	beq.n	8006afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <prvAddNewTaskToReadyList+0xc8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d207      	bcs.n	8006afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aee:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <prvAddNewTaskToReadyList+0xdc>)
 8006af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200059f0 	.word	0x200059f0
 8006b0c:	2000551c 	.word	0x2000551c
 8006b10:	200059fc 	.word	0x200059fc
 8006b14:	20005a0c 	.word	0x20005a0c
 8006b18:	200059f8 	.word	0x200059f8
 8006b1c:	20005520 	.word	0x20005520
 8006b20:	e000ed04 	.word	0xe000ed04

08006b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d019      	beq.n	8006b6a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <vTaskDelay+0x64>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <vTaskDelay+0x34>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	b672      	cpsid	i
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	b662      	cpsie	i
 8006b52:	60bb      	str	r3, [r7, #8]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006b58:	f000 f88e 	bl	8006c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fe3c 	bl	80077dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b64:	f000 f896 	bl	8006c94 <xTaskResumeAll>
 8006b68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d107      	bne.n	8006b80 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <vTaskDelay+0x68>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20005a18 	.word	0x20005a18
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	1d39      	adds	r1, r7, #4
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe fbc4 	bl	8005334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	9202      	str	r2, [sp, #8]
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	4926      	ldr	r1, [pc, #152]	; (8006c58 <vTaskStartScheduler+0xc8>)
 8006bc0:	4826      	ldr	r0, [pc, #152]	; (8006c5c <vTaskStartScheduler+0xcc>)
 8006bc2:	f7ff fdef 	bl	80067a4 <xTaskCreateStatic>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4a25      	ldr	r2, [pc, #148]	; (8006c60 <vTaskStartScheduler+0xd0>)
 8006bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bcc:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <vTaskStartScheduler+0xd0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e001      	b.n	8006bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d102      	bne.n	8006bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006be4:	f000 fe4e 	bl	8007884 <xTimerCreateTimerTask>
 8006be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d11d      	bne.n	8006c2c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	b672      	cpsid	i
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	b662      	cpsie	i
 8006c04:	613b      	str	r3, [r7, #16]
}
 8006c06:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c08:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <vTaskStartScheduler+0xd4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3354      	adds	r3, #84	; 0x54
 8006c0e:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <vTaskStartScheduler+0xd8>)
 8006c10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c12:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <vTaskStartScheduler+0xdc>)
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c1a:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <vTaskStartScheduler+0xe0>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <vTaskStartScheduler+0xe4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c26:	f001 fa1b 	bl	8008060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c2a:	e010      	b.n	8006c4e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c32:	d10c      	bne.n	8006c4e <vTaskStartScheduler+0xbe>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	b672      	cpsid	i
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	b662      	cpsie	i
 8006c48:	60fb      	str	r3, [r7, #12]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <vTaskStartScheduler+0xbc>
}
 8006c4e:	bf00      	nop
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	08015b44 	.word	0x08015b44
 8006c5c:	080072e1 	.word	0x080072e1
 8006c60:	20005a14 	.word	0x20005a14
 8006c64:	2000551c 	.word	0x2000551c
 8006c68:	2000002c 	.word	0x2000002c
 8006c6c:	20005a10 	.word	0x20005a10
 8006c70:	200059fc 	.word	0x200059fc
 8006c74:	200059f4 	.word	0x200059f4

08006c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <vTaskSuspendAll+0x18>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a03      	ldr	r2, [pc, #12]	; (8006c90 <vTaskSuspendAll+0x18>)
 8006c84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c86:	bf00      	nop
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20005a18 	.word	0x20005a18

08006c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ca2:	4b43      	ldr	r3, [pc, #268]	; (8006db0 <xTaskResumeAll+0x11c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10c      	bne.n	8006cc4 <xTaskResumeAll+0x30>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	b672      	cpsid	i
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	b662      	cpsie	i
 8006cbe:	603b      	str	r3, [r7, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cc4:	f001 fa4a 	bl	800815c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cc8:	4b39      	ldr	r3, [pc, #228]	; (8006db0 <xTaskResumeAll+0x11c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4a38      	ldr	r2, [pc, #224]	; (8006db0 <xTaskResumeAll+0x11c>)
 8006cd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd2:	4b37      	ldr	r3, [pc, #220]	; (8006db0 <xTaskResumeAll+0x11c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d162      	bne.n	8006da0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cda:	4b36      	ldr	r3, [pc, #216]	; (8006db4 <xTaskResumeAll+0x120>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d05e      	beq.n	8006da0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ce2:	e02f      	b.n	8006d44 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce4:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <xTaskResumeAll+0x124>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3318      	adds	r3, #24
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fbdd 	bl	80054b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fbd8 	bl	80054b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <xTaskResumeAll+0x128>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d903      	bls.n	8006d14 <xTaskResumeAll+0x80>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <xTaskResumeAll+0x128>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a27      	ldr	r2, [pc, #156]	; (8006dc0 <xTaskResumeAll+0x12c>)
 8006d22:	441a      	add	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fb63 	bl	80053f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <xTaskResumeAll+0x130>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006d3e:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <xTaskResumeAll+0x134>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d44:	4b1c      	ldr	r3, [pc, #112]	; (8006db8 <xTaskResumeAll+0x124>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1cb      	bne.n	8006ce4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d52:	f000 fb81 	bl	8007458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d56:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <xTaskResumeAll+0x138>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d010      	beq.n	8006d84 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d62:	f000 f859 	bl	8006e18 <xTaskIncrementTick>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006d6c:	4b16      	ldr	r3, [pc, #88]	; (8006dc8 <xTaskResumeAll+0x134>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f1      	bne.n	8006d62 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006d7e:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <xTaskResumeAll+0x138>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d84:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <xTaskResumeAll+0x134>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <xTaskResumeAll+0x13c>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006da0:	f001 fa10 	bl	80081c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006da4:	68bb      	ldr	r3, [r7, #8]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20005a18 	.word	0x20005a18
 8006db4:	200059f0 	.word	0x200059f0
 8006db8:	200059b0 	.word	0x200059b0
 8006dbc:	200059f8 	.word	0x200059f8
 8006dc0:	20005520 	.word	0x20005520
 8006dc4:	2000551c 	.word	0x2000551c
 8006dc8:	20005a04 	.word	0x20005a04
 8006dcc:	20005a00 	.word	0x20005a00
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <xTaskGetTickCount+0x1c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006de0:	687b      	ldr	r3, [r7, #4]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	200059f4 	.word	0x200059f4

08006df4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dfa:	f001 fa97 	bl	800832c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006dfe:	2300      	movs	r3, #0
 8006e00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e02:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <xTaskGetTickCountFromISR+0x20>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e08:	683b      	ldr	r3, [r7, #0]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200059f4 	.word	0x200059f4

08006e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e22:	4b50      	ldr	r3, [pc, #320]	; (8006f64 <xTaskIncrementTick+0x14c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 808b 	bne.w	8006f42 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e2c:	4b4e      	ldr	r3, [pc, #312]	; (8006f68 <xTaskIncrementTick+0x150>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e34:	4a4c      	ldr	r2, [pc, #304]	; (8006f68 <xTaskIncrementTick+0x150>)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d122      	bne.n	8006e86 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e40:	4b4a      	ldr	r3, [pc, #296]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	b672      	cpsid	i
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	b662      	cpsie	i
 8006e5e:	603b      	str	r3, [r7, #0]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <xTaskIncrementTick+0x4a>
 8006e64:	4b41      	ldr	r3, [pc, #260]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	4b41      	ldr	r3, [pc, #260]	; (8006f70 <xTaskIncrementTick+0x158>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a3f      	ldr	r2, [pc, #252]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	4a3f      	ldr	r2, [pc, #252]	; (8006f70 <xTaskIncrementTick+0x158>)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	4b3e      	ldr	r3, [pc, #248]	; (8006f74 <xTaskIncrementTick+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	4a3d      	ldr	r2, [pc, #244]	; (8006f74 <xTaskIncrementTick+0x15c>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	f000 fae9 	bl	8007458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e86:	4b3c      	ldr	r3, [pc, #240]	; (8006f78 <xTaskIncrementTick+0x160>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d349      	bcc.n	8006f24 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e90:	4b36      	ldr	r3, [pc, #216]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9a:	4b37      	ldr	r3, [pc, #220]	; (8006f78 <xTaskIncrementTick+0x160>)
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ea0:	601a      	str	r2, [r3, #0]
					break;
 8006ea2:	e03f      	b.n	8006f24 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea4:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d203      	bcs.n	8006ec4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ebc:	4a2e      	ldr	r2, [pc, #184]	; (8006f78 <xTaskIncrementTick+0x160>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ec2:	e02f      	b.n	8006f24 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe faf1 	bl	80054b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3318      	adds	r3, #24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fae8 	bl	80054b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <xTaskIncrementTick+0x164>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d903      	bls.n	8006ef4 <xTaskIncrementTick+0xdc>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	4a22      	ldr	r2, [pc, #136]	; (8006f7c <xTaskIncrementTick+0x164>)
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4a1f      	ldr	r2, [pc, #124]	; (8006f80 <xTaskIncrementTick+0x168>)
 8006f02:	441a      	add	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7fe fa73 	bl	80053f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <xTaskIncrementTick+0x16c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d3b8      	bcc.n	8006e90 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f22:	e7b5      	b.n	8006e90 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f24:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <xTaskIncrementTick+0x16c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2a:	4915      	ldr	r1, [pc, #84]	; (8006f80 <xTaskIncrementTick+0x168>)
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d907      	bls.n	8006f4c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e004      	b.n	8006f4c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <xTaskIncrementTick+0x170>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a0f      	ldr	r2, [pc, #60]	; (8006f88 <xTaskIncrementTick+0x170>)
 8006f4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <xTaskIncrementTick+0x174>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f58:	697b      	ldr	r3, [r7, #20]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20005a18 	.word	0x20005a18
 8006f68:	200059f4 	.word	0x200059f4
 8006f6c:	200059a8 	.word	0x200059a8
 8006f70:	200059ac 	.word	0x200059ac
 8006f74:	20005a08 	.word	0x20005a08
 8006f78:	20005a10 	.word	0x20005a10
 8006f7c:	200059f8 	.word	0x200059f8
 8006f80:	20005520 	.word	0x20005520
 8006f84:	2000551c 	.word	0x2000551c
 8006f88:	20005a00 	.word	0x20005a00
 8006f8c:	20005a04 	.word	0x20005a04

08006f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <vTaskSwitchContext+0xb4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f9e:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <vTaskSwitchContext+0xb8>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fa4:	e048      	b.n	8007038 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8006fa6:	4b28      	ldr	r3, [pc, #160]	; (8007048 <vTaskSwitchContext+0xb8>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fac:	4b27      	ldr	r3, [pc, #156]	; (800704c <vTaskSwitchContext+0xbc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e012      	b.n	8006fda <vTaskSwitchContext+0x4a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10c      	bne.n	8006fd4 <vTaskSwitchContext+0x44>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	b672      	cpsid	i
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	b662      	cpsie	i
 8006fce:	607b      	str	r3, [r7, #4]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <vTaskSwitchContext+0x42>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	491d      	ldr	r1, [pc, #116]	; (8007050 <vTaskSwitchContext+0xc0>)
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0e2      	beq.n	8006fb4 <vTaskSwitchContext+0x24>
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <vTaskSwitchContext+0xc0>)
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60bb      	str	r3, [r7, #8]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3308      	adds	r3, #8
 8007010:	429a      	cmp	r2, r3
 8007012:	d104      	bne.n	800701e <vTaskSwitchContext+0x8e>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4a0b      	ldr	r2, [pc, #44]	; (8007054 <vTaskSwitchContext+0xc4>)
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <vTaskSwitchContext+0xbc>)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <vTaskSwitchContext+0xc4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3354      	adds	r3, #84	; 0x54
 8007034:	4a08      	ldr	r2, [pc, #32]	; (8007058 <vTaskSwitchContext+0xc8>)
 8007036:	6013      	str	r3, [r2, #0]
}
 8007038:	bf00      	nop
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20005a18 	.word	0x20005a18
 8007048:	20005a04 	.word	0x20005a04
 800704c:	200059f8 	.word	0x200059f8
 8007050:	20005520 	.word	0x20005520
 8007054:	2000551c 	.word	0x2000551c
 8007058:	2000002c 	.word	0x2000002c

0800705c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10c      	bne.n	8007086 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	b672      	cpsid	i
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	b662      	cpsie	i
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <vTaskPlaceOnEventList+0x48>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3318      	adds	r3, #24
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fe f9d5 	bl	800543e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007094:	2101      	movs	r1, #1
 8007096:	6838      	ldr	r0, [r7, #0]
 8007098:	f000 fba0 	bl	80077dc <prvAddCurrentTaskToDelayedList>
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	2000551c 	.word	0x2000551c

080070a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10c      	bne.n	80070d4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	b672      	cpsid	i
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	b662      	cpsie	i
 80070ce:	617b      	str	r3, [r7, #20]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <vTaskPlaceOnEventListRestricted+0x58>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3318      	adds	r3, #24
 80070da:	4619      	mov	r1, r3
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7fe f98a 	bl	80053f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80070e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	68b8      	ldr	r0, [r7, #8]
 80070f2:	f000 fb73 	bl	80077dc <prvAddCurrentTaskToDelayedList>
	}
 80070f6:	bf00      	nop
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	2000551c 	.word	0x2000551c

08007104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10c      	bne.n	8007134 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	b672      	cpsid	i
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	b662      	cpsie	i
 800712e:	60fb      	str	r3, [r7, #12]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	3318      	adds	r3, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe f9b9 	bl	80054b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <xTaskRemoveFromEventList+0xb4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d11d      	bne.n	8007182 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3304      	adds	r3, #4
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe f9b0 	bl	80054b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4b19      	ldr	r3, [pc, #100]	; (80071bc <xTaskRemoveFromEventList+0xb8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d903      	bls.n	8007164 <xTaskRemoveFromEventList+0x60>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <xTaskRemoveFromEventList+0xb8>)
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <xTaskRemoveFromEventList+0xbc>)
 8007172:	441a      	add	r2, r3
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3304      	adds	r3, #4
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f7fe f93b 	bl	80053f6 <vListInsertEnd>
 8007180:	e005      	b.n	800718e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3318      	adds	r3, #24
 8007186:	4619      	mov	r1, r3
 8007188:	480e      	ldr	r0, [pc, #56]	; (80071c4 <xTaskRemoveFromEventList+0xc0>)
 800718a:	f7fe f934 	bl	80053f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	4b0d      	ldr	r3, [pc, #52]	; (80071c8 <xTaskRemoveFromEventList+0xc4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	429a      	cmp	r2, r3
 800719a:	d905      	bls.n	80071a8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <xTaskRemoveFromEventList+0xc8>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e001      	b.n	80071ac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071ac:	697b      	ldr	r3, [r7, #20]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20005a18 	.word	0x20005a18
 80071bc:	200059f8 	.word	0x200059f8
 80071c0:	20005520 	.word	0x20005520
 80071c4:	200059b0 	.word	0x200059b0
 80071c8:	2000551c 	.word	0x2000551c
 80071cc:	20005a04 	.word	0x20005a04

080071d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <vTaskInternalSetTimeOutState+0x24>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <vTaskInternalSetTimeOutState+0x28>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	20005a08 	.word	0x20005a08
 80071f8:	200059f4 	.word	0x200059f4

080071fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10c      	bne.n	8007226 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	b672      	cpsid	i
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	b662      	cpsie	i
 8007220:	613b      	str	r3, [r7, #16]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10c      	bne.n	8007246 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	b672      	cpsid	i
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	b662      	cpsie	i
 8007240:	60fb      	str	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007246:	f000 ff89 	bl	800815c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800724a:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <xTaskCheckForTimeOut+0xc4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007262:	d102      	bne.n	800726a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	e023      	b.n	80072b2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <xTaskCheckForTimeOut+0xc8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d007      	beq.n	8007286 <xTaskCheckForTimeOut+0x8a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	429a      	cmp	r2, r3
 800727e:	d302      	bcc.n	8007286 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007280:	2301      	movs	r3, #1
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	e015      	b.n	80072b2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	429a      	cmp	r2, r3
 800728e:	d20b      	bcs.n	80072a8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff ff97 	bl	80071d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e004      	b.n	80072b2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ae:	2301      	movs	r3, #1
 80072b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072b2:	f000 ff87 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 80072b6:	69fb      	ldr	r3, [r7, #28]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	200059f4 	.word	0x200059f4
 80072c4:	20005a08 	.word	0x20005a08

080072c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072cc:	4b03      	ldr	r3, [pc, #12]	; (80072dc <vTaskMissedYield+0x14>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
}
 80072d2:	bf00      	nop
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20005a04 	.word	0x20005a04

080072e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072e8:	f000 f852 	bl	8007390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <prvIdleTask+0x28>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d9f9      	bls.n	80072e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <prvIdleTask+0x2c>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007304:	e7f0      	b.n	80072e8 <prvIdleTask+0x8>
 8007306:	bf00      	nop
 8007308:	20005520 	.word	0x20005520
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007316:	2300      	movs	r3, #0
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	e00c      	b.n	8007336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <prvInitialiseTaskLists+0x60>)
 8007328:	4413      	add	r3, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe f836 	bl	800539c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3301      	adds	r3, #1
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b37      	cmp	r3, #55	; 0x37
 800733a:	d9ef      	bls.n	800731c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800733c:	480d      	ldr	r0, [pc, #52]	; (8007374 <prvInitialiseTaskLists+0x64>)
 800733e:	f7fe f82d 	bl	800539c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007342:	480d      	ldr	r0, [pc, #52]	; (8007378 <prvInitialiseTaskLists+0x68>)
 8007344:	f7fe f82a 	bl	800539c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007348:	480c      	ldr	r0, [pc, #48]	; (800737c <prvInitialiseTaskLists+0x6c>)
 800734a:	f7fe f827 	bl	800539c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800734e:	480c      	ldr	r0, [pc, #48]	; (8007380 <prvInitialiseTaskLists+0x70>)
 8007350:	f7fe f824 	bl	800539c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007354:	480b      	ldr	r0, [pc, #44]	; (8007384 <prvInitialiseTaskLists+0x74>)
 8007356:	f7fe f821 	bl	800539c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvInitialiseTaskLists+0x78>)
 800735c:	4a05      	ldr	r2, [pc, #20]	; (8007374 <prvInitialiseTaskLists+0x64>)
 800735e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <prvInitialiseTaskLists+0x7c>)
 8007362:	4a05      	ldr	r2, [pc, #20]	; (8007378 <prvInitialiseTaskLists+0x68>)
 8007364:	601a      	str	r2, [r3, #0]
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20005520 	.word	0x20005520
 8007374:	20005980 	.word	0x20005980
 8007378:	20005994 	.word	0x20005994
 800737c:	200059b0 	.word	0x200059b0
 8007380:	200059c4 	.word	0x200059c4
 8007384:	200059dc 	.word	0x200059dc
 8007388:	200059a8 	.word	0x200059a8
 800738c:	200059ac 	.word	0x200059ac

08007390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007396:	e019      	b.n	80073cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007398:	f000 fee0 	bl	800815c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <prvCheckTasksWaitingTermination+0x50>)
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe f881 	bl	80054b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ae:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <prvCheckTasksWaitingTermination+0x54>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	4a0b      	ldr	r2, [pc, #44]	; (80073e4 <prvCheckTasksWaitingTermination+0x54>)
 80073b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073b8:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <prvCheckTasksWaitingTermination+0x58>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3b01      	subs	r3, #1
 80073be:	4a0a      	ldr	r2, [pc, #40]	; (80073e8 <prvCheckTasksWaitingTermination+0x58>)
 80073c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073c2:	f000 feff 	bl	80081c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f810 	bl	80073ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <prvCheckTasksWaitingTermination+0x58>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e1      	bne.n	8007398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200059c4 	.word	0x200059c4
 80073e4:	200059f0 	.word	0x200059f0
 80073e8:	200059d8 	.word	0x200059d8

080073ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3354      	adds	r3, #84	; 0x54
 80073f8:	4618      	mov	r0, r3
 80073fa:	f00d fc8d 	bl	8014d18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007404:	2b00      	cmp	r3, #0
 8007406:	d108      	bne.n	800741a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f89b 	bl	8008548 <vPortFree>
				vPortFree( pxTCB );
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f898 	bl	8008548 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007418:	e01a      	b.n	8007450 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007420:	2b01      	cmp	r3, #1
 8007422:	d103      	bne.n	800742c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f88f 	bl	8008548 <vPortFree>
	}
 800742a:	e011      	b.n	8007450 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007432:	2b02      	cmp	r3, #2
 8007434:	d00c      	beq.n	8007450 <prvDeleteTCB+0x64>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	b672      	cpsid	i
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	b662      	cpsie	i
 800744a:	60fb      	str	r3, [r7, #12]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <prvDeleteTCB+0x62>
	}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800745e:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <prvResetNextTaskUnblockTime+0x38>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvResetNextTaskUnblockTime+0x3c>)
 800746a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800746e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007470:	e008      	b.n	8007484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007472:	4b07      	ldr	r3, [pc, #28]	; (8007490 <prvResetNextTaskUnblockTime+0x38>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a04      	ldr	r2, [pc, #16]	; (8007494 <prvResetNextTaskUnblockTime+0x3c>)
 8007482:	6013      	str	r3, [r2, #0]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	200059a8 	.word	0x200059a8
 8007494:	20005a10 	.word	0x20005a10

08007498 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80074a4:	687b      	ldr	r3, [r7, #4]
	}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	2000551c 	.word	0x2000551c

080074b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <xTaskGetSchedulerState+0x34>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074c6:	2301      	movs	r3, #1
 80074c8:	607b      	str	r3, [r7, #4]
 80074ca:	e008      	b.n	80074de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074cc:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <xTaskGetSchedulerState+0x38>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074d4:	2302      	movs	r3, #2
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	e001      	b.n	80074de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074da:	2300      	movs	r3, #0
 80074dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074de:	687b      	ldr	r3, [r7, #4]
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	200059fc 	.word	0x200059fc
 80074f0:	20005a18 	.word	0x20005a18

080074f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d051      	beq.n	80075ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750e:	4b2a      	ldr	r3, [pc, #168]	; (80075b8 <xTaskPriorityInherit+0xc4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	429a      	cmp	r2, r3
 8007516:	d241      	bcs.n	800759c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	db06      	blt.n	800752e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007520:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <xTaskPriorityInherit+0xc4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	6959      	ldr	r1, [r3, #20]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <xTaskPriorityInherit+0xc8>)
 8007540:	4413      	add	r3, r2
 8007542:	4299      	cmp	r1, r3
 8007544:	d122      	bne.n	800758c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	3304      	adds	r3, #4
 800754a:	4618      	mov	r0, r3
 800754c:	f7fd ffb0 	bl	80054b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <xTaskPriorityInherit+0xc4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755e:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <xTaskPriorityInherit+0xcc>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d903      	bls.n	800756e <xTaskPriorityInherit+0x7a>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <xTaskPriorityInherit+0xcc>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <xTaskPriorityInherit+0xc8>)
 800757c:	441a      	add	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	3304      	adds	r3, #4
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f7fd ff36 	bl	80053f6 <vListInsertEnd>
 800758a:	e004      	b.n	8007596 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <xTaskPriorityInherit+0xc4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007596:	2301      	movs	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e008      	b.n	80075ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <xTaskPriorityInherit+0xc4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d201      	bcs.n	80075ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075aa:	2301      	movs	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075ae:	68fb      	ldr	r3, [r7, #12]
	}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	2000551c 	.word	0x2000551c
 80075bc:	20005520 	.word	0x20005520
 80075c0:	200059f8 	.word	0x200059f8

080075c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d05a      	beq.n	8007690 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075da:	4b30      	ldr	r3, [pc, #192]	; (800769c <xTaskPriorityDisinherit+0xd8>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d00c      	beq.n	80075fe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	b672      	cpsid	i
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	b662      	cpsie	i
 80075f8:	60fb      	str	r3, [r7, #12]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	b672      	cpsid	i
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	b662      	cpsie	i
 800761a:	60bb      	str	r3, [r7, #8]
}
 800761c:	bf00      	nop
 800761e:	e7fe      	b.n	800761e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	429a      	cmp	r2, r3
 8007634:	d02c      	beq.n	8007690 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763a:	2b00      	cmp	r3, #0
 800763c:	d128      	bne.n	8007690 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3304      	adds	r3, #4
 8007642:	4618      	mov	r0, r3
 8007644:	f7fd ff34 	bl	80054b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <xTaskPriorityDisinherit+0xdc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d903      	bls.n	8007670 <xTaskPriorityDisinherit+0xac>
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <xTaskPriorityDisinherit+0xdc>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <xTaskPriorityDisinherit+0xe0>)
 800767e:	441a      	add	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7fd feb5 	bl	80053f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007690:	697b      	ldr	r3, [r7, #20]
	}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	2000551c 	.word	0x2000551c
 80076a0:	200059f8 	.word	0x200059f8
 80076a4:	20005520 	.word	0x20005520

080076a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076b6:	2301      	movs	r3, #1
 80076b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06e      	beq.n	800779e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10c      	bne.n	80076e2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	60fb      	str	r3, [r7, #12]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d902      	bls.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e002      	b.n	80076f8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d04d      	beq.n	800779e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	429a      	cmp	r2, r3
 800770a:	d148      	bne.n	800779e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800770c:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	429a      	cmp	r2, r3
 8007714:	d10c      	bne.n	8007730 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	b672      	cpsid	i
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	b662      	cpsie	i
 800772a:	60bb      	str	r3, [r7, #8]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	db04      	blt.n	800774e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	6959      	ldr	r1, [r3, #20]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4a13      	ldr	r2, [pc, #76]	; (80077ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800775e:	4413      	add	r3, r2
 8007760:	4299      	cmp	r1, r3
 8007762:	d11c      	bne.n	800779e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f7fd fea1 	bl	80054b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d903      	bls.n	8007782 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	4a0c      	ldr	r2, [pc, #48]	; (80077b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4a07      	ldr	r2, [pc, #28]	; (80077ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007790:	441a      	add	r2, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	3304      	adds	r3, #4
 8007796:	4619      	mov	r1, r3
 8007798:	4610      	mov	r0, r2
 800779a:	f7fd fe2c 	bl	80053f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800779e:	bf00      	nop
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	2000551c 	.word	0x2000551c
 80077ac:	20005520 	.word	0x20005520
 80077b0:	200059f8 	.word	0x200059f8

080077b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077b8:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077c6:	3201      	adds	r2, #1
 80077c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80077ca:	4b03      	ldr	r3, [pc, #12]	; (80077d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80077cc:	681b      	ldr	r3, [r3, #0]
	}
 80077ce:	4618      	mov	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	2000551c 	.word	0x2000551c

080077dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077e6:	4b21      	ldr	r3, [pc, #132]	; (800786c <prvAddCurrentTaskToDelayedList+0x90>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ec:	4b20      	ldr	r3, [pc, #128]	; (8007870 <prvAddCurrentTaskToDelayedList+0x94>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd fe5c 	bl	80054b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077fe:	d10a      	bne.n	8007816 <prvAddCurrentTaskToDelayedList+0x3a>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <prvAddCurrentTaskToDelayedList+0x94>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3304      	adds	r3, #4
 800780c:	4619      	mov	r1, r3
 800780e:	4819      	ldr	r0, [pc, #100]	; (8007874 <prvAddCurrentTaskToDelayedList+0x98>)
 8007810:	f7fd fdf1 	bl	80053f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007814:	e026      	b.n	8007864 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800781e:	4b14      	ldr	r3, [pc, #80]	; (8007870 <prvAddCurrentTaskToDelayedList+0x94>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	429a      	cmp	r2, r3
 800782c:	d209      	bcs.n	8007842 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800782e:	4b12      	ldr	r3, [pc, #72]	; (8007878 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f7fd fdff 	bl	800543e <vListInsert>
}
 8007840:	e010      	b.n	8007864 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <prvAddCurrentTaskToDelayedList+0x94>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fd fdf5 	bl	800543e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	429a      	cmp	r2, r3
 800785c:	d202      	bcs.n	8007864 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800785e:	4a08      	ldr	r2, [pc, #32]	; (8007880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6013      	str	r3, [r2, #0]
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200059f4 	.word	0x200059f4
 8007870:	2000551c 	.word	0x2000551c
 8007874:	200059dc 	.word	0x200059dc
 8007878:	200059ac 	.word	0x200059ac
 800787c:	200059a8 	.word	0x200059a8
 8007880:	20005a10 	.word	0x20005a10

08007884 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	; 0x28
 8007888:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800788e:	f000 fb15 	bl	8007ebc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007892:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <xTimerCreateTimerTask+0x84>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d021      	beq.n	80078de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078a2:	1d3a      	adds	r2, r7, #4
 80078a4:	f107 0108 	add.w	r1, r7, #8
 80078a8:	f107 030c 	add.w	r3, r7, #12
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd fd5b 	bl	8005368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	9202      	str	r2, [sp, #8]
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	2302      	movs	r3, #2
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	460a      	mov	r2, r1
 80078c4:	4911      	ldr	r1, [pc, #68]	; (800790c <xTimerCreateTimerTask+0x88>)
 80078c6:	4812      	ldr	r0, [pc, #72]	; (8007910 <xTimerCreateTimerTask+0x8c>)
 80078c8:	f7fe ff6c 	bl	80067a4 <xTaskCreateStatic>
 80078cc:	4603      	mov	r3, r0
 80078ce:	4a11      	ldr	r2, [pc, #68]	; (8007914 <xTimerCreateTimerTask+0x90>)
 80078d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078d2:	4b10      	ldr	r3, [pc, #64]	; (8007914 <xTimerCreateTimerTask+0x90>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078da:	2301      	movs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10c      	bne.n	80078fe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	b672      	cpsid	i
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	b662      	cpsie	i
 80078f8:	613b      	str	r3, [r7, #16]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80078fe:	697b      	ldr	r3, [r7, #20]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20005a4c 	.word	0x20005a4c
 800790c:	08015b4c 	.word	0x08015b4c
 8007910:	08007a55 	.word	0x08007a55
 8007914:	20005a50 	.word	0x20005a50

08007918 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007926:	2300      	movs	r3, #0
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10c      	bne.n	800794a <xTimerGenericCommand+0x32>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	b672      	cpsid	i
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	b662      	cpsie	i
 8007944:	623b      	str	r3, [r7, #32]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800794a:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <xTimerGenericCommand+0x9c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02a      	beq.n	80079a8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b05      	cmp	r3, #5
 8007962:	dc18      	bgt.n	8007996 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007964:	f7ff fda8 	bl	80074b8 <xTaskGetSchedulerState>
 8007968:	4603      	mov	r3, r0
 800796a:	2b02      	cmp	r3, #2
 800796c:	d109      	bne.n	8007982 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800796e:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <xTimerGenericCommand+0x9c>)
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	f107 0110 	add.w	r1, r7, #16
 8007976:	2300      	movs	r3, #0
 8007978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800797a:	f7fe f841 	bl	8005a00 <xQueueGenericSend>
 800797e:	6278      	str	r0, [r7, #36]	; 0x24
 8007980:	e012      	b.n	80079a8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <xTimerGenericCommand+0x9c>)
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	f107 0110 	add.w	r1, r7, #16
 800798a:	2300      	movs	r3, #0
 800798c:	2200      	movs	r2, #0
 800798e:	f7fe f837 	bl	8005a00 <xQueueGenericSend>
 8007992:	6278      	str	r0, [r7, #36]	; 0x24
 8007994:	e008      	b.n	80079a8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <xTimerGenericCommand+0x9c>)
 8007998:	6818      	ldr	r0, [r3, #0]
 800799a:	f107 0110 	add.w	r1, r7, #16
 800799e:	2300      	movs	r3, #0
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	f7fe f933 	bl	8005c0c <xQueueGenericSendFromISR>
 80079a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3728      	adds	r7, #40	; 0x28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20005a4c 	.word	0x20005a4c

080079b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af02      	add	r7, sp, #8
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c2:	4b23      	ldr	r3, [pc, #140]	; (8007a50 <prvProcessExpiredTimer+0x98>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	3304      	adds	r3, #4
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fd fd6d 	bl	80054b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d024      	beq.n	8007a2e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	699a      	ldr	r2, [r3, #24]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	18d1      	adds	r1, r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	6978      	ldr	r0, [r7, #20]
 80079f2:	f000 f8d3 	bl	8007b9c <prvInsertTimerInActiveList>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d021      	beq.n	8007a40 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2300      	movs	r3, #0
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	2100      	movs	r1, #0
 8007a06:	6978      	ldr	r0, [r7, #20]
 8007a08:	f7ff ff86 	bl	8007918 <xTimerGenericCommand>
 8007a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d115      	bne.n	8007a40 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	b672      	cpsid	i
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	b662      	cpsie	i
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	6978      	ldr	r0, [r7, #20]
 8007a46:	4798      	blx	r3
}
 8007a48:	bf00      	nop
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20005a44 	.word	0x20005a44

08007a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f857 	bl	8007b14 <prvGetNextExpireTime>
 8007a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f803 	bl	8007a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a72:	f000 f8d5 	bl	8007c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a76:	e7f1      	b.n	8007a5c <prvTimerTask+0x8>

08007a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a82:	f7ff f8f9 	bl	8006c78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a86:	f107 0308 	add.w	r3, r7, #8
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f866 	bl	8007b5c <prvSampleTimeNow>
 8007a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d130      	bne.n	8007afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <prvProcessTimerOrBlockTask+0x3c>
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d806      	bhi.n	8007ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aa6:	f7ff f8f5 	bl	8006c94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ff83 	bl	80079b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ab2:	e024      	b.n	8007afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d008      	beq.n	8007acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <prvProcessTimerOrBlockTask+0x90>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <prvProcessTimerOrBlockTask+0x50>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e000      	b.n	8007aca <prvProcessTimerOrBlockTask+0x52>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <prvProcessTimerOrBlockTask+0x94>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f7fe fe2f 	bl	800673c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ade:	f7ff f8d9 	bl	8006c94 <xTaskResumeAll>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ae8:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <prvProcessTimerOrBlockTask+0x98>)
 8007aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	f3bf 8f6f 	isb	sy
}
 8007af8:	e001      	b.n	8007afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007afa:	f7ff f8cb 	bl	8006c94 <xTaskResumeAll>
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20005a48 	.word	0x20005a48
 8007b0c:	20005a4c 	.word	0x20005a4c
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <prvGetNextExpireTime+0x44>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <prvGetNextExpireTime+0x16>
 8007b26:	2201      	movs	r2, #1
 8007b28:	e000      	b.n	8007b2c <prvGetNextExpireTime+0x18>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b38:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <prvGetNextExpireTime+0x44>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e001      	b.n	8007b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b48:	68fb      	ldr	r3, [r7, #12]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20005a44 	.word	0x20005a44

08007b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b64:	f7ff f936 	bl	8006dd4 <xTaskGetTickCount>
 8007b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b6a:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <prvSampleTimeNow+0x3c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d205      	bcs.n	8007b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b74:	f000 f93c 	bl	8007df0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b86:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <prvSampleTimeNow+0x3c>)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20005a54 	.word	0x20005a54

08007b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d812      	bhi.n	8007be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e01b      	b.n	8007c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <prvInsertTimerInActiveList+0x7c>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7fd fc2c 	bl	800543e <vListInsert>
 8007be6:	e012      	b.n	8007c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d206      	bcs.n	8007bfe <prvInsertTimerInActiveList+0x62>
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d302      	bcc.n	8007bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e007      	b.n	8007c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <prvInsertTimerInActiveList+0x80>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f7fd fc18 	bl	800543e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c0e:	697b      	ldr	r3, [r7, #20]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20005a48 	.word	0x20005a48
 8007c1c:	20005a44 	.word	0x20005a44

08007c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08e      	sub	sp, #56	; 0x38
 8007c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c26:	e0d0      	b.n	8007dca <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da1a      	bge.n	8007c64 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c2e:	1d3b      	adds	r3, r7, #4
 8007c30:	3304      	adds	r3, #4
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10c      	bne.n	8007c54 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	b672      	cpsid	i
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	b662      	cpsie	i
 8007c4e:	61fb      	str	r3, [r7, #28]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5a:	6850      	ldr	r0, [r2, #4]
 8007c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5e:	6892      	ldr	r2, [r2, #8]
 8007c60:	4611      	mov	r1, r2
 8007c62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f2c0 80ae 	blt.w	8007dc8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd fc17 	bl	80054b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c82:	463b      	mov	r3, r7
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff ff69 	bl	8007b5c <prvSampleTimeNow>
 8007c8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	f200 809b 	bhi.w	8007dca <prvProcessReceivedCommands+0x1aa>
 8007c94:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <prvProcessReceivedCommands+0x7c>)
 8007c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9a:	bf00      	nop
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007d3d 	.word	0x08007d3d
 8007cac:	08007d51 	.word	0x08007d51
 8007cb0:	08007d9f 	.word	0x08007d9f
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007cc5 	.word	0x08007cc5
 8007cbc:	08007d3d 	.word	0x08007d3d
 8007cc0:	08007d51 	.word	0x08007d51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	18d1      	adds	r1, r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce4:	f7ff ff5a 	bl	8007b9c <prvInsertTimerInActiveList>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d06d      	beq.n	8007dca <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d062      	beq.n	8007dca <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	441a      	add	r2, r3
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	2300      	movs	r3, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d16:	f7ff fdff 	bl	8007918 <xTimerGenericCommand>
 8007d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d153      	bne.n	8007dca <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	b672      	cpsid	i
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	b662      	cpsie	i
 8007d36:	61bb      	str	r3, [r7, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d4e:	e03c      	b.n	8007dca <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10c      	bne.n	8007d8a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	b672      	cpsid	i
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	b662      	cpsie	i
 8007d84:	617b      	str	r3, [r7, #20]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	18d1      	adds	r1, r2, r3
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d98:	f7ff ff00 	bl	8007b9c <prvInsertTimerInActiveList>
					break;
 8007d9c:	e015      	b.n	8007dca <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dae:	f000 fbcb 	bl	8008548 <vPortFree>
 8007db2:	e00a      	b.n	8007dca <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dc6:	e000      	b.n	8007dca <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007dc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dca:	4b08      	ldr	r3, [pc, #32]	; (8007dec <prvProcessReceivedCommands+0x1cc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	1d39      	adds	r1, r7, #4
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe f850 	bl	8005e78 <xQueueReceive>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f47f af24 	bne.w	8007c28 <prvProcessReceivedCommands+0x8>
	}
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	3730      	adds	r7, #48	; 0x30
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20005a4c 	.word	0x20005a4c

08007df0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007df6:	e04a      	b.n	8007e8e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007df8:	4b2e      	ldr	r3, [pc, #184]	; (8007eb4 <prvSwitchTimerLists+0xc4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e02:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <prvSwitchTimerLists+0xc4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fd fb4d 	bl	80054b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d030      	beq.n	8007e8e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4413      	add	r3, r2
 8007e34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d90e      	bls.n	8007e5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <prvSwitchTimerLists+0xc4>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7fd faf2 	bl	800543e <vListInsert>
 8007e5a:	e018      	b.n	8007e8e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff fd56 	bl	8007918 <xTimerGenericCommand>
 8007e6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10c      	bne.n	8007e8e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	b672      	cpsid	i
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	b662      	cpsie	i
 8007e88:	603b      	str	r3, [r7, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e8e:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <prvSwitchTimerLists+0xc4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1af      	bne.n	8007df8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e98:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <prvSwitchTimerLists+0xc4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <prvSwitchTimerLists+0xc8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <prvSwitchTimerLists+0xc4>)
 8007ea4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <prvSwitchTimerLists+0xc8>)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20005a44 	.word	0x20005a44
 8007eb8:	20005a48 	.word	0x20005a48

08007ebc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ec2:	f000 f94b 	bl	800815c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ec6:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <prvCheckForValidListAndQueue+0x60>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d120      	bne.n	8007f10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ece:	4814      	ldr	r0, [pc, #80]	; (8007f20 <prvCheckForValidListAndQueue+0x64>)
 8007ed0:	f7fd fa64 	bl	800539c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ed4:	4813      	ldr	r0, [pc, #76]	; (8007f24 <prvCheckForValidListAndQueue+0x68>)
 8007ed6:	f7fd fa61 	bl	800539c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007eda:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <prvCheckForValidListAndQueue+0x6c>)
 8007edc:	4a10      	ldr	r2, [pc, #64]	; (8007f20 <prvCheckForValidListAndQueue+0x64>)
 8007ede:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ee0:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <prvCheckForValidListAndQueue+0x70>)
 8007ee2:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <prvCheckForValidListAndQueue+0x68>)
 8007ee4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	4b11      	ldr	r3, [pc, #68]	; (8007f30 <prvCheckForValidListAndQueue+0x74>)
 8007eec:	4a11      	ldr	r2, [pc, #68]	; (8007f34 <prvCheckForValidListAndQueue+0x78>)
 8007eee:	2110      	movs	r1, #16
 8007ef0:	200a      	movs	r0, #10
 8007ef2:	f7fd fb71 	bl	80055d8 <xQueueGenericCreateStatic>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4a08      	ldr	r2, [pc, #32]	; (8007f1c <prvCheckForValidListAndQueue+0x60>)
 8007efa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007efc:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <prvCheckForValidListAndQueue+0x60>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <prvCheckForValidListAndQueue+0x60>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	490b      	ldr	r1, [pc, #44]	; (8007f38 <prvCheckForValidListAndQueue+0x7c>)
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fe fbc2 	bl	8006694 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f10:	f000 f958 	bl	80081c4 <vPortExitCritical>
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20005a4c 	.word	0x20005a4c
 8007f20:	20005a1c 	.word	0x20005a1c
 8007f24:	20005a30 	.word	0x20005a30
 8007f28:	20005a44 	.word	0x20005a44
 8007f2c:	20005a48 	.word	0x20005a48
 8007f30:	20005af8 	.word	0x20005af8
 8007f34:	20005a58 	.word	0x20005a58
 8007f38:	08015b54 	.word	0x08015b54

08007f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 0201 	bic.w	r2, r3, #1
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f6c:	4a0c      	ldr	r2, [pc, #48]	; (8007fa0 <pxPortInitialiseStack+0x64>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b14      	subs	r3, #20
 8007f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3b04      	subs	r3, #4
 8007f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f06f 0202 	mvn.w	r2, #2
 8007f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3b20      	subs	r3, #32
 8007f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f92:	68fb      	ldr	r3, [r7, #12]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	08007fa5 	.word	0x08007fa5

08007fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fae:	4b14      	ldr	r3, [pc, #80]	; (8008000 <prvTaskExitError+0x5c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb6:	d00c      	beq.n	8007fd2 <prvTaskExitError+0x2e>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	b672      	cpsid	i
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	b662      	cpsie	i
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <prvTaskExitError+0x2c>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	b672      	cpsid	i
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	b662      	cpsie	i
 8007fe6:	60bb      	str	r3, [r7, #8]
}
 8007fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fea:	bf00      	nop
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0fc      	beq.n	8007fec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000020 	.word	0x20000020
	...

08008010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <pxCurrentTCBConst2>)
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	6808      	ldr	r0, [r1, #0]
 8008016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	f380 8809 	msr	PSP, r0
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	4770      	bx	lr
 800802c:	f3af 8000 	nop.w

08008030 <pxCurrentTCBConst2>:
 8008030:	2000551c 	.word	0x2000551c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008038:	4808      	ldr	r0, [pc, #32]	; (800805c <prvPortStartFirstTask+0x24>)
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	6800      	ldr	r0, [r0, #0]
 800803e:	f380 8808 	msr	MSP, r0
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8814 	msr	CONTROL, r0
 800804a:	b662      	cpsie	i
 800804c:	b661      	cpsie	f
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	df00      	svc	0
 8008058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800805a:	bf00      	nop
 800805c:	e000ed08 	.word	0xe000ed08

08008060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008066:	4b37      	ldr	r3, [pc, #220]	; (8008144 <xPortStartScheduler+0xe4>)
 8008068:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008088:	b2da      	uxtb	r2, r3
 800808a:	4b2f      	ldr	r3, [pc, #188]	; (8008148 <xPortStartScheduler+0xe8>)
 800808c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800808e:	4b2f      	ldr	r3, [pc, #188]	; (800814c <xPortStartScheduler+0xec>)
 8008090:	2207      	movs	r2, #7
 8008092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008094:	e009      	b.n	80080aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008096:	4b2d      	ldr	r3, [pc, #180]	; (800814c <xPortStartScheduler+0xec>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3b01      	subs	r3, #1
 800809c:	4a2b      	ldr	r2, [pc, #172]	; (800814c <xPortStartScheduler+0xec>)
 800809e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	d0ef      	beq.n	8008096 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080b6:	4b25      	ldr	r3, [pc, #148]	; (800814c <xPortStartScheduler+0xec>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f1c3 0307 	rsb	r3, r3, #7
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d00c      	beq.n	80080dc <xPortStartScheduler+0x7c>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	60bb      	str	r3, [r7, #8]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080dc:	4b1b      	ldr	r3, [pc, #108]	; (800814c <xPortStartScheduler+0xec>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	4a1a      	ldr	r2, [pc, #104]	; (800814c <xPortStartScheduler+0xec>)
 80080e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <xPortStartScheduler+0xec>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ee:	4a17      	ldr	r2, [pc, #92]	; (800814c <xPortStartScheduler+0xec>)
 80080f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080fa:	4b15      	ldr	r3, [pc, #84]	; (8008150 <xPortStartScheduler+0xf0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a14      	ldr	r2, [pc, #80]	; (8008150 <xPortStartScheduler+0xf0>)
 8008100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008104:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008106:	4b12      	ldr	r3, [pc, #72]	; (8008150 <xPortStartScheduler+0xf0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a11      	ldr	r2, [pc, #68]	; (8008150 <xPortStartScheduler+0xf0>)
 800810c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008110:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008112:	f000 f8dd 	bl	80082d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008116:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <xPortStartScheduler+0xf4>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800811c:	f000 f8fc 	bl	8008318 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008120:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <xPortStartScheduler+0xf8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a0c      	ldr	r2, [pc, #48]	; (8008158 <xPortStartScheduler+0xf8>)
 8008126:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800812a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800812c:	f7ff ff84 	bl	8008038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008130:	f7fe ff2e 	bl	8006f90 <vTaskSwitchContext>
	prvTaskExitError();
 8008134:	f7ff ff36 	bl	8007fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	e000e400 	.word	0xe000e400
 8008148:	20005b48 	.word	0x20005b48
 800814c:	20005b4c 	.word	0x20005b4c
 8008150:	e000ed20 	.word	0xe000ed20
 8008154:	20000020 	.word	0x20000020
 8008158:	e000ef34 	.word	0xe000ef34

0800815c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	b672      	cpsid	i
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	b662      	cpsie	i
 8008176:	607b      	str	r3, [r7, #4]
}
 8008178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <vPortEnterCritical+0x60>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	4a0e      	ldr	r2, [pc, #56]	; (80081bc <vPortEnterCritical+0x60>)
 8008182:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008184:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <vPortEnterCritical+0x60>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d111      	bne.n	80081b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <vPortEnterCritical+0x64>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00c      	beq.n	80081b0 <vPortEnterCritical+0x54>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	b672      	cpsid	i
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	b662      	cpsie	i
 80081aa:	603b      	str	r3, [r7, #0]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <vPortEnterCritical+0x52>
	}
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000020 	.word	0x20000020
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ca:	4b13      	ldr	r3, [pc, #76]	; (8008218 <vPortExitCritical+0x54>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10c      	bne.n	80081ec <vPortExitCritical+0x28>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	b672      	cpsid	i
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	b662      	cpsie	i
 80081e6:	607b      	str	r3, [r7, #4]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <vPortExitCritical+0x54>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4a09      	ldr	r2, [pc, #36]	; (8008218 <vPortExitCritical+0x54>)
 80081f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <vPortExitCritical+0x54>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <vPortExitCritical+0x46>
 80081fe:	2300      	movs	r3, #0
 8008200:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f383 8811 	msr	BASEPRI, r3
}
 8008208:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20000020 	.word	0x20000020
 800821c:	00000000 	.word	0x00000000

08008220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008220:	f3ef 8009 	mrs	r0, PSP
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <pxCurrentTCBConst>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f01e 0f10 	tst.w	lr, #16
 8008230:	bf08      	it	eq
 8008232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008244:	b672      	cpsid	i
 8008246:	f380 8811 	msr	BASEPRI, r0
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	b662      	cpsie	i
 8008254:	f7fe fe9c 	bl	8006f90 <vTaskSwitchContext>
 8008258:	f04f 0000 	mov.w	r0, #0
 800825c:	f380 8811 	msr	BASEPRI, r0
 8008260:	bc09      	pop	{r0, r3}
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f01e 0f10 	tst.w	lr, #16
 800826e:	bf08      	it	eq
 8008270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008274:	f380 8809 	msr	PSP, r0
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <pxCurrentTCBConst>:
 8008280:	2000551c 	.word	0x2000551c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	607b      	str	r3, [r7, #4]
}
 80082a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082a6:	f7fe fdb7 	bl	8006e18 <xTaskIncrementTick>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082b0:	4b06      	ldr	r3, [pc, #24]	; (80082cc <SysTick_Handler+0x44>)
 80082b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	2300      	movs	r3, #0
 80082ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f383 8811 	msr	BASEPRI, r3
}
 80082c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <vPortSetupTimerInterrupt+0x34>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082da:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <vPortSetupTimerInterrupt+0x38>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082e0:	4b0a      	ldr	r3, [pc, #40]	; (800830c <vPortSetupTimerInterrupt+0x3c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <vPortSetupTimerInterrupt+0x40>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	099b      	lsrs	r3, r3, #6
 80082ec:	4a09      	ldr	r2, [pc, #36]	; (8008314 <vPortSetupTimerInterrupt+0x44>)
 80082ee:	3b01      	subs	r3, #1
 80082f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082f2:	4b04      	ldr	r3, [pc, #16]	; (8008304 <vPortSetupTimerInterrupt+0x34>)
 80082f4:	2207      	movs	r2, #7
 80082f6:	601a      	str	r2, [r3, #0]
}
 80082f8:	bf00      	nop
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	e000e010 	.word	0xe000e010
 8008308:	e000e018 	.word	0xe000e018
 800830c:	20000000 	.word	0x20000000
 8008310:	10624dd3 	.word	0x10624dd3
 8008314:	e000e014 	.word	0xe000e014

08008318 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008318:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008328 <vPortEnableVFP+0x10>
 800831c:	6801      	ldr	r1, [r0, #0]
 800831e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008322:	6001      	str	r1, [r0, #0]
 8008324:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008326:	bf00      	nop
 8008328:	e000ed88 	.word	0xe000ed88

0800832c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008332:	f3ef 8305 	mrs	r3, IPSR
 8008336:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d916      	bls.n	800836c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800833e:	4a19      	ldr	r2, [pc, #100]	; (80083a4 <vPortValidateInterruptPriority+0x78>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008348:	4b17      	ldr	r3, [pc, #92]	; (80083a8 <vPortValidateInterruptPriority+0x7c>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	7afa      	ldrb	r2, [r7, #11]
 800834e:	429a      	cmp	r2, r3
 8008350:	d20c      	bcs.n	800836c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	b672      	cpsid	i
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	b662      	cpsie	i
 8008366:	607b      	str	r3, [r7, #4]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800836c:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <vPortValidateInterruptPriority+0x80>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <vPortValidateInterruptPriority+0x84>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d90c      	bls.n	8008396 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	b672      	cpsid	i
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	b662      	cpsie	i
 8008390:	603b      	str	r3, [r7, #0]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <vPortValidateInterruptPriority+0x68>
	}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	e000e3f0 	.word	0xe000e3f0
 80083a8:	20005b48 	.word	0x20005b48
 80083ac:	e000ed0c 	.word	0xe000ed0c
 80083b0:	20005b4c 	.word	0x20005b4c

080083b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	; 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083c0:	f7fe fc5a 	bl	8006c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083c4:	4b5b      	ldr	r3, [pc, #364]	; (8008534 <pvPortMalloc+0x180>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083cc:	f000 f91a 	bl	8008604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083d0:	4b59      	ldr	r3, [pc, #356]	; (8008538 <pvPortMalloc+0x184>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 8092 	bne.w	8008502 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01f      	beq.n	8008424 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80083e4:	2208      	movs	r2, #8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4413      	add	r3, r2
 80083ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f023 0307 	bic.w	r3, r3, #7
 80083fc:	3308      	adds	r3, #8
 80083fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00c      	beq.n	8008424 <pvPortMalloc+0x70>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	b672      	cpsid	i
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	b662      	cpsie	i
 800841e:	617b      	str	r3, [r7, #20]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d06b      	beq.n	8008502 <pvPortMalloc+0x14e>
 800842a:	4b44      	ldr	r3, [pc, #272]	; (800853c <pvPortMalloc+0x188>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d866      	bhi.n	8008502 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008434:	4b42      	ldr	r3, [pc, #264]	; (8008540 <pvPortMalloc+0x18c>)
 8008436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008438:	4b41      	ldr	r3, [pc, #260]	; (8008540 <pvPortMalloc+0x18c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800843e:	e004      	b.n	800844a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d903      	bls.n	800845c <pvPortMalloc+0xa8>
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1f1      	bne.n	8008440 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800845c:	4b35      	ldr	r3, [pc, #212]	; (8008534 <pvPortMalloc+0x180>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008462:	429a      	cmp	r2, r3
 8008464:	d04d      	beq.n	8008502 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2208      	movs	r2, #8
 800846c:	4413      	add	r3, r2
 800846e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	2308      	movs	r3, #8
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	429a      	cmp	r2, r3
 8008486:	d921      	bls.n	80084cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00c      	beq.n	80084b4 <pvPortMalloc+0x100>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	b672      	cpsid	i
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	b662      	cpsie	i
 80084ae:	613b      	str	r3, [r7, #16]
}
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	1ad2      	subs	r2, r2, r3
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084c6:	69b8      	ldr	r0, [r7, #24]
 80084c8:	f000 f8fe 	bl	80086c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <pvPortMalloc+0x188>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	4a19      	ldr	r2, [pc, #100]	; (800853c <pvPortMalloc+0x188>)
 80084d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <pvPortMalloc+0x188>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	4b19      	ldr	r3, [pc, #100]	; (8008544 <pvPortMalloc+0x190>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d203      	bcs.n	80084ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084e6:	4b15      	ldr	r3, [pc, #84]	; (800853c <pvPortMalloc+0x188>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a16      	ldr	r2, [pc, #88]	; (8008544 <pvPortMalloc+0x190>)
 80084ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	4b11      	ldr	r3, [pc, #68]	; (8008538 <pvPortMalloc+0x184>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008502:	f7fe fbc7 	bl	8006c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00c      	beq.n	800852a <pvPortMalloc+0x176>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	b672      	cpsid	i
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	b662      	cpsie	i
 8008524:	60fb      	str	r3, [r7, #12]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <pvPortMalloc+0x174>
	return pvReturn;
 800852a:	69fb      	ldr	r3, [r7, #28]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3728      	adds	r7, #40	; 0x28
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20009758 	.word	0x20009758
 8008538:	20009764 	.word	0x20009764
 800853c:	2000975c 	.word	0x2000975c
 8008540:	20009750 	.word	0x20009750
 8008544:	20009760 	.word	0x20009760

08008548 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d04c      	beq.n	80085f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800855a:	2308      	movs	r3, #8
 800855c:	425b      	negs	r3, r3
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4413      	add	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4b23      	ldr	r3, [pc, #140]	; (80085fc <vPortFree+0xb4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4013      	ands	r3, r2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10c      	bne.n	8008590 <vPortFree+0x48>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	b672      	cpsid	i
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	b662      	cpsie	i
 800858a:	60fb      	str	r3, [r7, #12]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00c      	beq.n	80085b2 <vPortFree+0x6a>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	b672      	cpsid	i
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	b662      	cpsie	i
 80085ac:	60bb      	str	r3, [r7, #8]
}
 80085ae:	bf00      	nop
 80085b0:	e7fe      	b.n	80085b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4b11      	ldr	r3, [pc, #68]	; (80085fc <vPortFree+0xb4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d019      	beq.n	80085f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d115      	bne.n	80085f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <vPortFree+0xb4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	401a      	ands	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085d8:	f7fe fb4e 	bl	8006c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <vPortFree+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4413      	add	r3, r2
 80085e6:	4a06      	ldr	r2, [pc, #24]	; (8008600 <vPortFree+0xb8>)
 80085e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ea:	6938      	ldr	r0, [r7, #16]
 80085ec:	f000 f86c 	bl	80086c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085f0:	f7fe fb50 	bl	8006c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085f4:	bf00      	nop
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20009764 	.word	0x20009764
 8008600:	2000975c 	.word	0x2000975c

08008604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800860a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800860e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008610:	4b27      	ldr	r3, [pc, #156]	; (80086b0 <prvHeapInit+0xac>)
 8008612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	4a1f      	ldr	r2, [pc, #124]	; (80086b0 <prvHeapInit+0xac>)
 8008634:	4413      	add	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800863c:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <prvHeapInit+0xb0>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008642:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <prvHeapInit+0xb0>)
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008650:	2208      	movs	r2, #8
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <prvHeapInit+0xb4>)
 8008664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <prvHeapInit+0xb4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <prvHeapInit+0xb4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <prvHeapInit+0xb4>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <prvHeapInit+0xb8>)
 8008692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <prvHeapInit+0xbc>)
 800869a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <prvHeapInit+0xc0>)
 800869e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20005b50 	.word	0x20005b50
 80086b4:	20009750 	.word	0x20009750
 80086b8:	20009758 	.word	0x20009758
 80086bc:	20009760 	.word	0x20009760
 80086c0:	2000975c 	.word	0x2000975c
 80086c4:	20009764 	.word	0x20009764

080086c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086d0:	4b28      	ldr	r3, [pc, #160]	; (8008774 <prvInsertBlockIntoFreeList+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e002      	b.n	80086dc <prvInsertBlockIntoFreeList+0x14>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d8f7      	bhi.n	80086d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4413      	add	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d108      	bne.n	800870a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	441a      	add	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d118      	bne.n	8008750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b15      	ldr	r3, [pc, #84]	; (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d00d      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	e008      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e003      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d002      	beq.n	8008766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20009750 	.word	0x20009750
 8008778:	20009758 	.word	0x20009758

0800877c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	461a      	mov	r2, r3
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 fb5d 	bl	8009e50 <tcpip_send_msg_wait_sem>
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800879a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d103      	bne.n	80087aa <netconn_apimsg+0x2e>
    return apimsg->err;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80087a8:	e001      	b.n	80087ae <netconn_apimsg+0x32>
  }
  return err;
 80087aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08c      	sub	sp, #48	; 0x30
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	603a      	str	r2, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
 80087c4:	460b      	mov	r3, r1
 80087c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fd39 	bl	8009244 <netconn_alloc>
 80087d2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d054      	beq.n	8008884 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80087da:	79bb      	ldrb	r3, [r7, #6]
 80087dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80087e2:	f107 0308 	add.w	r3, r7, #8
 80087e6:	4619      	mov	r1, r3
 80087e8:	4829      	ldr	r0, [pc, #164]	; (8008890 <netconn_new_with_proto_and_callback+0xd8>)
 80087ea:	f7ff ffc7 	bl	800877c <netconn_apimsg>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80087f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d043      	beq.n	8008884 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <netconn_new_with_proto_and_callback+0x58>
 8008804:	4b23      	ldr	r3, [pc, #140]	; (8008894 <netconn_new_with_proto_and_callback+0xdc>)
 8008806:	22a3      	movs	r2, #163	; 0xa3
 8008808:	4923      	ldr	r1, [pc, #140]	; (8008898 <netconn_new_with_proto_and_callback+0xe0>)
 800880a:	4824      	ldr	r0, [pc, #144]	; (800889c <netconn_new_with_proto_and_callback+0xe4>)
 800880c:	f00c fa20 	bl	8014c50 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	3310      	adds	r3, #16
 8008814:	4618      	mov	r0, r3
 8008816:	f00b ff4b 	bl	80146b0 <sys_mbox_valid>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d105      	bne.n	800882c <netconn_new_with_proto_and_callback+0x74>
 8008820:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <netconn_new_with_proto_and_callback+0xdc>)
 8008822:	22a4      	movs	r2, #164	; 0xa4
 8008824:	491e      	ldr	r1, [pc, #120]	; (80088a0 <netconn_new_with_proto_and_callback+0xe8>)
 8008826:	481d      	ldr	r0, [pc, #116]	; (800889c <netconn_new_with_proto_and_callback+0xe4>)
 8008828:	f00c fa12 	bl	8014c50 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	3314      	adds	r3, #20
 8008830:	4618      	mov	r0, r3
 8008832:	f00b ff3d 	bl	80146b0 <sys_mbox_valid>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <netconn_new_with_proto_and_callback+0x90>
 800883c:	4b15      	ldr	r3, [pc, #84]	; (8008894 <netconn_new_with_proto_and_callback+0xdc>)
 800883e:	22a6      	movs	r2, #166	; 0xa6
 8008840:	4918      	ldr	r1, [pc, #96]	; (80088a4 <netconn_new_with_proto_and_callback+0xec>)
 8008842:	4816      	ldr	r0, [pc, #88]	; (800889c <netconn_new_with_proto_and_callback+0xe4>)
 8008844:	f00c fa04 	bl	8014c50 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	330c      	adds	r3, #12
 800884c:	4618      	mov	r0, r3
 800884e:	f00b ff8c 	bl	801476a <sys_sem_valid>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d105      	bne.n	8008864 <netconn_new_with_proto_and_callback+0xac>
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <netconn_new_with_proto_and_callback+0xdc>)
 800885a:	22a9      	movs	r2, #169	; 0xa9
 800885c:	4912      	ldr	r1, [pc, #72]	; (80088a8 <netconn_new_with_proto_and_callback+0xf0>)
 800885e:	480f      	ldr	r0, [pc, #60]	; (800889c <netconn_new_with_proto_and_callback+0xe4>)
 8008860:	f00c f9f6 	bl	8014c50 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	330c      	adds	r3, #12
 8008868:	4618      	mov	r0, r3
 800886a:	f00b ff71 	bl	8014750 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	3310      	adds	r3, #16
 8008872:	4618      	mov	r0, r3
 8008874:	f00b fea8 	bl	80145c8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800887a:	2006      	movs	r0, #6
 800887c:	f002 f894 	bl	800a9a8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008880:	2300      	movs	r3, #0
 8008882:	e000      	b.n	8008886 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008886:	4618      	mov	r0, r3
 8008888:	3730      	adds	r7, #48	; 0x30
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	08009219 	.word	0x08009219
 8008894:	08015b5c 	.word	0x08015b5c
 8008898:	08015b90 	.word	0x08015b90
 800889c:	08015bb4 	.word	0x08015bb4
 80088a0:	08015bdc 	.word	0x08015bdc
 80088a4:	08015bf4 	.word	0x08015bf4
 80088a8:	08015c18 	.word	0x08015c18

080088ac <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08e      	sub	sp, #56	; 0x38
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <netconn_bind+0x28>
 80088c0:	4b11      	ldr	r3, [pc, #68]	; (8008908 <netconn_bind+0x5c>)
 80088c2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80088c6:	4911      	ldr	r1, [pc, #68]	; (800890c <netconn_bind+0x60>)
 80088c8:	4811      	ldr	r0, [pc, #68]	; (8008910 <netconn_bind+0x64>)
 80088ca:	f00c f9c1 	bl	8014c50 <iprintf>
 80088ce:	f06f 030f 	mvn.w	r3, #15
 80088d2:	e015      	b.n	8008900 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80088da:	4b0e      	ldr	r3, [pc, #56]	; (8008914 <netconn_bind+0x68>)
 80088dc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80088ea:	f107 0314 	add.w	r3, r7, #20
 80088ee:	4619      	mov	r1, r3
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <netconn_bind+0x6c>)
 80088f2:	f7ff ff43 	bl	800877c <netconn_apimsg>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80088fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008900:	4618      	mov	r0, r3
 8008902:	3738      	adds	r7, #56	; 0x38
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	08015b5c 	.word	0x08015b5c
 800890c:	08015c94 	.word	0x08015c94
 8008910:	08015bb4 	.word	0x08015bb4
 8008914:	08018c30 	.word	0x08018c30
 8008918:	08009681 	.word	0x08009681

0800891c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08c      	sub	sp, #48	; 0x30
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <netconn_listen_with_backlog+0x26>
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <netconn_listen_with_backlog+0x48>)
 8008930:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008934:	490c      	ldr	r1, [pc, #48]	; (8008968 <netconn_listen_with_backlog+0x4c>)
 8008936:	480d      	ldr	r0, [pc, #52]	; (800896c <netconn_listen_with_backlog+0x50>)
 8008938:	f00c f98a 	bl	8014c50 <iprintf>
 800893c:	f06f 030f 	mvn.w	r3, #15
 8008940:	e00c      	b.n	800895c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008946:	f107 030c 	add.w	r3, r7, #12
 800894a:	4619      	mov	r1, r3
 800894c:	4808      	ldr	r0, [pc, #32]	; (8008970 <netconn_listen_with_backlog+0x54>)
 800894e:	f7ff ff15 	bl	800877c <netconn_apimsg>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008958:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800895c:	4618      	mov	r0, r3
 800895e:	3730      	adds	r7, #48	; 0x30
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	08015b5c 	.word	0x08015b5c
 8008968:	08015d14 	.word	0x08015d14
 800896c:	08015bb4 	.word	0x08015bb4
 8008970:	080096d9 	.word	0x080096d9

08008974 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d109      	bne.n	8008998 <netconn_accept+0x24>
 8008984:	4b3d      	ldr	r3, [pc, #244]	; (8008a7c <netconn_accept+0x108>)
 8008986:	f240 12e1 	movw	r2, #481	; 0x1e1
 800898a:	493d      	ldr	r1, [pc, #244]	; (8008a80 <netconn_accept+0x10c>)
 800898c:	483d      	ldr	r0, [pc, #244]	; (8008a84 <netconn_accept+0x110>)
 800898e:	f00c f95f 	bl	8014c50 <iprintf>
 8008992:	f06f 030f 	mvn.w	r3, #15
 8008996:	e06c      	b.n	8008a72 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <netconn_accept+0x44>
 80089a4:	4b35      	ldr	r3, [pc, #212]	; (8008a7c <netconn_accept+0x108>)
 80089a6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80089aa:	4937      	ldr	r1, [pc, #220]	; (8008a88 <netconn_accept+0x114>)
 80089ac:	4835      	ldr	r0, [pc, #212]	; (8008a84 <netconn_accept+0x110>)
 80089ae:	f00c f94f 	bl	8014c50 <iprintf>
 80089b2:	f06f 030f 	mvn.w	r3, #15
 80089b6:	e05c      	b.n	8008a72 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f867 	bl	8008a8c <netconn_err>
 80089be:	4603      	mov	r3, r0
 80089c0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80089c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80089ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089ce:	e050      	b.n	8008a72 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3314      	adds	r3, #20
 80089d4:	4618      	mov	r0, r3
 80089d6:	f00b fe6b 	bl	80146b0 <sys_mbox_valid>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <netconn_accept+0x78>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7f1b      	ldrb	r3, [r3, #28]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80089ec:	f06f 030e 	mvn.w	r3, #14
 80089f0:	e03f      	b.n	8008a72 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7f1b      	ldrb	r3, [r3, #28]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00e      	beq.n	8008a1c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3314      	adds	r3, #20
 8008a02:	f107 020c 	add.w	r2, r7, #12
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f00b fe3a 	bl	8014682 <sys_arch_mbox_tryfetch>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a14:	d10a      	bne.n	8008a2c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008a16:	f06f 0306 	mvn.w	r3, #6
 8008a1a:	e02a      	b.n	8008a72 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3314      	adds	r3, #20
 8008a20:	f107 010c 	add.w	r1, r7, #12
 8008a24:	2200      	movs	r2, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f00b fdfa 	bl	8014620 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <netconn_accept+0xcc>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f107 0213 	add.w	r2, r7, #19
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f871 	bl	8008b30 <lwip_netconn_is_err_msg>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008a54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a58:	e00b      	b.n	8008a72 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008a60:	f06f 030e 	mvn.w	r3, #14
 8008a64:	e005      	b.n	8008a72 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008a70:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08015b5c 	.word	0x08015b5c
 8008a80:	08015d34 	.word	0x08015d34
 8008a84:	08015bb4 	.word	0x08015bb4
 8008a88:	08015d54 	.word	0x08015d54

08008a8c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <netconn_err+0x12>
    return ERR_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e00d      	b.n	8008aba <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008a9e:	f00b fee1 	bl	8014864 <sys_arch_protect>
 8008aa2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	7a1b      	ldrb	r3, [r3, #8]
 8008aa8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f00b fee5 	bl	8014880 <sys_arch_unprotect>
  return err;
 8008ab6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad2:	f113 0f0d 	cmn.w	r3, #13
 8008ad6:	d009      	beq.n	8008aec <lwip_netconn_err_to_msg+0x28>
 8008ad8:	f113 0f0d 	cmn.w	r3, #13
 8008adc:	dc0c      	bgt.n	8008af8 <lwip_netconn_err_to_msg+0x34>
 8008ade:	f113 0f0f 	cmn.w	r3, #15
 8008ae2:	d007      	beq.n	8008af4 <lwip_netconn_err_to_msg+0x30>
 8008ae4:	f113 0f0e 	cmn.w	r3, #14
 8008ae8:	d002      	beq.n	8008af0 <lwip_netconn_err_to_msg+0x2c>
 8008aea:	e005      	b.n	8008af8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <lwip_netconn_err_to_msg+0x54>)
 8008aee:	e00e      	b.n	8008b0e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <lwip_netconn_err_to_msg+0x58>)
 8008af2:	e00c      	b.n	8008b0e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <lwip_netconn_err_to_msg+0x5c>)
 8008af6:	e00a      	b.n	8008b0e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d005      	beq.n	8008b0c <lwip_netconn_err_to_msg+0x48>
 8008b00:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <lwip_netconn_err_to_msg+0x60>)
 8008b02:	227d      	movs	r2, #125	; 0x7d
 8008b04:	4908      	ldr	r1, [pc, #32]	; (8008b28 <lwip_netconn_err_to_msg+0x64>)
 8008b06:	4809      	ldr	r0, [pc, #36]	; (8008b2c <lwip_netconn_err_to_msg+0x68>)
 8008b08:	f00c f8a2 	bl	8014c50 <iprintf>
      return NULL;
 8008b0c:	2300      	movs	r3, #0
  }
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	08018b2c 	.word	0x08018b2c
 8008b1c:	08018b2d 	.word	0x08018b2d
 8008b20:	08018b2e 	.word	0x08018b2e
 8008b24:	08015ea8 	.word	0x08015ea8
 8008b28:	08015edc 	.word	0x08015edc
 8008b2c:	08015eec 	.word	0x08015eec

08008b30 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <lwip_netconn_is_err_msg+0x1c>
 8008b40:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <lwip_netconn_is_err_msg+0x5c>)
 8008b42:	2285      	movs	r2, #133	; 0x85
 8008b44:	4912      	ldr	r1, [pc, #72]	; (8008b90 <lwip_netconn_is_err_msg+0x60>)
 8008b46:	4813      	ldr	r0, [pc, #76]	; (8008b94 <lwip_netconn_is_err_msg+0x64>)
 8008b48:	f00c f882 	bl	8014c50 <iprintf>

  if (msg == &netconn_aborted) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a12      	ldr	r2, [pc, #72]	; (8008b98 <lwip_netconn_is_err_msg+0x68>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d104      	bne.n	8008b5e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	22f3      	movs	r2, #243	; 0xf3
 8008b58:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e012      	b.n	8008b84 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a0e      	ldr	r2, [pc, #56]	; (8008b9c <lwip_netconn_is_err_msg+0x6c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d104      	bne.n	8008b70 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	22f2      	movs	r2, #242	; 0xf2
 8008b6a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e009      	b.n	8008b84 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a0b      	ldr	r2, [pc, #44]	; (8008ba0 <lwip_netconn_is_err_msg+0x70>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d104      	bne.n	8008b82 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	22f1      	movs	r2, #241	; 0xf1
 8008b7c:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08015ea8 	.word	0x08015ea8
 8008b90:	08015f14 	.word	0x08015f14
 8008b94:	08015eec 	.word	0x08015eec
 8008b98:	08018b2c 	.word	0x08018b2c
 8008b9c:	08018b2d 	.word	0x08018b2d
 8008ba0:	08018b2e 	.word	0x08018b2e

08008ba4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d106      	bne.n	8008bc6 <recv_tcp+0x22>
 8008bb8:	4b36      	ldr	r3, [pc, #216]	; (8008c94 <recv_tcp+0xf0>)
 8008bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008bbe:	4936      	ldr	r1, [pc, #216]	; (8008c98 <recv_tcp+0xf4>)
 8008bc0:	4836      	ldr	r0, [pc, #216]	; (8008c9c <recv_tcp+0xf8>)
 8008bc2:	f00c f845 	bl	8014c50 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <recv_tcp+0x36>
 8008bcc:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <recv_tcp+0xf0>)
 8008bce:	f240 122d 	movw	r2, #301	; 0x12d
 8008bd2:	4933      	ldr	r1, [pc, #204]	; (8008ca0 <recv_tcp+0xfc>)
 8008bd4:	4831      	ldr	r0, [pc, #196]	; (8008c9c <recv_tcp+0xf8>)
 8008bd6:	f00c f83b 	bl	8014c50 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d006      	beq.n	8008bf0 <recv_tcp+0x4c>
 8008be2:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <recv_tcp+0xf0>)
 8008be4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008be8:	492e      	ldr	r1, [pc, #184]	; (8008ca4 <recv_tcp+0x100>)
 8008bea:	482c      	ldr	r0, [pc, #176]	; (8008c9c <recv_tcp+0xf8>)
 8008bec:	f00c f830 	bl	8014c50 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <recv_tcp+0x5c>
    return ERR_VAL;
 8008bfa:	f06f 0305 	mvn.w	r3, #5
 8008bfe:	e045      	b.n	8008c8c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d006      	beq.n	8008c18 <recv_tcp+0x74>
 8008c0a:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <recv_tcp+0xf0>)
 8008c0c:	f240 1235 	movw	r2, #309	; 0x135
 8008c10:	4925      	ldr	r1, [pc, #148]	; (8008ca8 <recv_tcp+0x104>)
 8008c12:	4822      	ldr	r0, [pc, #136]	; (8008c9c <recv_tcp+0xf8>)
 8008c14:	f00c f81c 	bl	8014c50 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	3310      	adds	r3, #16
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f00b fd47 	bl	80146b0 <sys_mbox_valid>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10d      	bne.n	8008c44 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d008      	beq.n	8008c40 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	891b      	ldrh	r3, [r3, #8]
 8008c32:	4619      	mov	r1, r3
 8008c34:	68b8      	ldr	r0, [r7, #8]
 8008c36:	f003 fd0f 	bl	800c658 <tcp_recved>
      pbuf_free(p);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f002 fd54 	bl	800b6e8 <pbuf_free>
    }
    return ERR_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	e023      	b.n	8008c8c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <recv_tcp+0xb2>
    msg = p;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	891b      	ldrh	r3, [r3, #8]
 8008c52:	83fb      	strh	r3, [r7, #30]
 8008c54:	e003      	b.n	8008c5e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008c56:	4b15      	ldr	r3, [pc, #84]	; (8008cac <recv_tcp+0x108>)
 8008c58:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	3310      	adds	r3, #16
 8008c62:	69b9      	ldr	r1, [r7, #24]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f00b fcc1 	bl	80145ec <sys_mbox_trypost>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c74:	e00a      	b.n	8008c8c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <recv_tcp+0xe6>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	8bfa      	ldrh	r2, [r7, #30]
 8008c84:	2100      	movs	r1, #0
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	4798      	blx	r3
  }

  return ERR_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	08015ea8 	.word	0x08015ea8
 8008c98:	08015f20 	.word	0x08015f20
 8008c9c:	08015eec 	.word	0x08015eec
 8008ca0:	08015f44 	.word	0x08015f44
 8008ca4:	08015f64 	.word	0x08015f64
 8008ca8:	08015f7c 	.word	0x08015f7c
 8008cac:	08018b2e 	.word	0x08018b2e

08008cb0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <poll_tcp+0x22>
 8008cc4:	4b29      	ldr	r3, [pc, #164]	; (8008d6c <poll_tcp+0xbc>)
 8008cc6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008cca:	4929      	ldr	r1, [pc, #164]	; (8008d70 <poll_tcp+0xc0>)
 8008ccc:	4829      	ldr	r0, [pc, #164]	; (8008d74 <poll_tcp+0xc4>)
 8008cce:	f00b ffbf 	bl	8014c50 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d104      	bne.n	8008ce4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008cda:	2101      	movs	r1, #1
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 fd93 	bl	8009808 <lwip_netconn_do_writemore>
 8008ce2:	e016      	b.n	8008d12 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d112      	bne.n	8008d12 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <poll_tcp+0x5a>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	7a5b      	ldrb	r3, [r3, #9]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d005      	beq.n	8008d0a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	7a5a      	ldrb	r2, [r3, #9]
 8008d04:	3a01      	subs	r2, #1
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 fb4d 	bl	80093ac <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	7f1b      	ldrb	r3, [r3, #28]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d021      	beq.n	8008d62 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d01d      	beq.n	8008d62 <poll_tcp+0xb2>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d2e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008d32:	d316      	bcc.n	8008d62 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d810      	bhi.n	8008d62 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	7f1b      	ldrb	r3, [r3, #28]
 8008d44:	f023 0310 	bic.w	r3, r3, #16
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <poll_tcp+0xb2>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2102      	movs	r1, #2
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	08015ea8 	.word	0x08015ea8
 8008d70:	08015f9c 	.word	0x08015f9c
 8008d74:	08015eec 	.word	0x08015eec

08008d78 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <sent_tcp+0x26>
 8008d90:	4b20      	ldr	r3, [pc, #128]	; (8008e14 <sent_tcp+0x9c>)
 8008d92:	f240 1293 	movw	r2, #403	; 0x193
 8008d96:	4920      	ldr	r1, [pc, #128]	; (8008e18 <sent_tcp+0xa0>)
 8008d98:	4820      	ldr	r0, [pc, #128]	; (8008e1c <sent_tcp+0xa4>)
 8008d9a:	f00b ff59 	bl	8014c50 <iprintf>

  if (conn) {
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d032      	beq.n	8008e0a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d104      	bne.n	8008db6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008dac:	2101      	movs	r1, #1
 8008dae:	6978      	ldr	r0, [r7, #20]
 8008db0:	f000 fd2a 	bl	8009808 <lwip_netconn_do_writemore>
 8008db4:	e007      	b.n	8008dc6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d103      	bne.n	8008dc6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	6978      	ldr	r0, [r7, #20]
 8008dc2:	f000 faf3 	bl	80093ac <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d01d      	beq.n	8008e0a <sent_tcp+0x92>
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008dd6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008dda:	d316      	bcc.n	8008e0a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d810      	bhi.n	8008e0a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	7f1b      	ldrb	r3, [r3, #28]
 8008dec:	f023 0310 	bic.w	r3, r3, #16
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <sent_tcp+0x92>
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	88fa      	ldrh	r2, [r7, #6]
 8008e04:	2102      	movs	r1, #2
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08015ea8 	.word	0x08015ea8
 8008e18:	08015f9c 	.word	0x08015f9c
 8008e1c:	08015eec 	.word	0x08015eec

08008e20 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d106      	bne.n	8008e44 <err_tcp+0x24>
 8008e36:	4b5f      	ldr	r3, [pc, #380]	; (8008fb4 <err_tcp+0x194>)
 8008e38:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008e3c:	495e      	ldr	r1, [pc, #376]	; (8008fb8 <err_tcp+0x198>)
 8008e3e:	485f      	ldr	r0, [pc, #380]	; (8008fbc <err_tcp+0x19c>)
 8008e40:	f00b ff06 	bl	8014c50 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008e44:	f00b fd0e 	bl	8014864 <sys_arch_protect>
 8008e48:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	7f1b      	ldrb	r3, [r3, #28]
 8008e5a:	f043 0301 	orr.w	r3, r3, #1
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008e70:	69b8      	ldr	r0, [r7, #24]
 8008e72:	f00b fd05 	bl	8014880 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <err_tcp+0x6a>
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	2200      	movs	r2, #0
 8008e84:	2104      	movs	r1, #4
 8008e86:	69f8      	ldr	r0, [r7, #28]
 8008e88:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <err_tcp+0x7e>
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	2200      	movs	r2, #0
 8008e98:	2100      	movs	r1, #0
 8008e9a:	69f8      	ldr	r0, [r7, #28]
 8008e9c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <err_tcp+0x92>
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2102      	movs	r1, #2
 8008eae:	69f8      	ldr	r0, [r7, #28]
 8008eb0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fe04 	bl	8008ac4 <lwip_netconn_err_to_msg>
 8008ebc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	3310      	adds	r3, #16
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f00b fbf4 	bl	80146b0 <sys_mbox_valid>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3310      	adds	r3, #16
 8008ed2:	6939      	ldr	r1, [r7, #16]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f00b fb89 	bl	80145ec <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	3314      	adds	r3, #20
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f00b fbe6 	bl	80146b0 <sys_mbox_valid>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	3314      	adds	r3, #20
 8008eee:	6939      	ldr	r1, [r7, #16]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f00b fb7b 	bl	80145ec <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d005      	beq.n	8008f08 <err_tcp+0xe8>
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d002      	beq.n	8008f08 <err_tcp+0xe8>
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d143      	bne.n	8008f90 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	7f1b      	ldrb	r3, [r3, #28]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bf14      	ite	ne
 8008f14:	2301      	movne	r3, #1
 8008f16:	2300      	moveq	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	7f1b      	ldrb	r3, [r3, #28]
 8008f20:	f023 0304 	bic.w	r3, r3, #4
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d13b      	bne.n	8008fa8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <err_tcp+0x126>
 8008f38:	4b1e      	ldr	r3, [pc, #120]	; (8008fb4 <err_tcp+0x194>)
 8008f3a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008f3e:	4920      	ldr	r1, [pc, #128]	; (8008fc0 <err_tcp+0x1a0>)
 8008f40:	481e      	ldr	r0, [pc, #120]	; (8008fbc <err_tcp+0x19c>)
 8008f42:	f00b fe85 	bl	8014c50 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d104      	bne.n	8008f56 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	2200      	movs	r2, #0
 8008f52:	711a      	strb	r2, [r3, #4]
 8008f54:	e003      	b.n	8008f5e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	330c      	adds	r3, #12
 8008f66:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008f68:	68b8      	ldr	r0, [r7, #8]
 8008f6a:	f00b fbfe 	bl	801476a <sys_sem_valid>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d106      	bne.n	8008f82 <err_tcp+0x162>
 8008f74:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <err_tcp+0x194>)
 8008f76:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008f7a:	4912      	ldr	r1, [pc, #72]	; (8008fc4 <err_tcp+0x1a4>)
 8008f7c:	480f      	ldr	r0, [pc, #60]	; (8008fbc <err_tcp+0x19c>)
 8008f7e:	f00b fe67 	bl	8014c50 <iprintf>
      conn->current_msg = NULL;
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	2200      	movs	r2, #0
 8008f86:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008f88:	68b8      	ldr	r0, [r7, #8]
 8008f8a:	f00b fbd4 	bl	8014736 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008f8e:	e00b      	b.n	8008fa8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d008      	beq.n	8008faa <err_tcp+0x18a>
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <err_tcp+0x194>)
 8008f9a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008f9e:	490a      	ldr	r1, [pc, #40]	; (8008fc8 <err_tcp+0x1a8>)
 8008fa0:	4806      	ldr	r0, [pc, #24]	; (8008fbc <err_tcp+0x19c>)
 8008fa2:	f00b fe55 	bl	8014c50 <iprintf>
  }
}
 8008fa6:	e000      	b.n	8008faa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008fa8:	bf00      	nop
}
 8008faa:	bf00      	nop
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	08015ea8 	.word	0x08015ea8
 8008fb8:	08015f9c 	.word	0x08015f9c
 8008fbc:	08015eec 	.word	0x08015eec
 8008fc0:	08015fac 	.word	0x08015fac
 8008fc4:	08015fc8 	.word	0x08015fc8
 8008fc8:	08015fe4 	.word	0x08015fe4

08008fcc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f004 fa01 	bl	800d3e4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008fe2:	490a      	ldr	r1, [pc, #40]	; (800900c <setup_tcp+0x40>)
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f004 fa0f 	bl	800d408 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008fea:	4909      	ldr	r1, [pc, #36]	; (8009010 <setup_tcp+0x44>)
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f004 fa2d 	bl	800d44c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4907      	ldr	r1, [pc, #28]	; (8009014 <setup_tcp+0x48>)
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f004 fa84 	bl	800d504 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008ffc:	4906      	ldr	r1, [pc, #24]	; (8009018 <setup_tcp+0x4c>)
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f004 fa46 	bl	800d490 <tcp_err>
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	08008ba5 	.word	0x08008ba5
 8009010:	08008d79 	.word	0x08008d79
 8009014:	08008cb1 	.word	0x08008cb1
 8009018:	08008e21 	.word	0x08008e21

0800901c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800901c:	b590      	push	{r4, r7, lr}
 800901e:	b089      	sub	sp, #36	; 0x24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	4613      	mov	r3, r2
 8009028:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <accept_function+0x1e>
    return ERR_VAL;
 8009034:	f06f 0305 	mvn.w	r3, #5
 8009038:	e0a1      	b.n	800917e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	3314      	adds	r3, #20
 800903e:	4618      	mov	r0, r3
 8009040:	f00b fb36 	bl	80146b0 <sys_mbox_valid>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800904a:	f06f 0305 	mvn.w	r3, #5
 800904e:	e096      	b.n	800917e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11b      	bne.n	800908e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	f103 0414 	add.w	r4, r3, #20
 800905c:	f06f 000c 	mvn.w	r0, #12
 8009060:	f7ff fd30 	bl	8008ac4 <lwip_netconn_err_to_msg>
 8009064:	4603      	mov	r3, r0
 8009066:	4619      	mov	r1, r3
 8009068:	4620      	mov	r0, r4
 800906a:	f00b fabf 	bl	80145ec <sys_mbox_trypost>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <accept_function+0x6c>
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2200      	movs	r2, #0
 8009082:	2100      	movs	r1, #0
 8009084:	69f8      	ldr	r0, [r7, #28]
 8009086:	4798      	blx	r3
    }
    return ERR_VAL;
 8009088:	f06f 0305 	mvn.w	r3, #5
 800908c:	e077      	b.n	800917e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800908e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d006      	beq.n	80090a4 <accept_function+0x88>
 8009096:	4b3c      	ldr	r3, [pc, #240]	; (8009188 <accept_function+0x16c>)
 8009098:	f240 222a 	movw	r2, #554	; 0x22a
 800909c:	493b      	ldr	r1, [pc, #236]	; (800918c <accept_function+0x170>)
 800909e:	483c      	ldr	r0, [pc, #240]	; (8009190 <accept_function+0x174>)
 80090a0:	f00b fdd6 	bl	8014c50 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f000 f8c8 	bl	8009244 <netconn_alloc>
 80090b4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d11b      	bne.n	80090f4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f103 0414 	add.w	r4, r3, #20
 80090c2:	f06f 000c 	mvn.w	r0, #12
 80090c6:	f7ff fcfd 	bl	8008ac4 <lwip_netconn_err_to_msg>
 80090ca:	4603      	mov	r3, r0
 80090cc:	4619      	mov	r1, r3
 80090ce:	4620      	mov	r0, r4
 80090d0:	f00b fa8c 	bl	80145ec <sys_mbox_trypost>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <accept_function+0xd2>
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	69f8      	ldr	r0, [r7, #28]
 80090ec:	4798      	blx	r3
    }
    return ERR_MEM;
 80090ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090f2:	e044      	b.n	800917e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80090fa:	69b8      	ldr	r0, [r7, #24]
 80090fc:	f7ff ff66 	bl	8008fcc <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	3314      	adds	r3, #20
 8009104:	69b9      	ldr	r1, [r7, #24]
 8009106:	4618      	mov	r0, r3
 8009108:	f00b fa70 	bl	80145ec <sys_mbox_trypost>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d02a      	beq.n	8009168 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009118:	2100      	movs	r1, #0
 800911a:	6978      	ldr	r0, [r7, #20]
 800911c:	f004 f962 	bl	800d3e4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009120:	2100      	movs	r1, #0
 8009122:	6978      	ldr	r0, [r7, #20]
 8009124:	f004 f970 	bl	800d408 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009128:	2100      	movs	r1, #0
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	f004 f98e 	bl	800d44c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009130:	2200      	movs	r2, #0
 8009132:	2100      	movs	r1, #0
 8009134:	6978      	ldr	r0, [r7, #20]
 8009136:	f004 f9e5 	bl	800d504 <tcp_poll>
    tcp_err(pcb, NULL);
 800913a:	2100      	movs	r1, #0
 800913c:	6978      	ldr	r0, [r7, #20]
 800913e:	f004 f9a7 	bl	800d490 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2200      	movs	r2, #0
 8009146:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	3310      	adds	r3, #16
 800914c:	4618      	mov	r0, r3
 800914e:	f00b fa3b 	bl	80145c8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3310      	adds	r3, #16
 8009156:	4618      	mov	r0, r3
 8009158:	f00b fabb 	bl	80146d2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800915c:	69b8      	ldr	r0, [r7, #24]
 800915e:	f000 f8db 	bl	8009318 <netconn_free>
    return ERR_MEM;
 8009162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009166:	e00a      	b.n	800917e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <accept_function+0x160>
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	69f8      	ldr	r0, [r7, #28]
 800917a:	4798      	blx	r3
  }

  return ERR_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3724      	adds	r7, #36	; 0x24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd90      	pop	{r4, r7, pc}
 8009186:	bf00      	nop
 8009188:	08015ea8 	.word	0x08015ea8
 800918c:	08016000 	.word	0x08016000
 8009190:	08015eec 	.word	0x08015eec

08009194 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009194:	b590      	push	{r4, r7, lr}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d006      	beq.n	80091b8 <pcb_new+0x24>
 80091aa:	4b18      	ldr	r3, [pc, #96]	; (800920c <pcb_new+0x78>)
 80091ac:	f240 2265 	movw	r2, #613	; 0x265
 80091b0:	4917      	ldr	r1, [pc, #92]	; (8009210 <pcb_new+0x7c>)
 80091b2:	4818      	ldr	r0, [pc, #96]	; (8009214 <pcb_new+0x80>)
 80091b4:	f00b fd4c 	bl	8014c50 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d112      	bne.n	80091ec <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681c      	ldr	r4, [r3, #0]
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f004 f8fb 	bl	800d3c8 <tcp_new_ip_type>
 80091d2:	4603      	mov	r3, r0
 80091d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <pcb_new+0x60>
        setup_tcp(msg->conn);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fef1 	bl	8008fcc <setup_tcp>
      }
      break;
 80091ea:	e003      	b.n	80091f4 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	22fa      	movs	r2, #250	; 0xfa
 80091f0:	711a      	strb	r2, [r3, #4]
      return;
 80091f2:	e008      	b.n	8009206 <pcb_new+0x72>
      break;
 80091f4:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <pcb_new+0x72>
    msg->err = ERR_MEM;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	22ff      	movs	r2, #255	; 0xff
 8009204:	711a      	strb	r2, [r3, #4]
  }
}
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	bd90      	pop	{r4, r7, pc}
 800920c:	08015ea8 	.word	0x08015ea8
 8009210:	08016028 	.word	0x08016028
 8009214:	08015eec 	.word	0x08015eec

08009218 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7ff ffad 	bl	8009194 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009254:	2006      	movs	r0, #6
 8009256:	f001 fb31 	bl	800a8bc <memp_malloc>
 800925a:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <netconn_alloc+0x22>
    return NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	e04d      	b.n	8009302 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2200      	movs	r2, #0
 800926a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	79fa      	ldrb	r2, [r7, #7]
 8009270:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2200      	movs	r2, #0
 8009276:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800927e:	2b10      	cmp	r3, #16
 8009280:	d10c      	bne.n	800929c <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009282:	2306      	movs	r3, #6
 8009284:	60fb      	str	r3, [r7, #12]
      break;
 8009286:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3310      	adds	r3, #16
 800928c:	68f9      	ldr	r1, [r7, #12]
 800928e:	4618      	mov	r0, r3
 8009290:	f00b f980 	bl	8014594 <sys_mbox_new>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <netconn_alloc+0x68>
    goto free_and_return;
 800929a:	e02d      	b.n	80092f8 <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800929c:	4b1b      	ldr	r3, [pc, #108]	; (800930c <netconn_alloc+0xc8>)
 800929e:	f240 22e5 	movw	r2, #741	; 0x2e5
 80092a2:	491b      	ldr	r1, [pc, #108]	; (8009310 <netconn_alloc+0xcc>)
 80092a4:	481b      	ldr	r0, [pc, #108]	; (8009314 <netconn_alloc+0xd0>)
 80092a6:	f00b fcd3 	bl	8014c50 <iprintf>
      goto free_and_return;
 80092aa:	e025      	b.n	80092f8 <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	330c      	adds	r3, #12
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f00b fa1a 	bl	80146ec <sys_sem_new>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	3310      	adds	r3, #16
 80092c2:	4618      	mov	r0, r3
 80092c4:	f00b f980 	bl	80145c8 <sys_mbox_free>
    goto free_and_return;
 80092c8:	e016      	b.n	80092f8 <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	3314      	adds	r3, #20
 80092ce:	4618      	mov	r0, r3
 80092d0:	f00b f9ff 	bl	80146d2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2200      	movs	r2, #0
 80092d8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2200      	movs	r2, #0
 80092ec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	7dfa      	ldrb	r2, [r7, #23]
 80092f2:	771a      	strb	r2, [r3, #28]
  return conn;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	e004      	b.n	8009302 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80092f8:	6939      	ldr	r1, [r7, #16]
 80092fa:	2006      	movs	r0, #6
 80092fc:	f001 fb54 	bl	800a9a8 <memp_free>
  return NULL;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	08015ea8 	.word	0x08015ea8
 8009310:	08016048 	.word	0x08016048
 8009314:	08015eec 	.word	0x08015eec

08009318 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d006      	beq.n	8009336 <netconn_free+0x1e>
 8009328:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <netconn_free+0x80>)
 800932a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800932e:	491b      	ldr	r1, [pc, #108]	; (800939c <netconn_free+0x84>)
 8009330:	481b      	ldr	r0, [pc, #108]	; (80093a0 <netconn_free+0x88>)
 8009332:	f00b fc8d 	bl	8014c50 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3310      	adds	r3, #16
 800933a:	4618      	mov	r0, r3
 800933c:	f00b f9b8 	bl	80146b0 <sys_mbox_valid>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d006      	beq.n	8009354 <netconn_free+0x3c>
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <netconn_free+0x80>)
 8009348:	f240 3223 	movw	r2, #803	; 0x323
 800934c:	4915      	ldr	r1, [pc, #84]	; (80093a4 <netconn_free+0x8c>)
 800934e:	4814      	ldr	r0, [pc, #80]	; (80093a0 <netconn_free+0x88>)
 8009350:	f00b fc7e 	bl	8014c50 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3314      	adds	r3, #20
 8009358:	4618      	mov	r0, r3
 800935a:	f00b f9a9 	bl	80146b0 <sys_mbox_valid>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d006      	beq.n	8009372 <netconn_free+0x5a>
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <netconn_free+0x80>)
 8009366:	f240 3226 	movw	r2, #806	; 0x326
 800936a:	490f      	ldr	r1, [pc, #60]	; (80093a8 <netconn_free+0x90>)
 800936c:	480c      	ldr	r0, [pc, #48]	; (80093a0 <netconn_free+0x88>)
 800936e:	f00b fc6f 	bl	8014c50 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	330c      	adds	r3, #12
 8009376:	4618      	mov	r0, r3
 8009378:	f00b f9ea 	bl	8014750 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	330c      	adds	r3, #12
 8009380:	4618      	mov	r0, r3
 8009382:	f00b fa03 	bl	801478c <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	2006      	movs	r0, #6
 800938a:	f001 fb0d 	bl	800a9a8 <memp_free>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	08015ea8 	.word	0x08015ea8
 800939c:	08016070 	.word	0x08016070
 80093a0:	08015eec 	.word	0x08015eec
 80093a4:	080160a0 	.word	0x080160a0
 80093a8:	080160dc 	.word	0x080160dc

080093ac <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <lwip_netconn_do_close_internal+0x24>
 80093c2:	4b87      	ldr	r3, [pc, #540]	; (80095e0 <lwip_netconn_do_close_internal+0x234>)
 80093c4:	f240 32a2 	movw	r2, #930	; 0x3a2
 80093c8:	4986      	ldr	r1, [pc, #536]	; (80095e4 <lwip_netconn_do_close_internal+0x238>)
 80093ca:	4887      	ldr	r0, [pc, #540]	; (80095e8 <lwip_netconn_do_close_internal+0x23c>)
 80093cc:	f00b fc40 	bl	8014c50 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d006      	beq.n	80093ea <lwip_netconn_do_close_internal+0x3e>
 80093dc:	4b80      	ldr	r3, [pc, #512]	; (80095e0 <lwip_netconn_do_close_internal+0x234>)
 80093de:	f240 32a3 	movw	r2, #931	; 0x3a3
 80093e2:	4982      	ldr	r1, [pc, #520]	; (80095ec <lwip_netconn_do_close_internal+0x240>)
 80093e4:	4880      	ldr	r0, [pc, #512]	; (80095e8 <lwip_netconn_do_close_internal+0x23c>)
 80093e6:	f00b fc33 	bl	8014c50 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d006      	beq.n	8009400 <lwip_netconn_do_close_internal+0x54>
 80093f2:	4b7b      	ldr	r3, [pc, #492]	; (80095e0 <lwip_netconn_do_close_internal+0x234>)
 80093f4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80093f8:	497d      	ldr	r1, [pc, #500]	; (80095f0 <lwip_netconn_do_close_internal+0x244>)
 80093fa:	487b      	ldr	r0, [pc, #492]	; (80095e8 <lwip_netconn_do_close_internal+0x23c>)
 80093fc:	f00b fc28 	bl	8014c50 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d106      	bne.n	8009416 <lwip_netconn_do_close_internal+0x6a>
 8009408:	4b75      	ldr	r3, [pc, #468]	; (80095e0 <lwip_netconn_do_close_internal+0x234>)
 800940a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800940e:	4979      	ldr	r1, [pc, #484]	; (80095f4 <lwip_netconn_do_close_internal+0x248>)
 8009410:	4875      	ldr	r0, [pc, #468]	; (80095e8 <lwip_netconn_do_close_internal+0x23c>)
 8009412:	f00b fc1d 	bl	8014c50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <lwip_netconn_do_close_internal+0x80>
 800941e:	4b70      	ldr	r3, [pc, #448]	; (80095e0 <lwip_netconn_do_close_internal+0x234>)
 8009420:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009424:	4974      	ldr	r1, [pc, #464]	; (80095f8 <lwip_netconn_do_close_internal+0x24c>)
 8009426:	4870      	ldr	r0, [pc, #448]	; (80095e8 <lwip_netconn_do_close_internal+0x23c>)
 8009428:	f00b fc12 	bl	8014c50 <iprintf>

  tpcb = conn->pcb.tcp;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	7a1b      	ldrb	r3, [r3, #8]
 8009438:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b03      	cmp	r3, #3
 800944e:	d102      	bne.n	8009456 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009450:	2301      	movs	r3, #1
 8009452:	75bb      	strb	r3, [r7, #22]
 8009454:	e01f      	b.n	8009496 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00e      	beq.n	800947a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009460:	2b05      	cmp	r3, #5
 8009462:	d007      	beq.n	8009474 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009468:	2b06      	cmp	r3, #6
 800946a:	d003      	beq.n	8009474 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009470:	2b08      	cmp	r3, #8
 8009472:	d102      	bne.n	800947a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009474:	2301      	movs	r3, #1
 8009476:	75bb      	strb	r3, [r7, #22]
 8009478:	e00d      	b.n	8009496 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800947a:	7b7b      	ldrb	r3, [r7, #13]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <lwip_netconn_do_close_internal+0xe6>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	8b5b      	ldrh	r3, [r3, #26]
 8009484:	f003 0310 	and.w	r3, r3, #16
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800948c:	2301      	movs	r3, #1
 800948e:	75bb      	strb	r3, [r7, #22]
 8009490:	e001      	b.n	8009496 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009496:	7dbb      	ldrb	r3, [r7, #22]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800949c:	2100      	movs	r1, #0
 800949e:	6938      	ldr	r0, [r7, #16]
 80094a0:	f003 ffa0 	bl	800d3e4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	7d1b      	ldrb	r3, [r3, #20]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d104      	bne.n	80094b6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80094ac:	2100      	movs	r1, #0
 80094ae:	6938      	ldr	r0, [r7, #16]
 80094b0:	f004 f810 	bl	800d4d4 <tcp_accept>
 80094b4:	e01d      	b.n	80094f2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80094bc:	2100      	movs	r1, #0
 80094be:	6938      	ldr	r0, [r7, #16]
 80094c0:	f003 ffa2 	bl	800d408 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80094c4:	2100      	movs	r1, #0
 80094c6:	6938      	ldr	r0, [r7, #16]
 80094c8:	f004 f804 	bl	800d4d4 <tcp_accept>
    }
    if (shut_tx) {
 80094cc:	7b7b      	ldrb	r3, [r7, #13]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80094d2:	2100      	movs	r1, #0
 80094d4:	6938      	ldr	r0, [r7, #16]
 80094d6:	f003 ffb9 	bl	800d44c <tcp_sent>
    }
    if (shut_close) {
 80094da:	7dbb      	ldrb	r3, [r7, #22]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80094e0:	2200      	movs	r2, #0
 80094e2:	2100      	movs	r1, #0
 80094e4:	6938      	ldr	r0, [r7, #16]
 80094e6:	f004 f80d 	bl	800d504 <tcp_poll>
      tcp_err(tpcb, NULL);
 80094ea:	2100      	movs	r1, #0
 80094ec:	6938      	ldr	r0, [r7, #16]
 80094ee:	f003 ffcf 	bl	800d490 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80094f2:	7dbb      	ldrb	r3, [r7, #22]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80094f8:	6938      	ldr	r0, [r7, #16]
 80094fa:	f002 fd9f 	bl	800c03c <tcp_close>
 80094fe:	4603      	mov	r3, r0
 8009500:	75fb      	strb	r3, [r7, #23]
 8009502:	e007      	b.n	8009514 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	7b7a      	ldrb	r2, [r7, #13]
 8009508:	4619      	mov	r1, r3
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f002 fdc2 	bl	800c094 <tcp_shutdown>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800951c:	2301      	movs	r3, #1
 800951e:	757b      	strb	r3, [r7, #21]
 8009520:	e016      	b.n	8009550 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800952a:	d10f      	bne.n	800954c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	7a5b      	ldrb	r3, [r3, #9]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10c      	bne.n	8009550 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009536:	2301      	movs	r3, #1
 8009538:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800953a:	7dbb      	ldrb	r3, [r7, #22]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d007      	beq.n	8009550 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009540:	6938      	ldr	r0, [r7, #16]
 8009542:	f002 fec1 	bl	800c2c8 <tcp_abort>
          err = ERR_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	75fb      	strb	r3, [r7, #23]
 800954a:	e001      	b.n	8009550 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800954c:	2301      	movs	r3, #1
 800954e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009550:	7d7b      	ldrb	r3, [r7, #21]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d052      	beq.n	80095fc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	330c      	adds	r3, #12
 800955e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	7dfa      	ldrb	r2, [r7, #23]
 8009566:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d129      	bne.n	80095d0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00c      	beq.n	800959c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <lwip_netconn_do_close_internal+0x1f0>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2200      	movs	r2, #0
 8009596:	2104      	movs	r1, #4
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
      }
      if (shut_rx) {
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d005      	beq.n	80095b6 <lwip_netconn_do_close_internal+0x20a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	2200      	movs	r2, #0
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
      }
      if (shut_tx) {
 80095b6:	7b7b      	ldrb	r3, [r7, #13]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d009      	beq.n	80095d0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <lwip_netconn_do_close_internal+0x224>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2200      	movs	r2, #0
 80095ca:	2102      	movs	r1, #2
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80095d6:	68b8      	ldr	r0, [r7, #8]
 80095d8:	f00b f8ad 	bl	8014736 <sys_sem_signal>
    }
    return ERR_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	e03c      	b.n	800965a <lwip_netconn_do_close_internal+0x2ae>
 80095e0:	08015ea8 	.word	0x08015ea8
 80095e4:	08016118 	.word	0x08016118
 80095e8:	08015eec 	.word	0x08015eec
 80095ec:	08016128 	.word	0x08016128
 80095f0:	08016148 	.word	0x08016148
 80095f4:	0801616c 	.word	0x0801616c
 80095f8:	08015fac 	.word	0x08015fac
  }
  if (!close_finished) {
 80095fc:	7d7b      	ldrb	r3, [r7, #21]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d11e      	bne.n	8009640 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d106      	bne.n	8009618 <lwip_netconn_do_close_internal+0x26c>
 800960a:	4b16      	ldr	r3, [pc, #88]	; (8009664 <lwip_netconn_do_close_internal+0x2b8>)
 800960c:	f240 4241 	movw	r2, #1089	; 0x441
 8009610:	4915      	ldr	r1, [pc, #84]	; (8009668 <lwip_netconn_do_close_internal+0x2bc>)
 8009612:	4816      	ldr	r0, [pc, #88]	; (800966c <lwip_netconn_do_close_internal+0x2c0>)
 8009614:	f00b fb1c 	bl	8014c50 <iprintf>
    if (shut_tx) {
 8009618:	7b7b      	ldrb	r3, [r7, #13]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800961e:	4914      	ldr	r1, [pc, #80]	; (8009670 <lwip_netconn_do_close_internal+0x2c4>)
 8009620:	6938      	ldr	r0, [r7, #16]
 8009622:	f003 ff13 	bl	800d44c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009626:	2201      	movs	r2, #1
 8009628:	4912      	ldr	r1, [pc, #72]	; (8009674 <lwip_netconn_do_close_internal+0x2c8>)
 800962a:	6938      	ldr	r0, [r7, #16]
 800962c:	f003 ff6a 	bl	800d504 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009630:	4911      	ldr	r1, [pc, #68]	; (8009678 <lwip_netconn_do_close_internal+0x2cc>)
 8009632:	6938      	ldr	r0, [r7, #16]
 8009634:	f003 ff2c 	bl	800d490 <tcp_err>
    tcp_arg(tpcb, conn);
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	6938      	ldr	r0, [r7, #16]
 800963c:	f003 fed2 	bl	800d3e4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <lwip_netconn_do_close_internal+0x2aa>
 8009648:	4b06      	ldr	r3, [pc, #24]	; (8009664 <lwip_netconn_do_close_internal+0x2b8>)
 800964a:	f240 424d 	movw	r2, #1101	; 0x44d
 800964e:	490b      	ldr	r1, [pc, #44]	; (800967c <lwip_netconn_do_close_internal+0x2d0>)
 8009650:	4806      	ldr	r0, [pc, #24]	; (800966c <lwip_netconn_do_close_internal+0x2c0>)
 8009652:	f00b fafd 	bl	8014c50 <iprintf>
  return err;
 8009656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	08015ea8 	.word	0x08015ea8
 8009668:	08016180 	.word	0x08016180
 800966c:	08015eec 	.word	0x08015eec
 8009670:	08008d79 	.word	0x08008d79
 8009674:	08008cb1 	.word	0x08008cb1
 8009678:	08008e21 	.word	0x08008e21
 800967c:	080161a4 	.word	0x080161a4

08009680 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d016      	beq.n	80096c4 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d10c      	bne.n	80096be <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6858      	ldr	r0, [r3, #4]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6899      	ldr	r1, [r3, #8]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	899b      	ldrh	r3, [r3, #12]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f002 fe14 	bl	800c2e0 <tcp_bind>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]
        break;
 80096bc:	e004      	b.n	80096c8 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80096be:	23fa      	movs	r3, #250	; 0xfa
 80096c0:	73fb      	strb	r3, [r7, #15]
        break;
 80096c2:	e001      	b.n	80096c8 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 80096c4:	23fa      	movs	r3, #250	; 0xfa
 80096c6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7bfa      	ldrb	r2, [r7, #15]
 80096cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d07f      	beq.n	80097ee <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096f8:	2b10      	cmp	r3, #16
 80096fa:	d175      	bne.n	80097e8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d165      	bne.n	80097d2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009712:	23fa      	movs	r3, #250	; 0xfa
 8009714:	72fb      	strb	r3, [r7, #11]
 8009716:	e06c      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009718:	23ff      	movs	r3, #255	; 0xff
 800971a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f107 020b 	add.w	r2, r7, #11
 8009726:	7cf9      	ldrb	r1, [r7, #19]
 8009728:	4618      	mov	r0, r3
 800972a:	f002 fe91 	bl	800c450 <tcp_listen_with_backlog_and_err>
 800972e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05d      	beq.n	80097f2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3310      	adds	r3, #16
 800973c:	4618      	mov	r0, r3
 800973e:	f00a ffb7 	bl	80146b0 <sys_mbox_valid>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3310      	adds	r3, #16
 800974e:	4618      	mov	r0, r3
 8009750:	f00a ff3a 	bl	80145c8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3310      	adds	r3, #16
 800975a:	4618      	mov	r0, r3
 800975c:	f00a ffb9 	bl	80146d2 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	4618      	mov	r0, r3
 800976c:	f00a ffa0 	bl	80146b0 <sys_mbox_valid>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d108      	bne.n	8009788 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3314      	adds	r3, #20
 800977c:	2106      	movs	r1, #6
 800977e:	4618      	mov	r0, r3
 8009780:	f00a ff08 	bl	8014594 <sys_mbox_new>
 8009784:	4603      	mov	r3, r0
 8009786:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009788:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d118      	bne.n	80097c2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2202      	movs	r2, #2
 8009796:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f003 fe19 	bl	800d3e4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4912      	ldr	r1, [pc, #72]	; (8009804 <lwip_netconn_do_listen+0x12c>)
 80097ba:	4618      	mov	r0, r3
 80097bc:	f003 fe8a 	bl	800d4d4 <tcp_accept>
 80097c0:	e017      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f002 fc3a 	bl	800c03c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	e00f      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d102      	bne.n	80097e2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	72fb      	strb	r3, [r7, #11]
 80097e0:	e007      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80097e2:	23f5      	movs	r3, #245	; 0xf5
 80097e4:	72fb      	strb	r3, [r7, #11]
 80097e6:	e004      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80097e8:	23f0      	movs	r3, #240	; 0xf0
 80097ea:	72fb      	strb	r3, [r7, #11]
 80097ec:	e001      	b.n	80097f2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80097ee:	23f5      	movs	r3, #245	; 0xf5
 80097f0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80097f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80097fa:	bf00      	nop
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	0800901d 	.word	0x0800901d

08009808 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <lwip_netconn_do_writemore+0x24>
 800981e:	4b96      	ldr	r3, [pc, #600]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 8009820:	f240 6273 	movw	r2, #1651	; 0x673
 8009824:	4995      	ldr	r1, [pc, #596]	; (8009a7c <lwip_netconn_do_writemore+0x274>)
 8009826:	4896      	ldr	r0, [pc, #600]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 8009828:	f00b fa12 	bl	8014c50 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d006      	beq.n	8009842 <lwip_netconn_do_writemore+0x3a>
 8009834:	4b90      	ldr	r3, [pc, #576]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 8009836:	f240 6274 	movw	r2, #1652	; 0x674
 800983a:	4992      	ldr	r1, [pc, #584]	; (8009a84 <lwip_netconn_do_writemore+0x27c>)
 800983c:	4890      	ldr	r0, [pc, #576]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 800983e:	f00b fa07 	bl	8014c50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d106      	bne.n	8009858 <lwip_netconn_do_writemore+0x50>
 800984a:	4b8b      	ldr	r3, [pc, #556]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 800984c:	f240 6275 	movw	r2, #1653	; 0x675
 8009850:	498d      	ldr	r1, [pc, #564]	; (8009a88 <lwip_netconn_do_writemore+0x280>)
 8009852:	488b      	ldr	r0, [pc, #556]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 8009854:	f00b f9fc 	bl	8014c50 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <lwip_netconn_do_writemore+0x66>
 8009860:	4b85      	ldr	r3, [pc, #532]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 8009862:	f240 6276 	movw	r2, #1654	; 0x676
 8009866:	4989      	ldr	r1, [pc, #548]	; (8009a8c <lwip_netconn_do_writemore+0x284>)
 8009868:	4885      	ldr	r0, [pc, #532]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 800986a:	f00b f9f1 	bl	8014c50 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	699a      	ldr	r2, [r3, #24]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	429a      	cmp	r2, r3
 800987c:	d306      	bcc.n	800988c <lwip_netconn_do_writemore+0x84>
 800987e:	4b7e      	ldr	r3, [pc, #504]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 8009880:	f240 6277 	movw	r2, #1655	; 0x677
 8009884:	4982      	ldr	r1, [pc, #520]	; (8009a90 <lwip_netconn_do_writemore+0x288>)
 8009886:	487e      	ldr	r0, [pc, #504]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 8009888:	f00b f9e2 	bl	8014c50 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	899b      	ldrh	r3, [r3, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <lwip_netconn_do_writemore+0x9c>
 8009896:	4b78      	ldr	r3, [pc, #480]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 8009898:	f240 6279 	movw	r2, #1657	; 0x679
 800989c:	497d      	ldr	r1, [pc, #500]	; (8009a94 <lwip_netconn_do_writemore+0x28c>)
 800989e:	4878      	ldr	r0, [pc, #480]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 80098a0:	f00b f9d6 	bl	8014c50 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	7f1b      	ldrb	r3, [r3, #28]
 80098aa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	7f1b      	ldrb	r3, [r3, #28]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <lwip_netconn_do_writemore+0xba>
 80098b8:	7ebb      	ldrb	r3, [r7, #26]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <lwip_netconn_do_writemore+0xbe>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <lwip_netconn_do_writemore+0xc0>
 80098c6:	2300      	movs	r3, #0
 80098c8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	4413      	add	r3, r2
 80098da:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098f4:	d307      	bcc.n	8009906 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80098f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098fa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80098fc:	7ebb      	ldrb	r3, [r7, #26]
 80098fe:	f043 0302 	orr.w	r3, r3, #2
 8009902:	76bb      	strb	r3, [r7, #26]
 8009904:	e001      	b.n	800990a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009912:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009914:	89fa      	ldrh	r2, [r7, #14]
 8009916:	8bbb      	ldrh	r3, [r7, #28]
 8009918:	429a      	cmp	r2, r3
 800991a:	d216      	bcs.n	800994a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800991c:	89fb      	ldrh	r3, [r7, #14]
 800991e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009920:	7e3b      	ldrb	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009926:	8bbb      	ldrh	r3, [r7, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10e      	bne.n	800994a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d102      	bne.n	800993c <lwip_netconn_do_writemore+0x134>
 8009936:	f06f 0306 	mvn.w	r3, #6
 800993a:	e000      	b.n	800993e <lwip_netconn_do_writemore+0x136>
 800993c:	2300      	movs	r3, #0
 800993e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009940:	e07d      	b.n	8009a3e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009942:	7ebb      	ldrb	r3, [r7, #26]
 8009944:	f043 0302 	orr.w	r3, r3, #2
 8009948:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	8bbb      	ldrh	r3, [r7, #28]
 8009952:	441a      	add	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	429a      	cmp	r2, r3
 800995e:	d906      	bls.n	800996e <lwip_netconn_do_writemore+0x166>
 8009960:	4b45      	ldr	r3, [pc, #276]	; (8009a78 <lwip_netconn_do_writemore+0x270>)
 8009962:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009966:	494c      	ldr	r1, [pc, #304]	; (8009a98 <lwip_netconn_do_writemore+0x290>)
 8009968:	4845      	ldr	r0, [pc, #276]	; (8009a80 <lwip_netconn_do_writemore+0x278>)
 800996a:	f00b f971 	bl	8014c50 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800996e:	8bbb      	ldrh	r3, [r7, #28]
 8009970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009974:	4293      	cmp	r3, r2
 8009976:	d103      	bne.n	8009980 <lwip_netconn_do_writemore+0x178>
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800997e:	d209      	bcs.n	8009994 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009984:	8bba      	ldrh	r2, [r7, #28]
 8009986:	429a      	cmp	r2, r3
 8009988:	d10b      	bne.n	80099a2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	899b      	ldrh	r3, [r3, #12]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d906      	bls.n	80099a2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009994:	2301      	movs	r3, #1
 8009996:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009998:	7ebb      	ldrb	r3, [r7, #26]
 800999a:	f043 0302 	orr.w	r3, r3, #2
 800999e:	76bb      	strb	r3, [r7, #26]
 80099a0:	e001      	b.n	80099a6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6858      	ldr	r0, [r3, #4]
 80099aa:	7ebb      	ldrb	r3, [r7, #26]
 80099ac:	8bba      	ldrh	r2, [r7, #28]
 80099ae:	6979      	ldr	r1, [r7, #20]
 80099b0:	f006 fc5a 	bl	8010268 <tcp_write>
 80099b4:	4603      	mov	r3, r0
 80099b6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80099b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d12c      	bne.n	8009a1a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	6999      	ldr	r1, [r3, #24]
 80099c6:	8bba      	ldrh	r2, [r7, #28]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	440a      	add	r2, r1
 80099ce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	6919      	ldr	r1, [r3, #16]
 80099d6:	8bba      	ldrh	r2, [r7, #28]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	440a      	add	r2, r1
 80099de:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d113      	bne.n	8009a1a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	899a      	ldrh	r2, [r3, #12]
 80099f8:	3a01      	subs	r2, #1
 80099fa:	b292      	uxth	r2, r2
 80099fc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	899b      	ldrh	r3, [r3, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d008      	beq.n	8009a1a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	3208      	adds	r2, #8
 8009a10:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	2200      	movs	r2, #0
 8009a18:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009a1a:	7e7b      	ldrb	r3, [r7, #25]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <lwip_netconn_do_writemore+0x222>
 8009a20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f43f af50 	beq.w	80098ca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009a2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <lwip_netconn_do_writemore+0x234>
 8009a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a3a:	d146      	bne.n	8009aca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009a3c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009a3e:	7e3b      	ldrb	r3, [r7, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d02b      	beq.n	8009a9c <lwip_netconn_do_writemore+0x294>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	699a      	ldr	r2, [r3, #24]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d223      	bcs.n	8009a9c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <lwip_netconn_do_writemore+0x260>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2200      	movs	r2, #0
 8009a62:	2103      	movs	r1, #3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7f1b      	ldrb	r3, [r3, #28]
 8009a6c:	f043 0310 	orr.w	r3, r3, #16
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	771a      	strb	r2, [r3, #28]
 8009a76:	e028      	b.n	8009aca <lwip_netconn_do_writemore+0x2c2>
 8009a78:	08015ea8 	.word	0x08015ea8
 8009a7c:	08015f9c 	.word	0x08015f9c
 8009a80:	08015eec 	.word	0x08015eec
 8009a84:	080162a4 	.word	0x080162a4
 8009a88:	08015fac 	.word	0x08015fac
 8009a8c:	080162c4 	.word	0x080162c4
 8009a90:	080162dc 	.word	0x080162dc
 8009a94:	0801631c 	.word	0x0801631c
 8009a98:	08016344 	.word	0x08016344
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009aa4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009aa8:	d305      	bcc.n	8009ab6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d909      	bls.n	8009aca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <lwip_netconn_do_writemore+0x2c2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2103      	movs	r1, #3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009aca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d11d      	bne.n	8009b0e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d002      	beq.n	8009ae8 <lwip_netconn_do_writemore+0x2e0>
 8009ae2:	7e3b      	ldrb	r3, [r7, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f007 f9a3 	bl	8010e3c <tcp_output>
 8009af6:	4603      	mov	r3, r0
 8009af8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009afa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009afe:	f113 0f04 	cmn.w	r3, #4
 8009b02:	d12c      	bne.n	8009b5e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009b04:	7b3b      	ldrb	r3, [r7, #12]
 8009b06:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	76fb      	strb	r3, [r7, #27]
 8009b0c:	e027      	b.n	8009b5e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b16:	d120      	bne.n	8009b5a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f007 f98d 	bl	8010e3c <tcp_output>
 8009b22:	4603      	mov	r3, r0
 8009b24:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009b26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b2a:	f113 0f04 	cmn.w	r3, #4
 8009b2e:	d104      	bne.n	8009b3a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009b30:	7b7b      	ldrb	r3, [r7, #13]
 8009b32:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009b34:	2301      	movs	r3, #1
 8009b36:	76fb      	strb	r3, [r7, #27]
 8009b38:	e011      	b.n	8009b5e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009b3a:	7e3b      	ldrb	r3, [r7, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00e      	beq.n	8009b5e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <lwip_netconn_do_writemore+0x348>
 8009b4a:	f06f 0306 	mvn.w	r3, #6
 8009b4e:	e000      	b.n	8009b52 <lwip_netconn_do_writemore+0x34a>
 8009b50:	2300      	movs	r3, #0
 8009b52:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009b54:	2301      	movs	r3, #1
 8009b56:	76fb      	strb	r3, [r7, #27]
 8009b58:	e001      	b.n	8009b5e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009b5e:	7efb      	ldrb	r3, [r7, #27]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d015      	beq.n	8009b90 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	330c      	adds	r3, #12
 8009b6c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	7ffa      	ldrb	r2, [r7, #31]
 8009b74:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d006      	beq.n	8009b96 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009b88:	68b8      	ldr	r0, [r7, #8]
 8009b8a:	f00a fdd4 	bl	8014736 <sys_sem_signal>
 8009b8e:	e002      	b.n	8009b96 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b94:	e000      	b.n	8009b98 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009baa:	f008 f9ff 	bl	8011fac <sys_timeouts_sleeptime>
 8009bae:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb6:	d10b      	bne.n	8009bd0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009bb8:	4813      	ldr	r0, [pc, #76]	; (8009c08 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bba:	f00a fe26 	bl	801480a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f00a fd2c 	bl	8014620 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009bc8:	480f      	ldr	r0, [pc, #60]	; (8009c08 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bca:	f00a fe0f 	bl	80147ec <sys_mutex_lock>
    return;
 8009bce:	e018      	b.n	8009c02 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009bd6:	f008 f9af 	bl	8011f38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009bda:	e7e6      	b.n	8009baa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009bdc:	480a      	ldr	r0, [pc, #40]	; (8009c08 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bde:	f00a fe14 	bl	801480a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f00a fd1a 	bl	8014620 <sys_arch_mbox_fetch>
 8009bec:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009bee:	4806      	ldr	r0, [pc, #24]	; (8009c08 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bf0:	f00a fdfc 	bl	80147ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bfa:	d102      	bne.n	8009c02 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009bfc:	f008 f99c 	bl	8011f38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009c00:	e7d3      	b.n	8009baa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20009774 	.word	0x20009774

08009c0c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009c14:	4810      	ldr	r0, [pc, #64]	; (8009c58 <tcpip_thread+0x4c>)
 8009c16:	f00a fde9 	bl	80147ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009c1a:	4b10      	ldr	r3, [pc, #64]	; (8009c5c <tcpip_thread+0x50>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d005      	beq.n	8009c2e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009c22:	4b0e      	ldr	r3, [pc, #56]	; (8009c5c <tcpip_thread+0x50>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a0e      	ldr	r2, [pc, #56]	; (8009c60 <tcpip_thread+0x54>)
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	4619      	mov	r1, r3
 8009c34:	480b      	ldr	r0, [pc, #44]	; (8009c64 <tcpip_thread+0x58>)
 8009c36:	f7ff ffb3 	bl	8009ba0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c40:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <tcpip_thread+0x5c>)
 8009c42:	2291      	movs	r2, #145	; 0x91
 8009c44:	4909      	ldr	r1, [pc, #36]	; (8009c6c <tcpip_thread+0x60>)
 8009c46:	480a      	ldr	r0, [pc, #40]	; (8009c70 <tcpip_thread+0x64>)
 8009c48:	f00b f802 	bl	8014c50 <iprintf>
      continue;
 8009c4c:	e003      	b.n	8009c56 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 f80f 	bl	8009c74 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c56:	e7ea      	b.n	8009c2e <tcpip_thread+0x22>
 8009c58:	20009774 	.word	0x20009774
 8009c5c:	20009768 	.word	0x20009768
 8009c60:	2000976c 	.word	0x2000976c
 8009c64:	20009770 	.word	0x20009770
 8009c68:	0801639c 	.word	0x0801639c
 8009c6c:	080163cc 	.word	0x080163cc
 8009c70:	080163ec 	.word	0x080163ec

08009c74 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d026      	beq.n	8009cd2 <tcpip_thread_handle_msg+0x5e>
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	dc2b      	bgt.n	8009ce0 <tcpip_thread_handle_msg+0x6c>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <tcpip_thread_handle_msg+0x1e>
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d015      	beq.n	8009cbc <tcpip_thread_handle_msg+0x48>
 8009c90:	e026      	b.n	8009ce0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6850      	ldr	r0, [r2, #4]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6892      	ldr	r2, [r2, #8]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4798      	blx	r3
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fd1b 	bl	800b6e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	2008      	movs	r0, #8
 8009cb6:	f000 fe77 	bl	800a9a8 <memp_free>
      break;
 8009cba:	e018      	b.n	8009cee <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6892      	ldr	r2, [r2, #8]
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	2007      	movs	r0, #7
 8009ccc:	f000 fe6c 	bl	800a9a8 <memp_free>
      break;
 8009cd0:	e00d      	b.n	8009cee <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6892      	ldr	r2, [r2, #8]
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4798      	blx	r3
      break;
 8009cde:	e006      	b.n	8009cee <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <tcpip_thread_handle_msg+0x84>)
 8009ce2:	22cf      	movs	r2, #207	; 0xcf
 8009ce4:	4905      	ldr	r1, [pc, #20]	; (8009cfc <tcpip_thread_handle_msg+0x88>)
 8009ce6:	4806      	ldr	r0, [pc, #24]	; (8009d00 <tcpip_thread_handle_msg+0x8c>)
 8009ce8:	f00a ffb2 	bl	8014c50 <iprintf>
      break;
 8009cec:	bf00      	nop
  }
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	0801639c 	.word	0x0801639c
 8009cfc:	080163cc 	.word	0x080163cc
 8009d00:	080163ec 	.word	0x080163ec

08009d04 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d10:	481a      	ldr	r0, [pc, #104]	; (8009d7c <tcpip_inpkt+0x78>)
 8009d12:	f00a fccd 	bl	80146b0 <sys_mbox_valid>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <tcpip_inpkt+0x24>
 8009d1c:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <tcpip_inpkt+0x7c>)
 8009d1e:	22fc      	movs	r2, #252	; 0xfc
 8009d20:	4918      	ldr	r1, [pc, #96]	; (8009d84 <tcpip_inpkt+0x80>)
 8009d22:	4819      	ldr	r0, [pc, #100]	; (8009d88 <tcpip_inpkt+0x84>)
 8009d24:	f00a ff94 	bl	8014c50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009d28:	2008      	movs	r0, #8
 8009d2a:	f000 fdc7 	bl	800a8bc <memp_malloc>
 8009d2e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d3a:	e01a      	b.n	8009d72 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d54:	6979      	ldr	r1, [r7, #20]
 8009d56:	4809      	ldr	r0, [pc, #36]	; (8009d7c <tcpip_inpkt+0x78>)
 8009d58:	f00a fc48 	bl	80145ec <sys_mbox_trypost>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d006      	beq.n	8009d70 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d62:	6979      	ldr	r1, [r7, #20]
 8009d64:	2008      	movs	r0, #8
 8009d66:	f000 fe1f 	bl	800a9a8 <memp_free>
    return ERR_MEM;
 8009d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d6e:	e000      	b.n	8009d72 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009d70:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20009770 	.word	0x20009770
 8009d80:	0801639c 	.word	0x0801639c
 8009d84:	08016414 	.word	0x08016414
 8009d88:	080163ec 	.word	0x080163ec

08009d8c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d9c:	f003 0318 	and.w	r3, r3, #24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009da4:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <tcpip_input+0x3c>)
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ffab 	bl	8009d04 <tcpip_inpkt>
 8009dae:	4603      	mov	r3, r0
 8009db0:	e005      	b.n	8009dbe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009db2:	4a06      	ldr	r2, [pc, #24]	; (8009dcc <tcpip_input+0x40>)
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff ffa4 	bl	8009d04 <tcpip_inpkt>
 8009dbc:	4603      	mov	r3, r0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	080143e9 	.word	0x080143e9
 8009dcc:	08013305 	.word	0x08013305

08009dd0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009dda:	4819      	ldr	r0, [pc, #100]	; (8009e40 <tcpip_try_callback+0x70>)
 8009ddc:	f00a fc68 	bl	80146b0 <sys_mbox_valid>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <tcpip_try_callback+0x24>
 8009de6:	4b17      	ldr	r3, [pc, #92]	; (8009e44 <tcpip_try_callback+0x74>)
 8009de8:	f240 125d 	movw	r2, #349	; 0x15d
 8009dec:	4916      	ldr	r1, [pc, #88]	; (8009e48 <tcpip_try_callback+0x78>)
 8009dee:	4817      	ldr	r0, [pc, #92]	; (8009e4c <tcpip_try_callback+0x7c>)
 8009df0:	f00a ff2e 	bl	8014c50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009df4:	2007      	movs	r0, #7
 8009df6:	f000 fd61 	bl	800a8bc <memp_malloc>
 8009dfa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e06:	e017      	b.n	8009e38 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e1a:	68f9      	ldr	r1, [r7, #12]
 8009e1c:	4808      	ldr	r0, [pc, #32]	; (8009e40 <tcpip_try_callback+0x70>)
 8009e1e:	f00a fbe5 	bl	80145ec <sys_mbox_trypost>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d006      	beq.n	8009e36 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e28:	68f9      	ldr	r1, [r7, #12]
 8009e2a:	2007      	movs	r0, #7
 8009e2c:	f000 fdbc 	bl	800a9a8 <memp_free>
    return ERR_MEM;
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e34:	e000      	b.n	8009e38 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20009770 	.word	0x20009770
 8009e44:	0801639c 	.word	0x0801639c
 8009e48:	08016414 	.word	0x08016414
 8009e4c:	080163ec 	.word	0x080163ec

08009e50 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009e5c:	4806      	ldr	r0, [pc, #24]	; (8009e78 <tcpip_send_msg_wait_sem+0x28>)
 8009e5e:	f00a fcc5 	bl	80147ec <sys_mutex_lock>
  fn(apimsg);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68b8      	ldr	r0, [r7, #8]
 8009e66:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009e68:	4803      	ldr	r0, [pc, #12]	; (8009e78 <tcpip_send_msg_wait_sem+0x28>)
 8009e6a:	f00a fcce 	bl	801480a <sys_mutex_unlock>
  return ERR_OK;
 8009e6e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20009774 	.word	0x20009774

08009e7c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e86:	f000 f871 	bl	8009f6c <lwip_init>

  tcpip_init_done = initfunc;
 8009e8a:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <tcpip_init+0x6c>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e90:	4a16      	ldr	r2, [pc, #88]	; (8009eec <tcpip_init+0x70>)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e96:	2106      	movs	r1, #6
 8009e98:	4815      	ldr	r0, [pc, #84]	; (8009ef0 <tcpip_init+0x74>)
 8009e9a:	f00a fb7b 	bl	8014594 <sys_mbox_new>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d006      	beq.n	8009eb2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009ea4:	4b13      	ldr	r3, [pc, #76]	; (8009ef4 <tcpip_init+0x78>)
 8009ea6:	f240 2261 	movw	r2, #609	; 0x261
 8009eaa:	4913      	ldr	r1, [pc, #76]	; (8009ef8 <tcpip_init+0x7c>)
 8009eac:	4813      	ldr	r0, [pc, #76]	; (8009efc <tcpip_init+0x80>)
 8009eae:	f00a fecf 	bl	8014c50 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009eb2:	4813      	ldr	r0, [pc, #76]	; (8009f00 <tcpip_init+0x84>)
 8009eb4:	f00a fc84 	bl	80147c0 <sys_mutex_new>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d006      	beq.n	8009ecc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009ebe:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <tcpip_init+0x78>)
 8009ec0:	f240 2265 	movw	r2, #613	; 0x265
 8009ec4:	490f      	ldr	r1, [pc, #60]	; (8009f04 <tcpip_init+0x88>)
 8009ec6:	480d      	ldr	r0, [pc, #52]	; (8009efc <tcpip_init+0x80>)
 8009ec8:	f00a fec2 	bl	8014c50 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009ecc:	2318      	movs	r3, #24
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	490c      	ldr	r1, [pc, #48]	; (8009f08 <tcpip_init+0x8c>)
 8009ed8:	480c      	ldr	r0, [pc, #48]	; (8009f0c <tcpip_init+0x90>)
 8009eda:	f00a fca3 	bl	8014824 <sys_thread_new>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20009768 	.word	0x20009768
 8009eec:	2000976c 	.word	0x2000976c
 8009ef0:	20009770 	.word	0x20009770
 8009ef4:	0801639c 	.word	0x0801639c
 8009ef8:	08016424 	.word	0x08016424
 8009efc:	080163ec 	.word	0x080163ec
 8009f00:	20009774 	.word	0x20009774
 8009f04:	08016448 	.word	0x08016448
 8009f08:	08009c0d 	.word	0x08009c0d
 8009f0c:	0801646c 	.word	0x0801646c

08009f10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	b21a      	sxth	r2, r3
 8009f20:	88fb      	ldrh	r3, [r7, #6]
 8009f22:	0a1b      	lsrs	r3, r3, #8
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	b21b      	sxth	r3, r3
 8009f2c:	b29b      	uxth	r3, r3
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	061a      	lsls	r2, r3, #24
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	0a1b      	lsrs	r3, r3, #8
 8009f54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	0e1b      	lsrs	r3, r3, #24
 8009f5e:	4313      	orrs	r3, r2
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009f76:	f00a fc17 	bl	80147a8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009f7a:	f000 f8d3 	bl	800a124 <mem_init>
  memp_init();
 8009f7e:	f000 fc2f 	bl	800a7e0 <memp_init>
  pbuf_init();
  netif_init();
 8009f82:	f000 fd3b 	bl	800a9fc <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f86:	f001 fe49 	bl	800bc1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f8a:	f007 ff8d 	bl	8011ea8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <ptr_to_mem+0x20>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	4413      	add	r3, r2
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	2000e7a4 	.word	0x2000e7a4

08009fbc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <mem_to_ptr+0x20>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	b29b      	uxth	r3, r3
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	2000e7a4 	.word	0x2000e7a4

08009fe0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009fe8:	4b45      	ldr	r3, [pc, #276]	; (800a100 <plug_holes+0x120>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d206      	bcs.n	800a000 <plug_holes+0x20>
 8009ff2:	4b44      	ldr	r3, [pc, #272]	; (800a104 <plug_holes+0x124>)
 8009ff4:	f240 12df 	movw	r2, #479	; 0x1df
 8009ff8:	4943      	ldr	r1, [pc, #268]	; (800a108 <plug_holes+0x128>)
 8009ffa:	4844      	ldr	r0, [pc, #272]	; (800a10c <plug_holes+0x12c>)
 8009ffc:	f00a fe28 	bl	8014c50 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a000:	4b43      	ldr	r3, [pc, #268]	; (800a110 <plug_holes+0x130>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	429a      	cmp	r2, r3
 800a008:	d306      	bcc.n	800a018 <plug_holes+0x38>
 800a00a:	4b3e      	ldr	r3, [pc, #248]	; (800a104 <plug_holes+0x124>)
 800a00c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a010:	4940      	ldr	r1, [pc, #256]	; (800a114 <plug_holes+0x134>)
 800a012:	483e      	ldr	r0, [pc, #248]	; (800a10c <plug_holes+0x12c>)
 800a014:	f00a fe1c 	bl	8014c50 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	791b      	ldrb	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <plug_holes+0x4e>
 800a020:	4b38      	ldr	r3, [pc, #224]	; (800a104 <plug_holes+0x124>)
 800a022:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a026:	493c      	ldr	r1, [pc, #240]	; (800a118 <plug_holes+0x138>)
 800a028:	4838      	ldr	r0, [pc, #224]	; (800a10c <plug_holes+0x12c>)
 800a02a:	f00a fe11 	bl	8014c50 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a036:	d906      	bls.n	800a046 <plug_holes+0x66>
 800a038:	4b32      	ldr	r3, [pc, #200]	; (800a104 <plug_holes+0x124>)
 800a03a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a03e:	4937      	ldr	r1, [pc, #220]	; (800a11c <plug_holes+0x13c>)
 800a040:	4832      	ldr	r0, [pc, #200]	; (800a10c <plug_holes+0x12c>)
 800a042:	f00a fe05 	bl	8014c50 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff ffa4 	bl	8009f98 <ptr_to_mem>
 800a050:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	429a      	cmp	r2, r3
 800a058:	d024      	beq.n	800a0a4 <plug_holes+0xc4>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	791b      	ldrb	r3, [r3, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d120      	bne.n	800a0a4 <plug_holes+0xc4>
 800a062:	4b2b      	ldr	r3, [pc, #172]	; (800a110 <plug_holes+0x130>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d01b      	beq.n	800a0a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a06c:	4b2c      	ldr	r3, [pc, #176]	; (800a120 <plug_holes+0x140>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	429a      	cmp	r2, r3
 800a074:	d102      	bne.n	800a07c <plug_holes+0x9c>
      lfree = mem;
 800a076:	4a2a      	ldr	r2, [pc, #168]	; (800a120 <plug_holes+0x140>)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	881a      	ldrh	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a08c:	d00a      	beq.n	800a0a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f7ff ff80 	bl	8009f98 <ptr_to_mem>
 800a098:	4604      	mov	r4, r0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff ff8e 	bl	8009fbc <mem_to_ptr>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	885b      	ldrh	r3, [r3, #2]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ff75 	bl	8009f98 <ptr_to_mem>
 800a0ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d01f      	beq.n	800a0f8 <plug_holes+0x118>
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	791b      	ldrb	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d11b      	bne.n	800a0f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a0c0:	4b17      	ldr	r3, [pc, #92]	; (800a120 <plug_holes+0x140>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d102      	bne.n	800a0d0 <plug_holes+0xf0>
      lfree = pmem;
 800a0ca:	4a15      	ldr	r2, [pc, #84]	; (800a120 <plug_holes+0x140>)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	881a      	ldrh	r2, [r3, #0]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a0e0:	d00a      	beq.n	800a0f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff ff56 	bl	8009f98 <ptr_to_mem>
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	68b8      	ldr	r0, [r7, #8]
 800a0f0:	f7ff ff64 	bl	8009fbc <mem_to_ptr>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd90      	pop	{r4, r7, pc}
 800a100:	2000e7a4 	.word	0x2000e7a4
 800a104:	0801647c 	.word	0x0801647c
 800a108:	080164ac 	.word	0x080164ac
 800a10c:	080164c4 	.word	0x080164c4
 800a110:	2000e7a8 	.word	0x2000e7a8
 800a114:	080164ec 	.word	0x080164ec
 800a118:	08016508 	.word	0x08016508
 800a11c:	08016524 	.word	0x08016524
 800a120:	2000e7b0 	.word	0x2000e7b0

0800a124 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a12a:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <mem_init+0x84>)
 800a12c:	3303      	adds	r3, #3
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	461a      	mov	r2, r3
 800a134:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <mem_init+0x88>)
 800a136:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a138:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <mem_init+0x88>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800a144:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a152:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800a156:	f7ff ff1f 	bl	8009f98 <ptr_to_mem>
 800a15a:	4603      	mov	r3, r0
 800a15c:	4a14      	ldr	r2, [pc, #80]	; (800a1b0 <mem_init+0x8c>)
 800a15e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a160:	4b13      	ldr	r3, [pc, #76]	; (800a1b0 <mem_init+0x8c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2201      	movs	r2, #1
 800a166:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a168:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <mem_init+0x8c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800a170:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <mem_init+0x8c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800a17a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a17c:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <mem_init+0x88>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a0c      	ldr	r2, [pc, #48]	; (800a1b4 <mem_init+0x90>)
 800a182:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a184:	480c      	ldr	r0, [pc, #48]	; (800a1b8 <mem_init+0x94>)
 800a186:	f00a fb1b 	bl	80147c0 <sys_mutex_new>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a190:	4b0a      	ldr	r3, [pc, #40]	; (800a1bc <mem_init+0x98>)
 800a192:	f240 221f 	movw	r2, #543	; 0x21f
 800a196:	490a      	ldr	r1, [pc, #40]	; (800a1c0 <mem_init+0x9c>)
 800a198:	480a      	ldr	r0, [pc, #40]	; (800a1c4 <mem_init+0xa0>)
 800a19a:	f00a fd59 	bl	8014c50 <iprintf>
  }
}
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20009790 	.word	0x20009790
 800a1ac:	2000e7a4 	.word	0x2000e7a4
 800a1b0:	2000e7a8 	.word	0x2000e7a8
 800a1b4:	2000e7b0 	.word	0x2000e7b0
 800a1b8:	2000e7ac 	.word	0x2000e7ac
 800a1bc:	0801647c 	.word	0x0801647c
 800a1c0:	08016550 	.word	0x08016550
 800a1c4:	080164c4 	.word	0x080164c4

0800a1c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff fef3 	bl	8009fbc <mem_to_ptr>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff feda 	bl	8009f98 <ptr_to_mem>
 800a1e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	885b      	ldrh	r3, [r3, #2]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff fed4 	bl	8009f98 <ptr_to_mem>
 800a1f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a1fa:	d818      	bhi.n	800a22e <mem_link_valid+0x66>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	885b      	ldrh	r3, [r3, #2]
 800a200:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a204:	d813      	bhi.n	800a22e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a20a:	8afa      	ldrh	r2, [r7, #22]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d004      	beq.n	800a21a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	8afa      	ldrh	r2, [r7, #22]
 800a216:	429a      	cmp	r2, r3
 800a218:	d109      	bne.n	800a22e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a21a:	4b08      	ldr	r3, [pc, #32]	; (800a23c <mem_link_valid+0x74>)
 800a21c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	429a      	cmp	r2, r3
 800a222:	d006      	beq.n	800a232 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	885b      	ldrh	r3, [r3, #2]
 800a228:	8afa      	ldrh	r2, [r7, #22]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d001      	beq.n	800a232 <mem_link_valid+0x6a>
    return 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	e000      	b.n	800a234 <mem_link_valid+0x6c>
  }
  return 1;
 800a232:	2301      	movs	r3, #1
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	2000e7a8 	.word	0x2000e7a8

0800a240 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d070      	beq.n	800a330 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f003 0303 	and.w	r3, r3, #3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00d      	beq.n	800a274 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a258:	4b37      	ldr	r3, [pc, #220]	; (800a338 <mem_free+0xf8>)
 800a25a:	f240 2273 	movw	r2, #627	; 0x273
 800a25e:	4937      	ldr	r1, [pc, #220]	; (800a33c <mem_free+0xfc>)
 800a260:	4837      	ldr	r0, [pc, #220]	; (800a340 <mem_free+0x100>)
 800a262:	f00a fcf5 	bl	8014c50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a266:	f00a fafd 	bl	8014864 <sys_arch_protect>
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f00a fb07 	bl	8014880 <sys_arch_unprotect>
    return;
 800a272:	e05e      	b.n	800a332 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3b08      	subs	r3, #8
 800a278:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a27a:	4b32      	ldr	r3, [pc, #200]	; (800a344 <mem_free+0x104>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	429a      	cmp	r2, r3
 800a282:	d306      	bcc.n	800a292 <mem_free+0x52>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f103 020c 	add.w	r2, r3, #12
 800a28a:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <mem_free+0x108>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d90d      	bls.n	800a2ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a292:	4b29      	ldr	r3, [pc, #164]	; (800a338 <mem_free+0xf8>)
 800a294:	f240 227f 	movw	r2, #639	; 0x27f
 800a298:	492c      	ldr	r1, [pc, #176]	; (800a34c <mem_free+0x10c>)
 800a29a:	4829      	ldr	r0, [pc, #164]	; (800a340 <mem_free+0x100>)
 800a29c:	f00a fcd8 	bl	8014c50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2a0:	f00a fae0 	bl	8014864 <sys_arch_protect>
 800a2a4:	6138      	str	r0, [r7, #16]
 800a2a6:	6938      	ldr	r0, [r7, #16]
 800a2a8:	f00a faea 	bl	8014880 <sys_arch_unprotect>
    return;
 800a2ac:	e041      	b.n	800a332 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a2ae:	4828      	ldr	r0, [pc, #160]	; (800a350 <mem_free+0x110>)
 800a2b0:	f00a fa9c 	bl	80147ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	791b      	ldrb	r3, [r3, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d110      	bne.n	800a2de <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a2bc:	4b1e      	ldr	r3, [pc, #120]	; (800a338 <mem_free+0xf8>)
 800a2be:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a2c2:	4924      	ldr	r1, [pc, #144]	; (800a354 <mem_free+0x114>)
 800a2c4:	481e      	ldr	r0, [pc, #120]	; (800a340 <mem_free+0x100>)
 800a2c6:	f00a fcc3 	bl	8014c50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2ca:	4821      	ldr	r0, [pc, #132]	; (800a350 <mem_free+0x110>)
 800a2cc:	f00a fa9d 	bl	801480a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2d0:	f00a fac8 	bl	8014864 <sys_arch_protect>
 800a2d4:	6178      	str	r0, [r7, #20]
 800a2d6:	6978      	ldr	r0, [r7, #20]
 800a2d8:	f00a fad2 	bl	8014880 <sys_arch_unprotect>
    return;
 800a2dc:	e029      	b.n	800a332 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a2de:	69f8      	ldr	r0, [r7, #28]
 800a2e0:	f7ff ff72 	bl	800a1c8 <mem_link_valid>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d110      	bne.n	800a30c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a2ea:	4b13      	ldr	r3, [pc, #76]	; (800a338 <mem_free+0xf8>)
 800a2ec:	f240 2295 	movw	r2, #661	; 0x295
 800a2f0:	4919      	ldr	r1, [pc, #100]	; (800a358 <mem_free+0x118>)
 800a2f2:	4813      	ldr	r0, [pc, #76]	; (800a340 <mem_free+0x100>)
 800a2f4:	f00a fcac 	bl	8014c50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2f8:	4815      	ldr	r0, [pc, #84]	; (800a350 <mem_free+0x110>)
 800a2fa:	f00a fa86 	bl	801480a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2fe:	f00a fab1 	bl	8014864 <sys_arch_protect>
 800a302:	61b8      	str	r0, [r7, #24]
 800a304:	69b8      	ldr	r0, [r7, #24]
 800a306:	f00a fabb 	bl	8014880 <sys_arch_unprotect>
    return;
 800a30a:	e012      	b.n	800a332 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2200      	movs	r2, #0
 800a310:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <mem_free+0x11c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d202      	bcs.n	800a322 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a31c:	4a0f      	ldr	r2, [pc, #60]	; (800a35c <mem_free+0x11c>)
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a322:	69f8      	ldr	r0, [r7, #28]
 800a324:	f7ff fe5c 	bl	8009fe0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a328:	4809      	ldr	r0, [pc, #36]	; (800a350 <mem_free+0x110>)
 800a32a:	f00a fa6e 	bl	801480a <sys_mutex_unlock>
 800a32e:	e000      	b.n	800a332 <mem_free+0xf2>
    return;
 800a330:	bf00      	nop
}
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	0801647c 	.word	0x0801647c
 800a33c:	0801656c 	.word	0x0801656c
 800a340:	080164c4 	.word	0x080164c4
 800a344:	2000e7a4 	.word	0x2000e7a4
 800a348:	2000e7a8 	.word	0x2000e7a8
 800a34c:	08016590 	.word	0x08016590
 800a350:	2000e7ac 	.word	0x2000e7ac
 800a354:	080165ac 	.word	0x080165ac
 800a358:	080165d4 	.word	0x080165d4
 800a35c:	2000e7b0 	.word	0x2000e7b0

0800a360 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a36c:	887b      	ldrh	r3, [r7, #2]
 800a36e:	3303      	adds	r3, #3
 800a370:	b29b      	uxth	r3, r3
 800a372:	f023 0303 	bic.w	r3, r3, #3
 800a376:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a378:	8bfb      	ldrh	r3, [r7, #30]
 800a37a:	2b0b      	cmp	r3, #11
 800a37c:	d801      	bhi.n	800a382 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a37e:	230c      	movs	r3, #12
 800a380:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a382:	8bfb      	ldrh	r3, [r7, #30]
 800a384:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a388:	d803      	bhi.n	800a392 <mem_trim+0x32>
 800a38a:	8bfa      	ldrh	r2, [r7, #30]
 800a38c:	887b      	ldrh	r3, [r7, #2]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d201      	bcs.n	800a396 <mem_trim+0x36>
    return NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	e0d8      	b.n	800a548 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a396:	4b6e      	ldr	r3, [pc, #440]	; (800a550 <mem_trim+0x1f0>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d304      	bcc.n	800a3aa <mem_trim+0x4a>
 800a3a0:	4b6c      	ldr	r3, [pc, #432]	; (800a554 <mem_trim+0x1f4>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d306      	bcc.n	800a3b8 <mem_trim+0x58>
 800a3aa:	4b6b      	ldr	r3, [pc, #428]	; (800a558 <mem_trim+0x1f8>)
 800a3ac:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a3b0:	496a      	ldr	r1, [pc, #424]	; (800a55c <mem_trim+0x1fc>)
 800a3b2:	486b      	ldr	r0, [pc, #428]	; (800a560 <mem_trim+0x200>)
 800a3b4:	f00a fc4c 	bl	8014c50 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a3b8:	4b65      	ldr	r3, [pc, #404]	; (800a550 <mem_trim+0x1f0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d304      	bcc.n	800a3cc <mem_trim+0x6c>
 800a3c2:	4b64      	ldr	r3, [pc, #400]	; (800a554 <mem_trim+0x1f4>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d307      	bcc.n	800a3dc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3cc:	f00a fa4a 	bl	8014864 <sys_arch_protect>
 800a3d0:	60b8      	str	r0, [r7, #8]
 800a3d2:	68b8      	ldr	r0, [r7, #8]
 800a3d4:	f00a fa54 	bl	8014880 <sys_arch_unprotect>
    return rmem;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	e0b5      	b.n	800a548 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3b08      	subs	r3, #8
 800a3e0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a3e2:	69b8      	ldr	r0, [r7, #24]
 800a3e4:	f7ff fdea 	bl	8009fbc <mem_to_ptr>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	881a      	ldrh	r2, [r3, #0]
 800a3f0:	8afb      	ldrh	r3, [r7, #22]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b08      	subs	r3, #8
 800a3f8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a3fa:	8bfa      	ldrh	r2, [r7, #30]
 800a3fc:	8abb      	ldrh	r3, [r7, #20]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d906      	bls.n	800a410 <mem_trim+0xb0>
 800a402:	4b55      	ldr	r3, [pc, #340]	; (800a558 <mem_trim+0x1f8>)
 800a404:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a408:	4956      	ldr	r1, [pc, #344]	; (800a564 <mem_trim+0x204>)
 800a40a:	4855      	ldr	r0, [pc, #340]	; (800a560 <mem_trim+0x200>)
 800a40c:	f00a fc20 	bl	8014c50 <iprintf>
  if (newsize > size) {
 800a410:	8bfa      	ldrh	r2, [r7, #30]
 800a412:	8abb      	ldrh	r3, [r7, #20]
 800a414:	429a      	cmp	r2, r3
 800a416:	d901      	bls.n	800a41c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a418:	2300      	movs	r3, #0
 800a41a:	e095      	b.n	800a548 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a41c:	8bfa      	ldrh	r2, [r7, #30]
 800a41e:	8abb      	ldrh	r3, [r7, #20]
 800a420:	429a      	cmp	r2, r3
 800a422:	d101      	bne.n	800a428 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	e08f      	b.n	800a548 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a428:	484f      	ldr	r0, [pc, #316]	; (800a568 <mem_trim+0x208>)
 800a42a:	f00a f9df 	bl	80147ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff fdb0 	bl	8009f98 <ptr_to_mem>
 800a438:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	791b      	ldrb	r3, [r3, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d13f      	bne.n	800a4c2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a44a:	d106      	bne.n	800a45a <mem_trim+0xfa>
 800a44c:	4b42      	ldr	r3, [pc, #264]	; (800a558 <mem_trim+0x1f8>)
 800a44e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a452:	4946      	ldr	r1, [pc, #280]	; (800a56c <mem_trim+0x20c>)
 800a454:	4842      	ldr	r0, [pc, #264]	; (800a560 <mem_trim+0x200>)
 800a456:	f00a fbfb 	bl	8014c50 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a460:	8afa      	ldrh	r2, [r7, #22]
 800a462:	8bfb      	ldrh	r3, [r7, #30]
 800a464:	4413      	add	r3, r2
 800a466:	b29b      	uxth	r3, r3
 800a468:	3308      	adds	r3, #8
 800a46a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a46c:	4b40      	ldr	r3, [pc, #256]	; (800a570 <mem_trim+0x210>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	429a      	cmp	r2, r3
 800a474:	d106      	bne.n	800a484 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a476:	89fb      	ldrh	r3, [r7, #14]
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fd8d 	bl	8009f98 <ptr_to_mem>
 800a47e:	4603      	mov	r3, r0
 800a480:	4a3b      	ldr	r2, [pc, #236]	; (800a570 <mem_trim+0x210>)
 800a482:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a484:	89fb      	ldrh	r3, [r7, #14]
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fd86 	bl	8009f98 <ptr_to_mem>
 800a48c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2200      	movs	r2, #0
 800a492:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	89ba      	ldrh	r2, [r7, #12]
 800a498:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	8afa      	ldrh	r2, [r7, #22]
 800a49e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	89fa      	ldrh	r2, [r7, #14]
 800a4a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a4ae:	d047      	beq.n	800a540 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7ff fd6f 	bl	8009f98 <ptr_to_mem>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	89fb      	ldrh	r3, [r7, #14]
 800a4be:	8053      	strh	r3, [r2, #2]
 800a4c0:	e03e      	b.n	800a540 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a4c2:	8bfb      	ldrh	r3, [r7, #30]
 800a4c4:	f103 0214 	add.w	r2, r3, #20
 800a4c8:	8abb      	ldrh	r3, [r7, #20]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d838      	bhi.n	800a540 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a4ce:	8afa      	ldrh	r2, [r7, #22]
 800a4d0:	8bfb      	ldrh	r3, [r7, #30]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a4e2:	d106      	bne.n	800a4f2 <mem_trim+0x192>
 800a4e4:	4b1c      	ldr	r3, [pc, #112]	; (800a558 <mem_trim+0x1f8>)
 800a4e6:	f240 3216 	movw	r2, #790	; 0x316
 800a4ea:	4920      	ldr	r1, [pc, #128]	; (800a56c <mem_trim+0x20c>)
 800a4ec:	481c      	ldr	r0, [pc, #112]	; (800a560 <mem_trim+0x200>)
 800a4ee:	f00a fbaf 	bl	8014c50 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a4f2:	89fb      	ldrh	r3, [r7, #14]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff fd4f 	bl	8009f98 <ptr_to_mem>
 800a4fa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a4fc:	4b1c      	ldr	r3, [pc, #112]	; (800a570 <mem_trim+0x210>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	429a      	cmp	r2, r3
 800a504:	d202      	bcs.n	800a50c <mem_trim+0x1ac>
      lfree = mem2;
 800a506:	4a1a      	ldr	r2, [pc, #104]	; (800a570 <mem_trim+0x210>)
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2200      	movs	r2, #0
 800a510:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	881a      	ldrh	r2, [r3, #0]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	8afa      	ldrh	r2, [r7, #22]
 800a51e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	89fa      	ldrh	r2, [r7, #14]
 800a524:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a52e:	d007      	beq.n	800a540 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fd2f 	bl	8009f98 <ptr_to_mem>
 800a53a:	4602      	mov	r2, r0
 800a53c:	89fb      	ldrh	r3, [r7, #14]
 800a53e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a540:	4809      	ldr	r0, [pc, #36]	; (800a568 <mem_trim+0x208>)
 800a542:	f00a f962 	bl	801480a <sys_mutex_unlock>
  return rmem;
 800a546:	687b      	ldr	r3, [r7, #4]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	2000e7a4 	.word	0x2000e7a4
 800a554:	2000e7a8 	.word	0x2000e7a8
 800a558:	0801647c 	.word	0x0801647c
 800a55c:	08016608 	.word	0x08016608
 800a560:	080164c4 	.word	0x080164c4
 800a564:	08016620 	.word	0x08016620
 800a568:	2000e7ac 	.word	0x2000e7ac
 800a56c:	08016640 	.word	0x08016640
 800a570:	2000e7b0 	.word	0x2000e7b0

0800a574 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <mem_malloc+0x14>
    return NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	e0e2      	b.n	800a74e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a588:	88fb      	ldrh	r3, [r7, #6]
 800a58a:	3303      	adds	r3, #3
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	f023 0303 	bic.w	r3, r3, #3
 800a592:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a594:	8bbb      	ldrh	r3, [r7, #28]
 800a596:	2b0b      	cmp	r3, #11
 800a598:	d801      	bhi.n	800a59e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a59a:	230c      	movs	r3, #12
 800a59c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a59e:	8bbb      	ldrh	r3, [r7, #28]
 800a5a0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a5a4:	d803      	bhi.n	800a5ae <mem_malloc+0x3a>
 800a5a6:	8bba      	ldrh	r2, [r7, #28]
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d201      	bcs.n	800a5b2 <mem_malloc+0x3e>
    return NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e0cd      	b.n	800a74e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a5b2:	4869      	ldr	r0, [pc, #420]	; (800a758 <mem_malloc+0x1e4>)
 800a5b4:	f00a f91a 	bl	80147ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a5b8:	4b68      	ldr	r3, [pc, #416]	; (800a75c <mem_malloc+0x1e8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fcfd 	bl	8009fbc <mem_to_ptr>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	83fb      	strh	r3, [r7, #30]
 800a5c6:	e0b7      	b.n	800a738 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a5c8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fce4 	bl	8009f98 <ptr_to_mem>
 800a5d0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	791b      	ldrb	r3, [r3, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f040 80a7 	bne.w	800a72a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	8bfb      	ldrh	r3, [r7, #30]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	f1a3 0208 	sub.w	r2, r3, #8
 800a5ea:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	f0c0 809c 	bcc.w	800a72a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	8bfb      	ldrh	r3, [r7, #30]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	f1a3 0208 	sub.w	r2, r3, #8
 800a600:	8bbb      	ldrh	r3, [r7, #28]
 800a602:	3314      	adds	r3, #20
 800a604:	429a      	cmp	r2, r3
 800a606:	d333      	bcc.n	800a670 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a608:	8bfa      	ldrh	r2, [r7, #30]
 800a60a:	8bbb      	ldrh	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	b29b      	uxth	r3, r3
 800a610:	3308      	adds	r3, #8
 800a612:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a614:	8a7b      	ldrh	r3, [r7, #18]
 800a616:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a61a:	d106      	bne.n	800a62a <mem_malloc+0xb6>
 800a61c:	4b50      	ldr	r3, [pc, #320]	; (800a760 <mem_malloc+0x1ec>)
 800a61e:	f240 3287 	movw	r2, #903	; 0x387
 800a622:	4950      	ldr	r1, [pc, #320]	; (800a764 <mem_malloc+0x1f0>)
 800a624:	4850      	ldr	r0, [pc, #320]	; (800a768 <mem_malloc+0x1f4>)
 800a626:	f00a fb13 	bl	8014c50 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a62a:	8a7b      	ldrh	r3, [r7, #18]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff fcb3 	bl	8009f98 <ptr_to_mem>
 800a632:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	881a      	ldrh	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	8bfa      	ldrh	r2, [r7, #30]
 800a646:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	8a7a      	ldrh	r2, [r7, #18]
 800a64c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2201      	movs	r2, #1
 800a652:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a65c:	d00b      	beq.n	800a676 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fc98 	bl	8009f98 <ptr_to_mem>
 800a668:	4602      	mov	r2, r0
 800a66a:	8a7b      	ldrh	r3, [r7, #18]
 800a66c:	8053      	strh	r3, [r2, #2]
 800a66e:	e002      	b.n	800a676 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2201      	movs	r2, #1
 800a674:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a676:	4b39      	ldr	r3, [pc, #228]	; (800a75c <mem_malloc+0x1e8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d127      	bne.n	800a6d0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a680:	4b36      	ldr	r3, [pc, #216]	; (800a75c <mem_malloc+0x1e8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a686:	e005      	b.n	800a694 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff fc83 	bl	8009f98 <ptr_to_mem>
 800a692:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	791b      	ldrb	r3, [r3, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <mem_malloc+0x132>
 800a69c:	4b33      	ldr	r3, [pc, #204]	; (800a76c <mem_malloc+0x1f8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d1f0      	bne.n	800a688 <mem_malloc+0x114>
          }
          lfree = cur;
 800a6a6:	4a2d      	ldr	r2, [pc, #180]	; (800a75c <mem_malloc+0x1e8>)
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a6ac:	4b2b      	ldr	r3, [pc, #172]	; (800a75c <mem_malloc+0x1e8>)
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	4b2e      	ldr	r3, [pc, #184]	; (800a76c <mem_malloc+0x1f8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d00b      	beq.n	800a6d0 <mem_malloc+0x15c>
 800a6b8:	4b28      	ldr	r3, [pc, #160]	; (800a75c <mem_malloc+0x1e8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d006      	beq.n	800a6d0 <mem_malloc+0x15c>
 800a6c2:	4b27      	ldr	r3, [pc, #156]	; (800a760 <mem_malloc+0x1ec>)
 800a6c4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a6c8:	4929      	ldr	r1, [pc, #164]	; (800a770 <mem_malloc+0x1fc>)
 800a6ca:	4827      	ldr	r0, [pc, #156]	; (800a768 <mem_malloc+0x1f4>)
 800a6cc:	f00a fac0 	bl	8014c50 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a6d0:	4821      	ldr	r0, [pc, #132]	; (800a758 <mem_malloc+0x1e4>)
 800a6d2:	f00a f89a 	bl	801480a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a6d6:	8bba      	ldrh	r2, [r7, #28]
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	4413      	add	r3, r2
 800a6dc:	3308      	adds	r3, #8
 800a6de:	4a23      	ldr	r2, [pc, #140]	; (800a76c <mem_malloc+0x1f8>)
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d906      	bls.n	800a6f4 <mem_malloc+0x180>
 800a6e6:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <mem_malloc+0x1ec>)
 800a6e8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a6ec:	4921      	ldr	r1, [pc, #132]	; (800a774 <mem_malloc+0x200>)
 800a6ee:	481e      	ldr	r0, [pc, #120]	; (800a768 <mem_malloc+0x1f4>)
 800a6f0:	f00a faae 	bl	8014c50 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f003 0303 	and.w	r3, r3, #3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d006      	beq.n	800a70c <mem_malloc+0x198>
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <mem_malloc+0x1ec>)
 800a700:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a704:	491c      	ldr	r1, [pc, #112]	; (800a778 <mem_malloc+0x204>)
 800a706:	4818      	ldr	r0, [pc, #96]	; (800a768 <mem_malloc+0x1f4>)
 800a708:	f00a faa2 	bl	8014c50 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d006      	beq.n	800a724 <mem_malloc+0x1b0>
 800a716:	4b12      	ldr	r3, [pc, #72]	; (800a760 <mem_malloc+0x1ec>)
 800a718:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a71c:	4917      	ldr	r1, [pc, #92]	; (800a77c <mem_malloc+0x208>)
 800a71e:	4812      	ldr	r0, [pc, #72]	; (800a768 <mem_malloc+0x1f4>)
 800a720:	f00a fa96 	bl	8014c50 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	3308      	adds	r3, #8
 800a728:	e011      	b.n	800a74e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a72a:	8bfb      	ldrh	r3, [r7, #30]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fc33 	bl	8009f98 <ptr_to_mem>
 800a732:	4603      	mov	r3, r0
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a738:	8bfa      	ldrh	r2, [r7, #30]
 800a73a:	8bbb      	ldrh	r3, [r7, #28]
 800a73c:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800a740:	429a      	cmp	r2, r3
 800a742:	f4ff af41 	bcc.w	800a5c8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a746:	4804      	ldr	r0, [pc, #16]	; (800a758 <mem_malloc+0x1e4>)
 800a748:	f00a f85f 	bl	801480a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3720      	adds	r7, #32
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	2000e7ac 	.word	0x2000e7ac
 800a75c:	2000e7b0 	.word	0x2000e7b0
 800a760:	0801647c 	.word	0x0801647c
 800a764:	08016640 	.word	0x08016640
 800a768:	080164c4 	.word	0x080164c4
 800a76c:	2000e7a8 	.word	0x2000e7a8
 800a770:	08016654 	.word	0x08016654
 800a774:	08016670 	.word	0x08016670
 800a778:	080166a0 	.word	0x080166a0
 800a77c:	080166d0 	.word	0x080166d0

0800a780 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	3303      	adds	r3, #3
 800a796:	f023 0303 	bic.w	r3, r3, #3
 800a79a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e011      	b.n	800a7c6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	885b      	ldrh	r3, [r3, #2]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	dbe7      	blt.n	800a7a2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a7d2:	bf00      	nop
 800a7d4:	bf00      	nop
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	80fb      	strh	r3, [r7, #6]
 800a7ea:	e009      	b.n	800a800 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	4a08      	ldr	r2, [pc, #32]	; (800a810 <memp_init+0x30>)
 800a7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff ffc3 	bl	800a780 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	80fb      	strh	r3, [r7, #6]
 800a800:	88fb      	ldrh	r3, [r7, #6]
 800a802:	2b0b      	cmp	r3, #11
 800a804:	d9f2      	bls.n	800a7ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a806:	bf00      	nop
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	08018bc0 	.word	0x08018bc0

0800a814 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a81c:	f00a f822 	bl	8014864 <sys_arch_protect>
 800a820:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d015      	beq.n	800a85c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	6812      	ldr	r2, [r2, #0]
 800a838:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d006      	beq.n	800a852 <do_memp_malloc_pool+0x3e>
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <do_memp_malloc_pool+0x58>)
 800a846:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a84a:	4909      	ldr	r1, [pc, #36]	; (800a870 <do_memp_malloc_pool+0x5c>)
 800a84c:	4809      	ldr	r0, [pc, #36]	; (800a874 <do_memp_malloc_pool+0x60>)
 800a84e:	f00a f9ff 	bl	8014c50 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f00a f814 	bl	8014880 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	e003      	b.n	800a864 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f00a f80f 	bl	8014880 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	080166f4 	.word	0x080166f4
 800a870:	08016724 	.word	0x08016724
 800a874:	08016748 	.word	0x08016748

0800a878 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <memp_malloc_pool+0x1c>
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <memp_malloc_pool+0x38>)
 800a888:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a88c:	4909      	ldr	r1, [pc, #36]	; (800a8b4 <memp_malloc_pool+0x3c>)
 800a88e:	480a      	ldr	r0, [pc, #40]	; (800a8b8 <memp_malloc_pool+0x40>)
 800a890:	f00a f9de 	bl	8014c50 <iprintf>
  if (desc == NULL) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <memp_malloc_pool+0x26>
    return NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e003      	b.n	800a8a6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff ffb8 	bl	800a814 <do_memp_malloc_pool>
 800a8a4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	080166f4 	.word	0x080166f4
 800a8b4:	08016770 	.word	0x08016770
 800a8b8:	08016748 	.word	0x08016748

0800a8bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	2b0b      	cmp	r3, #11
 800a8ca:	d908      	bls.n	800a8de <memp_malloc+0x22>
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <memp_malloc+0x3c>)
 800a8ce:	f240 1257 	movw	r2, #343	; 0x157
 800a8d2:	490a      	ldr	r1, [pc, #40]	; (800a8fc <memp_malloc+0x40>)
 800a8d4:	480a      	ldr	r0, [pc, #40]	; (800a900 <memp_malloc+0x44>)
 800a8d6:	f00a f9bb 	bl	8014c50 <iprintf>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e008      	b.n	800a8f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a8de:	79fb      	ldrb	r3, [r7, #7]
 800a8e0:	4a08      	ldr	r2, [pc, #32]	; (800a904 <memp_malloc+0x48>)
 800a8e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7ff ff94 	bl	800a814 <do_memp_malloc_pool>
 800a8ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	080166f4 	.word	0x080166f4
 800a8fc:	08016784 	.word	0x08016784
 800a900:	08016748 	.word	0x08016748
 800a904:	08018bc0 	.word	0x08018bc0

0800a908 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d006      	beq.n	800a92a <do_memp_free_pool+0x22>
 800a91c:	4b0d      	ldr	r3, [pc, #52]	; (800a954 <do_memp_free_pool+0x4c>)
 800a91e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a922:	490d      	ldr	r1, [pc, #52]	; (800a958 <do_memp_free_pool+0x50>)
 800a924:	480d      	ldr	r0, [pc, #52]	; (800a95c <do_memp_free_pool+0x54>)
 800a926:	f00a f993 	bl	8014c50 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a92e:	f009 ff99 	bl	8014864 <sys_arch_protect>
 800a932:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a946:	68b8      	ldr	r0, [r7, #8]
 800a948:	f009 ff9a 	bl	8014880 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	080166f4 	.word	0x080166f4
 800a958:	080167a4 	.word	0x080167a4
 800a95c:	08016748 	.word	0x08016748

0800a960 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <memp_free_pool+0x1e>
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <memp_free_pool+0x3c>)
 800a972:	f240 1295 	movw	r2, #405	; 0x195
 800a976:	490a      	ldr	r1, [pc, #40]	; (800a9a0 <memp_free_pool+0x40>)
 800a978:	480a      	ldr	r0, [pc, #40]	; (800a9a4 <memp_free_pool+0x44>)
 800a97a:	f00a f969 	bl	8014c50 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d007      	beq.n	800a994 <memp_free_pool+0x34>
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d004      	beq.n	800a994 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff ffbb 	bl	800a908 <do_memp_free_pool>
 800a992:	e000      	b.n	800a996 <memp_free_pool+0x36>
    return;
 800a994:	bf00      	nop
}
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	080166f4 	.word	0x080166f4
 800a9a0:	08016770 	.word	0x08016770
 800a9a4:	08016748 	.word	0x08016748

0800a9a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	2b0b      	cmp	r3, #11
 800a9b8:	d907      	bls.n	800a9ca <memp_free+0x22>
 800a9ba:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <memp_free+0x44>)
 800a9bc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a9c0:	490b      	ldr	r1, [pc, #44]	; (800a9f0 <memp_free+0x48>)
 800a9c2:	480c      	ldr	r0, [pc, #48]	; (800a9f4 <memp_free+0x4c>)
 800a9c4:	f00a f944 	bl	8014c50 <iprintf>
 800a9c8:	e00c      	b.n	800a9e4 <memp_free+0x3c>

  if (mem == NULL) {
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	4a09      	ldr	r2, [pc, #36]	; (800a9f8 <memp_free+0x50>)
 800a9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff ff94 	bl	800a908 <do_memp_free_pool>
 800a9e0:	e000      	b.n	800a9e4 <memp_free+0x3c>
    return;
 800a9e2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	080166f4 	.word	0x080166f4
 800a9f0:	080167c4 	.word	0x080167c4
 800a9f4:	08016748 	.word	0x08016748
 800a9f8:	08018bc0 	.word	0x08018bc0

0800a9fc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aa00:	bf00      	nop
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
	...

0800aa0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d108      	bne.n	800aa32 <netif_add+0x26>
 800aa20:	4b57      	ldr	r3, [pc, #348]	; (800ab80 <netif_add+0x174>)
 800aa22:	f240 1227 	movw	r2, #295	; 0x127
 800aa26:	4957      	ldr	r1, [pc, #348]	; (800ab84 <netif_add+0x178>)
 800aa28:	4857      	ldr	r0, [pc, #348]	; (800ab88 <netif_add+0x17c>)
 800aa2a:	f00a f911 	bl	8014c50 <iprintf>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e0a2      	b.n	800ab78 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d108      	bne.n	800aa4a <netif_add+0x3e>
 800aa38:	4b51      	ldr	r3, [pc, #324]	; (800ab80 <netif_add+0x174>)
 800aa3a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aa3e:	4953      	ldr	r1, [pc, #332]	; (800ab8c <netif_add+0x180>)
 800aa40:	4851      	ldr	r0, [pc, #324]	; (800ab88 <netif_add+0x17c>)
 800aa42:	f00a f905 	bl	8014c50 <iprintf>
 800aa46:	2300      	movs	r3, #0
 800aa48:	e096      	b.n	800ab78 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aa50:	4b4f      	ldr	r3, [pc, #316]	; (800ab90 <netif_add+0x184>)
 800aa52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aa5a:	4b4d      	ldr	r3, [pc, #308]	; (800ab90 <netif_add+0x184>)
 800aa5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aa64:	4b4a      	ldr	r3, [pc, #296]	; (800ab90 <netif_add+0x184>)
 800aa66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4a45      	ldr	r2, [pc, #276]	; (800ab94 <netif_add+0x188>)
 800aa7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6a3a      	ldr	r2, [r7, #32]
 800aa98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aa9a:	4b3f      	ldr	r3, [pc, #252]	; (800ab98 <netif_add+0x18c>)
 800aa9c:	781a      	ldrb	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 f90f 	bl	800acd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	4798      	blx	r3
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <netif_add+0xba>
    return NULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e058      	b.n	800ab78 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aacc:	2bff      	cmp	r3, #255	; 0xff
 800aace:	d103      	bne.n	800aad8 <netif_add+0xcc>
        netif->num = 0;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aadc:	4b2f      	ldr	r3, [pc, #188]	; (800ab9c <netif_add+0x190>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	617b      	str	r3, [r7, #20]
 800aae2:	e02b      	b.n	800ab3c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d106      	bne.n	800aafa <netif_add+0xee>
 800aaec:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <netif_add+0x174>)
 800aaee:	f240 128b 	movw	r2, #395	; 0x18b
 800aaf2:	492b      	ldr	r1, [pc, #172]	; (800aba0 <netif_add+0x194>)
 800aaf4:	4824      	ldr	r0, [pc, #144]	; (800ab88 <netif_add+0x17c>)
 800aaf6:	f00a f8ab 	bl	8014c50 <iprintf>
        num_netifs++;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	3301      	adds	r3, #1
 800aafe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	2bff      	cmp	r3, #255	; 0xff
 800ab04:	dd06      	ble.n	800ab14 <netif_add+0x108>
 800ab06:	4b1e      	ldr	r3, [pc, #120]	; (800ab80 <netif_add+0x174>)
 800ab08:	f240 128d 	movw	r2, #397	; 0x18d
 800ab0c:	4925      	ldr	r1, [pc, #148]	; (800aba4 <netif_add+0x198>)
 800ab0e:	481e      	ldr	r0, [pc, #120]	; (800ab88 <netif_add+0x17c>)
 800ab10:	f00a f89e 	bl	8014c50 <iprintf>
        if (netif2->num == netif->num) {
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d108      	bne.n	800ab36 <netif_add+0x12a>
          netif->num++;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ab34:	e005      	b.n	800ab42 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1d0      	bne.n	800aae4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1be      	bne.n	800aac6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab4e:	2bfe      	cmp	r3, #254	; 0xfe
 800ab50:	d103      	bne.n	800ab5a <netif_add+0x14e>
    netif_num = 0;
 800ab52:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <netif_add+0x18c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	e006      	b.n	800ab68 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab60:	3301      	adds	r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <netif_add+0x18c>)
 800ab66:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ab68:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <netif_add+0x190>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ab70:	4a0a      	ldr	r2, [pc, #40]	; (800ab9c <netif_add+0x190>)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ab76:	68fb      	ldr	r3, [r7, #12]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	080167e0 	.word	0x080167e0
 800ab84:	08016874 	.word	0x08016874
 800ab88:	08016830 	.word	0x08016830
 800ab8c:	08016890 	.word	0x08016890
 800ab90:	08018c30 	.word	0x08018c30
 800ab94:	0800afaf 	.word	0x0800afaf
 800ab98:	20011800 	.word	0x20011800
 800ab9c:	200117f8 	.word	0x200117f8
 800aba0:	080168b4 	.word	0x080168b4
 800aba4:	080168c8 	.word	0x080168c8

0800aba8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f002 fe4b 	bl	800d850 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <netif_do_set_ipaddr+0x20>
 800abd6:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <netif_do_set_ipaddr+0x88>)
 800abd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800abdc:	491c      	ldr	r1, [pc, #112]	; (800ac50 <netif_do_set_ipaddr+0x8c>)
 800abde:	481d      	ldr	r0, [pc, #116]	; (800ac54 <netif_do_set_ipaddr+0x90>)
 800abe0:	f00a f836 	bl	8014c50 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <netif_do_set_ipaddr+0x34>
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <netif_do_set_ipaddr+0x88>)
 800abec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800abf0:	4917      	ldr	r1, [pc, #92]	; (800ac50 <netif_do_set_ipaddr+0x8c>)
 800abf2:	4818      	ldr	r0, [pc, #96]	; (800ac54 <netif_do_set_ipaddr+0x90>)
 800abf4:	f00a f82c 	bl	8014c50 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3304      	adds	r3, #4
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d01c      	beq.n	800ac40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3304      	adds	r3, #4
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ac16:	f107 0314 	add.w	r3, r7, #20
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff ffc3 	bl	800aba8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <netif_do_set_ipaddr+0x6a>
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	e000      	b.n	800ac30 <netif_do_set_ipaddr+0x6c>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ac34:	2101      	movs	r1, #1
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f8d2 	bl	800ade0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e000      	b.n	800ac42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	080167e0 	.word	0x080167e0
 800ac50:	080168f8 	.word	0x080168f8
 800ac54:	08016830 	.word	0x08016830

0800ac58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d00a      	beq.n	800ac88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <netif_do_set_netmask+0x26>
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	e000      	b.n	800ac80 <netif_do_set_netmask+0x28>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ac84:	2301      	movs	r3, #1
 800ac86:	e000      	b.n	800ac8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	330c      	adds	r3, #12
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d00a      	beq.n	800acc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d002      	beq.n	800acbc <netif_do_set_gw+0x26>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	e000      	b.n	800acbe <netif_do_set_gw+0x28>
 800acbc:	2300      	movs	r3, #0
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800acf0:	4b1c      	ldr	r3, [pc, #112]	; (800ad64 <netif_set_addr+0x90>)
 800acf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800acfa:	4b1a      	ldr	r3, [pc, #104]	; (800ad64 <netif_set_addr+0x90>)
 800acfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <netif_set_addr+0x90>)
 800ad06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <netif_set_addr+0x42>
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <netif_set_addr+0x46>
 800ad16:	2301      	movs	r3, #1
 800ad18:	e000      	b.n	800ad1c <netif_set_addr+0x48>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d006      	beq.n	800ad32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad24:	f107 0310 	add.w	r3, r7, #16
 800ad28:	461a      	mov	r2, r3
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff ff49 	bl	800abc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7ff ff8e 	bl	800ac58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7ff ffa8 	bl	800ac96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d106      	bne.n	800ad5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad4c:	f107 0310 	add.w	r3, r7, #16
 800ad50:	461a      	mov	r2, r3
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff ff35 	bl	800abc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ad5a:	bf00      	nop
 800ad5c:	3720      	adds	r7, #32
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	08018c30 	.word	0x08018c30

0800ad68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ad70:	4a04      	ldr	r2, [pc, #16]	; (800ad84 <netif_set_default+0x1c>)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	200117fc 	.word	0x200117fc

0800ad88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d107      	bne.n	800ada6 <netif_set_up+0x1e>
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <netif_set_up+0x4c>)
 800ad98:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ad9c:	490e      	ldr	r1, [pc, #56]	; (800add8 <netif_set_up+0x50>)
 800ad9e:	480f      	ldr	r0, [pc, #60]	; (800addc <netif_set_up+0x54>)
 800ada0:	f009 ff56 	bl	8014c50 <iprintf>
 800ada4:	e013      	b.n	800adce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10c      	bne.n	800adce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adba:	f043 0301 	orr.w	r3, r3, #1
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800adc6:	2103      	movs	r1, #3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f809 	bl	800ade0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	080167e0 	.word	0x080167e0
 800add8:	08016968 	.word	0x08016968
 800addc:	08016830 	.word	0x08016830

0800ade0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <netif_issue_reports+0x20>
 800adf2:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <netif_issue_reports+0x74>)
 800adf4:	f240 326d 	movw	r2, #877	; 0x36d
 800adf8:	4917      	ldr	r1, [pc, #92]	; (800ae58 <netif_issue_reports+0x78>)
 800adfa:	4818      	ldr	r0, [pc, #96]	; (800ae5c <netif_issue_reports+0x7c>)
 800adfc:	f009 ff28 	bl	8014c50 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae06:	f003 0304 	and.w	r3, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d01e      	beq.n	800ae4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d017      	beq.n	800ae4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d013      	beq.n	800ae4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00e      	beq.n	800ae4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae36:	f003 0308 	and.w	r3, r3, #8
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d007      	beq.n	800ae4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3304      	adds	r3, #4
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f008 f823 	bl	8012e90 <etharp_request>
 800ae4a:	e000      	b.n	800ae4e <netif_issue_reports+0x6e>
    return;
 800ae4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	080167e0 	.word	0x080167e0
 800ae58:	08016984 	.word	0x08016984
 800ae5c:	08016830 	.word	0x08016830

0800ae60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d107      	bne.n	800ae7e <netif_set_down+0x1e>
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <netif_set_down+0x58>)
 800ae70:	f240 329b 	movw	r2, #923	; 0x39b
 800ae74:	4911      	ldr	r1, [pc, #68]	; (800aebc <netif_set_down+0x5c>)
 800ae76:	4812      	ldr	r0, [pc, #72]	; (800aec0 <netif_set_down+0x60>)
 800ae78:	f009 feea 	bl	8014c50 <iprintf>
 800ae7c:	e019      	b.n	800aeb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae84:	f003 0301 	and.w	r3, r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d012      	beq.n	800aeb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aea4:	f003 0308 	and.w	r3, r3, #8
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f007 fbad 	bl	801260c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	080167e0 	.word	0x080167e0
 800aebc:	080169a8 	.word	0x080169a8
 800aec0:	08016830 	.word	0x08016830

0800aec4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d107      	bne.n	800aee2 <netif_set_link_up+0x1e>
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <netif_set_link_up+0x5c>)
 800aed4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800aed8:	4912      	ldr	r1, [pc, #72]	; (800af24 <netif_set_link_up+0x60>)
 800aeda:	4813      	ldr	r0, [pc, #76]	; (800af28 <netif_set_link_up+0x64>)
 800aedc:	f009 feb8 	bl	8014c50 <iprintf>
 800aee0:	e01b      	b.n	800af1a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d114      	bne.n	800af1a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aef6:	f043 0304 	orr.w	r3, r3, #4
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800af02:	2103      	movs	r1, #3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff ff6b 	bl	800ade0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <netif_set_link_up+0x56>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	080167e0 	.word	0x080167e0
 800af24:	080169c8 	.word	0x080169c8
 800af28:	08016830 	.word	0x08016830

0800af2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d107      	bne.n	800af4a <netif_set_link_down+0x1e>
 800af3a:	4b11      	ldr	r3, [pc, #68]	; (800af80 <netif_set_link_down+0x54>)
 800af3c:	f240 4206 	movw	r2, #1030	; 0x406
 800af40:	4910      	ldr	r1, [pc, #64]	; (800af84 <netif_set_link_down+0x58>)
 800af42:	4811      	ldr	r0, [pc, #68]	; (800af88 <netif_set_link_down+0x5c>)
 800af44:	f009 fe84 	bl	8014c50 <iprintf>
 800af48:	e017      	b.n	800af7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af50:	f003 0304 	and.w	r3, r3, #4
 800af54:	2b00      	cmp	r3, #0
 800af56:	d010      	beq.n	800af7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af5e:	f023 0304 	bic.w	r3, r3, #4
 800af62:	b2da      	uxtb	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <netif_set_link_down+0x4e>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	080167e0 	.word	0x080167e0
 800af84:	080169ec 	.word	0x080169ec
 800af88:	08016830 	.word	0x08016830

0800af8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	61da      	str	r2, [r3, #28]
  }
}
 800afa2:	bf00      	nop
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800afba:	f06f 030b 	mvn.w	r3, #11
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
	...

0800afcc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d013      	beq.n	800b004 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <netif_get_by_index+0x48>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	e00c      	b.n	800affe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afea:	3301      	adds	r3, #1
 800afec:	b2db      	uxtb	r3, r3
 800afee:	79fa      	ldrb	r2, [r7, #7]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d101      	bne.n	800aff8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	e006      	b.n	800b006 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1ef      	bne.n	800afe4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	200117f8 	.word	0x200117f8

0800b018 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b01e:	f009 fc21 	bl	8014864 <sys_arch_protect>
 800b022:	6038      	str	r0, [r7, #0]
 800b024:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <pbuf_free_ooseq+0x44>)
 800b026:	2200      	movs	r2, #0
 800b028:	701a      	strb	r2, [r3, #0]
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	f009 fc28 	bl	8014880 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b030:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <pbuf_free_ooseq+0x48>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	607b      	str	r3, [r7, #4]
 800b036:	e00a      	b.n	800b04e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f002 fc43 	bl	800d8cc <tcp_free_ooseq>
      return;
 800b046:	e005      	b.n	800b054 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	607b      	str	r3, [r7, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1f1      	bne.n	800b038 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20011801 	.word	0x20011801
 800b060:	20011810 	.word	0x20011810

0800b064 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b06c:	f7ff ffd4 	bl	800b018 <pbuf_free_ooseq>
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b07e:	f009 fbf1 	bl	8014864 <sys_arch_protect>
 800b082:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b084:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <pbuf_pool_is_empty+0x4c>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b08a:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <pbuf_pool_is_empty+0x4c>)
 800b08c:	2201      	movs	r2, #1
 800b08e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f009 fbf5 	bl	8014880 <sys_arch_unprotect>

  if (!queued) {
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10f      	bne.n	800b0bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b09c:	2100      	movs	r1, #0
 800b09e:	480a      	ldr	r0, [pc, #40]	; (800b0c8 <pbuf_pool_is_empty+0x50>)
 800b0a0:	f7fe fe96 	bl	8009dd0 <tcpip_try_callback>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d008      	beq.n	800b0bc <pbuf_pool_is_empty+0x44>
 800b0aa:	f009 fbdb 	bl	8014864 <sys_arch_protect>
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <pbuf_pool_is_empty+0x4c>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f009 fbe2 	bl	8014880 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20011801 	.word	0x20011801
 800b0c8:	0800b065 	.word	0x0800b065

0800b0cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	461a      	mov	r2, r3
 800b0da:	460b      	mov	r3, r1
 800b0dc:	80fb      	strh	r3, [r7, #6]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	88fa      	ldrh	r2, [r7, #6]
 800b0f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	88ba      	ldrh	r2, [r7, #4]
 800b0f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b0fa:	8b3b      	ldrh	r3, [r7, #24]
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	7f3a      	ldrb	r2, [r7, #28]
 800b106:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2201      	movs	r2, #1
 800b10c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	73da      	strb	r2, [r3, #15]
}
 800b114:	bf00      	nop
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08c      	sub	sp, #48	; 0x30
 800b124:	af02      	add	r7, sp, #8
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
 800b12a:	460b      	mov	r3, r1
 800b12c:	80bb      	strh	r3, [r7, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b136:	887b      	ldrh	r3, [r7, #2]
 800b138:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b13c:	d07f      	beq.n	800b23e <pbuf_alloc+0x11e>
 800b13e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b142:	f300 80c8 	bgt.w	800b2d6 <pbuf_alloc+0x1b6>
 800b146:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b14a:	d010      	beq.n	800b16e <pbuf_alloc+0x4e>
 800b14c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b150:	f300 80c1 	bgt.w	800b2d6 <pbuf_alloc+0x1b6>
 800b154:	2b01      	cmp	r3, #1
 800b156:	d002      	beq.n	800b15e <pbuf_alloc+0x3e>
 800b158:	2b41      	cmp	r3, #65	; 0x41
 800b15a:	f040 80bc 	bne.w	800b2d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b15e:	887a      	ldrh	r2, [r7, #2]
 800b160:	88bb      	ldrh	r3, [r7, #4]
 800b162:	4619      	mov	r1, r3
 800b164:	2000      	movs	r0, #0
 800b166:	f000 f8d1 	bl	800b30c <pbuf_alloc_reference>
 800b16a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b16c:	e0bd      	b.n	800b2ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b16e:	2300      	movs	r3, #0
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b176:	88bb      	ldrh	r3, [r7, #4]
 800b178:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b17a:	200b      	movs	r0, #11
 800b17c:	f7ff fb9e 	bl	800a8bc <memp_malloc>
 800b180:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d109      	bne.n	800b19c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b188:	f7ff ff76 	bl	800b078 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b194:	f000 faa8 	bl	800b6e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	e0a7      	b.n	800b2ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b19c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b19e:	3303      	adds	r3, #3
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	f023 0303 	bic.w	r3, r3, #3
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	8b7a      	ldrh	r2, [r7, #26]
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	bf28      	it	cs
 800b1b4:	4613      	movcs	r3, r2
 800b1b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b1b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1ba:	3310      	adds	r3, #16
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	4413      	add	r3, r2
 800b1c0:	3303      	adds	r3, #3
 800b1c2:	f023 0303 	bic.w	r3, r3, #3
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	89f9      	ldrh	r1, [r7, #14]
 800b1ca:	8b7a      	ldrh	r2, [r7, #26]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	887b      	ldrh	r3, [r7, #2]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	6938      	ldr	r0, [r7, #16]
 800b1da:	f7ff ff77 	bl	800b0cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d006      	beq.n	800b1f8 <pbuf_alloc+0xd8>
 800b1ea:	4b42      	ldr	r3, [pc, #264]	; (800b2f4 <pbuf_alloc+0x1d4>)
 800b1ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1f0:	4941      	ldr	r1, [pc, #260]	; (800b2f8 <pbuf_alloc+0x1d8>)
 800b1f2:	4842      	ldr	r0, [pc, #264]	; (800b2fc <pbuf_alloc+0x1dc>)
 800b1f4:	f009 fd2c 	bl	8014c50 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b1f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1fa:	3303      	adds	r3, #3
 800b1fc:	f023 0303 	bic.w	r3, r3, #3
 800b200:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b204:	d106      	bne.n	800b214 <pbuf_alloc+0xf4>
 800b206:	4b3b      	ldr	r3, [pc, #236]	; (800b2f4 <pbuf_alloc+0x1d4>)
 800b208:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b20c:	493c      	ldr	r1, [pc, #240]	; (800b300 <pbuf_alloc+0x1e0>)
 800b20e:	483b      	ldr	r0, [pc, #236]	; (800b2fc <pbuf_alloc+0x1dc>)
 800b210:	f009 fd1e 	bl	8014c50 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	2b00      	cmp	r3, #0
 800b218:	d102      	bne.n	800b220 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
 800b21e:	e002      	b.n	800b226 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b22a:	8b7a      	ldrh	r2, [r7, #26]
 800b22c:	89fb      	ldrh	r3, [r7, #14]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b236:	8b7b      	ldrh	r3, [r7, #26]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d19e      	bne.n	800b17a <pbuf_alloc+0x5a>
      break;
 800b23c:	e055      	b.n	800b2ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b23e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b240:	3303      	adds	r3, #3
 800b242:	b29b      	uxth	r3, r3
 800b244:	f023 0303 	bic.w	r3, r3, #3
 800b248:	b29a      	uxth	r2, r3
 800b24a:	88bb      	ldrh	r3, [r7, #4]
 800b24c:	3303      	adds	r3, #3
 800b24e:	b29b      	uxth	r3, r3
 800b250:	f023 0303 	bic.w	r3, r3, #3
 800b254:	b29b      	uxth	r3, r3
 800b256:	4413      	add	r3, r2
 800b258:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b25a:	8b3b      	ldrh	r3, [r7, #24]
 800b25c:	3310      	adds	r3, #16
 800b25e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b260:	8b3a      	ldrh	r2, [r7, #24]
 800b262:	88bb      	ldrh	r3, [r7, #4]
 800b264:	3303      	adds	r3, #3
 800b266:	f023 0303 	bic.w	r3, r3, #3
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d306      	bcc.n	800b27c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b26e:	8afa      	ldrh	r2, [r7, #22]
 800b270:	88bb      	ldrh	r3, [r7, #4]
 800b272:	3303      	adds	r3, #3
 800b274:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b278:	429a      	cmp	r2, r3
 800b27a:	d201      	bcs.n	800b280 <pbuf_alloc+0x160>
        return NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	e035      	b.n	800b2ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b280:	8afb      	ldrh	r3, [r7, #22]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff f976 	bl	800a574 <mem_malloc>
 800b288:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <pbuf_alloc+0x174>
        return NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	e02b      	b.n	800b2ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b296:	3310      	adds	r3, #16
 800b298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29a:	4413      	add	r3, r2
 800b29c:	3303      	adds	r3, #3
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	88b9      	ldrh	r1, [r7, #4]
 800b2a6:	88ba      	ldrh	r2, [r7, #4]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	887b      	ldrh	r3, [r7, #2]
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b6:	f7ff ff09 	bl	800b0cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d010      	beq.n	800b2e8 <pbuf_alloc+0x1c8>
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <pbuf_alloc+0x1d4>)
 800b2c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b2cc:	490d      	ldr	r1, [pc, #52]	; (800b304 <pbuf_alloc+0x1e4>)
 800b2ce:	480b      	ldr	r0, [pc, #44]	; (800b2fc <pbuf_alloc+0x1dc>)
 800b2d0:	f009 fcbe 	bl	8014c50 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b2d4:	e008      	b.n	800b2e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b2d6:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <pbuf_alloc+0x1d4>)
 800b2d8:	f240 1227 	movw	r2, #295	; 0x127
 800b2dc:	490a      	ldr	r1, [pc, #40]	; (800b308 <pbuf_alloc+0x1e8>)
 800b2de:	4807      	ldr	r0, [pc, #28]	; (800b2fc <pbuf_alloc+0x1dc>)
 800b2e0:	f009 fcb6 	bl	8014c50 <iprintf>
      return NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e001      	b.n	800b2ec <pbuf_alloc+0x1cc>
      break;
 800b2e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3728      	adds	r7, #40	; 0x28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	08016a10 	.word	0x08016a10
 800b2f8:	08016a40 	.word	0x08016a40
 800b2fc:	08016a70 	.word	0x08016a70
 800b300:	08016a98 	.word	0x08016a98
 800b304:	08016acc 	.word	0x08016acc
 800b308:	08016af8 	.word	0x08016af8

0800b30c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af02      	add	r7, sp, #8
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	807b      	strh	r3, [r7, #2]
 800b318:	4613      	mov	r3, r2
 800b31a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b31c:	883b      	ldrh	r3, [r7, #0]
 800b31e:	2b41      	cmp	r3, #65	; 0x41
 800b320:	d009      	beq.n	800b336 <pbuf_alloc_reference+0x2a>
 800b322:	883b      	ldrh	r3, [r7, #0]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d006      	beq.n	800b336 <pbuf_alloc_reference+0x2a>
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <pbuf_alloc_reference+0x5c>)
 800b32a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b32e:	490f      	ldr	r1, [pc, #60]	; (800b36c <pbuf_alloc_reference+0x60>)
 800b330:	480f      	ldr	r0, [pc, #60]	; (800b370 <pbuf_alloc_reference+0x64>)
 800b332:	f009 fc8d 	bl	8014c50 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b336:	200a      	movs	r0, #10
 800b338:	f7ff fac0 	bl	800a8bc <memp_malloc>
 800b33c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	e00b      	b.n	800b360 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b348:	8879      	ldrh	r1, [r7, #2]
 800b34a:	887a      	ldrh	r2, [r7, #2]
 800b34c:	2300      	movs	r3, #0
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	883b      	ldrh	r3, [r7, #0]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	460b      	mov	r3, r1
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7ff feb7 	bl	800b0cc <pbuf_init_alloced_pbuf>
  return p;
 800b35e:	68fb      	ldr	r3, [r7, #12]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	08016a10 	.word	0x08016a10
 800b36c:	08016b14 	.word	0x08016b14
 800b370:	08016a70 	.word	0x08016a70

0800b374 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af02      	add	r7, sp, #8
 800b37a:	607b      	str	r3, [r7, #4]
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]
 800b380:	460b      	mov	r3, r1
 800b382:	81bb      	strh	r3, [r7, #12]
 800b384:	4613      	mov	r3, r2
 800b386:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b38c:	8a7b      	ldrh	r3, [r7, #18]
 800b38e:	3303      	adds	r3, #3
 800b390:	f023 0203 	bic.w	r2, r3, #3
 800b394:	89bb      	ldrh	r3, [r7, #12]
 800b396:	441a      	add	r2, r3
 800b398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d901      	bls.n	800b3a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e018      	b.n	800b3d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b3a8:	8a7b      	ldrh	r3, [r7, #18]
 800b3aa:	3303      	adds	r3, #3
 800b3ac:	f023 0303 	bic.w	r3, r3, #3
 800b3b0:	6a3a      	ldr	r2, [r7, #32]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
 800b3b6:	e001      	b.n	800b3bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	89b9      	ldrh	r1, [r7, #12]
 800b3c0:	89ba      	ldrh	r2, [r7, #12]
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	897b      	ldrh	r3, [r7, #10]
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	6979      	ldr	r1, [r7, #20]
 800b3ce:	f7ff fe7d 	bl	800b0cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b3d2:	687b      	ldr	r3, [r7, #4]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d106      	bne.n	800b3fc <pbuf_realloc+0x20>
 800b3ee:	4b3a      	ldr	r3, [pc, #232]	; (800b4d8 <pbuf_realloc+0xfc>)
 800b3f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b3f4:	4939      	ldr	r1, [pc, #228]	; (800b4dc <pbuf_realloc+0x100>)
 800b3f6:	483a      	ldr	r0, [pc, #232]	; (800b4e0 <pbuf_realloc+0x104>)
 800b3f8:	f009 fc2a 	bl	8014c50 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	891b      	ldrh	r3, [r3, #8]
 800b400:	887a      	ldrh	r2, [r7, #2]
 800b402:	429a      	cmp	r2, r3
 800b404:	d263      	bcs.n	800b4ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	891a      	ldrh	r2, [r3, #8]
 800b40a:	887b      	ldrh	r3, [r7, #2]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b410:	887b      	ldrh	r3, [r7, #2]
 800b412:	817b      	strh	r3, [r7, #10]
  q = p;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b418:	e018      	b.n	800b44c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	895b      	ldrh	r3, [r3, #10]
 800b41e:	897a      	ldrh	r2, [r7, #10]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	891a      	ldrh	r2, [r3, #8]
 800b428:	893b      	ldrh	r3, [r7, #8]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <pbuf_realloc+0x70>
 800b43e:	4b26      	ldr	r3, [pc, #152]	; (800b4d8 <pbuf_realloc+0xfc>)
 800b440:	f240 12af 	movw	r2, #431	; 0x1af
 800b444:	4927      	ldr	r1, [pc, #156]	; (800b4e4 <pbuf_realloc+0x108>)
 800b446:	4826      	ldr	r0, [pc, #152]	; (800b4e0 <pbuf_realloc+0x104>)
 800b448:	f009 fc02 	bl	8014c50 <iprintf>
  while (rem_len > q->len) {
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	895b      	ldrh	r3, [r3, #10]
 800b450:	897a      	ldrh	r2, [r7, #10]
 800b452:	429a      	cmp	r2, r3
 800b454:	d8e1      	bhi.n	800b41a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	7b1b      	ldrb	r3, [r3, #12]
 800b45a:	f003 030f 	and.w	r3, r3, #15
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d121      	bne.n	800b4a6 <pbuf_realloc+0xca>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	895b      	ldrh	r3, [r3, #10]
 800b466:	897a      	ldrh	r2, [r7, #10]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d01c      	beq.n	800b4a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	7b5b      	ldrb	r3, [r3, #13]
 800b470:	f003 0302 	and.w	r3, r3, #2
 800b474:	2b00      	cmp	r3, #0
 800b476:	d116      	bne.n	800b4a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	b29a      	uxth	r2, r3
 800b482:	897b      	ldrh	r3, [r7, #10]
 800b484:	4413      	add	r3, r2
 800b486:	b29b      	uxth	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f7fe ff68 	bl	800a360 <mem_trim>
 800b490:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d106      	bne.n	800b4a6 <pbuf_realloc+0xca>
 800b498:	4b0f      	ldr	r3, [pc, #60]	; (800b4d8 <pbuf_realloc+0xfc>)
 800b49a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b49e:	4912      	ldr	r1, [pc, #72]	; (800b4e8 <pbuf_realloc+0x10c>)
 800b4a0:	480f      	ldr	r0, [pc, #60]	; (800b4e0 <pbuf_realloc+0x104>)
 800b4a2:	f009 fbd5 	bl	8014c50 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	897a      	ldrh	r2, [r7, #10]
 800b4aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	895a      	ldrh	r2, [r3, #10]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d004      	beq.n	800b4c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 f911 	bl	800b6e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e000      	b.n	800b4d0 <pbuf_realloc+0xf4>
    return;
 800b4ce:	bf00      	nop

}
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	08016a10 	.word	0x08016a10
 800b4dc:	08016b28 	.word	0x08016b28
 800b4e0:	08016a70 	.word	0x08016a70
 800b4e4:	08016b40 	.word	0x08016b40
 800b4e8:	08016b58 	.word	0x08016b58

0800b4ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <pbuf_add_header_impl+0x22>
 800b500:	4b2b      	ldr	r3, [pc, #172]	; (800b5b0 <pbuf_add_header_impl+0xc4>)
 800b502:	f240 12df 	movw	r2, #479	; 0x1df
 800b506:	492b      	ldr	r1, [pc, #172]	; (800b5b4 <pbuf_add_header_impl+0xc8>)
 800b508:	482b      	ldr	r0, [pc, #172]	; (800b5b8 <pbuf_add_header_impl+0xcc>)
 800b50a:	f009 fba1 	bl	8014c50 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <pbuf_add_header_impl+0x30>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b51a:	d301      	bcc.n	800b520 <pbuf_add_header_impl+0x34>
    return 1;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e043      	b.n	800b5a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <pbuf_add_header_impl+0x3e>
    return 0;
 800b526:	2300      	movs	r3, #0
 800b528:	e03e      	b.n	800b5a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	891a      	ldrh	r2, [r3, #8]
 800b532:	8a7b      	ldrh	r3, [r7, #18]
 800b534:	4413      	add	r3, r2
 800b536:	b29b      	uxth	r3, r3
 800b538:	8a7a      	ldrh	r2, [r7, #18]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d901      	bls.n	800b542 <pbuf_add_header_impl+0x56>
    return 1;
 800b53e:	2301      	movs	r3, #1
 800b540:	e032      	b.n	800b5a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	7b1b      	ldrb	r3, [r3, #12]
 800b546:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b548:	8a3b      	ldrh	r3, [r7, #16]
 800b54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00c      	beq.n	800b56c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	425b      	negs	r3, r3
 800b55a:	4413      	add	r3, r2
 800b55c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3310      	adds	r3, #16
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	429a      	cmp	r2, r3
 800b566:	d20d      	bcs.n	800b584 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b568:	2301      	movs	r3, #1
 800b56a:	e01d      	b.n	800b5a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d006      	beq.n	800b580 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	425b      	negs	r3, r3
 800b57a:	4413      	add	r3, r2
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e001      	b.n	800b584 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b580:	2301      	movs	r3, #1
 800b582:	e011      	b.n	800b5a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	895a      	ldrh	r2, [r3, #10]
 800b58e:	8a7b      	ldrh	r3, [r7, #18]
 800b590:	4413      	add	r3, r2
 800b592:	b29a      	uxth	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	891a      	ldrh	r2, [r3, #8]
 800b59c:	8a7b      	ldrh	r3, [r7, #18]
 800b59e:	4413      	add	r3, r2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	08016a10 	.word	0x08016a10
 800b5b4:	08016b74 	.word	0x08016b74
 800b5b8:	08016a70 	.word	0x08016a70

0800b5bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff ff8e 	bl	800b4ec <pbuf_add_header_impl>
 800b5d0:	4603      	mov	r3, r0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <pbuf_remove_header+0x1e>
 800b5ec:	4b20      	ldr	r3, [pc, #128]	; (800b670 <pbuf_remove_header+0x94>)
 800b5ee:	f240 224b 	movw	r2, #587	; 0x24b
 800b5f2:	4920      	ldr	r1, [pc, #128]	; (800b674 <pbuf_remove_header+0x98>)
 800b5f4:	4820      	ldr	r0, [pc, #128]	; (800b678 <pbuf_remove_header+0x9c>)
 800b5f6:	f009 fb2b 	bl	8014c50 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <pbuf_remove_header+0x2c>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b606:	d301      	bcc.n	800b60c <pbuf_remove_header+0x30>
    return 1;
 800b608:	2301      	movs	r3, #1
 800b60a:	e02c      	b.n	800b666 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <pbuf_remove_header+0x3a>
    return 0;
 800b612:	2300      	movs	r3, #0
 800b614:	e027      	b.n	800b666 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	895b      	ldrh	r3, [r3, #10]
 800b61e:	89fa      	ldrh	r2, [r7, #14]
 800b620:	429a      	cmp	r2, r3
 800b622:	d908      	bls.n	800b636 <pbuf_remove_header+0x5a>
 800b624:	4b12      	ldr	r3, [pc, #72]	; (800b670 <pbuf_remove_header+0x94>)
 800b626:	f240 2255 	movw	r2, #597	; 0x255
 800b62a:	4914      	ldr	r1, [pc, #80]	; (800b67c <pbuf_remove_header+0xa0>)
 800b62c:	4812      	ldr	r0, [pc, #72]	; (800b678 <pbuf_remove_header+0x9c>)
 800b62e:	f009 fb0f 	bl	8014c50 <iprintf>
 800b632:	2301      	movs	r3, #1
 800b634:	e017      	b.n	800b666 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	441a      	add	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	895a      	ldrh	r2, [r3, #10]
 800b64c:	89fb      	ldrh	r3, [r7, #14]
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	891a      	ldrh	r2, [r3, #8]
 800b65a:	89fb      	ldrh	r3, [r7, #14]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	b29a      	uxth	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	08016a10 	.word	0x08016a10
 800b674:	08016b74 	.word	0x08016b74
 800b678:	08016a70 	.word	0x08016a70
 800b67c:	08016b80 	.word	0x08016b80

0800b680 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	807b      	strh	r3, [r7, #2]
 800b68c:	4613      	mov	r3, r2
 800b68e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b690:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b694:	2b00      	cmp	r3, #0
 800b696:	da08      	bge.n	800b6aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b69c:	425b      	negs	r3, r3
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ff9b 	bl	800b5dc <pbuf_remove_header>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	e007      	b.n	800b6ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b6aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6ae:	787a      	ldrb	r2, [r7, #1]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff ff1a 	bl	800b4ec <pbuf_add_header_impl>
 800b6b8:	4603      	mov	r3, r0
  }
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b6ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff ffd2 	bl	800b680 <pbuf_header_impl>
 800b6dc:	4603      	mov	r3, r0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10b      	bne.n	800b70e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <pbuf_free+0x22>
 800b6fc:	4b3b      	ldr	r3, [pc, #236]	; (800b7ec <pbuf_free+0x104>)
 800b6fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b702:	493b      	ldr	r1, [pc, #236]	; (800b7f0 <pbuf_free+0x108>)
 800b704:	483b      	ldr	r0, [pc, #236]	; (800b7f4 <pbuf_free+0x10c>)
 800b706:	f009 faa3 	bl	8014c50 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e069      	b.n	800b7e2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b712:	e062      	b.n	800b7da <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b714:	f009 f8a6 	bl	8014864 <sys_arch_protect>
 800b718:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	7b9b      	ldrb	r3, [r3, #14]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <pbuf_free+0x48>
 800b722:	4b32      	ldr	r3, [pc, #200]	; (800b7ec <pbuf_free+0x104>)
 800b724:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b728:	4933      	ldr	r1, [pc, #204]	; (800b7f8 <pbuf_free+0x110>)
 800b72a:	4832      	ldr	r0, [pc, #200]	; (800b7f4 <pbuf_free+0x10c>)
 800b72c:	f009 fa90 	bl	8014c50 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7b9b      	ldrb	r3, [r3, #14]
 800b734:	3b01      	subs	r3, #1
 800b736:	b2da      	uxtb	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	739a      	strb	r2, [r3, #14]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	7b9b      	ldrb	r3, [r3, #14]
 800b740:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b742:	69b8      	ldr	r0, [r7, #24]
 800b744:	f009 f89c 	bl	8014880 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d143      	bne.n	800b7d6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7b1b      	ldrb	r3, [r3, #12]
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	7b5b      	ldrb	r3, [r3, #13]
 800b762:	f003 0302 	and.w	r3, r3, #2
 800b766:	2b00      	cmp	r3, #0
 800b768:	d011      	beq.n	800b78e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <pbuf_free+0x9c>
 800b776:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <pbuf_free+0x104>)
 800b778:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b77c:	491f      	ldr	r1, [pc, #124]	; (800b7fc <pbuf_free+0x114>)
 800b77e:	481d      	ldr	r0, [pc, #116]	; (800b7f4 <pbuf_free+0x10c>)
 800b780:	f009 fa66 	bl	8014c50 <iprintf>
        pc->custom_free_function(p);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	4798      	blx	r3
 800b78c:	e01d      	b.n	800b7ca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d104      	bne.n	800b79e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b794:	6879      	ldr	r1, [r7, #4]
 800b796:	200b      	movs	r0, #11
 800b798:	f7ff f906 	bl	800a9a8 <memp_free>
 800b79c:	e015      	b.n	800b7ca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d104      	bne.n	800b7ae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	200a      	movs	r0, #10
 800b7a8:	f7ff f8fe 	bl	800a9a8 <memp_free>
 800b7ac:	e00d      	b.n	800b7ca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d103      	bne.n	800b7bc <pbuf_free+0xd4>
          mem_free(p);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7fe fd43 	bl	800a240 <mem_free>
 800b7ba:	e006      	b.n	800b7ca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <pbuf_free+0x104>)
 800b7be:	f240 320f 	movw	r2, #783	; 0x30f
 800b7c2:	490f      	ldr	r1, [pc, #60]	; (800b800 <pbuf_free+0x118>)
 800b7c4:	480b      	ldr	r0, [pc, #44]	; (800b7f4 <pbuf_free+0x10c>)
 800b7c6:	f009 fa43 	bl	8014c50 <iprintf>
        }
      }
      count++;
 800b7ca:	7ffb      	ldrb	r3, [r7, #31]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	607b      	str	r3, [r7, #4]
 800b7d4:	e001      	b.n	800b7da <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d199      	bne.n	800b714 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b7e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	08016a10 	.word	0x08016a10
 800b7f0:	08016b74 	.word	0x08016b74
 800b7f4:	08016a70 	.word	0x08016a70
 800b7f8:	08016ba0 	.word	0x08016ba0
 800b7fc:	08016bb8 	.word	0x08016bb8
 800b800:	08016bdc 	.word	0x08016bdc

0800b804 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b810:	e005      	b.n	800b81e <pbuf_clen+0x1a>
    ++len;
 800b812:	89fb      	ldrh	r3, [r7, #14]
 800b814:	3301      	adds	r3, #1
 800b816:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f6      	bne.n	800b812 <pbuf_clen+0xe>
  }
  return len;
 800b824:	89fb      	ldrh	r3, [r7, #14]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
	...

0800b834 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d016      	beq.n	800b870 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b842:	f009 f80f 	bl	8014864 <sys_arch_protect>
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7b9b      	ldrb	r3, [r3, #14]
 800b84c:	3301      	adds	r3, #1
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	739a      	strb	r2, [r3, #14]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f009 f813 	bl	8014880 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	7b9b      	ldrb	r3, [r3, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <pbuf_ref+0x3c>
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <pbuf_ref+0x44>)
 800b864:	f240 3242 	movw	r2, #834	; 0x342
 800b868:	4904      	ldr	r1, [pc, #16]	; (800b87c <pbuf_ref+0x48>)
 800b86a:	4805      	ldr	r0, [pc, #20]	; (800b880 <pbuf_ref+0x4c>)
 800b86c:	f009 f9f0 	bl	8014c50 <iprintf>
  }
}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	08016a10 	.word	0x08016a10
 800b87c:	08016bf0 	.word	0x08016bf0
 800b880:	08016a70 	.word	0x08016a70

0800b884 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <pbuf_cat+0x16>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d107      	bne.n	800b8aa <pbuf_cat+0x26>
 800b89a:	4b20      	ldr	r3, [pc, #128]	; (800b91c <pbuf_cat+0x98>)
 800b89c:	f240 3259 	movw	r2, #857	; 0x359
 800b8a0:	491f      	ldr	r1, [pc, #124]	; (800b920 <pbuf_cat+0x9c>)
 800b8a2:	4820      	ldr	r0, [pc, #128]	; (800b924 <pbuf_cat+0xa0>)
 800b8a4:	f009 f9d4 	bl	8014c50 <iprintf>
 800b8a8:	e034      	b.n	800b914 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	e00a      	b.n	800b8c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	891a      	ldrh	r2, [r3, #8]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	891b      	ldrh	r3, [r3, #8]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f0      	bne.n	800b8b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	891a      	ldrh	r2, [r3, #8]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	895b      	ldrh	r3, [r3, #10]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d006      	beq.n	800b8e8 <pbuf_cat+0x64>
 800b8da:	4b10      	ldr	r3, [pc, #64]	; (800b91c <pbuf_cat+0x98>)
 800b8dc:	f240 3262 	movw	r2, #866	; 0x362
 800b8e0:	4911      	ldr	r1, [pc, #68]	; (800b928 <pbuf_cat+0xa4>)
 800b8e2:	4810      	ldr	r0, [pc, #64]	; (800b924 <pbuf_cat+0xa0>)
 800b8e4:	f009 f9b4 	bl	8014c50 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d006      	beq.n	800b8fe <pbuf_cat+0x7a>
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <pbuf_cat+0x98>)
 800b8f2:	f240 3263 	movw	r2, #867	; 0x363
 800b8f6:	490d      	ldr	r1, [pc, #52]	; (800b92c <pbuf_cat+0xa8>)
 800b8f8:	480a      	ldr	r0, [pc, #40]	; (800b924 <pbuf_cat+0xa0>)
 800b8fa:	f009 f9a9 	bl	8014c50 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	891a      	ldrh	r2, [r3, #8]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	891b      	ldrh	r3, [r3, #8]
 800b906:	4413      	add	r3, r2
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	08016a10 	.word	0x08016a10
 800b920:	08016c04 	.word	0x08016c04
 800b924:	08016a70 	.word	0x08016a70
 800b928:	08016c3c 	.word	0x08016c3c
 800b92c:	08016c6c 	.word	0x08016c6c

0800b930 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b93a:	2300      	movs	r3, #0
 800b93c:	617b      	str	r3, [r7, #20]
 800b93e:	2300      	movs	r3, #0
 800b940:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d008      	beq.n	800b95a <pbuf_copy+0x2a>
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <pbuf_copy+0x2a>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	891a      	ldrh	r2, [r3, #8]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	891b      	ldrh	r3, [r3, #8]
 800b956:	429a      	cmp	r2, r3
 800b958:	d209      	bcs.n	800b96e <pbuf_copy+0x3e>
 800b95a:	4b57      	ldr	r3, [pc, #348]	; (800bab8 <pbuf_copy+0x188>)
 800b95c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b960:	4956      	ldr	r1, [pc, #344]	; (800babc <pbuf_copy+0x18c>)
 800b962:	4857      	ldr	r0, [pc, #348]	; (800bac0 <pbuf_copy+0x190>)
 800b964:	f009 f974 	bl	8014c50 <iprintf>
 800b968:	f06f 030f 	mvn.w	r3, #15
 800b96c:	e09f      	b.n	800baae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	895b      	ldrh	r3, [r3, #10]
 800b972:	461a      	mov	r2, r3
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	1ad2      	subs	r2, r2, r3
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	895b      	ldrh	r3, [r3, #10]
 800b97c:	4619      	mov	r1, r3
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	1acb      	subs	r3, r1, r3
 800b982:	429a      	cmp	r2, r3
 800b984:	d306      	bcc.n	800b994 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	895b      	ldrh	r3, [r3, #10]
 800b98a:	461a      	mov	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	e005      	b.n	800b9a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	895b      	ldrh	r3, [r3, #10]
 800b998:	461a      	mov	r2, r3
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	18d0      	adds	r0, r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f009 f8a1 	bl	8014afa <memcpy>
    offset_to += len;
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4413      	add	r3, r2
 800b9be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	895b      	ldrh	r3, [r3, #10]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d906      	bls.n	800b9e2 <pbuf_copy+0xb2>
 800b9d4:	4b38      	ldr	r3, [pc, #224]	; (800bab8 <pbuf_copy+0x188>)
 800b9d6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b9da:	493a      	ldr	r1, [pc, #232]	; (800bac4 <pbuf_copy+0x194>)
 800b9dc:	4838      	ldr	r0, [pc, #224]	; (800bac0 <pbuf_copy+0x190>)
 800b9de:	f009 f937 	bl	8014c50 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	895b      	ldrh	r3, [r3, #10]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d906      	bls.n	800b9fc <pbuf_copy+0xcc>
 800b9ee:	4b32      	ldr	r3, [pc, #200]	; (800bab8 <pbuf_copy+0x188>)
 800b9f0:	f240 32da 	movw	r2, #986	; 0x3da
 800b9f4:	4934      	ldr	r1, [pc, #208]	; (800bac8 <pbuf_copy+0x198>)
 800b9f6:	4832      	ldr	r0, [pc, #200]	; (800bac0 <pbuf_copy+0x190>)
 800b9f8:	f009 f92a 	bl	8014c50 <iprintf>
    if (offset_from >= p_from->len) {
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	895b      	ldrh	r3, [r3, #10]
 800ba00:	461a      	mov	r2, r3
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d304      	bcc.n	800ba12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	895b      	ldrh	r3, [r3, #10]
 800ba16:	461a      	mov	r2, r3
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d114      	bne.n	800ba48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10c      	bne.n	800ba48 <pbuf_copy+0x118>
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d009      	beq.n	800ba48 <pbuf_copy+0x118>
 800ba34:	4b20      	ldr	r3, [pc, #128]	; (800bab8 <pbuf_copy+0x188>)
 800ba36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ba3a:	4924      	ldr	r1, [pc, #144]	; (800bacc <pbuf_copy+0x19c>)
 800ba3c:	4820      	ldr	r0, [pc, #128]	; (800bac0 <pbuf_copy+0x190>)
 800ba3e:	f009 f907 	bl	8014c50 <iprintf>
 800ba42:	f06f 030f 	mvn.w	r3, #15
 800ba46:	e032      	b.n	800baae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d013      	beq.n	800ba76 <pbuf_copy+0x146>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	895a      	ldrh	r2, [r3, #10]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	891b      	ldrh	r3, [r3, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d10d      	bne.n	800ba76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d009      	beq.n	800ba76 <pbuf_copy+0x146>
 800ba62:	4b15      	ldr	r3, [pc, #84]	; (800bab8 <pbuf_copy+0x188>)
 800ba64:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ba68:	4919      	ldr	r1, [pc, #100]	; (800bad0 <pbuf_copy+0x1a0>)
 800ba6a:	4815      	ldr	r0, [pc, #84]	; (800bac0 <pbuf_copy+0x190>)
 800ba6c:	f009 f8f0 	bl	8014c50 <iprintf>
 800ba70:	f06f 0305 	mvn.w	r3, #5
 800ba74:	e01b      	b.n	800baae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d013      	beq.n	800baa4 <pbuf_copy+0x174>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	895a      	ldrh	r2, [r3, #10]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	891b      	ldrh	r3, [r3, #8]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d10d      	bne.n	800baa4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d009      	beq.n	800baa4 <pbuf_copy+0x174>
 800ba90:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <pbuf_copy+0x188>)
 800ba92:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ba96:	490e      	ldr	r1, [pc, #56]	; (800bad0 <pbuf_copy+0x1a0>)
 800ba98:	4809      	ldr	r0, [pc, #36]	; (800bac0 <pbuf_copy+0x190>)
 800ba9a:	f009 f8d9 	bl	8014c50 <iprintf>
 800ba9e:	f06f 0305 	mvn.w	r3, #5
 800baa2:	e004      	b.n	800baae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f47f af61 	bne.w	800b96e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	08016a10 	.word	0x08016a10
 800babc:	08016cb8 	.word	0x08016cb8
 800bac0:	08016a70 	.word	0x08016a70
 800bac4:	08016ce8 	.word	0x08016ce8
 800bac8:	08016d00 	.word	0x08016d00
 800bacc:	08016d1c 	.word	0x08016d1c
 800bad0:	08016d2c 	.word	0x08016d2c

0800bad4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4611      	mov	r1, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	460b      	mov	r3, r1
 800bae4:	80fb      	strh	r3, [r7, #6]
 800bae6:	4613      	mov	r3, r2
 800bae8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d108      	bne.n	800bb0a <pbuf_copy_partial+0x36>
 800baf8:	4b2b      	ldr	r3, [pc, #172]	; (800bba8 <pbuf_copy_partial+0xd4>)
 800bafa:	f240 420a 	movw	r2, #1034	; 0x40a
 800bafe:	492b      	ldr	r1, [pc, #172]	; (800bbac <pbuf_copy_partial+0xd8>)
 800bb00:	482b      	ldr	r0, [pc, #172]	; (800bbb0 <pbuf_copy_partial+0xdc>)
 800bb02:	f009 f8a5 	bl	8014c50 <iprintf>
 800bb06:	2300      	movs	r3, #0
 800bb08:	e04a      	b.n	800bba0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d108      	bne.n	800bb22 <pbuf_copy_partial+0x4e>
 800bb10:	4b25      	ldr	r3, [pc, #148]	; (800bba8 <pbuf_copy_partial+0xd4>)
 800bb12:	f240 420b 	movw	r2, #1035	; 0x40b
 800bb16:	4927      	ldr	r1, [pc, #156]	; (800bbb4 <pbuf_copy_partial+0xe0>)
 800bb18:	4825      	ldr	r0, [pc, #148]	; (800bbb0 <pbuf_copy_partial+0xdc>)
 800bb1a:	f009 f899 	bl	8014c50 <iprintf>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e03e      	b.n	800bba0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	61fb      	str	r3, [r7, #28]
 800bb26:	e034      	b.n	800bb92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bb28:	88bb      	ldrh	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <pbuf_copy_partial+0x70>
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	895b      	ldrh	r3, [r3, #10]
 800bb32:	88ba      	ldrh	r2, [r7, #4]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d305      	bcc.n	800bb44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	895b      	ldrh	r3, [r3, #10]
 800bb3c:	88ba      	ldrh	r2, [r7, #4]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	80bb      	strh	r3, [r7, #4]
 800bb42:	e023      	b.n	800bb8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	895a      	ldrh	r2, [r3, #10]
 800bb48:	88bb      	ldrh	r3, [r7, #4]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bb4e:	8b3a      	ldrh	r2, [r7, #24]
 800bb50:	88fb      	ldrh	r3, [r7, #6]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d901      	bls.n	800bb5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bb56:	88fb      	ldrh	r3, [r7, #6]
 800bb58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bb5a:	8b7b      	ldrh	r3, [r7, #26]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	18d0      	adds	r0, r2, r3
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	88bb      	ldrh	r3, [r7, #4]
 800bb66:	4413      	add	r3, r2
 800bb68:	8b3a      	ldrh	r2, [r7, #24]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	f008 ffc5 	bl	8014afa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bb70:	8afa      	ldrh	r2, [r7, #22]
 800bb72:	8b3b      	ldrh	r3, [r7, #24]
 800bb74:	4413      	add	r3, r2
 800bb76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bb78:	8b7a      	ldrh	r2, [r7, #26]
 800bb7a:	8b3b      	ldrh	r3, [r7, #24]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bb80:	88fa      	ldrh	r2, [r7, #6]
 800bb82:	8b3b      	ldrh	r3, [r7, #24]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	61fb      	str	r3, [r7, #28]
 800bb92:	88fb      	ldrh	r3, [r7, #6]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <pbuf_copy_partial+0xca>
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1c4      	bne.n	800bb28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bb9e:	8afb      	ldrh	r3, [r7, #22]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	08016a10 	.word	0x08016a10
 800bbac:	08016d58 	.word	0x08016d58
 800bbb0:	08016a70 	.word	0x08016a70
 800bbb4:	08016d78 	.word	0x08016d78

0800bbb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	603a      	str	r2, [r7, #0]
 800bbc2:	71fb      	strb	r3, [r7, #7]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	8919      	ldrh	r1, [r3, #8]
 800bbcc:	88ba      	ldrh	r2, [r7, #4]
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff faa5 	bl	800b120 <pbuf_alloc>
 800bbd6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d101      	bne.n	800bbe2 <pbuf_clone+0x2a>
    return NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e011      	b.n	800bc06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff fea3 	bl	800b930 <pbuf_copy>
 800bbea:	4603      	mov	r3, r0
 800bbec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bbee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d006      	beq.n	800bc04 <pbuf_clone+0x4c>
 800bbf6:	4b06      	ldr	r3, [pc, #24]	; (800bc10 <pbuf_clone+0x58>)
 800bbf8:	f240 5224 	movw	r2, #1316	; 0x524
 800bbfc:	4905      	ldr	r1, [pc, #20]	; (800bc14 <pbuf_clone+0x5c>)
 800bbfe:	4806      	ldr	r0, [pc, #24]	; (800bc18 <pbuf_clone+0x60>)
 800bc00:	f009 f826 	bl	8014c50 <iprintf>
  return q;
 800bc04:	68fb      	ldr	r3, [r7, #12]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	08016a10 	.word	0x08016a10
 800bc14:	08016e84 	.word	0x08016e84
 800bc18:	08016a70 	.word	0x08016a70

0800bc1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bc20:	f009 f82e 	bl	8014c80 <rand>
 800bc24:	4603      	mov	r3, r0
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	4b01      	ldr	r3, [pc, #4]	; (800bc3c <tcp_init+0x20>)
 800bc36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bc38:	bf00      	nop
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	20000024 	.word	0x20000024

0800bc40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	7d1b      	ldrb	r3, [r3, #20]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d105      	bne.n	800bc5c <tcp_free+0x1c>
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <tcp_free+0x2c>)
 800bc52:	22d4      	movs	r2, #212	; 0xd4
 800bc54:	4906      	ldr	r1, [pc, #24]	; (800bc70 <tcp_free+0x30>)
 800bc56:	4807      	ldr	r0, [pc, #28]	; (800bc74 <tcp_free+0x34>)
 800bc58:	f008 fffa 	bl	8014c50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bc5c:	6879      	ldr	r1, [r7, #4]
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f7fe fea2 	bl	800a9a8 <memp_free>
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	08016f10 	.word	0x08016f10
 800bc70:	08016f40 	.word	0x08016f40
 800bc74:	08016f54 	.word	0x08016f54

0800bc78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7d1b      	ldrb	r3, [r3, #20]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d105      	bne.n	800bc94 <tcp_free_listen+0x1c>
 800bc88:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <tcp_free_listen+0x2c>)
 800bc8a:	22df      	movs	r2, #223	; 0xdf
 800bc8c:	4906      	ldr	r1, [pc, #24]	; (800bca8 <tcp_free_listen+0x30>)
 800bc8e:	4807      	ldr	r0, [pc, #28]	; (800bcac <tcp_free_listen+0x34>)
 800bc90:	f008 ffde 	bl	8014c50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	2001      	movs	r0, #1
 800bc98:	f7fe fe86 	bl	800a9a8 <memp_free>
}
 800bc9c:	bf00      	nop
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	08016f10 	.word	0x08016f10
 800bca8:	08016f7c 	.word	0x08016f7c
 800bcac:	08016f54 	.word	0x08016f54

0800bcb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bcb4:	f001 f8a6 	bl	800ce04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <tcp_tmr+0x28>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <tcp_tmr+0x28>)
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	4b04      	ldr	r3, [pc, #16]	; (800bcd8 <tcp_tmr+0x28>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bcd0:	f000 fd58 	bl	800c784 <tcp_slowtmr>
  }
}
 800bcd4:	bf00      	nop
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20011819 	.word	0x20011819

0800bcdc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d105      	bne.n	800bcf8 <tcp_remove_listener+0x1c>
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <tcp_remove_listener+0x48>)
 800bcee:	22ff      	movs	r2, #255	; 0xff
 800bcf0:	490d      	ldr	r1, [pc, #52]	; (800bd28 <tcp_remove_listener+0x4c>)
 800bcf2:	480e      	ldr	r0, [pc, #56]	; (800bd2c <tcp_remove_listener+0x50>)
 800bcf4:	f008 ffac 	bl	8014c50 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	e00a      	b.n	800bd14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d102      	bne.n	800bd0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1f1      	bne.n	800bcfe <tcp_remove_listener+0x22>
    }
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	08016f10 	.word	0x08016f10
 800bd28:	08016f98 	.word	0x08016f98
 800bd2c:	08016f54 	.word	0x08016f54

0800bd30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <tcp_listen_closed+0x1c>
 800bd3e:	4b14      	ldr	r3, [pc, #80]	; (800bd90 <tcp_listen_closed+0x60>)
 800bd40:	f240 1211 	movw	r2, #273	; 0x111
 800bd44:	4913      	ldr	r1, [pc, #76]	; (800bd94 <tcp_listen_closed+0x64>)
 800bd46:	4814      	ldr	r0, [pc, #80]	; (800bd98 <tcp_listen_closed+0x68>)
 800bd48:	f008 ff82 	bl	8014c50 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	7d1b      	ldrb	r3, [r3, #20]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d006      	beq.n	800bd62 <tcp_listen_closed+0x32>
 800bd54:	4b0e      	ldr	r3, [pc, #56]	; (800bd90 <tcp_listen_closed+0x60>)
 800bd56:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bd5a:	4910      	ldr	r1, [pc, #64]	; (800bd9c <tcp_listen_closed+0x6c>)
 800bd5c:	480e      	ldr	r0, [pc, #56]	; (800bd98 <tcp_listen_closed+0x68>)
 800bd5e:	f008 ff77 	bl	8014c50 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd62:	2301      	movs	r3, #1
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	e00b      	b.n	800bd80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bd68:	4a0d      	ldr	r2, [pc, #52]	; (800bda0 <tcp_listen_closed+0x70>)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7ff ffb1 	bl	800bcdc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d9f0      	bls.n	800bd68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bd86:	bf00      	nop
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	08016f10 	.word	0x08016f10
 800bd94:	08016fc0 	.word	0x08016fc0
 800bd98:	08016f54 	.word	0x08016f54
 800bd9c:	08016fcc 	.word	0x08016fcc
 800bda0:	08018c08 	.word	0x08018c08

0800bda4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bda4:	b5b0      	push	{r4, r5, r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af04      	add	r7, sp, #16
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <tcp_close_shutdown+0x20>
 800bdb6:	4b63      	ldr	r3, [pc, #396]	; (800bf44 <tcp_close_shutdown+0x1a0>)
 800bdb8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bdbc:	4962      	ldr	r1, [pc, #392]	; (800bf48 <tcp_close_shutdown+0x1a4>)
 800bdbe:	4863      	ldr	r0, [pc, #396]	; (800bf4c <tcp_close_shutdown+0x1a8>)
 800bdc0:	f008 ff46 	bl	8014c50 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bdc4:	78fb      	ldrb	r3, [r7, #3]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d066      	beq.n	800be98 <tcp_close_shutdown+0xf4>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	7d1b      	ldrb	r3, [r3, #20]
 800bdce:	2b04      	cmp	r3, #4
 800bdd0:	d003      	beq.n	800bdda <tcp_close_shutdown+0x36>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	7d1b      	ldrb	r3, [r3, #20]
 800bdd6:	2b07      	cmp	r3, #7
 800bdd8:	d15e      	bne.n	800be98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d104      	bne.n	800bdec <tcp_close_shutdown+0x48>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bde6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bdea:	d055      	beq.n	800be98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	8b5b      	ldrh	r3, [r3, #26]
 800bdf0:	f003 0310 	and.w	r3, r3, #16
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <tcp_close_shutdown+0x62>
 800bdf8:	4b52      	ldr	r3, [pc, #328]	; (800bf44 <tcp_close_shutdown+0x1a0>)
 800bdfa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bdfe:	4954      	ldr	r1, [pc, #336]	; (800bf50 <tcp_close_shutdown+0x1ac>)
 800be00:	4852      	ldr	r0, [pc, #328]	; (800bf4c <tcp_close_shutdown+0x1a8>)
 800be02:	f008 ff25 	bl	8014c50 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800be0e:	687d      	ldr	r5, [r7, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3304      	adds	r3, #4
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	8ad2      	ldrh	r2, [r2, #22]
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	8b09      	ldrh	r1, [r1, #24]
 800be1c:	9102      	str	r1, [sp, #8]
 800be1e:	9201      	str	r2, [sp, #4]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	462b      	mov	r3, r5
 800be24:	4622      	mov	r2, r4
 800be26:	4601      	mov	r1, r0
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f005 fdbb 	bl	80119a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 fb98 	bl	800d564 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800be34:	4b47      	ldr	r3, [pc, #284]	; (800bf54 <tcp_close_shutdown+0x1b0>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d105      	bne.n	800be4a <tcp_close_shutdown+0xa6>
 800be3e:	4b45      	ldr	r3, [pc, #276]	; (800bf54 <tcp_close_shutdown+0x1b0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	4a43      	ldr	r2, [pc, #268]	; (800bf54 <tcp_close_shutdown+0x1b0>)
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	e013      	b.n	800be72 <tcp_close_shutdown+0xce>
 800be4a:	4b42      	ldr	r3, [pc, #264]	; (800bf54 <tcp_close_shutdown+0x1b0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e00c      	b.n	800be6c <tcp_close_shutdown+0xc8>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d104      	bne.n	800be66 <tcp_close_shutdown+0xc2>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68da      	ldr	r2, [r3, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	60da      	str	r2, [r3, #12]
 800be64:	e005      	b.n	800be72 <tcp_close_shutdown+0xce>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1ef      	bne.n	800be52 <tcp_close_shutdown+0xae>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	60da      	str	r2, [r3, #12]
 800be78:	4b37      	ldr	r3, [pc, #220]	; (800bf58 <tcp_close_shutdown+0x1b4>)
 800be7a:	2201      	movs	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800be7e:	4b37      	ldr	r3, [pc, #220]	; (800bf5c <tcp_close_shutdown+0x1b8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	d102      	bne.n	800be8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800be88:	f004 f830 	bl	800feec <tcp_trigger_input_pcb_close>
 800be8c:	e002      	b.n	800be94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff fed6 	bl	800bc40 <tcp_free>
      }
      return ERR_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	e050      	b.n	800bf3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d03b      	beq.n	800bf18 <tcp_close_shutdown+0x174>
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	dc44      	bgt.n	800bf2e <tcp_close_shutdown+0x18a>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <tcp_close_shutdown+0x10a>
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d02a      	beq.n	800bf02 <tcp_close_shutdown+0x15e>
 800beac:	e03f      	b.n	800bf2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	8adb      	ldrh	r3, [r3, #22]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d021      	beq.n	800befa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800beb6:	4b2a      	ldr	r3, [pc, #168]	; (800bf60 <tcp_close_shutdown+0x1bc>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d105      	bne.n	800becc <tcp_close_shutdown+0x128>
 800bec0:	4b27      	ldr	r3, [pc, #156]	; (800bf60 <tcp_close_shutdown+0x1bc>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	4a26      	ldr	r2, [pc, #152]	; (800bf60 <tcp_close_shutdown+0x1bc>)
 800bec8:	6013      	str	r3, [r2, #0]
 800beca:	e013      	b.n	800bef4 <tcp_close_shutdown+0x150>
 800becc:	4b24      	ldr	r3, [pc, #144]	; (800bf60 <tcp_close_shutdown+0x1bc>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60bb      	str	r3, [r7, #8]
 800bed2:	e00c      	b.n	800beee <tcp_close_shutdown+0x14a>
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d104      	bne.n	800bee8 <tcp_close_shutdown+0x144>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	60da      	str	r2, [r3, #12]
 800bee6:	e005      	b.n	800bef4 <tcp_close_shutdown+0x150>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	60bb      	str	r3, [r7, #8]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1ef      	bne.n	800bed4 <tcp_close_shutdown+0x130>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fea0 	bl	800bc40 <tcp_free>
      break;
 800bf00:	e01a      	b.n	800bf38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff ff14 	bl	800bd30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4816      	ldr	r0, [pc, #88]	; (800bf64 <tcp_close_shutdown+0x1c0>)
 800bf0c:	f001 fb7a 	bl	800d604 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff feb1 	bl	800bc78 <tcp_free_listen>
      break;
 800bf16:	e00f      	b.n	800bf38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	480e      	ldr	r0, [pc, #56]	; (800bf54 <tcp_close_shutdown+0x1b0>)
 800bf1c:	f001 fb72 	bl	800d604 <tcp_pcb_remove>
 800bf20:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <tcp_close_shutdown+0x1b4>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fe8a 	bl	800bc40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bf2c:	e004      	b.n	800bf38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f81a 	bl	800bf68 <tcp_close_shutdown_fin>
 800bf34:	4603      	mov	r3, r0
 800bf36:	e000      	b.n	800bf3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bdb0      	pop	{r4, r5, r7, pc}
 800bf42:	bf00      	nop
 800bf44:	08016f10 	.word	0x08016f10
 800bf48:	08016fe4 	.word	0x08016fe4
 800bf4c:	08016f54 	.word	0x08016f54
 800bf50:	08017004 	.word	0x08017004
 800bf54:	20011810 	.word	0x20011810
 800bf58:	20011818 	.word	0x20011818
 800bf5c:	20011850 	.word	0x20011850
 800bf60:	20011808 	.word	0x20011808
 800bf64:	2001180c 	.word	0x2001180c

0800bf68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <tcp_close_shutdown_fin+0x1c>
 800bf76:	4b2e      	ldr	r3, [pc, #184]	; (800c030 <tcp_close_shutdown_fin+0xc8>)
 800bf78:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bf7c:	492d      	ldr	r1, [pc, #180]	; (800c034 <tcp_close_shutdown_fin+0xcc>)
 800bf7e:	482e      	ldr	r0, [pc, #184]	; (800c038 <tcp_close_shutdown_fin+0xd0>)
 800bf80:	f008 fe66 	bl	8014c50 <iprintf>

  switch (pcb->state) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7d1b      	ldrb	r3, [r3, #20]
 800bf88:	2b07      	cmp	r3, #7
 800bf8a:	d020      	beq.n	800bfce <tcp_close_shutdown_fin+0x66>
 800bf8c:	2b07      	cmp	r3, #7
 800bf8e:	dc2b      	bgt.n	800bfe8 <tcp_close_shutdown_fin+0x80>
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d002      	beq.n	800bf9a <tcp_close_shutdown_fin+0x32>
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d00d      	beq.n	800bfb4 <tcp_close_shutdown_fin+0x4c>
 800bf98:	e026      	b.n	800bfe8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f004 fe10 	bl	8010bc0 <tcp_send_fin>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d11f      	bne.n	800bfec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2205      	movs	r2, #5
 800bfb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfb2:	e01b      	b.n	800bfec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f004 fe03 	bl	8010bc0 <tcp_send_fin>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d114      	bne.n	800bff0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2205      	movs	r2, #5
 800bfca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfcc:	e010      	b.n	800bff0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f004 fdf6 	bl	8010bc0 <tcp_send_fin>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2209      	movs	r2, #9
 800bfe4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfe6:	e005      	b.n	800bff4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e01c      	b.n	800c026 <tcp_close_shutdown_fin+0xbe>
      break;
 800bfec:	bf00      	nop
 800bfee:	e002      	b.n	800bff6 <tcp_close_shutdown_fin+0x8e>
      break;
 800bff0:	bf00      	nop
 800bff2:	e000      	b.n	800bff6 <tcp_close_shutdown_fin+0x8e>
      break;
 800bff4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d103      	bne.n	800c006 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f004 ff1c 	bl	8010e3c <tcp_output>
 800c004:	e00d      	b.n	800c022 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c00e:	d108      	bne.n	800c022 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	8b5b      	ldrh	r3, [r3, #26]
 800c014:	f043 0308 	orr.w	r3, r3, #8
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	e001      	b.n	800c026 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	08016f10 	.word	0x08016f10
 800c034:	08016fc0 	.word	0x08016fc0
 800c038:	08016f54 	.word	0x08016f54

0800c03c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d109      	bne.n	800c05e <tcp_close+0x22>
 800c04a:	4b0f      	ldr	r3, [pc, #60]	; (800c088 <tcp_close+0x4c>)
 800c04c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c050:	490e      	ldr	r1, [pc, #56]	; (800c08c <tcp_close+0x50>)
 800c052:	480f      	ldr	r0, [pc, #60]	; (800c090 <tcp_close+0x54>)
 800c054:	f008 fdfc 	bl	8014c50 <iprintf>
 800c058:	f06f 030f 	mvn.w	r3, #15
 800c05c:	e00f      	b.n	800c07e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7d1b      	ldrb	r3, [r3, #20]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d006      	beq.n	800c074 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	8b5b      	ldrh	r3, [r3, #26]
 800c06a:	f043 0310 	orr.w	r3, r3, #16
 800c06e:	b29a      	uxth	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c074:	2101      	movs	r1, #1
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff fe94 	bl	800bda4 <tcp_close_shutdown>
 800c07c:	4603      	mov	r3, r0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	08016f10 	.word	0x08016f10
 800c08c:	08017020 	.word	0x08017020
 800c090:	08016f54 	.word	0x08016f54

0800c094 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d109      	bne.n	800c0ba <tcp_shutdown+0x26>
 800c0a6:	4b26      	ldr	r3, [pc, #152]	; (800c140 <tcp_shutdown+0xac>)
 800c0a8:	f240 2207 	movw	r2, #519	; 0x207
 800c0ac:	4925      	ldr	r1, [pc, #148]	; (800c144 <tcp_shutdown+0xb0>)
 800c0ae:	4826      	ldr	r0, [pc, #152]	; (800c148 <tcp_shutdown+0xb4>)
 800c0b0:	f008 fdce 	bl	8014c50 <iprintf>
 800c0b4:	f06f 030f 	mvn.w	r3, #15
 800c0b8:	e03d      	b.n	800c136 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	7d1b      	ldrb	r3, [r3, #20]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d102      	bne.n	800c0c8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c0c2:	f06f 030a 	mvn.w	r3, #10
 800c0c6:	e036      	b.n	800c136 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d01b      	beq.n	800c106 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8b5b      	ldrh	r3, [r3, #26]
 800c0d2:	f043 0310 	orr.w	r3, r3, #16
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d005      	beq.n	800c0ee <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7ff fe5d 	bl	800bda4 <tcp_close_shutdown>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	e023      	b.n	800c136 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d007      	beq.n	800c106 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff faf4 	bl	800b6e8 <pbuf_free>
      pcb->refused_data = NULL;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d013      	beq.n	800c134 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	7d1b      	ldrb	r3, [r3, #20]
 800c110:	2b04      	cmp	r3, #4
 800c112:	dc02      	bgt.n	800c11a <tcp_shutdown+0x86>
 800c114:	2b03      	cmp	r3, #3
 800c116:	da02      	bge.n	800c11e <tcp_shutdown+0x8a>
 800c118:	e009      	b.n	800c12e <tcp_shutdown+0x9a>
 800c11a:	2b07      	cmp	r3, #7
 800c11c:	d107      	bne.n	800c12e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	b2db      	uxtb	r3, r3
 800c122:	4619      	mov	r1, r3
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f7ff fe3d 	bl	800bda4 <tcp_close_shutdown>
 800c12a:	4603      	mov	r3, r0
 800c12c:	e003      	b.n	800c136 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c12e:	f06f 030a 	mvn.w	r3, #10
 800c132:	e000      	b.n	800c136 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	08016f10 	.word	0x08016f10
 800c144:	08017038 	.word	0x08017038
 800c148:	08016f54 	.word	0x08016f54

0800c14c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08e      	sub	sp, #56	; 0x38
 800c150:	af04      	add	r7, sp, #16
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d107      	bne.n	800c16c <tcp_abandon+0x20>
 800c15c:	4b52      	ldr	r3, [pc, #328]	; (800c2a8 <tcp_abandon+0x15c>)
 800c15e:	f240 223d 	movw	r2, #573	; 0x23d
 800c162:	4952      	ldr	r1, [pc, #328]	; (800c2ac <tcp_abandon+0x160>)
 800c164:	4852      	ldr	r0, [pc, #328]	; (800c2b0 <tcp_abandon+0x164>)
 800c166:	f008 fd73 	bl	8014c50 <iprintf>
 800c16a:	e099      	b.n	800c2a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	7d1b      	ldrb	r3, [r3, #20]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d106      	bne.n	800c182 <tcp_abandon+0x36>
 800c174:	4b4c      	ldr	r3, [pc, #304]	; (800c2a8 <tcp_abandon+0x15c>)
 800c176:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c17a:	494e      	ldr	r1, [pc, #312]	; (800c2b4 <tcp_abandon+0x168>)
 800c17c:	484c      	ldr	r0, [pc, #304]	; (800c2b0 <tcp_abandon+0x164>)
 800c17e:	f008 fd67 	bl	8014c50 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	7d1b      	ldrb	r3, [r3, #20]
 800c186:	2b0a      	cmp	r3, #10
 800c188:	d107      	bne.n	800c19a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	484a      	ldr	r0, [pc, #296]	; (800c2b8 <tcp_abandon+0x16c>)
 800c18e:	f001 fa39 	bl	800d604 <tcp_pcb_remove>
    tcp_free(pcb);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fd54 	bl	800bc40 <tcp_free>
 800c198:	e082      	b.n	800c2a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7d1b      	ldrb	r3, [r3, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d126      	bne.n	800c212 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8adb      	ldrh	r3, [r3, #22]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d02e      	beq.n	800c22a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1cc:	4b3b      	ldr	r3, [pc, #236]	; (800c2bc <tcp_abandon+0x170>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d105      	bne.n	800c1e2 <tcp_abandon+0x96>
 800c1d6:	4b39      	ldr	r3, [pc, #228]	; (800c2bc <tcp_abandon+0x170>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	4a37      	ldr	r2, [pc, #220]	; (800c2bc <tcp_abandon+0x170>)
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	e013      	b.n	800c20a <tcp_abandon+0xbe>
 800c1e2:	4b36      	ldr	r3, [pc, #216]	; (800c2bc <tcp_abandon+0x170>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	61fb      	str	r3, [r7, #28]
 800c1e8:	e00c      	b.n	800c204 <tcp_abandon+0xb8>
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d104      	bne.n	800c1fe <tcp_abandon+0xb2>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	60da      	str	r2, [r3, #12]
 800c1fc:	e005      	b.n	800c20a <tcp_abandon+0xbe>
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1ef      	bne.n	800c1ea <tcp_abandon+0x9e>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	60da      	str	r2, [r3, #12]
 800c210:	e00b      	b.n	800c22a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8adb      	ldrh	r3, [r3, #22]
 800c21a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c21c:	6879      	ldr	r1, [r7, #4]
 800c21e:	4828      	ldr	r0, [pc, #160]	; (800c2c0 <tcp_abandon+0x174>)
 800c220:	f001 f9f0 	bl	800d604 <tcp_pcb_remove>
 800c224:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <tcp_abandon+0x178>)
 800c226:	2201      	movs	r2, #1
 800c228:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c236:	4618      	mov	r0, r3
 800c238:	f000 fec4 	bl	800cfc4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d004      	beq.n	800c24e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 febb 	bl	800cfc4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c252:	2b00      	cmp	r3, #0
 800c254:	d004      	beq.n	800c260 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 feb2 	bl	800cfc4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00e      	beq.n	800c284 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3304      	adds	r3, #4
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	8b12      	ldrh	r2, [r2, #24]
 800c270:	9202      	str	r2, [sp, #8]
 800c272:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c274:	9201      	str	r2, [sp, #4]
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	460b      	mov	r3, r1
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	69b9      	ldr	r1, [r7, #24]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f005 fb90 	bl	80119a4 <tcp_rst>
    }
    last_state = pcb->state;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	7d1b      	ldrb	r3, [r3, #20]
 800c288:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fcd8 	bl	800bc40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d004      	beq.n	800c2a0 <tcp_abandon+0x154>
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	f06f 010c 	mvn.w	r1, #12
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	4798      	blx	r3
  }
}
 800c2a0:	3728      	adds	r7, #40	; 0x28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	08016f10 	.word	0x08016f10
 800c2ac:	08017054 	.word	0x08017054
 800c2b0:	08016f54 	.word	0x08016f54
 800c2b4:	08017070 	.word	0x08017070
 800c2b8:	20011814 	.word	0x20011814
 800c2bc:	20011808 	.word	0x20011808
 800c2c0:	20011810 	.word	0x20011810
 800c2c4:	20011818 	.word	0x20011818

0800c2c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff ff3a 	bl	800c14c <tcp_abandon>
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b088      	sub	sp, #32
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c2ee:	2304      	movs	r3, #4
 800c2f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c2f8:	4b3e      	ldr	r3, [pc, #248]	; (800c3f4 <tcp_bind+0x114>)
 800c2fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <tcp_bind+0x36>
 800c302:	4b3d      	ldr	r3, [pc, #244]	; (800c3f8 <tcp_bind+0x118>)
 800c304:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c308:	493c      	ldr	r1, [pc, #240]	; (800c3fc <tcp_bind+0x11c>)
 800c30a:	483d      	ldr	r0, [pc, #244]	; (800c400 <tcp_bind+0x120>)
 800c30c:	f008 fca0 	bl	8014c50 <iprintf>
 800c310:	f06f 030f 	mvn.w	r3, #15
 800c314:	e06a      	b.n	800c3ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	7d1b      	ldrb	r3, [r3, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d009      	beq.n	800c332 <tcp_bind+0x52>
 800c31e:	4b36      	ldr	r3, [pc, #216]	; (800c3f8 <tcp_bind+0x118>)
 800c320:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c324:	4937      	ldr	r1, [pc, #220]	; (800c404 <tcp_bind+0x124>)
 800c326:	4836      	ldr	r0, [pc, #216]	; (800c400 <tcp_bind+0x120>)
 800c328:	f008 fc92 	bl	8014c50 <iprintf>
 800c32c:	f06f 0305 	mvn.w	r3, #5
 800c330:	e05c      	b.n	800c3ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c332:	88fb      	ldrh	r3, [r7, #6]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d109      	bne.n	800c34c <tcp_bind+0x6c>
    port = tcp_new_port();
 800c338:	f000 f9de 	bl	800c6f8 <tcp_new_port>
 800c33c:	4603      	mov	r3, r0
 800c33e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c340:	88fb      	ldrh	r3, [r7, #6]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d135      	bne.n	800c3b2 <tcp_bind+0xd2>
      return ERR_BUF;
 800c346:	f06f 0301 	mvn.w	r3, #1
 800c34a:	e04f      	b.n	800c3ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c34c:	2300      	movs	r3, #0
 800c34e:	61fb      	str	r3, [r7, #28]
 800c350:	e02b      	b.n	800c3aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c352:	4a2d      	ldr	r2, [pc, #180]	; (800c408 <tcp_bind+0x128>)
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	61bb      	str	r3, [r7, #24]
 800c35e:	e01e      	b.n	800c39e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	8adb      	ldrh	r3, [r3, #22]
 800c364:	88fa      	ldrh	r2, [r7, #6]
 800c366:	429a      	cmp	r2, r3
 800c368:	d116      	bne.n	800c398 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c36a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d010      	beq.n	800c392 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00c      	beq.n	800c392 <tcp_bind+0xb2>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d009      	beq.n	800c392 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d005      	beq.n	800c392 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c38e:	429a      	cmp	r2, r3
 800c390:	d102      	bne.n	800c398 <tcp_bind+0xb8>
              return ERR_USE;
 800c392:	f06f 0307 	mvn.w	r3, #7
 800c396:	e029      	b.n	800c3ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1dd      	bne.n	800c360 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	dbcf      	blt.n	800c352 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <tcp_bind+0xf2>
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d008      	beq.n	800c3d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <tcp_bind+0xec>
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	e000      	b.n	800c3ce <tcp_bind+0xee>
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	88fa      	ldrh	r2, [r7, #6]
 800c3d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c3d8:	4b0c      	ldr	r3, [pc, #48]	; (800c40c <tcp_bind+0x12c>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	60da      	str	r2, [r3, #12]
 800c3e0:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <tcp_bind+0x12c>)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6013      	str	r3, [r2, #0]
 800c3e6:	f005 fc9f 	bl	8011d28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3720      	adds	r7, #32
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	08018c30 	.word	0x08018c30
 800c3f8:	08016f10 	.word	0x08016f10
 800c3fc:	080170a4 	.word	0x080170a4
 800c400:	08016f54 	.word	0x08016f54
 800c404:	080170bc 	.word	0x080170bc
 800c408:	08018c08 	.word	0x08018c08
 800c40c:	20011808 	.word	0x20011808

0800c410 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	4613      	mov	r3, r2
 800c41c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d106      	bne.n	800c432 <tcp_accept_null+0x22>
 800c424:	4b07      	ldr	r3, [pc, #28]	; (800c444 <tcp_accept_null+0x34>)
 800c426:	f240 320f 	movw	r2, #783	; 0x30f
 800c42a:	4907      	ldr	r1, [pc, #28]	; (800c448 <tcp_accept_null+0x38>)
 800c42c:	4807      	ldr	r0, [pc, #28]	; (800c44c <tcp_accept_null+0x3c>)
 800c42e:	f008 fc0f 	bl	8014c50 <iprintf>

  tcp_abort(pcb);
 800c432:	68b8      	ldr	r0, [r7, #8]
 800c434:	f7ff ff48 	bl	800c2c8 <tcp_abort>

  return ERR_ABRT;
 800c438:	f06f 030c 	mvn.w	r3, #12
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	08016f10 	.word	0x08016f10
 800c448:	080170e4 	.word	0x080170e4
 800c44c:	08016f54 	.word	0x08016f54

0800c450 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	460b      	mov	r3, r1
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c45e:	2300      	movs	r3, #0
 800c460:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <tcp_listen_with_backlog_and_err+0x2c>
 800c468:	4b47      	ldr	r3, [pc, #284]	; (800c588 <tcp_listen_with_backlog_and_err+0x138>)
 800c46a:	f240 3259 	movw	r2, #857	; 0x359
 800c46e:	4947      	ldr	r1, [pc, #284]	; (800c58c <tcp_listen_with_backlog_and_err+0x13c>)
 800c470:	4847      	ldr	r0, [pc, #284]	; (800c590 <tcp_listen_with_backlog_and_err+0x140>)
 800c472:	f008 fbed 	bl	8014c50 <iprintf>
 800c476:	23f0      	movs	r3, #240	; 0xf0
 800c478:	76fb      	strb	r3, [r7, #27]
 800c47a:	e079      	b.n	800c570 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	7d1b      	ldrb	r3, [r3, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <tcp_listen_with_backlog_and_err+0x48>
 800c484:	4b40      	ldr	r3, [pc, #256]	; (800c588 <tcp_listen_with_backlog_and_err+0x138>)
 800c486:	f240 325a 	movw	r2, #858	; 0x35a
 800c48a:	4942      	ldr	r1, [pc, #264]	; (800c594 <tcp_listen_with_backlog_and_err+0x144>)
 800c48c:	4840      	ldr	r0, [pc, #256]	; (800c590 <tcp_listen_with_backlog_and_err+0x140>)
 800c48e:	f008 fbdf 	bl	8014c50 <iprintf>
 800c492:	23f1      	movs	r3, #241	; 0xf1
 800c494:	76fb      	strb	r3, [r7, #27]
 800c496:	e06b      	b.n	800c570 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	7d1b      	ldrb	r3, [r3, #20]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d104      	bne.n	800c4aa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c4a4:	23f7      	movs	r3, #247	; 0xf7
 800c4a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c4a8:	e062      	b.n	800c570 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c4aa:	2001      	movs	r0, #1
 800c4ac:	f7fe fa06 	bl	800a8bc <memp_malloc>
 800c4b0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c4b8:	23ff      	movs	r3, #255	; 0xff
 800c4ba:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c4bc:	e058      	b.n	800c570 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	691a      	ldr	r2, [r3, #16]
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	8ada      	ldrh	r2, [r3, #22]
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	7d5a      	ldrb	r2, [r3, #21]
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	7a5a      	ldrb	r2, [r3, #9]
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	7ada      	ldrb	r2, [r3, #11]
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	7a9a      	ldrb	r2, [r3, #10]
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	8adb      	ldrh	r3, [r3, #22]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d021      	beq.n	800c54e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c50a:	4b23      	ldr	r3, [pc, #140]	; (800c598 <tcp_listen_with_backlog_and_err+0x148>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	429a      	cmp	r2, r3
 800c512:	d105      	bne.n	800c520 <tcp_listen_with_backlog_and_err+0xd0>
 800c514:	4b20      	ldr	r3, [pc, #128]	; (800c598 <tcp_listen_with_backlog_and_err+0x148>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <tcp_listen_with_backlog_and_err+0x148>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	e013      	b.n	800c548 <tcp_listen_with_backlog_and_err+0xf8>
 800c520:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <tcp_listen_with_backlog_and_err+0x148>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	617b      	str	r3, [r7, #20]
 800c526:	e00c      	b.n	800c542 <tcp_listen_with_backlog_and_err+0xf2>
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d104      	bne.n	800c53c <tcp_listen_with_backlog_and_err+0xec>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	60da      	str	r2, [r3, #12]
 800c53a:	e005      	b.n	800c548 <tcp_listen_with_backlog_and_err+0xf8>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1ef      	bne.n	800c528 <tcp_listen_with_backlog_and_err+0xd8>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff fb76 	bl	800bc40 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	4a11      	ldr	r2, [pc, #68]	; (800c59c <tcp_listen_with_backlog_and_err+0x14c>)
 800c558:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c55a:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <tcp_listen_with_backlog_and_err+0x150>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	60da      	str	r2, [r3, #12]
 800c562:	4a0f      	ldr	r2, [pc, #60]	; (800c5a0 <tcp_listen_with_backlog_and_err+0x150>)
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	f005 fbde 	bl	8011d28 <tcp_timer_needed>
  res = ERR_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7efa      	ldrb	r2, [r7, #27]
 800c57a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c57c:	69fb      	ldr	r3, [r7, #28]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3720      	adds	r7, #32
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	08016f10 	.word	0x08016f10
 800c58c:	08017104 	.word	0x08017104
 800c590:	08016f54 	.word	0x08016f54
 800c594:	08017134 	.word	0x08017134
 800c598:	20011808 	.word	0x20011808
 800c59c:	0800c411 	.word	0x0800c411
 800c5a0:	2001180c 	.word	0x2001180c

0800c5a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <tcp_update_rcv_ann_wnd+0x1c>
 800c5b2:	4b25      	ldr	r3, [pc, #148]	; (800c648 <tcp_update_rcv_ann_wnd+0xa4>)
 800c5b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c5b8:	4924      	ldr	r1, [pc, #144]	; (800c64c <tcp_update_rcv_ann_wnd+0xa8>)
 800c5ba:	4825      	ldr	r0, [pc, #148]	; (800c650 <tcp_update_rcv_ann_wnd+0xac>)
 800c5bc:	f008 fb48 	bl	8014c50 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c5c8:	4413      	add	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c5d4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c5d8:	bf28      	it	cs
 800c5da:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c5de:	b292      	uxth	r2, r2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	db08      	blt.n	800c5fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	e020      	b.n	800c63e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	dd03      	ble.n	800c612 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c610:	e014      	b.n	800c63c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c624:	d306      	bcc.n	800c634 <tcp_update_rcv_ann_wnd+0x90>
 800c626:	4b08      	ldr	r3, [pc, #32]	; (800c648 <tcp_update_rcv_ann_wnd+0xa4>)
 800c628:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c62c:	4909      	ldr	r1, [pc, #36]	; (800c654 <tcp_update_rcv_ann_wnd+0xb0>)
 800c62e:	4808      	ldr	r0, [pc, #32]	; (800c650 <tcp_update_rcv_ann_wnd+0xac>)
 800c630:	f008 fb0e 	bl	8014c50 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	b29a      	uxth	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c63c:	2300      	movs	r3, #0
  }
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	08016f10 	.word	0x08016f10
 800c64c:	0801716c 	.word	0x0801716c
 800c650:	08016f54 	.word	0x08016f54
 800c654:	08017190 	.word	0x08017190

0800c658 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	460b      	mov	r3, r1
 800c662:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d107      	bne.n	800c67a <tcp_recved+0x22>
 800c66a:	4b1f      	ldr	r3, [pc, #124]	; (800c6e8 <tcp_recved+0x90>)
 800c66c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c670:	491e      	ldr	r1, [pc, #120]	; (800c6ec <tcp_recved+0x94>)
 800c672:	481f      	ldr	r0, [pc, #124]	; (800c6f0 <tcp_recved+0x98>)
 800c674:	f008 faec 	bl	8014c50 <iprintf>
 800c678:	e032      	b.n	800c6e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	7d1b      	ldrb	r3, [r3, #20]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d106      	bne.n	800c690 <tcp_recved+0x38>
 800c682:	4b19      	ldr	r3, [pc, #100]	; (800c6e8 <tcp_recved+0x90>)
 800c684:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c688:	491a      	ldr	r1, [pc, #104]	; (800c6f4 <tcp_recved+0x9c>)
 800c68a:	4819      	ldr	r0, [pc, #100]	; (800c6f0 <tcp_recved+0x98>)
 800c68c:	f008 fae0 	bl	8014c50 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c694:	887b      	ldrh	r3, [r7, #2]
 800c696:	4413      	add	r3, r2
 800c698:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c69a:	89fb      	ldrh	r3, [r7, #14]
 800c69c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c6a0:	d804      	bhi.n	800c6ac <tcp_recved+0x54>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6a6:	89fa      	ldrh	r2, [r7, #14]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d204      	bcs.n	800c6b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c6b2:	851a      	strh	r2, [r3, #40]	; 0x28
 800c6b4:	e002      	b.n	800c6bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	89fa      	ldrh	r2, [r7, #14]
 800c6ba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f7ff ff71 	bl	800c5a4 <tcp_update_rcv_ann_wnd>
 800c6c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c6ca:	d309      	bcc.n	800c6e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8b5b      	ldrh	r3, [r3, #26]
 800c6d0:	f043 0302 	orr.w	r3, r3, #2
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f004 fbae 	bl	8010e3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	08016f10 	.word	0x08016f10
 800c6ec:	080171ac 	.word	0x080171ac
 800c6f0:	08016f54 	.word	0x08016f54
 800c6f4:	080171c4 	.word	0x080171c4

0800c6f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c702:	4b1e      	ldr	r3, [pc, #120]	; (800c77c <tcp_new_port+0x84>)
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	3301      	adds	r3, #1
 800c708:	b29a      	uxth	r2, r3
 800c70a:	4b1c      	ldr	r3, [pc, #112]	; (800c77c <tcp_new_port+0x84>)
 800c70c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c70e:	4b1b      	ldr	r3, [pc, #108]	; (800c77c <tcp_new_port+0x84>)
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c716:	4293      	cmp	r3, r2
 800c718:	d103      	bne.n	800c722 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c71a:	4b18      	ldr	r3, [pc, #96]	; (800c77c <tcp_new_port+0x84>)
 800c71c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c720:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c722:	2300      	movs	r3, #0
 800c724:	71fb      	strb	r3, [r7, #7]
 800c726:	e01e      	b.n	800c766 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c728:	79fb      	ldrb	r3, [r7, #7]
 800c72a:	4a15      	ldr	r2, [pc, #84]	; (800c780 <tcp_new_port+0x88>)
 800c72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	603b      	str	r3, [r7, #0]
 800c734:	e011      	b.n	800c75a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	8ada      	ldrh	r2, [r3, #22]
 800c73a:	4b10      	ldr	r3, [pc, #64]	; (800c77c <tcp_new_port+0x84>)
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d108      	bne.n	800c754 <tcp_new_port+0x5c>
        n++;
 800c742:	88bb      	ldrh	r3, [r7, #4]
 800c744:	3301      	adds	r3, #1
 800c746:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c748:	88bb      	ldrh	r3, [r7, #4]
 800c74a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c74e:	d3d8      	bcc.n	800c702 <tcp_new_port+0xa>
          return 0;
 800c750:	2300      	movs	r3, #0
 800c752:	e00d      	b.n	800c770 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	603b      	str	r3, [r7, #0]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1ea      	bne.n	800c736 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	3301      	adds	r3, #1
 800c764:	71fb      	strb	r3, [r7, #7]
 800c766:	79fb      	ldrb	r3, [r7, #7]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d9dd      	bls.n	800c728 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c76c:	4b03      	ldr	r3, [pc, #12]	; (800c77c <tcp_new_port+0x84>)
 800c76e:	881b      	ldrh	r3, [r3, #0]
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr
 800c77c:	20000024 	.word	0x20000024
 800c780:	08018c08 	.word	0x08018c08

0800c784 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c784:	b5b0      	push	{r4, r5, r7, lr}
 800c786:	b090      	sub	sp, #64	; 0x40
 800c788:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c790:	4b94      	ldr	r3, [pc, #592]	; (800c9e4 <tcp_slowtmr+0x260>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3301      	adds	r3, #1
 800c796:	4a93      	ldr	r2, [pc, #588]	; (800c9e4 <tcp_slowtmr+0x260>)
 800c798:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c79a:	4b93      	ldr	r3, [pc, #588]	; (800c9e8 <tcp_slowtmr+0x264>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	4b91      	ldr	r3, [pc, #580]	; (800c9e8 <tcp_slowtmr+0x264>)
 800c7a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c7aa:	4b90      	ldr	r3, [pc, #576]	; (800c9ec <tcp_slowtmr+0x268>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c7b0:	e29d      	b.n	800ccee <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	7d1b      	ldrb	r3, [r3, #20]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d106      	bne.n	800c7c8 <tcp_slowtmr+0x44>
 800c7ba:	4b8d      	ldr	r3, [pc, #564]	; (800c9f0 <tcp_slowtmr+0x26c>)
 800c7bc:	f240 42be 	movw	r2, #1214	; 0x4be
 800c7c0:	498c      	ldr	r1, [pc, #560]	; (800c9f4 <tcp_slowtmr+0x270>)
 800c7c2:	488d      	ldr	r0, [pc, #564]	; (800c9f8 <tcp_slowtmr+0x274>)
 800c7c4:	f008 fa44 	bl	8014c50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	7d1b      	ldrb	r3, [r3, #20]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d106      	bne.n	800c7de <tcp_slowtmr+0x5a>
 800c7d0:	4b87      	ldr	r3, [pc, #540]	; (800c9f0 <tcp_slowtmr+0x26c>)
 800c7d2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c7d6:	4989      	ldr	r1, [pc, #548]	; (800c9fc <tcp_slowtmr+0x278>)
 800c7d8:	4887      	ldr	r0, [pc, #540]	; (800c9f8 <tcp_slowtmr+0x274>)
 800c7da:	f008 fa39 	bl	8014c50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	7d1b      	ldrb	r3, [r3, #20]
 800c7e2:	2b0a      	cmp	r3, #10
 800c7e4:	d106      	bne.n	800c7f4 <tcp_slowtmr+0x70>
 800c7e6:	4b82      	ldr	r3, [pc, #520]	; (800c9f0 <tcp_slowtmr+0x26c>)
 800c7e8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c7ec:	4984      	ldr	r1, [pc, #528]	; (800ca00 <tcp_slowtmr+0x27c>)
 800c7ee:	4882      	ldr	r0, [pc, #520]	; (800c9f8 <tcp_slowtmr+0x274>)
 800c7f0:	f008 fa2e 	bl	8014c50 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	7f9a      	ldrb	r2, [r3, #30]
 800c7f8:	4b7b      	ldr	r3, [pc, #492]	; (800c9e8 <tcp_slowtmr+0x264>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d105      	bne.n	800c80c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c80a:	e270      	b.n	800ccee <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c80c:	4b76      	ldr	r3, [pc, #472]	; (800c9e8 <tcp_slowtmr+0x264>)
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	7d1b      	ldrb	r3, [r3, #20]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d10a      	bne.n	800c83e <tcp_slowtmr+0xba>
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c82e:	2b05      	cmp	r3, #5
 800c830:	d905      	bls.n	800c83e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c836:	3301      	adds	r3, #1
 800c838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c83c:	e11e      	b.n	800ca7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c844:	2b0b      	cmp	r3, #11
 800c846:	d905      	bls.n	800c854 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c84c:	3301      	adds	r3, #1
 800c84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c852:	e113      	b.n	800ca7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d075      	beq.n	800c94a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c862:	2b00      	cmp	r3, #0
 800c864:	d006      	beq.n	800c874 <tcp_slowtmr+0xf0>
 800c866:	4b62      	ldr	r3, [pc, #392]	; (800c9f0 <tcp_slowtmr+0x26c>)
 800c868:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c86c:	4965      	ldr	r1, [pc, #404]	; (800ca04 <tcp_slowtmr+0x280>)
 800c86e:	4862      	ldr	r0, [pc, #392]	; (800c9f8 <tcp_slowtmr+0x274>)
 800c870:	f008 f9ee 	bl	8014c50 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <tcp_slowtmr+0x106>
 800c87c:	4b5c      	ldr	r3, [pc, #368]	; (800c9f0 <tcp_slowtmr+0x26c>)
 800c87e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c882:	4961      	ldr	r1, [pc, #388]	; (800ca08 <tcp_slowtmr+0x284>)
 800c884:	485c      	ldr	r0, [pc, #368]	; (800c9f8 <tcp_slowtmr+0x274>)
 800c886:	f008 f9e3 	bl	8014c50 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c890:	2b0b      	cmp	r3, #11
 800c892:	d905      	bls.n	800c8a0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c898:	3301      	adds	r3, #1
 800c89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c89e:	e0ed      	b.n	800ca7c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	4a58      	ldr	r2, [pc, #352]	; (800ca0c <tcp_slowtmr+0x288>)
 800c8aa:	5cd3      	ldrb	r3, [r2, r3]
 800c8ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c8b4:	7c7a      	ldrb	r2, [r7, #17]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d907      	bls.n	800c8ca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c8d0:	7c7a      	ldrb	r2, [r7, #17]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	f200 80d2 	bhi.w	800ca7c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c8d8:	2301      	movs	r3, #1
 800c8da:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d108      	bne.n	800c8f8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c8e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8e8:	f005 f950 	bl	8011b8c <tcp_zero_window_probe>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d014      	beq.n	800c91c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	623b      	str	r3, [r7, #32]
 800c8f6:	e011      	b.n	800c91c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8fe:	4619      	mov	r1, r3
 800c900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c902:	f004 f815 	bl	8010930 <tcp_split_unsent_seg>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d107      	bne.n	800c91c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c90c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c90e:	f004 fa95 	bl	8010e3c <tcp_output>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 80ac 	beq.w	800ca7c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c932:	2b06      	cmp	r3, #6
 800c934:	f200 80a2 	bhi.w	800ca7c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c93e:	3301      	adds	r3, #1
 800c940:	b2da      	uxtb	r2, r3
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c948:	e098      	b.n	800ca7c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c950:	2b00      	cmp	r3, #0
 800c952:	db0f      	blt.n	800c974 <tcp_slowtmr+0x1f0>
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c95a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c95e:	4293      	cmp	r3, r2
 800c960:	d008      	beq.n	800c974 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c964:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c968:	b29b      	uxth	r3, r3
 800c96a:	3301      	adds	r3, #1
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	b21a      	sxth	r2, r3
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c980:	429a      	cmp	r2, r3
 800c982:	db7b      	blt.n	800ca7c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c986:	f004 fd4b 	bl	8011420 <tcp_rexmit_rto_prepare>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d007      	beq.n	800c9a0 <tcp_slowtmr+0x21c>
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c994:	2b00      	cmp	r3, #0
 800c996:	d171      	bne.n	800ca7c <tcp_slowtmr+0x2f8>
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d06d      	beq.n	800ca7c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a2:	7d1b      	ldrb	r3, [r3, #20]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d03a      	beq.n	800ca1e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ae:	2b0c      	cmp	r3, #12
 800c9b0:	bf28      	it	cs
 800c9b2:	230c      	movcs	r3, #12
 800c9b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9bc:	10db      	asrs	r3, r3, #3
 800c9be:	b21b      	sxth	r3, r3
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9c8:	4413      	add	r3, r2
 800c9ca:	7efa      	ldrb	r2, [r7, #27]
 800c9cc:	4910      	ldr	r1, [pc, #64]	; (800ca10 <tcp_slowtmr+0x28c>)
 800c9ce:	5c8a      	ldrb	r2, [r1, r2]
 800c9d0:	4093      	lsls	r3, r2
 800c9d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	dc1a      	bgt.n	800ca14 <tcp_slowtmr+0x290>
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	b21a      	sxth	r2, r3
 800c9e2:	e019      	b.n	800ca18 <tcp_slowtmr+0x294>
 800c9e4:	20011804 	.word	0x20011804
 800c9e8:	2001181a 	.word	0x2001181a
 800c9ec:	20011810 	.word	0x20011810
 800c9f0:	08016f10 	.word	0x08016f10
 800c9f4:	08017254 	.word	0x08017254
 800c9f8:	08016f54 	.word	0x08016f54
 800c9fc:	08017280 	.word	0x08017280
 800ca00:	080172ac 	.word	0x080172ac
 800ca04:	080172dc 	.word	0x080172dc
 800ca08:	08017310 	.word	0x08017310
 800ca0c:	08018c00 	.word	0x08018c00
 800ca10:	08018bf0 	.word	0x08018bf0
 800ca14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ca1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca20:	2200      	movs	r2, #0
 800ca22:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca30:	4293      	cmp	r3, r2
 800ca32:	bf28      	it	cs
 800ca34:	4613      	movcs	r3, r2
 800ca36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ca38:	8a7b      	ldrh	r3, [r7, #18]
 800ca3a:	085b      	lsrs	r3, r3, #1
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d206      	bcs.n	800ca64 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ca56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	2200      	movs	r2, #0
 800ca72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ca76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca78:	f004 fd42 	bl	8011500 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	7d1b      	ldrb	r3, [r3, #20]
 800ca80:	2b06      	cmp	r3, #6
 800ca82:	d111      	bne.n	800caa8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	8b5b      	ldrh	r3, [r3, #26]
 800ca88:	f003 0310 	and.w	r3, r3, #16
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00b      	beq.n	800caa8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca90:	4b9c      	ldr	r3, [pc, #624]	; (800cd04 <tcp_slowtmr+0x580>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	6a1b      	ldr	r3, [r3, #32]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	2b28      	cmp	r3, #40	; 0x28
 800ca9c:	d904      	bls.n	800caa8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ca9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa2:	3301      	adds	r3, #1
 800caa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	7a5b      	ldrb	r3, [r3, #9]
 800caac:	f003 0308 	and.w	r3, r3, #8
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d04a      	beq.n	800cb4a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cab8:	2b04      	cmp	r3, #4
 800caba:	d003      	beq.n	800cac4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cac0:	2b07      	cmp	r3, #7
 800cac2:	d142      	bne.n	800cb4a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cac4:	4b8f      	ldr	r3, [pc, #572]	; (800cd04 <tcp_slowtmr+0x580>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cad4:	4b8c      	ldr	r3, [pc, #560]	; (800cd08 <tcp_slowtmr+0x584>)
 800cad6:	440b      	add	r3, r1
 800cad8:	498c      	ldr	r1, [pc, #560]	; (800cd0c <tcp_slowtmr+0x588>)
 800cada:	fba1 1303 	umull	r1, r3, r1, r3
 800cade:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d90a      	bls.n	800cafa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae8:	3301      	adds	r3, #1
 800caea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800caee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caf2:	3301      	adds	r3, #1
 800caf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800caf8:	e027      	b.n	800cb4a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cafa:	4b82      	ldr	r3, [pc, #520]	; (800cd04 <tcp_slowtmr+0x580>)
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb10:	4618      	mov	r0, r3
 800cb12:	4b7f      	ldr	r3, [pc, #508]	; (800cd10 <tcp_slowtmr+0x58c>)
 800cb14:	fb00 f303 	mul.w	r3, r0, r3
 800cb18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cb1a:	497c      	ldr	r1, [pc, #496]	; (800cd0c <tcp_slowtmr+0x588>)
 800cb1c:	fba1 1303 	umull	r1, r3, r1, r3
 800cb20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d911      	bls.n	800cb4a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cb26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb28:	f004 fff0 	bl	8011b0c <tcp_keepalive>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cb32:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d107      	bne.n	800cb4a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb40:	3301      	adds	r3, #1
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d011      	beq.n	800cb76 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cb52:	4b6c      	ldr	r3, [pc, #432]	; (800cd04 <tcp_slowtmr+0x580>)
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	1ad2      	subs	r2, r2, r3
 800cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb62:	4619      	mov	r1, r3
 800cb64:	460b      	mov	r3, r1
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	440b      	add	r3, r1
 800cb6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d302      	bcc.n	800cb76 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cb70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb72:	f000 feab 	bl	800d8cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	7d1b      	ldrb	r3, [r3, #20]
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d10b      	bne.n	800cb96 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb7e:	4b61      	ldr	r3, [pc, #388]	; (800cd04 <tcp_slowtmr+0x580>)
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	6a1b      	ldr	r3, [r3, #32]
 800cb86:	1ad3      	subs	r3, r2, r3
 800cb88:	2b28      	cmp	r3, #40	; 0x28
 800cb8a:	d904      	bls.n	800cb96 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb90:	3301      	adds	r3, #1
 800cb92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb98:	7d1b      	ldrb	r3, [r3, #20]
 800cb9a:	2b09      	cmp	r3, #9
 800cb9c:	d10b      	bne.n	800cbb6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cb9e:	4b59      	ldr	r3, [pc, #356]	; (800cd04 <tcp_slowtmr+0x580>)
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	2bf0      	cmp	r3, #240	; 0xf0
 800cbaa:	d904      	bls.n	800cbb6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cbac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cbb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d060      	beq.n	800cc80 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cbc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbc8:	f000 fccc 	bl	800d564 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d010      	beq.n	800cbf4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cbd2:	4b50      	ldr	r3, [pc, #320]	; (800cd14 <tcp_slowtmr+0x590>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d106      	bne.n	800cbea <tcp_slowtmr+0x466>
 800cbdc:	4b4e      	ldr	r3, [pc, #312]	; (800cd18 <tcp_slowtmr+0x594>)
 800cbde:	f240 526d 	movw	r2, #1389	; 0x56d
 800cbe2:	494e      	ldr	r1, [pc, #312]	; (800cd1c <tcp_slowtmr+0x598>)
 800cbe4:	484e      	ldr	r0, [pc, #312]	; (800cd20 <tcp_slowtmr+0x59c>)
 800cbe6:	f008 f833 	bl	8014c50 <iprintf>
        prev->next = pcb->next;
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	68da      	ldr	r2, [r3, #12]
 800cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf0:	60da      	str	r2, [r3, #12]
 800cbf2:	e00f      	b.n	800cc14 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cbf4:	4b47      	ldr	r3, [pc, #284]	; (800cd14 <tcp_slowtmr+0x590>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d006      	beq.n	800cc0c <tcp_slowtmr+0x488>
 800cbfe:	4b46      	ldr	r3, [pc, #280]	; (800cd18 <tcp_slowtmr+0x594>)
 800cc00:	f240 5271 	movw	r2, #1393	; 0x571
 800cc04:	4947      	ldr	r1, [pc, #284]	; (800cd24 <tcp_slowtmr+0x5a0>)
 800cc06:	4846      	ldr	r0, [pc, #280]	; (800cd20 <tcp_slowtmr+0x59c>)
 800cc08:	f008 f822 	bl	8014c50 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	4a40      	ldr	r2, [pc, #256]	; (800cd14 <tcp_slowtmr+0x590>)
 800cc12:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cc14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d013      	beq.n	800cc44 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc24:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc28:	3304      	adds	r3, #4
 800cc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc2c:	8ad2      	ldrh	r2, [r2, #22]
 800cc2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc30:	8b09      	ldrh	r1, [r1, #24]
 800cc32:	9102      	str	r1, [sp, #8]
 800cc34:	9201      	str	r2, [sp, #4]
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	462b      	mov	r3, r5
 800cc3a:	4622      	mov	r2, r4
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc40:	f004 feb0 	bl	80119a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cc5a:	6838      	ldr	r0, [r7, #0]
 800cc5c:	f7fe fff0 	bl	800bc40 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cc60:	4b31      	ldr	r3, [pc, #196]	; (800cd28 <tcp_slowtmr+0x5a4>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d004      	beq.n	800cc76 <tcp_slowtmr+0x4f2>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f06f 010c 	mvn.w	r1, #12
 800cc72:	68b8      	ldr	r0, [r7, #8]
 800cc74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cc76:	4b2c      	ldr	r3, [pc, #176]	; (800cd28 <tcp_slowtmr+0x5a4>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d037      	beq.n	800ccee <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cc7e:	e592      	b.n	800c7a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	7f1b      	ldrb	r3, [r3, #28]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc98:	7f1a      	ldrb	r2, [r3, #28]
 800cc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9c:	7f5b      	ldrb	r3, [r3, #29]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d325      	bcc.n	800ccee <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca4:	2200      	movs	r2, #0
 800cca6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cca8:	4b1f      	ldr	r3, [pc, #124]	; (800cd28 <tcp_slowtmr+0x5a4>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00b      	beq.n	800ccd0 <tcp_slowtmr+0x54c>
 800ccb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccc0:	6912      	ldr	r2, [r2, #16]
 800ccc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	4798      	blx	r3
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ccce:	e002      	b.n	800ccd6 <tcp_slowtmr+0x552>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ccd6:	4b14      	ldr	r3, [pc, #80]	; (800cd28 <tcp_slowtmr+0x5a4>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d000      	beq.n	800cce0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ccde:	e562      	b.n	800c7a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cce0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d102      	bne.n	800ccee <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccea:	f004 f8a7 	bl	8010e3c <tcp_output>
  while (pcb != NULL) {
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f47f ad5e 	bne.w	800c7b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <tcp_slowtmr+0x5a8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cd00:	e069      	b.n	800cdd6 <tcp_slowtmr+0x652>
 800cd02:	bf00      	nop
 800cd04:	20011804 	.word	0x20011804
 800cd08:	000a4cb8 	.word	0x000a4cb8
 800cd0c:	10624dd3 	.word	0x10624dd3
 800cd10:	000124f8 	.word	0x000124f8
 800cd14:	20011810 	.word	0x20011810
 800cd18:	08016f10 	.word	0x08016f10
 800cd1c:	08017348 	.word	0x08017348
 800cd20:	08016f54 	.word	0x08016f54
 800cd24:	08017374 	.word	0x08017374
 800cd28:	20011818 	.word	0x20011818
 800cd2c:	20011814 	.word	0x20011814
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd32:	7d1b      	ldrb	r3, [r3, #20]
 800cd34:	2b0a      	cmp	r3, #10
 800cd36:	d006      	beq.n	800cd46 <tcp_slowtmr+0x5c2>
 800cd38:	4b2b      	ldr	r3, [pc, #172]	; (800cde8 <tcp_slowtmr+0x664>)
 800cd3a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cd3e:	492b      	ldr	r1, [pc, #172]	; (800cdec <tcp_slowtmr+0x668>)
 800cd40:	482b      	ldr	r0, [pc, #172]	; (800cdf0 <tcp_slowtmr+0x66c>)
 800cd42:	f007 ff85 	bl	8014c50 <iprintf>
    pcb_remove = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd4c:	4b29      	ldr	r3, [pc, #164]	; (800cdf4 <tcp_slowtmr+0x670>)
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	2bf0      	cmp	r3, #240	; 0xf0
 800cd58:	d904      	bls.n	800cd64 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cd5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd5e:	3301      	adds	r3, #1
 800cd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d02f      	beq.n	800cdcc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cd6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd6e:	f000 fbf9 	bl	800d564 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d010      	beq.n	800cd9a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cd78:	4b1f      	ldr	r3, [pc, #124]	; (800cdf8 <tcp_slowtmr+0x674>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d106      	bne.n	800cd90 <tcp_slowtmr+0x60c>
 800cd82:	4b19      	ldr	r3, [pc, #100]	; (800cde8 <tcp_slowtmr+0x664>)
 800cd84:	f240 52af 	movw	r2, #1455	; 0x5af
 800cd88:	491c      	ldr	r1, [pc, #112]	; (800cdfc <tcp_slowtmr+0x678>)
 800cd8a:	4819      	ldr	r0, [pc, #100]	; (800cdf0 <tcp_slowtmr+0x66c>)
 800cd8c:	f007 ff60 	bl	8014c50 <iprintf>
        prev->next = pcb->next;
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd92:	68da      	ldr	r2, [r3, #12]
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	60da      	str	r2, [r3, #12]
 800cd98:	e00f      	b.n	800cdba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cd9a:	4b17      	ldr	r3, [pc, #92]	; (800cdf8 <tcp_slowtmr+0x674>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d006      	beq.n	800cdb2 <tcp_slowtmr+0x62e>
 800cda4:	4b10      	ldr	r3, [pc, #64]	; (800cde8 <tcp_slowtmr+0x664>)
 800cda6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cdaa:	4915      	ldr	r1, [pc, #84]	; (800ce00 <tcp_slowtmr+0x67c>)
 800cdac:	4810      	ldr	r0, [pc, #64]	; (800cdf0 <tcp_slowtmr+0x66c>)
 800cdae:	f007 ff4f 	bl	8014c50 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	4a10      	ldr	r2, [pc, #64]	; (800cdf8 <tcp_slowtmr+0x674>)
 800cdb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cdc4:	69f8      	ldr	r0, [r7, #28]
 800cdc6:	f7fe ff3b 	bl	800bc40 <tcp_free>
 800cdca:	e004      	b.n	800cdd6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1a9      	bne.n	800cd30 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cddc:	bf00      	nop
 800cdde:	bf00      	nop
 800cde0:	3730      	adds	r7, #48	; 0x30
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bdb0      	pop	{r4, r5, r7, pc}
 800cde6:	bf00      	nop
 800cde8:	08016f10 	.word	0x08016f10
 800cdec:	080173a0 	.word	0x080173a0
 800cdf0:	08016f54 	.word	0x08016f54
 800cdf4:	20011804 	.word	0x20011804
 800cdf8:	20011814 	.word	0x20011814
 800cdfc:	080173d0 	.word	0x080173d0
 800ce00:	080173f8 	.word	0x080173f8

0800ce04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ce0a:	4b2d      	ldr	r3, [pc, #180]	; (800cec0 <tcp_fasttmr+0xbc>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	4b2b      	ldr	r3, [pc, #172]	; (800cec0 <tcp_fasttmr+0xbc>)
 800ce14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ce16:	4b2b      	ldr	r3, [pc, #172]	; (800cec4 <tcp_fasttmr+0xc0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ce1c:	e048      	b.n	800ceb0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7f9a      	ldrb	r2, [r3, #30]
 800ce22:	4b27      	ldr	r3, [pc, #156]	; (800cec0 <tcp_fasttmr+0xbc>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d03f      	beq.n	800ceaa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ce2a:	4b25      	ldr	r3, [pc, #148]	; (800cec0 <tcp_fasttmr+0xbc>)
 800ce2c:	781a      	ldrb	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	8b5b      	ldrh	r3, [r3, #26]
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d010      	beq.n	800ce60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8b5b      	ldrh	r3, [r3, #26]
 800ce42:	f043 0302 	orr.w	r3, r3, #2
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f003 fff5 	bl	8010e3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	8b5b      	ldrh	r3, [r3, #26]
 800ce56:	f023 0303 	bic.w	r3, r3, #3
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	8b5b      	ldrh	r3, [r3, #26]
 800ce64:	f003 0308 	and.w	r3, r3, #8
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d009      	beq.n	800ce80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	8b5b      	ldrh	r3, [r3, #26]
 800ce70:	f023 0308 	bic.w	r3, r3, #8
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7ff f874 	bl	800bf68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00a      	beq.n	800cea4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ce8e:	4b0e      	ldr	r3, [pc, #56]	; (800cec8 <tcp_fasttmr+0xc4>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f819 	bl	800cecc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ce9a:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <tcp_fasttmr+0xc4>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d000      	beq.n	800cea4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cea2:	e7b8      	b.n	800ce16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	607b      	str	r3, [r7, #4]
 800cea8:	e002      	b.n	800ceb0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1b3      	bne.n	800ce1e <tcp_fasttmr+0x1a>
    }
  }
}
 800ceb6:	bf00      	nop
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	2001181a 	.word	0x2001181a
 800cec4:	20011810 	.word	0x20011810
 800cec8:	20011818 	.word	0x20011818

0800cecc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cecc:	b590      	push	{r4, r7, lr}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d109      	bne.n	800ceee <tcp_process_refused_data+0x22>
 800ceda:	4b37      	ldr	r3, [pc, #220]	; (800cfb8 <tcp_process_refused_data+0xec>)
 800cedc:	f240 6209 	movw	r2, #1545	; 0x609
 800cee0:	4936      	ldr	r1, [pc, #216]	; (800cfbc <tcp_process_refused_data+0xf0>)
 800cee2:	4837      	ldr	r0, [pc, #220]	; (800cfc0 <tcp_process_refused_data+0xf4>)
 800cee4:	f007 feb4 	bl	8014c50 <iprintf>
 800cee8:	f06f 030f 	mvn.w	r3, #15
 800ceec:	e060      	b.n	800cfb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef2:	7b5b      	ldrb	r3, [r3, #13]
 800cef4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cefa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00b      	beq.n	800cf24 <tcp_process_refused_data+0x58>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6918      	ldr	r0, [r3, #16]
 800cf16:	2300      	movs	r3, #0
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	47a0      	blx	r4
 800cf1e:	4603      	mov	r3, r0
 800cf20:	73fb      	strb	r3, [r7, #15]
 800cf22:	e007      	b.n	800cf34 <tcp_process_refused_data+0x68>
 800cf24:	2300      	movs	r3, #0
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	f000 f8a4 	bl	800d078 <tcp_recv_null>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cf34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d12a      	bne.n	800cf92 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d033      	beq.n	800cfae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf4e:	d005      	beq.n	800cf5c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf54:	3301      	adds	r3, #1
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00b      	beq.n	800cf7e <tcp_process_refused_data+0xb2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6918      	ldr	r0, [r3, #16]
 800cf70:	2300      	movs	r3, #0
 800cf72:	2200      	movs	r2, #0
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	47a0      	blx	r4
 800cf78:	4603      	mov	r3, r0
 800cf7a:	73fb      	strb	r3, [r7, #15]
 800cf7c:	e001      	b.n	800cf82 <tcp_process_refused_data+0xb6>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf86:	f113 0f0d 	cmn.w	r3, #13
 800cf8a:	d110      	bne.n	800cfae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cf8c:	f06f 030c 	mvn.w	r3, #12
 800cf90:	e00e      	b.n	800cfb0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf96:	f113 0f0d 	cmn.w	r3, #13
 800cf9a:	d102      	bne.n	800cfa2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cf9c:	f06f 030c 	mvn.w	r3, #12
 800cfa0:	e006      	b.n	800cfb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cfa8:	f06f 0304 	mvn.w	r3, #4
 800cfac:	e000      	b.n	800cfb0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd90      	pop	{r4, r7, pc}
 800cfb8:	08016f10 	.word	0x08016f10
 800cfbc:	08017420 	.word	0x08017420
 800cfc0:	08016f54 	.word	0x08016f54

0800cfc4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cfcc:	e007      	b.n	800cfde <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 f80a 	bl	800cfee <tcp_seg_free>
    seg = next;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1f4      	bne.n	800cfce <tcp_segs_free+0xa>
  }
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b082      	sub	sp, #8
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00c      	beq.n	800d016 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d004      	beq.n	800d00e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fb6d 	bl	800b6e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	2002      	movs	r0, #2
 800d012:	f7fd fcc9 	bl	800a9a8 <memp_free>
  }
}
 800d016:	bf00      	nop
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d106      	bne.n	800d03c <tcp_seg_copy+0x1c>
 800d02e:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <tcp_seg_copy+0x4c>)
 800d030:	f240 6282 	movw	r2, #1666	; 0x682
 800d034:	490e      	ldr	r1, [pc, #56]	; (800d070 <tcp_seg_copy+0x50>)
 800d036:	480f      	ldr	r0, [pc, #60]	; (800d074 <tcp_seg_copy+0x54>)
 800d038:	f007 fe0a 	bl	8014c50 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d03c:	2002      	movs	r0, #2
 800d03e:	f7fd fc3d 	bl	800a8bc <memp_malloc>
 800d042:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <tcp_seg_copy+0x2e>
    return NULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	e00a      	b.n	800d064 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d04e:	2210      	movs	r2, #16
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f007 fd51 	bl	8014afa <memcpy>
  pbuf_ref(cseg->p);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fe fbe9 	bl	800b834 <pbuf_ref>
  return cseg;
 800d062:	68fb      	ldr	r3, [r7, #12]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	08016f10 	.word	0x08016f10
 800d070:	08017464 	.word	0x08017464
 800d074:	08016f54 	.word	0x08016f54

0800d078 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d109      	bne.n	800d0a0 <tcp_recv_null+0x28>
 800d08c:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <tcp_recv_null+0x60>)
 800d08e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d092:	4912      	ldr	r1, [pc, #72]	; (800d0dc <tcp_recv_null+0x64>)
 800d094:	4812      	ldr	r0, [pc, #72]	; (800d0e0 <tcp_recv_null+0x68>)
 800d096:	f007 fddb 	bl	8014c50 <iprintf>
 800d09a:	f06f 030f 	mvn.w	r3, #15
 800d09e:	e016      	b.n	800d0ce <tcp_recv_null+0x56>

  if (p != NULL) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d009      	beq.n	800d0ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	891b      	ldrh	r3, [r3, #8]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68b8      	ldr	r0, [r7, #8]
 800d0ae:	f7ff fad3 	bl	800c658 <tcp_recved>
    pbuf_free(p);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fe fb18 	bl	800b6e8 <pbuf_free>
 800d0b8:	e008      	b.n	800d0cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d0ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d104      	bne.n	800d0cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d0c2:	68b8      	ldr	r0, [r7, #8]
 800d0c4:	f7fe ffba 	bl	800c03c <tcp_close>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	e000      	b.n	800d0ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	08016f10 	.word	0x08016f10
 800d0dc:	08017480 	.word	0x08017480
 800d0e0:	08016f54 	.word	0x08016f54

0800d0e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	db01      	blt.n	800d0fa <tcp_kill_prio+0x16>
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	e000      	b.n	800d0fc <tcp_kill_prio+0x18>
 800d0fa:	237f      	movs	r3, #127	; 0x7f
 800d0fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d0fe:	7afb      	ldrb	r3, [r7, #11]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d034      	beq.n	800d16e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d104:	7afb      	ldrb	r3, [r7, #11]
 800d106:	3b01      	subs	r3, #1
 800d108:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d112:	4b19      	ldr	r3, [pc, #100]	; (800d178 <tcp_kill_prio+0x94>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	617b      	str	r3, [r7, #20]
 800d118:	e01f      	b.n	800d15a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	7d5b      	ldrb	r3, [r3, #21]
 800d11e:	7afa      	ldrb	r2, [r7, #11]
 800d120:	429a      	cmp	r2, r3
 800d122:	d80c      	bhi.n	800d13e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d128:	7afa      	ldrb	r2, [r7, #11]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d112      	bne.n	800d154 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d12e:	4b13      	ldr	r3, [pc, #76]	; (800d17c <tcp_kill_prio+0x98>)
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d80a      	bhi.n	800d154 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <tcp_kill_prio+0x98>)
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	7d5b      	ldrb	r3, [r3, #21]
 800d152:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	617b      	str	r3, [r7, #20]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1dc      	bne.n	800d11a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d004      	beq.n	800d170 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d166:	6938      	ldr	r0, [r7, #16]
 800d168:	f7ff f8ae 	bl	800c2c8 <tcp_abort>
 800d16c:	e000      	b.n	800d170 <tcp_kill_prio+0x8c>
    return;
 800d16e:	bf00      	nop
  }
}
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20011810 	.word	0x20011810
 800d17c:	20011804 	.word	0x20011804

0800d180 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	4603      	mov	r3, r0
 800d188:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	2b08      	cmp	r3, #8
 800d18e:	d009      	beq.n	800d1a4 <tcp_kill_state+0x24>
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	2b09      	cmp	r3, #9
 800d194:	d006      	beq.n	800d1a4 <tcp_kill_state+0x24>
 800d196:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <tcp_kill_state+0x80>)
 800d198:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d19c:	4919      	ldr	r1, [pc, #100]	; (800d204 <tcp_kill_state+0x84>)
 800d19e:	481a      	ldr	r0, [pc, #104]	; (800d208 <tcp_kill_state+0x88>)
 800d1a0:	f007 fd56 	bl	8014c50 <iprintf>

  inactivity = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1ac:	4b17      	ldr	r3, [pc, #92]	; (800d20c <tcp_kill_state+0x8c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	617b      	str	r3, [r7, #20]
 800d1b2:	e017      	b.n	800d1e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	7d1b      	ldrb	r3, [r3, #20]
 800d1b8:	79fa      	ldrb	r2, [r7, #7]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d10f      	bne.n	800d1de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d1be:	4b14      	ldr	r3, [pc, #80]	; (800d210 <tcp_kill_state+0x90>)
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d807      	bhi.n	800d1de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d1ce:	4b10      	ldr	r3, [pc, #64]	; (800d210 <tcp_kill_state+0x90>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1e4      	bne.n	800d1b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	6938      	ldr	r0, [r7, #16]
 800d1f4:	f7fe ffaa 	bl	800c14c <tcp_abandon>
  }
}
 800d1f8:	bf00      	nop
 800d1fa:	3718      	adds	r7, #24
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	08016f10 	.word	0x08016f10
 800d204:	0801749c 	.word	0x0801749c
 800d208:	08016f54 	.word	0x08016f54
 800d20c:	20011810 	.word	0x20011810
 800d210:	20011804 	.word	0x20011804

0800d214 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d21e:	2300      	movs	r3, #0
 800d220:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <tcp_kill_timewait+0x58>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	e012      	b.n	800d250 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d22a:	4b11      	ldr	r3, [pc, #68]	; (800d270 <tcp_kill_timewait+0x5c>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	429a      	cmp	r2, r3
 800d238:	d807      	bhi.n	800d24a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d23a:	4b0d      	ldr	r3, [pc, #52]	; (800d270 <tcp_kill_timewait+0x5c>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e9      	bne.n	800d22a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d25c:	68b8      	ldr	r0, [r7, #8]
 800d25e:	f7ff f833 	bl	800c2c8 <tcp_abort>
  }
}
 800d262:	bf00      	nop
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20011814 	.word	0x20011814
 800d270:	20011804 	.word	0x20011804

0800d274 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d27a:	4b10      	ldr	r3, [pc, #64]	; (800d2bc <tcp_handle_closepend+0x48>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d280:	e014      	b.n	800d2ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8b5b      	ldrh	r3, [r3, #26]
 800d28c:	f003 0308 	and.w	r3, r3, #8
 800d290:	2b00      	cmp	r3, #0
 800d292:	d009      	beq.n	800d2a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	8b5b      	ldrh	r3, [r3, #26]
 800d298:	f023 0308 	bic.w	r3, r3, #8
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7fe fe60 	bl	800bf68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e7      	bne.n	800d282 <tcp_handle_closepend+0xe>
  }
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20011810 	.word	0x20011810

0800d2c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	f7fd faf6 	bl	800a8bc <memp_malloc>
 800d2d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d126      	bne.n	800d326 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d2d8:	f7ff ffcc 	bl	800d274 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d2dc:	f7ff ff9a 	bl	800d214 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	f7fd faeb 	bl	800a8bc <memp_malloc>
 800d2e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d11b      	bne.n	800d326 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d2ee:	2009      	movs	r0, #9
 800d2f0:	f7ff ff46 	bl	800d180 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	f7fd fae1 	bl	800a8bc <memp_malloc>
 800d2fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d111      	bne.n	800d326 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d302:	2008      	movs	r0, #8
 800d304:	f7ff ff3c 	bl	800d180 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d308:	2000      	movs	r0, #0
 800d30a:	f7fd fad7 	bl	800a8bc <memp_malloc>
 800d30e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d107      	bne.n	800d326 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	4618      	mov	r0, r3
 800d31a:	f7ff fee3 	bl	800d0e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d31e:	2000      	movs	r0, #0
 800d320:	f7fd facc 	bl	800a8bc <memp_malloc>
 800d324:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d03f      	beq.n	800d3ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d32c:	229c      	movs	r2, #156	; 0x9c
 800d32e:	2100      	movs	r1, #0
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f007 fbf0 	bl	8014b16 <memset>
    pcb->prio = prio;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	79fa      	ldrb	r2, [r7, #7]
 800d33a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d342:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d34c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	22ff      	movs	r2, #255	; 0xff
 800d35a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d362:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2206      	movs	r2, #6
 800d368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2206      	movs	r2, #6
 800d370:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d378:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d382:	4b0d      	ldr	r3, [pc, #52]	; (800d3b8 <tcp_alloc+0xf8>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d38a:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <tcp_alloc+0xfc>)
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d398:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <tcp_alloc+0x100>)
 800d3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	4a07      	ldr	r2, [pc, #28]	; (800d3c4 <tcp_alloc+0x104>)
 800d3a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20011804 	.word	0x20011804
 800d3bc:	2001181a 	.word	0x2001181a
 800d3c0:	0800d079 	.word	0x0800d079
 800d3c4:	006ddd00 	.word	0x006ddd00

0800d3c8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d3d2:	2040      	movs	r0, #64	; 0x40
 800d3d4:	f7ff ff74 	bl	800d2c0 <tcp_alloc>
 800d3d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d3da:	68fb      	ldr	r3, [r7, #12]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	611a      	str	r2, [r3, #16]
  }
}
 800d3fa:	bf00      	nop
 800d3fc:	370c      	adds	r7, #12
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
	...

0800d408 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00e      	beq.n	800d436 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d106      	bne.n	800d42e <tcp_recv+0x26>
 800d420:	4b07      	ldr	r3, [pc, #28]	; (800d440 <tcp_recv+0x38>)
 800d422:	f240 72df 	movw	r2, #2015	; 0x7df
 800d426:	4907      	ldr	r1, [pc, #28]	; (800d444 <tcp_recv+0x3c>)
 800d428:	4807      	ldr	r0, [pc, #28]	; (800d448 <tcp_recv+0x40>)
 800d42a:	f007 fc11 	bl	8014c50 <iprintf>
    pcb->recv = recv;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d436:	bf00      	nop
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	08016f10 	.word	0x08016f10
 800d444:	080174ac 	.word	0x080174ac
 800d448:	08016f54 	.word	0x08016f54

0800d44c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00e      	beq.n	800d47a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7d1b      	ldrb	r3, [r3, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d106      	bne.n	800d472 <tcp_sent+0x26>
 800d464:	4b07      	ldr	r3, [pc, #28]	; (800d484 <tcp_sent+0x38>)
 800d466:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d46a:	4907      	ldr	r1, [pc, #28]	; (800d488 <tcp_sent+0x3c>)
 800d46c:	4807      	ldr	r0, [pc, #28]	; (800d48c <tcp_sent+0x40>)
 800d46e:	f007 fbef 	bl	8014c50 <iprintf>
    pcb->sent = sent;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d47a:	bf00      	nop
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	08016f10 	.word	0x08016f10
 800d488:	080174d4 	.word	0x080174d4
 800d48c:	08016f54 	.word	0x08016f54

0800d490 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00e      	beq.n	800d4be <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7d1b      	ldrb	r3, [r3, #20]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d106      	bne.n	800d4b6 <tcp_err+0x26>
 800d4a8:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <tcp_err+0x38>)
 800d4aa:	f640 020d 	movw	r2, #2061	; 0x80d
 800d4ae:	4907      	ldr	r1, [pc, #28]	; (800d4cc <tcp_err+0x3c>)
 800d4b0:	4807      	ldr	r0, [pc, #28]	; (800d4d0 <tcp_err+0x40>)
 800d4b2:	f007 fbcd 	bl	8014c50 <iprintf>
    pcb->errf = err;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d4be:	bf00      	nop
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	08016f10 	.word	0x08016f10
 800d4cc:	080174fc 	.word	0x080174fc
 800d4d0:	08016f54 	.word	0x08016f54

0800d4d4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d008      	beq.n	800d4f6 <tcp_accept+0x22>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7d1b      	ldrb	r3, [r3, #20]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d104      	bne.n	800d4f6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	619a      	str	r2, [r3, #24]
  }
}
 800d4f6:	bf00      	nop
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
	...

0800d504 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	4613      	mov	r3, r2
 800d510:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d107      	bne.n	800d528 <tcp_poll+0x24>
 800d518:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <tcp_poll+0x50>)
 800d51a:	f640 023d 	movw	r2, #2109	; 0x83d
 800d51e:	490e      	ldr	r1, [pc, #56]	; (800d558 <tcp_poll+0x54>)
 800d520:	480e      	ldr	r0, [pc, #56]	; (800d55c <tcp_poll+0x58>)
 800d522:	f007 fb95 	bl	8014c50 <iprintf>
 800d526:	e011      	b.n	800d54c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	7d1b      	ldrb	r3, [r3, #20]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d106      	bne.n	800d53e <tcp_poll+0x3a>
 800d530:	4b08      	ldr	r3, [pc, #32]	; (800d554 <tcp_poll+0x50>)
 800d532:	f640 023e 	movw	r2, #2110	; 0x83e
 800d536:	490a      	ldr	r1, [pc, #40]	; (800d560 <tcp_poll+0x5c>)
 800d538:	4808      	ldr	r0, [pc, #32]	; (800d55c <tcp_poll+0x58>)
 800d53a:	f007 fb89 	bl	8014c50 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	79fa      	ldrb	r2, [r7, #7]
 800d54a:	775a      	strb	r2, [r3, #29]
}
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	08016f10 	.word	0x08016f10
 800d558:	08017524 	.word	0x08017524
 800d55c:	08016f54 	.word	0x08016f54
 800d560:	0801753c 	.word	0x0801753c

0800d564 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d107      	bne.n	800d582 <tcp_pcb_purge+0x1e>
 800d572:	4b21      	ldr	r3, [pc, #132]	; (800d5f8 <tcp_pcb_purge+0x94>)
 800d574:	f640 0251 	movw	r2, #2129	; 0x851
 800d578:	4920      	ldr	r1, [pc, #128]	; (800d5fc <tcp_pcb_purge+0x98>)
 800d57a:	4821      	ldr	r0, [pc, #132]	; (800d600 <tcp_pcb_purge+0x9c>)
 800d57c:	f007 fb68 	bl	8014c50 <iprintf>
 800d580:	e037      	b.n	800d5f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	7d1b      	ldrb	r3, [r3, #20]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d033      	beq.n	800d5f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d58e:	2b0a      	cmp	r3, #10
 800d590:	d02f      	beq.n	800d5f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d596:	2b01      	cmp	r3, #1
 800d598:	d02b      	beq.n	800d5f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d007      	beq.n	800d5b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fe f89e 	bl	800b6e8 <pbuf_free>
      pcb->refused_data = NULL;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d002      	beq.n	800d5c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f986 	bl	800d8cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff fcf9 	bl	800cfc4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fcf4 	bl	800cfc4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	66da      	str	r2, [r3, #108]	; 0x6c
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	08016f10 	.word	0x08016f10
 800d5fc:	0801755c 	.word	0x0801755c
 800d600:	08016f54 	.word	0x08016f54

0800d604 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d106      	bne.n	800d622 <tcp_pcb_remove+0x1e>
 800d614:	4b3e      	ldr	r3, [pc, #248]	; (800d710 <tcp_pcb_remove+0x10c>)
 800d616:	f640 0283 	movw	r2, #2179	; 0x883
 800d61a:	493e      	ldr	r1, [pc, #248]	; (800d714 <tcp_pcb_remove+0x110>)
 800d61c:	483e      	ldr	r0, [pc, #248]	; (800d718 <tcp_pcb_remove+0x114>)
 800d61e:	f007 fb17 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <tcp_pcb_remove+0x32>
 800d628:	4b39      	ldr	r3, [pc, #228]	; (800d710 <tcp_pcb_remove+0x10c>)
 800d62a:	f640 0284 	movw	r2, #2180	; 0x884
 800d62e:	493b      	ldr	r1, [pc, #236]	; (800d71c <tcp_pcb_remove+0x118>)
 800d630:	4839      	ldr	r0, [pc, #228]	; (800d718 <tcp_pcb_remove+0x114>)
 800d632:	f007 fb0d 	bl	8014c50 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d105      	bne.n	800d64c <tcp_pcb_remove+0x48>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	e013      	b.n	800d674 <tcp_pcb_remove+0x70>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	e00c      	b.n	800d66e <tcp_pcb_remove+0x6a>
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d104      	bne.n	800d668 <tcp_pcb_remove+0x64>
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68da      	ldr	r2, [r3, #12]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	60da      	str	r2, [r3, #12]
 800d666:	e005      	b.n	800d674 <tcp_pcb_remove+0x70>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	60fb      	str	r3, [r7, #12]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1ef      	bne.n	800d654 <tcp_pcb_remove+0x50>
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2200      	movs	r2, #0
 800d678:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d67a:	6838      	ldr	r0, [r7, #0]
 800d67c:	f7ff ff72 	bl	800d564 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	7d1b      	ldrb	r3, [r3, #20]
 800d684:	2b0a      	cmp	r3, #10
 800d686:	d013      	beq.n	800d6b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d00f      	beq.n	800d6b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	8b5b      	ldrh	r3, [r3, #26]
 800d694:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d009      	beq.n	800d6b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	8b5b      	ldrh	r3, [r3, #26]
 800d6a0:	f043 0302 	orr.w	r3, r3, #2
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d6aa:	6838      	ldr	r0, [r7, #0]
 800d6ac:	f003 fbc6 	bl	8010e3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	7d1b      	ldrb	r3, [r3, #20]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d020      	beq.n	800d6fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <tcp_pcb_remove+0xca>
 800d6c0:	4b13      	ldr	r3, [pc, #76]	; (800d710 <tcp_pcb_remove+0x10c>)
 800d6c2:	f640 0293 	movw	r2, #2195	; 0x893
 800d6c6:	4916      	ldr	r1, [pc, #88]	; (800d720 <tcp_pcb_remove+0x11c>)
 800d6c8:	4813      	ldr	r0, [pc, #76]	; (800d718 <tcp_pcb_remove+0x114>)
 800d6ca:	f007 fac1 	bl	8014c50 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d006      	beq.n	800d6e4 <tcp_pcb_remove+0xe0>
 800d6d6:	4b0e      	ldr	r3, [pc, #56]	; (800d710 <tcp_pcb_remove+0x10c>)
 800d6d8:	f640 0294 	movw	r2, #2196	; 0x894
 800d6dc:	4911      	ldr	r1, [pc, #68]	; (800d724 <tcp_pcb_remove+0x120>)
 800d6de:	480e      	ldr	r0, [pc, #56]	; (800d718 <tcp_pcb_remove+0x114>)
 800d6e0:	f007 fab6 	bl	8014c50 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <tcp_pcb_remove+0xf6>
 800d6ec:	4b08      	ldr	r3, [pc, #32]	; (800d710 <tcp_pcb_remove+0x10c>)
 800d6ee:	f640 0296 	movw	r2, #2198	; 0x896
 800d6f2:	490d      	ldr	r1, [pc, #52]	; (800d728 <tcp_pcb_remove+0x124>)
 800d6f4:	4808      	ldr	r0, [pc, #32]	; (800d718 <tcp_pcb_remove+0x114>)
 800d6f6:	f007 faab 	bl	8014c50 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2200      	movs	r2, #0
 800d704:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	08016f10 	.word	0x08016f10
 800d714:	08017578 	.word	0x08017578
 800d718:	08016f54 	.word	0x08016f54
 800d71c:	08017594 	.word	0x08017594
 800d720:	080175b4 	.word	0x080175b4
 800d724:	080175cc 	.word	0x080175cc
 800d728:	080175e8 	.word	0x080175e8

0800d72c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <tcp_next_iss+0x1c>
 800d73a:	4b0a      	ldr	r3, [pc, #40]	; (800d764 <tcp_next_iss+0x38>)
 800d73c:	f640 02af 	movw	r2, #2223	; 0x8af
 800d740:	4909      	ldr	r1, [pc, #36]	; (800d768 <tcp_next_iss+0x3c>)
 800d742:	480a      	ldr	r0, [pc, #40]	; (800d76c <tcp_next_iss+0x40>)
 800d744:	f007 fa84 	bl	8014c50 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d748:	4b09      	ldr	r3, [pc, #36]	; (800d770 <tcp_next_iss+0x44>)
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	4b09      	ldr	r3, [pc, #36]	; (800d774 <tcp_next_iss+0x48>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4413      	add	r3, r2
 800d752:	4a07      	ldr	r2, [pc, #28]	; (800d770 <tcp_next_iss+0x44>)
 800d754:	6013      	str	r3, [r2, #0]
  return iss;
 800d756:	4b06      	ldr	r3, [pc, #24]	; (800d770 <tcp_next_iss+0x44>)
 800d758:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08016f10 	.word	0x08016f10
 800d768:	08017600 	.word	0x08017600
 800d76c:	08016f54 	.word	0x08016f54
 800d770:	20000028 	.word	0x20000028
 800d774:	20011804 	.word	0x20011804

0800d778 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d106      	bne.n	800d79a <tcp_eff_send_mss_netif+0x22>
 800d78c:	4b14      	ldr	r3, [pc, #80]	; (800d7e0 <tcp_eff_send_mss_netif+0x68>)
 800d78e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d792:	4914      	ldr	r1, [pc, #80]	; (800d7e4 <tcp_eff_send_mss_netif+0x6c>)
 800d794:	4814      	ldr	r0, [pc, #80]	; (800d7e8 <tcp_eff_send_mss_netif+0x70>)
 800d796:	f007 fa5b 	bl	8014c50 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d7a0:	89fb      	ldrh	r3, [r7, #14]
 800d7a2:	e019      	b.n	800d7d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d7aa:	8afb      	ldrh	r3, [r7, #22]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d012      	beq.n	800d7d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d7b0:	2328      	movs	r3, #40	; 0x28
 800d7b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d7b4:	8afa      	ldrh	r2, [r7, #22]
 800d7b6:	8abb      	ldrh	r3, [r7, #20]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d904      	bls.n	800d7c6 <tcp_eff_send_mss_netif+0x4e>
 800d7bc:	8afa      	ldrh	r2, [r7, #22]
 800d7be:	8abb      	ldrh	r3, [r7, #20]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	e000      	b.n	800d7c8 <tcp_eff_send_mss_netif+0x50>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d7ca:	8a7a      	ldrh	r2, [r7, #18]
 800d7cc:	89fb      	ldrh	r3, [r7, #14]
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	bf28      	it	cs
 800d7d2:	4613      	movcs	r3, r2
 800d7d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d7d6:	89fb      	ldrh	r3, [r7, #14]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	08016f10 	.word	0x08016f10
 800d7e4:	0801761c 	.word	0x0801761c
 800d7e8:	08016f54 	.word	0x08016f54

0800d7ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d119      	bne.n	800d834 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d800:	4b10      	ldr	r3, [pc, #64]	; (800d844 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d802:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d806:	4910      	ldr	r1, [pc, #64]	; (800d848 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d808:	4810      	ldr	r0, [pc, #64]	; (800d84c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d80a:	f007 fa21 	bl	8014c50 <iprintf>

  while (pcb != NULL) {
 800d80e:	e011      	b.n	800d834 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d108      	bne.n	800d82e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7fe fd50 	bl	800c2c8 <tcp_abort>
      pcb = next;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e002      	b.n	800d834 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1ea      	bne.n	800d810 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	08016f10 	.word	0x08016f10
 800d848:	08017644 	.word	0x08017644
 800d84c:	08016f54 	.word	0x08016f54

0800d850 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d02a      	beq.n	800d8b6 <tcp_netif_ip_addr_changed+0x66>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d026      	beq.n	800d8b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d868:	4b15      	ldr	r3, [pc, #84]	; (800d8c0 <tcp_netif_ip_addr_changed+0x70>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff ffbc 	bl	800d7ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d874:	4b13      	ldr	r3, [pc, #76]	; (800d8c4 <tcp_netif_ip_addr_changed+0x74>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4619      	mov	r1, r3
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff ffb6 	bl	800d7ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d017      	beq.n	800d8b6 <tcp_netif_ip_addr_changed+0x66>
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d013      	beq.n	800d8b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d88e:	4b0e      	ldr	r3, [pc, #56]	; (800d8c8 <tcp_netif_ip_addr_changed+0x78>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	e00c      	b.n	800d8b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d103      	bne.n	800d8aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1ef      	bne.n	800d896 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d8b6:	bf00      	nop
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	20011810 	.word	0x20011810
 800d8c4:	20011808 	.word	0x20011808
 800d8c8:	2001180c 	.word	0x2001180c

0800d8cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d007      	beq.n	800d8ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff fb6f 	bl	800cfc4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d8f4:	b590      	push	{r4, r7, lr}
 800d8f6:	b08d      	sub	sp, #52	; 0x34
 800d8f8:	af04      	add	r7, sp, #16
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d105      	bne.n	800d910 <tcp_input+0x1c>
 800d904:	4b9b      	ldr	r3, [pc, #620]	; (800db74 <tcp_input+0x280>)
 800d906:	2283      	movs	r2, #131	; 0x83
 800d908:	499b      	ldr	r1, [pc, #620]	; (800db78 <tcp_input+0x284>)
 800d90a:	489c      	ldr	r0, [pc, #624]	; (800db7c <tcp_input+0x288>)
 800d90c:	f007 f9a0 	bl	8014c50 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	4a9a      	ldr	r2, [pc, #616]	; (800db80 <tcp_input+0x28c>)
 800d916:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	895b      	ldrh	r3, [r3, #10]
 800d91c:	2b13      	cmp	r3, #19
 800d91e:	f240 83d1 	bls.w	800e0c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d922:	4b98      	ldr	r3, [pc, #608]	; (800db84 <tcp_input+0x290>)
 800d924:	695b      	ldr	r3, [r3, #20]
 800d926:	4a97      	ldr	r2, [pc, #604]	; (800db84 <tcp_input+0x290>)
 800d928:	6812      	ldr	r2, [r2, #0]
 800d92a:	4611      	mov	r1, r2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f005 fedb 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	f040 83c7 	bne.w	800e0c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d93a:	4b92      	ldr	r3, [pc, #584]	; (800db84 <tcp_input+0x290>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d942:	2be0      	cmp	r3, #224	; 0xe0
 800d944:	f000 83c0 	beq.w	800e0c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d948:	4b8d      	ldr	r3, [pc, #564]	; (800db80 <tcp_input+0x28c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	899b      	ldrh	r3, [r3, #12]
 800d94e:	b29b      	uxth	r3, r3
 800d950:	4618      	mov	r0, r3
 800d952:	f7fc fadd 	bl	8009f10 <lwip_htons>
 800d956:	4603      	mov	r3, r0
 800d958:	0b1b      	lsrs	r3, r3, #12
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d962:	7cbb      	ldrb	r3, [r7, #18]
 800d964:	2b13      	cmp	r3, #19
 800d966:	f240 83b1 	bls.w	800e0cc <tcp_input+0x7d8>
 800d96a:	7cbb      	ldrb	r3, [r7, #18]
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	891b      	ldrh	r3, [r3, #8]
 800d972:	429a      	cmp	r2, r3
 800d974:	f200 83aa 	bhi.w	800e0cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d978:	7cbb      	ldrb	r3, [r7, #18]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	3b14      	subs	r3, #20
 800d97e:	b29a      	uxth	r2, r3
 800d980:	4b81      	ldr	r3, [pc, #516]	; (800db88 <tcp_input+0x294>)
 800d982:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d984:	4b81      	ldr	r3, [pc, #516]	; (800db8c <tcp_input+0x298>)
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	895a      	ldrh	r2, [r3, #10]
 800d98e:	7cbb      	ldrb	r3, [r7, #18]
 800d990:	b29b      	uxth	r3, r3
 800d992:	429a      	cmp	r2, r3
 800d994:	d309      	bcc.n	800d9aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d996:	4b7c      	ldr	r3, [pc, #496]	; (800db88 <tcp_input+0x294>)
 800d998:	881a      	ldrh	r2, [r3, #0]
 800d99a:	4b7d      	ldr	r3, [pc, #500]	; (800db90 <tcp_input+0x29c>)
 800d99c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d99e:	7cbb      	ldrb	r3, [r7, #18]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7fd fe1a 	bl	800b5dc <pbuf_remove_header>
 800d9a8:	e04e      	b.n	800da48 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d105      	bne.n	800d9be <tcp_input+0xca>
 800d9b2:	4b70      	ldr	r3, [pc, #448]	; (800db74 <tcp_input+0x280>)
 800d9b4:	22c2      	movs	r2, #194	; 0xc2
 800d9b6:	4977      	ldr	r1, [pc, #476]	; (800db94 <tcp_input+0x2a0>)
 800d9b8:	4870      	ldr	r0, [pc, #448]	; (800db7c <tcp_input+0x288>)
 800d9ba:	f007 f949 	bl	8014c50 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d9be:	2114      	movs	r1, #20
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7fd fe0b 	bl	800b5dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	895a      	ldrh	r2, [r3, #10]
 800d9ca:	4b71      	ldr	r3, [pc, #452]	; (800db90 <tcp_input+0x29c>)
 800d9cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d9ce:	4b6e      	ldr	r3, [pc, #440]	; (800db88 <tcp_input+0x294>)
 800d9d0:	881a      	ldrh	r2, [r3, #0]
 800d9d2:	4b6f      	ldr	r3, [pc, #444]	; (800db90 <tcp_input+0x29c>)
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d9da:	4b6d      	ldr	r3, [pc, #436]	; (800db90 <tcp_input+0x29c>)
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7fd fdfb 	bl	800b5dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	895b      	ldrh	r3, [r3, #10]
 800d9ec:	8a3a      	ldrh	r2, [r7, #16]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	f200 836e 	bhi.w	800e0d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	4a64      	ldr	r2, [pc, #400]	; (800db8c <tcp_input+0x298>)
 800d9fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	8a3a      	ldrh	r2, [r7, #16]
 800da04:	4611      	mov	r1, r2
 800da06:	4618      	mov	r0, r3
 800da08:	f7fd fde8 	bl	800b5dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	891a      	ldrh	r2, [r3, #8]
 800da10:	8a3b      	ldrh	r3, [r7, #16]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	895b      	ldrh	r3, [r3, #10]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d005      	beq.n	800da2e <tcp_input+0x13a>
 800da22:	4b54      	ldr	r3, [pc, #336]	; (800db74 <tcp_input+0x280>)
 800da24:	22df      	movs	r2, #223	; 0xdf
 800da26:	495c      	ldr	r1, [pc, #368]	; (800db98 <tcp_input+0x2a4>)
 800da28:	4854      	ldr	r0, [pc, #336]	; (800db7c <tcp_input+0x288>)
 800da2a:	f007 f911 	bl	8014c50 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	891a      	ldrh	r2, [r3, #8]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	891b      	ldrh	r3, [r3, #8]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d005      	beq.n	800da48 <tcp_input+0x154>
 800da3c:	4b4d      	ldr	r3, [pc, #308]	; (800db74 <tcp_input+0x280>)
 800da3e:	22e0      	movs	r2, #224	; 0xe0
 800da40:	4956      	ldr	r1, [pc, #344]	; (800db9c <tcp_input+0x2a8>)
 800da42:	484e      	ldr	r0, [pc, #312]	; (800db7c <tcp_input+0x288>)
 800da44:	f007 f904 	bl	8014c50 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800da48:	4b4d      	ldr	r3, [pc, #308]	; (800db80 <tcp_input+0x28c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4a4b      	ldr	r2, [pc, #300]	; (800db80 <tcp_input+0x28c>)
 800da52:	6814      	ldr	r4, [r2, #0]
 800da54:	4618      	mov	r0, r3
 800da56:	f7fc fa5b 	bl	8009f10 <lwip_htons>
 800da5a:	4603      	mov	r3, r0
 800da5c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800da5e:	4b48      	ldr	r3, [pc, #288]	; (800db80 <tcp_input+0x28c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	885b      	ldrh	r3, [r3, #2]
 800da64:	b29b      	uxth	r3, r3
 800da66:	4a46      	ldr	r2, [pc, #280]	; (800db80 <tcp_input+0x28c>)
 800da68:	6814      	ldr	r4, [r2, #0]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fc fa50 	bl	8009f10 <lwip_htons>
 800da70:	4603      	mov	r3, r0
 800da72:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da74:	4b42      	ldr	r3, [pc, #264]	; (800db80 <tcp_input+0x28c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	4a41      	ldr	r2, [pc, #260]	; (800db80 <tcp_input+0x28c>)
 800da7c:	6814      	ldr	r4, [r2, #0]
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fc fa5b 	bl	8009f3a <lwip_htonl>
 800da84:	4603      	mov	r3, r0
 800da86:	6063      	str	r3, [r4, #4]
 800da88:	6863      	ldr	r3, [r4, #4]
 800da8a:	4a45      	ldr	r2, [pc, #276]	; (800dba0 <tcp_input+0x2ac>)
 800da8c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800da8e:	4b3c      	ldr	r3, [pc, #240]	; (800db80 <tcp_input+0x28c>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	4a3a      	ldr	r2, [pc, #232]	; (800db80 <tcp_input+0x28c>)
 800da96:	6814      	ldr	r4, [r2, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fc fa4e 	bl	8009f3a <lwip_htonl>
 800da9e:	4603      	mov	r3, r0
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	4a3f      	ldr	r2, [pc, #252]	; (800dba4 <tcp_input+0x2b0>)
 800daa6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800daa8:	4b35      	ldr	r3, [pc, #212]	; (800db80 <tcp_input+0x28c>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	89db      	ldrh	r3, [r3, #14]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	4a33      	ldr	r2, [pc, #204]	; (800db80 <tcp_input+0x28c>)
 800dab2:	6814      	ldr	r4, [r2, #0]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fc fa2b 	bl	8009f10 <lwip_htons>
 800daba:	4603      	mov	r3, r0
 800dabc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dabe:	4b30      	ldr	r3, [pc, #192]	; (800db80 <tcp_input+0x28c>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	899b      	ldrh	r3, [r3, #12]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fc fa22 	bl	8009f10 <lwip_htons>
 800dacc:	4603      	mov	r3, r0
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	4b34      	ldr	r3, [pc, #208]	; (800dba8 <tcp_input+0x2b4>)
 800dad8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	891a      	ldrh	r2, [r3, #8]
 800dade:	4b33      	ldr	r3, [pc, #204]	; (800dbac <tcp_input+0x2b8>)
 800dae0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dae2:	4b31      	ldr	r3, [pc, #196]	; (800dba8 <tcp_input+0x2b4>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	f003 0303 	and.w	r3, r3, #3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00c      	beq.n	800db08 <tcp_input+0x214>
    tcplen++;
 800daee:	4b2f      	ldr	r3, [pc, #188]	; (800dbac <tcp_input+0x2b8>)
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	3301      	adds	r3, #1
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	4b2d      	ldr	r3, [pc, #180]	; (800dbac <tcp_input+0x2b8>)
 800daf8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	891a      	ldrh	r2, [r3, #8]
 800dafe:	4b2b      	ldr	r3, [pc, #172]	; (800dbac <tcp_input+0x2b8>)
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	429a      	cmp	r2, r3
 800db04:	f200 82e6 	bhi.w	800e0d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800db08:	2300      	movs	r3, #0
 800db0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db0c:	4b28      	ldr	r3, [pc, #160]	; (800dbb0 <tcp_input+0x2bc>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	61fb      	str	r3, [r7, #28]
 800db12:	e09d      	b.n	800dc50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	7d1b      	ldrb	r3, [r3, #20]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d105      	bne.n	800db28 <tcp_input+0x234>
 800db1c:	4b15      	ldr	r3, [pc, #84]	; (800db74 <tcp_input+0x280>)
 800db1e:	22fb      	movs	r2, #251	; 0xfb
 800db20:	4924      	ldr	r1, [pc, #144]	; (800dbb4 <tcp_input+0x2c0>)
 800db22:	4816      	ldr	r0, [pc, #88]	; (800db7c <tcp_input+0x288>)
 800db24:	f007 f894 	bl	8014c50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
 800db2c:	2b0a      	cmp	r3, #10
 800db2e:	d105      	bne.n	800db3c <tcp_input+0x248>
 800db30:	4b10      	ldr	r3, [pc, #64]	; (800db74 <tcp_input+0x280>)
 800db32:	22fc      	movs	r2, #252	; 0xfc
 800db34:	4920      	ldr	r1, [pc, #128]	; (800dbb8 <tcp_input+0x2c4>)
 800db36:	4811      	ldr	r0, [pc, #68]	; (800db7c <tcp_input+0x288>)
 800db38:	f007 f88a 	bl	8014c50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	7d1b      	ldrb	r3, [r3, #20]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d105      	bne.n	800db50 <tcp_input+0x25c>
 800db44:	4b0b      	ldr	r3, [pc, #44]	; (800db74 <tcp_input+0x280>)
 800db46:	22fd      	movs	r2, #253	; 0xfd
 800db48:	491c      	ldr	r1, [pc, #112]	; (800dbbc <tcp_input+0x2c8>)
 800db4a:	480c      	ldr	r0, [pc, #48]	; (800db7c <tcp_input+0x288>)
 800db4c:	f007 f880 	bl	8014c50 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	7a1b      	ldrb	r3, [r3, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d033      	beq.n	800dbc0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	7a1a      	ldrb	r2, [r3, #8]
 800db5c:	4b09      	ldr	r3, [pc, #36]	; (800db84 <tcp_input+0x290>)
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db64:	3301      	adds	r3, #1
 800db66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db68:	429a      	cmp	r2, r3
 800db6a:	d029      	beq.n	800dbc0 <tcp_input+0x2cc>
      prev = pcb;
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	61bb      	str	r3, [r7, #24]
      continue;
 800db70:	e06b      	b.n	800dc4a <tcp_input+0x356>
 800db72:	bf00      	nop
 800db74:	08017678 	.word	0x08017678
 800db78:	080176ac 	.word	0x080176ac
 800db7c:	080176c4 	.word	0x080176c4
 800db80:	2001182c 	.word	0x2001182c
 800db84:	20009778 	.word	0x20009778
 800db88:	20011830 	.word	0x20011830
 800db8c:	20011834 	.word	0x20011834
 800db90:	20011832 	.word	0x20011832
 800db94:	080176ec 	.word	0x080176ec
 800db98:	080176fc 	.word	0x080176fc
 800db9c:	08017708 	.word	0x08017708
 800dba0:	2001183c 	.word	0x2001183c
 800dba4:	20011840 	.word	0x20011840
 800dba8:	20011848 	.word	0x20011848
 800dbac:	20011846 	.word	0x20011846
 800dbb0:	20011810 	.word	0x20011810
 800dbb4:	08017728 	.word	0x08017728
 800dbb8:	08017750 	.word	0x08017750
 800dbbc:	0801777c 	.word	0x0801777c
    }

    if (pcb->remote_port == tcphdr->src &&
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	8b1a      	ldrh	r2, [r3, #24]
 800dbc4:	4b72      	ldr	r3, [pc, #456]	; (800dd90 <tcp_input+0x49c>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	881b      	ldrh	r3, [r3, #0]
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d13a      	bne.n	800dc46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	8ada      	ldrh	r2, [r3, #22]
 800dbd4:	4b6e      	ldr	r3, [pc, #440]	; (800dd90 <tcp_input+0x49c>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	885b      	ldrh	r3, [r3, #2]
 800dbda:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d132      	bne.n	800dc46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	4b6b      	ldr	r3, [pc, #428]	; (800dd94 <tcp_input+0x4a0>)
 800dbe6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d12c      	bne.n	800dc46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	4b68      	ldr	r3, [pc, #416]	; (800dd94 <tcp_input+0x4a0>)
 800dbf2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d126      	bne.n	800dc46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	69fa      	ldr	r2, [r7, #28]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d106      	bne.n	800dc10 <tcp_input+0x31c>
 800dc02:	4b65      	ldr	r3, [pc, #404]	; (800dd98 <tcp_input+0x4a4>)
 800dc04:	f240 120d 	movw	r2, #269	; 0x10d
 800dc08:	4964      	ldr	r1, [pc, #400]	; (800dd9c <tcp_input+0x4a8>)
 800dc0a:	4865      	ldr	r0, [pc, #404]	; (800dda0 <tcp_input+0x4ac>)
 800dc0c:	f007 f820 	bl	8014c50 <iprintf>
      if (prev != NULL) {
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00a      	beq.n	800dc2c <tcp_input+0x338>
        prev->next = pcb->next;
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	68da      	ldr	r2, [r3, #12]
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dc1e:	4b61      	ldr	r3, [pc, #388]	; (800dda4 <tcp_input+0x4b0>)
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dc26:	4a5f      	ldr	r2, [pc, #380]	; (800dda4 <tcp_input+0x4b0>)
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d111      	bne.n	800dc5a <tcp_input+0x366>
 800dc36:	4b58      	ldr	r3, [pc, #352]	; (800dd98 <tcp_input+0x4a4>)
 800dc38:	f240 1215 	movw	r2, #277	; 0x115
 800dc3c:	495a      	ldr	r1, [pc, #360]	; (800dda8 <tcp_input+0x4b4>)
 800dc3e:	4858      	ldr	r0, [pc, #352]	; (800dda0 <tcp_input+0x4ac>)
 800dc40:	f007 f806 	bl	8014c50 <iprintf>
      break;
 800dc44:	e009      	b.n	800dc5a <tcp_input+0x366>
    }
    prev = pcb;
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	61fb      	str	r3, [r7, #28]
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f47f af5e 	bne.w	800db14 <tcp_input+0x220>
 800dc58:	e000      	b.n	800dc5c <tcp_input+0x368>
      break;
 800dc5a:	bf00      	nop
  }

  if (pcb == NULL) {
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f040 80aa 	bne.w	800ddb8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc64:	4b51      	ldr	r3, [pc, #324]	; (800ddac <tcp_input+0x4b8>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	61fb      	str	r3, [r7, #28]
 800dc6a:	e03f      	b.n	800dcec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	7d1b      	ldrb	r3, [r3, #20]
 800dc70:	2b0a      	cmp	r3, #10
 800dc72:	d006      	beq.n	800dc82 <tcp_input+0x38e>
 800dc74:	4b48      	ldr	r3, [pc, #288]	; (800dd98 <tcp_input+0x4a4>)
 800dc76:	f240 121f 	movw	r2, #287	; 0x11f
 800dc7a:	494d      	ldr	r1, [pc, #308]	; (800ddb0 <tcp_input+0x4bc>)
 800dc7c:	4848      	ldr	r0, [pc, #288]	; (800dda0 <tcp_input+0x4ac>)
 800dc7e:	f006 ffe7 	bl	8014c50 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	7a1b      	ldrb	r3, [r3, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d009      	beq.n	800dc9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	7a1a      	ldrb	r2, [r3, #8]
 800dc8e:	4b41      	ldr	r3, [pc, #260]	; (800dd94 <tcp_input+0x4a0>)
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc96:	3301      	adds	r3, #1
 800dc98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d122      	bne.n	800dce4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	8b1a      	ldrh	r2, [r3, #24]
 800dca2:	4b3b      	ldr	r3, [pc, #236]	; (800dd90 <tcp_input+0x49c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d11b      	bne.n	800dce6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	8ada      	ldrh	r2, [r3, #22]
 800dcb2:	4b37      	ldr	r3, [pc, #220]	; (800dd90 <tcp_input+0x49c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	885b      	ldrh	r3, [r3, #2]
 800dcb8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d113      	bne.n	800dce6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	4b34      	ldr	r3, [pc, #208]	; (800dd94 <tcp_input+0x4a0>)
 800dcc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d10d      	bne.n	800dce6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	4b31      	ldr	r3, [pc, #196]	; (800dd94 <tcp_input+0x4a0>)
 800dcd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d107      	bne.n	800dce6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dcd6:	69f8      	ldr	r0, [r7, #28]
 800dcd8:	f000 fb56 	bl	800e388 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7fd fd03 	bl	800b6e8 <pbuf_free>
        return;
 800dce2:	e1fd      	b.n	800e0e0 <tcp_input+0x7ec>
        continue;
 800dce4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	61fb      	str	r3, [r7, #28]
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1bc      	bne.n	800dc6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcf6:	4b2f      	ldr	r3, [pc, #188]	; (800ddb4 <tcp_input+0x4c0>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	617b      	str	r3, [r7, #20]
 800dcfc:	e02a      	b.n	800dd54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	7a1b      	ldrb	r3, [r3, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00c      	beq.n	800dd20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	7a1a      	ldrb	r2, [r3, #8]
 800dd0a:	4b22      	ldr	r3, [pc, #136]	; (800dd94 <tcp_input+0x4a0>)
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd12:	3301      	adds	r3, #1
 800dd14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d002      	beq.n	800dd20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	61bb      	str	r3, [r7, #24]
        continue;
 800dd1e:	e016      	b.n	800dd4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	8ada      	ldrh	r2, [r3, #22]
 800dd24:	4b1a      	ldr	r3, [pc, #104]	; (800dd90 <tcp_input+0x49c>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	885b      	ldrh	r3, [r3, #2]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d10c      	bne.n	800dd4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	4b17      	ldr	r3, [pc, #92]	; (800dd94 <tcp_input+0x4a0>)
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d00f      	beq.n	800dd5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00d      	beq.n	800dd5e <tcp_input+0x46a>
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d009      	beq.n	800dd5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1d1      	bne.n	800dcfe <tcp_input+0x40a>
 800dd5a:	e000      	b.n	800dd5e <tcp_input+0x46a>
            break;
 800dd5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d029      	beq.n	800ddb8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00a      	beq.n	800dd80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	68da      	ldr	r2, [r3, #12]
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dd72:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <tcp_input+0x4c0>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dd7a:	4a0e      	ldr	r2, [pc, #56]	; (800ddb4 <tcp_input+0x4c0>)
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dd80:	6978      	ldr	r0, [r7, #20]
 800dd82:	f000 fa03 	bl	800e18c <tcp_listen_input>
      }
      pbuf_free(p);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7fd fcae 	bl	800b6e8 <pbuf_free>
      return;
 800dd8c:	e1a8      	b.n	800e0e0 <tcp_input+0x7ec>
 800dd8e:	bf00      	nop
 800dd90:	2001182c 	.word	0x2001182c
 800dd94:	20009778 	.word	0x20009778
 800dd98:	08017678 	.word	0x08017678
 800dd9c:	080177a4 	.word	0x080177a4
 800dda0:	080176c4 	.word	0x080176c4
 800dda4:	20011810 	.word	0x20011810
 800dda8:	080177d0 	.word	0x080177d0
 800ddac:	20011814 	.word	0x20011814
 800ddb0:	080177fc 	.word	0x080177fc
 800ddb4:	2001180c 	.word	0x2001180c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 8158 	beq.w	800e070 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ddc0:	4b95      	ldr	r3, [pc, #596]	; (800e018 <tcp_input+0x724>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	891a      	ldrh	r2, [r3, #8]
 800ddca:	4b93      	ldr	r3, [pc, #588]	; (800e018 <tcp_input+0x724>)
 800ddcc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ddce:	4a92      	ldr	r2, [pc, #584]	; (800e018 <tcp_input+0x724>)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ddd4:	4b91      	ldr	r3, [pc, #580]	; (800e01c <tcp_input+0x728>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a8f      	ldr	r2, [pc, #572]	; (800e018 <tcp_input+0x724>)
 800ddda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dddc:	4b90      	ldr	r3, [pc, #576]	; (800e020 <tcp_input+0x72c>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dde2:	4b90      	ldr	r3, [pc, #576]	; (800e024 <tcp_input+0x730>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dde8:	4b8f      	ldr	r3, [pc, #572]	; (800e028 <tcp_input+0x734>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ddee:	4b8f      	ldr	r3, [pc, #572]	; (800e02c <tcp_input+0x738>)
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	f003 0308 	and.w	r3, r3, #8
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d006      	beq.n	800de08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	7b5b      	ldrb	r3, [r3, #13]
 800ddfe:	f043 0301 	orr.w	r3, r3, #1
 800de02:	b2da      	uxtb	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d017      	beq.n	800de40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de10:	69f8      	ldr	r0, [r7, #28]
 800de12:	f7ff f85b 	bl	800cecc <tcp_process_refused_data>
 800de16:	4603      	mov	r3, r0
 800de18:	f113 0f0d 	cmn.w	r3, #13
 800de1c:	d007      	beq.n	800de2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00c      	beq.n	800de40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de26:	4b82      	ldr	r3, [pc, #520]	; (800e030 <tcp_input+0x73c>)
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d008      	beq.n	800de40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de32:	2b00      	cmp	r3, #0
 800de34:	f040 80e3 	bne.w	800dffe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800de38:	69f8      	ldr	r0, [r7, #28]
 800de3a:	f003 fe05 	bl	8011a48 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800de3e:	e0de      	b.n	800dffe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800de40:	4a7c      	ldr	r2, [pc, #496]	; (800e034 <tcp_input+0x740>)
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800de46:	69f8      	ldr	r0, [r7, #28]
 800de48:	f000 fb18 	bl	800e47c <tcp_process>
 800de4c:	4603      	mov	r3, r0
 800de4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800de50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de54:	f113 0f0d 	cmn.w	r3, #13
 800de58:	f000 80d3 	beq.w	800e002 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800de5c:	4b71      	ldr	r3, [pc, #452]	; (800e024 <tcp_input+0x730>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	f003 0308 	and.w	r3, r3, #8
 800de64:	2b00      	cmp	r3, #0
 800de66:	d015      	beq.n	800de94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d008      	beq.n	800de84 <tcp_input+0x590>
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de78:	69fa      	ldr	r2, [r7, #28]
 800de7a:	6912      	ldr	r2, [r2, #16]
 800de7c:	f06f 010d 	mvn.w	r1, #13
 800de80:	4610      	mov	r0, r2
 800de82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800de84:	69f9      	ldr	r1, [r7, #28]
 800de86:	486c      	ldr	r0, [pc, #432]	; (800e038 <tcp_input+0x744>)
 800de88:	f7ff fbbc 	bl	800d604 <tcp_pcb_remove>
        tcp_free(pcb);
 800de8c:	69f8      	ldr	r0, [r7, #28]
 800de8e:	f7fd fed7 	bl	800bc40 <tcp_free>
 800de92:	e0da      	b.n	800e04a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800de98:	4b63      	ldr	r3, [pc, #396]	; (800e028 <tcp_input+0x734>)
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d01d      	beq.n	800dedc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dea0:	4b61      	ldr	r3, [pc, #388]	; (800e028 <tcp_input+0x734>)
 800dea2:	881b      	ldrh	r3, [r3, #0]
 800dea4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00a      	beq.n	800dec6 <tcp_input+0x5d2>
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deb6:	69fa      	ldr	r2, [r7, #28]
 800deb8:	6910      	ldr	r0, [r2, #16]
 800deba:	89fa      	ldrh	r2, [r7, #14]
 800debc:	69f9      	ldr	r1, [r7, #28]
 800debe:	4798      	blx	r3
 800dec0:	4603      	mov	r3, r0
 800dec2:	74fb      	strb	r3, [r7, #19]
 800dec4:	e001      	b.n	800deca <tcp_input+0x5d6>
 800dec6:	2300      	movs	r3, #0
 800dec8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800deca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dece:	f113 0f0d 	cmn.w	r3, #13
 800ded2:	f000 8098 	beq.w	800e006 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ded6:	4b54      	ldr	r3, [pc, #336]	; (800e028 <tcp_input+0x734>)
 800ded8:	2200      	movs	r2, #0
 800deda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dedc:	69f8      	ldr	r0, [r7, #28]
 800dede:	f000 f915 	bl	800e10c <tcp_input_delayed_close>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f040 8090 	bne.w	800e00a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800deea:	4b4d      	ldr	r3, [pc, #308]	; (800e020 <tcp_input+0x72c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d041      	beq.n	800df76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800def6:	2b00      	cmp	r3, #0
 800def8:	d006      	beq.n	800df08 <tcp_input+0x614>
 800defa:	4b50      	ldr	r3, [pc, #320]	; (800e03c <tcp_input+0x748>)
 800defc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800df00:	494f      	ldr	r1, [pc, #316]	; (800e040 <tcp_input+0x74c>)
 800df02:	4850      	ldr	r0, [pc, #320]	; (800e044 <tcp_input+0x750>)
 800df04:	f006 fea4 	bl	8014c50 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	8b5b      	ldrh	r3, [r3, #26]
 800df0c:	f003 0310 	and.w	r3, r3, #16
 800df10:	2b00      	cmp	r3, #0
 800df12:	d008      	beq.n	800df26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800df14:	4b42      	ldr	r3, [pc, #264]	; (800e020 <tcp_input+0x72c>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fd fbe5 	bl	800b6e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800df1e:	69f8      	ldr	r0, [r7, #28]
 800df20:	f7fe f9d2 	bl	800c2c8 <tcp_abort>
            goto aborted;
 800df24:	e091      	b.n	800e04a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00c      	beq.n	800df4a <tcp_input+0x656>
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	6918      	ldr	r0, [r3, #16]
 800df3a:	4b39      	ldr	r3, [pc, #228]	; (800e020 <tcp_input+0x72c>)
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	2300      	movs	r3, #0
 800df40:	69f9      	ldr	r1, [r7, #28]
 800df42:	47a0      	blx	r4
 800df44:	4603      	mov	r3, r0
 800df46:	74fb      	strb	r3, [r7, #19]
 800df48:	e008      	b.n	800df5c <tcp_input+0x668>
 800df4a:	4b35      	ldr	r3, [pc, #212]	; (800e020 <tcp_input+0x72c>)
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	2300      	movs	r3, #0
 800df50:	69f9      	ldr	r1, [r7, #28]
 800df52:	2000      	movs	r0, #0
 800df54:	f7ff f890 	bl	800d078 <tcp_recv_null>
 800df58:	4603      	mov	r3, r0
 800df5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800df5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df60:	f113 0f0d 	cmn.w	r3, #13
 800df64:	d053      	beq.n	800e00e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800df66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d003      	beq.n	800df76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800df6e:	4b2c      	ldr	r3, [pc, #176]	; (800e020 <tcp_input+0x72c>)
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800df76:	4b2b      	ldr	r3, [pc, #172]	; (800e024 <tcp_input+0x730>)
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	f003 0320 	and.w	r3, r3, #32
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d030      	beq.n	800dfe4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df86:	2b00      	cmp	r3, #0
 800df88:	d009      	beq.n	800df9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df8e:	7b5a      	ldrb	r2, [r3, #13]
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df94:	f042 0220 	orr.w	r2, r2, #32
 800df98:	b2d2      	uxtb	r2, r2
 800df9a:	735a      	strb	r2, [r3, #13]
 800df9c:	e022      	b.n	800dfe4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dfa6:	d005      	beq.n	800dfb4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfac:	3301      	adds	r3, #1
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00b      	beq.n	800dfd6 <tcp_input+0x6e2>
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	6918      	ldr	r0, [r3, #16]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	2200      	movs	r2, #0
 800dfcc:	69f9      	ldr	r1, [r7, #28]
 800dfce:	47a0      	blx	r4
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	74fb      	strb	r3, [r7, #19]
 800dfd4:	e001      	b.n	800dfda <tcp_input+0x6e6>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dfda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfde:	f113 0f0d 	cmn.w	r3, #13
 800dfe2:	d016      	beq.n	800e012 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dfe4:	4b13      	ldr	r3, [pc, #76]	; (800e034 <tcp_input+0x740>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dfea:	69f8      	ldr	r0, [r7, #28]
 800dfec:	f000 f88e 	bl	800e10c <tcp_input_delayed_close>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d128      	bne.n	800e048 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dff6:	69f8      	ldr	r0, [r7, #28]
 800dff8:	f002 ff20 	bl	8010e3c <tcp_output>
 800dffc:	e025      	b.n	800e04a <tcp_input+0x756>
        goto aborted;
 800dffe:	bf00      	nop
 800e000:	e023      	b.n	800e04a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e002:	bf00      	nop
 800e004:	e021      	b.n	800e04a <tcp_input+0x756>
              goto aborted;
 800e006:	bf00      	nop
 800e008:	e01f      	b.n	800e04a <tcp_input+0x756>
          goto aborted;
 800e00a:	bf00      	nop
 800e00c:	e01d      	b.n	800e04a <tcp_input+0x756>
            goto aborted;
 800e00e:	bf00      	nop
 800e010:	e01b      	b.n	800e04a <tcp_input+0x756>
              goto aborted;
 800e012:	bf00      	nop
 800e014:	e019      	b.n	800e04a <tcp_input+0x756>
 800e016:	bf00      	nop
 800e018:	2001181c 	.word	0x2001181c
 800e01c:	2001182c 	.word	0x2001182c
 800e020:	2001184c 	.word	0x2001184c
 800e024:	20011849 	.word	0x20011849
 800e028:	20011844 	.word	0x20011844
 800e02c:	20011848 	.word	0x20011848
 800e030:	20011846 	.word	0x20011846
 800e034:	20011850 	.word	0x20011850
 800e038:	20011810 	.word	0x20011810
 800e03c:	08017678 	.word	0x08017678
 800e040:	0801782c 	.word	0x0801782c
 800e044:	080176c4 	.word	0x080176c4
          goto aborted;
 800e048:	bf00      	nop
    tcp_input_pcb = NULL;
 800e04a:	4b27      	ldr	r3, [pc, #156]	; (800e0e8 <tcp_input+0x7f4>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e050:	4b26      	ldr	r3, [pc, #152]	; (800e0ec <tcp_input+0x7f8>)
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e056:	4b26      	ldr	r3, [pc, #152]	; (800e0f0 <tcp_input+0x7fc>)
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d03f      	beq.n	800e0de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e05e:	4b24      	ldr	r3, [pc, #144]	; (800e0f0 <tcp_input+0x7fc>)
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	4618      	mov	r0, r3
 800e064:	f7fd fb40 	bl	800b6e8 <pbuf_free>
      inseg.p = NULL;
 800e068:	4b21      	ldr	r3, [pc, #132]	; (800e0f0 <tcp_input+0x7fc>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e06e:	e036      	b.n	800e0de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e070:	4b20      	ldr	r3, [pc, #128]	; (800e0f4 <tcp_input+0x800>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	899b      	ldrh	r3, [r3, #12]
 800e076:	b29b      	uxth	r3, r3
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fb ff49 	bl	8009f10 <lwip_htons>
 800e07e:	4603      	mov	r3, r0
 800e080:	b2db      	uxtb	r3, r3
 800e082:	f003 0304 	and.w	r3, r3, #4
 800e086:	2b00      	cmp	r3, #0
 800e088:	d118      	bne.n	800e0bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e08a:	4b1b      	ldr	r3, [pc, #108]	; (800e0f8 <tcp_input+0x804>)
 800e08c:	6819      	ldr	r1, [r3, #0]
 800e08e:	4b1b      	ldr	r3, [pc, #108]	; (800e0fc <tcp_input+0x808>)
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	4b1a      	ldr	r3, [pc, #104]	; (800e100 <tcp_input+0x80c>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e09a:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <tcp_input+0x800>)
 800e09c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e09e:	885b      	ldrh	r3, [r3, #2]
 800e0a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0a2:	4a14      	ldr	r2, [pc, #80]	; (800e0f4 <tcp_input+0x800>)
 800e0a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0a6:	8812      	ldrh	r2, [r2, #0]
 800e0a8:	b292      	uxth	r2, r2
 800e0aa:	9202      	str	r2, [sp, #8]
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	4b15      	ldr	r3, [pc, #84]	; (800e104 <tcp_input+0x810>)
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	4b15      	ldr	r3, [pc, #84]	; (800e108 <tcp_input+0x814>)
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f003 fc74 	bl	80119a4 <tcp_rst>
    pbuf_free(p);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7fd fb13 	bl	800b6e8 <pbuf_free>
  return;
 800e0c2:	e00c      	b.n	800e0de <tcp_input+0x7ea>
    goto dropped;
 800e0c4:	bf00      	nop
 800e0c6:	e006      	b.n	800e0d6 <tcp_input+0x7e2>
    goto dropped;
 800e0c8:	bf00      	nop
 800e0ca:	e004      	b.n	800e0d6 <tcp_input+0x7e2>
    goto dropped;
 800e0cc:	bf00      	nop
 800e0ce:	e002      	b.n	800e0d6 <tcp_input+0x7e2>
      goto dropped;
 800e0d0:	bf00      	nop
 800e0d2:	e000      	b.n	800e0d6 <tcp_input+0x7e2>
      goto dropped;
 800e0d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7fd fb06 	bl	800b6e8 <pbuf_free>
 800e0dc:	e000      	b.n	800e0e0 <tcp_input+0x7ec>
  return;
 800e0de:	bf00      	nop
}
 800e0e0:	3724      	adds	r7, #36	; 0x24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd90      	pop	{r4, r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20011850 	.word	0x20011850
 800e0ec:	2001184c 	.word	0x2001184c
 800e0f0:	2001181c 	.word	0x2001181c
 800e0f4:	2001182c 	.word	0x2001182c
 800e0f8:	20011840 	.word	0x20011840
 800e0fc:	20011846 	.word	0x20011846
 800e100:	2001183c 	.word	0x2001183c
 800e104:	20009788 	.word	0x20009788
 800e108:	2000978c 	.word	0x2000978c

0800e10c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <tcp_input_delayed_close+0x1c>
 800e11a:	4b17      	ldr	r3, [pc, #92]	; (800e178 <tcp_input_delayed_close+0x6c>)
 800e11c:	f240 225a 	movw	r2, #602	; 0x25a
 800e120:	4916      	ldr	r1, [pc, #88]	; (800e17c <tcp_input_delayed_close+0x70>)
 800e122:	4817      	ldr	r0, [pc, #92]	; (800e180 <tcp_input_delayed_close+0x74>)
 800e124:	f006 fd94 	bl	8014c50 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e128:	4b16      	ldr	r3, [pc, #88]	; (800e184 <tcp_input_delayed_close+0x78>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	f003 0310 	and.w	r3, r3, #16
 800e130:	2b00      	cmp	r3, #0
 800e132:	d01c      	beq.n	800e16e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	8b5b      	ldrh	r3, [r3, #26]
 800e138:	f003 0310 	and.w	r3, r3, #16
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10d      	bne.n	800e15c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e146:	2b00      	cmp	r3, #0
 800e148:	d008      	beq.n	800e15c <tcp_input_delayed_close+0x50>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	6912      	ldr	r2, [r2, #16]
 800e154:	f06f 010e 	mvn.w	r1, #14
 800e158:	4610      	mov	r0, r2
 800e15a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	480a      	ldr	r0, [pc, #40]	; (800e188 <tcp_input_delayed_close+0x7c>)
 800e160:	f7ff fa50 	bl	800d604 <tcp_pcb_remove>
    tcp_free(pcb);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7fd fd6b 	bl	800bc40 <tcp_free>
    return 1;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e000      	b.n	800e170 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	08017678 	.word	0x08017678
 800e17c:	08017848 	.word	0x08017848
 800e180:	080176c4 	.word	0x080176c4
 800e184:	20011849 	.word	0x20011849
 800e188:	20011810 	.word	0x20011810

0800e18c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b08b      	sub	sp, #44	; 0x2c
 800e190:	af04      	add	r7, sp, #16
 800e192:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e194:	4b6f      	ldr	r3, [pc, #444]	; (800e354 <tcp_listen_input+0x1c8>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 0304 	and.w	r3, r3, #4
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f040 80d2 	bne.w	800e346 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d106      	bne.n	800e1b6 <tcp_listen_input+0x2a>
 800e1a8:	4b6b      	ldr	r3, [pc, #428]	; (800e358 <tcp_listen_input+0x1cc>)
 800e1aa:	f240 2281 	movw	r2, #641	; 0x281
 800e1ae:	496b      	ldr	r1, [pc, #428]	; (800e35c <tcp_listen_input+0x1d0>)
 800e1b0:	486b      	ldr	r0, [pc, #428]	; (800e360 <tcp_listen_input+0x1d4>)
 800e1b2:	f006 fd4d 	bl	8014c50 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e1b6:	4b67      	ldr	r3, [pc, #412]	; (800e354 <tcp_listen_input+0x1c8>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	f003 0310 	and.w	r3, r3, #16
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d019      	beq.n	800e1f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1c2:	4b68      	ldr	r3, [pc, #416]	; (800e364 <tcp_listen_input+0x1d8>)
 800e1c4:	6819      	ldr	r1, [r3, #0]
 800e1c6:	4b68      	ldr	r3, [pc, #416]	; (800e368 <tcp_listen_input+0x1dc>)
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	4b67      	ldr	r3, [pc, #412]	; (800e36c <tcp_listen_input+0x1e0>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1d2:	4b67      	ldr	r3, [pc, #412]	; (800e370 <tcp_listen_input+0x1e4>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1d6:	885b      	ldrh	r3, [r3, #2]
 800e1d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1da:	4a65      	ldr	r2, [pc, #404]	; (800e370 <tcp_listen_input+0x1e4>)
 800e1dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1de:	8812      	ldrh	r2, [r2, #0]
 800e1e0:	b292      	uxth	r2, r2
 800e1e2:	9202      	str	r2, [sp, #8]
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	4b63      	ldr	r3, [pc, #396]	; (800e374 <tcp_listen_input+0x1e8>)
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	4b63      	ldr	r3, [pc, #396]	; (800e378 <tcp_listen_input+0x1ec>)
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f003 fbd8 	bl	80119a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e1f4:	e0a9      	b.n	800e34a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e1f6:	4b57      	ldr	r3, [pc, #348]	; (800e354 <tcp_listen_input+0x1c8>)
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	f003 0302 	and.w	r3, r3, #2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 80a3 	beq.w	800e34a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7d5b      	ldrb	r3, [r3, #21]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7ff f859 	bl	800d2c0 <tcp_alloc>
 800e20e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d111      	bne.n	800e23a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <tcp_listen_input+0xa8>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	6910      	ldr	r0, [r2, #16]
 800e226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e22a:	2100      	movs	r1, #0
 800e22c:	4798      	blx	r3
 800e22e:	4603      	mov	r3, r0
 800e230:	73bb      	strb	r3, [r7, #14]
      return;
 800e232:	e08b      	b.n	800e34c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e234:	23f0      	movs	r3, #240	; 0xf0
 800e236:	73bb      	strb	r3, [r7, #14]
      return;
 800e238:	e088      	b.n	800e34c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e23a:	4b50      	ldr	r3, [pc, #320]	; (800e37c <tcp_listen_input+0x1f0>)
 800e23c:	695a      	ldr	r2, [r3, #20]
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e242:	4b4e      	ldr	r3, [pc, #312]	; (800e37c <tcp_listen_input+0x1f0>)
 800e244:	691a      	ldr	r2, [r3, #16]
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	8ada      	ldrh	r2, [r3, #22]
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e252:	4b47      	ldr	r3, [pc, #284]	; (800e370 <tcp_listen_input+0x1e4>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	b29a      	uxth	r2, r3
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2203      	movs	r2, #3
 800e262:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e264:	4b41      	ldr	r3, [pc, #260]	; (800e36c <tcp_listen_input+0x1e0>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	1c5a      	adds	r2, r3, #1
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e276:	6978      	ldr	r0, [r7, #20]
 800e278:	f7ff fa58 	bl	800d72c <tcp_next_iss>
 800e27c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	693a      	ldr	r2, [r7, #16]
 800e282:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	693a      	ldr	r2, [r7, #16]
 800e288:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	693a      	ldr	r2, [r7, #16]
 800e28e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e296:	4b35      	ldr	r3, [pc, #212]	; (800e36c <tcp_listen_input+0x1e0>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	1e5a      	subs	r2, r3, #1
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	691a      	ldr	r2, [r3, #16]
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7a5b      	ldrb	r3, [r3, #9]
 800e2b2:	f003 030c 	and.w	r3, r3, #12
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7a1a      	ldrb	r2, [r3, #8]
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e2c4:	4b2e      	ldr	r3, [pc, #184]	; (800e380 <tcp_listen_input+0x1f4>)
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	60da      	str	r2, [r3, #12]
 800e2cc:	4a2c      	ldr	r2, [pc, #176]	; (800e380 <tcp_listen_input+0x1f4>)
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	f003 fd29 	bl	8011d28 <tcp_timer_needed>
 800e2d6:	4b2b      	ldr	r3, [pc, #172]	; (800e384 <tcp_listen_input+0x1f8>)
 800e2d8:	2201      	movs	r2, #1
 800e2da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e2dc:	6978      	ldr	r0, [r7, #20]
 800e2de:	f001 fd8f 	bl	800fe00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e2e2:	4b23      	ldr	r3, [pc, #140]	; (800e370 <tcp_listen_input+0x1e4>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	89db      	ldrh	r3, [r3, #14]
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	3304      	adds	r3, #4
 800e304:	4618      	mov	r0, r3
 800e306:	f004 ff63 	bl	80131d0 <ip4_route>
 800e30a:	4601      	mov	r1, r0
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	3304      	adds	r3, #4
 800e310:	461a      	mov	r2, r3
 800e312:	4620      	mov	r0, r4
 800e314:	f7ff fa30 	bl	800d778 <tcp_eff_send_mss_netif>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e320:	2112      	movs	r1, #18
 800e322:	6978      	ldr	r0, [r7, #20]
 800e324:	f002 fc9c 	bl	8010c60 <tcp_enqueue_flags>
 800e328:	4603      	mov	r3, r0
 800e32a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e334:	2100      	movs	r1, #0
 800e336:	6978      	ldr	r0, [r7, #20]
 800e338:	f7fd ff08 	bl	800c14c <tcp_abandon>
      return;
 800e33c:	e006      	b.n	800e34c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e33e:	6978      	ldr	r0, [r7, #20]
 800e340:	f002 fd7c 	bl	8010e3c <tcp_output>
  return;
 800e344:	e001      	b.n	800e34a <tcp_listen_input+0x1be>
    return;
 800e346:	bf00      	nop
 800e348:	e000      	b.n	800e34c <tcp_listen_input+0x1c0>
  return;
 800e34a:	bf00      	nop
}
 800e34c:	371c      	adds	r7, #28
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd90      	pop	{r4, r7, pc}
 800e352:	bf00      	nop
 800e354:	20011848 	.word	0x20011848
 800e358:	08017678 	.word	0x08017678
 800e35c:	08017870 	.word	0x08017870
 800e360:	080176c4 	.word	0x080176c4
 800e364:	20011840 	.word	0x20011840
 800e368:	20011846 	.word	0x20011846
 800e36c:	2001183c 	.word	0x2001183c
 800e370:	2001182c 	.word	0x2001182c
 800e374:	20009788 	.word	0x20009788
 800e378:	2000978c 	.word	0x2000978c
 800e37c:	20009778 	.word	0x20009778
 800e380:	20011810 	.word	0x20011810
 800e384:	20011818 	.word	0x20011818

0800e388 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af04      	add	r7, sp, #16
 800e38e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e390:	4b2f      	ldr	r3, [pc, #188]	; (800e450 <tcp_timewait_input+0xc8>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	f003 0304 	and.w	r3, r3, #4
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d153      	bne.n	800e444 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d106      	bne.n	800e3b0 <tcp_timewait_input+0x28>
 800e3a2:	4b2c      	ldr	r3, [pc, #176]	; (800e454 <tcp_timewait_input+0xcc>)
 800e3a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e3a8:	492b      	ldr	r1, [pc, #172]	; (800e458 <tcp_timewait_input+0xd0>)
 800e3aa:	482c      	ldr	r0, [pc, #176]	; (800e45c <tcp_timewait_input+0xd4>)
 800e3ac:	f006 fc50 	bl	8014c50 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e3b0:	4b27      	ldr	r3, [pc, #156]	; (800e450 <tcp_timewait_input+0xc8>)
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	f003 0302 	and.w	r3, r3, #2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d02a      	beq.n	800e412 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e3bc:	4b28      	ldr	r3, [pc, #160]	; (800e460 <tcp_timewait_input+0xd8>)
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	db2d      	blt.n	800e426 <tcp_timewait_input+0x9e>
 800e3ca:	4b25      	ldr	r3, [pc, #148]	; (800e460 <tcp_timewait_input+0xd8>)
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d2:	6879      	ldr	r1, [r7, #4]
 800e3d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3d6:	440b      	add	r3, r1
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	dc23      	bgt.n	800e426 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3de:	4b21      	ldr	r3, [pc, #132]	; (800e464 <tcp_timewait_input+0xdc>)
 800e3e0:	6819      	ldr	r1, [r3, #0]
 800e3e2:	4b21      	ldr	r3, [pc, #132]	; (800e468 <tcp_timewait_input+0xe0>)
 800e3e4:	881b      	ldrh	r3, [r3, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	4b1d      	ldr	r3, [pc, #116]	; (800e460 <tcp_timewait_input+0xd8>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3ee:	4b1f      	ldr	r3, [pc, #124]	; (800e46c <tcp_timewait_input+0xe4>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f2:	885b      	ldrh	r3, [r3, #2]
 800e3f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3f6:	4a1d      	ldr	r2, [pc, #116]	; (800e46c <tcp_timewait_input+0xe4>)
 800e3f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3fa:	8812      	ldrh	r2, [r2, #0]
 800e3fc:	b292      	uxth	r2, r2
 800e3fe:	9202      	str	r2, [sp, #8]
 800e400:	9301      	str	r3, [sp, #4]
 800e402:	4b1b      	ldr	r3, [pc, #108]	; (800e470 <tcp_timewait_input+0xe8>)
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	4b1b      	ldr	r3, [pc, #108]	; (800e474 <tcp_timewait_input+0xec>)
 800e408:	4602      	mov	r2, r0
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f003 faca 	bl	80119a4 <tcp_rst>
      return;
 800e410:	e01b      	b.n	800e44a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e412:	4b0f      	ldr	r3, [pc, #60]	; (800e450 <tcp_timewait_input+0xc8>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	f003 0301 	and.w	r3, r3, #1
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d003      	beq.n	800e426 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e41e:	4b16      	ldr	r3, [pc, #88]	; (800e478 <tcp_timewait_input+0xf0>)
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e426:	4b10      	ldr	r3, [pc, #64]	; (800e468 <tcp_timewait_input+0xe0>)
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00c      	beq.n	800e448 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	8b5b      	ldrh	r3, [r3, #26]
 800e432:	f043 0302 	orr.w	r3, r3, #2
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f002 fcfd 	bl	8010e3c <tcp_output>
  }
  return;
 800e442:	e001      	b.n	800e448 <tcp_timewait_input+0xc0>
    return;
 800e444:	bf00      	nop
 800e446:	e000      	b.n	800e44a <tcp_timewait_input+0xc2>
  return;
 800e448:	bf00      	nop
}
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	20011848 	.word	0x20011848
 800e454:	08017678 	.word	0x08017678
 800e458:	08017890 	.word	0x08017890
 800e45c:	080176c4 	.word	0x080176c4
 800e460:	2001183c 	.word	0x2001183c
 800e464:	20011840 	.word	0x20011840
 800e468:	20011846 	.word	0x20011846
 800e46c:	2001182c 	.word	0x2001182c
 800e470:	20009788 	.word	0x20009788
 800e474:	2000978c 	.word	0x2000978c
 800e478:	20011804 	.word	0x20011804

0800e47c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b08d      	sub	sp, #52	; 0x34
 800e480:	af04      	add	r7, sp, #16
 800e482:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e488:	2300      	movs	r3, #0
 800e48a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d106      	bne.n	800e4a0 <tcp_process+0x24>
 800e492:	4b9d      	ldr	r3, [pc, #628]	; (800e708 <tcp_process+0x28c>)
 800e494:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e498:	499c      	ldr	r1, [pc, #624]	; (800e70c <tcp_process+0x290>)
 800e49a:	489d      	ldr	r0, [pc, #628]	; (800e710 <tcp_process+0x294>)
 800e49c:	f006 fbd8 	bl	8014c50 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e4a0:	4b9c      	ldr	r3, [pc, #624]	; (800e714 <tcp_process+0x298>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	f003 0304 	and.w	r3, r3, #4
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d04e      	beq.n	800e54a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	7d1b      	ldrb	r3, [r3, #20]
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d108      	bne.n	800e4c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4b8:	4b97      	ldr	r3, [pc, #604]	; (800e718 <tcp_process+0x29c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d123      	bne.n	800e508 <tcp_process+0x8c>
        acceptable = 1;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	76fb      	strb	r3, [r7, #27]
 800e4c4:	e020      	b.n	800e508 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ca:	4b94      	ldr	r3, [pc, #592]	; (800e71c <tcp_process+0x2a0>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d102      	bne.n	800e4d8 <tcp_process+0x5c>
        acceptable = 1;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	76fb      	strb	r3, [r7, #27]
 800e4d6:	e017      	b.n	800e508 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4d8:	4b90      	ldr	r3, [pc, #576]	; (800e71c <tcp_process+0x2a0>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	db10      	blt.n	800e508 <tcp_process+0x8c>
 800e4e6:	4b8d      	ldr	r3, [pc, #564]	; (800e71c <tcp_process+0x2a0>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4f2:	440b      	add	r3, r1
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	dc06      	bgt.n	800e508 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8b5b      	ldrh	r3, [r3, #26]
 800e4fe:	f043 0302 	orr.w	r3, r3, #2
 800e502:	b29a      	uxth	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e508:	7efb      	ldrb	r3, [r7, #27]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d01b      	beq.n	800e546 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	7d1b      	ldrb	r3, [r3, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d106      	bne.n	800e524 <tcp_process+0xa8>
 800e516:	4b7c      	ldr	r3, [pc, #496]	; (800e708 <tcp_process+0x28c>)
 800e518:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e51c:	4980      	ldr	r1, [pc, #512]	; (800e720 <tcp_process+0x2a4>)
 800e51e:	487c      	ldr	r0, [pc, #496]	; (800e710 <tcp_process+0x294>)
 800e520:	f006 fb96 	bl	8014c50 <iprintf>
      recv_flags |= TF_RESET;
 800e524:	4b7f      	ldr	r3, [pc, #508]	; (800e724 <tcp_process+0x2a8>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	f043 0308 	orr.w	r3, r3, #8
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	4b7d      	ldr	r3, [pc, #500]	; (800e724 <tcp_process+0x2a8>)
 800e530:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	8b5b      	ldrh	r3, [r3, #26]
 800e536:	f023 0301 	bic.w	r3, r3, #1
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e540:	f06f 030d 	mvn.w	r3, #13
 800e544:	e37a      	b.n	800ec3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	e378      	b.n	800ec3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e54a:	4b72      	ldr	r3, [pc, #456]	; (800e714 <tcp_process+0x298>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	f003 0302 	and.w	r3, r3, #2
 800e552:	2b00      	cmp	r3, #0
 800e554:	d010      	beq.n	800e578 <tcp_process+0xfc>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	7d1b      	ldrb	r3, [r3, #20]
 800e55a:	2b02      	cmp	r3, #2
 800e55c:	d00c      	beq.n	800e578 <tcp_process+0xfc>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7d1b      	ldrb	r3, [r3, #20]
 800e562:	2b03      	cmp	r3, #3
 800e564:	d008      	beq.n	800e578 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	8b5b      	ldrh	r3, [r3, #26]
 800e56a:	f043 0302 	orr.w	r3, r3, #2
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	e361      	b.n	800ec3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	8b5b      	ldrh	r3, [r3, #26]
 800e57c:	f003 0310 	and.w	r3, r3, #16
 800e580:	2b00      	cmp	r3, #0
 800e582:	d103      	bne.n	800e58c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e584:	4b68      	ldr	r3, [pc, #416]	; (800e728 <tcp_process+0x2ac>)
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f001 fc2f 	bl	800fe00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7d1b      	ldrb	r3, [r3, #20]
 800e5a6:	3b02      	subs	r3, #2
 800e5a8:	2b07      	cmp	r3, #7
 800e5aa:	f200 8337 	bhi.w	800ec1c <tcp_process+0x7a0>
 800e5ae:	a201      	add	r2, pc, #4	; (adr r2, 800e5b4 <tcp_process+0x138>)
 800e5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b4:	0800e5d5 	.word	0x0800e5d5
 800e5b8:	0800e805 	.word	0x0800e805
 800e5bc:	0800e97d 	.word	0x0800e97d
 800e5c0:	0800e9a7 	.word	0x0800e9a7
 800e5c4:	0800eacb 	.word	0x0800eacb
 800e5c8:	0800e97d 	.word	0x0800e97d
 800e5cc:	0800eb57 	.word	0x0800eb57
 800e5d0:	0800ebe7 	.word	0x0800ebe7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e5d4:	4b4f      	ldr	r3, [pc, #316]	; (800e714 <tcp_process+0x298>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f003 0310 	and.w	r3, r3, #16
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 80e4 	beq.w	800e7aa <tcp_process+0x32e>
 800e5e2:	4b4c      	ldr	r3, [pc, #304]	; (800e714 <tcp_process+0x298>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	f003 0302 	and.w	r3, r3, #2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 80dd 	beq.w	800e7aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	4b48      	ldr	r3, [pc, #288]	; (800e718 <tcp_process+0x29c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	f040 80d5 	bne.w	800e7aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e600:	4b46      	ldr	r3, [pc, #280]	; (800e71c <tcp_process+0x2a0>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e612:	4b41      	ldr	r3, [pc, #260]	; (800e718 <tcp_process+0x29c>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e61a:	4b44      	ldr	r3, [pc, #272]	; (800e72c <tcp_process+0x2b0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	89db      	ldrh	r3, [r3, #14]
 800e620:	b29a      	uxth	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e634:	4b39      	ldr	r3, [pc, #228]	; (800e71c <tcp_process+0x2a0>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	1e5a      	subs	r2, r3, #1
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2204      	movs	r2, #4
 800e642:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3304      	adds	r3, #4
 800e64c:	4618      	mov	r0, r3
 800e64e:	f004 fdbf 	bl	80131d0 <ip4_route>
 800e652:	4601      	mov	r1, r0
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	3304      	adds	r3, #4
 800e658:	461a      	mov	r2, r3
 800e65a:	4620      	mov	r0, r4
 800e65c:	f7ff f88c 	bl	800d778 <tcp_eff_send_mss_netif>
 800e660:	4603      	mov	r3, r0
 800e662:	461a      	mov	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e66c:	009a      	lsls	r2, r3, #2
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	f241 111c 	movw	r1, #4380	; 0x111c
 800e678:	428b      	cmp	r3, r1
 800e67a:	bf38      	it	cc
 800e67c:	460b      	movcc	r3, r1
 800e67e:	429a      	cmp	r2, r3
 800e680:	d204      	bcs.n	800e68c <tcp_process+0x210>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	b29b      	uxth	r3, r3
 800e68a:	e00d      	b.n	800e6a8 <tcp_process+0x22c>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	f241 121c 	movw	r2, #4380	; 0x111c
 800e696:	4293      	cmp	r3, r2
 800e698:	d904      	bls.n	800e6a4 <tcp_process+0x228>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e69e:	005b      	lsls	r3, r3, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	e001      	b.n	800e6a8 <tcp_process+0x22c>
 800e6a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <tcp_process+0x24a>
 800e6b8:	4b13      	ldr	r3, [pc, #76]	; (800e708 <tcp_process+0x28c>)
 800e6ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e6be:	491c      	ldr	r1, [pc, #112]	; (800e730 <tcp_process+0x2b4>)
 800e6c0:	4813      	ldr	r0, [pc, #76]	; (800e710 <tcp_process+0x294>)
 800e6c2:	f006 fac5 	bl	8014c50 <iprintf>
        --pcb->snd_queuelen;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d12a      	bne.n	800e738 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d106      	bne.n	800e6fc <tcp_process+0x280>
 800e6ee:	4b06      	ldr	r3, [pc, #24]	; (800e708 <tcp_process+0x28c>)
 800e6f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e6f4:	490f      	ldr	r1, [pc, #60]	; (800e734 <tcp_process+0x2b8>)
 800e6f6:	4806      	ldr	r0, [pc, #24]	; (800e710 <tcp_process+0x294>)
 800e6f8:	f006 faaa 	bl	8014c50 <iprintf>
          pcb->unsent = rseg->next;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	66da      	str	r2, [r3, #108]	; 0x6c
 800e704:	e01c      	b.n	800e740 <tcp_process+0x2c4>
 800e706:	bf00      	nop
 800e708:	08017678 	.word	0x08017678
 800e70c:	080178b0 	.word	0x080178b0
 800e710:	080176c4 	.word	0x080176c4
 800e714:	20011848 	.word	0x20011848
 800e718:	20011840 	.word	0x20011840
 800e71c:	2001183c 	.word	0x2001183c
 800e720:	080178cc 	.word	0x080178cc
 800e724:	20011849 	.word	0x20011849
 800e728:	20011804 	.word	0x20011804
 800e72c:	2001182c 	.word	0x2001182c
 800e730:	080178ec 	.word	0x080178ec
 800e734:	08017904 	.word	0x08017904
        } else {
          pcb->unacked = rseg->next;
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e740:	69f8      	ldr	r0, [r7, #28]
 800e742:	f7fe fc54 	bl	800cfee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d104      	bne.n	800e758 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e754:	861a      	strh	r2, [r3, #48]	; 0x30
 800e756:	e006      	b.n	800e766 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00a      	beq.n	800e786 <tcp_process+0x30a>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	6910      	ldr	r0, [r2, #16]
 800e77a:	2200      	movs	r2, #0
 800e77c:	6879      	ldr	r1, [r7, #4]
 800e77e:	4798      	blx	r3
 800e780:	4603      	mov	r3, r0
 800e782:	76bb      	strb	r3, [r7, #26]
 800e784:	e001      	b.n	800e78a <tcp_process+0x30e>
 800e786:	2300      	movs	r3, #0
 800e788:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e78a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e78e:	f113 0f0d 	cmn.w	r3, #13
 800e792:	d102      	bne.n	800e79a <tcp_process+0x31e>
          return ERR_ABRT;
 800e794:	f06f 030c 	mvn.w	r3, #12
 800e798:	e250      	b.n	800ec3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	8b5b      	ldrh	r3, [r3, #26]
 800e79e:	f043 0302 	orr.w	r3, r3, #2
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e7a8:	e23a      	b.n	800ec20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e7aa:	4b98      	ldr	r3, [pc, #608]	; (800ea0c <tcp_process+0x590>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	f003 0310 	and.w	r3, r3, #16
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f000 8234 	beq.w	800ec20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7b8:	4b95      	ldr	r3, [pc, #596]	; (800ea10 <tcp_process+0x594>)
 800e7ba:	6819      	ldr	r1, [r3, #0]
 800e7bc:	4b95      	ldr	r3, [pc, #596]	; (800ea14 <tcp_process+0x598>)
 800e7be:	881b      	ldrh	r3, [r3, #0]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	4b95      	ldr	r3, [pc, #596]	; (800ea18 <tcp_process+0x59c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7c8:	4b94      	ldr	r3, [pc, #592]	; (800ea1c <tcp_process+0x5a0>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7d0:	4a92      	ldr	r2, [pc, #584]	; (800ea1c <tcp_process+0x5a0>)
 800e7d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7d4:	8812      	ldrh	r2, [r2, #0]
 800e7d6:	b292      	uxth	r2, r2
 800e7d8:	9202      	str	r2, [sp, #8]
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	4b90      	ldr	r3, [pc, #576]	; (800ea20 <tcp_process+0x5a4>)
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	4b90      	ldr	r3, [pc, #576]	; (800ea24 <tcp_process+0x5a8>)
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f003 f8dd 	bl	80119a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7f0:	2b05      	cmp	r3, #5
 800e7f2:	f200 8215 	bhi.w	800ec20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f002 fea7 	bl	8011550 <tcp_rexmit_rto>
      break;
 800e802:	e20d      	b.n	800ec20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e804:	4b81      	ldr	r3, [pc, #516]	; (800ea0c <tcp_process+0x590>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f003 0310 	and.w	r3, r3, #16
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f000 80a1 	beq.w	800e954 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e812:	4b7f      	ldr	r3, [pc, #508]	; (800ea10 <tcp_process+0x594>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	3b01      	subs	r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	db7e      	blt.n	800e920 <tcp_process+0x4a4>
 800e822:	4b7b      	ldr	r3, [pc, #492]	; (800ea10 <tcp_process+0x594>)
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc77      	bgt.n	800e920 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2204      	movs	r2, #4
 800e834:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d102      	bne.n	800e844 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e83e:	23fa      	movs	r3, #250	; 0xfa
 800e840:	76bb      	strb	r3, [r7, #26]
 800e842:	e01d      	b.n	800e880 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d106      	bne.n	800e85c <tcp_process+0x3e0>
 800e84e:	4b76      	ldr	r3, [pc, #472]	; (800ea28 <tcp_process+0x5ac>)
 800e850:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e854:	4975      	ldr	r1, [pc, #468]	; (800ea2c <tcp_process+0x5b0>)
 800e856:	4876      	ldr	r0, [pc, #472]	; (800ea30 <tcp_process+0x5b4>)
 800e858:	f006 f9fa 	bl	8014c50 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00a      	beq.n	800e87c <tcp_process+0x400>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e86a:	699b      	ldr	r3, [r3, #24]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	6910      	ldr	r0, [r2, #16]
 800e870:	2200      	movs	r2, #0
 800e872:	6879      	ldr	r1, [r7, #4]
 800e874:	4798      	blx	r3
 800e876:	4603      	mov	r3, r0
 800e878:	76bb      	strb	r3, [r7, #26]
 800e87a:	e001      	b.n	800e880 <tcp_process+0x404>
 800e87c:	23f0      	movs	r3, #240	; 0xf0
 800e87e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e880:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00a      	beq.n	800e89e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e888:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e88c:	f113 0f0d 	cmn.w	r3, #13
 800e890:	d002      	beq.n	800e898 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7fd fd18 	bl	800c2c8 <tcp_abort>
            }
            return ERR_ABRT;
 800e898:	f06f 030c 	mvn.w	r3, #12
 800e89c:	e1ce      	b.n	800ec3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fae0 	bl	800ee64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e8a4:	4b63      	ldr	r3, [pc, #396]	; (800ea34 <tcp_process+0x5b8>)
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d005      	beq.n	800e8b8 <tcp_process+0x43c>
            recv_acked--;
 800e8ac:	4b61      	ldr	r3, [pc, #388]	; (800ea34 <tcp_process+0x5b8>)
 800e8ae:	881b      	ldrh	r3, [r3, #0]
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	4b5f      	ldr	r3, [pc, #380]	; (800ea34 <tcp_process+0x5b8>)
 800e8b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8bc:	009a      	lsls	r2, r3, #2
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e8c8:	428b      	cmp	r3, r1
 800e8ca:	bf38      	it	cc
 800e8cc:	460b      	movcc	r3, r1
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d204      	bcs.n	800e8dc <tcp_process+0x460>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	e00d      	b.n	800e8f8 <tcp_process+0x47c>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d904      	bls.n	800e8f4 <tcp_process+0x478>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ee:	005b      	lsls	r3, r3, #1
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	e001      	b.n	800e8f8 <tcp_process+0x47c>
 800e8f4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e8fe:	4b4e      	ldr	r3, [pc, #312]	; (800ea38 <tcp_process+0x5bc>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	f003 0320 	and.w	r3, r3, #32
 800e906:	2b00      	cmp	r3, #0
 800e908:	d037      	beq.n	800e97a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8b5b      	ldrh	r3, [r3, #26]
 800e90e:	f043 0302 	orr.w	r3, r3, #2
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2207      	movs	r2, #7
 800e91c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e91e:	e02c      	b.n	800e97a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e920:	4b3b      	ldr	r3, [pc, #236]	; (800ea10 <tcp_process+0x594>)
 800e922:	6819      	ldr	r1, [r3, #0]
 800e924:	4b3b      	ldr	r3, [pc, #236]	; (800ea14 <tcp_process+0x598>)
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	461a      	mov	r2, r3
 800e92a:	4b3b      	ldr	r3, [pc, #236]	; (800ea18 <tcp_process+0x59c>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e930:	4b3a      	ldr	r3, [pc, #232]	; (800ea1c <tcp_process+0x5a0>)
 800e932:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e934:	885b      	ldrh	r3, [r3, #2]
 800e936:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e938:	4a38      	ldr	r2, [pc, #224]	; (800ea1c <tcp_process+0x5a0>)
 800e93a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e93c:	8812      	ldrh	r2, [r2, #0]
 800e93e:	b292      	uxth	r2, r2
 800e940:	9202      	str	r2, [sp, #8]
 800e942:	9301      	str	r3, [sp, #4]
 800e944:	4b36      	ldr	r3, [pc, #216]	; (800ea20 <tcp_process+0x5a4>)
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	4b36      	ldr	r3, [pc, #216]	; (800ea24 <tcp_process+0x5a8>)
 800e94a:	4602      	mov	r2, r0
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f003 f829 	bl	80119a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e952:	e167      	b.n	800ec24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e954:	4b2d      	ldr	r3, [pc, #180]	; (800ea0c <tcp_process+0x590>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f003 0302 	and.w	r3, r3, #2
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 8161 	beq.w	800ec24 <tcp_process+0x7a8>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e966:	1e5a      	subs	r2, r3, #1
 800e968:	4b2b      	ldr	r3, [pc, #172]	; (800ea18 <tcp_process+0x59c>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	f040 8159 	bne.w	800ec24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f002 fe0e 	bl	8011594 <tcp_rexmit>
      break;
 800e978:	e154      	b.n	800ec24 <tcp_process+0x7a8>
 800e97a:	e153      	b.n	800ec24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fa71 	bl	800ee64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e982:	4b2d      	ldr	r3, [pc, #180]	; (800ea38 <tcp_process+0x5bc>)
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	f003 0320 	and.w	r3, r3, #32
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 814c 	beq.w	800ec28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	8b5b      	ldrh	r3, [r3, #26]
 800e994:	f043 0302 	orr.w	r3, r3, #2
 800e998:	b29a      	uxth	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2207      	movs	r2, #7
 800e9a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9a4:	e140      	b.n	800ec28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fa5c 	bl	800ee64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9ac:	4b22      	ldr	r3, [pc, #136]	; (800ea38 <tcp_process+0x5bc>)
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	f003 0320 	and.w	r3, r3, #32
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d071      	beq.n	800ea9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9b8:	4b14      	ldr	r3, [pc, #80]	; (800ea0c <tcp_process+0x590>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	f003 0310 	and.w	r3, r3, #16
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d060      	beq.n	800ea86 <tcp_process+0x60a>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9c8:	4b11      	ldr	r3, [pc, #68]	; (800ea10 <tcp_process+0x594>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d15a      	bne.n	800ea86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d156      	bne.n	800ea86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8b5b      	ldrh	r3, [r3, #26]
 800e9dc:	f043 0302 	orr.w	r3, r3, #2
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7fe fdbc 	bl	800d564 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e9ec:	4b13      	ldr	r3, [pc, #76]	; (800ea3c <tcp_process+0x5c0>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d105      	bne.n	800ea02 <tcp_process+0x586>
 800e9f6:	4b11      	ldr	r3, [pc, #68]	; (800ea3c <tcp_process+0x5c0>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	4a0f      	ldr	r2, [pc, #60]	; (800ea3c <tcp_process+0x5c0>)
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	e02e      	b.n	800ea60 <tcp_process+0x5e4>
 800ea02:	4b0e      	ldr	r3, [pc, #56]	; (800ea3c <tcp_process+0x5c0>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	e027      	b.n	800ea5a <tcp_process+0x5de>
 800ea0a:	bf00      	nop
 800ea0c:	20011848 	.word	0x20011848
 800ea10:	20011840 	.word	0x20011840
 800ea14:	20011846 	.word	0x20011846
 800ea18:	2001183c 	.word	0x2001183c
 800ea1c:	2001182c 	.word	0x2001182c
 800ea20:	20009788 	.word	0x20009788
 800ea24:	2000978c 	.word	0x2000978c
 800ea28:	08017678 	.word	0x08017678
 800ea2c:	08017918 	.word	0x08017918
 800ea30:	080176c4 	.word	0x080176c4
 800ea34:	20011844 	.word	0x20011844
 800ea38:	20011849 	.word	0x20011849
 800ea3c:	20011810 	.word	0x20011810
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d104      	bne.n	800ea54 <tcp_process+0x5d8>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	68da      	ldr	r2, [r3, #12]
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	60da      	str	r2, [r3, #12]
 800ea52:	e005      	b.n	800ea60 <tcp_process+0x5e4>
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	617b      	str	r3, [r7, #20]
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1ef      	bne.n	800ea40 <tcp_process+0x5c4>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	60da      	str	r2, [r3, #12]
 800ea66:	4b77      	ldr	r3, [pc, #476]	; (800ec44 <tcp_process+0x7c8>)
 800ea68:	2201      	movs	r2, #1
 800ea6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	220a      	movs	r2, #10
 800ea70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ea72:	4b75      	ldr	r3, [pc, #468]	; (800ec48 <tcp_process+0x7cc>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	60da      	str	r2, [r3, #12]
 800ea7a:	4a73      	ldr	r2, [pc, #460]	; (800ec48 <tcp_process+0x7cc>)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	f003 f952 	bl	8011d28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ea84:	e0d2      	b.n	800ec2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	8b5b      	ldrh	r3, [r3, #26]
 800ea8a:	f043 0302 	orr.w	r3, r3, #2
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2208      	movs	r2, #8
 800ea98:	751a      	strb	r2, [r3, #20]
      break;
 800ea9a:	e0c7      	b.n	800ec2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea9c:	4b6b      	ldr	r3, [pc, #428]	; (800ec4c <tcp_process+0x7d0>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	f003 0310 	and.w	r3, r3, #16
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f000 80c1 	beq.w	800ec2c <tcp_process+0x7b0>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaae:	4b68      	ldr	r3, [pc, #416]	; (800ec50 <tcp_process+0x7d4>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	f040 80ba 	bne.w	800ec2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f040 80b5 	bne.w	800ec2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2206      	movs	r2, #6
 800eac6:	751a      	strb	r2, [r3, #20]
      break;
 800eac8:	e0b0      	b.n	800ec2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9ca 	bl	800ee64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ead0:	4b60      	ldr	r3, [pc, #384]	; (800ec54 <tcp_process+0x7d8>)
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	f003 0320 	and.w	r3, r3, #32
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f000 80a9 	beq.w	800ec30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	8b5b      	ldrh	r3, [r3, #26]
 800eae2:	f043 0302 	orr.w	r3, r3, #2
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7fe fd39 	bl	800d564 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eaf2:	4b59      	ldr	r3, [pc, #356]	; (800ec58 <tcp_process+0x7dc>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d105      	bne.n	800eb08 <tcp_process+0x68c>
 800eafc:	4b56      	ldr	r3, [pc, #344]	; (800ec58 <tcp_process+0x7dc>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	4a55      	ldr	r2, [pc, #340]	; (800ec58 <tcp_process+0x7dc>)
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	e013      	b.n	800eb30 <tcp_process+0x6b4>
 800eb08:	4b53      	ldr	r3, [pc, #332]	; (800ec58 <tcp_process+0x7dc>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	613b      	str	r3, [r7, #16]
 800eb0e:	e00c      	b.n	800eb2a <tcp_process+0x6ae>
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d104      	bne.n	800eb24 <tcp_process+0x6a8>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	60da      	str	r2, [r3, #12]
 800eb22:	e005      	b.n	800eb30 <tcp_process+0x6b4>
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	613b      	str	r3, [r7, #16]
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1ef      	bne.n	800eb10 <tcp_process+0x694>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	60da      	str	r2, [r3, #12]
 800eb36:	4b43      	ldr	r3, [pc, #268]	; (800ec44 <tcp_process+0x7c8>)
 800eb38:	2201      	movs	r2, #1
 800eb3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	220a      	movs	r2, #10
 800eb40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb42:	4b41      	ldr	r3, [pc, #260]	; (800ec48 <tcp_process+0x7cc>)
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	60da      	str	r2, [r3, #12]
 800eb4a:	4a3f      	ldr	r2, [pc, #252]	; (800ec48 <tcp_process+0x7cc>)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6013      	str	r3, [r2, #0]
 800eb50:	f003 f8ea 	bl	8011d28 <tcp_timer_needed>
      }
      break;
 800eb54:	e06c      	b.n	800ec30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f984 	bl	800ee64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb5c:	4b3b      	ldr	r3, [pc, #236]	; (800ec4c <tcp_process+0x7d0>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f003 0310 	and.w	r3, r3, #16
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d065      	beq.n	800ec34 <tcp_process+0x7b8>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb6c:	4b38      	ldr	r3, [pc, #224]	; (800ec50 <tcp_process+0x7d4>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d15f      	bne.n	800ec34 <tcp_process+0x7b8>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d15b      	bne.n	800ec34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7fe fcf1 	bl	800d564 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb82:	4b35      	ldr	r3, [pc, #212]	; (800ec58 <tcp_process+0x7dc>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d105      	bne.n	800eb98 <tcp_process+0x71c>
 800eb8c:	4b32      	ldr	r3, [pc, #200]	; (800ec58 <tcp_process+0x7dc>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	4a31      	ldr	r2, [pc, #196]	; (800ec58 <tcp_process+0x7dc>)
 800eb94:	6013      	str	r3, [r2, #0]
 800eb96:	e013      	b.n	800ebc0 <tcp_process+0x744>
 800eb98:	4b2f      	ldr	r3, [pc, #188]	; (800ec58 <tcp_process+0x7dc>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]
 800eb9e:	e00c      	b.n	800ebba <tcp_process+0x73e>
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d104      	bne.n	800ebb4 <tcp_process+0x738>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	68da      	ldr	r2, [r3, #12]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	60da      	str	r2, [r3, #12]
 800ebb2:	e005      	b.n	800ebc0 <tcp_process+0x744>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	60fb      	str	r3, [r7, #12]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1ef      	bne.n	800eba0 <tcp_process+0x724>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	60da      	str	r2, [r3, #12]
 800ebc6:	4b1f      	ldr	r3, [pc, #124]	; (800ec44 <tcp_process+0x7c8>)
 800ebc8:	2201      	movs	r2, #1
 800ebca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	220a      	movs	r2, #10
 800ebd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebd2:	4b1d      	ldr	r3, [pc, #116]	; (800ec48 <tcp_process+0x7cc>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	60da      	str	r2, [r3, #12]
 800ebda:	4a1b      	ldr	r2, [pc, #108]	; (800ec48 <tcp_process+0x7cc>)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6013      	str	r3, [r2, #0]
 800ebe0:	f003 f8a2 	bl	8011d28 <tcp_timer_needed>
      }
      break;
 800ebe4:	e026      	b.n	800ec34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f93c 	bl	800ee64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ebec:	4b17      	ldr	r3, [pc, #92]	; (800ec4c <tcp_process+0x7d0>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	f003 0310 	and.w	r3, r3, #16
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d01f      	beq.n	800ec38 <tcp_process+0x7bc>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebfc:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <tcp_process+0x7d4>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d119      	bne.n	800ec38 <tcp_process+0x7bc>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d115      	bne.n	800ec38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ec0c:	4b11      	ldr	r3, [pc, #68]	; (800ec54 <tcp_process+0x7d8>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	f043 0310 	orr.w	r3, r3, #16
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <tcp_process+0x7d8>)
 800ec18:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ec1a:	e00d      	b.n	800ec38 <tcp_process+0x7bc>
    default:
      break;
 800ec1c:	bf00      	nop
 800ec1e:	e00c      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec20:	bf00      	nop
 800ec22:	e00a      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec24:	bf00      	nop
 800ec26:	e008      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec28:	bf00      	nop
 800ec2a:	e006      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec2c:	bf00      	nop
 800ec2e:	e004      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec30:	bf00      	nop
 800ec32:	e002      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec34:	bf00      	nop
 800ec36:	e000      	b.n	800ec3a <tcp_process+0x7be>
      break;
 800ec38:	bf00      	nop
  }
  return ERR_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3724      	adds	r7, #36	; 0x24
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd90      	pop	{r4, r7, pc}
 800ec44:	20011818 	.word	0x20011818
 800ec48:	20011814 	.word	0x20011814
 800ec4c:	20011848 	.word	0x20011848
 800ec50:	20011840 	.word	0x20011840
 800ec54:	20011849 	.word	0x20011849
 800ec58:	20011810 	.word	0x20011810

0800ec5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ec5c:	b590      	push	{r4, r7, lr}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <tcp_oos_insert_segment+0x1e>
 800ec6c:	4b3b      	ldr	r3, [pc, #236]	; (800ed5c <tcp_oos_insert_segment+0x100>)
 800ec6e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ec72:	493b      	ldr	r1, [pc, #236]	; (800ed60 <tcp_oos_insert_segment+0x104>)
 800ec74:	483b      	ldr	r0, [pc, #236]	; (800ed64 <tcp_oos_insert_segment+0x108>)
 800ec76:	f005 ffeb 	bl	8014c50 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	899b      	ldrh	r3, [r3, #12]
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fb f944 	bl	8009f10 <lwip_htons>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	f003 0301 	and.w	r3, r3, #1
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d028      	beq.n	800ece6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ec94:	6838      	ldr	r0, [r7, #0]
 800ec96:	f7fe f995 	bl	800cfc4 <tcp_segs_free>
    next = NULL;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	603b      	str	r3, [r7, #0]
 800ec9e:	e056      	b.n	800ed4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	899b      	ldrh	r3, [r3, #12]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fb f931 	bl	8009f10 <lwip_htons>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00d      	beq.n	800ecd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	899b      	ldrh	r3, [r3, #12]
 800ecc0:	b29c      	uxth	r4, r3
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	f7fb f924 	bl	8009f10 <lwip_htons>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	4322      	orrs	r2, r4
 800ecd2:	b292      	uxth	r2, r2
 800ecd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7fe f984 	bl	800cfee <tcp_seg_free>
    while (next &&
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00e      	beq.n	800ed0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	891b      	ldrh	r3, [r3, #8]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4b1d      	ldr	r3, [pc, #116]	; (800ed68 <tcp_oos_insert_segment+0x10c>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	441a      	add	r2, r3
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	6839      	ldr	r1, [r7, #0]
 800ed00:	8909      	ldrh	r1, [r1, #8]
 800ed02:	440b      	add	r3, r1
 800ed04:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	daca      	bge.n	800eca0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d01e      	beq.n	800ed4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	891b      	ldrh	r3, [r3, #8]
 800ed14:	461a      	mov	r2, r3
 800ed16:	4b14      	ldr	r3, [pc, #80]	; (800ed68 <tcp_oos_insert_segment+0x10c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	441a      	add	r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dd12      	ble.n	800ed4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	4b0d      	ldr	r3, [pc, #52]	; (800ed68 <tcp_oos_insert_segment+0x10c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	685a      	ldr	r2, [r3, #4]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	891b      	ldrh	r3, [r3, #8]
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7fc fb47 	bl	800b3dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	683a      	ldr	r2, [r7, #0]
 800ed52:	601a      	str	r2, [r3, #0]
}
 800ed54:	bf00      	nop
 800ed56:	3714      	adds	r7, #20
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd90      	pop	{r4, r7, pc}
 800ed5c:	08017678 	.word	0x08017678
 800ed60:	08017938 	.word	0x08017938
 800ed64:	080176c4 	.word	0x080176c4
 800ed68:	2001183c 	.word	0x2001183c

0800ed6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ed6c:	b5b0      	push	{r4, r5, r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
 800ed78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ed7a:	e03e      	b.n	800edfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fc fd3a 	bl	800b804 <pbuf_clen>
 800ed90:	4603      	mov	r3, r0
 800ed92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed9a:	8a7a      	ldrh	r2, [r7, #18]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d906      	bls.n	800edae <tcp_free_acked_segments+0x42>
 800eda0:	4b2a      	ldr	r3, [pc, #168]	; (800ee4c <tcp_free_acked_segments+0xe0>)
 800eda2:	f240 4257 	movw	r2, #1111	; 0x457
 800eda6:	492a      	ldr	r1, [pc, #168]	; (800ee50 <tcp_free_acked_segments+0xe4>)
 800eda8:	482a      	ldr	r0, [pc, #168]	; (800ee54 <tcp_free_acked_segments+0xe8>)
 800edaa:	f005 ff51 	bl	8014c50 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800edb4:	8a7b      	ldrh	r3, [r7, #18]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	b29a      	uxth	r2, r3
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	891a      	ldrh	r2, [r3, #8]
 800edc4:	4b24      	ldr	r3, [pc, #144]	; (800ee58 <tcp_free_acked_segments+0xec>)
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	4413      	add	r3, r2
 800edca:	b29a      	uxth	r2, r3
 800edcc:	4b22      	ldr	r3, [pc, #136]	; (800ee58 <tcp_free_acked_segments+0xec>)
 800edce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800edd0:	6978      	ldr	r0, [r7, #20]
 800edd2:	f7fe f90c 	bl	800cfee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00c      	beq.n	800edfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d109      	bne.n	800edfa <tcp_free_acked_segments+0x8e>
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d106      	bne.n	800edfa <tcp_free_acked_segments+0x8e>
 800edec:	4b17      	ldr	r3, [pc, #92]	; (800ee4c <tcp_free_acked_segments+0xe0>)
 800edee:	f240 4261 	movw	r2, #1121	; 0x461
 800edf2:	491a      	ldr	r1, [pc, #104]	; (800ee5c <tcp_free_acked_segments+0xf0>)
 800edf4:	4817      	ldr	r0, [pc, #92]	; (800ee54 <tcp_free_acked_segments+0xe8>)
 800edf6:	f005 ff2b 	bl	8014c50 <iprintf>
  while (seg_list != NULL &&
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d020      	beq.n	800ee42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fb f897 	bl	8009f3a <lwip_htonl>
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	891b      	ldrh	r3, [r3, #8]
 800ee12:	461d      	mov	r5, r3
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	899b      	ldrh	r3, [r3, #12]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fb f877 	bl	8009f10 <lwip_htons>
 800ee22:	4603      	mov	r3, r0
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	f003 0303 	and.w	r3, r3, #3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <tcp_free_acked_segments+0xc6>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <tcp_free_acked_segments+0xc8>
 800ee32:	2300      	movs	r3, #0
 800ee34:	442b      	add	r3, r5
 800ee36:	18e2      	adds	r2, r4, r3
 800ee38:	4b09      	ldr	r3, [pc, #36]	; (800ee60 <tcp_free_acked_segments+0xf4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	dd9c      	ble.n	800ed7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ee42:	68bb      	ldr	r3, [r7, #8]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3718      	adds	r7, #24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ee4c:	08017678 	.word	0x08017678
 800ee50:	08017960 	.word	0x08017960
 800ee54:	080176c4 	.word	0x080176c4
 800ee58:	20011844 	.word	0x20011844
 800ee5c:	08017988 	.word	0x08017988
 800ee60:	20011840 	.word	0x20011840

0800ee64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ee64:	b5b0      	push	{r4, r5, r7, lr}
 800ee66:	b094      	sub	sp, #80	; 0x50
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d106      	bne.n	800ee84 <tcp_receive+0x20>
 800ee76:	4b91      	ldr	r3, [pc, #580]	; (800f0bc <tcp_receive+0x258>)
 800ee78:	f240 427b 	movw	r2, #1147	; 0x47b
 800ee7c:	4990      	ldr	r1, [pc, #576]	; (800f0c0 <tcp_receive+0x25c>)
 800ee7e:	4891      	ldr	r0, [pc, #580]	; (800f0c4 <tcp_receive+0x260>)
 800ee80:	f005 fee6 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7d1b      	ldrb	r3, [r3, #20]
 800ee88:	2b03      	cmp	r3, #3
 800ee8a:	d806      	bhi.n	800ee9a <tcp_receive+0x36>
 800ee8c:	4b8b      	ldr	r3, [pc, #556]	; (800f0bc <tcp_receive+0x258>)
 800ee8e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ee92:	498d      	ldr	r1, [pc, #564]	; (800f0c8 <tcp_receive+0x264>)
 800ee94:	488b      	ldr	r0, [pc, #556]	; (800f0c4 <tcp_receive+0x260>)
 800ee96:	f005 fedb 	bl	8014c50 <iprintf>

  if (flags & TCP_ACK) {
 800ee9a:	4b8c      	ldr	r3, [pc, #560]	; (800f0cc <tcp_receive+0x268>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	f003 0310 	and.w	r3, r3, #16
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	f000 8264 	beq.w	800f370 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeae:	461a      	mov	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeb4:	4413      	add	r3, r2
 800eeb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eebc:	4b84      	ldr	r3, [pc, #528]	; (800f0d0 <tcp_receive+0x26c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	db1b      	blt.n	800eefe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eeca:	4b81      	ldr	r3, [pc, #516]	; (800f0d0 <tcp_receive+0x26c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eece:	429a      	cmp	r2, r3
 800eed0:	d106      	bne.n	800eee0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eed6:	4b7f      	ldr	r3, [pc, #508]	; (800f0d4 <tcp_receive+0x270>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	2b00      	cmp	r3, #0
 800eede:	db0e      	blt.n	800eefe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eee4:	4b7b      	ldr	r3, [pc, #492]	; (800f0d4 <tcp_receive+0x270>)
 800eee6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d125      	bne.n	800ef38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eeec:	4b7a      	ldr	r3, [pc, #488]	; (800f0d8 <tcp_receive+0x274>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	89db      	ldrh	r3, [r3, #14]
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d91c      	bls.n	800ef38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eefe:	4b76      	ldr	r3, [pc, #472]	; (800f0d8 <tcp_receive+0x274>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	89db      	ldrh	r3, [r3, #14]
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d205      	bcs.n	800ef28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ef28:	4b69      	ldr	r3, [pc, #420]	; (800f0d0 <tcp_receive+0x26c>)
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ef30:	4b68      	ldr	r3, [pc, #416]	; (800f0d4 <tcp_receive+0x270>)
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ef38:	4b66      	ldr	r3, [pc, #408]	; (800f0d4 <tcp_receive+0x270>)
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	dc58      	bgt.n	800eff8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ef46:	4b65      	ldr	r3, [pc, #404]	; (800f0dc <tcp_receive+0x278>)
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d14b      	bne.n	800efe6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ef58:	4413      	add	r3, r2
 800ef5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d142      	bne.n	800efe6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	db3d      	blt.n	800efe6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef6e:	4b59      	ldr	r3, [pc, #356]	; (800f0d4 <tcp_receive+0x270>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d137      	bne.n	800efe6 <tcp_receive+0x182>
              found_dupack = 1;
 800ef76:	2301      	movs	r3, #1
 800ef78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef80:	2bff      	cmp	r3, #255	; 0xff
 800ef82:	d007      	beq.n	800ef94 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	b2da      	uxtb	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef9a:	2b03      	cmp	r3, #3
 800ef9c:	d91b      	bls.n	800efd6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efa8:	4413      	add	r3, r2
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d30a      	bcc.n	800efcc <tcp_receive+0x168>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efc0:	4413      	add	r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800efca:	e004      	b.n	800efd6 <tcp_receive+0x172>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efdc:	2b02      	cmp	r3, #2
 800efde:	d902      	bls.n	800efe6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f002 fb43 	bl	801166c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800efe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f040 8161 	bne.w	800f2b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eff6:	e15b      	b.n	800f2b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eff8:	4b36      	ldr	r3, [pc, #216]	; (800f0d4 <tcp_receive+0x270>)
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	3b01      	subs	r3, #1
 800f004:	2b00      	cmp	r3, #0
 800f006:	f2c0 814e 	blt.w	800f2a6 <tcp_receive+0x442>
 800f00a:	4b32      	ldr	r3, [pc, #200]	; (800f0d4 <tcp_receive+0x270>)
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	f300 8146 	bgt.w	800f2a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	8b5b      	ldrh	r3, [r3, #26]
 800f01e:	f003 0304 	and.w	r3, r3, #4
 800f022:	2b00      	cmp	r3, #0
 800f024:	d010      	beq.n	800f048 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8b5b      	ldrh	r3, [r3, #26]
 800f02a:	f023 0304 	bic.w	r3, r3, #4
 800f02e:	b29a      	uxth	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f056:	10db      	asrs	r3, r3, #3
 800f058:	b21b      	sxth	r3, r3
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f062:	b29b      	uxth	r3, r3
 800f064:	4413      	add	r3, r2
 800f066:	b29b      	uxth	r3, r3
 800f068:	b21a      	sxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f070:	4b18      	ldr	r3, [pc, #96]	; (800f0d4 <tcp_receive+0x270>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	b29a      	uxth	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f088:	4b12      	ldr	r3, [pc, #72]	; (800f0d4 <tcp_receive+0x270>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	7d1b      	ldrb	r3, [r3, #20]
 800f094:	2b03      	cmp	r3, #3
 800f096:	f240 8097 	bls.w	800f1c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d245      	bcs.n	800f136 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	8b5b      	ldrh	r3, [r3, #26]
 800f0ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d014      	beq.n	800f0e0 <tcp_receive+0x27c>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e013      	b.n	800f0e2 <tcp_receive+0x27e>
 800f0ba:	bf00      	nop
 800f0bc:	08017678 	.word	0x08017678
 800f0c0:	080179a8 	.word	0x080179a8
 800f0c4:	080176c4 	.word	0x080176c4
 800f0c8:	080179c4 	.word	0x080179c4
 800f0cc:	20011848 	.word	0x20011848
 800f0d0:	2001183c 	.word	0x2001183c
 800f0d4:	20011840 	.word	0x20011840
 800f0d8:	2001182c 	.word	0x2001182c
 800f0dc:	20011846 	.word	0x20011846
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f0e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0f0:	fb12 f303 	smulbb	r3, r2, r3
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	bf28      	it	cs
 800f0fc:	4613      	movcs	r3, r2
 800f0fe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f108:	4413      	add	r3, r2
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f112:	429a      	cmp	r2, r3
 800f114:	d309      	bcc.n	800f12a <tcp_receive+0x2c6>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f11c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f11e:	4413      	add	r3, r2
 800f120:	b29a      	uxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f128:	e04e      	b.n	800f1c8 <tcp_receive+0x364>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f130:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f134:	e048      	b.n	800f1c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f13c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f13e:	4413      	add	r3, r2
 800f140:	b29a      	uxth	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f148:	429a      	cmp	r2, r3
 800f14a:	d309      	bcc.n	800f160 <tcp_receive+0x2fc>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f154:	4413      	add	r3, r2
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f15e:	e004      	b.n	800f16a <tcp_receive+0x306>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f176:	429a      	cmp	r2, r3
 800f178:	d326      	bcc.n	800f1c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f186:	1ad3      	subs	r3, r2, r3
 800f188:	b29a      	uxth	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f19a:	4413      	add	r3, r2
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d30a      	bcc.n	800f1be <tcp_receive+0x35a>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1b2:	4413      	add	r3, r2
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1bc:	e004      	b.n	800f1c8 <tcp_receive+0x364>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d0:	4a98      	ldr	r2, [pc, #608]	; (800f434 <tcp_receive+0x5d0>)
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff fdca 	bl	800ed6c <tcp_free_acked_segments>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e6:	4a94      	ldr	r2, [pc, #592]	; (800f438 <tcp_receive+0x5d4>)
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f7ff fdbf 	bl	800ed6c <tcp_free_acked_segments>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d104      	bne.n	800f206 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f202:	861a      	strh	r2, [r3, #48]	; 0x30
 800f204:	e002      	b.n	800f20c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f216:	2b00      	cmp	r3, #0
 800f218:	d103      	bne.n	800f222 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f228:	4b84      	ldr	r3, [pc, #528]	; (800f43c <tcp_receive+0x5d8>)
 800f22a:	881b      	ldrh	r3, [r3, #0]
 800f22c:	4413      	add	r3, r2
 800f22e:	b29a      	uxth	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	8b5b      	ldrh	r3, [r3, #26]
 800f23a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d035      	beq.n	800f2ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f246:	2b00      	cmp	r3, #0
 800f248:	d118      	bne.n	800f27c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00c      	beq.n	800f26c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fa fe6b 	bl	8009f3a <lwip_htonl>
 800f264:	4603      	mov	r3, r0
 800f266:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f268:	2b00      	cmp	r3, #0
 800f26a:	dc20      	bgt.n	800f2ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	8b5b      	ldrh	r3, [r3, #26]
 800f270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f274:	b29a      	uxth	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f27a:	e018      	b.n	800f2ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fa fe56 	bl	8009f3a <lwip_htonl>
 800f28e:	4603      	mov	r3, r0
 800f290:	1ae3      	subs	r3, r4, r3
 800f292:	2b00      	cmp	r3, #0
 800f294:	dc0b      	bgt.n	800f2ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	8b5b      	ldrh	r3, [r3, #26]
 800f29a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2a4:	e003      	b.n	800f2ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f002 fbce 	bl	8011a48 <tcp_send_empty_ack>
 800f2ac:	e000      	b.n	800f2b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d05b      	beq.n	800f370 <tcp_receive+0x50c>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2bc:	4b60      	ldr	r3, [pc, #384]	; (800f440 <tcp_receive+0x5dc>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	1ad3      	subs	r3, r2, r3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	da54      	bge.n	800f370 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f2c6:	4b5f      	ldr	r3, [pc, #380]	; (800f444 <tcp_receive+0x5e0>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f2da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2e4:	10db      	asrs	r3, r3, #3
 800f2e6:	b21b      	sxth	r3, r3
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f2fe:	4413      	add	r3, r2
 800f300:	b29b      	uxth	r3, r3
 800f302:	b21a      	sxth	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f308:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	da05      	bge.n	800f31c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f314:	425b      	negs	r3, r3
 800f316:	b29b      	uxth	r3, r3
 800f318:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f31c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f326:	109b      	asrs	r3, r3, #2
 800f328:	b21b      	sxth	r3, r3
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	b29b      	uxth	r3, r3
 800f330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f340:	4413      	add	r3, r2
 800f342:	b29b      	uxth	r3, r3
 800f344:	b21a      	sxth	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f350:	10db      	asrs	r3, r3, #3
 800f352:	b21b      	sxth	r3, r3
 800f354:	b29a      	uxth	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	4413      	add	r3, r2
 800f360:	b29b      	uxth	r3, r3
 800f362:	b21a      	sxth	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f370:	4b35      	ldr	r3, [pc, #212]	; (800f448 <tcp_receive+0x5e4>)
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 84e2 	beq.w	800fd3e <tcp_receive+0xeda>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7d1b      	ldrb	r3, [r3, #20]
 800f37e:	2b06      	cmp	r3, #6
 800f380:	f200 84dd 	bhi.w	800fd3e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f388:	4b30      	ldr	r3, [pc, #192]	; (800f44c <tcp_receive+0x5e8>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	3b01      	subs	r3, #1
 800f390:	2b00      	cmp	r3, #0
 800f392:	f2c0 808f 	blt.w	800f4b4 <tcp_receive+0x650>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f39a:	4b2b      	ldr	r3, [pc, #172]	; (800f448 <tcp_receive+0x5e4>)
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4b2a      	ldr	r3, [pc, #168]	; (800f44c <tcp_receive+0x5e8>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	440b      	add	r3, r1
 800f3a6:	1ad3      	subs	r3, r2, r3
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f300 8082 	bgt.w	800f4b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f3b0:	4b27      	ldr	r3, [pc, #156]	; (800f450 <tcp_receive+0x5ec>)
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3ba:	4b24      	ldr	r3, [pc, #144]	; (800f44c <tcp_receive+0x5e8>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f3c2:	4b23      	ldr	r3, [pc, #140]	; (800f450 <tcp_receive+0x5ec>)
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d106      	bne.n	800f3d8 <tcp_receive+0x574>
 800f3ca:	4b22      	ldr	r3, [pc, #136]	; (800f454 <tcp_receive+0x5f0>)
 800f3cc:	f240 5294 	movw	r2, #1428	; 0x594
 800f3d0:	4921      	ldr	r1, [pc, #132]	; (800f458 <tcp_receive+0x5f4>)
 800f3d2:	4822      	ldr	r0, [pc, #136]	; (800f45c <tcp_receive+0x5f8>)
 800f3d4:	f005 fc3c 	bl	8014c50 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d906      	bls.n	800f3f0 <tcp_receive+0x58c>
 800f3e2:	4b1c      	ldr	r3, [pc, #112]	; (800f454 <tcp_receive+0x5f0>)
 800f3e4:	f240 5295 	movw	r2, #1429	; 0x595
 800f3e8:	491d      	ldr	r1, [pc, #116]	; (800f460 <tcp_receive+0x5fc>)
 800f3ea:	481c      	ldr	r0, [pc, #112]	; (800f45c <tcp_receive+0x5f8>)
 800f3ec:	f005 fc30 	bl	8014c50 <iprintf>
      off = (u16_t)off32;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f3f6:	4b16      	ldr	r3, [pc, #88]	; (800f450 <tcp_receive+0x5ec>)
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	891b      	ldrh	r3, [r3, #8]
 800f3fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f400:	429a      	cmp	r2, r3
 800f402:	d906      	bls.n	800f412 <tcp_receive+0x5ae>
 800f404:	4b13      	ldr	r3, [pc, #76]	; (800f454 <tcp_receive+0x5f0>)
 800f406:	f240 5297 	movw	r2, #1431	; 0x597
 800f40a:	4916      	ldr	r1, [pc, #88]	; (800f464 <tcp_receive+0x600>)
 800f40c:	4813      	ldr	r0, [pc, #76]	; (800f45c <tcp_receive+0x5f8>)
 800f40e:	f005 fc1f 	bl	8014c50 <iprintf>
      inseg.len -= off;
 800f412:	4b0f      	ldr	r3, [pc, #60]	; (800f450 <tcp_receive+0x5ec>)
 800f414:	891a      	ldrh	r2, [r3, #8]
 800f416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	4b0c      	ldr	r3, [pc, #48]	; (800f450 <tcp_receive+0x5ec>)
 800f420:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f422:	4b0b      	ldr	r3, [pc, #44]	; (800f450 <tcp_receive+0x5ec>)
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	891a      	ldrh	r2, [r3, #8]
 800f428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f42c:	1ad3      	subs	r3, r2, r3
 800f42e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f430:	e02a      	b.n	800f488 <tcp_receive+0x624>
 800f432:	bf00      	nop
 800f434:	080179e0 	.word	0x080179e0
 800f438:	080179e8 	.word	0x080179e8
 800f43c:	20011844 	.word	0x20011844
 800f440:	20011840 	.word	0x20011840
 800f444:	20011804 	.word	0x20011804
 800f448:	20011846 	.word	0x20011846
 800f44c:	2001183c 	.word	0x2001183c
 800f450:	2001181c 	.word	0x2001181c
 800f454:	08017678 	.word	0x08017678
 800f458:	080179f0 	.word	0x080179f0
 800f45c:	080176c4 	.word	0x080176c4
 800f460:	08017a00 	.word	0x08017a00
 800f464:	08017a10 	.word	0x08017a10
        off -= p->len;
 800f468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f46a:	895b      	ldrh	r3, [r3, #10]
 800f46c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f478:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f47a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f47e:	2200      	movs	r2, #0
 800f480:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f48a:	895b      	ldrh	r3, [r3, #10]
 800f48c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f490:	429a      	cmp	r2, r3
 800f492:	d8e9      	bhi.n	800f468 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f498:	4619      	mov	r1, r3
 800f49a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f49c:	f7fc f89e 	bl	800b5dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a4:	4a91      	ldr	r2, [pc, #580]	; (800f6ec <tcp_receive+0x888>)
 800f4a6:	6013      	str	r3, [r2, #0]
 800f4a8:	4b91      	ldr	r3, [pc, #580]	; (800f6f0 <tcp_receive+0x88c>)
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	4a8f      	ldr	r2, [pc, #572]	; (800f6ec <tcp_receive+0x888>)
 800f4ae:	6812      	ldr	r2, [r2, #0]
 800f4b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4b2:	e00d      	b.n	800f4d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f4b4:	4b8d      	ldr	r3, [pc, #564]	; (800f6ec <tcp_receive+0x888>)
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	da06      	bge.n	800f4d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	8b5b      	ldrh	r3, [r3, #26]
 800f4c6:	f043 0302 	orr.w	r3, r3, #2
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f4d0:	4b86      	ldr	r3, [pc, #536]	; (800f6ec <tcp_receive+0x888>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f2c0 842a 	blt.w	800fd34 <tcp_receive+0xed0>
 800f4e0:	4b82      	ldr	r3, [pc, #520]	; (800f6ec <tcp_receive+0x888>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4ec:	440b      	add	r3, r1
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f300 841e 	bgt.w	800fd34 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4fc:	4b7b      	ldr	r3, [pc, #492]	; (800f6ec <tcp_receive+0x888>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	429a      	cmp	r2, r3
 800f502:	f040 829a 	bne.w	800fa3a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f506:	4b7a      	ldr	r3, [pc, #488]	; (800f6f0 <tcp_receive+0x88c>)
 800f508:	891c      	ldrh	r4, [r3, #8]
 800f50a:	4b79      	ldr	r3, [pc, #484]	; (800f6f0 <tcp_receive+0x88c>)
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	899b      	ldrh	r3, [r3, #12]
 800f510:	b29b      	uxth	r3, r3
 800f512:	4618      	mov	r0, r3
 800f514:	f7fa fcfc 	bl	8009f10 <lwip_htons>
 800f518:	4603      	mov	r3, r0
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	f003 0303 	and.w	r3, r3, #3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <tcp_receive+0x6c4>
 800f524:	2301      	movs	r3, #1
 800f526:	e000      	b.n	800f52a <tcp_receive+0x6c6>
 800f528:	2300      	movs	r3, #0
 800f52a:	4423      	add	r3, r4
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	4b71      	ldr	r3, [pc, #452]	; (800f6f4 <tcp_receive+0x890>)
 800f530:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f536:	4b6f      	ldr	r3, [pc, #444]	; (800f6f4 <tcp_receive+0x890>)
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d275      	bcs.n	800f62a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f53e:	4b6c      	ldr	r3, [pc, #432]	; (800f6f0 <tcp_receive+0x88c>)
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	899b      	ldrh	r3, [r3, #12]
 800f544:	b29b      	uxth	r3, r3
 800f546:	4618      	mov	r0, r3
 800f548:	f7fa fce2 	bl	8009f10 <lwip_htons>
 800f54c:	4603      	mov	r3, r0
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	2b00      	cmp	r3, #0
 800f556:	d01f      	beq.n	800f598 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f558:	4b65      	ldr	r3, [pc, #404]	; (800f6f0 <tcp_receive+0x88c>)
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	899b      	ldrh	r3, [r3, #12]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	b21b      	sxth	r3, r3
 800f562:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f566:	b21c      	sxth	r4, r3
 800f568:	4b61      	ldr	r3, [pc, #388]	; (800f6f0 <tcp_receive+0x88c>)
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	899b      	ldrh	r3, [r3, #12]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	4618      	mov	r0, r3
 800f572:	f7fa fccd 	bl	8009f10 <lwip_htons>
 800f576:	4603      	mov	r3, r0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f580:	b29b      	uxth	r3, r3
 800f582:	4618      	mov	r0, r3
 800f584:	f7fa fcc4 	bl	8009f10 <lwip_htons>
 800f588:	4603      	mov	r3, r0
 800f58a:	b21b      	sxth	r3, r3
 800f58c:	4323      	orrs	r3, r4
 800f58e:	b21a      	sxth	r2, r3
 800f590:	4b57      	ldr	r3, [pc, #348]	; (800f6f0 <tcp_receive+0x88c>)
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	b292      	uxth	r2, r2
 800f596:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f59c:	4b54      	ldr	r3, [pc, #336]	; (800f6f0 <tcp_receive+0x88c>)
 800f59e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5a0:	4b53      	ldr	r3, [pc, #332]	; (800f6f0 <tcp_receive+0x88c>)
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	899b      	ldrh	r3, [r3, #12]
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fa fcb1 	bl	8009f10 <lwip_htons>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	f003 0302 	and.w	r3, r3, #2
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d005      	beq.n	800f5c6 <tcp_receive+0x762>
            inseg.len -= 1;
 800f5ba:	4b4d      	ldr	r3, [pc, #308]	; (800f6f0 <tcp_receive+0x88c>)
 800f5bc:	891b      	ldrh	r3, [r3, #8]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	4b4b      	ldr	r3, [pc, #300]	; (800f6f0 <tcp_receive+0x88c>)
 800f5c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f5c6:	4b4a      	ldr	r3, [pc, #296]	; (800f6f0 <tcp_receive+0x88c>)
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	4a49      	ldr	r2, [pc, #292]	; (800f6f0 <tcp_receive+0x88c>)
 800f5cc:	8912      	ldrh	r2, [r2, #8]
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fb ff03 	bl	800b3dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f5d6:	4b46      	ldr	r3, [pc, #280]	; (800f6f0 <tcp_receive+0x88c>)
 800f5d8:	891c      	ldrh	r4, [r3, #8]
 800f5da:	4b45      	ldr	r3, [pc, #276]	; (800f6f0 <tcp_receive+0x88c>)
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	899b      	ldrh	r3, [r3, #12]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fa fc94 	bl	8009f10 <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f003 0303 	and.w	r3, r3, #3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d001      	beq.n	800f5f8 <tcp_receive+0x794>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e000      	b.n	800f5fa <tcp_receive+0x796>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	4423      	add	r3, r4
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	4b3d      	ldr	r3, [pc, #244]	; (800f6f4 <tcp_receive+0x890>)
 800f600:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f602:	4b3c      	ldr	r3, [pc, #240]	; (800f6f4 <tcp_receive+0x890>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	4b38      	ldr	r3, [pc, #224]	; (800f6ec <tcp_receive+0x888>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	441a      	add	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f612:	6879      	ldr	r1, [r7, #4]
 800f614:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f616:	440b      	add	r3, r1
 800f618:	429a      	cmp	r2, r3
 800f61a:	d006      	beq.n	800f62a <tcp_receive+0x7c6>
 800f61c:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <tcp_receive+0x894>)
 800f61e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f622:	4936      	ldr	r1, [pc, #216]	; (800f6fc <tcp_receive+0x898>)
 800f624:	4836      	ldr	r0, [pc, #216]	; (800f700 <tcp_receive+0x89c>)
 800f626:	f005 fb13 	bl	8014c50 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 80e7 	beq.w	800f802 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f634:	4b2e      	ldr	r3, [pc, #184]	; (800f6f0 <tcp_receive+0x88c>)
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	899b      	ldrh	r3, [r3, #12]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fa fc67 	bl	8009f10 <lwip_htons>
 800f642:	4603      	mov	r3, r0
 800f644:	b2db      	uxtb	r3, r3
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d010      	beq.n	800f670 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f64e:	e00a      	b.n	800f666 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f654:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f7fd fcc4 	bl	800cfee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1f0      	bne.n	800f650 <tcp_receive+0x7ec>
 800f66e:	e0c8      	b.n	800f802 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f674:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f676:	e052      	b.n	800f71e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	899b      	ldrh	r3, [r3, #12]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f7fa fc45 	bl	8009f10 <lwip_htons>
 800f686:	4603      	mov	r3, r0
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	f003 0301 	and.w	r3, r3, #1
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d03d      	beq.n	800f70e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f692:	4b17      	ldr	r3, [pc, #92]	; (800f6f0 <tcp_receive+0x88c>)
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	899b      	ldrh	r3, [r3, #12]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fa fc38 	bl	8009f10 <lwip_htons>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d130      	bne.n	800f70e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f6ac:	4b10      	ldr	r3, [pc, #64]	; (800f6f0 <tcp_receive+0x88c>)
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	899b      	ldrh	r3, [r3, #12]
 800f6b2:	b29c      	uxth	r4, r3
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	f7fa fc2b 	bl	8009f10 <lwip_htons>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	461a      	mov	r2, r3
 800f6be:	4b0c      	ldr	r3, [pc, #48]	; (800f6f0 <tcp_receive+0x88c>)
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	4322      	orrs	r2, r4
 800f6c4:	b292      	uxth	r2, r2
 800f6c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f6c8:	4b09      	ldr	r3, [pc, #36]	; (800f6f0 <tcp_receive+0x88c>)
 800f6ca:	891c      	ldrh	r4, [r3, #8]
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <tcp_receive+0x88c>)
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	899b      	ldrh	r3, [r3, #12]
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fa fc1b 	bl	8009f10 <lwip_htons>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	f003 0303 	and.w	r3, r3, #3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00e      	beq.n	800f704 <tcp_receive+0x8a0>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e00d      	b.n	800f706 <tcp_receive+0x8a2>
 800f6ea:	bf00      	nop
 800f6ec:	2001183c 	.word	0x2001183c
 800f6f0:	2001181c 	.word	0x2001181c
 800f6f4:	20011846 	.word	0x20011846
 800f6f8:	08017678 	.word	0x08017678
 800f6fc:	08017a20 	.word	0x08017a20
 800f700:	080176c4 	.word	0x080176c4
 800f704:	2300      	movs	r3, #0
 800f706:	4423      	add	r3, r4
 800f708:	b29a      	uxth	r2, r3
 800f70a:	4b98      	ldr	r3, [pc, #608]	; (800f96c <tcp_receive+0xb08>)
 800f70c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f710:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f718:	6938      	ldr	r0, [r7, #16]
 800f71a:	f7fd fc68 	bl	800cfee <tcp_seg_free>
            while (next &&
 800f71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00e      	beq.n	800f742 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f724:	4b91      	ldr	r3, [pc, #580]	; (800f96c <tcp_receive+0xb08>)
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	461a      	mov	r2, r3
 800f72a:	4b91      	ldr	r3, [pc, #580]	; (800f970 <tcp_receive+0xb0c>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	441a      	add	r2, r3
 800f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f738:	8909      	ldrh	r1, [r1, #8]
 800f73a:	440b      	add	r3, r1
 800f73c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da9a      	bge.n	800f678 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f744:	2b00      	cmp	r3, #0
 800f746:	d059      	beq.n	800f7fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f748:	4b88      	ldr	r3, [pc, #544]	; (800f96c <tcp_receive+0xb08>)
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	461a      	mov	r2, r3
 800f74e:	4b88      	ldr	r3, [pc, #544]	; (800f970 <tcp_receive+0xb0c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	441a      	add	r2, r3
 800f754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dd4d      	ble.n	800f7fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	b29a      	uxth	r2, r3
 800f768:	4b81      	ldr	r3, [pc, #516]	; (800f970 <tcp_receive+0xb0c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	b29a      	uxth	r2, r3
 800f772:	4b80      	ldr	r3, [pc, #512]	; (800f974 <tcp_receive+0xb10>)
 800f774:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f776:	4b7f      	ldr	r3, [pc, #508]	; (800f974 <tcp_receive+0xb10>)
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	899b      	ldrh	r3, [r3, #12]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fa fbc6 	bl	8009f10 <lwip_htons>
 800f784:	4603      	mov	r3, r0
 800f786:	b2db      	uxtb	r3, r3
 800f788:	f003 0302 	and.w	r3, r3, #2
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d005      	beq.n	800f79c <tcp_receive+0x938>
                inseg.len -= 1;
 800f790:	4b78      	ldr	r3, [pc, #480]	; (800f974 <tcp_receive+0xb10>)
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	3b01      	subs	r3, #1
 800f796:	b29a      	uxth	r2, r3
 800f798:	4b76      	ldr	r3, [pc, #472]	; (800f974 <tcp_receive+0xb10>)
 800f79a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f79c:	4b75      	ldr	r3, [pc, #468]	; (800f974 <tcp_receive+0xb10>)
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	4a74      	ldr	r2, [pc, #464]	; (800f974 <tcp_receive+0xb10>)
 800f7a2:	8912      	ldrh	r2, [r2, #8]
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fb fe18 	bl	800b3dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f7ac:	4b71      	ldr	r3, [pc, #452]	; (800f974 <tcp_receive+0xb10>)
 800f7ae:	891c      	ldrh	r4, [r3, #8]
 800f7b0:	4b70      	ldr	r3, [pc, #448]	; (800f974 <tcp_receive+0xb10>)
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fa fba9 	bl	8009f10 <lwip_htons>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	f003 0303 	and.w	r3, r3, #3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d001      	beq.n	800f7ce <tcp_receive+0x96a>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	e000      	b.n	800f7d0 <tcp_receive+0x96c>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	4423      	add	r3, r4
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	4b65      	ldr	r3, [pc, #404]	; (800f96c <tcp_receive+0xb08>)
 800f7d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f7d8:	4b64      	ldr	r3, [pc, #400]	; (800f96c <tcp_receive+0xb08>)
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b64      	ldr	r3, [pc, #400]	; (800f970 <tcp_receive+0xb0c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	441a      	add	r2, r3
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d006      	beq.n	800f7fc <tcp_receive+0x998>
 800f7ee:	4b62      	ldr	r3, [pc, #392]	; (800f978 <tcp_receive+0xb14>)
 800f7f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f7f4:	4961      	ldr	r1, [pc, #388]	; (800f97c <tcp_receive+0xb18>)
 800f7f6:	4862      	ldr	r0, [pc, #392]	; (800f980 <tcp_receive+0xb1c>)
 800f7f8:	f005 fa2a 	bl	8014c50 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f800:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f802:	4b5a      	ldr	r3, [pc, #360]	; (800f96c <tcp_receive+0xb08>)
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	461a      	mov	r2, r3
 800f808:	4b59      	ldr	r3, [pc, #356]	; (800f970 <tcp_receive+0xb0c>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	441a      	add	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f816:	4b55      	ldr	r3, [pc, #340]	; (800f96c <tcp_receive+0xb08>)
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d206      	bcs.n	800f82c <tcp_receive+0x9c8>
 800f81e:	4b56      	ldr	r3, [pc, #344]	; (800f978 <tcp_receive+0xb14>)
 800f820:	f240 6207 	movw	r2, #1543	; 0x607
 800f824:	4957      	ldr	r1, [pc, #348]	; (800f984 <tcp_receive+0xb20>)
 800f826:	4856      	ldr	r0, [pc, #344]	; (800f980 <tcp_receive+0xb1c>)
 800f828:	f005 fa12 	bl	8014c50 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f830:	4b4e      	ldr	r3, [pc, #312]	; (800f96c <tcp_receive+0xb08>)
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	b29a      	uxth	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7fc feb1 	bl	800c5a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f842:	4b4c      	ldr	r3, [pc, #304]	; (800f974 <tcp_receive+0xb10>)
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	891b      	ldrh	r3, [r3, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d006      	beq.n	800f85a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f84c:	4b49      	ldr	r3, [pc, #292]	; (800f974 <tcp_receive+0xb10>)
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	4a4d      	ldr	r2, [pc, #308]	; (800f988 <tcp_receive+0xb24>)
 800f852:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f854:	4b47      	ldr	r3, [pc, #284]	; (800f974 <tcp_receive+0xb10>)
 800f856:	2200      	movs	r2, #0
 800f858:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f85a:	4b46      	ldr	r3, [pc, #280]	; (800f974 <tcp_receive+0xb10>)
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	899b      	ldrh	r3, [r3, #12]
 800f860:	b29b      	uxth	r3, r3
 800f862:	4618      	mov	r0, r3
 800f864:	f7fa fb54 	bl	8009f10 <lwip_htons>
 800f868:	4603      	mov	r3, r0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 80b8 	beq.w	800f9e6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f876:	4b45      	ldr	r3, [pc, #276]	; (800f98c <tcp_receive+0xb28>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f043 0320 	orr.w	r3, r3, #32
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	4b42      	ldr	r3, [pc, #264]	; (800f98c <tcp_receive+0xb28>)
 800f882:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f884:	e0af      	b.n	800f9e6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f88a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	4a36      	ldr	r2, [pc, #216]	; (800f970 <tcp_receive+0xb0c>)
 800f896:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	891b      	ldrh	r3, [r3, #8]
 800f89c:	461c      	mov	r4, r3
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	899b      	ldrh	r3, [r3, #12]
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fa fb32 	bl	8009f10 <lwip_htons>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <tcp_receive+0xa58>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e000      	b.n	800f8be <tcp_receive+0xa5a>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	191a      	adds	r2, r3, r4
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c4:	441a      	add	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8ce:	461c      	mov	r4, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	891b      	ldrh	r3, [r3, #8]
 800f8d4:	461d      	mov	r5, r3
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	899b      	ldrh	r3, [r3, #12]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fa fb16 	bl	8009f10 <lwip_htons>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	f003 0303 	and.w	r3, r3, #3
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <tcp_receive+0xa90>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e000      	b.n	800f8f6 <tcp_receive+0xa92>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	442b      	add	r3, r5
 800f8f8:	429c      	cmp	r4, r3
 800f8fa:	d206      	bcs.n	800f90a <tcp_receive+0xaa6>
 800f8fc:	4b1e      	ldr	r3, [pc, #120]	; (800f978 <tcp_receive+0xb14>)
 800f8fe:	f240 622b 	movw	r2, #1579	; 0x62b
 800f902:	4923      	ldr	r1, [pc, #140]	; (800f990 <tcp_receive+0xb2c>)
 800f904:	481e      	ldr	r0, [pc, #120]	; (800f980 <tcp_receive+0xb1c>)
 800f906:	f005 f9a3 	bl	8014c50 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	891b      	ldrh	r3, [r3, #8]
 800f90e:	461c      	mov	r4, r3
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	899b      	ldrh	r3, [r3, #12]
 800f916:	b29b      	uxth	r3, r3
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fa faf9 	bl	8009f10 <lwip_htons>
 800f91e:	4603      	mov	r3, r0
 800f920:	b2db      	uxtb	r3, r3
 800f922:	f003 0303 	and.w	r3, r3, #3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <tcp_receive+0xaca>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <tcp_receive+0xacc>
 800f92e:	2300      	movs	r3, #0
 800f930:	1919      	adds	r1, r3, r4
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f936:	b28b      	uxth	r3, r1
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7fc fe2f 	bl	800c5a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d028      	beq.n	800f9a2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f950:	4b0d      	ldr	r3, [pc, #52]	; (800f988 <tcp_receive+0xb24>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01d      	beq.n	800f994 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f958:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <tcp_receive+0xb24>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fb ff8e 	bl	800b884 <pbuf_cat>
 800f968:	e018      	b.n	800f99c <tcp_receive+0xb38>
 800f96a:	bf00      	nop
 800f96c:	20011846 	.word	0x20011846
 800f970:	2001183c 	.word	0x2001183c
 800f974:	2001181c 	.word	0x2001181c
 800f978:	08017678 	.word	0x08017678
 800f97c:	08017a58 	.word	0x08017a58
 800f980:	080176c4 	.word	0x080176c4
 800f984:	08017a94 	.word	0x08017a94
 800f988:	2001184c 	.word	0x2001184c
 800f98c:	20011849 	.word	0x20011849
 800f990:	08017ab4 	.word	0x08017ab4
            } else {
              recv_data = cseg->p;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	4a70      	ldr	r2, [pc, #448]	; (800fb5c <tcp_receive+0xcf8>)
 800f99a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	899b      	ldrh	r3, [r3, #12]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fa fab0 	bl	8009f10 <lwip_htons>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	f003 0301 	and.w	r3, r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00d      	beq.n	800f9d8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f9bc:	4b68      	ldr	r3, [pc, #416]	; (800fb60 <tcp_receive+0xcfc>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	f043 0320 	orr.w	r3, r3, #32
 800f9c4:	b2da      	uxtb	r2, r3
 800f9c6:	4b66      	ldr	r3, [pc, #408]	; (800fb60 <tcp_receive+0xcfc>)
 800f9c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7d1b      	ldrb	r3, [r3, #20]
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	d102      	bne.n	800f9d8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2207      	movs	r2, #7
 800f9d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f9e0:	68b8      	ldr	r0, [r7, #8]
 800f9e2:	f7fd fb04 	bl	800cfee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d008      	beq.n	800fa00 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	f43f af43 	beq.w	800f886 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8b5b      	ldrh	r3, [r3, #26]
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00e      	beq.n	800fa2a <tcp_receive+0xbc6>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	8b5b      	ldrh	r3, [r3, #26]
 800fa10:	f023 0301 	bic.w	r3, r3, #1
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	835a      	strh	r2, [r3, #26]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	8b5b      	ldrh	r3, [r3, #26]
 800fa1e:	f043 0302 	orr.w	r3, r3, #2
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa28:	e188      	b.n	800fd3c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	8b5b      	ldrh	r3, [r3, #26]
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa38:	e180      	b.n	800fd3c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d106      	bne.n	800fa50 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fa42:	4848      	ldr	r0, [pc, #288]	; (800fb64 <tcp_receive+0xd00>)
 800fa44:	f7fd faec 	bl	800d020 <tcp_seg_copy>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	675a      	str	r2, [r3, #116]	; 0x74
 800fa4e:	e16d      	b.n	800fd2c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fa50:	2300      	movs	r3, #0
 800fa52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa58:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa5a:	e157      	b.n	800fd0c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	4b41      	ldr	r3, [pc, #260]	; (800fb68 <tcp_receive+0xd04>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d11d      	bne.n	800faa6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fa6a:	4b3e      	ldr	r3, [pc, #248]	; (800fb64 <tcp_receive+0xd00>)
 800fa6c:	891a      	ldrh	r2, [r3, #8]
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	f240 814f 	bls.w	800fd16 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa78:	483a      	ldr	r0, [pc, #232]	; (800fb64 <tcp_receive+0xd00>)
 800fa7a:	f7fd fad1 	bl	800d020 <tcp_seg_copy>
 800fa7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f000 8149 	beq.w	800fd1a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <tcp_receive+0xc32>
                    prev->next = cseg;
 800fa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa90:	697a      	ldr	r2, [r7, #20]
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	e002      	b.n	800fa9c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fa9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa9e:	6978      	ldr	r0, [r7, #20]
 800faa0:	f7ff f8dc 	bl	800ec5c <tcp_oos_insert_segment>
                }
                break;
 800faa4:	e139      	b.n	800fd1a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800faa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d117      	bne.n	800fadc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800faac:	4b2e      	ldr	r3, [pc, #184]	; (800fb68 <tcp_receive+0xd04>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	da57      	bge.n	800fb6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fabc:	4829      	ldr	r0, [pc, #164]	; (800fb64 <tcp_receive+0xd00>)
 800fabe:	f7fd faaf 	bl	800d020 <tcp_seg_copy>
 800fac2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 8129 	beq.w	800fd1e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	69ba      	ldr	r2, [r7, #24]
 800fad0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fad4:	69b8      	ldr	r0, [r7, #24]
 800fad6:	f7ff f8c1 	bl	800ec5c <tcp_oos_insert_segment>
                  }
                  break;
 800fada:	e120      	b.n	800fd1e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fadc:	4b22      	ldr	r3, [pc, #136]	; (800fb68 <tcp_receive+0xd04>)
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	1ad3      	subs	r3, r2, r3
 800fae8:	3b01      	subs	r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	db3e      	blt.n	800fb6c <tcp_receive+0xd08>
 800faee:	4b1e      	ldr	r3, [pc, #120]	; (800fb68 <tcp_receive+0xd04>)
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	3301      	adds	r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	dc35      	bgt.n	800fb6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb00:	4818      	ldr	r0, [pc, #96]	; (800fb64 <tcp_receive+0xd00>)
 800fb02:	f7fd fa8d 	bl	800d020 <tcp_seg_copy>
 800fb06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f000 8109 	beq.w	800fd22 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb18:	8912      	ldrh	r2, [r2, #8]
 800fb1a:	441a      	add	r2, r3
 800fb1c:	4b12      	ldr	r3, [pc, #72]	; (800fb68 <tcp_receive+0xd04>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dd12      	ble.n	800fb4c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fb26:	4b10      	ldr	r3, [pc, #64]	; (800fb68 <tcp_receive+0xd04>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	891b      	ldrh	r3, [r3, #8]
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7fb fc48 	bl	800b3dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4e:	69fa      	ldr	r2, [r7, #28]
 800fb50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fb52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb54:	69f8      	ldr	r0, [r7, #28]
 800fb56:	f7ff f881 	bl	800ec5c <tcp_oos_insert_segment>
                  }
                  break;
 800fb5a:	e0e2      	b.n	800fd22 <tcp_receive+0xebe>
 800fb5c:	2001184c 	.word	0x2001184c
 800fb60:	20011849 	.word	0x20011849
 800fb64:	2001181c 	.word	0x2001181c
 800fb68:	2001183c 	.word	0x2001183c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f040 80c6 	bne.w	800fd06 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fb7a:	4b80      	ldr	r3, [pc, #512]	; (800fd7c <tcp_receive+0xf18>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f340 80bd 	ble.w	800fd06 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	899b      	ldrh	r3, [r3, #12]
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fa f9bb 	bl	8009f10 <lwip_htons>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f040 80bf 	bne.w	800fd26 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fba8:	4875      	ldr	r0, [pc, #468]	; (800fd80 <tcp_receive+0xf1c>)
 800fbaa:	f7fd fa39 	bl	800d020 <tcp_seg_copy>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 80b6 	beq.w	800fd2a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbc6:	8912      	ldrh	r2, [r2, #8]
 800fbc8:	441a      	add	r2, r3
 800fbca:	4b6c      	ldr	r3, [pc, #432]	; (800fd7c <tcp_receive+0xf18>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dd12      	ble.n	800fbfa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fbd4:	4b69      	ldr	r3, [pc, #420]	; (800fd7c <tcp_receive+0xf18>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	685a      	ldr	r2, [r3, #4]
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	891b      	ldrh	r3, [r3, #8]
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	f7fb fbf1 	bl	800b3dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fbfa:	4b62      	ldr	r3, [pc, #392]	; (800fd84 <tcp_receive+0xf20>)
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4b5e      	ldr	r3, [pc, #376]	; (800fd7c <tcp_receive+0xf18>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	441a      	add	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0a:	6879      	ldr	r1, [r7, #4]
 800fc0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc0e:	440b      	add	r3, r1
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f340 8089 	ble.w	800fd2a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	899b      	ldrh	r3, [r3, #12]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fa f974 	bl	8009f10 <lwip_htons>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	f003 0301 	and.w	r3, r3, #1
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d022      	beq.n	800fc7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	899b      	ldrh	r3, [r3, #12]
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	b21b      	sxth	r3, r3
 800fc40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc44:	b21c      	sxth	r4, r3
 800fc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	899b      	ldrh	r3, [r3, #12]
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fa f95d 	bl	8009f10 <lwip_htons>
 800fc56:	4603      	mov	r3, r0
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fa f954 	bl	8009f10 <lwip_htons>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	b21b      	sxth	r3, r3
 800fc6c:	4323      	orrs	r3, r4
 800fc6e:	b21a      	sxth	r2, r3
 800fc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	b292      	uxth	r2, r2
 800fc78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc84:	4413      	add	r3, r2
 800fc86:	b299      	uxth	r1, r3
 800fc88:	4b3c      	ldr	r3, [pc, #240]	; (800fd7c <tcp_receive+0xf18>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	1a8a      	subs	r2, r1, r2
 800fc94:	b292      	uxth	r2, r2
 800fc96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	891b      	ldrh	r3, [r3, #8]
 800fca4:	4619      	mov	r1, r3
 800fca6:	4610      	mov	r0, r2
 800fca8:	f7fb fb98 	bl	800b3dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	891c      	ldrh	r4, [r3, #8]
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	899b      	ldrh	r3, [r3, #12]
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fa f927 	bl	8009f10 <lwip_htons>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	f003 0303 	and.w	r3, r3, #3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <tcp_receive+0xe6e>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e000      	b.n	800fcd4 <tcp_receive+0xe70>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4423      	add	r3, r4
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	4b2a      	ldr	r3, [pc, #168]	; (800fd84 <tcp_receive+0xf20>)
 800fcda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fcdc:	4b29      	ldr	r3, [pc, #164]	; (800fd84 <tcp_receive+0xf20>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b26      	ldr	r3, [pc, #152]	; (800fd7c <tcp_receive+0xf18>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	441a      	add	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcf0:	440b      	add	r3, r1
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d019      	beq.n	800fd2a <tcp_receive+0xec6>
 800fcf6:	4b24      	ldr	r3, [pc, #144]	; (800fd88 <tcp_receive+0xf24>)
 800fcf8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fcfc:	4923      	ldr	r1, [pc, #140]	; (800fd8c <tcp_receive+0xf28>)
 800fcfe:	4824      	ldr	r0, [pc, #144]	; (800fd90 <tcp_receive+0xf2c>)
 800fd00:	f004 ffa6 	bl	8014c50 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fd04:	e011      	b.n	800fd2a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f47f aea4 	bne.w	800fa5c <tcp_receive+0xbf8>
 800fd14:	e00a      	b.n	800fd2c <tcp_receive+0xec8>
                break;
 800fd16:	bf00      	nop
 800fd18:	e008      	b.n	800fd2c <tcp_receive+0xec8>
                break;
 800fd1a:	bf00      	nop
 800fd1c:	e006      	b.n	800fd2c <tcp_receive+0xec8>
                  break;
 800fd1e:	bf00      	nop
 800fd20:	e004      	b.n	800fd2c <tcp_receive+0xec8>
                  break;
 800fd22:	bf00      	nop
 800fd24:	e002      	b.n	800fd2c <tcp_receive+0xec8>
                  break;
 800fd26:	bf00      	nop
 800fd28:	e000      	b.n	800fd2c <tcp_receive+0xec8>
                break;
 800fd2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f001 fe8b 	bl	8011a48 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fd32:	e003      	b.n	800fd3c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f001 fe87 	bl	8011a48 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd3a:	e01a      	b.n	800fd72 <tcp_receive+0xf0e>
 800fd3c:	e019      	b.n	800fd72 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fd3e:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <tcp_receive+0xf18>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	db0a      	blt.n	800fd62 <tcp_receive+0xefe>
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <tcp_receive+0xf18>)
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd58:	440b      	add	r3, r1
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	dd07      	ble.n	800fd72 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8b5b      	ldrh	r3, [r3, #26]
 800fd66:	f043 0302 	orr.w	r3, r3, #2
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fd70:	e7ff      	b.n	800fd72 <tcp_receive+0xf0e>
 800fd72:	bf00      	nop
 800fd74:	3750      	adds	r7, #80	; 0x50
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bdb0      	pop	{r4, r5, r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	2001183c 	.word	0x2001183c
 800fd80:	2001181c 	.word	0x2001181c
 800fd84:	20011846 	.word	0x20011846
 800fd88:	08017678 	.word	0x08017678
 800fd8c:	08017a20 	.word	0x08017a20
 800fd90:	080176c4 	.word	0x080176c4

0800fd94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fd9a:	4b15      	ldr	r3, [pc, #84]	; (800fdf0 <tcp_get_next_optbyte+0x5c>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	b291      	uxth	r1, r2
 800fda2:	4a13      	ldr	r2, [pc, #76]	; (800fdf0 <tcp_get_next_optbyte+0x5c>)
 800fda4:	8011      	strh	r1, [r2, #0]
 800fda6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fda8:	4b12      	ldr	r3, [pc, #72]	; (800fdf4 <tcp_get_next_optbyte+0x60>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d004      	beq.n	800fdba <tcp_get_next_optbyte+0x26>
 800fdb0:	4b11      	ldr	r3, [pc, #68]	; (800fdf8 <tcp_get_next_optbyte+0x64>)
 800fdb2:	881b      	ldrh	r3, [r3, #0]
 800fdb4:	88fa      	ldrh	r2, [r7, #6]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d208      	bcs.n	800fdcc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fdba:	4b10      	ldr	r3, [pc, #64]	; (800fdfc <tcp_get_next_optbyte+0x68>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3314      	adds	r3, #20
 800fdc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fdc2:	88fb      	ldrh	r3, [r7, #6]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	e00b      	b.n	800fde4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fdcc:	88fb      	ldrh	r3, [r7, #6]
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <tcp_get_next_optbyte+0x64>)
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fdda:	4b06      	ldr	r3, [pc, #24]	; (800fdf4 <tcp_get_next_optbyte+0x60>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	797b      	ldrb	r3, [r7, #5]
 800fde0:	4413      	add	r3, r2
 800fde2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	20011838 	.word	0x20011838
 800fdf4:	20011834 	.word	0x20011834
 800fdf8:	20011832 	.word	0x20011832
 800fdfc:	2001182c 	.word	0x2001182c

0800fe00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d106      	bne.n	800fe1c <tcp_parseopt+0x1c>
 800fe0e:	4b32      	ldr	r3, [pc, #200]	; (800fed8 <tcp_parseopt+0xd8>)
 800fe10:	f240 727d 	movw	r2, #1917	; 0x77d
 800fe14:	4931      	ldr	r1, [pc, #196]	; (800fedc <tcp_parseopt+0xdc>)
 800fe16:	4832      	ldr	r0, [pc, #200]	; (800fee0 <tcp_parseopt+0xe0>)
 800fe18:	f004 ff1a 	bl	8014c50 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe1c:	4b31      	ldr	r3, [pc, #196]	; (800fee4 <tcp_parseopt+0xe4>)
 800fe1e:	881b      	ldrh	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d055      	beq.n	800fed0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe24:	4b30      	ldr	r3, [pc, #192]	; (800fee8 <tcp_parseopt+0xe8>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	801a      	strh	r2, [r3, #0]
 800fe2a:	e045      	b.n	800feb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fe2c:	f7ff ffb2 	bl	800fd94 <tcp_get_next_optbyte>
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d006      	beq.n	800fe48 <tcp_parseopt+0x48>
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	dc2b      	bgt.n	800fe96 <tcp_parseopt+0x96>
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d041      	beq.n	800fec6 <tcp_parseopt+0xc6>
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d127      	bne.n	800fe96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fe46:	e037      	b.n	800feb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fe48:	f7ff ffa4 	bl	800fd94 <tcp_get_next_optbyte>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b04      	cmp	r3, #4
 800fe50:	d13b      	bne.n	800feca <tcp_parseopt+0xca>
 800fe52:	4b25      	ldr	r3, [pc, #148]	; (800fee8 <tcp_parseopt+0xe8>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	3301      	adds	r3, #1
 800fe58:	4a22      	ldr	r2, [pc, #136]	; (800fee4 <tcp_parseopt+0xe4>)
 800fe5a:	8812      	ldrh	r2, [r2, #0]
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	da34      	bge.n	800feca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fe60:	f7ff ff98 	bl	800fd94 <tcp_get_next_optbyte>
 800fe64:	4603      	mov	r3, r0
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	021b      	lsls	r3, r3, #8
 800fe6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fe6c:	f7ff ff92 	bl	800fd94 <tcp_get_next_optbyte>
 800fe70:	4603      	mov	r3, r0
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	89bb      	ldrh	r3, [r7, #12]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fe7a:	89bb      	ldrh	r3, [r7, #12]
 800fe7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fe80:	d804      	bhi.n	800fe8c <tcp_parseopt+0x8c>
 800fe82:	89bb      	ldrh	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <tcp_parseopt+0x8c>
 800fe88:	89ba      	ldrh	r2, [r7, #12]
 800fe8a:	e001      	b.n	800fe90 <tcp_parseopt+0x90>
 800fe8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fe94:	e010      	b.n	800feb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fe96:	f7ff ff7d 	bl	800fd94 <tcp_get_next_optbyte>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fe9e:	7afb      	ldrb	r3, [r7, #11]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d914      	bls.n	800fece <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fea4:	7afb      	ldrb	r3, [r7, #11]
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <tcp_parseopt+0xe8>)
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	4413      	add	r3, r2
 800feae:	b29b      	uxth	r3, r3
 800feb0:	3b02      	subs	r3, #2
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	4b0c      	ldr	r3, [pc, #48]	; (800fee8 <tcp_parseopt+0xe8>)
 800feb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800feb8:	4b0b      	ldr	r3, [pc, #44]	; (800fee8 <tcp_parseopt+0xe8>)
 800feba:	881a      	ldrh	r2, [r3, #0]
 800febc:	4b09      	ldr	r3, [pc, #36]	; (800fee4 <tcp_parseopt+0xe4>)
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d3b3      	bcc.n	800fe2c <tcp_parseopt+0x2c>
 800fec4:	e004      	b.n	800fed0 <tcp_parseopt+0xd0>
          return;
 800fec6:	bf00      	nop
 800fec8:	e002      	b.n	800fed0 <tcp_parseopt+0xd0>
            return;
 800feca:	bf00      	nop
 800fecc:	e000      	b.n	800fed0 <tcp_parseopt+0xd0>
            return;
 800fece:	bf00      	nop
      }
    }
  }
}
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	08017678 	.word	0x08017678
 800fedc:	08017adc 	.word	0x08017adc
 800fee0:	080176c4 	.word	0x080176c4
 800fee4:	20011830 	.word	0x20011830
 800fee8:	20011838 	.word	0x20011838

0800feec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800feec:	b480      	push	{r7}
 800feee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <tcp_trigger_input_pcb_close+0x1c>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	f043 0310 	orr.w	r3, r3, #16
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	4b03      	ldr	r3, [pc, #12]	; (800ff08 <tcp_trigger_input_pcb_close+0x1c>)
 800fefc:	701a      	strb	r2, [r3, #0]
}
 800fefe:	bf00      	nop
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	20011849 	.word	0x20011849

0800ff0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00a      	beq.n	800ff34 <tcp_route+0x28>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	7a1b      	ldrb	r3, [r3, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d006      	beq.n	800ff34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	7a1b      	ldrb	r3, [r3, #8]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fb f84e 	bl	800afcc <netif_get_by_index>
 800ff30:	4603      	mov	r3, r0
 800ff32:	e003      	b.n	800ff3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f003 f94b 	bl	80131d0 <ip4_route>
 800ff3a:	4603      	mov	r3, r0
  }
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b087      	sub	sp, #28
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	4613      	mov	r3, r2
 800ff52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d105      	bne.n	800ff66 <tcp_create_segment+0x22>
 800ff5a:	4b44      	ldr	r3, [pc, #272]	; (801006c <tcp_create_segment+0x128>)
 800ff5c:	22a3      	movs	r2, #163	; 0xa3
 800ff5e:	4944      	ldr	r1, [pc, #272]	; (8010070 <tcp_create_segment+0x12c>)
 800ff60:	4844      	ldr	r0, [pc, #272]	; (8010074 <tcp_create_segment+0x130>)
 800ff62:	f004 fe75 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d105      	bne.n	800ff78 <tcp_create_segment+0x34>
 800ff6c:	4b3f      	ldr	r3, [pc, #252]	; (801006c <tcp_create_segment+0x128>)
 800ff6e:	22a4      	movs	r2, #164	; 0xa4
 800ff70:	4941      	ldr	r1, [pc, #260]	; (8010078 <tcp_create_segment+0x134>)
 800ff72:	4840      	ldr	r0, [pc, #256]	; (8010074 <tcp_create_segment+0x130>)
 800ff74:	f004 fe6c 	bl	8014c50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ff86:	2002      	movs	r0, #2
 800ff88:	f7fa fc98 	bl	800a8bc <memp_malloc>
 800ff8c:	6138      	str	r0, [r7, #16]
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d104      	bne.n	800ff9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ff94:	68b8      	ldr	r0, [r7, #8]
 800ff96:	f7fb fba7 	bl	800b6e8 <pbuf_free>
    return NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e061      	b.n	8010062 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ffa4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	891a      	ldrh	r2, [r3, #8]
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d205      	bcs.n	800ffca <tcp_create_segment+0x86>
 800ffbe:	4b2b      	ldr	r3, [pc, #172]	; (801006c <tcp_create_segment+0x128>)
 800ffc0:	22b0      	movs	r2, #176	; 0xb0
 800ffc2:	492e      	ldr	r1, [pc, #184]	; (801007c <tcp_create_segment+0x138>)
 800ffc4:	482b      	ldr	r0, [pc, #172]	; (8010074 <tcp_create_segment+0x130>)
 800ffc6:	f004 fe43 	bl	8014c50 <iprintf>
  seg->len = p->tot_len - optlen;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	891a      	ldrh	r2, [r3, #8]
 800ffce:	7dfb      	ldrb	r3, [r7, #23]
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ffda:	2114      	movs	r1, #20
 800ffdc:	68b8      	ldr	r0, [r7, #8]
 800ffde:	f7fb faed 	bl	800b5bc <pbuf_add_header>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d004      	beq.n	800fff2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ffe8:	6938      	ldr	r0, [r7, #16]
 800ffea:	f7fd f800 	bl	800cfee <tcp_seg_free>
    return NULL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	e037      	b.n	8010062 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	8ada      	ldrh	r2, [r3, #22]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	68dc      	ldr	r4, [r3, #12]
 8010004:	4610      	mov	r0, r2
 8010006:	f7f9 ff83 	bl	8009f10 <lwip_htons>
 801000a:	4603      	mov	r3, r0
 801000c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	8b1a      	ldrh	r2, [r3, #24]
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	68dc      	ldr	r4, [r3, #12]
 8010016:	4610      	mov	r0, r2
 8010018:	f7f9 ff7a 	bl	8009f10 <lwip_htons>
 801001c:	4603      	mov	r3, r0
 801001e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	68dc      	ldr	r4, [r3, #12]
 8010024:	6838      	ldr	r0, [r7, #0]
 8010026:	f7f9 ff88 	bl	8009f3a <lwip_htonl>
 801002a:	4603      	mov	r3, r0
 801002c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801002e:	7dfb      	ldrb	r3, [r7, #23]
 8010030:	089b      	lsrs	r3, r3, #2
 8010032:	b2db      	uxtb	r3, r3
 8010034:	b29b      	uxth	r3, r3
 8010036:	3305      	adds	r3, #5
 8010038:	b29b      	uxth	r3, r3
 801003a:	031b      	lsls	r3, r3, #12
 801003c:	b29a      	uxth	r2, r3
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	b29b      	uxth	r3, r3
 8010042:	4313      	orrs	r3, r2
 8010044:	b29a      	uxth	r2, r3
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	68dc      	ldr	r4, [r3, #12]
 801004a:	4610      	mov	r0, r2
 801004c:	f7f9 ff60 	bl	8009f10 <lwip_htons>
 8010050:	4603      	mov	r3, r0
 8010052:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	749a      	strb	r2, [r3, #18]
 801005c:	2200      	movs	r2, #0
 801005e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010060:	693b      	ldr	r3, [r7, #16]
}
 8010062:	4618      	mov	r0, r3
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	bd90      	pop	{r4, r7, pc}
 801006a:	bf00      	nop
 801006c:	08017af8 	.word	0x08017af8
 8010070:	08017b2c 	.word	0x08017b2c
 8010074:	08017b4c 	.word	0x08017b4c
 8010078:	08017b74 	.word	0x08017b74
 801007c:	08017b98 	.word	0x08017b98

08010080 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	607b      	str	r3, [r7, #4]
 8010088:	4603      	mov	r3, r0
 801008a:	73fb      	strb	r3, [r7, #15]
 801008c:	460b      	mov	r3, r1
 801008e:	81bb      	strh	r3, [r7, #12]
 8010090:	4613      	mov	r3, r2
 8010092:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010094:	89bb      	ldrh	r3, [r7, #12]
 8010096:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d105      	bne.n	80100aa <tcp_pbuf_prealloc+0x2a>
 801009e:	4b30      	ldr	r3, [pc, #192]	; (8010160 <tcp_pbuf_prealloc+0xe0>)
 80100a0:	22e8      	movs	r2, #232	; 0xe8
 80100a2:	4930      	ldr	r1, [pc, #192]	; (8010164 <tcp_pbuf_prealloc+0xe4>)
 80100a4:	4830      	ldr	r0, [pc, #192]	; (8010168 <tcp_pbuf_prealloc+0xe8>)
 80100a6:	f004 fdd3 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80100aa:	6a3b      	ldr	r3, [r7, #32]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d105      	bne.n	80100bc <tcp_pbuf_prealloc+0x3c>
 80100b0:	4b2b      	ldr	r3, [pc, #172]	; (8010160 <tcp_pbuf_prealloc+0xe0>)
 80100b2:	22e9      	movs	r2, #233	; 0xe9
 80100b4:	492d      	ldr	r1, [pc, #180]	; (801016c <tcp_pbuf_prealloc+0xec>)
 80100b6:	482c      	ldr	r0, [pc, #176]	; (8010168 <tcp_pbuf_prealloc+0xe8>)
 80100b8:	f004 fdca 	bl	8014c50 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80100bc:	89ba      	ldrh	r2, [r7, #12]
 80100be:	897b      	ldrh	r3, [r7, #10]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d221      	bcs.n	8010108 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100c8:	f003 0302 	and.w	r3, r3, #2
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d111      	bne.n	80100f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	8b5b      	ldrh	r3, [r3, #26]
 80100d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d115      	bne.n	8010108 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80100dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d007      	beq.n	80100f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80100e4:	6a3b      	ldr	r3, [r7, #32]
 80100e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d103      	bne.n	80100f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d009      	beq.n	8010108 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80100f4:	89bb      	ldrh	r3, [r7, #12]
 80100f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80100fa:	f023 0203 	bic.w	r2, r3, #3
 80100fe:	897b      	ldrh	r3, [r7, #10]
 8010100:	4293      	cmp	r3, r2
 8010102:	bf28      	it	cs
 8010104:	4613      	movcs	r3, r2
 8010106:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010108:	8af9      	ldrh	r1, [r7, #22]
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010110:	4618      	mov	r0, r3
 8010112:	f7fb f805 	bl	800b120 <pbuf_alloc>
 8010116:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801011e:	2300      	movs	r3, #0
 8010120:	e019      	b.n	8010156 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d006      	beq.n	8010138 <tcp_pbuf_prealloc+0xb8>
 801012a:	4b0d      	ldr	r3, [pc, #52]	; (8010160 <tcp_pbuf_prealloc+0xe0>)
 801012c:	f240 120b 	movw	r2, #267	; 0x10b
 8010130:	490f      	ldr	r1, [pc, #60]	; (8010170 <tcp_pbuf_prealloc+0xf0>)
 8010132:	480d      	ldr	r0, [pc, #52]	; (8010168 <tcp_pbuf_prealloc+0xe8>)
 8010134:	f004 fd8c 	bl	8014c50 <iprintf>
  *oversize = p->len - length;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	895a      	ldrh	r2, [r3, #10]
 801013c:	89bb      	ldrh	r3, [r7, #12]
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	b29a      	uxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	89ba      	ldrh	r2, [r7, #12]
 801014a:	811a      	strh	r2, [r3, #8]
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	891a      	ldrh	r2, [r3, #8]
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	815a      	strh	r2, [r3, #10]
  return p;
 8010154:	693b      	ldr	r3, [r7, #16]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	08017af8 	.word	0x08017af8
 8010164:	08017bb0 	.word	0x08017bb0
 8010168:	08017b4c 	.word	0x08017b4c
 801016c:	08017bd4 	.word	0x08017bd4
 8010170:	08017bf4 	.word	0x08017bf4

08010174 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	460b      	mov	r3, r1
 801017e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <tcp_write_checks+0x20>
 8010186:	4b33      	ldr	r3, [pc, #204]	; (8010254 <tcp_write_checks+0xe0>)
 8010188:	f240 1233 	movw	r2, #307	; 0x133
 801018c:	4932      	ldr	r1, [pc, #200]	; (8010258 <tcp_write_checks+0xe4>)
 801018e:	4833      	ldr	r0, [pc, #204]	; (801025c <tcp_write_checks+0xe8>)
 8010190:	f004 fd5e 	bl	8014c50 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	7d1b      	ldrb	r3, [r3, #20]
 8010198:	2b04      	cmp	r3, #4
 801019a:	d00e      	beq.n	80101ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80101a0:	2b07      	cmp	r3, #7
 80101a2:	d00a      	beq.n	80101ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80101a8:	2b02      	cmp	r3, #2
 80101aa:	d006      	beq.n	80101ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80101b0:	2b03      	cmp	r3, #3
 80101b2:	d002      	beq.n	80101ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80101b4:	f06f 030a 	mvn.w	r3, #10
 80101b8:	e048      	b.n	801024c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80101ba:	887b      	ldrh	r3, [r7, #2]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d101      	bne.n	80101c4 <tcp_write_checks+0x50>
    return ERR_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	e043      	b.n	801024c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80101ca:	887a      	ldrh	r2, [r7, #2]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d909      	bls.n	80101e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	8b5b      	ldrh	r3, [r3, #26]
 80101d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d8:	b29a      	uxth	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80101de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101e2:	e033      	b.n	801024c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101ea:	2b08      	cmp	r3, #8
 80101ec:	d909      	bls.n	8010202 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	8b5b      	ldrh	r3, [r3, #26]
 80101f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80101fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010200:	e024      	b.n	801024c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00f      	beq.n	801022c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010210:	2b00      	cmp	r3, #0
 8010212:	d11a      	bne.n	801024a <tcp_write_checks+0xd6>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010218:	2b00      	cmp	r3, #0
 801021a:	d116      	bne.n	801024a <tcp_write_checks+0xd6>
 801021c:	4b0d      	ldr	r3, [pc, #52]	; (8010254 <tcp_write_checks+0xe0>)
 801021e:	f240 1255 	movw	r2, #341	; 0x155
 8010222:	490f      	ldr	r1, [pc, #60]	; (8010260 <tcp_write_checks+0xec>)
 8010224:	480d      	ldr	r0, [pc, #52]	; (801025c <tcp_write_checks+0xe8>)
 8010226:	f004 fd13 	bl	8014c50 <iprintf>
 801022a:	e00e      	b.n	801024a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010230:	2b00      	cmp	r3, #0
 8010232:	d103      	bne.n	801023c <tcp_write_checks+0xc8>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010238:	2b00      	cmp	r3, #0
 801023a:	d006      	beq.n	801024a <tcp_write_checks+0xd6>
 801023c:	4b05      	ldr	r3, [pc, #20]	; (8010254 <tcp_write_checks+0xe0>)
 801023e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010242:	4908      	ldr	r1, [pc, #32]	; (8010264 <tcp_write_checks+0xf0>)
 8010244:	4805      	ldr	r0, [pc, #20]	; (801025c <tcp_write_checks+0xe8>)
 8010246:	f004 fd03 	bl	8014c50 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801024a:	2300      	movs	r3, #0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	08017af8 	.word	0x08017af8
 8010258:	08017c08 	.word	0x08017c08
 801025c:	08017b4c 	.word	0x08017b4c
 8010260:	08017c28 	.word	0x08017c28
 8010264:	08017c64 	.word	0x08017c64

08010268 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010268:	b590      	push	{r4, r7, lr}
 801026a:	b09b      	sub	sp, #108	; 0x6c
 801026c:	af04      	add	r7, sp, #16
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	4611      	mov	r1, r2
 8010274:	461a      	mov	r2, r3
 8010276:	460b      	mov	r3, r1
 8010278:	80fb      	strh	r3, [r7, #6]
 801027a:	4613      	mov	r3, r2
 801027c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801027e:	2300      	movs	r3, #0
 8010280:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010282:	2300      	movs	r3, #0
 8010284:	653b      	str	r3, [r7, #80]	; 0x50
 8010286:	2300      	movs	r3, #0
 8010288:	64fb      	str	r3, [r7, #76]	; 0x4c
 801028a:	2300      	movs	r3, #0
 801028c:	64bb      	str	r3, [r7, #72]	; 0x48
 801028e:	2300      	movs	r3, #0
 8010290:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010292:	2300      	movs	r3, #0
 8010294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010298:	2300      	movs	r3, #0
 801029a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801029e:	2300      	movs	r3, #0
 80102a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80102a2:	2300      	movs	r3, #0
 80102a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d109      	bne.n	80102c4 <tcp_write+0x5c>
 80102b0:	4ba4      	ldr	r3, [pc, #656]	; (8010544 <tcp_write+0x2dc>)
 80102b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80102b6:	49a4      	ldr	r1, [pc, #656]	; (8010548 <tcp_write+0x2e0>)
 80102b8:	48a4      	ldr	r0, [pc, #656]	; (801054c <tcp_write+0x2e4>)
 80102ba:	f004 fcc9 	bl	8014c50 <iprintf>
 80102be:	f06f 030f 	mvn.w	r3, #15
 80102c2:	e32a      	b.n	801091a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80102ca:	085b      	lsrs	r3, r3, #1
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d2:	4293      	cmp	r3, r2
 80102d4:	bf28      	it	cs
 80102d6:	4613      	movcs	r3, r2
 80102d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80102da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d102      	bne.n	80102e6 <tcp_write+0x7e>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102e4:	e000      	b.n	80102e8 <tcp_write+0x80>
 80102e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d109      	bne.n	8010304 <tcp_write+0x9c>
 80102f0:	4b94      	ldr	r3, [pc, #592]	; (8010544 <tcp_write+0x2dc>)
 80102f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80102f6:	4996      	ldr	r1, [pc, #600]	; (8010550 <tcp_write+0x2e8>)
 80102f8:	4894      	ldr	r0, [pc, #592]	; (801054c <tcp_write+0x2e4>)
 80102fa:	f004 fca9 	bl	8014c50 <iprintf>
 80102fe:	f06f 030f 	mvn.w	r3, #15
 8010302:	e30a      	b.n	801091a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010304:	88fb      	ldrh	r3, [r7, #6]
 8010306:	4619      	mov	r1, r3
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f7ff ff33 	bl	8010174 <tcp_write_checks>
 801030e:	4603      	mov	r3, r0
 8010310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010314:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <tcp_write+0xba>
    return err;
 801031c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010320:	e2fb      	b.n	801091a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010328:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801032c:	2300      	movs	r3, #0
 801032e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 80f6 	beq.w	8010528 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010340:	653b      	str	r3, [r7, #80]	; 0x50
 8010342:	e002      	b.n	801034a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801034a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1f8      	bne.n	8010344 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010354:	7a9b      	ldrb	r3, [r3, #10]
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	b29b      	uxth	r3, r3
 801035a:	f003 0304 	and.w	r3, r3, #4
 801035e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010364:	891b      	ldrh	r3, [r3, #8]
 8010366:	4619      	mov	r1, r3
 8010368:	8c3b      	ldrh	r3, [r7, #32]
 801036a:	440b      	add	r3, r1
 801036c:	429a      	cmp	r2, r3
 801036e:	da06      	bge.n	801037e <tcp_write+0x116>
 8010370:	4b74      	ldr	r3, [pc, #464]	; (8010544 <tcp_write+0x2dc>)
 8010372:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010376:	4977      	ldr	r1, [pc, #476]	; (8010554 <tcp_write+0x2ec>)
 8010378:	4874      	ldr	r0, [pc, #464]	; (801054c <tcp_write+0x2e4>)
 801037a:	f004 fc69 	bl	8014c50 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801037e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010380:	891a      	ldrh	r2, [r3, #8]
 8010382:	8c3b      	ldrh	r3, [r7, #32]
 8010384:	4413      	add	r3, r2
 8010386:	b29b      	uxth	r3, r3
 8010388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010394:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010396:	8a7b      	ldrh	r3, [r7, #18]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d026      	beq.n	80103ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801039c:	8a7b      	ldrh	r3, [r7, #18]
 801039e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d206      	bcs.n	80103b2 <tcp_write+0x14a>
 80103a4:	4b67      	ldr	r3, [pc, #412]	; (8010544 <tcp_write+0x2dc>)
 80103a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80103aa:	496b      	ldr	r1, [pc, #428]	; (8010558 <tcp_write+0x2f0>)
 80103ac:	4867      	ldr	r0, [pc, #412]	; (801054c <tcp_write+0x2e4>)
 80103ae:	f004 fc4f 	bl	8014c50 <iprintf>
      seg = last_unsent;
 80103b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80103b6:	8a7b      	ldrh	r3, [r7, #18]
 80103b8:	88fa      	ldrh	r2, [r7, #6]
 80103ba:	4293      	cmp	r3, r2
 80103bc:	bf28      	it	cs
 80103be:	4613      	movcs	r3, r2
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103c4:	4293      	cmp	r3, r2
 80103c6:	bf28      	it	cs
 80103c8:	4613      	movcs	r3, r2
 80103ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80103cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103d2:	4413      	add	r3, r2
 80103d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80103d8:	8a7a      	ldrh	r2, [r7, #18]
 80103da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	b29b      	uxth	r3, r3
 80103e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80103e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80103ea:	8a7b      	ldrh	r3, [r7, #18]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00b      	beq.n	8010408 <tcp_write+0x1a0>
 80103f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d006      	beq.n	8010408 <tcp_write+0x1a0>
 80103fa:	4b52      	ldr	r3, [pc, #328]	; (8010544 <tcp_write+0x2dc>)
 80103fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010400:	4956      	ldr	r1, [pc, #344]	; (801055c <tcp_write+0x2f4>)
 8010402:	4852      	ldr	r0, [pc, #328]	; (801054c <tcp_write+0x2e4>)
 8010404:	f004 fc24 	bl	8014c50 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801040c:	88fb      	ldrh	r3, [r7, #6]
 801040e:	429a      	cmp	r2, r3
 8010410:	f080 8167 	bcs.w	80106e2 <tcp_write+0x47a>
 8010414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 8163 	beq.w	80106e2 <tcp_write+0x47a>
 801041c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041e:	891b      	ldrh	r3, [r3, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 815e 	beq.w	80106e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010426:	88fa      	ldrh	r2, [r7, #6]
 8010428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801042c:	1ad2      	subs	r2, r2, r3
 801042e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010430:	4293      	cmp	r3, r2
 8010432:	bfa8      	it	ge
 8010434:	4613      	movge	r3, r2
 8010436:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801043a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801043c:	797b      	ldrb	r3, [r7, #5]
 801043e:	f003 0301 	and.w	r3, r3, #1
 8010442:	2b00      	cmp	r3, #0
 8010444:	d027      	beq.n	8010496 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010446:	f107 0012 	add.w	r0, r7, #18
 801044a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801044c:	8bf9      	ldrh	r1, [r7, #30]
 801044e:	2301      	movs	r3, #1
 8010450:	9302      	str	r3, [sp, #8]
 8010452:	797b      	ldrb	r3, [r7, #5]
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	4603      	mov	r3, r0
 801045c:	2000      	movs	r0, #0
 801045e:	f7ff fe0f 	bl	8010080 <tcp_pbuf_prealloc>
 8010462:	6578      	str	r0, [r7, #84]	; 0x54
 8010464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 8225 	beq.w	80108b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801046c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801046e:	6858      	ldr	r0, [r3, #4]
 8010470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	4413      	add	r3, r2
 8010478:	8bfa      	ldrh	r2, [r7, #30]
 801047a:	4619      	mov	r1, r3
 801047c:	f004 fb3d 	bl	8014afa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010480:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010482:	f7fb f9bf 	bl	800b804 <pbuf_clen>
 8010486:	4603      	mov	r3, r0
 8010488:	461a      	mov	r2, r3
 801048a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801048e:	4413      	add	r3, r2
 8010490:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010494:	e041      	b.n	801051a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	637b      	str	r3, [r7, #52]	; 0x34
 801049c:	e002      	b.n	80104a4 <tcp_write+0x23c>
 801049e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	637b      	str	r3, [r7, #52]	; 0x34
 80104a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1f8      	bne.n	801049e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ae:	7b1b      	ldrb	r3, [r3, #12]
 80104b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d115      	bne.n	80104e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80104b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104be:	8952      	ldrh	r2, [r2, #10]
 80104c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d10d      	bne.n	80104e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80104c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d006      	beq.n	80104de <tcp_write+0x276>
 80104d0:	4b1c      	ldr	r3, [pc, #112]	; (8010544 <tcp_write+0x2dc>)
 80104d2:	f240 2231 	movw	r2, #561	; 0x231
 80104d6:	4922      	ldr	r1, [pc, #136]	; (8010560 <tcp_write+0x2f8>)
 80104d8:	481c      	ldr	r0, [pc, #112]	; (801054c <tcp_write+0x2e4>)
 80104da:	f004 fbb9 	bl	8014c50 <iprintf>
          extendlen = seglen;
 80104de:	8bfb      	ldrh	r3, [r7, #30]
 80104e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80104e2:	e01a      	b.n	801051a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80104e4:	8bfb      	ldrh	r3, [r7, #30]
 80104e6:	2201      	movs	r2, #1
 80104e8:	4619      	mov	r1, r3
 80104ea:	2000      	movs	r0, #0
 80104ec:	f7fa fe18 	bl	800b120 <pbuf_alloc>
 80104f0:	6578      	str	r0, [r7, #84]	; 0x54
 80104f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 81e0 	beq.w	80108ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80104fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104fe:	68ba      	ldr	r2, [r7, #8]
 8010500:	441a      	add	r2, r3
 8010502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010504:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010506:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010508:	f7fb f97c 	bl	800b804 <pbuf_clen>
 801050c:	4603      	mov	r3, r0
 801050e:	461a      	mov	r2, r3
 8010510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010514:	4413      	add	r3, r2
 8010516:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801051a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801051e:	8bfb      	ldrh	r3, [r7, #30]
 8010520:	4413      	add	r3, r2
 8010522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010526:	e0dc      	b.n	80106e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801052e:	2b00      	cmp	r3, #0
 8010530:	f000 80d7 	beq.w	80106e2 <tcp_write+0x47a>
 8010534:	4b03      	ldr	r3, [pc, #12]	; (8010544 <tcp_write+0x2dc>)
 8010536:	f240 224a 	movw	r2, #586	; 0x24a
 801053a:	490a      	ldr	r1, [pc, #40]	; (8010564 <tcp_write+0x2fc>)
 801053c:	4803      	ldr	r0, [pc, #12]	; (801054c <tcp_write+0x2e4>)
 801053e:	f004 fb87 	bl	8014c50 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010542:	e0ce      	b.n	80106e2 <tcp_write+0x47a>
 8010544:	08017af8 	.word	0x08017af8
 8010548:	08017c98 	.word	0x08017c98
 801054c:	08017b4c 	.word	0x08017b4c
 8010550:	08017cb0 	.word	0x08017cb0
 8010554:	08017ce4 	.word	0x08017ce4
 8010558:	08017cfc 	.word	0x08017cfc
 801055c:	08017d1c 	.word	0x08017d1c
 8010560:	08017d3c 	.word	0x08017d3c
 8010564:	08017d68 	.word	0x08017d68
    struct pbuf *p;
    u16_t left = len - pos;
 8010568:	88fa      	ldrh	r2, [r7, #6]
 801056a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010572:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010576:	b29b      	uxth	r3, r3
 8010578:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801057e:	8b7a      	ldrh	r2, [r7, #26]
 8010580:	8bbb      	ldrh	r3, [r7, #28]
 8010582:	4293      	cmp	r3, r2
 8010584:	bf28      	it	cs
 8010586:	4613      	movcs	r3, r2
 8010588:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801058a:	797b      	ldrb	r3, [r7, #5]
 801058c:	f003 0301 	and.w	r3, r3, #1
 8010590:	2b00      	cmp	r3, #0
 8010592:	d036      	beq.n	8010602 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010594:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010598:	b29a      	uxth	r2, r3
 801059a:	8b3b      	ldrh	r3, [r7, #24]
 801059c:	4413      	add	r3, r2
 801059e:	b299      	uxth	r1, r3
 80105a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	bf0c      	ite	eq
 80105a6:	2301      	moveq	r3, #1
 80105a8:	2300      	movne	r3, #0
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	f107 0012 	add.w	r0, r7, #18
 80105b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80105b2:	9302      	str	r3, [sp, #8]
 80105b4:	797b      	ldrb	r3, [r7, #5]
 80105b6:	9301      	str	r3, [sp, #4]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	4603      	mov	r3, r0
 80105be:	2036      	movs	r0, #54	; 0x36
 80105c0:	f7ff fd5e 	bl	8010080 <tcp_pbuf_prealloc>
 80105c4:	6338      	str	r0, [r7, #48]	; 0x30
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 8178 	beq.w	80108be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	895b      	ldrh	r3, [r3, #10]
 80105d2:	8b3a      	ldrh	r2, [r7, #24]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d906      	bls.n	80105e6 <tcp_write+0x37e>
 80105d8:	4b8c      	ldr	r3, [pc, #560]	; (801080c <tcp_write+0x5a4>)
 80105da:	f240 2266 	movw	r2, #614	; 0x266
 80105de:	498c      	ldr	r1, [pc, #560]	; (8010810 <tcp_write+0x5a8>)
 80105e0:	488c      	ldr	r0, [pc, #560]	; (8010814 <tcp_write+0x5ac>)
 80105e2:	f004 fb35 	bl	8014c50 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80105ee:	18d0      	adds	r0, r2, r3
 80105f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	4413      	add	r3, r2
 80105f8:	8b3a      	ldrh	r2, [r7, #24]
 80105fa:	4619      	mov	r1, r3
 80105fc:	f004 fa7d 	bl	8014afa <memcpy>
 8010600:	e02f      	b.n	8010662 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010602:	8a7b      	ldrh	r3, [r7, #18]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d006      	beq.n	8010616 <tcp_write+0x3ae>
 8010608:	4b80      	ldr	r3, [pc, #512]	; (801080c <tcp_write+0x5a4>)
 801060a:	f240 2271 	movw	r2, #625	; 0x271
 801060e:	4982      	ldr	r1, [pc, #520]	; (8010818 <tcp_write+0x5b0>)
 8010610:	4880      	ldr	r0, [pc, #512]	; (8010814 <tcp_write+0x5ac>)
 8010612:	f004 fb1d 	bl	8014c50 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010616:	8b3b      	ldrh	r3, [r7, #24]
 8010618:	2201      	movs	r2, #1
 801061a:	4619      	mov	r1, r3
 801061c:	2036      	movs	r0, #54	; 0x36
 801061e:	f7fa fd7f 	bl	800b120 <pbuf_alloc>
 8010622:	6178      	str	r0, [r7, #20]
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f000 814b 	beq.w	80108c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801062c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010630:	68ba      	ldr	r2, [r7, #8]
 8010632:	441a      	add	r2, r3
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801063c:	b29b      	uxth	r3, r3
 801063e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010642:	4619      	mov	r1, r3
 8010644:	2036      	movs	r0, #54	; 0x36
 8010646:	f7fa fd6b 	bl	800b120 <pbuf_alloc>
 801064a:	6338      	str	r0, [r7, #48]	; 0x30
 801064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064e:	2b00      	cmp	r3, #0
 8010650:	d103      	bne.n	801065a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010652:	6978      	ldr	r0, [r7, #20]
 8010654:	f7fb f848 	bl	800b6e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010658:	e136      	b.n	80108c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801065a:	6979      	ldr	r1, [r7, #20]
 801065c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801065e:	f7fb f911 	bl	800b884 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010664:	f7fb f8ce 	bl	800b804 <pbuf_clen>
 8010668:	4603      	mov	r3, r0
 801066a:	461a      	mov	r2, r3
 801066c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010670:	4413      	add	r3, r2
 8010672:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801067a:	2b09      	cmp	r3, #9
 801067c:	d903      	bls.n	8010686 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801067e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010680:	f7fb f832 	bl	800b6e8 <pbuf_free>
      goto memerr;
 8010684:	e120      	b.n	80108c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801068a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801068e:	441a      	add	r2, r3
 8010690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	4613      	mov	r3, r2
 8010698:	2200      	movs	r2, #0
 801069a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff fc51 	bl	800ff44 <tcp_create_segment>
 80106a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80106a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f000 810d 	beq.w	80108c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80106ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d102      	bne.n	80106b8 <tcp_write+0x450>
      queue = seg;
 80106b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b4:	647b      	str	r3, [r7, #68]	; 0x44
 80106b6:	e00c      	b.n	80106d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80106b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d106      	bne.n	80106cc <tcp_write+0x464>
 80106be:	4b53      	ldr	r3, [pc, #332]	; (801080c <tcp_write+0x5a4>)
 80106c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80106c4:	4955      	ldr	r1, [pc, #340]	; (801081c <tcp_write+0x5b4>)
 80106c6:	4853      	ldr	r0, [pc, #332]	; (8010814 <tcp_write+0x5ac>)
 80106c8:	f004 fac2 	bl	8014c50 <iprintf>
      prev_seg->next = seg;
 80106cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80106d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80106d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106da:	8b3b      	ldrh	r3, [r7, #24]
 80106dc:	4413      	add	r3, r2
 80106de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80106e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106e6:	88fb      	ldrh	r3, [r7, #6]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	f4ff af3d 	bcc.w	8010568 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80106ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d02c      	beq.n	801074e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80106f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106fa:	e01e      	b.n	801073a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80106fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fe:	891a      	ldrh	r2, [r3, #8]
 8010700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010702:	4413      	add	r3, r2
 8010704:	b29a      	uxth	r2, r3
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010708:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d110      	bne.n	8010734 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010718:	8952      	ldrh	r2, [r2, #10]
 801071a:	4413      	add	r3, r2
 801071c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801071e:	68b9      	ldr	r1, [r7, #8]
 8010720:	4618      	mov	r0, r3
 8010722:	f004 f9ea 	bl	8014afa <memcpy>
        p->len += oversize_used;
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	895a      	ldrh	r2, [r3, #10]
 801072a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801072c:	4413      	add	r3, r2
 801072e:	b29a      	uxth	r2, r3
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	62fb      	str	r3, [r7, #44]	; 0x2c
 801073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1dd      	bne.n	80106fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010742:	891a      	ldrh	r2, [r3, #8]
 8010744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010746:	4413      	add	r3, r2
 8010748:	b29a      	uxth	r2, r3
 801074a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801074c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801074e:	8a7a      	ldrh	r2, [r7, #18]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010758:	2b00      	cmp	r3, #0
 801075a:	d018      	beq.n	801078e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801075c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <tcp_write+0x508>
 8010762:	4b2a      	ldr	r3, [pc, #168]	; (801080c <tcp_write+0x5a4>)
 8010764:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010768:	492d      	ldr	r1, [pc, #180]	; (8010820 <tcp_write+0x5b8>)
 801076a:	482a      	ldr	r0, [pc, #168]	; (8010814 <tcp_write+0x5ac>)
 801076c:	f004 fa70 	bl	8014c50 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010776:	4618      	mov	r0, r3
 8010778:	f7fb f884 	bl	800b884 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801077c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801077e:	891a      	ldrh	r2, [r3, #8]
 8010780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010782:	891b      	ldrh	r3, [r3, #8]
 8010784:	4413      	add	r3, r2
 8010786:	b29a      	uxth	r2, r3
 8010788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801078a:	811a      	strh	r2, [r3, #8]
 801078c:	e037      	b.n	80107fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 801078e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010790:	2b00      	cmp	r3, #0
 8010792:	d034      	beq.n	80107fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010796:	2b00      	cmp	r3, #0
 8010798:	d003      	beq.n	80107a2 <tcp_write+0x53a>
 801079a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d106      	bne.n	80107b0 <tcp_write+0x548>
 80107a2:	4b1a      	ldr	r3, [pc, #104]	; (801080c <tcp_write+0x5a4>)
 80107a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80107a8:	491e      	ldr	r1, [pc, #120]	; (8010824 <tcp_write+0x5bc>)
 80107aa:	481a      	ldr	r0, [pc, #104]	; (8010814 <tcp_write+0x5ac>)
 80107ac:	f004 fa50 	bl	8014c50 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80107b6:	e009      	b.n	80107cc <tcp_write+0x564>
      p->tot_len += extendlen;
 80107b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ba:	891a      	ldrh	r2, [r3, #8]
 80107bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107be:	4413      	add	r3, r2
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1f1      	bne.n	80107b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80107d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d6:	891a      	ldrh	r2, [r3, #8]
 80107d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107da:	4413      	add	r3, r2
 80107dc:	b29a      	uxth	r2, r3
 80107de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80107e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e4:	895a      	ldrh	r2, [r3, #10]
 80107e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107e8:	4413      	add	r3, r2
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80107f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f2:	891a      	ldrh	r2, [r3, #8]
 80107f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107f6:	4413      	add	r3, r2
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80107fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010800:	2b00      	cmp	r3, #0
 8010802:	d111      	bne.n	8010828 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010808:	66da      	str	r2, [r3, #108]	; 0x6c
 801080a:	e010      	b.n	801082e <tcp_write+0x5c6>
 801080c:	08017af8 	.word	0x08017af8
 8010810:	08017d98 	.word	0x08017d98
 8010814:	08017b4c 	.word	0x08017b4c
 8010818:	08017dd8 	.word	0x08017dd8
 801081c:	08017de8 	.word	0x08017de8
 8010820:	08017dfc 	.word	0x08017dfc
 8010824:	08017e34 	.word	0x08017e34
  } else {
    last_unsent->next = queue;
 8010828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801082c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010832:	88fb      	ldrh	r3, [r7, #6]
 8010834:	441a      	add	r2, r3
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010840:	88fb      	ldrh	r3, [r7, #6]
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	b29a      	uxth	r2, r3
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010852:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00e      	beq.n	801087e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10a      	bne.n	801087e <tcp_write+0x616>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086c:	2b00      	cmp	r3, #0
 801086e:	d106      	bne.n	801087e <tcp_write+0x616>
 8010870:	4b2c      	ldr	r3, [pc, #176]	; (8010924 <tcp_write+0x6bc>)
 8010872:	f240 3212 	movw	r2, #786	; 0x312
 8010876:	492c      	ldr	r1, [pc, #176]	; (8010928 <tcp_write+0x6c0>)
 8010878:	482c      	ldr	r0, [pc, #176]	; (801092c <tcp_write+0x6c4>)
 801087a:	f004 f9e9 	bl	8014c50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801087e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010880:	2b00      	cmp	r3, #0
 8010882:	d016      	beq.n	80108b2 <tcp_write+0x64a>
 8010884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d012      	beq.n	80108b2 <tcp_write+0x64a>
 801088c:	797b      	ldrb	r3, [r7, #5]
 801088e:	f003 0302 	and.w	r3, r3, #2
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10d      	bne.n	80108b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	899b      	ldrh	r3, [r3, #12]
 801089c:	b29c      	uxth	r4, r3
 801089e:	2008      	movs	r0, #8
 80108a0:	f7f9 fb36 	bl	8009f10 <lwip_htons>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	4322      	orrs	r2, r4
 80108ae:	b292      	uxth	r2, r2
 80108b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	e031      	b.n	801091a <tcp_write+0x6b2>
          goto memerr;
 80108b6:	bf00      	nop
 80108b8:	e006      	b.n	80108c8 <tcp_write+0x660>
            goto memerr;
 80108ba:	bf00      	nop
 80108bc:	e004      	b.n	80108c8 <tcp_write+0x660>
        goto memerr;
 80108be:	bf00      	nop
 80108c0:	e002      	b.n	80108c8 <tcp_write+0x660>
        goto memerr;
 80108c2:	bf00      	nop
 80108c4:	e000      	b.n	80108c8 <tcp_write+0x660>
      goto memerr;
 80108c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	8b5b      	ldrh	r3, [r3, #26]
 80108cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80108d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80108dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108de:	f7fa ff03 	bl	800b6e8 <pbuf_free>
  }
  if (queue != NULL) {
 80108e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <tcp_write+0x686>
    tcp_segs_free(queue);
 80108e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80108ea:	f7fc fb6b 	bl	800cfc4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00e      	beq.n	8010916 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10a      	bne.n	8010916 <tcp_write+0x6ae>
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <tcp_write+0x6ae>
 8010908:	4b06      	ldr	r3, [pc, #24]	; (8010924 <tcp_write+0x6bc>)
 801090a:	f240 3227 	movw	r2, #807	; 0x327
 801090e:	4906      	ldr	r1, [pc, #24]	; (8010928 <tcp_write+0x6c0>)
 8010910:	4806      	ldr	r0, [pc, #24]	; (801092c <tcp_write+0x6c4>)
 8010912:	f004 f99d 	bl	8014c50 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801091a:	4618      	mov	r0, r3
 801091c:	375c      	adds	r7, #92	; 0x5c
 801091e:	46bd      	mov	sp, r7
 8010920:	bd90      	pop	{r4, r7, pc}
 8010922:	bf00      	nop
 8010924:	08017af8 	.word	0x08017af8
 8010928:	08017e6c 	.word	0x08017e6c
 801092c:	08017b4c 	.word	0x08017b4c

08010930 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010930:	b590      	push	{r4, r7, lr}
 8010932:	b08b      	sub	sp, #44	; 0x2c
 8010934:	af02      	add	r7, sp, #8
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	460b      	mov	r3, r1
 801093a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801093c:	2300      	movs	r3, #0
 801093e:	61fb      	str	r3, [r7, #28]
 8010940:	2300      	movs	r3, #0
 8010942:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d106      	bne.n	801095c <tcp_split_unsent_seg+0x2c>
 801094e:	4b95      	ldr	r3, [pc, #596]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 8010950:	f240 324b 	movw	r2, #843	; 0x34b
 8010954:	4994      	ldr	r1, [pc, #592]	; (8010ba8 <tcp_split_unsent_seg+0x278>)
 8010956:	4895      	ldr	r0, [pc, #596]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 8010958:	f004 f97a 	bl	8014c50 <iprintf>

  useg = pcb->unsent;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010960:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d102      	bne.n	801096e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801096c:	e116      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801096e:	887b      	ldrh	r3, [r7, #2]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d109      	bne.n	8010988 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010974:	4b8b      	ldr	r3, [pc, #556]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 8010976:	f240 3253 	movw	r2, #851	; 0x353
 801097a:	498d      	ldr	r1, [pc, #564]	; (8010bb0 <tcp_split_unsent_seg+0x280>)
 801097c:	488b      	ldr	r0, [pc, #556]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 801097e:	f004 f967 	bl	8014c50 <iprintf>
    return ERR_VAL;
 8010982:	f06f 0305 	mvn.w	r3, #5
 8010986:	e109      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	891b      	ldrh	r3, [r3, #8]
 801098c:	887a      	ldrh	r2, [r7, #2]
 801098e:	429a      	cmp	r2, r3
 8010990:	d301      	bcc.n	8010996 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010992:	2300      	movs	r3, #0
 8010994:	e102      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801099a:	887a      	ldrh	r2, [r7, #2]
 801099c:	429a      	cmp	r2, r3
 801099e:	d906      	bls.n	80109ae <tcp_split_unsent_seg+0x7e>
 80109a0:	4b80      	ldr	r3, [pc, #512]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 80109a2:	f240 325b 	movw	r2, #859	; 0x35b
 80109a6:	4983      	ldr	r1, [pc, #524]	; (8010bb4 <tcp_split_unsent_seg+0x284>)
 80109a8:	4880      	ldr	r0, [pc, #512]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 80109aa:	f004 f951 	bl	8014c50 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	891b      	ldrh	r3, [r3, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_split_unsent_seg+0x94>
 80109b6:	4b7b      	ldr	r3, [pc, #492]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 80109b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80109bc:	497e      	ldr	r1, [pc, #504]	; (8010bb8 <tcp_split_unsent_seg+0x288>)
 80109be:	487b      	ldr	r0, [pc, #492]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 80109c0:	f004 f946 	bl	8014c50 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	7a9b      	ldrb	r3, [r3, #10]
 80109c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	f003 0304 	and.w	r3, r3, #4
 80109d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	891a      	ldrh	r2, [r3, #8]
 80109da:	887b      	ldrh	r3, [r7, #2]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	89bb      	ldrh	r3, [r7, #12]
 80109e6:	4413      	add	r3, r2
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109ee:	4619      	mov	r1, r3
 80109f0:	2036      	movs	r0, #54	; 0x36
 80109f2:	f7fa fb95 	bl	800b120 <pbuf_alloc>
 80109f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 80b7 	beq.w	8010b6e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	891a      	ldrh	r2, [r3, #8]
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	891b      	ldrh	r3, [r3, #8]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	887b      	ldrh	r3, [r7, #2]
 8010a10:	4413      	add	r3, r2
 8010a12:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	6858      	ldr	r0, [r3, #4]
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	685a      	ldr	r2, [r3, #4]
 8010a1c:	7bbb      	ldrb	r3, [r7, #14]
 8010a1e:	18d1      	adds	r1, r2, r3
 8010a20:	897b      	ldrh	r3, [r7, #10]
 8010a22:	89ba      	ldrh	r2, [r7, #12]
 8010a24:	f7fb f856 	bl	800bad4 <pbuf_copy_partial>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	89bb      	ldrh	r3, [r7, #12]
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	f040 809f 	bne.w	8010b72 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	899b      	ldrh	r3, [r3, #12]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f9 fa67 	bl	8009f10 <lwip_htons>
 8010a42:	4603      	mov	r3, r0
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a4a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010a50:	7efb      	ldrb	r3, [r7, #27]
 8010a52:	f003 0308 	and.w	r3, r3, #8
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d007      	beq.n	8010a6a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010a5a:	7efb      	ldrb	r3, [r7, #27]
 8010a5c:	f023 0308 	bic.w	r3, r3, #8
 8010a60:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010a62:	7ebb      	ldrb	r3, [r7, #26]
 8010a64:	f043 0308 	orr.w	r3, r3, #8
 8010a68:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010a6a:	7efb      	ldrb	r3, [r7, #27]
 8010a6c:	f003 0301 	and.w	r3, r3, #1
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d007      	beq.n	8010a84 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010a74:	7efb      	ldrb	r3, [r7, #27]
 8010a76:	f023 0301 	bic.w	r3, r3, #1
 8010a7a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010a7c:	7ebb      	ldrb	r3, [r7, #26]
 8010a7e:	f043 0301 	orr.w	r3, r3, #1
 8010a82:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7f9 fa55 	bl	8009f3a <lwip_htonl>
 8010a90:	4602      	mov	r2, r0
 8010a92:	887b      	ldrh	r3, [r7, #2]
 8010a94:	18d1      	adds	r1, r2, r3
 8010a96:	7eba      	ldrb	r2, [r7, #26]
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	6939      	ldr	r1, [r7, #16]
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff fa4f 	bl	800ff44 <tcp_create_segment>
 8010aa6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d063      	beq.n	8010b76 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fa fea6 	bl	800b804 <pbuf_clen>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	461a      	mov	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ac2:	1a9b      	subs	r3, r3, r2
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	6858      	ldr	r0, [r3, #4]
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	891a      	ldrh	r2, [r3, #8]
 8010ad6:	89bb      	ldrh	r3, [r7, #12]
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4619      	mov	r1, r3
 8010ade:	f7fa fc7d 	bl	800b3dc <pbuf_realloc>
  useg->len -= remainder;
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	891a      	ldrh	r2, [r3, #8]
 8010ae6:	89bb      	ldrh	r3, [r7, #12]
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	899b      	ldrh	r3, [r3, #12]
 8010af6:	b29c      	uxth	r4, r3
 8010af8:	7efb      	ldrb	r3, [r7, #27]
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7f9 fa07 	bl	8009f10 <lwip_htons>
 8010b02:	4603      	mov	r3, r0
 8010b04:	461a      	mov	r2, r3
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	4322      	orrs	r2, r4
 8010b0c:	b292      	uxth	r2, r2
 8010b0e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fa fe75 	bl	800b804 <pbuf_clen>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b24:	4413      	add	r3, r2
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fa fe66 	bl	800b804 <pbuf_clen>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b42:	4413      	add	r3, r2
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	69fa      	ldr	r2, [r7, #28]
 8010b58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d103      	bne.n	8010b6a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e016      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010b6e:	bf00      	nop
 8010b70:	e002      	b.n	8010b78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b72:	bf00      	nop
 8010b74:	e000      	b.n	8010b78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b76:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d006      	beq.n	8010b8c <tcp_split_unsent_seg+0x25c>
 8010b7e:	4b09      	ldr	r3, [pc, #36]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 8010b80:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010b84:	490d      	ldr	r1, [pc, #52]	; (8010bbc <tcp_split_unsent_seg+0x28c>)
 8010b86:	4809      	ldr	r0, [pc, #36]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 8010b88:	f004 f862 	bl	8014c50 <iprintf>
  if (p != NULL) {
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d002      	beq.n	8010b98 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010b92:	6938      	ldr	r0, [r7, #16]
 8010b94:	f7fa fda8 	bl	800b6e8 <pbuf_free>
  }

  return ERR_MEM;
 8010b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3724      	adds	r7, #36	; 0x24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd90      	pop	{r4, r7, pc}
 8010ba4:	08017af8 	.word	0x08017af8
 8010ba8:	08017e8c 	.word	0x08017e8c
 8010bac:	08017b4c 	.word	0x08017b4c
 8010bb0:	08017eb0 	.word	0x08017eb0
 8010bb4:	08017ed4 	.word	0x08017ed4
 8010bb8:	08017ee4 	.word	0x08017ee4
 8010bbc:	08017ef4 	.word	0x08017ef4

08010bc0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010bc0:	b590      	push	{r4, r7, lr}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_send_fin+0x1c>
 8010bce:	4b21      	ldr	r3, [pc, #132]	; (8010c54 <tcp_send_fin+0x94>)
 8010bd0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010bd4:	4920      	ldr	r1, [pc, #128]	; (8010c58 <tcp_send_fin+0x98>)
 8010bd6:	4821      	ldr	r0, [pc, #132]	; (8010c5c <tcp_send_fin+0x9c>)
 8010bd8:	f004 f83a 	bl	8014c50 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d02e      	beq.n	8010c42 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be8:	60fb      	str	r3, [r7, #12]
 8010bea:	e002      	b.n	8010bf2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1f8      	bne.n	8010bec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	899b      	ldrh	r3, [r3, #12]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7f9 f984 	bl	8009f10 <lwip_htons>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	f003 0307 	and.w	r3, r3, #7
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d116      	bne.n	8010c42 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	899b      	ldrh	r3, [r3, #12]
 8010c1a:	b29c      	uxth	r4, r3
 8010c1c:	2001      	movs	r0, #1
 8010c1e:	f7f9 f977 	bl	8009f10 <lwip_htons>
 8010c22:	4603      	mov	r3, r0
 8010c24:	461a      	mov	r2, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	4322      	orrs	r2, r4
 8010c2c:	b292      	uxth	r2, r2
 8010c2e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	8b5b      	ldrh	r3, [r3, #26]
 8010c34:	f043 0320 	orr.w	r3, r3, #32
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e004      	b.n	8010c4c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010c42:	2101      	movs	r1, #1
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f80b 	bl	8010c60 <tcp_enqueue_flags>
 8010c4a:	4603      	mov	r3, r0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd90      	pop	{r4, r7, pc}
 8010c54:	08017af8 	.word	0x08017af8
 8010c58:	08017f00 	.word	0x08017f00
 8010c5c:	08017b4c 	.word	0x08017b4c

08010c60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08a      	sub	sp, #40	; 0x28
 8010c64:	af02      	add	r7, sp, #8
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010c74:	78fb      	ldrb	r3, [r7, #3]
 8010c76:	f003 0303 	and.w	r3, r3, #3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d106      	bne.n	8010c8c <tcp_enqueue_flags+0x2c>
 8010c7e:	4b67      	ldr	r3, [pc, #412]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010c80:	f240 4211 	movw	r2, #1041	; 0x411
 8010c84:	4966      	ldr	r1, [pc, #408]	; (8010e20 <tcp_enqueue_flags+0x1c0>)
 8010c86:	4867      	ldr	r0, [pc, #412]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010c88:	f003 ffe2 	bl	8014c50 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d106      	bne.n	8010ca0 <tcp_enqueue_flags+0x40>
 8010c92:	4b62      	ldr	r3, [pc, #392]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010c94:	f240 4213 	movw	r2, #1043	; 0x413
 8010c98:	4963      	ldr	r1, [pc, #396]	; (8010e28 <tcp_enqueue_flags+0x1c8>)
 8010c9a:	4862      	ldr	r0, [pc, #392]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010c9c:	f003 ffd8 	bl	8014c50 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	f003 0302 	and.w	r3, r3, #2
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010caa:	2301      	movs	r3, #1
 8010cac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cae:	7ffb      	ldrb	r3, [r7, #31]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	f003 0304 	and.w	r3, r3, #4
 8010cb8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010cba:	7dfb      	ldrb	r3, [r7, #23]
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	2036      	movs	r0, #54	; 0x36
 8010cc6:	f7fa fa2b 	bl	800b120 <pbuf_alloc>
 8010cca:	6138      	str	r0, [r7, #16]
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d109      	bne.n	8010ce6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ce4:	e095      	b.n	8010e12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	895a      	ldrh	r2, [r3, #10]
 8010cea:	7dfb      	ldrb	r3, [r7, #23]
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d206      	bcs.n	8010d00 <tcp_enqueue_flags+0xa0>
 8010cf2:	4b4a      	ldr	r3, [pc, #296]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010cf4:	f240 4239 	movw	r2, #1081	; 0x439
 8010cf8:	494c      	ldr	r1, [pc, #304]	; (8010e2c <tcp_enqueue_flags+0x1cc>)
 8010cfa:	484a      	ldr	r0, [pc, #296]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010cfc:	f003 ffa8 	bl	8014c50 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010d04:	78fa      	ldrb	r2, [r7, #3]
 8010d06:	7ffb      	ldrb	r3, [r7, #31]
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	6939      	ldr	r1, [r7, #16]
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7ff f918 	bl	800ff44 <tcp_create_segment>
 8010d14:	60f8      	str	r0, [r7, #12]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d109      	bne.n	8010d30 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	8b5b      	ldrh	r3, [r3, #26]
 8010d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d2e:	e070      	b.n	8010e12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	f003 0303 	and.w	r3, r3, #3
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d006      	beq.n	8010d4a <tcp_enqueue_flags+0xea>
 8010d3c:	4b37      	ldr	r3, [pc, #220]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010d3e:	f240 4242 	movw	r2, #1090	; 0x442
 8010d42:	493b      	ldr	r1, [pc, #236]	; (8010e30 <tcp_enqueue_flags+0x1d0>)
 8010d44:	4837      	ldr	r0, [pc, #220]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010d46:	f003 ff83 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	891b      	ldrh	r3, [r3, #8]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d006      	beq.n	8010d60 <tcp_enqueue_flags+0x100>
 8010d52:	4b32      	ldr	r3, [pc, #200]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010d54:	f240 4243 	movw	r2, #1091	; 0x443
 8010d58:	4936      	ldr	r1, [pc, #216]	; (8010e34 <tcp_enqueue_flags+0x1d4>)
 8010d5a:	4832      	ldr	r0, [pc, #200]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010d5c:	f003 ff78 	bl	8014c50 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d103      	bne.n	8010d70 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d6e:	e00d      	b.n	8010d8c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d74:	61bb      	str	r3, [r7, #24]
 8010d76:	e002      	b.n	8010d7e <tcp_enqueue_flags+0x11e>
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	61bb      	str	r3, [r7, #24]
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1f8      	bne.n	8010d78 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	68fa      	ldr	r2, [r7, #12]
 8010d8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010d94:	78fb      	ldrb	r3, [r7, #3]
 8010d96:	f003 0302 	and.w	r3, r3, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d104      	bne.n	8010da8 <tcp_enqueue_flags+0x148>
 8010d9e:	78fb      	ldrb	r3, [r7, #3]
 8010da0:	f003 0301 	and.w	r3, r3, #1
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d004      	beq.n	8010db2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	f003 0301 	and.w	r3, r3, #1
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d006      	beq.n	8010dca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	8b5b      	ldrh	r3, [r3, #26]
 8010dc0:	f043 0320 	orr.w	r3, r3, #32
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fa fd18 	bl	800b804 <pbuf_clen>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dde:	4413      	add	r3, r2
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d00e      	beq.n	8010e10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d10a      	bne.n	8010e10 <tcp_enqueue_flags+0x1b0>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <tcp_enqueue_flags+0x1b0>
 8010e02:	4b06      	ldr	r3, [pc, #24]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010e04:	f240 4265 	movw	r2, #1125	; 0x465
 8010e08:	490b      	ldr	r1, [pc, #44]	; (8010e38 <tcp_enqueue_flags+0x1d8>)
 8010e0a:	4806      	ldr	r0, [pc, #24]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010e0c:	f003 ff20 	bl	8014c50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3720      	adds	r7, #32
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08017af8 	.word	0x08017af8
 8010e20:	08017f1c 	.word	0x08017f1c
 8010e24:	08017b4c 	.word	0x08017b4c
 8010e28:	08017f74 	.word	0x08017f74
 8010e2c:	08017f94 	.word	0x08017f94
 8010e30:	08017fd0 	.word	0x08017fd0
 8010e34:	08017fe8 	.word	0x08017fe8
 8010e38:	08018014 	.word	0x08018014

08010e3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010e3c:	b5b0      	push	{r4, r5, r7, lr}
 8010e3e:	b08a      	sub	sp, #40	; 0x28
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <tcp_output+0x1c>
 8010e4a:	4b8a      	ldr	r3, [pc, #552]	; (8011074 <tcp_output+0x238>)
 8010e4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010e50:	4989      	ldr	r1, [pc, #548]	; (8011078 <tcp_output+0x23c>)
 8010e52:	488a      	ldr	r0, [pc, #552]	; (801107c <tcp_output+0x240>)
 8010e54:	f003 fefc 	bl	8014c50 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	7d1b      	ldrb	r3, [r3, #20]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d106      	bne.n	8010e6e <tcp_output+0x32>
 8010e60:	4b84      	ldr	r3, [pc, #528]	; (8011074 <tcp_output+0x238>)
 8010e62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010e66:	4986      	ldr	r1, [pc, #536]	; (8011080 <tcp_output+0x244>)
 8010e68:	4884      	ldr	r0, [pc, #528]	; (801107c <tcp_output+0x240>)
 8010e6a:	f003 fef1 	bl	8014c50 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010e6e:	4b85      	ldr	r3, [pc, #532]	; (8011084 <tcp_output+0x248>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	687a      	ldr	r2, [r7, #4]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d101      	bne.n	8010e7c <tcp_output+0x40>
    return ERR_OK;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	e1ce      	b.n	801121a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	bf28      	it	cs
 8010e8c:	4613      	movcs	r3, r2
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d10b      	bne.n	8010eb6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8b5b      	ldrh	r3, [r3, #26]
 8010ea2:	f003 0302 	and.w	r3, r3, #2
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f000 81aa 	beq.w	8011200 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 fdcb 	bl	8011a48 <tcp_send_empty_ack>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	e1b1      	b.n	801121a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	3304      	adds	r3, #4
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f7ff f824 	bl	800ff0c <tcp_route>
 8010ec4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d102      	bne.n	8010ed2 <tcp_output+0x96>
    return ERR_RTE;
 8010ecc:	f06f 0303 	mvn.w	r3, #3
 8010ed0:	e1a3      	b.n	801121a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <tcp_output+0xa4>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d111      	bne.n	8010f04 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d002      	beq.n	8010eec <tcp_output+0xb0>
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	3304      	adds	r3, #4
 8010eea:	e000      	b.n	8010eee <tcp_output+0xb2>
 8010eec:	2300      	movs	r3, #0
 8010eee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d102      	bne.n	8010efc <tcp_output+0xc0>
      return ERR_RTE;
 8010ef6:	f06f 0303 	mvn.w	r3, #3
 8010efa:	e18e      	b.n	801121a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7f9 f815 	bl	8009f3a <lwip_htonl>
 8010f10:	4602      	mov	r2, r0
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f1a:	8912      	ldrh	r2, [r2, #8]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	69ba      	ldr	r2, [r7, #24]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d227      	bcs.n	8010f74 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d114      	bne.n	8010f5c <tcp_output+0x120>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d110      	bne.n	8010f5c <tcp_output+0x120>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d10b      	bne.n	8010f5c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	8b5b      	ldrh	r3, [r3, #26]
 8010f60:	f003 0302 	and.w	r3, r3, #2
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f000 814d 	beq.w	8011204 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f000 fd6c 	bl	8011a48 <tcp_send_empty_ack>
 8010f70:	4603      	mov	r3, r0
 8010f72:	e152      	b.n	801121a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f80:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010f82:	6a3b      	ldr	r3, [r7, #32]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f000 811c 	beq.w	80111c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010f8a:	e002      	b.n	8010f92 <tcp_output+0x156>
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	623b      	str	r3, [r7, #32]
 8010f92:	6a3b      	ldr	r3, [r7, #32]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d1f8      	bne.n	8010f8c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010f9a:	e112      	b.n	80111c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7f8 ffb3 	bl	8009f10 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f003 0304 	and.w	r3, r3, #4
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d006      	beq.n	8010fc4 <tcp_output+0x188>
 8010fb6:	4b2f      	ldr	r3, [pc, #188]	; (8011074 <tcp_output+0x238>)
 8010fb8:	f240 5236 	movw	r2, #1334	; 0x536
 8010fbc:	4932      	ldr	r1, [pc, #200]	; (8011088 <tcp_output+0x24c>)
 8010fbe:	482f      	ldr	r0, [pc, #188]	; (801107c <tcp_output+0x240>)
 8010fc0:	f003 fe46 	bl	8014c50 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01f      	beq.n	801100c <tcp_output+0x1d0>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	8b5b      	ldrh	r3, [r3, #26]
 8010fd0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d119      	bne.n	801100c <tcp_output+0x1d0>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00b      	beq.n	8010ff8 <tcp_output+0x1bc>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d110      	bne.n	801100c <tcp_output+0x1d0>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fee:	891a      	ldrh	r2, [r3, #8]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d209      	bcs.n	801100c <tcp_output+0x1d0>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d004      	beq.n	801100c <tcp_output+0x1d0>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011008:	2b08      	cmp	r3, #8
 801100a:	d901      	bls.n	8011010 <tcp_output+0x1d4>
 801100c:	2301      	movs	r3, #1
 801100e:	e000      	b.n	8011012 <tcp_output+0x1d6>
 8011010:	2300      	movs	r3, #0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	8b5b      	ldrh	r3, [r3, #26]
 801101a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801101e:	2b00      	cmp	r3, #0
 8011020:	f000 80e4 	beq.w	80111ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	7d1b      	ldrb	r3, [r3, #20]
 8011028:	2b02      	cmp	r3, #2
 801102a:	d00d      	beq.n	8011048 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	899b      	ldrh	r3, [r3, #12]
 8011032:	b29c      	uxth	r4, r3
 8011034:	2010      	movs	r0, #16
 8011036:	f7f8 ff6b 	bl	8009f10 <lwip_htons>
 801103a:	4603      	mov	r3, r0
 801103c:	461a      	mov	r2, r3
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	4322      	orrs	r2, r4
 8011044:	b292      	uxth	r2, r2
 8011046:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011048:	697a      	ldr	r2, [r7, #20]
 801104a:	6879      	ldr	r1, [r7, #4]
 801104c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801104e:	f000 f909 	bl	8011264 <tcp_output_segment>
 8011052:	4603      	mov	r3, r0
 8011054:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d016      	beq.n	801108c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	8b5b      	ldrh	r3, [r3, #26]
 8011062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011066:	b29a      	uxth	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	835a      	strh	r2, [r3, #26]
      return err;
 801106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011070:	e0d3      	b.n	801121a <tcp_output+0x3de>
 8011072:	bf00      	nop
 8011074:	08017af8 	.word	0x08017af8
 8011078:	0801803c 	.word	0x0801803c
 801107c:	08017b4c 	.word	0x08017b4c
 8011080:	08018054 	.word	0x08018054
 8011084:	20011850 	.word	0x20011850
 8011088:	0801807c 	.word	0x0801807c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	7d1b      	ldrb	r3, [r3, #20]
 8011098:	2b02      	cmp	r3, #2
 801109a:	d006      	beq.n	80110aa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	8b5b      	ldrh	r3, [r3, #26]
 80110a0:	f023 0303 	bic.w	r3, r3, #3
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ac:	68db      	ldr	r3, [r3, #12]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7f8 ff42 	bl	8009f3a <lwip_htonl>
 80110b6:	4604      	mov	r4, r0
 80110b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ba:	891b      	ldrh	r3, [r3, #8]
 80110bc:	461d      	mov	r5, r3
 80110be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	899b      	ldrh	r3, [r3, #12]
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7f8 ff22 	bl	8009f10 <lwip_htons>
 80110cc:	4603      	mov	r3, r0
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	f003 0303 	and.w	r3, r3, #3
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <tcp_output+0x2a0>
 80110d8:	2301      	movs	r3, #1
 80110da:	e000      	b.n	80110de <tcp_output+0x2a2>
 80110dc:	2300      	movs	r3, #0
 80110de:	442b      	add	r3, r5
 80110e0:	4423      	add	r3, r4
 80110e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	da02      	bge.n	80110f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80110f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f8:	891b      	ldrh	r3, [r3, #8]
 80110fa:	461c      	mov	r4, r3
 80110fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	899b      	ldrh	r3, [r3, #12]
 8011102:	b29b      	uxth	r3, r3
 8011104:	4618      	mov	r0, r3
 8011106:	f7f8 ff03 	bl	8009f10 <lwip_htons>
 801110a:	4603      	mov	r3, r0
 801110c:	b2db      	uxtb	r3, r3
 801110e:	f003 0303 	and.w	r3, r3, #3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <tcp_output+0x2de>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <tcp_output+0x2e0>
 801111a:	2300      	movs	r3, #0
 801111c:	4423      	add	r3, r4
 801111e:	2b00      	cmp	r3, #0
 8011120:	d049      	beq.n	80111b6 <tcp_output+0x37a>
      seg->next = NULL;
 8011122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011124:	2200      	movs	r2, #0
 8011126:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801112c:	2b00      	cmp	r3, #0
 801112e:	d105      	bne.n	801113c <tcp_output+0x300>
        pcb->unacked = seg;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011134:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011138:	623b      	str	r3, [r7, #32]
 801113a:	e03f      	b.n	80111bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	4618      	mov	r0, r3
 8011144:	f7f8 fef9 	bl	8009f3a <lwip_htonl>
 8011148:	4604      	mov	r4, r0
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	f7f8 fef2 	bl	8009f3a <lwip_htonl>
 8011156:	4603      	mov	r3, r0
 8011158:	1ae3      	subs	r3, r4, r3
 801115a:	2b00      	cmp	r3, #0
 801115c:	da24      	bge.n	80111a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3370      	adds	r3, #112	; 0x70
 8011162:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011164:	e002      	b.n	801116c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d011      	beq.n	8011198 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	4618      	mov	r0, r3
 801117e:	f7f8 fedc 	bl	8009f3a <lwip_htonl>
 8011182:	4604      	mov	r4, r0
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	4618      	mov	r0, r3
 801118c:	f7f8 fed5 	bl	8009f3a <lwip_htonl>
 8011190:	4603      	mov	r3, r0
 8011192:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011194:	2b00      	cmp	r3, #0
 8011196:	dbe6      	blt.n	8011166 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111a4:	601a      	str	r2, [r3, #0]
 80111a6:	e009      	b.n	80111bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80111a8:	6a3b      	ldr	r3, [r7, #32]
 80111aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	623b      	str	r3, [r7, #32]
 80111b4:	e002      	b.n	80111bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80111b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111b8:	f7fb ff19 	bl	800cfee <tcp_seg_free>
    }
    seg = pcb->unsent;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d012      	beq.n	80111ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80111c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7f8 feb3 	bl	8009f3a <lwip_htonl>
 80111d4:	4602      	mov	r2, r0
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111de:	8912      	ldrh	r2, [r2, #8]
 80111e0:	4413      	add	r3, r2
  while (seg != NULL &&
 80111e2:	69ba      	ldr	r2, [r7, #24]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	f4bf aed9 	bcs.w	8010f9c <tcp_output+0x160>
 80111ea:	e000      	b.n	80111ee <tcp_output+0x3b2>
      break;
 80111ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d108      	bne.n	8011208 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80111fe:	e004      	b.n	801120a <tcp_output+0x3ce>
    goto output_done;
 8011200:	bf00      	nop
 8011202:	e002      	b.n	801120a <tcp_output+0x3ce>
    goto output_done;
 8011204:	bf00      	nop
 8011206:	e000      	b.n	801120a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011208:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	8b5b      	ldrh	r3, [r3, #26]
 801120e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011212:	b29a      	uxth	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3728      	adds	r7, #40	; 0x28
 801121e:	46bd      	mov	sp, r7
 8011220:	bdb0      	pop	{r4, r5, r7, pc}
 8011222:	bf00      	nop

08011224 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d106      	bne.n	8011240 <tcp_output_segment_busy+0x1c>
 8011232:	4b09      	ldr	r3, [pc, #36]	; (8011258 <tcp_output_segment_busy+0x34>)
 8011234:	f240 529a 	movw	r2, #1434	; 0x59a
 8011238:	4908      	ldr	r1, [pc, #32]	; (801125c <tcp_output_segment_busy+0x38>)
 801123a:	4809      	ldr	r0, [pc, #36]	; (8011260 <tcp_output_segment_busy+0x3c>)
 801123c:	f003 fd08 	bl	8014c50 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	7b9b      	ldrb	r3, [r3, #14]
 8011246:	2b01      	cmp	r3, #1
 8011248:	d001      	beq.n	801124e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801124a:	2301      	movs	r3, #1
 801124c:	e000      	b.n	8011250 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801124e:	2300      	movs	r3, #0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	08017af8 	.word	0x08017af8
 801125c:	08018094 	.word	0x08018094
 8011260:	08017b4c 	.word	0x08017b4c

08011264 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011264:	b5b0      	push	{r4, r5, r7, lr}
 8011266:	b08c      	sub	sp, #48	; 0x30
 8011268:	af04      	add	r7, sp, #16
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d106      	bne.n	8011284 <tcp_output_segment+0x20>
 8011276:	4b63      	ldr	r3, [pc, #396]	; (8011404 <tcp_output_segment+0x1a0>)
 8011278:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801127c:	4962      	ldr	r1, [pc, #392]	; (8011408 <tcp_output_segment+0x1a4>)
 801127e:	4863      	ldr	r0, [pc, #396]	; (801140c <tcp_output_segment+0x1a8>)
 8011280:	f003 fce6 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <tcp_output_segment+0x34>
 801128a:	4b5e      	ldr	r3, [pc, #376]	; (8011404 <tcp_output_segment+0x1a0>)
 801128c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011290:	495f      	ldr	r1, [pc, #380]	; (8011410 <tcp_output_segment+0x1ac>)
 8011292:	485e      	ldr	r0, [pc, #376]	; (801140c <tcp_output_segment+0x1a8>)
 8011294:	f003 fcdc 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d106      	bne.n	80112ac <tcp_output_segment+0x48>
 801129e:	4b59      	ldr	r3, [pc, #356]	; (8011404 <tcp_output_segment+0x1a0>)
 80112a0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80112a4:	495b      	ldr	r1, [pc, #364]	; (8011414 <tcp_output_segment+0x1b0>)
 80112a6:	4859      	ldr	r0, [pc, #356]	; (801140c <tcp_output_segment+0x1a8>)
 80112a8:	f003 fcd2 	bl	8014c50 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7ff ffb9 	bl	8011224 <tcp_output_segment_busy>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80112b8:	2300      	movs	r3, #0
 80112ba:	e09f      	b.n	80113fc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	68dc      	ldr	r4, [r3, #12]
 80112c4:	4610      	mov	r0, r2
 80112c6:	f7f8 fe38 	bl	8009f3a <lwip_htonl>
 80112ca:	4603      	mov	r3, r0
 80112cc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	68dc      	ldr	r4, [r3, #12]
 80112d6:	4610      	mov	r0, r2
 80112d8:	f7f8 fe1a 	bl	8009f10 <lwip_htons>
 80112dc:	4603      	mov	r3, r0
 80112de:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80112e8:	441a      	add	r2, r3
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	3314      	adds	r3, #20
 80112f4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	7a9b      	ldrb	r3, [r3, #10]
 80112fa:	f003 0301 	and.w	r3, r3, #1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d015      	beq.n	801132e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	3304      	adds	r3, #4
 8011306:	461a      	mov	r2, r3
 8011308:	6879      	ldr	r1, [r7, #4]
 801130a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801130e:	f7fc fa33 	bl	800d778 <tcp_eff_send_mss_netif>
 8011312:	4603      	mov	r3, r0
 8011314:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011316:	8b7b      	ldrh	r3, [r7, #26]
 8011318:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801131c:	4618      	mov	r0, r3
 801131e:	f7f8 fe0c 	bl	8009f3a <lwip_htonl>
 8011322:	4602      	mov	r2, r0
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	3304      	adds	r3, #4
 801132c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011334:	2b00      	cmp	r3, #0
 8011336:	da02      	bge.n	801133e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	2200      	movs	r2, #0
 801133c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10c      	bne.n	8011360 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011346:	4b34      	ldr	r3, [pc, #208]	; (8011418 <tcp_output_segment+0x1b4>)
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	4618      	mov	r0, r3
 8011356:	f7f8 fdf0 	bl	8009f3a <lwip_htonl>
 801135a:	4602      	mov	r2, r0
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	68da      	ldr	r2, [r3, #12]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	8959      	ldrh	r1, [r3, #10]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	8b3a      	ldrh	r2, [r7, #24]
 801137a:	1a8a      	subs	r2, r1, r2
 801137c:	b292      	uxth	r2, r2
 801137e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	8919      	ldrh	r1, [r3, #8]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	8b3a      	ldrh	r2, [r7, #24]
 801138c:	1a8a      	subs	r2, r1, r2
 801138e:	b292      	uxth	r2, r2
 8011390:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	68fa      	ldr	r2, [r7, #12]
 8011398:	68d2      	ldr	r2, [r2, #12]
 801139a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	2200      	movs	r2, #0
 80113a2:	741a      	strb	r2, [r3, #16]
 80113a4:	2200      	movs	r2, #0
 80113a6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	f103 0214 	add.w	r2, r3, #20
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	7a9b      	ldrb	r3, [r3, #10]
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	f003 0304 	and.w	r3, r3, #4
 80113ba:	4413      	add	r3, r2
 80113bc:	69fa      	ldr	r2, [r7, #28]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d006      	beq.n	80113d0 <tcp_output_segment+0x16c>
 80113c2:	4b10      	ldr	r3, [pc, #64]	; (8011404 <tcp_output_segment+0x1a0>)
 80113c4:	f240 621c 	movw	r2, #1564	; 0x61c
 80113c8:	4914      	ldr	r1, [pc, #80]	; (801141c <tcp_output_segment+0x1b8>)
 80113ca:	4810      	ldr	r0, [pc, #64]	; (801140c <tcp_output_segment+0x1a8>)
 80113cc:	f003 fc40 	bl	8014c50 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6858      	ldr	r0, [r3, #4]
 80113d4:	68b9      	ldr	r1, [r7, #8]
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	1d1c      	adds	r4, r3, #4
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	7add      	ldrb	r5, [r3, #11]
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	7a9b      	ldrb	r3, [r3, #10]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	9202      	str	r2, [sp, #8]
 80113e6:	2206      	movs	r2, #6
 80113e8:	9201      	str	r2, [sp, #4]
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	462b      	mov	r3, r5
 80113ee:	4622      	mov	r2, r4
 80113f0:	f002 f8a2 	bl	8013538 <ip4_output_if>
 80113f4:	4603      	mov	r3, r0
 80113f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80113f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3720      	adds	r7, #32
 8011400:	46bd      	mov	sp, r7
 8011402:	bdb0      	pop	{r4, r5, r7, pc}
 8011404:	08017af8 	.word	0x08017af8
 8011408:	080180bc 	.word	0x080180bc
 801140c:	08017b4c 	.word	0x08017b4c
 8011410:	080180dc 	.word	0x080180dc
 8011414:	080180fc 	.word	0x080180fc
 8011418:	20011804 	.word	0x20011804
 801141c:	08018120 	.word	0x08018120

08011420 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011420:	b5b0      	push	{r4, r5, r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d106      	bne.n	801143c <tcp_rexmit_rto_prepare+0x1c>
 801142e:	4b31      	ldr	r3, [pc, #196]	; (80114f4 <tcp_rexmit_rto_prepare+0xd4>)
 8011430:	f240 6263 	movw	r2, #1635	; 0x663
 8011434:	4930      	ldr	r1, [pc, #192]	; (80114f8 <tcp_rexmit_rto_prepare+0xd8>)
 8011436:	4831      	ldr	r0, [pc, #196]	; (80114fc <tcp_rexmit_rto_prepare+0xdc>)
 8011438:	f003 fc0a 	bl	8014c50 <iprintf>

  if (pcb->unacked == NULL) {
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011440:	2b00      	cmp	r3, #0
 8011442:	d102      	bne.n	801144a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011444:	f06f 0305 	mvn.w	r3, #5
 8011448:	e050      	b.n	80114ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144e:	60fb      	str	r3, [r7, #12]
 8011450:	e00b      	b.n	801146a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f7ff fee6 	bl	8011224 <tcp_output_segment_busy>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d002      	beq.n	8011464 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801145e:	f06f 0305 	mvn.w	r3, #5
 8011462:	e043      	b.n	80114ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	60fb      	str	r3, [r7, #12]
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d1ef      	bne.n	8011452 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011472:	68f8      	ldr	r0, [r7, #12]
 8011474:	f7ff fed6 	bl	8011224 <tcp_output_segment_busy>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d002      	beq.n	8011484 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801147e:	f06f 0305 	mvn.w	r3, #5
 8011482:	e033      	b.n	80114ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2200      	movs	r2, #0
 8011498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8b5b      	ldrh	r3, [r3, #26]
 801149e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f8 fd43 	bl	8009f3a <lwip_htonl>
 80114b4:	4604      	mov	r4, r0
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	891b      	ldrh	r3, [r3, #8]
 80114ba:	461d      	mov	r5, r3
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	899b      	ldrh	r3, [r3, #12]
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7f8 fd23 	bl	8009f10 <lwip_htons>
 80114ca:	4603      	mov	r3, r0
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	f003 0303 	and.w	r3, r3, #3
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <tcp_rexmit_rto_prepare+0xba>
 80114d6:	2301      	movs	r3, #1
 80114d8:	e000      	b.n	80114dc <tcp_rexmit_rto_prepare+0xbc>
 80114da:	2300      	movs	r3, #0
 80114dc:	442b      	add	r3, r5
 80114de:	18e2      	adds	r2, r4, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2200      	movs	r2, #0
 80114e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80114ea:	2300      	movs	r3, #0
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3710      	adds	r7, #16
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bdb0      	pop	{r4, r5, r7, pc}
 80114f4:	08017af8 	.word	0x08017af8
 80114f8:	08018134 	.word	0x08018134
 80114fc:	08017b4c 	.word	0x08017b4c

08011500 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d106      	bne.n	801151c <tcp_rexmit_rto_commit+0x1c>
 801150e:	4b0d      	ldr	r3, [pc, #52]	; (8011544 <tcp_rexmit_rto_commit+0x44>)
 8011510:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011514:	490c      	ldr	r1, [pc, #48]	; (8011548 <tcp_rexmit_rto_commit+0x48>)
 8011516:	480d      	ldr	r0, [pc, #52]	; (801154c <tcp_rexmit_rto_commit+0x4c>)
 8011518:	f003 fb9a 	bl	8014c50 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011522:	2bff      	cmp	r3, #255	; 0xff
 8011524:	d007      	beq.n	8011536 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801152c:	3301      	adds	r3, #1
 801152e:	b2da      	uxtb	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7ff fc80 	bl	8010e3c <tcp_output>
}
 801153c:	bf00      	nop
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	08017af8 	.word	0x08017af8
 8011548:	08018158 	.word	0x08018158
 801154c:	08017b4c 	.word	0x08017b4c

08011550 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b082      	sub	sp, #8
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d106      	bne.n	801156c <tcp_rexmit_rto+0x1c>
 801155e:	4b0a      	ldr	r3, [pc, #40]	; (8011588 <tcp_rexmit_rto+0x38>)
 8011560:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011564:	4909      	ldr	r1, [pc, #36]	; (801158c <tcp_rexmit_rto+0x3c>)
 8011566:	480a      	ldr	r0, [pc, #40]	; (8011590 <tcp_rexmit_rto+0x40>)
 8011568:	f003 fb72 	bl	8014c50 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f7ff ff57 	bl	8011420 <tcp_rexmit_rto_prepare>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d102      	bne.n	801157e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff ffc1 	bl	8011500 <tcp_rexmit_rto_commit>
  }
}
 801157e:	bf00      	nop
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	08017af8 	.word	0x08017af8
 801158c:	0801817c 	.word	0x0801817c
 8011590:	08017b4c 	.word	0x08017b4c

08011594 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011594:	b590      	push	{r4, r7, lr}
 8011596:	b085      	sub	sp, #20
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d106      	bne.n	80115b0 <tcp_rexmit+0x1c>
 80115a2:	4b2f      	ldr	r3, [pc, #188]	; (8011660 <tcp_rexmit+0xcc>)
 80115a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80115a8:	492e      	ldr	r1, [pc, #184]	; (8011664 <tcp_rexmit+0xd0>)
 80115aa:	482f      	ldr	r0, [pc, #188]	; (8011668 <tcp_rexmit+0xd4>)
 80115ac:	f003 fb50 	bl	8014c50 <iprintf>

  if (pcb->unacked == NULL) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d102      	bne.n	80115be <tcp_rexmit+0x2a>
    return ERR_VAL;
 80115b8:	f06f 0305 	mvn.w	r3, #5
 80115bc:	e04c      	b.n	8011658 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80115c4:	68b8      	ldr	r0, [r7, #8]
 80115c6:	f7ff fe2d 	bl	8011224 <tcp_output_segment_busy>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80115d0:	f06f 0305 	mvn.w	r3, #5
 80115d4:	e040      	b.n	8011658 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	336c      	adds	r3, #108	; 0x6c
 80115e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115e4:	e002      	b.n	80115ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d011      	beq.n	8011618 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7f8 fc9c 	bl	8009f3a <lwip_htonl>
 8011602:	4604      	mov	r4, r0
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	68db      	ldr	r3, [r3, #12]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	4618      	mov	r0, r3
 801160c:	f7f8 fc95 	bl	8009f3a <lwip_htonl>
 8011610:	4603      	mov	r3, r0
 8011612:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011614:	2b00      	cmp	r3, #0
 8011616:	dbe6      	blt.n	80115e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	68ba      	ldr	r2, [r7, #8]
 8011624:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d103      	bne.n	8011636 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801163c:	2bff      	cmp	r3, #255	; 0xff
 801163e:	d007      	beq.n	8011650 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011646:	3301      	adds	r3, #1
 8011648:	b2da      	uxtb	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	bd90      	pop	{r4, r7, pc}
 8011660:	08017af8 	.word	0x08017af8
 8011664:	08018198 	.word	0x08018198
 8011668:	08017b4c 	.word	0x08017b4c

0801166c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d106      	bne.n	8011688 <tcp_rexmit_fast+0x1c>
 801167a:	4b2a      	ldr	r3, [pc, #168]	; (8011724 <tcp_rexmit_fast+0xb8>)
 801167c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011680:	4929      	ldr	r1, [pc, #164]	; (8011728 <tcp_rexmit_fast+0xbc>)
 8011682:	482a      	ldr	r0, [pc, #168]	; (801172c <tcp_rexmit_fast+0xc0>)
 8011684:	f003 fae4 	bl	8014c50 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801168c:	2b00      	cmp	r3, #0
 801168e:	d045      	beq.n	801171c <tcp_rexmit_fast+0xb0>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	8b5b      	ldrh	r3, [r3, #26]
 8011694:	f003 0304 	and.w	r3, r3, #4
 8011698:	2b00      	cmp	r3, #0
 801169a:	d13f      	bne.n	801171c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff ff79 	bl	8011594 <tcp_rexmit>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d139      	bne.n	801171c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116b4:	4293      	cmp	r3, r2
 80116b6:	bf28      	it	cs
 80116b8:	4613      	movcs	r3, r2
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	da00      	bge.n	80116c2 <tcp_rexmit_fast+0x56>
 80116c0:	3301      	adds	r3, #1
 80116c2:	105b      	asrs	r3, r3, #1
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80116d2:	461a      	mov	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	429a      	cmp	r2, r3
 80116dc:	d206      	bcs.n	80116ec <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f6:	4619      	mov	r1, r3
 80116f8:	0049      	lsls	r1, r1, #1
 80116fa:	440b      	add	r3, r1
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	4413      	add	r3, r2
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	8b5b      	ldrh	r3, [r3, #26]
 801170c:	f043 0304 	orr.w	r3, r3, #4
 8011710:	b29a      	uxth	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2200      	movs	r2, #0
 801171a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801171c:	bf00      	nop
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	08017af8 	.word	0x08017af8
 8011728:	080181b0 	.word	0x080181b0
 801172c:	08017b4c 	.word	0x08017b4c

08011730 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	607b      	str	r3, [r7, #4]
 801173a:	460b      	mov	r3, r1
 801173c:	817b      	strh	r3, [r7, #10]
 801173e:	4613      	mov	r3, r2
 8011740:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011742:	897a      	ldrh	r2, [r7, #10]
 8011744:	893b      	ldrh	r3, [r7, #8]
 8011746:	4413      	add	r3, r2
 8011748:	b29b      	uxth	r3, r3
 801174a:	3314      	adds	r3, #20
 801174c:	b29b      	uxth	r3, r3
 801174e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011752:	4619      	mov	r1, r3
 8011754:	2022      	movs	r0, #34	; 0x22
 8011756:	f7f9 fce3 	bl	800b120 <pbuf_alloc>
 801175a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d04d      	beq.n	80117fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011762:	897b      	ldrh	r3, [r7, #10]
 8011764:	3313      	adds	r3, #19
 8011766:	697a      	ldr	r2, [r7, #20]
 8011768:	8952      	ldrh	r2, [r2, #10]
 801176a:	4293      	cmp	r3, r2
 801176c:	db06      	blt.n	801177c <tcp_output_alloc_header_common+0x4c>
 801176e:	4b26      	ldr	r3, [pc, #152]	; (8011808 <tcp_output_alloc_header_common+0xd8>)
 8011770:	f240 7223 	movw	r2, #1827	; 0x723
 8011774:	4925      	ldr	r1, [pc, #148]	; (801180c <tcp_output_alloc_header_common+0xdc>)
 8011776:	4826      	ldr	r0, [pc, #152]	; (8011810 <tcp_output_alloc_header_common+0xe0>)
 8011778:	f003 fa6a 	bl	8014c50 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011782:	8c3b      	ldrh	r3, [r7, #32]
 8011784:	4618      	mov	r0, r3
 8011786:	f7f8 fbc3 	bl	8009f10 <lwip_htons>
 801178a:	4603      	mov	r3, r0
 801178c:	461a      	mov	r2, r3
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011794:	4618      	mov	r0, r3
 8011796:	f7f8 fbbb 	bl	8009f10 <lwip_htons>
 801179a:	4603      	mov	r3, r0
 801179c:	461a      	mov	r2, r3
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80117a8:	68f8      	ldr	r0, [r7, #12]
 80117aa:	f7f8 fbc6 	bl	8009f3a <lwip_htonl>
 80117ae:	4602      	mov	r2, r0
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80117b4:	897b      	ldrh	r3, [r7, #10]
 80117b6:	089b      	lsrs	r3, r3, #2
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	3305      	adds	r3, #5
 80117bc:	b29b      	uxth	r3, r3
 80117be:	031b      	lsls	r3, r3, #12
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	4313      	orrs	r3, r2
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7f8 fb9f 	bl	8009f10 <lwip_htons>
 80117d2:	4603      	mov	r3, r0
 80117d4:	461a      	mov	r2, r3
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80117da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f8 fb97 	bl	8009f10 <lwip_htons>
 80117e2:	4603      	mov	r3, r0
 80117e4:	461a      	mov	r2, r3
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	2200      	movs	r2, #0
 80117ee:	741a      	strb	r2, [r3, #16]
 80117f0:	2200      	movs	r2, #0
 80117f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	2200      	movs	r2, #0
 80117f8:	749a      	strb	r2, [r3, #18]
 80117fa:	2200      	movs	r2, #0
 80117fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80117fe:	697b      	ldr	r3, [r7, #20]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3718      	adds	r7, #24
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	08017af8 	.word	0x08017af8
 801180c:	080181d0 	.word	0x080181d0
 8011810:	08017b4c 	.word	0x08017b4c

08011814 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011814:	b5b0      	push	{r4, r5, r7, lr}
 8011816:	b08a      	sub	sp, #40	; 0x28
 8011818:	af04      	add	r7, sp, #16
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	607b      	str	r3, [r7, #4]
 801181e:	460b      	mov	r3, r1
 8011820:	817b      	strh	r3, [r7, #10]
 8011822:	4613      	mov	r3, r2
 8011824:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d106      	bne.n	801183a <tcp_output_alloc_header+0x26>
 801182c:	4b15      	ldr	r3, [pc, #84]	; (8011884 <tcp_output_alloc_header+0x70>)
 801182e:	f240 7242 	movw	r2, #1858	; 0x742
 8011832:	4915      	ldr	r1, [pc, #84]	; (8011888 <tcp_output_alloc_header+0x74>)
 8011834:	4815      	ldr	r0, [pc, #84]	; (801188c <tcp_output_alloc_header+0x78>)
 8011836:	f003 fa0b 	bl	8014c50 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	8adb      	ldrh	r3, [r3, #22]
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	8b12      	ldrh	r2, [r2, #24]
 8011846:	68f9      	ldr	r1, [r7, #12]
 8011848:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801184a:	893d      	ldrh	r5, [r7, #8]
 801184c:	897c      	ldrh	r4, [r7, #10]
 801184e:	9103      	str	r1, [sp, #12]
 8011850:	2110      	movs	r1, #16
 8011852:	9102      	str	r1, [sp, #8]
 8011854:	9201      	str	r2, [sp, #4]
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	462a      	mov	r2, r5
 801185c:	4621      	mov	r1, r4
 801185e:	f7ff ff67 	bl	8011730 <tcp_output_alloc_header_common>
 8011862:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d006      	beq.n	8011878 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011872:	441a      	add	r2, r3
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011878:	697b      	ldr	r3, [r7, #20]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3718      	adds	r7, #24
 801187e:	46bd      	mov	sp, r7
 8011880:	bdb0      	pop	{r4, r5, r7, pc}
 8011882:	bf00      	nop
 8011884:	08017af8 	.word	0x08017af8
 8011888:	08018200 	.word	0x08018200
 801188c:	08017b4c 	.word	0x08017b4c

08011890 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b088      	sub	sp, #32
 8011894:	af00      	add	r7, sp, #0
 8011896:	60f8      	str	r0, [r7, #12]
 8011898:	60b9      	str	r1, [r7, #8]
 801189a:	4611      	mov	r1, r2
 801189c:	461a      	mov	r2, r3
 801189e:	460b      	mov	r3, r1
 80118a0:	71fb      	strb	r3, [r7, #7]
 80118a2:	4613      	mov	r3, r2
 80118a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80118a6:	2300      	movs	r3, #0
 80118a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d106      	bne.n	80118be <tcp_output_fill_options+0x2e>
 80118b0:	4b13      	ldr	r3, [pc, #76]	; (8011900 <tcp_output_fill_options+0x70>)
 80118b2:	f240 7256 	movw	r2, #1878	; 0x756
 80118b6:	4913      	ldr	r1, [pc, #76]	; (8011904 <tcp_output_fill_options+0x74>)
 80118b8:	4813      	ldr	r0, [pc, #76]	; (8011908 <tcp_output_fill_options+0x78>)
 80118ba:	f003 f9c9 	bl	8014c50 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	3314      	adds	r3, #20
 80118c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	f103 0214 	add.w	r2, r3, #20
 80118d0:	8bfb      	ldrh	r3, [r7, #30]
 80118d2:	009b      	lsls	r3, r3, #2
 80118d4:	4619      	mov	r1, r3
 80118d6:	79fb      	ldrb	r3, [r7, #7]
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	f003 0304 	and.w	r3, r3, #4
 80118de:	440b      	add	r3, r1
 80118e0:	4413      	add	r3, r2
 80118e2:	697a      	ldr	r2, [r7, #20]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d006      	beq.n	80118f6 <tcp_output_fill_options+0x66>
 80118e8:	4b05      	ldr	r3, [pc, #20]	; (8011900 <tcp_output_fill_options+0x70>)
 80118ea:	f240 7275 	movw	r2, #1909	; 0x775
 80118ee:	4907      	ldr	r1, [pc, #28]	; (801190c <tcp_output_fill_options+0x7c>)
 80118f0:	4805      	ldr	r0, [pc, #20]	; (8011908 <tcp_output_fill_options+0x78>)
 80118f2:	f003 f9ad 	bl	8014c50 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80118f6:	bf00      	nop
 80118f8:	3720      	adds	r7, #32
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	08017af8 	.word	0x08017af8
 8011904:	08018228 	.word	0x08018228
 8011908:	08017b4c 	.word	0x08017b4c
 801190c:	08018120 	.word	0x08018120

08011910 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b08a      	sub	sp, #40	; 0x28
 8011914:	af04      	add	r7, sp, #16
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	607a      	str	r2, [r7, #4]
 801191c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d106      	bne.n	8011932 <tcp_output_control_segment+0x22>
 8011924:	4b1c      	ldr	r3, [pc, #112]	; (8011998 <tcp_output_control_segment+0x88>)
 8011926:	f240 7287 	movw	r2, #1927	; 0x787
 801192a:	491c      	ldr	r1, [pc, #112]	; (801199c <tcp_output_control_segment+0x8c>)
 801192c:	481c      	ldr	r0, [pc, #112]	; (80119a0 <tcp_output_control_segment+0x90>)
 801192e:	f003 f98f 	bl	8014c50 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011932:	683a      	ldr	r2, [r7, #0]
 8011934:	6879      	ldr	r1, [r7, #4]
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f7fe fae8 	bl	800ff0c <tcp_route>
 801193c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d102      	bne.n	801194a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011944:	23fc      	movs	r3, #252	; 0xfc
 8011946:	75fb      	strb	r3, [r7, #23]
 8011948:	e01c      	b.n	8011984 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d006      	beq.n	801195e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	7adb      	ldrb	r3, [r3, #11]
 8011954:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	7a9b      	ldrb	r3, [r3, #10]
 801195a:	757b      	strb	r3, [r7, #21]
 801195c:	e003      	b.n	8011966 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801195e:	23ff      	movs	r3, #255	; 0xff
 8011960:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011962:	2300      	movs	r3, #0
 8011964:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011966:	7dba      	ldrb	r2, [r7, #22]
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	9302      	str	r3, [sp, #8]
 801196c:	2306      	movs	r3, #6
 801196e:	9301      	str	r3, [sp, #4]
 8011970:	7d7b      	ldrb	r3, [r7, #21]
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	4613      	mov	r3, r2
 8011976:	683a      	ldr	r2, [r7, #0]
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	68b8      	ldr	r0, [r7, #8]
 801197c:	f001 fddc 	bl	8013538 <ip4_output_if>
 8011980:	4603      	mov	r3, r0
 8011982:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011984:	68b8      	ldr	r0, [r7, #8]
 8011986:	f7f9 feaf 	bl	800b6e8 <pbuf_free>
  return err;
 801198a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	08017af8 	.word	0x08017af8
 801199c:	08018250 	.word	0x08018250
 80119a0:	08017b4c 	.word	0x08017b4c

080119a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80119a4:	b590      	push	{r4, r7, lr}
 80119a6:	b08b      	sub	sp, #44	; 0x2c
 80119a8:	af04      	add	r7, sp, #16
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	60b9      	str	r1, [r7, #8]
 80119ae:	607a      	str	r2, [r7, #4]
 80119b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d106      	bne.n	80119c6 <tcp_rst+0x22>
 80119b8:	4b1f      	ldr	r3, [pc, #124]	; (8011a38 <tcp_rst+0x94>)
 80119ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80119be:	491f      	ldr	r1, [pc, #124]	; (8011a3c <tcp_rst+0x98>)
 80119c0:	481f      	ldr	r0, [pc, #124]	; (8011a40 <tcp_rst+0x9c>)
 80119c2:	f003 f945 	bl	8014c50 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d106      	bne.n	80119da <tcp_rst+0x36>
 80119cc:	4b1a      	ldr	r3, [pc, #104]	; (8011a38 <tcp_rst+0x94>)
 80119ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80119d2:	491c      	ldr	r1, [pc, #112]	; (8011a44 <tcp_rst+0xa0>)
 80119d4:	481a      	ldr	r0, [pc, #104]	; (8011a40 <tcp_rst+0x9c>)
 80119d6:	f003 f93b 	bl	8014c50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119da:	2300      	movs	r3, #0
 80119dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80119de:	f246 0308 	movw	r3, #24584	; 0x6008
 80119e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80119e4:	7dfb      	ldrb	r3, [r7, #23]
 80119e6:	b29c      	uxth	r4, r3
 80119e8:	68b8      	ldr	r0, [r7, #8]
 80119ea:	f7f8 faa6 	bl	8009f3a <lwip_htonl>
 80119ee:	4602      	mov	r2, r0
 80119f0:	8abb      	ldrh	r3, [r7, #20]
 80119f2:	9303      	str	r3, [sp, #12]
 80119f4:	2314      	movs	r3, #20
 80119f6:	9302      	str	r3, [sp, #8]
 80119f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80119fa:	9301      	str	r3, [sp, #4]
 80119fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	4613      	mov	r3, r2
 8011a02:	2200      	movs	r2, #0
 8011a04:	4621      	mov	r1, r4
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7ff fe92 	bl	8011730 <tcp_output_alloc_header_common>
 8011a0c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00c      	beq.n	8011a2e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a14:	7dfb      	ldrb	r3, [r7, #23]
 8011a16:	2200      	movs	r2, #0
 8011a18:	6939      	ldr	r1, [r7, #16]
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f7ff ff38 	bl	8011890 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a22:	683a      	ldr	r2, [r7, #0]
 8011a24:	6939      	ldr	r1, [r7, #16]
 8011a26:	68f8      	ldr	r0, [r7, #12]
 8011a28:	f7ff ff72 	bl	8011910 <tcp_output_control_segment>
 8011a2c:	e000      	b.n	8011a30 <tcp_rst+0x8c>
    return;
 8011a2e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011a30:	371c      	adds	r7, #28
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd90      	pop	{r4, r7, pc}
 8011a36:	bf00      	nop
 8011a38:	08017af8 	.word	0x08017af8
 8011a3c:	0801827c 	.word	0x0801827c
 8011a40:	08017b4c 	.word	0x08017b4c
 8011a44:	08018298 	.word	0x08018298

08011a48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011a54:	2300      	movs	r3, #0
 8011a56:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d106      	bne.n	8011a6c <tcp_send_empty_ack+0x24>
 8011a5e:	4b28      	ldr	r3, [pc, #160]	; (8011b00 <tcp_send_empty_ack+0xb8>)
 8011a60:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011a64:	4927      	ldr	r1, [pc, #156]	; (8011b04 <tcp_send_empty_ack+0xbc>)
 8011a66:	4828      	ldr	r0, [pc, #160]	; (8011b08 <tcp_send_empty_ack+0xc0>)
 8011a68:	f003 f8f2 	bl	8014c50 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a6c:	7dfb      	ldrb	r3, [r7, #23]
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	f003 0304 	and.w	r3, r3, #4
 8011a76:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011a78:	7d7b      	ldrb	r3, [r7, #21]
 8011a7a:	b29c      	uxth	r4, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7f8 fa5a 	bl	8009f3a <lwip_htonl>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2200      	movs	r2, #0
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff fec1 	bl	8011814 <tcp_output_alloc_header>
 8011a92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d109      	bne.n	8011aae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	8b5b      	ldrh	r3, [r3, #26]
 8011a9e:	f043 0303 	orr.w	r3, r3, #3
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011aa8:	f06f 0301 	mvn.w	r3, #1
 8011aac:	e023      	b.n	8011af6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011aae:	7dbb      	ldrb	r3, [r7, #22]
 8011ab0:	7dfa      	ldrb	r2, [r7, #23]
 8011ab2:	6939      	ldr	r1, [r7, #16]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f7ff feeb 	bl	8011890 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	6939      	ldr	r1, [r7, #16]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7ff ff24 	bl	8011910 <tcp_output_control_segment>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d007      	beq.n	8011ae4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	8b5b      	ldrh	r3, [r3, #26]
 8011ad8:	f043 0303 	orr.w	r3, r3, #3
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	835a      	strh	r2, [r3, #26]
 8011ae2:	e006      	b.n	8011af2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	8b5b      	ldrh	r3, [r3, #26]
 8011ae8:	f023 0303 	bic.w	r3, r3, #3
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	371c      	adds	r7, #28
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd90      	pop	{r4, r7, pc}
 8011afe:	bf00      	nop
 8011b00:	08017af8 	.word	0x08017af8
 8011b04:	080182b4 	.word	0x080182b4
 8011b08:	08017b4c 	.word	0x08017b4c

08011b0c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011b0c:	b590      	push	{r4, r7, lr}
 8011b0e:	b087      	sub	sp, #28
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b14:	2300      	movs	r3, #0
 8011b16:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d106      	bne.n	8011b2c <tcp_keepalive+0x20>
 8011b1e:	4b18      	ldr	r3, [pc, #96]	; (8011b80 <tcp_keepalive+0x74>)
 8011b20:	f640 0224 	movw	r2, #2084	; 0x824
 8011b24:	4917      	ldr	r1, [pc, #92]	; (8011b84 <tcp_keepalive+0x78>)
 8011b26:	4818      	ldr	r0, [pc, #96]	; (8011b88 <tcp_keepalive+0x7c>)
 8011b28:	f003 f892 	bl	8014c50 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011b2c:	7dfb      	ldrb	r3, [r7, #23]
 8011b2e:	b29c      	uxth	r4, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b34:	3b01      	subs	r3, #1
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7f8 f9ff 	bl	8009f3a <lwip_htonl>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2200      	movs	r2, #0
 8011b40:	4621      	mov	r1, r4
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7ff fe66 	bl	8011814 <tcp_output_alloc_header>
 8011b48:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d102      	bne.n	8011b56 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b54:	e010      	b.n	8011b78 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b56:	7dfb      	ldrb	r3, [r7, #23]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	6939      	ldr	r1, [r7, #16]
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7ff fe97 	bl	8011890 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	3304      	adds	r3, #4
 8011b68:	6939      	ldr	r1, [r7, #16]
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f7ff fed0 	bl	8011910 <tcp_output_control_segment>
 8011b70:	4603      	mov	r3, r0
 8011b72:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	371c      	adds	r7, #28
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd90      	pop	{r4, r7, pc}
 8011b80:	08017af8 	.word	0x08017af8
 8011b84:	080182d4 	.word	0x080182d4
 8011b88:	08017b4c 	.word	0x08017b4c

08011b8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011b8c:	b590      	push	{r4, r7, lr}
 8011b8e:	b08b      	sub	sp, #44	; 0x2c
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b94:	2300      	movs	r3, #0
 8011b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d106      	bne.n	8011bae <tcp_zero_window_probe+0x22>
 8011ba0:	4b4c      	ldr	r3, [pc, #304]	; (8011cd4 <tcp_zero_window_probe+0x148>)
 8011ba2:	f640 024f 	movw	r2, #2127	; 0x84f
 8011ba6:	494c      	ldr	r1, [pc, #304]	; (8011cd8 <tcp_zero_window_probe+0x14c>)
 8011ba8:	484c      	ldr	r0, [pc, #304]	; (8011cdc <tcp_zero_window_probe+0x150>)
 8011baa:	f003 f851 	bl	8014c50 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d101      	bne.n	8011bbe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e086      	b.n	8011ccc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bc4:	2bff      	cmp	r3, #255	; 0xff
 8011bc6:	d007      	beq.n	8011bd8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bce:	3301      	adds	r3, #1
 8011bd0:	b2da      	uxtb	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7f8 f995 	bl	8009f10 <lwip_htons>
 8011be6:	4603      	mov	r3, r0
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	f003 0301 	and.w	r3, r3, #1
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d005      	beq.n	8011bfe <tcp_zero_window_probe+0x72>
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	891b      	ldrh	r3, [r3, #8]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d101      	bne.n	8011bfe <tcp_zero_window_probe+0x72>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e000      	b.n	8011c00 <tcp_zero_window_probe+0x74>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011c02:	7ffb      	ldrb	r3, [r7, #31]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bf0c      	ite	eq
 8011c08:	2301      	moveq	r3, #1
 8011c0a:	2300      	movne	r3, #0
 8011c0c:	b2db      	uxtb	r3, r3
 8011c0e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c14:	b299      	uxth	r1, r3
 8011c16:	6a3b      	ldr	r3, [r7, #32]
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	8bba      	ldrh	r2, [r7, #28]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff fdf8 	bl	8011814 <tcp_output_alloc_header>
 8011c24:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d102      	bne.n	8011c32 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c30:	e04c      	b.n	8011ccc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011c38:	7ffb      	ldrb	r3, [r7, #31]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d011      	beq.n	8011c62 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	899b      	ldrh	r3, [r3, #12]
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	b21b      	sxth	r3, r3
 8011c46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c4a:	b21c      	sxth	r4, r3
 8011c4c:	2011      	movs	r0, #17
 8011c4e:	f7f8 f95f 	bl	8009f10 <lwip_htons>
 8011c52:	4603      	mov	r3, r0
 8011c54:	b21b      	sxth	r3, r3
 8011c56:	4323      	orrs	r3, r4
 8011c58:	b21b      	sxth	r3, r3
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	819a      	strh	r2, [r3, #12]
 8011c60:	e010      	b.n	8011c84 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	3314      	adds	r3, #20
 8011c68:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	6858      	ldr	r0, [r3, #4]
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	891a      	ldrh	r2, [r3, #8]
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	891b      	ldrh	r3, [r3, #8]
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	6939      	ldr	r1, [r7, #16]
 8011c80:	f7f9 ff28 	bl	800bad4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7f8 f955 	bl	8009f3a <lwip_htonl>
 8011c90:	4603      	mov	r3, r0
 8011c92:	3301      	adds	r3, #1
 8011c94:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	da02      	bge.n	8011ca8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	68fa      	ldr	r2, [r7, #12]
 8011ca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cac:	2200      	movs	r2, #0
 8011cae:	69b9      	ldr	r1, [r7, #24]
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7ff fded 	bl	8011890 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	3304      	adds	r3, #4
 8011cbc:	69b9      	ldr	r1, [r7, #24]
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7ff fe26 	bl	8011910 <tcp_output_control_segment>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011cc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	372c      	adds	r7, #44	; 0x2c
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd90      	pop	{r4, r7, pc}
 8011cd4:	08017af8 	.word	0x08017af8
 8011cd8:	080182f0 	.word	0x080182f0
 8011cdc:	08017b4c 	.word	0x08017b4c

08011ce0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011ce8:	f7f9 ffe2 	bl	800bcb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011cec:	4b0a      	ldr	r3, [pc, #40]	; (8011d18 <tcpip_tcp_timer+0x38>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d103      	bne.n	8011cfc <tcpip_tcp_timer+0x1c>
 8011cf4:	4b09      	ldr	r3, [pc, #36]	; (8011d1c <tcpip_tcp_timer+0x3c>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d005      	beq.n	8011d08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	4908      	ldr	r1, [pc, #32]	; (8011d20 <tcpip_tcp_timer+0x40>)
 8011d00:	20fa      	movs	r0, #250	; 0xfa
 8011d02:	f000 f8f3 	bl	8011eec <sys_timeout>
 8011d06:	e003      	b.n	8011d10 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011d08:	4b06      	ldr	r3, [pc, #24]	; (8011d24 <tcpip_tcp_timer+0x44>)
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
  }
}
 8011d0e:	bf00      	nop
 8011d10:	bf00      	nop
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	20011810 	.word	0x20011810
 8011d1c:	20011814 	.word	0x20011814
 8011d20:	08011ce1 	.word	0x08011ce1
 8011d24:	2001185c 	.word	0x2001185c

08011d28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011d2c:	4b0a      	ldr	r3, [pc, #40]	; (8011d58 <tcp_timer_needed+0x30>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10f      	bne.n	8011d54 <tcp_timer_needed+0x2c>
 8011d34:	4b09      	ldr	r3, [pc, #36]	; (8011d5c <tcp_timer_needed+0x34>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d103      	bne.n	8011d44 <tcp_timer_needed+0x1c>
 8011d3c:	4b08      	ldr	r3, [pc, #32]	; (8011d60 <tcp_timer_needed+0x38>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d007      	beq.n	8011d54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011d44:	4b04      	ldr	r3, [pc, #16]	; (8011d58 <tcp_timer_needed+0x30>)
 8011d46:	2201      	movs	r2, #1
 8011d48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	4905      	ldr	r1, [pc, #20]	; (8011d64 <tcp_timer_needed+0x3c>)
 8011d4e:	20fa      	movs	r0, #250	; 0xfa
 8011d50:	f000 f8cc 	bl	8011eec <sys_timeout>
  }
}
 8011d54:	bf00      	nop
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	2001185c 	.word	0x2001185c
 8011d5c:	20011810 	.word	0x20011810
 8011d60:	20011814 	.word	0x20011814
 8011d64:	08011ce1 	.word	0x08011ce1

08011d68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011d74:	2009      	movs	r0, #9
 8011d76:	f7f8 fda1 	bl	800a8bc <memp_malloc>
 8011d7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d109      	bne.n	8011d96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d151      	bne.n	8011e2c <sys_timeout_abs+0xc4>
 8011d88:	4b2a      	ldr	r3, [pc, #168]	; (8011e34 <sys_timeout_abs+0xcc>)
 8011d8a:	22be      	movs	r2, #190	; 0xbe
 8011d8c:	492a      	ldr	r1, [pc, #168]	; (8011e38 <sys_timeout_abs+0xd0>)
 8011d8e:	482b      	ldr	r0, [pc, #172]	; (8011e3c <sys_timeout_abs+0xd4>)
 8011d90:	f002 ff5e 	bl	8014c50 <iprintf>
    return;
 8011d94:	e04a      	b.n	8011e2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	68ba      	ldr	r2, [r7, #8]
 8011da0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	68fa      	ldr	r2, [r7, #12]
 8011dac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011dae:	4b24      	ldr	r3, [pc, #144]	; (8011e40 <sys_timeout_abs+0xd8>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d103      	bne.n	8011dbe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011db6:	4a22      	ldr	r2, [pc, #136]	; (8011e40 <sys_timeout_abs+0xd8>)
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	6013      	str	r3, [r2, #0]
    return;
 8011dbc:	e037      	b.n	8011e2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	685a      	ldr	r2, [r3, #4]
 8011dc2:	4b1f      	ldr	r3, [pc, #124]	; (8011e40 <sys_timeout_abs+0xd8>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	0fdb      	lsrs	r3, r3, #31
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	b2db      	uxtb	r3, r3
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d007      	beq.n	8011de6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011dd6:	4b1a      	ldr	r3, [pc, #104]	; (8011e40 <sys_timeout_abs+0xd8>)
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011dde:	4a18      	ldr	r2, [pc, #96]	; (8011e40 <sys_timeout_abs+0xd8>)
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	6013      	str	r3, [r2, #0]
 8011de4:	e023      	b.n	8011e2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011de6:	4b16      	ldr	r3, [pc, #88]	; (8011e40 <sys_timeout_abs+0xd8>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	617b      	str	r3, [r7, #20]
 8011dec:	e01a      	b.n	8011e24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00b      	beq.n	8011e0e <sys_timeout_abs+0xa6>
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	685a      	ldr	r2, [r3, #4]
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	0fdb      	lsrs	r3, r3, #31
 8011e04:	f003 0301 	and.w	r3, r3, #1
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d007      	beq.n	8011e1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	693a      	ldr	r2, [r7, #16]
 8011e1a:	601a      	str	r2, [r3, #0]
        break;
 8011e1c:	e007      	b.n	8011e2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	617b      	str	r3, [r7, #20]
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d1e1      	bne.n	8011dee <sys_timeout_abs+0x86>
 8011e2a:	e000      	b.n	8011e2e <sys_timeout_abs+0xc6>
    return;
 8011e2c:	bf00      	nop
      }
    }
  }
}
 8011e2e:	3718      	adds	r7, #24
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	08018314 	.word	0x08018314
 8011e38:	08018348 	.word	0x08018348
 8011e3c:	08018388 	.word	0x08018388
 8011e40:	20011854 	.word	0x20011854

08011e44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	4798      	blx	r3

  now = sys_now();
 8011e56:	f7f2 fa33 	bl	80042c0 <sys_now>
 8011e5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	4b0f      	ldr	r3, [pc, #60]	; (8011ea0 <lwip_cyclic_timer+0x5c>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	4413      	add	r3, r2
 8011e66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	0fdb      	lsrs	r3, r3, #31
 8011e70:	f003 0301 	and.w	r3, r3, #1
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d009      	beq.n	8011e8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	4413      	add	r3, r2
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	4907      	ldr	r1, [pc, #28]	; (8011ea4 <lwip_cyclic_timer+0x60>)
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff ff6e 	bl	8011d68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011e8c:	e004      	b.n	8011e98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4904      	ldr	r1, [pc, #16]	; (8011ea4 <lwip_cyclic_timer+0x60>)
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7ff ff68 	bl	8011d68 <sys_timeout_abs>
}
 8011e98:	bf00      	nop
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	20011858 	.word	0x20011858
 8011ea4:	08011e45 	.word	0x08011e45

08011ea8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011eae:	2301      	movs	r3, #1
 8011eb0:	607b      	str	r3, [r7, #4]
 8011eb2:	e00e      	b.n	8011ed2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011eb4:	4a0b      	ldr	r2, [pc, #44]	; (8011ee4 <sys_timeouts_init+0x3c>)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	00db      	lsls	r3, r3, #3
 8011ec0:	4a08      	ldr	r2, [pc, #32]	; (8011ee4 <sys_timeouts_init+0x3c>)
 8011ec2:	4413      	add	r3, r2
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	4908      	ldr	r1, [pc, #32]	; (8011ee8 <sys_timeouts_init+0x40>)
 8011ec8:	f000 f810 	bl	8011eec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	607b      	str	r3, [r7, #4]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d9ed      	bls.n	8011eb4 <sys_timeouts_init+0xc>
  }
}
 8011ed8:	bf00      	nop
 8011eda:	bf00      	nop
 8011edc:	3708      	adds	r7, #8
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	08018c18 	.word	0x08018c18
 8011ee8:	08011e45 	.word	0x08011e45

08011eec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011efe:	d306      	bcc.n	8011f0e <sys_timeout+0x22>
 8011f00:	4b0a      	ldr	r3, [pc, #40]	; (8011f2c <sys_timeout+0x40>)
 8011f02:	f240 1229 	movw	r2, #297	; 0x129
 8011f06:	490a      	ldr	r1, [pc, #40]	; (8011f30 <sys_timeout+0x44>)
 8011f08:	480a      	ldr	r0, [pc, #40]	; (8011f34 <sys_timeout+0x48>)
 8011f0a:	f002 fea1 	bl	8014c50 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011f0e:	f7f2 f9d7 	bl	80042c0 <sys_now>
 8011f12:	4602      	mov	r2, r0
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	4413      	add	r3, r2
 8011f18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	68b9      	ldr	r1, [r7, #8]
 8011f1e:	6978      	ldr	r0, [r7, #20]
 8011f20:	f7ff ff22 	bl	8011d68 <sys_timeout_abs>
#endif
}
 8011f24:	bf00      	nop
 8011f26:	3718      	adds	r7, #24
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	08018314 	.word	0x08018314
 8011f30:	080183b0 	.word	0x080183b0
 8011f34:	08018388 	.word	0x08018388

08011f38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011f3e:	f7f2 f9bf 	bl	80042c0 <sys_now>
 8011f42:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011f44:	4b17      	ldr	r3, [pc, #92]	; (8011fa4 <sys_check_timeouts+0x6c>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d022      	beq.n	8011f96 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	68fa      	ldr	r2, [r7, #12]
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	0fdb      	lsrs	r3, r3, #31
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d11a      	bne.n	8011f9a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4a0e      	ldr	r2, [pc, #56]	; (8011fa4 <sys_check_timeouts+0x6c>)
 8011f6a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	689b      	ldr	r3, [r3, #8]
 8011f70:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	4a0a      	ldr	r2, [pc, #40]	; (8011fa8 <sys_check_timeouts+0x70>)
 8011f7e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011f80:	68b9      	ldr	r1, [r7, #8]
 8011f82:	2009      	movs	r0, #9
 8011f84:	f7f8 fd10 	bl	800a9a8 <memp_free>
    if (handler != NULL) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d0da      	beq.n	8011f44 <sys_check_timeouts+0xc>
      handler(arg);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6838      	ldr	r0, [r7, #0]
 8011f92:	4798      	blx	r3
  do {
 8011f94:	e7d6      	b.n	8011f44 <sys_check_timeouts+0xc>
      return;
 8011f96:	bf00      	nop
 8011f98:	e000      	b.n	8011f9c <sys_check_timeouts+0x64>
      return;
 8011f9a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20011854 	.word	0x20011854
 8011fa8:	20011858 	.word	0x20011858

08011fac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011fb2:	4b16      	ldr	r3, [pc, #88]	; (801200c <sys_timeouts_sleeptime+0x60>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d102      	bne.n	8011fc0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fbe:	e020      	b.n	8012002 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011fc0:	f7f2 f97e 	bl	80042c0 <sys_now>
 8011fc4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011fc6:	4b11      	ldr	r3, [pc, #68]	; (801200c <sys_timeouts_sleeptime+0x60>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	685a      	ldr	r2, [r3, #4]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	0fdb      	lsrs	r3, r3, #31
 8011fd2:	f003 0301 	and.w	r3, r3, #1
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d001      	beq.n	8011fe0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	e010      	b.n	8012002 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011fe0:	4b0a      	ldr	r3, [pc, #40]	; (801200c <sys_timeouts_sleeptime+0x60>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	685a      	ldr	r2, [r3, #4]
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	da06      	bge.n	8012000 <sys_timeouts_sleeptime+0x54>
 8011ff2:	4b07      	ldr	r3, [pc, #28]	; (8012010 <sys_timeouts_sleeptime+0x64>)
 8011ff4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011ff8:	4906      	ldr	r1, [pc, #24]	; (8012014 <sys_timeouts_sleeptime+0x68>)
 8011ffa:	4807      	ldr	r0, [pc, #28]	; (8012018 <sys_timeouts_sleeptime+0x6c>)
 8011ffc:	f002 fe28 	bl	8014c50 <iprintf>
    return ret;
 8012000:	683b      	ldr	r3, [r7, #0]
  }
}
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop
 801200c:	20011854 	.word	0x20011854
 8012010:	08018314 	.word	0x08018314
 8012014:	080183e8 	.word	0x080183e8
 8012018:	08018388 	.word	0x08018388

0801201c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012024:	4915      	ldr	r1, [pc, #84]	; (801207c <etharp_free_entry+0x60>)
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	4613      	mov	r3, r2
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	4413      	add	r3, r2
 801202e:	00db      	lsls	r3, r3, #3
 8012030:	440b      	add	r3, r1
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d013      	beq.n	8012060 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012038:	4910      	ldr	r1, [pc, #64]	; (801207c <etharp_free_entry+0x60>)
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	4613      	mov	r3, r2
 801203e:	005b      	lsls	r3, r3, #1
 8012040:	4413      	add	r3, r2
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	440b      	add	r3, r1
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4618      	mov	r0, r3
 801204a:	f7f9 fb4d 	bl	800b6e8 <pbuf_free>
    arp_table[i].q = NULL;
 801204e:	490b      	ldr	r1, [pc, #44]	; (801207c <etharp_free_entry+0x60>)
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	4613      	mov	r3, r2
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	4413      	add	r3, r2
 8012058:	00db      	lsls	r3, r3, #3
 801205a:	440b      	add	r3, r1
 801205c:	2200      	movs	r2, #0
 801205e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012060:	4906      	ldr	r1, [pc, #24]	; (801207c <etharp_free_entry+0x60>)
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	4613      	mov	r3, r2
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	4413      	add	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	440b      	add	r3, r1
 801206e:	3314      	adds	r3, #20
 8012070:	2200      	movs	r2, #0
 8012072:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012074:	bf00      	nop
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	20011860 	.word	0x20011860

08012080 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012086:	2300      	movs	r3, #0
 8012088:	607b      	str	r3, [r7, #4]
 801208a:	e096      	b.n	80121ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801208c:	494f      	ldr	r1, [pc, #316]	; (80121cc <etharp_tmr+0x14c>)
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	4613      	mov	r3, r2
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	4413      	add	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	440b      	add	r3, r1
 801209a:	3314      	adds	r3, #20
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f000 8086 	beq.w	80121b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80120a8:	4948      	ldr	r1, [pc, #288]	; (80121cc <etharp_tmr+0x14c>)
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	4613      	mov	r3, r2
 80120ae:	005b      	lsls	r3, r3, #1
 80120b0:	4413      	add	r3, r2
 80120b2:	00db      	lsls	r3, r3, #3
 80120b4:	440b      	add	r3, r1
 80120b6:	3312      	adds	r3, #18
 80120b8:	881b      	ldrh	r3, [r3, #0]
 80120ba:	3301      	adds	r3, #1
 80120bc:	b298      	uxth	r0, r3
 80120be:	4943      	ldr	r1, [pc, #268]	; (80121cc <etharp_tmr+0x14c>)
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	4613      	mov	r3, r2
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	440b      	add	r3, r1
 80120cc:	3312      	adds	r3, #18
 80120ce:	4602      	mov	r2, r0
 80120d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80120d2:	493e      	ldr	r1, [pc, #248]	; (80121cc <etharp_tmr+0x14c>)
 80120d4:	687a      	ldr	r2, [r7, #4]
 80120d6:	4613      	mov	r3, r2
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	4413      	add	r3, r2
 80120dc:	00db      	lsls	r3, r3, #3
 80120de:	440b      	add	r3, r1
 80120e0:	3312      	adds	r3, #18
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80120e8:	d215      	bcs.n	8012116 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80120ea:	4938      	ldr	r1, [pc, #224]	; (80121cc <etharp_tmr+0x14c>)
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	4613      	mov	r3, r2
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	440b      	add	r3, r1
 80120f8:	3314      	adds	r3, #20
 80120fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d10e      	bne.n	801211e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012100:	4932      	ldr	r1, [pc, #200]	; (80121cc <etharp_tmr+0x14c>)
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	4613      	mov	r3, r2
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	4413      	add	r3, r2
 801210a:	00db      	lsls	r3, r3, #3
 801210c:	440b      	add	r3, r1
 801210e:	3312      	adds	r3, #18
 8012110:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012112:	2b04      	cmp	r3, #4
 8012114:	d903      	bls.n	801211e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7ff ff80 	bl	801201c <etharp_free_entry>
 801211c:	e04a      	b.n	80121b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801211e:	492b      	ldr	r1, [pc, #172]	; (80121cc <etharp_tmr+0x14c>)
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	4613      	mov	r3, r2
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	4413      	add	r3, r2
 8012128:	00db      	lsls	r3, r3, #3
 801212a:	440b      	add	r3, r1
 801212c:	3314      	adds	r3, #20
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	2b03      	cmp	r3, #3
 8012132:	d10a      	bne.n	801214a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012134:	4925      	ldr	r1, [pc, #148]	; (80121cc <etharp_tmr+0x14c>)
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	4613      	mov	r3, r2
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	4413      	add	r3, r2
 801213e:	00db      	lsls	r3, r3, #3
 8012140:	440b      	add	r3, r1
 8012142:	3314      	adds	r3, #20
 8012144:	2204      	movs	r2, #4
 8012146:	701a      	strb	r2, [r3, #0]
 8012148:	e034      	b.n	80121b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801214a:	4920      	ldr	r1, [pc, #128]	; (80121cc <etharp_tmr+0x14c>)
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	4613      	mov	r3, r2
 8012150:	005b      	lsls	r3, r3, #1
 8012152:	4413      	add	r3, r2
 8012154:	00db      	lsls	r3, r3, #3
 8012156:	440b      	add	r3, r1
 8012158:	3314      	adds	r3, #20
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	2b04      	cmp	r3, #4
 801215e:	d10a      	bne.n	8012176 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012160:	491a      	ldr	r1, [pc, #104]	; (80121cc <etharp_tmr+0x14c>)
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	4613      	mov	r3, r2
 8012166:	005b      	lsls	r3, r3, #1
 8012168:	4413      	add	r3, r2
 801216a:	00db      	lsls	r3, r3, #3
 801216c:	440b      	add	r3, r1
 801216e:	3314      	adds	r3, #20
 8012170:	2202      	movs	r2, #2
 8012172:	701a      	strb	r2, [r3, #0]
 8012174:	e01e      	b.n	80121b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012176:	4915      	ldr	r1, [pc, #84]	; (80121cc <etharp_tmr+0x14c>)
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	4613      	mov	r3, r2
 801217c:	005b      	lsls	r3, r3, #1
 801217e:	4413      	add	r3, r2
 8012180:	00db      	lsls	r3, r3, #3
 8012182:	440b      	add	r3, r1
 8012184:	3314      	adds	r3, #20
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	2b01      	cmp	r3, #1
 801218a:	d113      	bne.n	80121b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801218c:	490f      	ldr	r1, [pc, #60]	; (80121cc <etharp_tmr+0x14c>)
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	4613      	mov	r3, r2
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	4413      	add	r3, r2
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	440b      	add	r3, r1
 801219a:	3308      	adds	r3, #8
 801219c:	6818      	ldr	r0, [r3, #0]
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	4613      	mov	r3, r2
 80121a2:	005b      	lsls	r3, r3, #1
 80121a4:	4413      	add	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	4a08      	ldr	r2, [pc, #32]	; (80121cc <etharp_tmr+0x14c>)
 80121aa:	4413      	add	r3, r2
 80121ac:	3304      	adds	r3, #4
 80121ae:	4619      	mov	r1, r3
 80121b0:	f000 fe6e 	bl	8012e90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	3301      	adds	r3, #1
 80121b8:	607b      	str	r3, [r7, #4]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2b09      	cmp	r3, #9
 80121be:	f77f af65 	ble.w	801208c <etharp_tmr+0xc>
      }
    }
  }
}
 80121c2:	bf00      	nop
 80121c4:	bf00      	nop
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	20011860 	.word	0x20011860

080121d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b08a      	sub	sp, #40	; 0x28
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	460b      	mov	r3, r1
 80121da:	607a      	str	r2, [r7, #4]
 80121dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80121de:	230a      	movs	r3, #10
 80121e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80121e2:	230a      	movs	r3, #10
 80121e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80121e6:	230a      	movs	r3, #10
 80121e8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80121ea:	2300      	movs	r3, #0
 80121ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80121ee:	230a      	movs	r3, #10
 80121f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80121f2:	2300      	movs	r3, #0
 80121f4:	83bb      	strh	r3, [r7, #28]
 80121f6:	2300      	movs	r3, #0
 80121f8:	837b      	strh	r3, [r7, #26]
 80121fa:	2300      	movs	r3, #0
 80121fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121fe:	2300      	movs	r3, #0
 8012200:	843b      	strh	r3, [r7, #32]
 8012202:	e0ae      	b.n	8012362 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012208:	49a6      	ldr	r1, [pc, #664]	; (80124a4 <etharp_find_entry+0x2d4>)
 801220a:	4613      	mov	r3, r2
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	4413      	add	r3, r2
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	440b      	add	r3, r1
 8012214:	3314      	adds	r3, #20
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801221a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801221e:	2b0a      	cmp	r3, #10
 8012220:	d105      	bne.n	801222e <etharp_find_entry+0x5e>
 8012222:	7dfb      	ldrb	r3, [r7, #23]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d102      	bne.n	801222e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012228:	8c3b      	ldrh	r3, [r7, #32]
 801222a:	847b      	strh	r3, [r7, #34]	; 0x22
 801222c:	e095      	b.n	801235a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801222e:	7dfb      	ldrb	r3, [r7, #23]
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 8092 	beq.w	801235a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	2b01      	cmp	r3, #1
 801223a:	d009      	beq.n	8012250 <etharp_find_entry+0x80>
 801223c:	7dfb      	ldrb	r3, [r7, #23]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d806      	bhi.n	8012250 <etharp_find_entry+0x80>
 8012242:	4b99      	ldr	r3, [pc, #612]	; (80124a8 <etharp_find_entry+0x2d8>)
 8012244:	f240 1223 	movw	r2, #291	; 0x123
 8012248:	4998      	ldr	r1, [pc, #608]	; (80124ac <etharp_find_entry+0x2dc>)
 801224a:	4899      	ldr	r0, [pc, #612]	; (80124b0 <etharp_find_entry+0x2e0>)
 801224c:	f002 fd00 	bl	8014c50 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d020      	beq.n	8012298 <etharp_find_entry+0xc8>
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6819      	ldr	r1, [r3, #0]
 801225a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801225e:	4891      	ldr	r0, [pc, #580]	; (80124a4 <etharp_find_entry+0x2d4>)
 8012260:	4613      	mov	r3, r2
 8012262:	005b      	lsls	r3, r3, #1
 8012264:	4413      	add	r3, r2
 8012266:	00db      	lsls	r3, r3, #3
 8012268:	4403      	add	r3, r0
 801226a:	3304      	adds	r3, #4
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4299      	cmp	r1, r3
 8012270:	d112      	bne.n	8012298 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00c      	beq.n	8012292 <etharp_find_entry+0xc2>
 8012278:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801227c:	4989      	ldr	r1, [pc, #548]	; (80124a4 <etharp_find_entry+0x2d4>)
 801227e:	4613      	mov	r3, r2
 8012280:	005b      	lsls	r3, r3, #1
 8012282:	4413      	add	r3, r2
 8012284:	00db      	lsls	r3, r3, #3
 8012286:	440b      	add	r3, r1
 8012288:	3308      	adds	r3, #8
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	429a      	cmp	r2, r3
 8012290:	d102      	bne.n	8012298 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012292:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012296:	e100      	b.n	801249a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012298:	7dfb      	ldrb	r3, [r7, #23]
 801229a:	2b01      	cmp	r3, #1
 801229c:	d140      	bne.n	8012320 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801229e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122a2:	4980      	ldr	r1, [pc, #512]	; (80124a4 <etharp_find_entry+0x2d4>)
 80122a4:	4613      	mov	r3, r2
 80122a6:	005b      	lsls	r3, r3, #1
 80122a8:	4413      	add	r3, r2
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	440b      	add	r3, r1
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d01a      	beq.n	80122ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80122b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122b8:	497a      	ldr	r1, [pc, #488]	; (80124a4 <etharp_find_entry+0x2d4>)
 80122ba:	4613      	mov	r3, r2
 80122bc:	005b      	lsls	r3, r3, #1
 80122be:	4413      	add	r3, r2
 80122c0:	00db      	lsls	r3, r3, #3
 80122c2:	440b      	add	r3, r1
 80122c4:	3312      	adds	r3, #18
 80122c6:	881b      	ldrh	r3, [r3, #0]
 80122c8:	8bba      	ldrh	r2, [r7, #28]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d845      	bhi.n	801235a <etharp_find_entry+0x18a>
            old_queue = i;
 80122ce:	8c3b      	ldrh	r3, [r7, #32]
 80122d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80122d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122d6:	4973      	ldr	r1, [pc, #460]	; (80124a4 <etharp_find_entry+0x2d4>)
 80122d8:	4613      	mov	r3, r2
 80122da:	005b      	lsls	r3, r3, #1
 80122dc:	4413      	add	r3, r2
 80122de:	00db      	lsls	r3, r3, #3
 80122e0:	440b      	add	r3, r1
 80122e2:	3312      	adds	r3, #18
 80122e4:	881b      	ldrh	r3, [r3, #0]
 80122e6:	83bb      	strh	r3, [r7, #28]
 80122e8:	e037      	b.n	801235a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80122ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122ee:	496d      	ldr	r1, [pc, #436]	; (80124a4 <etharp_find_entry+0x2d4>)
 80122f0:	4613      	mov	r3, r2
 80122f2:	005b      	lsls	r3, r3, #1
 80122f4:	4413      	add	r3, r2
 80122f6:	00db      	lsls	r3, r3, #3
 80122f8:	440b      	add	r3, r1
 80122fa:	3312      	adds	r3, #18
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	8b7a      	ldrh	r2, [r7, #26]
 8012300:	429a      	cmp	r2, r3
 8012302:	d82a      	bhi.n	801235a <etharp_find_entry+0x18a>
            old_pending = i;
 8012304:	8c3b      	ldrh	r3, [r7, #32]
 8012306:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801230c:	4965      	ldr	r1, [pc, #404]	; (80124a4 <etharp_find_entry+0x2d4>)
 801230e:	4613      	mov	r3, r2
 8012310:	005b      	lsls	r3, r3, #1
 8012312:	4413      	add	r3, r2
 8012314:	00db      	lsls	r3, r3, #3
 8012316:	440b      	add	r3, r1
 8012318:	3312      	adds	r3, #18
 801231a:	881b      	ldrh	r3, [r3, #0]
 801231c:	837b      	strh	r3, [r7, #26]
 801231e:	e01c      	b.n	801235a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012320:	7dfb      	ldrb	r3, [r7, #23]
 8012322:	2b01      	cmp	r3, #1
 8012324:	d919      	bls.n	801235a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801232a:	495e      	ldr	r1, [pc, #376]	; (80124a4 <etharp_find_entry+0x2d4>)
 801232c:	4613      	mov	r3, r2
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	4413      	add	r3, r2
 8012332:	00db      	lsls	r3, r3, #3
 8012334:	440b      	add	r3, r1
 8012336:	3312      	adds	r3, #18
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	8b3a      	ldrh	r2, [r7, #24]
 801233c:	429a      	cmp	r2, r3
 801233e:	d80c      	bhi.n	801235a <etharp_find_entry+0x18a>
            old_stable = i;
 8012340:	8c3b      	ldrh	r3, [r7, #32]
 8012342:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012348:	4956      	ldr	r1, [pc, #344]	; (80124a4 <etharp_find_entry+0x2d4>)
 801234a:	4613      	mov	r3, r2
 801234c:	005b      	lsls	r3, r3, #1
 801234e:	4413      	add	r3, r2
 8012350:	00db      	lsls	r3, r3, #3
 8012352:	440b      	add	r3, r1
 8012354:	3312      	adds	r3, #18
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801235a:	8c3b      	ldrh	r3, [r7, #32]
 801235c:	3301      	adds	r3, #1
 801235e:	b29b      	uxth	r3, r3
 8012360:	843b      	strh	r3, [r7, #32]
 8012362:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012366:	2b09      	cmp	r3, #9
 8012368:	f77f af4c 	ble.w	8012204 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801236c:	7afb      	ldrb	r3, [r7, #11]
 801236e:	f003 0302 	and.w	r3, r3, #2
 8012372:	2b00      	cmp	r3, #0
 8012374:	d108      	bne.n	8012388 <etharp_find_entry+0x1b8>
 8012376:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801237a:	2b0a      	cmp	r3, #10
 801237c:	d107      	bne.n	801238e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801237e:	7afb      	ldrb	r3, [r7, #11]
 8012380:	f003 0301 	and.w	r3, r3, #1
 8012384:	2b00      	cmp	r3, #0
 8012386:	d102      	bne.n	801238e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801238c:	e085      	b.n	801249a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801238e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012392:	2b09      	cmp	r3, #9
 8012394:	dc02      	bgt.n	801239c <etharp_find_entry+0x1cc>
    i = empty;
 8012396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012398:	843b      	strh	r3, [r7, #32]
 801239a:	e039      	b.n	8012410 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801239c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80123a0:	2b09      	cmp	r3, #9
 80123a2:	dc14      	bgt.n	80123ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80123a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80123a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123ac:	493d      	ldr	r1, [pc, #244]	; (80124a4 <etharp_find_entry+0x2d4>)
 80123ae:	4613      	mov	r3, r2
 80123b0:	005b      	lsls	r3, r3, #1
 80123b2:	4413      	add	r3, r2
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	440b      	add	r3, r1
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d018      	beq.n	80123f0 <etharp_find_entry+0x220>
 80123be:	4b3a      	ldr	r3, [pc, #232]	; (80124a8 <etharp_find_entry+0x2d8>)
 80123c0:	f240 126d 	movw	r2, #365	; 0x16d
 80123c4:	493b      	ldr	r1, [pc, #236]	; (80124b4 <etharp_find_entry+0x2e4>)
 80123c6:	483a      	ldr	r0, [pc, #232]	; (80124b0 <etharp_find_entry+0x2e0>)
 80123c8:	f002 fc42 	bl	8014c50 <iprintf>
 80123cc:	e010      	b.n	80123f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80123ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80123d2:	2b09      	cmp	r3, #9
 80123d4:	dc02      	bgt.n	80123dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80123d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123d8:	843b      	strh	r3, [r7, #32]
 80123da:	e009      	b.n	80123f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80123dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80123e0:	2b09      	cmp	r3, #9
 80123e2:	dc02      	bgt.n	80123ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80123e4:	8bfb      	ldrh	r3, [r7, #30]
 80123e6:	843b      	strh	r3, [r7, #32]
 80123e8:	e002      	b.n	80123f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80123ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123ee:	e054      	b.n	801249a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80123f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123f4:	2b09      	cmp	r3, #9
 80123f6:	dd06      	ble.n	8012406 <etharp_find_entry+0x236>
 80123f8:	4b2b      	ldr	r3, [pc, #172]	; (80124a8 <etharp_find_entry+0x2d8>)
 80123fa:	f240 127f 	movw	r2, #383	; 0x17f
 80123fe:	492e      	ldr	r1, [pc, #184]	; (80124b8 <etharp_find_entry+0x2e8>)
 8012400:	482b      	ldr	r0, [pc, #172]	; (80124b0 <etharp_find_entry+0x2e0>)
 8012402:	f002 fc25 	bl	8014c50 <iprintf>
    etharp_free_entry(i);
 8012406:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801240a:	4618      	mov	r0, r3
 801240c:	f7ff fe06 	bl	801201c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012410:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012414:	2b09      	cmp	r3, #9
 8012416:	dd06      	ble.n	8012426 <etharp_find_entry+0x256>
 8012418:	4b23      	ldr	r3, [pc, #140]	; (80124a8 <etharp_find_entry+0x2d8>)
 801241a:	f240 1283 	movw	r2, #387	; 0x183
 801241e:	4926      	ldr	r1, [pc, #152]	; (80124b8 <etharp_find_entry+0x2e8>)
 8012420:	4823      	ldr	r0, [pc, #140]	; (80124b0 <etharp_find_entry+0x2e0>)
 8012422:	f002 fc15 	bl	8014c50 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801242a:	491e      	ldr	r1, [pc, #120]	; (80124a4 <etharp_find_entry+0x2d4>)
 801242c:	4613      	mov	r3, r2
 801242e:	005b      	lsls	r3, r3, #1
 8012430:	4413      	add	r3, r2
 8012432:	00db      	lsls	r3, r3, #3
 8012434:	440b      	add	r3, r1
 8012436:	3314      	adds	r3, #20
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d006      	beq.n	801244c <etharp_find_entry+0x27c>
 801243e:	4b1a      	ldr	r3, [pc, #104]	; (80124a8 <etharp_find_entry+0x2d8>)
 8012440:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012444:	491d      	ldr	r1, [pc, #116]	; (80124bc <etharp_find_entry+0x2ec>)
 8012446:	481a      	ldr	r0, [pc, #104]	; (80124b0 <etharp_find_entry+0x2e0>)
 8012448:	f002 fc02 	bl	8014c50 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00b      	beq.n	801246a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6819      	ldr	r1, [r3, #0]
 801245a:	4812      	ldr	r0, [pc, #72]	; (80124a4 <etharp_find_entry+0x2d4>)
 801245c:	4613      	mov	r3, r2
 801245e:	005b      	lsls	r3, r3, #1
 8012460:	4413      	add	r3, r2
 8012462:	00db      	lsls	r3, r3, #3
 8012464:	4403      	add	r3, r0
 8012466:	3304      	adds	r3, #4
 8012468:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801246a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801246e:	490d      	ldr	r1, [pc, #52]	; (80124a4 <etharp_find_entry+0x2d4>)
 8012470:	4613      	mov	r3, r2
 8012472:	005b      	lsls	r3, r3, #1
 8012474:	4413      	add	r3, r2
 8012476:	00db      	lsls	r3, r3, #3
 8012478:	440b      	add	r3, r1
 801247a:	3312      	adds	r3, #18
 801247c:	2200      	movs	r2, #0
 801247e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012480:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012484:	4907      	ldr	r1, [pc, #28]	; (80124a4 <etharp_find_entry+0x2d4>)
 8012486:	4613      	mov	r3, r2
 8012488:	005b      	lsls	r3, r3, #1
 801248a:	4413      	add	r3, r2
 801248c:	00db      	lsls	r3, r3, #3
 801248e:	440b      	add	r3, r1
 8012490:	3308      	adds	r3, #8
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012496:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801249a:	4618      	mov	r0, r3
 801249c:	3728      	adds	r7, #40	; 0x28
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	20011860 	.word	0x20011860
 80124a8:	080183fc 	.word	0x080183fc
 80124ac:	08018434 	.word	0x08018434
 80124b0:	08018474 	.word	0x08018474
 80124b4:	0801849c 	.word	0x0801849c
 80124b8:	080184b4 	.word	0x080184b4
 80124bc:	080184c8 	.word	0x080184c8

080124c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b088      	sub	sp, #32
 80124c4:	af02      	add	r7, sp, #8
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
 80124cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80124d4:	2b06      	cmp	r3, #6
 80124d6:	d006      	beq.n	80124e6 <etharp_update_arp_entry+0x26>
 80124d8:	4b48      	ldr	r3, [pc, #288]	; (80125fc <etharp_update_arp_entry+0x13c>)
 80124da:	f240 12a9 	movw	r2, #425	; 0x1a9
 80124de:	4948      	ldr	r1, [pc, #288]	; (8012600 <etharp_update_arp_entry+0x140>)
 80124e0:	4848      	ldr	r0, [pc, #288]	; (8012604 <etharp_update_arp_entry+0x144>)
 80124e2:	f002 fbb5 	bl	8014c50 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d012      	beq.n	8012512 <etharp_update_arp_entry+0x52>
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d00e      	beq.n	8012512 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	68f9      	ldr	r1, [r7, #12]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f001 f8f4 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 8012500:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012502:	2b00      	cmp	r3, #0
 8012504:	d105      	bne.n	8012512 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801250e:	2be0      	cmp	r3, #224	; 0xe0
 8012510:	d102      	bne.n	8012518 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012512:	f06f 030f 	mvn.w	r3, #15
 8012516:	e06c      	b.n	80125f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012518:	78fb      	ldrb	r3, [r7, #3]
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	4619      	mov	r1, r3
 801251e:	68b8      	ldr	r0, [r7, #8]
 8012520:	f7ff fe56 	bl	80121d0 <etharp_find_entry>
 8012524:	4603      	mov	r3, r0
 8012526:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012528:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801252c:	2b00      	cmp	r3, #0
 801252e:	da02      	bge.n	8012536 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012530:	8afb      	ldrh	r3, [r7, #22]
 8012532:	b25b      	sxtb	r3, r3
 8012534:	e05d      	b.n	80125f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012536:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801253a:	4933      	ldr	r1, [pc, #204]	; (8012608 <etharp_update_arp_entry+0x148>)
 801253c:	4613      	mov	r3, r2
 801253e:	005b      	lsls	r3, r3, #1
 8012540:	4413      	add	r3, r2
 8012542:	00db      	lsls	r3, r3, #3
 8012544:	440b      	add	r3, r1
 8012546:	3314      	adds	r3, #20
 8012548:	2202      	movs	r2, #2
 801254a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801254c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012550:	492d      	ldr	r1, [pc, #180]	; (8012608 <etharp_update_arp_entry+0x148>)
 8012552:	4613      	mov	r3, r2
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	4413      	add	r3, r2
 8012558:	00db      	lsls	r3, r3, #3
 801255a:	440b      	add	r3, r1
 801255c:	3308      	adds	r3, #8
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012562:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012566:	4613      	mov	r3, r2
 8012568:	005b      	lsls	r3, r3, #1
 801256a:	4413      	add	r3, r2
 801256c:	00db      	lsls	r3, r3, #3
 801256e:	3308      	adds	r3, #8
 8012570:	4a25      	ldr	r2, [pc, #148]	; (8012608 <etharp_update_arp_entry+0x148>)
 8012572:	4413      	add	r3, r2
 8012574:	3304      	adds	r3, #4
 8012576:	2206      	movs	r2, #6
 8012578:	6879      	ldr	r1, [r7, #4]
 801257a:	4618      	mov	r0, r3
 801257c:	f002 fabd 	bl	8014afa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012584:	4920      	ldr	r1, [pc, #128]	; (8012608 <etharp_update_arp_entry+0x148>)
 8012586:	4613      	mov	r3, r2
 8012588:	005b      	lsls	r3, r3, #1
 801258a:	4413      	add	r3, r2
 801258c:	00db      	lsls	r3, r3, #3
 801258e:	440b      	add	r3, r1
 8012590:	3312      	adds	r3, #18
 8012592:	2200      	movs	r2, #0
 8012594:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801259a:	491b      	ldr	r1, [pc, #108]	; (8012608 <etharp_update_arp_entry+0x148>)
 801259c:	4613      	mov	r3, r2
 801259e:	005b      	lsls	r3, r3, #1
 80125a0:	4413      	add	r3, r2
 80125a2:	00db      	lsls	r3, r3, #3
 80125a4:	440b      	add	r3, r1
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d021      	beq.n	80125f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80125ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125b0:	4915      	ldr	r1, [pc, #84]	; (8012608 <etharp_update_arp_entry+0x148>)
 80125b2:	4613      	mov	r3, r2
 80125b4:	005b      	lsls	r3, r3, #1
 80125b6:	4413      	add	r3, r2
 80125b8:	00db      	lsls	r3, r3, #3
 80125ba:	440b      	add	r3, r1
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80125c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125c4:	4910      	ldr	r1, [pc, #64]	; (8012608 <etharp_update_arp_entry+0x148>)
 80125c6:	4613      	mov	r3, r2
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	4413      	add	r3, r2
 80125cc:	00db      	lsls	r3, r3, #3
 80125ce:	440b      	add	r3, r1
 80125d0:	2200      	movs	r2, #0
 80125d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80125da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125de:	9300      	str	r3, [sp, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6939      	ldr	r1, [r7, #16]
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f001 ff8d 	bl	8014504 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80125ea:	6938      	ldr	r0, [r7, #16]
 80125ec:	f7f9 f87c 	bl	800b6e8 <pbuf_free>
  }
  return ERR_OK;
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3718      	adds	r7, #24
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	080183fc 	.word	0x080183fc
 8012600:	080184f4 	.word	0x080184f4
 8012604:	08018474 	.word	0x08018474
 8012608:	20011860 	.word	0x20011860

0801260c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012614:	2300      	movs	r3, #0
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	e01e      	b.n	8012658 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801261a:	4913      	ldr	r1, [pc, #76]	; (8012668 <etharp_cleanup_netif+0x5c>)
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	4613      	mov	r3, r2
 8012620:	005b      	lsls	r3, r3, #1
 8012622:	4413      	add	r3, r2
 8012624:	00db      	lsls	r3, r3, #3
 8012626:	440b      	add	r3, r1
 8012628:	3314      	adds	r3, #20
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801262e:	7afb      	ldrb	r3, [r7, #11]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d00e      	beq.n	8012652 <etharp_cleanup_netif+0x46>
 8012634:	490c      	ldr	r1, [pc, #48]	; (8012668 <etharp_cleanup_netif+0x5c>)
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	4613      	mov	r3, r2
 801263a:	005b      	lsls	r3, r3, #1
 801263c:	4413      	add	r3, r2
 801263e:	00db      	lsls	r3, r3, #3
 8012640:	440b      	add	r3, r1
 8012642:	3308      	adds	r3, #8
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	429a      	cmp	r2, r3
 801264a:	d102      	bne.n	8012652 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7ff fce5 	bl	801201c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	3301      	adds	r3, #1
 8012656:	60fb      	str	r3, [r7, #12]
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	2b09      	cmp	r3, #9
 801265c:	dddd      	ble.n	801261a <etharp_cleanup_netif+0xe>
    }
  }
}
 801265e:	bf00      	nop
 8012660:	bf00      	nop
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	20011860 	.word	0x20011860

0801266c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801266c:	b5b0      	push	{r4, r5, r7, lr}
 801266e:	b08a      	sub	sp, #40	; 0x28
 8012670:	af04      	add	r7, sp, #16
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d107      	bne.n	801268c <etharp_input+0x20>
 801267c:	4b3d      	ldr	r3, [pc, #244]	; (8012774 <etharp_input+0x108>)
 801267e:	f240 228a 	movw	r2, #650	; 0x28a
 8012682:	493d      	ldr	r1, [pc, #244]	; (8012778 <etharp_input+0x10c>)
 8012684:	483d      	ldr	r0, [pc, #244]	; (801277c <etharp_input+0x110>)
 8012686:	f002 fae3 	bl	8014c50 <iprintf>
 801268a:	e06f      	b.n	801276c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	881b      	ldrh	r3, [r3, #0]
 8012696:	b29b      	uxth	r3, r3
 8012698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801269c:	d10c      	bne.n	80126b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80126a2:	2b06      	cmp	r3, #6
 80126a4:	d108      	bne.n	80126b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80126aa:	2b04      	cmp	r3, #4
 80126ac:	d104      	bne.n	80126b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	885b      	ldrh	r3, [r3, #2]
 80126b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80126b4:	2b08      	cmp	r3, #8
 80126b6:	d003      	beq.n	80126c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7f9 f815 	bl	800b6e8 <pbuf_free>
    return;
 80126be:	e055      	b.n	801276c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	330e      	adds	r3, #14
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	3318      	adds	r3, #24
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	3304      	adds	r3, #4
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d102      	bne.n	80126e0 <etharp_input+0x74>
    for_us = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	75fb      	strb	r3, [r7, #23]
 80126de:	e009      	b.n	80126f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	3304      	adds	r3, #4
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	bf0c      	ite	eq
 80126ec:	2301      	moveq	r3, #1
 80126ee:	2300      	movne	r3, #0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	f103 0208 	add.w	r2, r3, #8
 80126fa:	7dfb      	ldrb	r3, [r7, #23]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d001      	beq.n	8012704 <etharp_input+0x98>
 8012700:	2301      	movs	r3, #1
 8012702:	e000      	b.n	8012706 <etharp_input+0x9a>
 8012704:	2302      	movs	r3, #2
 8012706:	f107 010c 	add.w	r1, r7, #12
 801270a:	6838      	ldr	r0, [r7, #0]
 801270c:	f7ff fed8 	bl	80124c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	88db      	ldrh	r3, [r3, #6]
 8012714:	b29b      	uxth	r3, r3
 8012716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801271a:	d003      	beq.n	8012724 <etharp_input+0xb8>
 801271c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012720:	d01e      	beq.n	8012760 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012722:	e020      	b.n	8012766 <etharp_input+0xfa>
      if (for_us) {
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d01c      	beq.n	8012764 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012740:	693a      	ldr	r2, [r7, #16]
 8012742:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012744:	2102      	movs	r1, #2
 8012746:	9103      	str	r1, [sp, #12]
 8012748:	f107 010c 	add.w	r1, r7, #12
 801274c:	9102      	str	r1, [sp, #8]
 801274e:	9201      	str	r2, [sp, #4]
 8012750:	9300      	str	r3, [sp, #0]
 8012752:	462b      	mov	r3, r5
 8012754:	4622      	mov	r2, r4
 8012756:	4601      	mov	r1, r0
 8012758:	6838      	ldr	r0, [r7, #0]
 801275a:	f000 faeb 	bl	8012d34 <etharp_raw>
      break;
 801275e:	e001      	b.n	8012764 <etharp_input+0xf8>
      break;
 8012760:	bf00      	nop
 8012762:	e000      	b.n	8012766 <etharp_input+0xfa>
      break;
 8012764:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f7f8 ffbe 	bl	800b6e8 <pbuf_free>
}
 801276c:	3718      	adds	r7, #24
 801276e:	46bd      	mov	sp, r7
 8012770:	bdb0      	pop	{r4, r5, r7, pc}
 8012772:	bf00      	nop
 8012774:	080183fc 	.word	0x080183fc
 8012778:	0801854c 	.word	0x0801854c
 801277c:	08018474 	.word	0x08018474

08012780 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af02      	add	r7, sp, #8
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	4613      	mov	r3, r2
 801278c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801278e:	79fa      	ldrb	r2, [r7, #7]
 8012790:	4944      	ldr	r1, [pc, #272]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 8012792:	4613      	mov	r3, r2
 8012794:	005b      	lsls	r3, r3, #1
 8012796:	4413      	add	r3, r2
 8012798:	00db      	lsls	r3, r3, #3
 801279a:	440b      	add	r3, r1
 801279c:	3314      	adds	r3, #20
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d806      	bhi.n	80127b2 <etharp_output_to_arp_index+0x32>
 80127a4:	4b40      	ldr	r3, [pc, #256]	; (80128a8 <etharp_output_to_arp_index+0x128>)
 80127a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80127aa:	4940      	ldr	r1, [pc, #256]	; (80128ac <etharp_output_to_arp_index+0x12c>)
 80127ac:	4840      	ldr	r0, [pc, #256]	; (80128b0 <etharp_output_to_arp_index+0x130>)
 80127ae:	f002 fa4f 	bl	8014c50 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80127b2:	79fa      	ldrb	r2, [r7, #7]
 80127b4:	493b      	ldr	r1, [pc, #236]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 80127b6:	4613      	mov	r3, r2
 80127b8:	005b      	lsls	r3, r3, #1
 80127ba:	4413      	add	r3, r2
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	440b      	add	r3, r1
 80127c0:	3314      	adds	r3, #20
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	2b02      	cmp	r3, #2
 80127c6:	d153      	bne.n	8012870 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80127c8:	79fa      	ldrb	r2, [r7, #7]
 80127ca:	4936      	ldr	r1, [pc, #216]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 80127cc:	4613      	mov	r3, r2
 80127ce:	005b      	lsls	r3, r3, #1
 80127d0:	4413      	add	r3, r2
 80127d2:	00db      	lsls	r3, r3, #3
 80127d4:	440b      	add	r3, r1
 80127d6:	3312      	adds	r3, #18
 80127d8:	881b      	ldrh	r3, [r3, #0]
 80127da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80127de:	d919      	bls.n	8012814 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80127e0:	79fa      	ldrb	r2, [r7, #7]
 80127e2:	4613      	mov	r3, r2
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	4413      	add	r3, r2
 80127e8:	00db      	lsls	r3, r3, #3
 80127ea:	4a2e      	ldr	r2, [pc, #184]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 80127ec:	4413      	add	r3, r2
 80127ee:	3304      	adds	r3, #4
 80127f0:	4619      	mov	r1, r3
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	f000 fb4c 	bl	8012e90 <etharp_request>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d138      	bne.n	8012870 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80127fe:	79fa      	ldrb	r2, [r7, #7]
 8012800:	4928      	ldr	r1, [pc, #160]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 8012802:	4613      	mov	r3, r2
 8012804:	005b      	lsls	r3, r3, #1
 8012806:	4413      	add	r3, r2
 8012808:	00db      	lsls	r3, r3, #3
 801280a:	440b      	add	r3, r1
 801280c:	3314      	adds	r3, #20
 801280e:	2203      	movs	r2, #3
 8012810:	701a      	strb	r2, [r3, #0]
 8012812:	e02d      	b.n	8012870 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012814:	79fa      	ldrb	r2, [r7, #7]
 8012816:	4923      	ldr	r1, [pc, #140]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 8012818:	4613      	mov	r3, r2
 801281a:	005b      	lsls	r3, r3, #1
 801281c:	4413      	add	r3, r2
 801281e:	00db      	lsls	r3, r3, #3
 8012820:	440b      	add	r3, r1
 8012822:	3312      	adds	r3, #18
 8012824:	881b      	ldrh	r3, [r3, #0]
 8012826:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801282a:	d321      	bcc.n	8012870 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801282c:	79fa      	ldrb	r2, [r7, #7]
 801282e:	4613      	mov	r3, r2
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	4413      	add	r3, r2
 8012834:	00db      	lsls	r3, r3, #3
 8012836:	4a1b      	ldr	r2, [pc, #108]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 8012838:	4413      	add	r3, r2
 801283a:	1d19      	adds	r1, r3, #4
 801283c:	79fa      	ldrb	r2, [r7, #7]
 801283e:	4613      	mov	r3, r2
 8012840:	005b      	lsls	r3, r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	3308      	adds	r3, #8
 8012848:	4a16      	ldr	r2, [pc, #88]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 801284a:	4413      	add	r3, r2
 801284c:	3304      	adds	r3, #4
 801284e:	461a      	mov	r2, r3
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f000 fafb 	bl	8012e4c <etharp_request_dst>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d109      	bne.n	8012870 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801285c:	79fa      	ldrb	r2, [r7, #7]
 801285e:	4911      	ldr	r1, [pc, #68]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 8012860:	4613      	mov	r3, r2
 8012862:	005b      	lsls	r3, r3, #1
 8012864:	4413      	add	r3, r2
 8012866:	00db      	lsls	r3, r3, #3
 8012868:	440b      	add	r3, r1
 801286a:	3314      	adds	r3, #20
 801286c:	2203      	movs	r2, #3
 801286e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012876:	79fa      	ldrb	r2, [r7, #7]
 8012878:	4613      	mov	r3, r2
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	4413      	add	r3, r2
 801287e:	00db      	lsls	r3, r3, #3
 8012880:	3308      	adds	r3, #8
 8012882:	4a08      	ldr	r2, [pc, #32]	; (80128a4 <etharp_output_to_arp_index+0x124>)
 8012884:	4413      	add	r3, r2
 8012886:	3304      	adds	r3, #4
 8012888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801288c:	9200      	str	r2, [sp, #0]
 801288e:	460a      	mov	r2, r1
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f001 fe36 	bl	8014504 <ethernet_output>
 8012898:	4603      	mov	r3, r0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3710      	adds	r7, #16
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	20011860 	.word	0x20011860
 80128a8:	080183fc 	.word	0x080183fc
 80128ac:	0801856c 	.word	0x0801856c
 80128b0:	08018474 	.word	0x08018474

080128b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b08a      	sub	sp, #40	; 0x28
 80128b8:	af02      	add	r7, sp, #8
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d106      	bne.n	80128d8 <etharp_output+0x24>
 80128ca:	4b73      	ldr	r3, [pc, #460]	; (8012a98 <etharp_output+0x1e4>)
 80128cc:	f240 321e 	movw	r2, #798	; 0x31e
 80128d0:	4972      	ldr	r1, [pc, #456]	; (8012a9c <etharp_output+0x1e8>)
 80128d2:	4873      	ldr	r0, [pc, #460]	; (8012aa0 <etharp_output+0x1ec>)
 80128d4:	f002 f9bc 	bl	8014c50 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d106      	bne.n	80128ec <etharp_output+0x38>
 80128de:	4b6e      	ldr	r3, [pc, #440]	; (8012a98 <etharp_output+0x1e4>)
 80128e0:	f240 321f 	movw	r2, #799	; 0x31f
 80128e4:	496f      	ldr	r1, [pc, #444]	; (8012aa4 <etharp_output+0x1f0>)
 80128e6:	486e      	ldr	r0, [pc, #440]	; (8012aa0 <etharp_output+0x1ec>)
 80128e8:	f002 f9b2 	bl	8014c50 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <etharp_output+0x4c>
 80128f2:	4b69      	ldr	r3, [pc, #420]	; (8012a98 <etharp_output+0x1e4>)
 80128f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80128f8:	496b      	ldr	r1, [pc, #428]	; (8012aa8 <etharp_output+0x1f4>)
 80128fa:	4869      	ldr	r0, [pc, #420]	; (8012aa0 <etharp_output+0x1ec>)
 80128fc:	f002 f9a8 	bl	8014c50 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	68f9      	ldr	r1, [r7, #12]
 8012906:	4618      	mov	r0, r3
 8012908:	f000 feee 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d002      	beq.n	8012918 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012912:	4b66      	ldr	r3, [pc, #408]	; (8012aac <etharp_output+0x1f8>)
 8012914:	61fb      	str	r3, [r7, #28]
 8012916:	e0af      	b.n	8012a78 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012920:	2be0      	cmp	r3, #224	; 0xe0
 8012922:	d118      	bne.n	8012956 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012924:	2301      	movs	r3, #1
 8012926:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012928:	2300      	movs	r3, #0
 801292a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801292c:	235e      	movs	r3, #94	; 0x5e
 801292e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	3301      	adds	r3, #1
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801293a:	b2db      	uxtb	r3, r3
 801293c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	3302      	adds	r3, #2
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	3303      	adds	r3, #3
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801294e:	f107 0310 	add.w	r3, r7, #16
 8012952:	61fb      	str	r3, [r7, #28]
 8012954:	e090      	b.n	8012a78 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3304      	adds	r3, #4
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	405a      	eors	r2, r3
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	3308      	adds	r3, #8
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4013      	ands	r3, r2
 801296a:	2b00      	cmp	r3, #0
 801296c:	d012      	beq.n	8012994 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012974:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012978:	4293      	cmp	r3, r2
 801297a:	d00b      	beq.n	8012994 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	330c      	adds	r3, #12
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d003      	beq.n	801298e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	330c      	adds	r3, #12
 801298a:	61bb      	str	r3, [r7, #24]
 801298c:	e002      	b.n	8012994 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801298e:	f06f 0303 	mvn.w	r3, #3
 8012992:	e07d      	b.n	8012a90 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012994:	4b46      	ldr	r3, [pc, #280]	; (8012ab0 <etharp_output+0x1fc>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	4619      	mov	r1, r3
 801299a:	4a46      	ldr	r2, [pc, #280]	; (8012ab4 <etharp_output+0x200>)
 801299c:	460b      	mov	r3, r1
 801299e:	005b      	lsls	r3, r3, #1
 80129a0:	440b      	add	r3, r1
 80129a2:	00db      	lsls	r3, r3, #3
 80129a4:	4413      	add	r3, r2
 80129a6:	3314      	adds	r3, #20
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d925      	bls.n	80129fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80129ae:	4b40      	ldr	r3, [pc, #256]	; (8012ab0 <etharp_output+0x1fc>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	4619      	mov	r1, r3
 80129b4:	4a3f      	ldr	r2, [pc, #252]	; (8012ab4 <etharp_output+0x200>)
 80129b6:	460b      	mov	r3, r1
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	440b      	add	r3, r1
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	4413      	add	r3, r2
 80129c0:	3308      	adds	r3, #8
 80129c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80129c4:	68fa      	ldr	r2, [r7, #12]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d117      	bne.n	80129fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	4b38      	ldr	r3, [pc, #224]	; (8012ab0 <etharp_output+0x1fc>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	4618      	mov	r0, r3
 80129d4:	4937      	ldr	r1, [pc, #220]	; (8012ab4 <etharp_output+0x200>)
 80129d6:	4603      	mov	r3, r0
 80129d8:	005b      	lsls	r3, r3, #1
 80129da:	4403      	add	r3, r0
 80129dc:	00db      	lsls	r3, r3, #3
 80129de:	440b      	add	r3, r1
 80129e0:	3304      	adds	r3, #4
 80129e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d108      	bne.n	80129fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80129e8:	4b31      	ldr	r3, [pc, #196]	; (8012ab0 <etharp_output+0x1fc>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	461a      	mov	r2, r3
 80129ee:	68b9      	ldr	r1, [r7, #8]
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7ff fec5 	bl	8012780 <etharp_output_to_arp_index>
 80129f6:	4603      	mov	r3, r0
 80129f8:	e04a      	b.n	8012a90 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80129fa:	2300      	movs	r3, #0
 80129fc:	75fb      	strb	r3, [r7, #23]
 80129fe:	e031      	b.n	8012a64 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a00:	7dfa      	ldrb	r2, [r7, #23]
 8012a02:	492c      	ldr	r1, [pc, #176]	; (8012ab4 <etharp_output+0x200>)
 8012a04:	4613      	mov	r3, r2
 8012a06:	005b      	lsls	r3, r3, #1
 8012a08:	4413      	add	r3, r2
 8012a0a:	00db      	lsls	r3, r3, #3
 8012a0c:	440b      	add	r3, r1
 8012a0e:	3314      	adds	r3, #20
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d923      	bls.n	8012a5e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012a16:	7dfa      	ldrb	r2, [r7, #23]
 8012a18:	4926      	ldr	r1, [pc, #152]	; (8012ab4 <etharp_output+0x200>)
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	005b      	lsls	r3, r3, #1
 8012a1e:	4413      	add	r3, r2
 8012a20:	00db      	lsls	r3, r3, #3
 8012a22:	440b      	add	r3, r1
 8012a24:	3308      	adds	r3, #8
 8012a26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d117      	bne.n	8012a5e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	6819      	ldr	r1, [r3, #0]
 8012a32:	7dfa      	ldrb	r2, [r7, #23]
 8012a34:	481f      	ldr	r0, [pc, #124]	; (8012ab4 <etharp_output+0x200>)
 8012a36:	4613      	mov	r3, r2
 8012a38:	005b      	lsls	r3, r3, #1
 8012a3a:	4413      	add	r3, r2
 8012a3c:	00db      	lsls	r3, r3, #3
 8012a3e:	4403      	add	r3, r0
 8012a40:	3304      	adds	r3, #4
 8012a42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012a44:	4299      	cmp	r1, r3
 8012a46:	d10a      	bne.n	8012a5e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012a48:	4a19      	ldr	r2, [pc, #100]	; (8012ab0 <etharp_output+0x1fc>)
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012a4e:	7dfb      	ldrb	r3, [r7, #23]
 8012a50:	461a      	mov	r2, r3
 8012a52:	68b9      	ldr	r1, [r7, #8]
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f7ff fe93 	bl	8012780 <etharp_output_to_arp_index>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	e018      	b.n	8012a90 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012a5e:	7dfb      	ldrb	r3, [r7, #23]
 8012a60:	3301      	adds	r3, #1
 8012a62:	75fb      	strb	r3, [r7, #23]
 8012a64:	7dfb      	ldrb	r3, [r7, #23]
 8012a66:	2b09      	cmp	r3, #9
 8012a68:	d9ca      	bls.n	8012a00 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012a6a:	68ba      	ldr	r2, [r7, #8]
 8012a6c:	69b9      	ldr	r1, [r7, #24]
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f000 f822 	bl	8012ab8 <etharp_query>
 8012a74:	4603      	mov	r3, r0
 8012a76:	e00b      	b.n	8012a90 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	68b9      	ldr	r1, [r7, #8]
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f001 fd3b 	bl	8014504 <ethernet_output>
 8012a8e:	4603      	mov	r3, r0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3720      	adds	r7, #32
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	080183fc 	.word	0x080183fc
 8012a9c:	0801854c 	.word	0x0801854c
 8012aa0:	08018474 	.word	0x08018474
 8012aa4:	0801859c 	.word	0x0801859c
 8012aa8:	0801853c 	.word	0x0801853c
 8012aac:	08018c34 	.word	0x08018c34
 8012ab0:	20011950 	.word	0x20011950
 8012ab4:	20011860 	.word	0x20011860

08012ab8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b08c      	sub	sp, #48	; 0x30
 8012abc:	af02      	add	r7, sp, #8
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	3326      	adds	r3, #38	; 0x26
 8012ac8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012aca:	23ff      	movs	r3, #255	; 0xff
 8012acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	68f9      	ldr	r1, [r7, #12]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 fe04 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d10c      	bne.n	8012b00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012aee:	2be0      	cmp	r3, #224	; 0xe0
 8012af0:	d006      	beq.n	8012b00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d003      	beq.n	8012b00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d102      	bne.n	8012b06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b00:	f06f 030f 	mvn.w	r3, #15
 8012b04:	e101      	b.n	8012d0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	2101      	movs	r1, #1
 8012b0a:	68b8      	ldr	r0, [r7, #8]
 8012b0c:	f7ff fb60 	bl	80121d0 <etharp_find_entry>
 8012b10:	4603      	mov	r3, r0
 8012b12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012b14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	da02      	bge.n	8012b22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012b1c:	8a7b      	ldrh	r3, [r7, #18]
 8012b1e:	b25b      	sxtb	r3, r3
 8012b20:	e0f3      	b.n	8012d0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012b22:	8a7b      	ldrh	r3, [r7, #18]
 8012b24:	2b7e      	cmp	r3, #126	; 0x7e
 8012b26:	d906      	bls.n	8012b36 <etharp_query+0x7e>
 8012b28:	4b7a      	ldr	r3, [pc, #488]	; (8012d14 <etharp_query+0x25c>)
 8012b2a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012b2e:	497a      	ldr	r1, [pc, #488]	; (8012d18 <etharp_query+0x260>)
 8012b30:	487a      	ldr	r0, [pc, #488]	; (8012d1c <etharp_query+0x264>)
 8012b32:	f002 f88d 	bl	8014c50 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012b36:	8a7b      	ldrh	r3, [r7, #18]
 8012b38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012b3a:	7c7a      	ldrb	r2, [r7, #17]
 8012b3c:	4978      	ldr	r1, [pc, #480]	; (8012d20 <etharp_query+0x268>)
 8012b3e:	4613      	mov	r3, r2
 8012b40:	005b      	lsls	r3, r3, #1
 8012b42:	4413      	add	r3, r2
 8012b44:	00db      	lsls	r3, r3, #3
 8012b46:	440b      	add	r3, r1
 8012b48:	3314      	adds	r3, #20
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d115      	bne.n	8012b7c <etharp_query+0xc4>
    is_new_entry = 1;
 8012b50:	2301      	movs	r3, #1
 8012b52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012b54:	7c7a      	ldrb	r2, [r7, #17]
 8012b56:	4972      	ldr	r1, [pc, #456]	; (8012d20 <etharp_query+0x268>)
 8012b58:	4613      	mov	r3, r2
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	4413      	add	r3, r2
 8012b5e:	00db      	lsls	r3, r3, #3
 8012b60:	440b      	add	r3, r1
 8012b62:	3314      	adds	r3, #20
 8012b64:	2201      	movs	r2, #1
 8012b66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012b68:	7c7a      	ldrb	r2, [r7, #17]
 8012b6a:	496d      	ldr	r1, [pc, #436]	; (8012d20 <etharp_query+0x268>)
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	005b      	lsls	r3, r3, #1
 8012b70:	4413      	add	r3, r2
 8012b72:	00db      	lsls	r3, r3, #3
 8012b74:	440b      	add	r3, r1
 8012b76:	3308      	adds	r3, #8
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012b7c:	7c7a      	ldrb	r2, [r7, #17]
 8012b7e:	4968      	ldr	r1, [pc, #416]	; (8012d20 <etharp_query+0x268>)
 8012b80:	4613      	mov	r3, r2
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	4413      	add	r3, r2
 8012b86:	00db      	lsls	r3, r3, #3
 8012b88:	440b      	add	r3, r1
 8012b8a:	3314      	adds	r3, #20
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d011      	beq.n	8012bb6 <etharp_query+0xfe>
 8012b92:	7c7a      	ldrb	r2, [r7, #17]
 8012b94:	4962      	ldr	r1, [pc, #392]	; (8012d20 <etharp_query+0x268>)
 8012b96:	4613      	mov	r3, r2
 8012b98:	005b      	lsls	r3, r3, #1
 8012b9a:	4413      	add	r3, r2
 8012b9c:	00db      	lsls	r3, r3, #3
 8012b9e:	440b      	add	r3, r1
 8012ba0:	3314      	adds	r3, #20
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d806      	bhi.n	8012bb6 <etharp_query+0xfe>
 8012ba8:	4b5a      	ldr	r3, [pc, #360]	; (8012d14 <etharp_query+0x25c>)
 8012baa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012bae:	495d      	ldr	r1, [pc, #372]	; (8012d24 <etharp_query+0x26c>)
 8012bb0:	485a      	ldr	r0, [pc, #360]	; (8012d1c <etharp_query+0x264>)
 8012bb2:	f002 f84d 	bl	8014c50 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d102      	bne.n	8012bc2 <etharp_query+0x10a>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d10c      	bne.n	8012bdc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012bc2:	68b9      	ldr	r1, [r7, #8]
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	f000 f963 	bl	8012e90 <etharp_request>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d102      	bne.n	8012bdc <etharp_query+0x124>
      return result;
 8012bd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012bda:	e096      	b.n	8012d0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d106      	bne.n	8012bf0 <etharp_query+0x138>
 8012be2:	4b4c      	ldr	r3, [pc, #304]	; (8012d14 <etharp_query+0x25c>)
 8012be4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012be8:	494f      	ldr	r1, [pc, #316]	; (8012d28 <etharp_query+0x270>)
 8012bea:	484c      	ldr	r0, [pc, #304]	; (8012d1c <etharp_query+0x264>)
 8012bec:	f002 f830 	bl	8014c50 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012bf0:	7c7a      	ldrb	r2, [r7, #17]
 8012bf2:	494b      	ldr	r1, [pc, #300]	; (8012d20 <etharp_query+0x268>)
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	4413      	add	r3, r2
 8012bfa:	00db      	lsls	r3, r3, #3
 8012bfc:	440b      	add	r3, r1
 8012bfe:	3314      	adds	r3, #20
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	2b01      	cmp	r3, #1
 8012c04:	d917      	bls.n	8012c36 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012c06:	4a49      	ldr	r2, [pc, #292]	; (8012d2c <etharp_query+0x274>)
 8012c08:	7c7b      	ldrb	r3, [r7, #17]
 8012c0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012c0c:	7c7a      	ldrb	r2, [r7, #17]
 8012c0e:	4613      	mov	r3, r2
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	4413      	add	r3, r2
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	3308      	adds	r3, #8
 8012c18:	4a41      	ldr	r2, [pc, #260]	; (8012d20 <etharp_query+0x268>)
 8012c1a:	4413      	add	r3, r2
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c22:	9200      	str	r2, [sp, #0]
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	6879      	ldr	r1, [r7, #4]
 8012c28:	68f8      	ldr	r0, [r7, #12]
 8012c2a:	f001 fc6b 	bl	8014504 <ethernet_output>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c34:	e067      	b.n	8012d06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012c36:	7c7a      	ldrb	r2, [r7, #17]
 8012c38:	4939      	ldr	r1, [pc, #228]	; (8012d20 <etharp_query+0x268>)
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	005b      	lsls	r3, r3, #1
 8012c3e:	4413      	add	r3, r2
 8012c40:	00db      	lsls	r3, r3, #3
 8012c42:	440b      	add	r3, r1
 8012c44:	3314      	adds	r3, #20
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d15c      	bne.n	8012d06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012c54:	e01c      	b.n	8012c90 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	895a      	ldrh	r2, [r3, #10]
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	891b      	ldrh	r3, [r3, #8]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d10a      	bne.n	8012c78 <etharp_query+0x1c0>
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d006      	beq.n	8012c78 <etharp_query+0x1c0>
 8012c6a:	4b2a      	ldr	r3, [pc, #168]	; (8012d14 <etharp_query+0x25c>)
 8012c6c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012c70:	492f      	ldr	r1, [pc, #188]	; (8012d30 <etharp_query+0x278>)
 8012c72:	482a      	ldr	r0, [pc, #168]	; (8012d1c <etharp_query+0x264>)
 8012c74:	f001 ffec 	bl	8014c50 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	7b1b      	ldrb	r3, [r3, #12]
 8012c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d002      	beq.n	8012c8a <etharp_query+0x1d2>
        copy_needed = 1;
 8012c84:	2301      	movs	r3, #1
 8012c86:	61bb      	str	r3, [r7, #24]
        break;
 8012c88:	e005      	b.n	8012c96 <etharp_query+0x1de>
      }
      p = p->next;
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1df      	bne.n	8012c56 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d007      	beq.n	8012cac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012ca2:	200e      	movs	r0, #14
 8012ca4:	f7f8 ff88 	bl	800bbb8 <pbuf_clone>
 8012ca8:	61f8      	str	r0, [r7, #28]
 8012caa:	e004      	b.n	8012cb6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012cb0:	69f8      	ldr	r0, [r7, #28]
 8012cb2:	f7f8 fdbf 	bl	800b834 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d021      	beq.n	8012d00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012cbc:	7c7a      	ldrb	r2, [r7, #17]
 8012cbe:	4918      	ldr	r1, [pc, #96]	; (8012d20 <etharp_query+0x268>)
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	4413      	add	r3, r2
 8012cc6:	00db      	lsls	r3, r3, #3
 8012cc8:	440b      	add	r3, r1
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00a      	beq.n	8012ce6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012cd0:	7c7a      	ldrb	r2, [r7, #17]
 8012cd2:	4913      	ldr	r1, [pc, #76]	; (8012d20 <etharp_query+0x268>)
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	005b      	lsls	r3, r3, #1
 8012cd8:	4413      	add	r3, r2
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	440b      	add	r3, r1
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f8 fd01 	bl	800b6e8 <pbuf_free>
      }
      arp_table[i].q = p;
 8012ce6:	7c7a      	ldrb	r2, [r7, #17]
 8012ce8:	490d      	ldr	r1, [pc, #52]	; (8012d20 <etharp_query+0x268>)
 8012cea:	4613      	mov	r3, r2
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	4413      	add	r3, r2
 8012cf0:	00db      	lsls	r3, r3, #3
 8012cf2:	440b      	add	r3, r1
 8012cf4:	69fa      	ldr	r2, [r7, #28]
 8012cf6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cfe:	e002      	b.n	8012d06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012d00:	23ff      	movs	r3, #255	; 0xff
 8012d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3728      	adds	r7, #40	; 0x28
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	080183fc 	.word	0x080183fc
 8012d18:	080185a8 	.word	0x080185a8
 8012d1c:	08018474 	.word	0x08018474
 8012d20:	20011860 	.word	0x20011860
 8012d24:	080185b8 	.word	0x080185b8
 8012d28:	0801859c 	.word	0x0801859c
 8012d2c:	20011950 	.word	0x20011950
 8012d30:	080185e0 	.word	0x080185e0

08012d34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b08a      	sub	sp, #40	; 0x28
 8012d38:	af02      	add	r7, sp, #8
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	607a      	str	r2, [r7, #4]
 8012d40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012d42:	2300      	movs	r3, #0
 8012d44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d106      	bne.n	8012d5a <etharp_raw+0x26>
 8012d4c:	4b3a      	ldr	r3, [pc, #232]	; (8012e38 <etharp_raw+0x104>)
 8012d4e:	f240 4257 	movw	r2, #1111	; 0x457
 8012d52:	493a      	ldr	r1, [pc, #232]	; (8012e3c <etharp_raw+0x108>)
 8012d54:	483a      	ldr	r0, [pc, #232]	; (8012e40 <etharp_raw+0x10c>)
 8012d56:	f001 ff7b 	bl	8014c50 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012d5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d5e:	211c      	movs	r1, #28
 8012d60:	200e      	movs	r0, #14
 8012d62:	f7f8 f9dd 	bl	800b120 <pbuf_alloc>
 8012d66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d102      	bne.n	8012d74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d72:	e05d      	b.n	8012e30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	895b      	ldrh	r3, [r3, #10]
 8012d78:	2b1b      	cmp	r3, #27
 8012d7a:	d806      	bhi.n	8012d8a <etharp_raw+0x56>
 8012d7c:	4b2e      	ldr	r3, [pc, #184]	; (8012e38 <etharp_raw+0x104>)
 8012d7e:	f240 4262 	movw	r2, #1122	; 0x462
 8012d82:	4930      	ldr	r1, [pc, #192]	; (8012e44 <etharp_raw+0x110>)
 8012d84:	482e      	ldr	r0, [pc, #184]	; (8012e40 <etharp_raw+0x10c>)
 8012d86:	f001 ff63 	bl	8014c50 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012d90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7f7 f8bc 	bl	8009f10 <lwip_htons>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012da6:	2b06      	cmp	r3, #6
 8012da8:	d006      	beq.n	8012db8 <etharp_raw+0x84>
 8012daa:	4b23      	ldr	r3, [pc, #140]	; (8012e38 <etharp_raw+0x104>)
 8012dac:	f240 4269 	movw	r2, #1129	; 0x469
 8012db0:	4925      	ldr	r1, [pc, #148]	; (8012e48 <etharp_raw+0x114>)
 8012db2:	4823      	ldr	r0, [pc, #140]	; (8012e40 <etharp_raw+0x10c>)
 8012db4:	f001 ff4c 	bl	8014c50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	3308      	adds	r3, #8
 8012dbc:	2206      	movs	r2, #6
 8012dbe:	6839      	ldr	r1, [r7, #0]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f001 fe9a 	bl	8014afa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	3312      	adds	r3, #18
 8012dca:	2206      	movs	r2, #6
 8012dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f001 fe93 	bl	8014afa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	330e      	adds	r3, #14
 8012dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dda:	6812      	ldr	r2, [r2, #0]
 8012ddc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	3318      	adds	r3, #24
 8012de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012de4:	6812      	ldr	r2, [r2, #0]
 8012de6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	2200      	movs	r2, #0
 8012dec:	701a      	strb	r2, [r3, #0]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f042 0201 	orr.w	r2, r2, #1
 8012df4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	f042 0208 	orr.w	r2, r2, #8
 8012dfe:	709a      	strb	r2, [r3, #2]
 8012e00:	2200      	movs	r2, #0
 8012e02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	2206      	movs	r2, #6
 8012e08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	2204      	movs	r2, #4
 8012e0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012e10:	f640 0306 	movw	r3, #2054	; 0x806
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	69b9      	ldr	r1, [r7, #24]
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f001 fb71 	bl	8014504 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012e22:	69b8      	ldr	r0, [r7, #24]
 8012e24:	f7f8 fc60 	bl	800b6e8 <pbuf_free>
  p = NULL;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012e2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3720      	adds	r7, #32
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	080183fc 	.word	0x080183fc
 8012e3c:	0801854c 	.word	0x0801854c
 8012e40:	08018474 	.word	0x08018474
 8012e44:	080185fc 	.word	0x080185fc
 8012e48:	08018630 	.word	0x08018630

08012e4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b088      	sub	sp, #32
 8012e50:	af04      	add	r7, sp, #16
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012e68:	2201      	movs	r2, #1
 8012e6a:	9203      	str	r2, [sp, #12]
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	9202      	str	r2, [sp, #8]
 8012e70:	4a06      	ldr	r2, [pc, #24]	; (8012e8c <etharp_request_dst+0x40>)
 8012e72:	9201      	str	r2, [sp, #4]
 8012e74:	9300      	str	r3, [sp, #0]
 8012e76:	4603      	mov	r3, r0
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f7ff ff5a 	bl	8012d34 <etharp_raw>
 8012e80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	08018c3c 	.word	0x08018c3c

08012e90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012e9a:	4a05      	ldr	r2, [pc, #20]	; (8012eb0 <etharp_request+0x20>)
 8012e9c:	6839      	ldr	r1, [r7, #0]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7ff ffd4 	bl	8012e4c <etharp_request_dst>
 8012ea4:	4603      	mov	r3, r0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3708      	adds	r7, #8
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	08018c34 	.word	0x08018c34

08012eb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08e      	sub	sp, #56	; 0x38
 8012eb8:	af04      	add	r7, sp, #16
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012ebe:	4b79      	ldr	r3, [pc, #484]	; (80130a4 <icmp_input+0x1f0>)
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f003 030f 	and.w	r3, r3, #15
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ed6:	2b13      	cmp	r3, #19
 8012ed8:	f240 80cd 	bls.w	8013076 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	895b      	ldrh	r3, [r3, #10]
 8012ee0:	2b03      	cmp	r3, #3
 8012ee2:	f240 80ca 	bls.w	801307a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012ef0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 80b7 	beq.w	8013068 <icmp_input+0x1b4>
 8012efa:	2b08      	cmp	r3, #8
 8012efc:	f040 80b7 	bne.w	801306e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012f00:	4b69      	ldr	r3, [pc, #420]	; (80130a8 <icmp_input+0x1f4>)
 8012f02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f04:	4b67      	ldr	r3, [pc, #412]	; (80130a4 <icmp_input+0x1f0>)
 8012f06:	695b      	ldr	r3, [r3, #20]
 8012f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f0c:	2be0      	cmp	r3, #224	; 0xe0
 8012f0e:	f000 80bb 	beq.w	8013088 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012f12:	4b64      	ldr	r3, [pc, #400]	; (80130a4 <icmp_input+0x1f0>)
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	4a63      	ldr	r2, [pc, #396]	; (80130a4 <icmp_input+0x1f0>)
 8012f18:	6812      	ldr	r2, [r2, #0]
 8012f1a:	4611      	mov	r1, r2
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f000 fbe3 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f040 80b1 	bne.w	801308c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	891b      	ldrh	r3, [r3, #8]
 8012f2e:	2b07      	cmp	r3, #7
 8012f30:	f240 80a5 	bls.w	801307e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f36:	330e      	adds	r3, #14
 8012f38:	4619      	mov	r1, r3
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7f8 fb3e 	bl	800b5bc <pbuf_add_header>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d04b      	beq.n	8012fde <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	891a      	ldrh	r2, [r3, #8]
 8012f4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f4c:	4413      	add	r3, r2
 8012f4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	891b      	ldrh	r3, [r3, #8]
 8012f54:	8b7a      	ldrh	r2, [r7, #26]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	f0c0 809a 	bcc.w	8013090 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012f5c:	8b7b      	ldrh	r3, [r7, #26]
 8012f5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f62:	4619      	mov	r1, r3
 8012f64:	200e      	movs	r0, #14
 8012f66:	f7f8 f8db 	bl	800b120 <pbuf_alloc>
 8012f6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	f000 8090 	beq.w	8013094 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	895b      	ldrh	r3, [r3, #10]
 8012f78:	461a      	mov	r2, r3
 8012f7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f7c:	3308      	adds	r3, #8
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d203      	bcs.n	8012f8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012f82:	6978      	ldr	r0, [r7, #20]
 8012f84:	f7f8 fbb0 	bl	800b6e8 <pbuf_free>
          goto icmperr;
 8012f88:	e085      	b.n	8013096 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f92:	4618      	mov	r0, r3
 8012f94:	f001 fdb1 	bl	8014afa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	6978      	ldr	r0, [r7, #20]
 8012f9e:	f7f8 fb1d 	bl	800b5dc <pbuf_remove_header>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d009      	beq.n	8012fbc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012fa8:	4b40      	ldr	r3, [pc, #256]	; (80130ac <icmp_input+0x1f8>)
 8012faa:	22b6      	movs	r2, #182	; 0xb6
 8012fac:	4940      	ldr	r1, [pc, #256]	; (80130b0 <icmp_input+0x1fc>)
 8012fae:	4841      	ldr	r0, [pc, #260]	; (80130b4 <icmp_input+0x200>)
 8012fb0:	f001 fe4e 	bl	8014c50 <iprintf>
          pbuf_free(r);
 8012fb4:	6978      	ldr	r0, [r7, #20]
 8012fb6:	f7f8 fb97 	bl	800b6e8 <pbuf_free>
          goto icmperr;
 8012fba:	e06c      	b.n	8013096 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012fbc:	6879      	ldr	r1, [r7, #4]
 8012fbe:	6978      	ldr	r0, [r7, #20]
 8012fc0:	f7f8 fcb6 	bl	800b930 <pbuf_copy>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d003      	beq.n	8012fd2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012fca:	6978      	ldr	r0, [r7, #20]
 8012fcc:	f7f8 fb8c 	bl	800b6e8 <pbuf_free>
          goto icmperr;
 8012fd0:	e061      	b.n	8013096 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7f8 fb88 	bl	800b6e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	607b      	str	r3, [r7, #4]
 8012fdc:	e00f      	b.n	8012ffe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fe0:	330e      	adds	r3, #14
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7f8 faf9 	bl	800b5dc <pbuf_remove_header>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d006      	beq.n	8012ffe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012ff0:	4b2e      	ldr	r3, [pc, #184]	; (80130ac <icmp_input+0x1f8>)
 8012ff2:	22c7      	movs	r2, #199	; 0xc7
 8012ff4:	4930      	ldr	r1, [pc, #192]	; (80130b8 <icmp_input+0x204>)
 8012ff6:	482f      	ldr	r0, [pc, #188]	; (80130b4 <icmp_input+0x200>)
 8012ff8:	f001 fe2a 	bl	8014c50 <iprintf>
          goto icmperr;
 8012ffc:	e04b      	b.n	8013096 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013006:	4619      	mov	r1, r3
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f7f8 fad7 	bl	800b5bc <pbuf_add_header>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d12b      	bne.n	801306c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801301a:	69fb      	ldr	r3, [r7, #28]
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013022:	4b20      	ldr	r3, [pc, #128]	; (80130a4 <icmp_input+0x1f0>)
 8013024:	691a      	ldr	r2, [r3, #16]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	2200      	movs	r2, #0
 801302e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	2200      	movs	r2, #0
 8013034:	709a      	strb	r2, [r3, #2]
 8013036:	2200      	movs	r2, #0
 8013038:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	22ff      	movs	r2, #255	; 0xff
 801303e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2200      	movs	r2, #0
 8013044:	729a      	strb	r2, [r3, #10]
 8013046:	2200      	movs	r2, #0
 8013048:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	9302      	str	r3, [sp, #8]
 801304e:	2301      	movs	r3, #1
 8013050:	9301      	str	r3, [sp, #4]
 8013052:	2300      	movs	r3, #0
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	23ff      	movs	r3, #255	; 0xff
 8013058:	2200      	movs	r2, #0
 801305a:	69f9      	ldr	r1, [r7, #28]
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 fa6b 	bl	8013538 <ip4_output_if>
 8013062:	4603      	mov	r3, r0
 8013064:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013066:	e001      	b.n	801306c <icmp_input+0x1b8>
      break;
 8013068:	bf00      	nop
 801306a:	e000      	b.n	801306e <icmp_input+0x1ba>
      break;
 801306c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f7f8 fb3a 	bl	800b6e8 <pbuf_free>
  return;
 8013074:	e013      	b.n	801309e <icmp_input+0x1ea>
    goto lenerr;
 8013076:	bf00      	nop
 8013078:	e002      	b.n	8013080 <icmp_input+0x1cc>
    goto lenerr;
 801307a:	bf00      	nop
 801307c:	e000      	b.n	8013080 <icmp_input+0x1cc>
        goto lenerr;
 801307e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f7f8 fb31 	bl	800b6e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013086:	e00a      	b.n	801309e <icmp_input+0x1ea>
        goto icmperr;
 8013088:	bf00      	nop
 801308a:	e004      	b.n	8013096 <icmp_input+0x1e2>
        goto icmperr;
 801308c:	bf00      	nop
 801308e:	e002      	b.n	8013096 <icmp_input+0x1e2>
          goto icmperr;
 8013090:	bf00      	nop
 8013092:	e000      	b.n	8013096 <icmp_input+0x1e2>
          goto icmperr;
 8013094:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f7f8 fb26 	bl	800b6e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801309c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801309e:	3728      	adds	r7, #40	; 0x28
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	20009778 	.word	0x20009778
 80130a8:	2000978c 	.word	0x2000978c
 80130ac:	08018674 	.word	0x08018674
 80130b0:	080186ac 	.word	0x080186ac
 80130b4:	080186e4 	.word	0x080186e4
 80130b8:	0801870c 	.word	0x0801870c

080130bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	460b      	mov	r3, r1
 80130c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80130c8:	78fb      	ldrb	r3, [r7, #3]
 80130ca:	461a      	mov	r2, r3
 80130cc:	2103      	movs	r1, #3
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 f814 	bl	80130fc <icmp_send_response>
}
 80130d4:	bf00      	nop
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	460b      	mov	r3, r1
 80130e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80130e8:	78fb      	ldrb	r3, [r7, #3]
 80130ea:	461a      	mov	r2, r3
 80130ec:	210b      	movs	r1, #11
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f000 f804 	bl	80130fc <icmp_send_response>
}
 80130f4:	bf00      	nop
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b08c      	sub	sp, #48	; 0x30
 8013100:	af04      	add	r7, sp, #16
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	460b      	mov	r3, r1
 8013106:	70fb      	strb	r3, [r7, #3]
 8013108:	4613      	mov	r3, r2
 801310a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801310c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013110:	2124      	movs	r1, #36	; 0x24
 8013112:	2022      	movs	r0, #34	; 0x22
 8013114:	f7f8 f804 	bl	800b120 <pbuf_alloc>
 8013118:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d04c      	beq.n	80131ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	895b      	ldrh	r3, [r3, #10]
 8013124:	2b23      	cmp	r3, #35	; 0x23
 8013126:	d806      	bhi.n	8013136 <icmp_send_response+0x3a>
 8013128:	4b26      	ldr	r3, [pc, #152]	; (80131c4 <icmp_send_response+0xc8>)
 801312a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801312e:	4926      	ldr	r1, [pc, #152]	; (80131c8 <icmp_send_response+0xcc>)
 8013130:	4826      	ldr	r0, [pc, #152]	; (80131cc <icmp_send_response+0xd0>)
 8013132:	f001 fd8d 	bl	8014c50 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	685b      	ldr	r3, [r3, #4]
 801313a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	78fa      	ldrb	r2, [r7, #3]
 8013146:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	78ba      	ldrb	r2, [r7, #2]
 801314c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2200      	movs	r2, #0
 8013152:	711a      	strb	r2, [r3, #4]
 8013154:	2200      	movs	r2, #0
 8013156:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	2200      	movs	r2, #0
 801315c:	719a      	strb	r2, [r3, #6]
 801315e:	2200      	movs	r2, #0
 8013160:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	f103 0008 	add.w	r0, r3, #8
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	221c      	movs	r2, #28
 8013170:	4619      	mov	r1, r3
 8013172:	f001 fcc2 	bl	8014afa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801317c:	f107 030c 	add.w	r3, r7, #12
 8013180:	4618      	mov	r0, r3
 8013182:	f000 f825 	bl	80131d0 <ip4_route>
 8013186:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d011      	beq.n	80131b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	2200      	movs	r2, #0
 8013192:	709a      	strb	r2, [r3, #2]
 8013194:	2200      	movs	r2, #0
 8013196:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013198:	f107 020c 	add.w	r2, r7, #12
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	9302      	str	r3, [sp, #8]
 80131a0:	2301      	movs	r3, #1
 80131a2:	9301      	str	r3, [sp, #4]
 80131a4:	2300      	movs	r3, #0
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	23ff      	movs	r3, #255	; 0xff
 80131aa:	2100      	movs	r1, #0
 80131ac:	69f8      	ldr	r0, [r7, #28]
 80131ae:	f000 f9c3 	bl	8013538 <ip4_output_if>
  }
  pbuf_free(q);
 80131b2:	69f8      	ldr	r0, [r7, #28]
 80131b4:	f7f8 fa98 	bl	800b6e8 <pbuf_free>
 80131b8:	e000      	b.n	80131bc <icmp_send_response+0xc0>
    return;
 80131ba:	bf00      	nop
}
 80131bc:	3720      	adds	r7, #32
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	08018674 	.word	0x08018674
 80131c8:	08018740 	.word	0x08018740
 80131cc:	080186e4 	.word	0x080186e4

080131d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80131d8:	4b33      	ldr	r3, [pc, #204]	; (80132a8 <ip4_route+0xd8>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	60fb      	str	r3, [r7, #12]
 80131de:	e036      	b.n	801324e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131e6:	f003 0301 	and.w	r3, r3, #1
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d02b      	beq.n	8013248 <ip4_route+0x78>
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131f6:	089b      	lsrs	r3, r3, #2
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d022      	beq.n	8013248 <ip4_route+0x78>
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	3304      	adds	r3, #4
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d01d      	beq.n	8013248 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	3304      	adds	r3, #4
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	405a      	eors	r2, r3
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	3308      	adds	r3, #8
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	4013      	ands	r3, r2
 8013220:	2b00      	cmp	r3, #0
 8013222:	d101      	bne.n	8013228 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	e038      	b.n	801329a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801322e:	f003 0302 	and.w	r3, r3, #2
 8013232:	2b00      	cmp	r3, #0
 8013234:	d108      	bne.n	8013248 <ip4_route+0x78>
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	330c      	adds	r3, #12
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	429a      	cmp	r2, r3
 8013242:	d101      	bne.n	8013248 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	e028      	b.n	801329a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	60fb      	str	r3, [r7, #12]
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d1c5      	bne.n	80131e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013254:	4b15      	ldr	r3, [pc, #84]	; (80132ac <ip4_route+0xdc>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d01a      	beq.n	8013292 <ip4_route+0xc2>
 801325c:	4b13      	ldr	r3, [pc, #76]	; (80132ac <ip4_route+0xdc>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013264:	f003 0301 	and.w	r3, r3, #1
 8013268:	2b00      	cmp	r3, #0
 801326a:	d012      	beq.n	8013292 <ip4_route+0xc2>
 801326c:	4b0f      	ldr	r3, [pc, #60]	; (80132ac <ip4_route+0xdc>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013274:	f003 0304 	and.w	r3, r3, #4
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00a      	beq.n	8013292 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801327c:	4b0b      	ldr	r3, [pc, #44]	; (80132ac <ip4_route+0xdc>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	3304      	adds	r3, #4
 8013282:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013284:	2b00      	cmp	r3, #0
 8013286:	d004      	beq.n	8013292 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	b2db      	uxtb	r3, r3
 801328e:	2b7f      	cmp	r3, #127	; 0x7f
 8013290:	d101      	bne.n	8013296 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013292:	2300      	movs	r3, #0
 8013294:	e001      	b.n	801329a <ip4_route+0xca>
  }

  return netif_default;
 8013296:	4b05      	ldr	r3, [pc, #20]	; (80132ac <ip4_route+0xdc>)
 8013298:	681b      	ldr	r3, [r3, #0]
}
 801329a:	4618      	mov	r0, r3
 801329c:	3714      	adds	r7, #20
 801329e:	46bd      	mov	sp, r7
 80132a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a4:	4770      	bx	lr
 80132a6:	bf00      	nop
 80132a8:	200117f8 	.word	0x200117f8
 80132ac:	200117fc 	.word	0x200117fc

080132b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132be:	f003 0301 	and.w	r3, r3, #1
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d016      	beq.n	80132f6 <ip4_input_accept+0x46>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	3304      	adds	r3, #4
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d011      	beq.n	80132f6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80132d2:	4b0b      	ldr	r3, [pc, #44]	; (8013300 <ip4_input_accept+0x50>)
 80132d4:	695a      	ldr	r2, [r3, #20]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	3304      	adds	r3, #4
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d008      	beq.n	80132f2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80132e0:	4b07      	ldr	r3, [pc, #28]	; (8013300 <ip4_input_accept+0x50>)
 80132e2:	695b      	ldr	r3, [r3, #20]
 80132e4:	6879      	ldr	r1, [r7, #4]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 f9fe 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 80132ec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d001      	beq.n	80132f6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80132f2:	2301      	movs	r3, #1
 80132f4:	e000      	b.n	80132f8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	20009778 	.word	0x20009778

08013304 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	091b      	lsrs	r3, r3, #4
 801331a:	b2db      	uxtb	r3, r3
 801331c:	2b04      	cmp	r3, #4
 801331e:	d004      	beq.n	801332a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7f8 f9e1 	bl	800b6e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013326:	2300      	movs	r3, #0
 8013328:	e0fd      	b.n	8013526 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	f003 030f 	and.w	r3, r3, #15
 8013332:	b2db      	uxtb	r3, r3
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	b2db      	uxtb	r3, r3
 8013338:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	885b      	ldrh	r3, [r3, #2]
 801333e:	b29b      	uxth	r3, r3
 8013340:	4618      	mov	r0, r3
 8013342:	f7f6 fde5 	bl	8009f10 <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	891b      	ldrh	r3, [r3, #8]
 801334e:	89ba      	ldrh	r2, [r7, #12]
 8013350:	429a      	cmp	r2, r3
 8013352:	d204      	bcs.n	801335e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013354:	89bb      	ldrh	r3, [r7, #12]
 8013356:	4619      	mov	r1, r3
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7f8 f83f 	bl	800b3dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	895b      	ldrh	r3, [r3, #10]
 8013362:	89fa      	ldrh	r2, [r7, #14]
 8013364:	429a      	cmp	r2, r3
 8013366:	d807      	bhi.n	8013378 <ip4_input+0x74>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	891b      	ldrh	r3, [r3, #8]
 801336c:	89ba      	ldrh	r2, [r7, #12]
 801336e:	429a      	cmp	r2, r3
 8013370:	d802      	bhi.n	8013378 <ip4_input+0x74>
 8013372:	89fb      	ldrh	r3, [r7, #14]
 8013374:	2b13      	cmp	r3, #19
 8013376:	d804      	bhi.n	8013382 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f7f8 f9b5 	bl	800b6e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801337e:	2300      	movs	r3, #0
 8013380:	e0d1      	b.n	8013526 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	691b      	ldr	r3, [r3, #16]
 8013386:	4a6a      	ldr	r2, [pc, #424]	; (8013530 <ip4_input+0x22c>)
 8013388:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	4a68      	ldr	r2, [pc, #416]	; (8013530 <ip4_input+0x22c>)
 8013390:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013392:	4b67      	ldr	r3, [pc, #412]	; (8013530 <ip4_input+0x22c>)
 8013394:	695b      	ldr	r3, [r3, #20]
 8013396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801339a:	2be0      	cmp	r3, #224	; 0xe0
 801339c:	d112      	bne.n	80133c4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133a4:	f003 0301 	and.w	r3, r3, #1
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d007      	beq.n	80133be <ip4_input+0xba>
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	3304      	adds	r3, #4
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d002      	beq.n	80133be <ip4_input+0xba>
      netif = inp;
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	613b      	str	r3, [r7, #16]
 80133bc:	e02a      	b.n	8013414 <ip4_input+0x110>
    } else {
      netif = NULL;
 80133be:	2300      	movs	r3, #0
 80133c0:	613b      	str	r3, [r7, #16]
 80133c2:	e027      	b.n	8013414 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80133c4:	6838      	ldr	r0, [r7, #0]
 80133c6:	f7ff ff73 	bl	80132b0 <ip4_input_accept>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <ip4_input+0xd2>
      netif = inp;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	613b      	str	r3, [r7, #16]
 80133d4:	e01e      	b.n	8013414 <ip4_input+0x110>
    } else {
      netif = NULL;
 80133d6:	2300      	movs	r3, #0
 80133d8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80133da:	4b55      	ldr	r3, [pc, #340]	; (8013530 <ip4_input+0x22c>)
 80133dc:	695b      	ldr	r3, [r3, #20]
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	2b7f      	cmp	r3, #127	; 0x7f
 80133e2:	d017      	beq.n	8013414 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80133e4:	4b53      	ldr	r3, [pc, #332]	; (8013534 <ip4_input+0x230>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	613b      	str	r3, [r7, #16]
 80133ea:	e00e      	b.n	801340a <ip4_input+0x106>
          if (netif == inp) {
 80133ec:	693a      	ldr	r2, [r7, #16]
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d006      	beq.n	8013402 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80133f4:	6938      	ldr	r0, [r7, #16]
 80133f6:	f7ff ff5b 	bl	80132b0 <ip4_input_accept>
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d108      	bne.n	8013412 <ip4_input+0x10e>
 8013400:	e000      	b.n	8013404 <ip4_input+0x100>
            continue;
 8013402:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	613b      	str	r3, [r7, #16]
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d1ed      	bne.n	80133ec <ip4_input+0xe8>
 8013410:	e000      	b.n	8013414 <ip4_input+0x110>
            break;
 8013412:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013414:	4b46      	ldr	r3, [pc, #280]	; (8013530 <ip4_input+0x22c>)
 8013416:	691b      	ldr	r3, [r3, #16]
 8013418:	6839      	ldr	r1, [r7, #0]
 801341a:	4618      	mov	r0, r3
 801341c:	f000 f964 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d105      	bne.n	8013432 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013426:	4b42      	ldr	r3, [pc, #264]	; (8013530 <ip4_input+0x22c>)
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801342e:	2be0      	cmp	r3, #224	; 0xe0
 8013430:	d104      	bne.n	801343c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f7f8 f958 	bl	800b6e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013438:	2300      	movs	r3, #0
 801343a:	e074      	b.n	8013526 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d104      	bne.n	801344c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f7f8 f950 	bl	800b6e8 <pbuf_free>
    return ERR_OK;
 8013448:	2300      	movs	r3, #0
 801344a:	e06c      	b.n	8013526 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	88db      	ldrh	r3, [r3, #6]
 8013450:	b29b      	uxth	r3, r3
 8013452:	461a      	mov	r2, r3
 8013454:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013458:	4013      	ands	r3, r2
 801345a:	2b00      	cmp	r3, #0
 801345c:	d00b      	beq.n	8013476 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f000 fc88 	bl	8013d74 <ip4_reass>
 8013464:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d101      	bne.n	8013470 <ip4_input+0x16c>
      return ERR_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	e05a      	b.n	8013526 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	685b      	ldr	r3, [r3, #4]
 8013474:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013476:	4a2e      	ldr	r2, [pc, #184]	; (8013530 <ip4_input+0x22c>)
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801347c:	4a2c      	ldr	r2, [pc, #176]	; (8013530 <ip4_input+0x22c>)
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013482:	4a2b      	ldr	r2, [pc, #172]	; (8013530 <ip4_input+0x22c>)
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	f003 030f 	and.w	r3, r3, #15
 8013490:	b2db      	uxtb	r3, r3
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	b2db      	uxtb	r3, r3
 8013496:	b29a      	uxth	r2, r3
 8013498:	4b25      	ldr	r3, [pc, #148]	; (8013530 <ip4_input+0x22c>)
 801349a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801349c:	89fb      	ldrh	r3, [r7, #14]
 801349e:	4619      	mov	r1, r3
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f7f8 f89b 	bl	800b5dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	7a5b      	ldrb	r3, [r3, #9]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d006      	beq.n	80134bc <ip4_input+0x1b8>
 80134ae:	2b06      	cmp	r3, #6
 80134b0:	d109      	bne.n	80134c6 <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80134b2:	6839      	ldr	r1, [r7, #0]
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7fa fa1d 	bl	800d8f4 <tcp_input>
        break;
 80134ba:	e021      	b.n	8013500 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80134bc:	6839      	ldr	r1, [r7, #0]
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7ff fcf8 	bl	8012eb4 <icmp_input>
        break;
 80134c4:	e01c      	b.n	8013500 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80134c6:	4b1a      	ldr	r3, [pc, #104]	; (8013530 <ip4_input+0x22c>)
 80134c8:	695b      	ldr	r3, [r3, #20]
 80134ca:	6939      	ldr	r1, [r7, #16]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f000 f90b 	bl	80136e8 <ip4_addr_isbroadcast_u32>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d10f      	bne.n	80134f8 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80134d8:	4b15      	ldr	r3, [pc, #84]	; (8013530 <ip4_input+0x22c>)
 80134da:	695b      	ldr	r3, [r3, #20]
 80134dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80134e0:	2be0      	cmp	r3, #224	; 0xe0
 80134e2:	d009      	beq.n	80134f8 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80134e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80134e8:	4619      	mov	r1, r3
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7f8 f8e9 	bl	800b6c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80134f0:	2102      	movs	r1, #2
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7ff fde2 	bl	80130bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7f8 f8f5 	bl	800b6e8 <pbuf_free>
        break;
 80134fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013500:	4b0b      	ldr	r3, [pc, #44]	; (8013530 <ip4_input+0x22c>)
 8013502:	2200      	movs	r2, #0
 8013504:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013506:	4b0a      	ldr	r3, [pc, #40]	; (8013530 <ip4_input+0x22c>)
 8013508:	2200      	movs	r2, #0
 801350a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801350c:	4b08      	ldr	r3, [pc, #32]	; (8013530 <ip4_input+0x22c>)
 801350e:	2200      	movs	r2, #0
 8013510:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013512:	4b07      	ldr	r3, [pc, #28]	; (8013530 <ip4_input+0x22c>)
 8013514:	2200      	movs	r2, #0
 8013516:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013518:	4b05      	ldr	r3, [pc, #20]	; (8013530 <ip4_input+0x22c>)
 801351a:	2200      	movs	r2, #0
 801351c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801351e:	4b04      	ldr	r3, [pc, #16]	; (8013530 <ip4_input+0x22c>)
 8013520:	2200      	movs	r2, #0
 8013522:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013524:	2300      	movs	r3, #0
}
 8013526:	4618      	mov	r0, r3
 8013528:	3718      	adds	r7, #24
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
 801352e:	bf00      	nop
 8013530:	20009778 	.word	0x20009778
 8013534:	200117f8 	.word	0x200117f8

08013538 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b08a      	sub	sp, #40	; 0x28
 801353c:	af04      	add	r7, sp, #16
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	607a      	str	r2, [r7, #4]
 8013544:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d009      	beq.n	8013564 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d003      	beq.n	801355e <ip4_output_if+0x26>
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d102      	bne.n	8013564 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013560:	3304      	adds	r3, #4
 8013562:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013564:	78fa      	ldrb	r2, [r7, #3]
 8013566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013568:	9302      	str	r3, [sp, #8]
 801356a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801356e:	9301      	str	r3, [sp, #4]
 8013570:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	4613      	mov	r3, r2
 8013578:	687a      	ldr	r2, [r7, #4]
 801357a:	6979      	ldr	r1, [r7, #20]
 801357c:	68f8      	ldr	r0, [r7, #12]
 801357e:	f000 f805 	bl	801358c <ip4_output_if_src>
 8013582:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b088      	sub	sp, #32
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	7b9b      	ldrb	r3, [r3, #14]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d006      	beq.n	80135b0 <ip4_output_if_src+0x24>
 80135a2:	4b4b      	ldr	r3, [pc, #300]	; (80136d0 <ip4_output_if_src+0x144>)
 80135a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80135a8:	494a      	ldr	r1, [pc, #296]	; (80136d4 <ip4_output_if_src+0x148>)
 80135aa:	484b      	ldr	r0, [pc, #300]	; (80136d8 <ip4_output_if_src+0x14c>)
 80135ac:	f001 fb50 	bl	8014c50 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d060      	beq.n	8013678 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80135b6:	2314      	movs	r3, #20
 80135b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80135ba:	2114      	movs	r1, #20
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f7f7 fffd 	bl	800b5bc <pbuf_add_header>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d002      	beq.n	80135ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80135c8:	f06f 0301 	mvn.w	r3, #1
 80135cc:	e07c      	b.n	80136c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	895b      	ldrh	r3, [r3, #10]
 80135d8:	2b13      	cmp	r3, #19
 80135da:	d806      	bhi.n	80135ea <ip4_output_if_src+0x5e>
 80135dc:	4b3c      	ldr	r3, [pc, #240]	; (80136d0 <ip4_output_if_src+0x144>)
 80135de:	f44f 7262 	mov.w	r2, #904	; 0x388
 80135e2:	493e      	ldr	r1, [pc, #248]	; (80136dc <ip4_output_if_src+0x150>)
 80135e4:	483c      	ldr	r0, [pc, #240]	; (80136d8 <ip4_output_if_src+0x14c>)
 80135e6:	f001 fb33 	bl	8014c50 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	78fa      	ldrb	r2, [r7, #3]
 80135ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80135f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013600:	8b7b      	ldrh	r3, [r7, #26]
 8013602:	089b      	lsrs	r3, r3, #2
 8013604:	b29b      	uxth	r3, r3
 8013606:	b2db      	uxtb	r3, r3
 8013608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801360c:	b2da      	uxtb	r2, r3
 801360e:	69fb      	ldr	r3, [r7, #28]
 8013610:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013618:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	891b      	ldrh	r3, [r3, #8]
 801361e:	4618      	mov	r0, r3
 8013620:	f7f6 fc76 	bl	8009f10 <lwip_htons>
 8013624:	4603      	mov	r3, r0
 8013626:	461a      	mov	r2, r3
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	2200      	movs	r2, #0
 8013630:	719a      	strb	r2, [r3, #6]
 8013632:	2200      	movs	r2, #0
 8013634:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013636:	4b2a      	ldr	r3, [pc, #168]	; (80136e0 <ip4_output_if_src+0x154>)
 8013638:	881b      	ldrh	r3, [r3, #0]
 801363a:	4618      	mov	r0, r3
 801363c:	f7f6 fc68 	bl	8009f10 <lwip_htons>
 8013640:	4603      	mov	r3, r0
 8013642:	461a      	mov	r2, r3
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013648:	4b25      	ldr	r3, [pc, #148]	; (80136e0 <ip4_output_if_src+0x154>)
 801364a:	881b      	ldrh	r3, [r3, #0]
 801364c:	3301      	adds	r3, #1
 801364e:	b29a      	uxth	r2, r3
 8013650:	4b23      	ldr	r3, [pc, #140]	; (80136e0 <ip4_output_if_src+0x154>)
 8013652:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d104      	bne.n	8013664 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801365a:	4b22      	ldr	r3, [pc, #136]	; (80136e4 <ip4_output_if_src+0x158>)
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	60da      	str	r2, [r3, #12]
 8013662:	e003      	b.n	801366c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	2200      	movs	r2, #0
 8013670:	729a      	strb	r2, [r3, #10]
 8013672:	2200      	movs	r2, #0
 8013674:	72da      	strb	r2, [r3, #11]
 8013676:	e00f      	b.n	8013698 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	895b      	ldrh	r3, [r3, #10]
 801367c:	2b13      	cmp	r3, #19
 801367e:	d802      	bhi.n	8013686 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013680:	f06f 0301 	mvn.w	r3, #1
 8013684:	e020      	b.n	80136c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	691b      	ldr	r3, [r3, #16]
 8013690:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013692:	f107 0314 	add.w	r3, r7, #20
 8013696:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00c      	beq.n	80136ba <ip4_output_if_src+0x12e>
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	891a      	ldrh	r2, [r3, #8]
 80136a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d906      	bls.n	80136ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f000 fd53 	bl	801415c <ip4_frag>
 80136b6:	4603      	mov	r3, r0
 80136b8:	e006      	b.n	80136c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80136ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136bc:	695b      	ldr	r3, [r3, #20]
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	68f9      	ldr	r1, [r7, #12]
 80136c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136c4:	4798      	blx	r3
 80136c6:	4603      	mov	r3, r0
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3720      	adds	r7, #32
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	0801876c 	.word	0x0801876c
 80136d4:	080187a0 	.word	0x080187a0
 80136d8:	080187ac 	.word	0x080187ac
 80136dc:	080187d4 	.word	0x080187d4
 80136e0:	20011952 	.word	0x20011952
 80136e4:	08018c30 	.word	0x08018c30

080136e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80136e8:	b480      	push	{r7}
 80136ea:	b085      	sub	sp, #20
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136fc:	d002      	beq.n	8013704 <ip4_addr_isbroadcast_u32+0x1c>
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d101      	bne.n	8013708 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013704:	2301      	movs	r3, #1
 8013706:	e02a      	b.n	801375e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801370e:	f003 0302 	and.w	r3, r3, #2
 8013712:	2b00      	cmp	r3, #0
 8013714:	d101      	bne.n	801371a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013716:	2300      	movs	r3, #0
 8013718:	e021      	b.n	801375e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	3304      	adds	r3, #4
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	429a      	cmp	r2, r3
 8013724:	d101      	bne.n	801372a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013726:	2300      	movs	r3, #0
 8013728:	e019      	b.n	801375e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801372a:	68fa      	ldr	r2, [r7, #12]
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	3304      	adds	r3, #4
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	405a      	eors	r2, r3
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	3308      	adds	r3, #8
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	4013      	ands	r3, r2
 801373c:	2b00      	cmp	r3, #0
 801373e:	d10d      	bne.n	801375c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	3308      	adds	r3, #8
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	43da      	mvns	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	3308      	adds	r3, #8
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013754:	429a      	cmp	r2, r3
 8013756:	d101      	bne.n	801375c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013758:	2301      	movs	r3, #1
 801375a:	e000      	b.n	801375e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801375c:	2300      	movs	r3, #0
  }
}
 801375e:	4618      	mov	r0, r3
 8013760:	3714      	adds	r7, #20
 8013762:	46bd      	mov	sp, r7
 8013764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013768:	4770      	bx	lr
	...

0801376c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013772:	2300      	movs	r3, #0
 8013774:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013776:	4b12      	ldr	r3, [pc, #72]	; (80137c0 <ip_reass_tmr+0x54>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801377c:	e018      	b.n	80137b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	7fdb      	ldrb	r3, [r3, #31]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d00b      	beq.n	801379e <ip_reass_tmr+0x32>
      r->timer--;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	7fdb      	ldrb	r3, [r3, #31]
 801378a:	3b01      	subs	r3, #1
 801378c:	b2da      	uxtb	r2, r3
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	60fb      	str	r3, [r7, #12]
 801379c:	e008      	b.n	80137b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80137a8:	68b9      	ldr	r1, [r7, #8]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 f80a 	bl	80137c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d1e3      	bne.n	801377e <ip_reass_tmr+0x12>
    }
  }
}
 80137b6:	bf00      	nop
 80137b8:	bf00      	nop
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	20011954 	.word	0x20011954

080137c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b088      	sub	sp, #32
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80137ce:	2300      	movs	r3, #0
 80137d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d105      	bne.n	80137e6 <ip_reass_free_complete_datagram+0x22>
 80137da:	4b45      	ldr	r3, [pc, #276]	; (80138f0 <ip_reass_free_complete_datagram+0x12c>)
 80137dc:	22ab      	movs	r2, #171	; 0xab
 80137de:	4945      	ldr	r1, [pc, #276]	; (80138f4 <ip_reass_free_complete_datagram+0x130>)
 80137e0:	4845      	ldr	r0, [pc, #276]	; (80138f8 <ip_reass_free_complete_datagram+0x134>)
 80137e2:	f001 fa35 	bl	8014c50 <iprintf>
  if (prev != NULL) {
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d00a      	beq.n	8013802 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d005      	beq.n	8013802 <ip_reass_free_complete_datagram+0x3e>
 80137f6:	4b3e      	ldr	r3, [pc, #248]	; (80138f0 <ip_reass_free_complete_datagram+0x12c>)
 80137f8:	22ad      	movs	r2, #173	; 0xad
 80137fa:	4940      	ldr	r1, [pc, #256]	; (80138fc <ip_reass_free_complete_datagram+0x138>)
 80137fc:	483e      	ldr	r0, [pc, #248]	; (80138f8 <ip_reass_free_complete_datagram+0x134>)
 80137fe:	f001 fa27 	bl	8014c50 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	889b      	ldrh	r3, [r3, #4]
 801380e:	b29b      	uxth	r3, r3
 8013810:	2b00      	cmp	r3, #0
 8013812:	d12a      	bne.n	801386a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013822:	69bb      	ldr	r3, [r7, #24]
 8013824:	6858      	ldr	r0, [r3, #4]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	3308      	adds	r3, #8
 801382a:	2214      	movs	r2, #20
 801382c:	4619      	mov	r1, r3
 801382e:	f001 f964 	bl	8014afa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013832:	2101      	movs	r1, #1
 8013834:	69b8      	ldr	r0, [r7, #24]
 8013836:	f7ff fc51 	bl	80130dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801383a:	69b8      	ldr	r0, [r7, #24]
 801383c:	f7f7 ffe2 	bl	800b804 <pbuf_clen>
 8013840:	4603      	mov	r3, r0
 8013842:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013844:	8bfa      	ldrh	r2, [r7, #30]
 8013846:	8a7b      	ldrh	r3, [r7, #18]
 8013848:	4413      	add	r3, r2
 801384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801384e:	db05      	blt.n	801385c <ip_reass_free_complete_datagram+0x98>
 8013850:	4b27      	ldr	r3, [pc, #156]	; (80138f0 <ip_reass_free_complete_datagram+0x12c>)
 8013852:	22bc      	movs	r2, #188	; 0xbc
 8013854:	492a      	ldr	r1, [pc, #168]	; (8013900 <ip_reass_free_complete_datagram+0x13c>)
 8013856:	4828      	ldr	r0, [pc, #160]	; (80138f8 <ip_reass_free_complete_datagram+0x134>)
 8013858:	f001 f9fa 	bl	8014c50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801385c:	8bfa      	ldrh	r2, [r7, #30]
 801385e:	8a7b      	ldrh	r3, [r7, #18]
 8013860:	4413      	add	r3, r2
 8013862:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013864:	69b8      	ldr	r0, [r7, #24]
 8013866:	f7f7 ff3f 	bl	800b6e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013870:	e01f      	b.n	80138b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f7f7 ffbe 	bl	800b804 <pbuf_clen>
 8013888:	4603      	mov	r3, r0
 801388a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801388c:	8bfa      	ldrh	r2, [r7, #30]
 801388e:	8a7b      	ldrh	r3, [r7, #18]
 8013890:	4413      	add	r3, r2
 8013892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013896:	db05      	blt.n	80138a4 <ip_reass_free_complete_datagram+0xe0>
 8013898:	4b15      	ldr	r3, [pc, #84]	; (80138f0 <ip_reass_free_complete_datagram+0x12c>)
 801389a:	22cc      	movs	r2, #204	; 0xcc
 801389c:	4918      	ldr	r1, [pc, #96]	; (8013900 <ip_reass_free_complete_datagram+0x13c>)
 801389e:	4816      	ldr	r0, [pc, #88]	; (80138f8 <ip_reass_free_complete_datagram+0x134>)
 80138a0:	f001 f9d6 	bl	8014c50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80138a4:	8bfa      	ldrh	r2, [r7, #30]
 80138a6:	8a7b      	ldrh	r3, [r7, #18]
 80138a8:	4413      	add	r3, r2
 80138aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f7f7 ff1b 	bl	800b6e8 <pbuf_free>
  while (p != NULL) {
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d1dc      	bne.n	8013872 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80138b8:	6839      	ldr	r1, [r7, #0]
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 f8c2 	bl	8013a44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80138c0:	4b10      	ldr	r3, [pc, #64]	; (8013904 <ip_reass_free_complete_datagram+0x140>)
 80138c2:	881b      	ldrh	r3, [r3, #0]
 80138c4:	8bfa      	ldrh	r2, [r7, #30]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d905      	bls.n	80138d6 <ip_reass_free_complete_datagram+0x112>
 80138ca:	4b09      	ldr	r3, [pc, #36]	; (80138f0 <ip_reass_free_complete_datagram+0x12c>)
 80138cc:	22d2      	movs	r2, #210	; 0xd2
 80138ce:	490e      	ldr	r1, [pc, #56]	; (8013908 <ip_reass_free_complete_datagram+0x144>)
 80138d0:	4809      	ldr	r0, [pc, #36]	; (80138f8 <ip_reass_free_complete_datagram+0x134>)
 80138d2:	f001 f9bd 	bl	8014c50 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80138d6:	4b0b      	ldr	r3, [pc, #44]	; (8013904 <ip_reass_free_complete_datagram+0x140>)
 80138d8:	881a      	ldrh	r2, [r3, #0]
 80138da:	8bfb      	ldrh	r3, [r7, #30]
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	b29a      	uxth	r2, r3
 80138e0:	4b08      	ldr	r3, [pc, #32]	; (8013904 <ip_reass_free_complete_datagram+0x140>)
 80138e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80138e4:	8bfb      	ldrh	r3, [r7, #30]
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3720      	adds	r7, #32
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}
 80138ee:	bf00      	nop
 80138f0:	08018804 	.word	0x08018804
 80138f4:	08018840 	.word	0x08018840
 80138f8:	0801884c 	.word	0x0801884c
 80138fc:	08018874 	.word	0x08018874
 8013900:	08018888 	.word	0x08018888
 8013904:	20011958 	.word	0x20011958
 8013908:	080188a8 	.word	0x080188a8

0801390c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b08a      	sub	sp, #40	; 0x28
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013916:	2300      	movs	r3, #0
 8013918:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801391a:	2300      	movs	r3, #0
 801391c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801391e:	2300      	movs	r3, #0
 8013920:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013922:	2300      	movs	r3, #0
 8013924:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013926:	2300      	movs	r3, #0
 8013928:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801392a:	4b28      	ldr	r3, [pc, #160]	; (80139cc <ip_reass_remove_oldest_datagram+0xc0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013930:	e030      	b.n	8013994 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013934:	695a      	ldr	r2, [r3, #20]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	429a      	cmp	r2, r3
 801393c:	d10c      	bne.n	8013958 <ip_reass_remove_oldest_datagram+0x4c>
 801393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013940:	699a      	ldr	r2, [r3, #24]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	691b      	ldr	r3, [r3, #16]
 8013946:	429a      	cmp	r2, r3
 8013948:	d106      	bne.n	8013958 <ip_reass_remove_oldest_datagram+0x4c>
 801394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394c:	899a      	ldrh	r2, [r3, #12]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	889b      	ldrh	r3, [r3, #4]
 8013952:	b29b      	uxth	r3, r3
 8013954:	429a      	cmp	r2, r3
 8013956:	d014      	beq.n	8013982 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	3301      	adds	r3, #1
 801395c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801395e:	6a3b      	ldr	r3, [r7, #32]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d104      	bne.n	801396e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013966:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	61bb      	str	r3, [r7, #24]
 801396c:	e009      	b.n	8013982 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013970:	7fda      	ldrb	r2, [r3, #31]
 8013972:	6a3b      	ldr	r3, [r7, #32]
 8013974:	7fdb      	ldrb	r3, [r3, #31]
 8013976:	429a      	cmp	r2, r3
 8013978:	d803      	bhi.n	8013982 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801397e:	69fb      	ldr	r3, [r7, #28]
 8013980:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d001      	beq.n	801398e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1cb      	bne.n	8013932 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801399a:	6a3b      	ldr	r3, [r7, #32]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d008      	beq.n	80139b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80139a0:	69b9      	ldr	r1, [r7, #24]
 80139a2:	6a38      	ldr	r0, [r7, #32]
 80139a4:	f7ff ff0e 	bl	80137c4 <ip_reass_free_complete_datagram>
 80139a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80139aa:	697a      	ldr	r2, [r7, #20]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	4413      	add	r3, r2
 80139b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	da02      	bge.n	80139c0 <ip_reass_remove_oldest_datagram+0xb4>
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	2b01      	cmp	r3, #1
 80139be:	dcac      	bgt.n	801391a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80139c0:	697b      	ldr	r3, [r7, #20]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3728      	adds	r7, #40	; 0x28
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	20011954 	.word	0x20011954

080139d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80139da:	2003      	movs	r0, #3
 80139dc:	f7f6 ff6e 	bl	800a8bc <memp_malloc>
 80139e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d110      	bne.n	8013a0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80139e8:	6839      	ldr	r1, [r7, #0]
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f7ff ff8e 	bl	801390c <ip_reass_remove_oldest_datagram>
 80139f0:	4602      	mov	r2, r0
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	4293      	cmp	r3, r2
 80139f6:	dc03      	bgt.n	8013a00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80139f8:	2003      	movs	r0, #3
 80139fa:	f7f6 ff5f 	bl	800a8bc <memp_malloc>
 80139fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d101      	bne.n	8013a0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013a06:	2300      	movs	r3, #0
 8013a08:	e016      	b.n	8013a38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013a0a:	2220      	movs	r2, #32
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f001 f881 	bl	8014b16 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	220f      	movs	r2, #15
 8013a18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013a1a:	4b09      	ldr	r3, [pc, #36]	; (8013a40 <ip_reass_enqueue_new_datagram+0x70>)
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013a22:	4a07      	ldr	r2, [pc, #28]	; (8013a40 <ip_reass_enqueue_new_datagram+0x70>)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	3308      	adds	r3, #8
 8013a2c:	2214      	movs	r2, #20
 8013a2e:	6879      	ldr	r1, [r7, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f001 f862 	bl	8014afa <memcpy>
  return ipr;
 8013a36:	68fb      	ldr	r3, [r7, #12]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3710      	adds	r7, #16
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20011954 	.word	0x20011954

08013a44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013a4e:	4b10      	ldr	r3, [pc, #64]	; (8013a90 <ip_reass_dequeue_datagram+0x4c>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d104      	bne.n	8013a62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	4a0c      	ldr	r2, [pc, #48]	; (8013a90 <ip_reass_dequeue_datagram+0x4c>)
 8013a5e:	6013      	str	r3, [r2, #0]
 8013a60:	e00d      	b.n	8013a7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d106      	bne.n	8013a76 <ip_reass_dequeue_datagram+0x32>
 8013a68:	4b0a      	ldr	r3, [pc, #40]	; (8013a94 <ip_reass_dequeue_datagram+0x50>)
 8013a6a:	f240 1245 	movw	r2, #325	; 0x145
 8013a6e:	490a      	ldr	r1, [pc, #40]	; (8013a98 <ip_reass_dequeue_datagram+0x54>)
 8013a70:	480a      	ldr	r0, [pc, #40]	; (8013a9c <ip_reass_dequeue_datagram+0x58>)
 8013a72:	f001 f8ed 	bl	8014c50 <iprintf>
    prev->next = ipr->next;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013a7e:	6879      	ldr	r1, [r7, #4]
 8013a80:	2003      	movs	r0, #3
 8013a82:	f7f6 ff91 	bl	800a9a8 <memp_free>
}
 8013a86:	bf00      	nop
 8013a88:	3708      	adds	r7, #8
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	20011954 	.word	0x20011954
 8013a94:	08018804 	.word	0x08018804
 8013a98:	080188cc 	.word	0x080188cc
 8013a9c:	0801884c 	.word	0x0801884c

08013aa0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b08c      	sub	sp, #48	; 0x30
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013aac:	2300      	movs	r3, #0
 8013aae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	885b      	ldrh	r3, [r3, #2]
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7f6 fa25 	bl	8009f10 <lwip_htons>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	f003 030f 	and.w	r3, r3, #15
 8013ad2:	b2db      	uxtb	r3, r3
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013ad8:	7e7b      	ldrb	r3, [r7, #25]
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	8b7a      	ldrh	r2, [r7, #26]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d202      	bcs.n	8013ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ae6:	e135      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013ae8:	7e7b      	ldrb	r3, [r7, #25]
 8013aea:	b29b      	uxth	r3, r3
 8013aec:	8b7a      	ldrh	r2, [r7, #26]
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013af2:	69fb      	ldr	r3, [r7, #28]
 8013af4:	88db      	ldrh	r3, [r3, #6]
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7f6 fa09 	bl	8009f10 <lwip_htons>
 8013afe:	4603      	mov	r3, r0
 8013b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	00db      	lsls	r3, r3, #3
 8013b08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b12:	2200      	movs	r2, #0
 8013b14:	701a      	strb	r2, [r3, #0]
 8013b16:	2200      	movs	r2, #0
 8013b18:	705a      	strb	r2, [r3, #1]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	709a      	strb	r2, [r3, #2]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b24:	8afa      	ldrh	r2, [r7, #22]
 8013b26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013b28:	8afa      	ldrh	r2, [r7, #22]
 8013b2a:	8b7b      	ldrh	r3, [r7, #26]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	b29a      	uxth	r2, r3
 8013b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b36:	88db      	ldrh	r3, [r3, #6]
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	8afa      	ldrh	r2, [r7, #22]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d902      	bls.n	8013b46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b44:	e106      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8013b4c:	e068      	b.n	8013c20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b56:	889b      	ldrh	r3, [r3, #4]
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	889b      	ldrh	r3, [r3, #4]
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d235      	bcs.n	8013bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d020      	beq.n	8013bb2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b72:	889b      	ldrh	r3, [r3, #4]
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	88db      	ldrh	r3, [r3, #6]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d307      	bcc.n	8013b90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	88db      	ldrh	r3, [r3, #6]
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	889b      	ldrh	r3, [r3, #4]
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d902      	bls.n	8013b96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b94:	e0de      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b98:	68ba      	ldr	r2, [r7, #8]
 8013b9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9e:	88db      	ldrh	r3, [r3, #6]
 8013ba0:	b29a      	uxth	r2, r3
 8013ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba4:	889b      	ldrh	r3, [r3, #4]
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d03d      	beq.n	8013c28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013bac:	2300      	movs	r3, #0
 8013bae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013bb0:	e03a      	b.n	8013c28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	88db      	ldrh	r3, [r3, #6]
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	889b      	ldrh	r3, [r3, #4]
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d902      	bls.n	8013bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bc6:	e0c5      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	605a      	str	r2, [r3, #4]
      break;
 8013bce:	e02b      	b.n	8013c28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd2:	889b      	ldrh	r3, [r3, #4]
 8013bd4:	b29a      	uxth	r2, r3
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	889b      	ldrh	r3, [r3, #4]
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d102      	bne.n	8013be6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013be4:	e0b6      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be8:	889b      	ldrh	r3, [r3, #4]
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	88db      	ldrh	r3, [r3, #6]
 8013bf0:	b29b      	uxth	r3, r3
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d202      	bcs.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bfa:	e0ab      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d009      	beq.n	8013c16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c04:	88db      	ldrh	r3, [r3, #6]
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	889b      	ldrh	r3, [r3, #4]
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d001      	beq.n	8013c16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d193      	bne.n	8013b4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013c26:	e000      	b.n	8013c2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013c28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d12d      	bne.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d01c      	beq.n	8013c70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c38:	88db      	ldrh	r3, [r3, #6]
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3e:	889b      	ldrh	r3, [r3, #4]
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d906      	bls.n	8013c54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013c46:	4b45      	ldr	r3, [pc, #276]	; (8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013c4c:	4944      	ldr	r1, [pc, #272]	; (8013d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013c4e:	4845      	ldr	r0, [pc, #276]	; (8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c50:	f000 fffe 	bl	8014c50 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c56:	68ba      	ldr	r2, [r7, #8]
 8013c58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5c:	88db      	ldrh	r3, [r3, #6]
 8013c5e:	b29a      	uxth	r2, r3
 8013c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c62:	889b      	ldrh	r3, [r3, #4]
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d010      	beq.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	623b      	str	r3, [r7, #32]
 8013c6e:	e00d      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d006      	beq.n	8013c86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013c78:	4b38      	ldr	r3, [pc, #224]	; (8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013c7e:	493a      	ldr	r1, [pc, #232]	; (8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013c80:	4838      	ldr	r0, [pc, #224]	; (8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c82:	f000 ffe5 	bl	8014c50 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d105      	bne.n	8013c9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	7f9b      	ldrb	r3, [r3, #30]
 8013c96:	f003 0301 	and.w	r3, r3, #1
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d059      	beq.n	8013d52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013c9e:	6a3b      	ldr	r3, [r7, #32]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d04f      	beq.n	8013d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d006      	beq.n	8013cba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	889b      	ldrh	r3, [r3, #4]
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d002      	beq.n	8013cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	623b      	str	r3, [r7, #32]
 8013cbe:	e041      	b.n	8013d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013cca:	e012      	b.n	8013cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd4:	88db      	ldrh	r3, [r3, #6]
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cda:	889b      	ldrh	r3, [r3, #4]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d002      	beq.n	8013ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	623b      	str	r3, [r7, #32]
            break;
 8013ce6:	e007      	b.n	8013cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d1e9      	bne.n	8013ccc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013cf8:	6a3b      	ldr	r3, [r7, #32]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d022      	beq.n	8013d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d106      	bne.n	8013d14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013d06:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d08:	f240 12df 	movw	r2, #479	; 0x1df
 8013d0c:	4917      	ldr	r1, [pc, #92]	; (8013d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d0e:	4815      	ldr	r0, [pc, #84]	; (8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d10:	f000 ff9e 	bl	8014c50 <iprintf>
          LWIP_ASSERT("sanity check",
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d106      	bne.n	8013d2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013d20:	4b0e      	ldr	r3, [pc, #56]	; (8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013d26:	4911      	ldr	r1, [pc, #68]	; (8013d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d28:	480e      	ldr	r0, [pc, #56]	; (8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d2a:	f000 ff91 	bl	8014c50 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d006      	beq.n	8013d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013d36:	4b09      	ldr	r3, [pc, #36]	; (8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013d3c:	490c      	ldr	r1, [pc, #48]	; (8013d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013d3e:	4809      	ldr	r0, [pc, #36]	; (8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d40:	f000 ff86 	bl	8014c50 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013d44:	6a3b      	ldr	r3, [r7, #32]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	bf14      	ite	ne
 8013d4a:	2301      	movne	r3, #1
 8013d4c:	2300      	moveq	r3, #0
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	e000      	b.n	8013d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3730      	adds	r7, #48	; 0x30
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	08018804 	.word	0x08018804
 8013d60:	080188e8 	.word	0x080188e8
 8013d64:	0801884c 	.word	0x0801884c
 8013d68:	08018908 	.word	0x08018908
 8013d6c:	08018940 	.word	0x08018940
 8013d70:	08018950 	.word	0x08018950

08013d74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b08e      	sub	sp, #56	; 0x38
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	f003 030f 	and.w	r3, r3, #15
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b14      	cmp	r3, #20
 8013d92:	f040 8171 	bne.w	8014078 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d98:	88db      	ldrh	r3, [r3, #6]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f6 f8b7 	bl	8009f10 <lwip_htons>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	00db      	lsls	r3, r3, #3
 8013dac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db0:	885b      	ldrh	r3, [r3, #2]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7f6 f8ab 	bl	8009f10 <lwip_htons>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	f003 030f 	and.w	r3, r3, #15
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	009b      	lsls	r3, r3, #2
 8013dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	f0c0 8150 	bcc.w	801407c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7f7 fd0b 	bl	800b804 <pbuf_clen>
 8013dee:	4603      	mov	r3, r0
 8013df0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013df2:	4b8c      	ldr	r3, [pc, #560]	; (8014024 <ip4_reass+0x2b0>)
 8013df4:	881b      	ldrh	r3, [r3, #0]
 8013df6:	461a      	mov	r2, r3
 8013df8:	8c3b      	ldrh	r3, [r7, #32]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	2b0a      	cmp	r3, #10
 8013dfe:	dd10      	ble.n	8013e22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e00:	8c3b      	ldrh	r3, [r7, #32]
 8013e02:	4619      	mov	r1, r3
 8013e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e06:	f7ff fd81 	bl	801390c <ip_reass_remove_oldest_datagram>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	f000 8137 	beq.w	8014080 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013e12:	4b84      	ldr	r3, [pc, #528]	; (8014024 <ip4_reass+0x2b0>)
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	461a      	mov	r2, r3
 8013e18:	8c3b      	ldrh	r3, [r7, #32]
 8013e1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e1c:	2b0a      	cmp	r3, #10
 8013e1e:	f300 812f 	bgt.w	8014080 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013e22:	4b81      	ldr	r3, [pc, #516]	; (8014028 <ip4_reass+0x2b4>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	633b      	str	r3, [r7, #48]	; 0x30
 8013e28:	e015      	b.n	8013e56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2c:	695a      	ldr	r2, [r3, #20]
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	68db      	ldr	r3, [r3, #12]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d10c      	bne.n	8013e50 <ip4_reass+0xdc>
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	699a      	ldr	r2, [r3, #24]
 8013e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3c:	691b      	ldr	r3, [r3, #16]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d106      	bne.n	8013e50 <ip4_reass+0xdc>
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	899a      	ldrh	r2, [r3, #12]
 8013e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e48:	889b      	ldrh	r3, [r3, #4]
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d006      	beq.n	8013e5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	633b      	str	r3, [r7, #48]	; 0x30
 8013e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d1e6      	bne.n	8013e2a <ip4_reass+0xb6>
 8013e5c:	e000      	b.n	8013e60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013e5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d109      	bne.n	8013e7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013e66:	8c3b      	ldrh	r3, [r7, #32]
 8013e68:	4619      	mov	r1, r3
 8013e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e6c:	f7ff fdb0 	bl	80139d0 <ip_reass_enqueue_new_datagram>
 8013e70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d11c      	bne.n	8013eb2 <ip4_reass+0x13e>
      goto nullreturn;
 8013e78:	e105      	b.n	8014086 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7c:	88db      	ldrh	r3, [r3, #6]
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f6 f845 	bl	8009f10 <lwip_htons>
 8013e86:	4603      	mov	r3, r0
 8013e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d110      	bne.n	8013eb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e92:	89db      	ldrh	r3, [r3, #14]
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7f6 f83b 	bl	8009f10 <lwip_htons>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d006      	beq.n	8013eb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea6:	3308      	adds	r3, #8
 8013ea8:	2214      	movs	r2, #20
 8013eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013eac:	4618      	mov	r0, r3
 8013eae:	f000 fe24 	bl	8014afa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb4:	88db      	ldrh	r3, [r3, #6]
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	f003 0320 	and.w	r3, r3, #32
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	bf0c      	ite	eq
 8013ec0:	2301      	moveq	r3, #1
 8013ec2:	2300      	movne	r3, #0
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d00e      	beq.n	8013eec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013ece:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ed2:	4413      	add	r3, r2
 8013ed4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013ed6:	8b7a      	ldrh	r2, [r7, #26]
 8013ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013eda:	429a      	cmp	r2, r3
 8013edc:	f0c0 80a0 	bcc.w	8014020 <ip4_reass+0x2ac>
 8013ee0:	8b7b      	ldrh	r3, [r7, #26]
 8013ee2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	f200 809a 	bhi.w	8014020 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013eec:	69fa      	ldr	r2, [r7, #28]
 8013eee:	6879      	ldr	r1, [r7, #4]
 8013ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ef2:	f7ff fdd5 	bl	8013aa0 <ip_reass_chain_frag_into_datagram_and_validate>
 8013ef6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013efe:	f000 809b 	beq.w	8014038 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013f02:	4b48      	ldr	r3, [pc, #288]	; (8014024 <ip4_reass+0x2b0>)
 8013f04:	881a      	ldrh	r2, [r3, #0]
 8013f06:	8c3b      	ldrh	r3, [r7, #32]
 8013f08:	4413      	add	r3, r2
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	4b45      	ldr	r3, [pc, #276]	; (8014024 <ip4_reass+0x2b0>)
 8013f0e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00d      	beq.n	8013f32 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f1a:	4413      	add	r3, r2
 8013f1c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f20:	8a7a      	ldrh	r2, [r7, #18]
 8013f22:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f26:	7f9b      	ldrb	r3, [r3, #30]
 8013f28:	f043 0301 	orr.w	r3, r3, #1
 8013f2c:	b2da      	uxtb	r2, r3
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d171      	bne.n	801401c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3a:	8b9b      	ldrh	r3, [r3, #28]
 8013f3c:	3314      	adds	r3, #20
 8013f3e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	685b      	ldr	r3, [r3, #4]
 8013f50:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f54:	3308      	adds	r3, #8
 8013f56:	2214      	movs	r2, #20
 8013f58:	4619      	mov	r1, r3
 8013f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f5c:	f000 fdcd 	bl	8014afa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013f60:	8a3b      	ldrh	r3, [r7, #16]
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7f5 ffd4 	bl	8009f10 <lwip_htons>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f72:	2200      	movs	r2, #0
 8013f74:	719a      	strb	r2, [r3, #6]
 8013f76:	2200      	movs	r2, #0
 8013f78:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	729a      	strb	r2, [r3, #10]
 8013f80:	2200      	movs	r2, #0
 8013f82:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013f8a:	e00d      	b.n	8013fa8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013f92:	2114      	movs	r1, #20
 8013f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013f96:	f7f7 fb21 	bl	800b5dc <pbuf_remove_header>
      pbuf_cat(p, r);
 8013f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7f7 fc71 	bl	800b884 <pbuf_cat>
      r = iprh->next_pbuf;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1ee      	bne.n	8013f8c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013fae:	4b1e      	ldr	r3, [pc, #120]	; (8014028 <ip4_reass+0x2b4>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d102      	bne.n	8013fbe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fbc:	e010      	b.n	8013fe0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013fbe:	4b1a      	ldr	r3, [pc, #104]	; (8014028 <ip4_reass+0x2b4>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fc4:	e007      	b.n	8013fd6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d006      	beq.n	8013fde <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d1f4      	bne.n	8013fc6 <ip4_reass+0x252>
 8013fdc:	e000      	b.n	8013fe0 <ip4_reass+0x26c>
          break;
 8013fde:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fe4:	f7ff fd2e 	bl	8013a44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f7f7 fc0b 	bl	800b804 <pbuf_clen>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013ff2:	4b0c      	ldr	r3, [pc, #48]	; (8014024 <ip4_reass+0x2b0>)
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	8c3a      	ldrh	r2, [r7, #32]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d906      	bls.n	801400a <ip4_reass+0x296>
 8013ffc:	4b0b      	ldr	r3, [pc, #44]	; (801402c <ip4_reass+0x2b8>)
 8013ffe:	f240 229b 	movw	r2, #667	; 0x29b
 8014002:	490b      	ldr	r1, [pc, #44]	; (8014030 <ip4_reass+0x2bc>)
 8014004:	480b      	ldr	r0, [pc, #44]	; (8014034 <ip4_reass+0x2c0>)
 8014006:	f000 fe23 	bl	8014c50 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801400a:	4b06      	ldr	r3, [pc, #24]	; (8014024 <ip4_reass+0x2b0>)
 801400c:	881a      	ldrh	r2, [r3, #0]
 801400e:	8c3b      	ldrh	r3, [r7, #32]
 8014010:	1ad3      	subs	r3, r2, r3
 8014012:	b29a      	uxth	r2, r3
 8014014:	4b03      	ldr	r3, [pc, #12]	; (8014024 <ip4_reass+0x2b0>)
 8014016:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	e038      	b.n	801408e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801401c:	2300      	movs	r3, #0
 801401e:	e036      	b.n	801408e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014020:	bf00      	nop
 8014022:	e00a      	b.n	801403a <ip4_reass+0x2c6>
 8014024:	20011958 	.word	0x20011958
 8014028:	20011954 	.word	0x20011954
 801402c:	08018804 	.word	0x08018804
 8014030:	08018974 	.word	0x08018974
 8014034:	0801884c 	.word	0x0801884c
    goto nullreturn_ipr;
 8014038:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403c:	2b00      	cmp	r3, #0
 801403e:	d106      	bne.n	801404e <ip4_reass+0x2da>
 8014040:	4b15      	ldr	r3, [pc, #84]	; (8014098 <ip4_reass+0x324>)
 8014042:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014046:	4915      	ldr	r1, [pc, #84]	; (801409c <ip4_reass+0x328>)
 8014048:	4815      	ldr	r0, [pc, #84]	; (80140a0 <ip4_reass+0x32c>)
 801404a:	f000 fe01 	bl	8014c50 <iprintf>
  if (ipr->p == NULL) {
 801404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d116      	bne.n	8014084 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014056:	4b13      	ldr	r3, [pc, #76]	; (80140a4 <ip4_reass+0x330>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801405c:	429a      	cmp	r2, r3
 801405e:	d006      	beq.n	801406e <ip4_reass+0x2fa>
 8014060:	4b0d      	ldr	r3, [pc, #52]	; (8014098 <ip4_reass+0x324>)
 8014062:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014066:	4910      	ldr	r1, [pc, #64]	; (80140a8 <ip4_reass+0x334>)
 8014068:	480d      	ldr	r0, [pc, #52]	; (80140a0 <ip4_reass+0x32c>)
 801406a:	f000 fdf1 	bl	8014c50 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801406e:	2100      	movs	r1, #0
 8014070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014072:	f7ff fce7 	bl	8013a44 <ip_reass_dequeue_datagram>
 8014076:	e006      	b.n	8014086 <ip4_reass+0x312>
    goto nullreturn;
 8014078:	bf00      	nop
 801407a:	e004      	b.n	8014086 <ip4_reass+0x312>
    goto nullreturn;
 801407c:	bf00      	nop
 801407e:	e002      	b.n	8014086 <ip4_reass+0x312>
      goto nullreturn;
 8014080:	bf00      	nop
 8014082:	e000      	b.n	8014086 <ip4_reass+0x312>
  }

nullreturn:
 8014084:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f7f7 fb2e 	bl	800b6e8 <pbuf_free>
  return NULL;
 801408c:	2300      	movs	r3, #0
}
 801408e:	4618      	mov	r0, r3
 8014090:	3738      	adds	r7, #56	; 0x38
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	08018804 	.word	0x08018804
 801409c:	08018990 	.word	0x08018990
 80140a0:	0801884c 	.word	0x0801884c
 80140a4:	20011954 	.word	0x20011954
 80140a8:	0801899c 	.word	0x0801899c

080140ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80140b0:	2004      	movs	r0, #4
 80140b2:	f7f6 fc03 	bl	800a8bc <memp_malloc>
 80140b6:	4603      	mov	r3, r0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	bd80      	pop	{r7, pc}

080140bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d106      	bne.n	80140d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80140ca:	4b07      	ldr	r3, [pc, #28]	; (80140e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80140cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80140d0:	4906      	ldr	r1, [pc, #24]	; (80140ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80140d2:	4807      	ldr	r0, [pc, #28]	; (80140f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80140d4:	f000 fdbc 	bl	8014c50 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80140d8:	6879      	ldr	r1, [r7, #4]
 80140da:	2004      	movs	r0, #4
 80140dc:	f7f6 fc64 	bl	800a9a8 <memp_free>
}
 80140e0:	bf00      	nop
 80140e2:	3708      	adds	r7, #8
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	08018804 	.word	0x08018804
 80140ec:	080189bc 	.word	0x080189bc
 80140f0:	0801884c 	.word	0x0801884c

080140f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d106      	bne.n	8014114 <ipfrag_free_pbuf_custom+0x20>
 8014106:	4b11      	ldr	r3, [pc, #68]	; (801414c <ipfrag_free_pbuf_custom+0x58>)
 8014108:	f240 22ce 	movw	r2, #718	; 0x2ce
 801410c:	4910      	ldr	r1, [pc, #64]	; (8014150 <ipfrag_free_pbuf_custom+0x5c>)
 801410e:	4811      	ldr	r0, [pc, #68]	; (8014154 <ipfrag_free_pbuf_custom+0x60>)
 8014110:	f000 fd9e 	bl	8014c50 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014114:	68fa      	ldr	r2, [r7, #12]
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	429a      	cmp	r2, r3
 801411a:	d006      	beq.n	801412a <ipfrag_free_pbuf_custom+0x36>
 801411c:	4b0b      	ldr	r3, [pc, #44]	; (801414c <ipfrag_free_pbuf_custom+0x58>)
 801411e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014122:	490d      	ldr	r1, [pc, #52]	; (8014158 <ipfrag_free_pbuf_custom+0x64>)
 8014124:	480b      	ldr	r0, [pc, #44]	; (8014154 <ipfrag_free_pbuf_custom+0x60>)
 8014126:	f000 fd93 	bl	8014c50 <iprintf>
  if (pcr->original != NULL) {
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	695b      	ldr	r3, [r3, #20]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d004      	beq.n	801413c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	695b      	ldr	r3, [r3, #20]
 8014136:	4618      	mov	r0, r3
 8014138:	f7f7 fad6 	bl	800b6e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f7ff ffbd 	bl	80140bc <ip_frag_free_pbuf_custom_ref>
}
 8014142:	bf00      	nop
 8014144:	3710      	adds	r7, #16
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	08018804 	.word	0x08018804
 8014150:	080189c8 	.word	0x080189c8
 8014154:	0801884c 	.word	0x0801884c
 8014158:	080189d4 	.word	0x080189d4

0801415c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b094      	sub	sp, #80	; 0x50
 8014160:	af02      	add	r7, sp, #8
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014168:	2300      	movs	r3, #0
 801416a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014172:	3b14      	subs	r3, #20
 8014174:	2b00      	cmp	r3, #0
 8014176:	da00      	bge.n	801417a <ip4_frag+0x1e>
 8014178:	3307      	adds	r3, #7
 801417a:	10db      	asrs	r3, r3, #3
 801417c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801417e:	2314      	movs	r3, #20
 8014180:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801418a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	f003 030f 	and.w	r3, r3, #15
 8014194:	b2db      	uxtb	r3, r3
 8014196:	009b      	lsls	r3, r3, #2
 8014198:	b2db      	uxtb	r3, r3
 801419a:	2b14      	cmp	r3, #20
 801419c:	d002      	beq.n	80141a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801419e:	f06f 0305 	mvn.w	r3, #5
 80141a2:	e110      	b.n	80143c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	895b      	ldrh	r3, [r3, #10]
 80141a8:	2b13      	cmp	r3, #19
 80141aa:	d809      	bhi.n	80141c0 <ip4_frag+0x64>
 80141ac:	4b88      	ldr	r3, [pc, #544]	; (80143d0 <ip4_frag+0x274>)
 80141ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80141b2:	4988      	ldr	r1, [pc, #544]	; (80143d4 <ip4_frag+0x278>)
 80141b4:	4888      	ldr	r0, [pc, #544]	; (80143d8 <ip4_frag+0x27c>)
 80141b6:	f000 fd4b 	bl	8014c50 <iprintf>
 80141ba:	f06f 0305 	mvn.w	r3, #5
 80141be:	e102      	b.n	80143c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80141c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c2:	88db      	ldrh	r3, [r3, #6]
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7f5 fea2 	bl	8009f10 <lwip_htons>
 80141cc:	4603      	mov	r3, r0
 80141ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80141d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80141d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80141da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80141dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80141e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	891b      	ldrh	r3, [r3, #8]
 80141e6:	3b14      	subs	r3, #20
 80141e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80141ec:	e0e1      	b.n	80143b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80141ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141f8:	4293      	cmp	r3, r2
 80141fa:	bf28      	it	cs
 80141fc:	4613      	movcs	r3, r2
 80141fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014200:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014204:	2114      	movs	r1, #20
 8014206:	200e      	movs	r0, #14
 8014208:	f7f6 ff8a 	bl	800b120 <pbuf_alloc>
 801420c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014210:	2b00      	cmp	r3, #0
 8014212:	f000 80d5 	beq.w	80143c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	895b      	ldrh	r3, [r3, #10]
 801421a:	2b13      	cmp	r3, #19
 801421c:	d806      	bhi.n	801422c <ip4_frag+0xd0>
 801421e:	4b6c      	ldr	r3, [pc, #432]	; (80143d0 <ip4_frag+0x274>)
 8014220:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014224:	496d      	ldr	r1, [pc, #436]	; (80143dc <ip4_frag+0x280>)
 8014226:	486c      	ldr	r0, [pc, #432]	; (80143d8 <ip4_frag+0x27c>)
 8014228:	f000 fd12 	bl	8014c50 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	2214      	movs	r2, #20
 8014232:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014234:	4618      	mov	r0, r3
 8014236:	f000 fc60 	bl	8014afa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014242:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014246:	e064      	b.n	8014312 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	895a      	ldrh	r2, [r3, #10]
 801424c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801424e:	1ad3      	subs	r3, r2, r3
 8014250:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	895b      	ldrh	r3, [r3, #10]
 8014256:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014258:	429a      	cmp	r2, r3
 801425a:	d906      	bls.n	801426a <ip4_frag+0x10e>
 801425c:	4b5c      	ldr	r3, [pc, #368]	; (80143d0 <ip4_frag+0x274>)
 801425e:	f240 322d 	movw	r2, #813	; 0x32d
 8014262:	495f      	ldr	r1, [pc, #380]	; (80143e0 <ip4_frag+0x284>)
 8014264:	485c      	ldr	r0, [pc, #368]	; (80143d8 <ip4_frag+0x27c>)
 8014266:	f000 fcf3 	bl	8014c50 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801426a:	8bfa      	ldrh	r2, [r7, #30]
 801426c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014270:	4293      	cmp	r3, r2
 8014272:	bf28      	it	cs
 8014274:	4613      	movcs	r3, r2
 8014276:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801427a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801427e:	2b00      	cmp	r3, #0
 8014280:	d105      	bne.n	801428e <ip4_frag+0x132>
        poff = 0;
 8014282:	2300      	movs	r3, #0
 8014284:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	60fb      	str	r3, [r7, #12]
        continue;
 801428c:	e041      	b.n	8014312 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801428e:	f7ff ff0d 	bl	80140ac <ip_frag_alloc_pbuf_custom_ref>
 8014292:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d103      	bne.n	80142a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801429a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801429c:	f7f7 fa24 	bl	800b6e8 <pbuf_free>
        goto memerr;
 80142a0:	e08f      	b.n	80143c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80142a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80142a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80142aa:	4413      	add	r3, r2
 80142ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80142b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80142b4:	9201      	str	r2, [sp, #4]
 80142b6:	9300      	str	r3, [sp, #0]
 80142b8:	4603      	mov	r3, r0
 80142ba:	2241      	movs	r2, #65	; 0x41
 80142bc:	2000      	movs	r0, #0
 80142be:	f7f7 f859 	bl	800b374 <pbuf_alloced_custom>
 80142c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d106      	bne.n	80142d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80142ca:	69b8      	ldr	r0, [r7, #24]
 80142cc:	f7ff fef6 	bl	80140bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80142d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142d2:	f7f7 fa09 	bl	800b6e8 <pbuf_free>
        goto memerr;
 80142d6:	e074      	b.n	80143c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80142d8:	68f8      	ldr	r0, [r7, #12]
 80142da:	f7f7 faab 	bl	800b834 <pbuf_ref>
      pcr->original = p;
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	68fa      	ldr	r2, [r7, #12]
 80142e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	4a3f      	ldr	r2, [pc, #252]	; (80143e4 <ip4_frag+0x288>)
 80142e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80142ea:	6979      	ldr	r1, [r7, #20]
 80142ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ee:	f7f7 fac9 	bl	800b884 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80142f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80142f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80142fa:	1ad3      	subs	r3, r2, r3
 80142fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014300:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014304:	2b00      	cmp	r3, #0
 8014306:	d004      	beq.n	8014312 <ip4_frag+0x1b6>
        poff = 0;
 8014308:	2300      	movs	r3, #0
 801430a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014312:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014316:	2b00      	cmp	r3, #0
 8014318:	d196      	bne.n	8014248 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801431a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801431c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014320:	4413      	add	r3, r2
 8014322:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014328:	f1a3 0213 	sub.w	r2, r3, #19
 801432c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014330:	429a      	cmp	r2, r3
 8014332:	bfcc      	ite	gt
 8014334:	2301      	movgt	r3, #1
 8014336:	2300      	movle	r3, #0
 8014338:	b2db      	uxtb	r3, r3
 801433a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801433c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014344:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014346:	6a3b      	ldr	r3, [r7, #32]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d002      	beq.n	8014352 <ip4_frag+0x1f6>
 801434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434e:	2b00      	cmp	r3, #0
 8014350:	d003      	beq.n	801435a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014358:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801435a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801435c:	4618      	mov	r0, r3
 801435e:	f7f5 fdd7 	bl	8009f10 <lwip_htons>
 8014362:	4603      	mov	r3, r0
 8014364:	461a      	mov	r2, r3
 8014366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014368:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801436a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801436c:	3314      	adds	r3, #20
 801436e:	b29b      	uxth	r3, r3
 8014370:	4618      	mov	r0, r3
 8014372:	f7f5 fdcd 	bl	8009f10 <lwip_htons>
 8014376:	4603      	mov	r3, r0
 8014378:	461a      	mov	r2, r3
 801437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014380:	2200      	movs	r2, #0
 8014382:	729a      	strb	r2, [r3, #10]
 8014384:	2200      	movs	r2, #0
 8014386:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	695b      	ldr	r3, [r3, #20]
 801438c:	687a      	ldr	r2, [r7, #4]
 801438e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014390:	68b8      	ldr	r0, [r7, #8]
 8014392:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014396:	f7f7 f9a7 	bl	800b6e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801439a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801439e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80143a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80143aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80143ac:	4413      	add	r3, r2
 80143ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80143b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	f47f af19 	bne.w	80141ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80143bc:	2300      	movs	r3, #0
 80143be:	e002      	b.n	80143c6 <ip4_frag+0x26a>
      goto memerr;
 80143c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80143c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3748      	adds	r7, #72	; 0x48
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	08018804 	.word	0x08018804
 80143d4:	080189e0 	.word	0x080189e0
 80143d8:	0801884c 	.word	0x0801884c
 80143dc:	080189fc 	.word	0x080189fc
 80143e0:	08018a1c 	.word	0x08018a1c
 80143e4:	080140f5 	.word	0x080140f5

080143e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b086      	sub	sp, #24
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80143f2:	230e      	movs	r3, #14
 80143f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	895b      	ldrh	r3, [r3, #10]
 80143fa:	2b0e      	cmp	r3, #14
 80143fc:	d96e      	bls.n	80144dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	7bdb      	ldrb	r3, [r3, #15]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d106      	bne.n	8014414 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801440c:	3301      	adds	r3, #1
 801440e:	b2da      	uxtb	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	7b1a      	ldrb	r2, [r3, #12]
 801441e:	7b5b      	ldrb	r3, [r3, #13]
 8014420:	021b      	lsls	r3, r3, #8
 8014422:	4313      	orrs	r3, r2
 8014424:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	f003 0301 	and.w	r3, r3, #1
 801442e:	2b00      	cmp	r3, #0
 8014430:	d023      	beq.n	801447a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d10f      	bne.n	801445a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	785b      	ldrb	r3, [r3, #1]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d11b      	bne.n	801447a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014446:	2b5e      	cmp	r3, #94	; 0x5e
 8014448:	d117      	bne.n	801447a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	7b5b      	ldrb	r3, [r3, #13]
 801444e:	f043 0310 	orr.w	r3, r3, #16
 8014452:	b2da      	uxtb	r2, r3
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	735a      	strb	r2, [r3, #13]
 8014458:	e00f      	b.n	801447a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	2206      	movs	r2, #6
 801445e:	4928      	ldr	r1, [pc, #160]	; (8014500 <ethernet_input+0x118>)
 8014460:	4618      	mov	r0, r3
 8014462:	f000 fb3a 	bl	8014ada <memcmp>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d106      	bne.n	801447a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	7b5b      	ldrb	r3, [r3, #13]
 8014470:	f043 0308 	orr.w	r3, r3, #8
 8014474:	b2da      	uxtb	r2, r3
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801447a:	89fb      	ldrh	r3, [r7, #14]
 801447c:	2b08      	cmp	r3, #8
 801447e:	d003      	beq.n	8014488 <ethernet_input+0xa0>
 8014480:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014484:	d014      	beq.n	80144b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014486:	e032      	b.n	80144ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801448e:	f003 0308 	and.w	r3, r3, #8
 8014492:	2b00      	cmp	r3, #0
 8014494:	d024      	beq.n	80144e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014496:	8afb      	ldrh	r3, [r7, #22]
 8014498:	4619      	mov	r1, r3
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7f7 f89e 	bl	800b5dc <pbuf_remove_header>
 80144a0:	4603      	mov	r3, r0
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d11e      	bne.n	80144e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80144a6:	6839      	ldr	r1, [r7, #0]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7fe ff2b 	bl	8013304 <ip4_input>
      break;
 80144ae:	e013      	b.n	80144d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144b6:	f003 0308 	and.w	r3, r3, #8
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d014      	beq.n	80144e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80144be:	8afb      	ldrh	r3, [r7, #22]
 80144c0:	4619      	mov	r1, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7f7 f88a 	bl	800b5dc <pbuf_remove_header>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10e      	bne.n	80144ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f7fe f8cb 	bl	801266c <etharp_input>
      break;
 80144d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80144d8:	2300      	movs	r3, #0
 80144da:	e00c      	b.n	80144f6 <ethernet_input+0x10e>
    goto free_and_return;
 80144dc:	bf00      	nop
 80144de:	e006      	b.n	80144ee <ethernet_input+0x106>
        goto free_and_return;
 80144e0:	bf00      	nop
 80144e2:	e004      	b.n	80144ee <ethernet_input+0x106>
        goto free_and_return;
 80144e4:	bf00      	nop
 80144e6:	e002      	b.n	80144ee <ethernet_input+0x106>
        goto free_and_return;
 80144e8:	bf00      	nop
 80144ea:	e000      	b.n	80144ee <ethernet_input+0x106>
        goto free_and_return;
 80144ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f7f7 f8fa 	bl	800b6e8 <pbuf_free>
  return ERR_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3718      	adds	r7, #24
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	08018c34 	.word	0x08018c34

08014504 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014504:	b580      	push	{r7, lr}
 8014506:	b086      	sub	sp, #24
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014512:	8c3b      	ldrh	r3, [r7, #32]
 8014514:	4618      	mov	r0, r3
 8014516:	f7f5 fcfb 	bl	8009f10 <lwip_htons>
 801451a:	4603      	mov	r3, r0
 801451c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801451e:	210e      	movs	r1, #14
 8014520:	68b8      	ldr	r0, [r7, #8]
 8014522:	f7f7 f84b 	bl	800b5bc <pbuf_add_header>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d125      	bne.n	8014578 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	8afa      	ldrh	r2, [r7, #22]
 8014536:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	2206      	movs	r2, #6
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	4618      	mov	r0, r3
 8014540:	f000 fadb 	bl	8014afa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	3306      	adds	r3, #6
 8014548:	2206      	movs	r2, #6
 801454a:	6879      	ldr	r1, [r7, #4]
 801454c:	4618      	mov	r0, r3
 801454e:	f000 fad4 	bl	8014afa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014558:	2b06      	cmp	r3, #6
 801455a:	d006      	beq.n	801456a <ethernet_output+0x66>
 801455c:	4b0a      	ldr	r3, [pc, #40]	; (8014588 <ethernet_output+0x84>)
 801455e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014562:	490a      	ldr	r1, [pc, #40]	; (801458c <ethernet_output+0x88>)
 8014564:	480a      	ldr	r0, [pc, #40]	; (8014590 <ethernet_output+0x8c>)
 8014566:	f000 fb73 	bl	8014c50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	699b      	ldr	r3, [r3, #24]
 801456e:	68b9      	ldr	r1, [r7, #8]
 8014570:	68f8      	ldr	r0, [r7, #12]
 8014572:	4798      	blx	r3
 8014574:	4603      	mov	r3, r0
 8014576:	e002      	b.n	801457e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014578:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801457a:	f06f 0301 	mvn.w	r3, #1
}
 801457e:	4618      	mov	r0, r3
 8014580:	3718      	adds	r7, #24
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	08018a2c 	.word	0x08018a2c
 801458c:	08018a64 	.word	0x08018a64
 8014590:	08018a98 	.word	0x08018a98

08014594 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b082      	sub	sp, #8
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	2200      	movs	r2, #0
 80145a2:	2104      	movs	r1, #4
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7f0 fcf1 	bl	8004f8c <osMessageQueueNew>
 80145aa:	4602      	mov	r2, r0
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d102      	bne.n	80145be <sys_mbox_new+0x2a>
    return ERR_MEM;
 80145b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145bc:	e000      	b.n	80145c0 <sys_mbox_new+0x2c>

  return ERR_OK;
 80145be:	2300      	movs	r3, #0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f0 fe45 	bl	8005264 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4618      	mov	r0, r3
 80145e0:	f7f0 fe72 	bl	80052c8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6818      	ldr	r0, [r3, #0]
 80145fa:	4639      	mov	r1, r7
 80145fc:	2300      	movs	r3, #0
 80145fe:	2200      	movs	r2, #0
 8014600:	f7f0 fd4a 	bl	8005098 <osMessageQueuePut>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d102      	bne.n	8014610 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801460a:	2300      	movs	r3, #0
 801460c:	73fb      	strb	r3, [r7, #15]
 801460e:	e001      	b.n	8014614 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014610:	23ff      	movs	r3, #255	; 0xff
 8014612:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3710      	adds	r7, #16
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}

08014620 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801462c:	f7f0 f8da 	bl	80047e4 <osKernelGetTickCount>
 8014630:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d013      	beq.n	8014660 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	6818      	ldr	r0, [r3, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	68b9      	ldr	r1, [r7, #8]
 8014642:	f7f0 fd9d 	bl	8005180 <osMessageQueueGet>
 8014646:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d105      	bne.n	801465a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801464e:	f7f0 f8c9 	bl	80047e4 <osKernelGetTickCount>
 8014652:	4602      	mov	r2, r0
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	1ad3      	subs	r3, r2, r3
 8014658:	e00f      	b.n	801467a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801465a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801465e:	e00c      	b.n	801467a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6818      	ldr	r0, [r3, #0]
 8014664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014668:	2200      	movs	r2, #0
 801466a:	68b9      	ldr	r1, [r7, #8]
 801466c:	f7f0 fd88 	bl	8005180 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014670:	f7f0 f8b8 	bl	80047e4 <osKernelGetTickCount>
 8014674:	4602      	mov	r2, r0
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801467a:	4618      	mov	r0, r3
 801467c:	3718      	adds	r7, #24
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b082      	sub	sp, #8
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
 801468a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6818      	ldr	r0, [r3, #0]
 8014690:	2300      	movs	r3, #0
 8014692:	2200      	movs	r2, #0
 8014694:	6839      	ldr	r1, [r7, #0]
 8014696:	f7f0 fd73 	bl	8005180 <osMessageQueueGet>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80146a0:	2300      	movs	r3, #0
 80146a2:	e001      	b.n	80146a8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80146a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d101      	bne.n	80146c4 <sys_mbox_valid+0x14>
    return 0;
 80146c0:	2300      	movs	r3, #0
 80146c2:	e000      	b.n	80146c6 <sys_mbox_valid+0x16>
  else
    return 1;
 80146c4:	2301      	movs	r3, #1
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	370c      	adds	r7, #12
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr

080146d2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80146d2:	b480      	push	{r7}
 80146d4:	b083      	sub	sp, #12
 80146d6:	af00      	add	r7, sp, #0
 80146d8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2200      	movs	r2, #0
 80146de:	601a      	str	r2, [r3, #0]
}
 80146e0:	bf00      	nop
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	460b      	mov	r3, r1
 80146f6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80146f8:	78fb      	ldrb	r3, [r7, #3]
 80146fa:	2200      	movs	r2, #0
 80146fc:	4619      	mov	r1, r3
 80146fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014702:	f7f0 fab3 	bl	8004c6c <osSemaphoreNew>
 8014706:	4602      	mov	r2, r0
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014718:	e009      	b.n	801472e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801471a:	78fb      	ldrb	r3, [r7, #3]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d105      	bne.n	801472c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2100      	movs	r1, #0
 8014726:	4618      	mov	r0, r3
 8014728:	f7f0 fb3c 	bl	8004da4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	3708      	adds	r7, #8
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}

08014736 <sys_sem_signal>:
}

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014736:	b580      	push	{r7, lr}
 8014738:	b082      	sub	sp, #8
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	4618      	mov	r0, r3
 8014744:	f7f0 fb94 	bl	8004e70 <osSemaphoreRelease>
}
 8014748:	bf00      	nop
 801474a:	3708      	adds	r7, #8
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	4618      	mov	r0, r3
 801475e:	f7f0 fbdf 	bl	8004f20 <osSemaphoreDelete>
}
 8014762:	bf00      	nop
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801476a:	b480      	push	{r7}
 801476c:	b083      	sub	sp, #12
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d101      	bne.n	801477e <sys_sem_valid+0x14>
    return 0;
 801477a:	2300      	movs	r3, #0
 801477c:	e000      	b.n	8014780 <sys_sem_valid+0x16>
  else
    return 1;
 801477e:	2301      	movs	r3, #1
}
 8014780:	4618      	mov	r0, r3
 8014782:	370c      	adds	r7, #12
 8014784:	46bd      	mov	sp, r7
 8014786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478a:	4770      	bx	lr

0801478c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801478c:	b480      	push	{r7}
 801478e:	b083      	sub	sp, #12
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2200      	movs	r2, #0
 8014798:	601a      	str	r2, [r3, #0]
}
 801479a:	bf00      	nop
 801479c:	370c      	adds	r7, #12
 801479e:	46bd      	mov	sp, r7
 80147a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a4:	4770      	bx	lr
	...

080147a8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80147ac:	2000      	movs	r0, #0
 80147ae:	f7f0 f915 	bl	80049dc <osMutexNew>
 80147b2:	4603      	mov	r3, r0
 80147b4:	4a01      	ldr	r2, [pc, #4]	; (80147bc <sys_init+0x14>)
 80147b6:	6013      	str	r3, [r2, #0]
#endif
}
 80147b8:	bf00      	nop
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	2001195c 	.word	0x2001195c

080147c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80147c8:	2000      	movs	r0, #0
 80147ca:	f7f0 f907 	bl	80049dc <osMutexNew>
 80147ce:	4602      	mov	r2, r0
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d102      	bne.n	80147e2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80147dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147e0:	e000      	b.n	80147e4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80147e2:	2300      	movs	r3, #0
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3708      	adds	r7, #8
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7f0 f987 	bl	8004b10 <osMutexAcquire>
#endif
}
 8014802:	bf00      	nop
 8014804:	3708      	adds	r7, #8
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b082      	sub	sp, #8
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	4618      	mov	r0, r3
 8014818:	f7f0 f9d8 	bl	8004bcc <osMutexRelease>
}
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}

08014824 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b08e      	sub	sp, #56	; 0x38
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	607a      	str	r2, [r7, #4]
 8014830:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8014832:	f107 0314 	add.w	r3, r7, #20
 8014836:	2224      	movs	r2, #36	; 0x24
 8014838:	2100      	movs	r1, #0
 801483a:	4618      	mov	r0, r3
 801483c:	f000 f96b 	bl	8014b16 <memset>
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	617b      	str	r3, [r7, #20]
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	62bb      	str	r3, [r7, #40]	; 0x28
 8014848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801484a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801484c:	f107 0314 	add.w	r3, r7, #20
 8014850:	461a      	mov	r2, r3
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f7ef ffed 	bl	8004834 <osThreadNew>
 801485a:	4603      	mov	r3, r0
#endif
}
 801485c:	4618      	mov	r0, r3
 801485e:	3738      	adds	r7, #56	; 0x38
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014868:	4b04      	ldr	r3, [pc, #16]	; (801487c <sys_arch_protect+0x18>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014870:	4618      	mov	r0, r3
 8014872:	f7f0 f94d 	bl	8004b10 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8014876:	2301      	movs	r3, #1
}
 8014878:	4618      	mov	r0, r3
 801487a:	bd80      	pop	{r7, pc}
 801487c:	2001195c 	.word	0x2001195c

08014880 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014888:	4b04      	ldr	r3, [pc, #16]	; (801489c <sys_arch_unprotect+0x1c>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	4618      	mov	r0, r3
 801488e:	f7f0 f99d 	bl	8004bcc <osMutexRelease>
}
 8014892:	bf00      	nop
 8014894:	3708      	adds	r7, #8
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
 801489a:	bf00      	nop
 801489c:	2001195c 	.word	0x2001195c

080148a0 <std>:
 80148a0:	2300      	movs	r3, #0
 80148a2:	b510      	push	{r4, lr}
 80148a4:	4604      	mov	r4, r0
 80148a6:	e9c0 3300 	strd	r3, r3, [r0]
 80148aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148ae:	6083      	str	r3, [r0, #8]
 80148b0:	8181      	strh	r1, [r0, #12]
 80148b2:	6643      	str	r3, [r0, #100]	; 0x64
 80148b4:	81c2      	strh	r2, [r0, #14]
 80148b6:	6183      	str	r3, [r0, #24]
 80148b8:	4619      	mov	r1, r3
 80148ba:	2208      	movs	r2, #8
 80148bc:	305c      	adds	r0, #92	; 0x5c
 80148be:	f000 f92a 	bl	8014b16 <memset>
 80148c2:	4b05      	ldr	r3, [pc, #20]	; (80148d8 <std+0x38>)
 80148c4:	6263      	str	r3, [r4, #36]	; 0x24
 80148c6:	4b05      	ldr	r3, [pc, #20]	; (80148dc <std+0x3c>)
 80148c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80148ca:	4b05      	ldr	r3, [pc, #20]	; (80148e0 <std+0x40>)
 80148cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148ce:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <std+0x44>)
 80148d0:	6224      	str	r4, [r4, #32]
 80148d2:	6323      	str	r3, [r4, #48]	; 0x30
 80148d4:	bd10      	pop	{r4, pc}
 80148d6:	bf00      	nop
 80148d8:	08014df1 	.word	0x08014df1
 80148dc:	08014e13 	.word	0x08014e13
 80148e0:	08014e4b 	.word	0x08014e4b
 80148e4:	08014e6f 	.word	0x08014e6f

080148e8 <_cleanup_r>:
 80148e8:	4901      	ldr	r1, [pc, #4]	; (80148f0 <_cleanup_r+0x8>)
 80148ea:	f000 b8af 	b.w	8014a4c <_fwalk_reent>
 80148ee:	bf00      	nop
 80148f0:	08015005 	.word	0x08015005

080148f4 <__sfmoreglue>:
 80148f4:	b570      	push	{r4, r5, r6, lr}
 80148f6:	2268      	movs	r2, #104	; 0x68
 80148f8:	1e4d      	subs	r5, r1, #1
 80148fa:	4355      	muls	r5, r2
 80148fc:	460e      	mov	r6, r1
 80148fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014902:	f000 f931 	bl	8014b68 <_malloc_r>
 8014906:	4604      	mov	r4, r0
 8014908:	b140      	cbz	r0, 801491c <__sfmoreglue+0x28>
 801490a:	2100      	movs	r1, #0
 801490c:	e9c0 1600 	strd	r1, r6, [r0]
 8014910:	300c      	adds	r0, #12
 8014912:	60a0      	str	r0, [r4, #8]
 8014914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014918:	f000 f8fd 	bl	8014b16 <memset>
 801491c:	4620      	mov	r0, r4
 801491e:	bd70      	pop	{r4, r5, r6, pc}

08014920 <__sfp_lock_acquire>:
 8014920:	4801      	ldr	r0, [pc, #4]	; (8014928 <__sfp_lock_acquire+0x8>)
 8014922:	f000 b8d8 	b.w	8014ad6 <__retarget_lock_acquire_recursive>
 8014926:	bf00      	nop
 8014928:	20011961 	.word	0x20011961

0801492c <__sfp_lock_release>:
 801492c:	4801      	ldr	r0, [pc, #4]	; (8014934 <__sfp_lock_release+0x8>)
 801492e:	f000 b8d3 	b.w	8014ad8 <__retarget_lock_release_recursive>
 8014932:	bf00      	nop
 8014934:	20011961 	.word	0x20011961

08014938 <__sinit_lock_acquire>:
 8014938:	4801      	ldr	r0, [pc, #4]	; (8014940 <__sinit_lock_acquire+0x8>)
 801493a:	f000 b8cc 	b.w	8014ad6 <__retarget_lock_acquire_recursive>
 801493e:	bf00      	nop
 8014940:	20011962 	.word	0x20011962

08014944 <__sinit_lock_release>:
 8014944:	4801      	ldr	r0, [pc, #4]	; (801494c <__sinit_lock_release+0x8>)
 8014946:	f000 b8c7 	b.w	8014ad8 <__retarget_lock_release_recursive>
 801494a:	bf00      	nop
 801494c:	20011962 	.word	0x20011962

08014950 <__sinit>:
 8014950:	b510      	push	{r4, lr}
 8014952:	4604      	mov	r4, r0
 8014954:	f7ff fff0 	bl	8014938 <__sinit_lock_acquire>
 8014958:	69a3      	ldr	r3, [r4, #24]
 801495a:	b11b      	cbz	r3, 8014964 <__sinit+0x14>
 801495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014960:	f7ff bff0 	b.w	8014944 <__sinit_lock_release>
 8014964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014968:	6523      	str	r3, [r4, #80]	; 0x50
 801496a:	4b13      	ldr	r3, [pc, #76]	; (80149b8 <__sinit+0x68>)
 801496c:	4a13      	ldr	r2, [pc, #76]	; (80149bc <__sinit+0x6c>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	62a2      	str	r2, [r4, #40]	; 0x28
 8014972:	42a3      	cmp	r3, r4
 8014974:	bf04      	itt	eq
 8014976:	2301      	moveq	r3, #1
 8014978:	61a3      	streq	r3, [r4, #24]
 801497a:	4620      	mov	r0, r4
 801497c:	f000 f820 	bl	80149c0 <__sfp>
 8014980:	6060      	str	r0, [r4, #4]
 8014982:	4620      	mov	r0, r4
 8014984:	f000 f81c 	bl	80149c0 <__sfp>
 8014988:	60a0      	str	r0, [r4, #8]
 801498a:	4620      	mov	r0, r4
 801498c:	f000 f818 	bl	80149c0 <__sfp>
 8014990:	2200      	movs	r2, #0
 8014992:	60e0      	str	r0, [r4, #12]
 8014994:	2104      	movs	r1, #4
 8014996:	6860      	ldr	r0, [r4, #4]
 8014998:	f7ff ff82 	bl	80148a0 <std>
 801499c:	68a0      	ldr	r0, [r4, #8]
 801499e:	2201      	movs	r2, #1
 80149a0:	2109      	movs	r1, #9
 80149a2:	f7ff ff7d 	bl	80148a0 <std>
 80149a6:	68e0      	ldr	r0, [r4, #12]
 80149a8:	2202      	movs	r2, #2
 80149aa:	2112      	movs	r1, #18
 80149ac:	f7ff ff78 	bl	80148a0 <std>
 80149b0:	2301      	movs	r3, #1
 80149b2:	61a3      	str	r3, [r4, #24]
 80149b4:	e7d2      	b.n	801495c <__sinit+0xc>
 80149b6:	bf00      	nop
 80149b8:	08018ca4 	.word	0x08018ca4
 80149bc:	080148e9 	.word	0x080148e9

080149c0 <__sfp>:
 80149c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149c2:	4607      	mov	r7, r0
 80149c4:	f7ff ffac 	bl	8014920 <__sfp_lock_acquire>
 80149c8:	4b1e      	ldr	r3, [pc, #120]	; (8014a44 <__sfp+0x84>)
 80149ca:	681e      	ldr	r6, [r3, #0]
 80149cc:	69b3      	ldr	r3, [r6, #24]
 80149ce:	b913      	cbnz	r3, 80149d6 <__sfp+0x16>
 80149d0:	4630      	mov	r0, r6
 80149d2:	f7ff ffbd 	bl	8014950 <__sinit>
 80149d6:	3648      	adds	r6, #72	; 0x48
 80149d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80149dc:	3b01      	subs	r3, #1
 80149de:	d503      	bpl.n	80149e8 <__sfp+0x28>
 80149e0:	6833      	ldr	r3, [r6, #0]
 80149e2:	b30b      	cbz	r3, 8014a28 <__sfp+0x68>
 80149e4:	6836      	ldr	r6, [r6, #0]
 80149e6:	e7f7      	b.n	80149d8 <__sfp+0x18>
 80149e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80149ec:	b9d5      	cbnz	r5, 8014a24 <__sfp+0x64>
 80149ee:	4b16      	ldr	r3, [pc, #88]	; (8014a48 <__sfp+0x88>)
 80149f0:	60e3      	str	r3, [r4, #12]
 80149f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80149f6:	6665      	str	r5, [r4, #100]	; 0x64
 80149f8:	f000 f86c 	bl	8014ad4 <__retarget_lock_init_recursive>
 80149fc:	f7ff ff96 	bl	801492c <__sfp_lock_release>
 8014a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a08:	6025      	str	r5, [r4, #0]
 8014a0a:	61a5      	str	r5, [r4, #24]
 8014a0c:	2208      	movs	r2, #8
 8014a0e:	4629      	mov	r1, r5
 8014a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a14:	f000 f87f 	bl	8014b16 <memset>
 8014a18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a20:	4620      	mov	r0, r4
 8014a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a24:	3468      	adds	r4, #104	; 0x68
 8014a26:	e7d9      	b.n	80149dc <__sfp+0x1c>
 8014a28:	2104      	movs	r1, #4
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	f7ff ff62 	bl	80148f4 <__sfmoreglue>
 8014a30:	4604      	mov	r4, r0
 8014a32:	6030      	str	r0, [r6, #0]
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d1d5      	bne.n	80149e4 <__sfp+0x24>
 8014a38:	f7ff ff78 	bl	801492c <__sfp_lock_release>
 8014a3c:	230c      	movs	r3, #12
 8014a3e:	603b      	str	r3, [r7, #0]
 8014a40:	e7ee      	b.n	8014a20 <__sfp+0x60>
 8014a42:	bf00      	nop
 8014a44:	08018ca4 	.word	0x08018ca4
 8014a48:	ffff0001 	.word	0xffff0001

08014a4c <_fwalk_reent>:
 8014a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a50:	4606      	mov	r6, r0
 8014a52:	4688      	mov	r8, r1
 8014a54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a58:	2700      	movs	r7, #0
 8014a5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a5e:	f1b9 0901 	subs.w	r9, r9, #1
 8014a62:	d505      	bpl.n	8014a70 <_fwalk_reent+0x24>
 8014a64:	6824      	ldr	r4, [r4, #0]
 8014a66:	2c00      	cmp	r4, #0
 8014a68:	d1f7      	bne.n	8014a5a <_fwalk_reent+0xe>
 8014a6a:	4638      	mov	r0, r7
 8014a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a70:	89ab      	ldrh	r3, [r5, #12]
 8014a72:	2b01      	cmp	r3, #1
 8014a74:	d907      	bls.n	8014a86 <_fwalk_reent+0x3a>
 8014a76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	d003      	beq.n	8014a86 <_fwalk_reent+0x3a>
 8014a7e:	4629      	mov	r1, r5
 8014a80:	4630      	mov	r0, r6
 8014a82:	47c0      	blx	r8
 8014a84:	4307      	orrs	r7, r0
 8014a86:	3568      	adds	r5, #104	; 0x68
 8014a88:	e7e9      	b.n	8014a5e <_fwalk_reent+0x12>
	...

08014a8c <__libc_init_array>:
 8014a8c:	b570      	push	{r4, r5, r6, lr}
 8014a8e:	4d0d      	ldr	r5, [pc, #52]	; (8014ac4 <__libc_init_array+0x38>)
 8014a90:	4c0d      	ldr	r4, [pc, #52]	; (8014ac8 <__libc_init_array+0x3c>)
 8014a92:	1b64      	subs	r4, r4, r5
 8014a94:	10a4      	asrs	r4, r4, #2
 8014a96:	2600      	movs	r6, #0
 8014a98:	42a6      	cmp	r6, r4
 8014a9a:	d109      	bne.n	8014ab0 <__libc_init_array+0x24>
 8014a9c:	4d0b      	ldr	r5, [pc, #44]	; (8014acc <__libc_init_array+0x40>)
 8014a9e:	4c0c      	ldr	r4, [pc, #48]	; (8014ad0 <__libc_init_array+0x44>)
 8014aa0:	f001 f802 	bl	8015aa8 <_init>
 8014aa4:	1b64      	subs	r4, r4, r5
 8014aa6:	10a4      	asrs	r4, r4, #2
 8014aa8:	2600      	movs	r6, #0
 8014aaa:	42a6      	cmp	r6, r4
 8014aac:	d105      	bne.n	8014aba <__libc_init_array+0x2e>
 8014aae:	bd70      	pop	{r4, r5, r6, pc}
 8014ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ab4:	4798      	blx	r3
 8014ab6:	3601      	adds	r6, #1
 8014ab8:	e7ee      	b.n	8014a98 <__libc_init_array+0xc>
 8014aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8014abe:	4798      	blx	r3
 8014ac0:	3601      	adds	r6, #1
 8014ac2:	e7f2      	b.n	8014aaa <__libc_init_array+0x1e>
 8014ac4:	08018d94 	.word	0x08018d94
 8014ac8:	08018d94 	.word	0x08018d94
 8014acc:	08018d94 	.word	0x08018d94
 8014ad0:	08018d98 	.word	0x08018d98

08014ad4 <__retarget_lock_init_recursive>:
 8014ad4:	4770      	bx	lr

08014ad6 <__retarget_lock_acquire_recursive>:
 8014ad6:	4770      	bx	lr

08014ad8 <__retarget_lock_release_recursive>:
 8014ad8:	4770      	bx	lr

08014ada <memcmp>:
 8014ada:	b510      	push	{r4, lr}
 8014adc:	3901      	subs	r1, #1
 8014ade:	4402      	add	r2, r0
 8014ae0:	4290      	cmp	r0, r2
 8014ae2:	d101      	bne.n	8014ae8 <memcmp+0xe>
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	e005      	b.n	8014af4 <memcmp+0x1a>
 8014ae8:	7803      	ldrb	r3, [r0, #0]
 8014aea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014aee:	42a3      	cmp	r3, r4
 8014af0:	d001      	beq.n	8014af6 <memcmp+0x1c>
 8014af2:	1b18      	subs	r0, r3, r4
 8014af4:	bd10      	pop	{r4, pc}
 8014af6:	3001      	adds	r0, #1
 8014af8:	e7f2      	b.n	8014ae0 <memcmp+0x6>

08014afa <memcpy>:
 8014afa:	440a      	add	r2, r1
 8014afc:	4291      	cmp	r1, r2
 8014afe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014b02:	d100      	bne.n	8014b06 <memcpy+0xc>
 8014b04:	4770      	bx	lr
 8014b06:	b510      	push	{r4, lr}
 8014b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b10:	4291      	cmp	r1, r2
 8014b12:	d1f9      	bne.n	8014b08 <memcpy+0xe>
 8014b14:	bd10      	pop	{r4, pc}

08014b16 <memset>:
 8014b16:	4402      	add	r2, r0
 8014b18:	4603      	mov	r3, r0
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	d100      	bne.n	8014b20 <memset+0xa>
 8014b1e:	4770      	bx	lr
 8014b20:	f803 1b01 	strb.w	r1, [r3], #1
 8014b24:	e7f9      	b.n	8014b1a <memset+0x4>
	...

08014b28 <sbrk_aligned>:
 8014b28:	b570      	push	{r4, r5, r6, lr}
 8014b2a:	4e0e      	ldr	r6, [pc, #56]	; (8014b64 <sbrk_aligned+0x3c>)
 8014b2c:	460c      	mov	r4, r1
 8014b2e:	6831      	ldr	r1, [r6, #0]
 8014b30:	4605      	mov	r5, r0
 8014b32:	b911      	cbnz	r1, 8014b3a <sbrk_aligned+0x12>
 8014b34:	f000 f94c 	bl	8014dd0 <_sbrk_r>
 8014b38:	6030      	str	r0, [r6, #0]
 8014b3a:	4621      	mov	r1, r4
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	f000 f947 	bl	8014dd0 <_sbrk_r>
 8014b42:	1c43      	adds	r3, r0, #1
 8014b44:	d00a      	beq.n	8014b5c <sbrk_aligned+0x34>
 8014b46:	1cc4      	adds	r4, r0, #3
 8014b48:	f024 0403 	bic.w	r4, r4, #3
 8014b4c:	42a0      	cmp	r0, r4
 8014b4e:	d007      	beq.n	8014b60 <sbrk_aligned+0x38>
 8014b50:	1a21      	subs	r1, r4, r0
 8014b52:	4628      	mov	r0, r5
 8014b54:	f000 f93c 	bl	8014dd0 <_sbrk_r>
 8014b58:	3001      	adds	r0, #1
 8014b5a:	d101      	bne.n	8014b60 <sbrk_aligned+0x38>
 8014b5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b60:	4620      	mov	r0, r4
 8014b62:	bd70      	pop	{r4, r5, r6, pc}
 8014b64:	20011968 	.word	0x20011968

08014b68 <_malloc_r>:
 8014b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b6c:	1ccd      	adds	r5, r1, #3
 8014b6e:	f025 0503 	bic.w	r5, r5, #3
 8014b72:	3508      	adds	r5, #8
 8014b74:	2d0c      	cmp	r5, #12
 8014b76:	bf38      	it	cc
 8014b78:	250c      	movcc	r5, #12
 8014b7a:	2d00      	cmp	r5, #0
 8014b7c:	4607      	mov	r7, r0
 8014b7e:	db01      	blt.n	8014b84 <_malloc_r+0x1c>
 8014b80:	42a9      	cmp	r1, r5
 8014b82:	d905      	bls.n	8014b90 <_malloc_r+0x28>
 8014b84:	230c      	movs	r3, #12
 8014b86:	603b      	str	r3, [r7, #0]
 8014b88:	2600      	movs	r6, #0
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b90:	4e2e      	ldr	r6, [pc, #184]	; (8014c4c <_malloc_r+0xe4>)
 8014b92:	f000 fa9f 	bl	80150d4 <__malloc_lock>
 8014b96:	6833      	ldr	r3, [r6, #0]
 8014b98:	461c      	mov	r4, r3
 8014b9a:	bb34      	cbnz	r4, 8014bea <_malloc_r+0x82>
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	f7ff ffc2 	bl	8014b28 <sbrk_aligned>
 8014ba4:	1c43      	adds	r3, r0, #1
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	d14d      	bne.n	8014c46 <_malloc_r+0xde>
 8014baa:	6834      	ldr	r4, [r6, #0]
 8014bac:	4626      	mov	r6, r4
 8014bae:	2e00      	cmp	r6, #0
 8014bb0:	d140      	bne.n	8014c34 <_malloc_r+0xcc>
 8014bb2:	6823      	ldr	r3, [r4, #0]
 8014bb4:	4631      	mov	r1, r6
 8014bb6:	4638      	mov	r0, r7
 8014bb8:	eb04 0803 	add.w	r8, r4, r3
 8014bbc:	f000 f908 	bl	8014dd0 <_sbrk_r>
 8014bc0:	4580      	cmp	r8, r0
 8014bc2:	d13a      	bne.n	8014c3a <_malloc_r+0xd2>
 8014bc4:	6821      	ldr	r1, [r4, #0]
 8014bc6:	3503      	adds	r5, #3
 8014bc8:	1a6d      	subs	r5, r5, r1
 8014bca:	f025 0503 	bic.w	r5, r5, #3
 8014bce:	3508      	adds	r5, #8
 8014bd0:	2d0c      	cmp	r5, #12
 8014bd2:	bf38      	it	cc
 8014bd4:	250c      	movcc	r5, #12
 8014bd6:	4629      	mov	r1, r5
 8014bd8:	4638      	mov	r0, r7
 8014bda:	f7ff ffa5 	bl	8014b28 <sbrk_aligned>
 8014bde:	3001      	adds	r0, #1
 8014be0:	d02b      	beq.n	8014c3a <_malloc_r+0xd2>
 8014be2:	6823      	ldr	r3, [r4, #0]
 8014be4:	442b      	add	r3, r5
 8014be6:	6023      	str	r3, [r4, #0]
 8014be8:	e00e      	b.n	8014c08 <_malloc_r+0xa0>
 8014bea:	6822      	ldr	r2, [r4, #0]
 8014bec:	1b52      	subs	r2, r2, r5
 8014bee:	d41e      	bmi.n	8014c2e <_malloc_r+0xc6>
 8014bf0:	2a0b      	cmp	r2, #11
 8014bf2:	d916      	bls.n	8014c22 <_malloc_r+0xba>
 8014bf4:	1961      	adds	r1, r4, r5
 8014bf6:	42a3      	cmp	r3, r4
 8014bf8:	6025      	str	r5, [r4, #0]
 8014bfa:	bf18      	it	ne
 8014bfc:	6059      	strne	r1, [r3, #4]
 8014bfe:	6863      	ldr	r3, [r4, #4]
 8014c00:	bf08      	it	eq
 8014c02:	6031      	streq	r1, [r6, #0]
 8014c04:	5162      	str	r2, [r4, r5]
 8014c06:	604b      	str	r3, [r1, #4]
 8014c08:	4638      	mov	r0, r7
 8014c0a:	f104 060b 	add.w	r6, r4, #11
 8014c0e:	f000 fa67 	bl	80150e0 <__malloc_unlock>
 8014c12:	f026 0607 	bic.w	r6, r6, #7
 8014c16:	1d23      	adds	r3, r4, #4
 8014c18:	1af2      	subs	r2, r6, r3
 8014c1a:	d0b6      	beq.n	8014b8a <_malloc_r+0x22>
 8014c1c:	1b9b      	subs	r3, r3, r6
 8014c1e:	50a3      	str	r3, [r4, r2]
 8014c20:	e7b3      	b.n	8014b8a <_malloc_r+0x22>
 8014c22:	6862      	ldr	r2, [r4, #4]
 8014c24:	42a3      	cmp	r3, r4
 8014c26:	bf0c      	ite	eq
 8014c28:	6032      	streq	r2, [r6, #0]
 8014c2a:	605a      	strne	r2, [r3, #4]
 8014c2c:	e7ec      	b.n	8014c08 <_malloc_r+0xa0>
 8014c2e:	4623      	mov	r3, r4
 8014c30:	6864      	ldr	r4, [r4, #4]
 8014c32:	e7b2      	b.n	8014b9a <_malloc_r+0x32>
 8014c34:	4634      	mov	r4, r6
 8014c36:	6876      	ldr	r6, [r6, #4]
 8014c38:	e7b9      	b.n	8014bae <_malloc_r+0x46>
 8014c3a:	230c      	movs	r3, #12
 8014c3c:	603b      	str	r3, [r7, #0]
 8014c3e:	4638      	mov	r0, r7
 8014c40:	f000 fa4e 	bl	80150e0 <__malloc_unlock>
 8014c44:	e7a1      	b.n	8014b8a <_malloc_r+0x22>
 8014c46:	6025      	str	r5, [r4, #0]
 8014c48:	e7de      	b.n	8014c08 <_malloc_r+0xa0>
 8014c4a:	bf00      	nop
 8014c4c:	20011964 	.word	0x20011964

08014c50 <iprintf>:
 8014c50:	b40f      	push	{r0, r1, r2, r3}
 8014c52:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <iprintf+0x2c>)
 8014c54:	b513      	push	{r0, r1, r4, lr}
 8014c56:	681c      	ldr	r4, [r3, #0]
 8014c58:	b124      	cbz	r4, 8014c64 <iprintf+0x14>
 8014c5a:	69a3      	ldr	r3, [r4, #24]
 8014c5c:	b913      	cbnz	r3, 8014c64 <iprintf+0x14>
 8014c5e:	4620      	mov	r0, r4
 8014c60:	f7ff fe76 	bl	8014950 <__sinit>
 8014c64:	ab05      	add	r3, sp, #20
 8014c66:	9a04      	ldr	r2, [sp, #16]
 8014c68:	68a1      	ldr	r1, [r4, #8]
 8014c6a:	9301      	str	r3, [sp, #4]
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	f000 fab3 	bl	80151d8 <_vfiprintf_r>
 8014c72:	b002      	add	sp, #8
 8014c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c78:	b004      	add	sp, #16
 8014c7a:	4770      	bx	lr
 8014c7c:	2000002c 	.word	0x2000002c

08014c80 <rand>:
 8014c80:	4b16      	ldr	r3, [pc, #88]	; (8014cdc <rand+0x5c>)
 8014c82:	b510      	push	{r4, lr}
 8014c84:	681c      	ldr	r4, [r3, #0]
 8014c86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c88:	b9b3      	cbnz	r3, 8014cb8 <rand+0x38>
 8014c8a:	2018      	movs	r0, #24
 8014c8c:	f000 fa1a 	bl	80150c4 <malloc>
 8014c90:	63a0      	str	r0, [r4, #56]	; 0x38
 8014c92:	b928      	cbnz	r0, 8014ca0 <rand+0x20>
 8014c94:	4602      	mov	r2, r0
 8014c96:	4b12      	ldr	r3, [pc, #72]	; (8014ce0 <rand+0x60>)
 8014c98:	4812      	ldr	r0, [pc, #72]	; (8014ce4 <rand+0x64>)
 8014c9a:	214e      	movs	r1, #78	; 0x4e
 8014c9c:	f000 f8fe 	bl	8014e9c <__assert_func>
 8014ca0:	4a11      	ldr	r2, [pc, #68]	; (8014ce8 <rand+0x68>)
 8014ca2:	4b12      	ldr	r3, [pc, #72]	; (8014cec <rand+0x6c>)
 8014ca4:	e9c0 2300 	strd	r2, r3, [r0]
 8014ca8:	4b11      	ldr	r3, [pc, #68]	; (8014cf0 <rand+0x70>)
 8014caa:	6083      	str	r3, [r0, #8]
 8014cac:	230b      	movs	r3, #11
 8014cae:	8183      	strh	r3, [r0, #12]
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014cb8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014cba:	4a0e      	ldr	r2, [pc, #56]	; (8014cf4 <rand+0x74>)
 8014cbc:	6920      	ldr	r0, [r4, #16]
 8014cbe:	6963      	ldr	r3, [r4, #20]
 8014cc0:	490d      	ldr	r1, [pc, #52]	; (8014cf8 <rand+0x78>)
 8014cc2:	4342      	muls	r2, r0
 8014cc4:	fb01 2203 	mla	r2, r1, r3, r2
 8014cc8:	fba0 0101 	umull	r0, r1, r0, r1
 8014ccc:	1c43      	adds	r3, r0, #1
 8014cce:	eb42 0001 	adc.w	r0, r2, r1
 8014cd2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8014cd6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014cda:	bd10      	pop	{r4, pc}
 8014cdc:	2000002c 	.word	0x2000002c
 8014ce0:	08018ca8 	.word	0x08018ca8
 8014ce4:	08018cbf 	.word	0x08018cbf
 8014ce8:	abcd330e 	.word	0xabcd330e
 8014cec:	e66d1234 	.word	0xe66d1234
 8014cf0:	0005deec 	.word	0x0005deec
 8014cf4:	5851f42d 	.word	0x5851f42d
 8014cf8:	4c957f2d 	.word	0x4c957f2d

08014cfc <cleanup_glue>:
 8014cfc:	b538      	push	{r3, r4, r5, lr}
 8014cfe:	460c      	mov	r4, r1
 8014d00:	6809      	ldr	r1, [r1, #0]
 8014d02:	4605      	mov	r5, r0
 8014d04:	b109      	cbz	r1, 8014d0a <cleanup_glue+0xe>
 8014d06:	f7ff fff9 	bl	8014cfc <cleanup_glue>
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d12:	f000 b9eb 	b.w	80150ec <_free_r>
	...

08014d18 <_reclaim_reent>:
 8014d18:	4b2c      	ldr	r3, [pc, #176]	; (8014dcc <_reclaim_reent+0xb4>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4283      	cmp	r3, r0
 8014d1e:	b570      	push	{r4, r5, r6, lr}
 8014d20:	4604      	mov	r4, r0
 8014d22:	d051      	beq.n	8014dc8 <_reclaim_reent+0xb0>
 8014d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014d26:	b143      	cbz	r3, 8014d3a <_reclaim_reent+0x22>
 8014d28:	68db      	ldr	r3, [r3, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d14a      	bne.n	8014dc4 <_reclaim_reent+0xac>
 8014d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d30:	6819      	ldr	r1, [r3, #0]
 8014d32:	b111      	cbz	r1, 8014d3a <_reclaim_reent+0x22>
 8014d34:	4620      	mov	r0, r4
 8014d36:	f000 f9d9 	bl	80150ec <_free_r>
 8014d3a:	6961      	ldr	r1, [r4, #20]
 8014d3c:	b111      	cbz	r1, 8014d44 <_reclaim_reent+0x2c>
 8014d3e:	4620      	mov	r0, r4
 8014d40:	f000 f9d4 	bl	80150ec <_free_r>
 8014d44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014d46:	b111      	cbz	r1, 8014d4e <_reclaim_reent+0x36>
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f000 f9cf 	bl	80150ec <_free_r>
 8014d4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014d50:	b111      	cbz	r1, 8014d58 <_reclaim_reent+0x40>
 8014d52:	4620      	mov	r0, r4
 8014d54:	f000 f9ca 	bl	80150ec <_free_r>
 8014d58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014d5a:	b111      	cbz	r1, 8014d62 <_reclaim_reent+0x4a>
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f000 f9c5 	bl	80150ec <_free_r>
 8014d62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014d64:	b111      	cbz	r1, 8014d6c <_reclaim_reent+0x54>
 8014d66:	4620      	mov	r0, r4
 8014d68:	f000 f9c0 	bl	80150ec <_free_r>
 8014d6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014d6e:	b111      	cbz	r1, 8014d76 <_reclaim_reent+0x5e>
 8014d70:	4620      	mov	r0, r4
 8014d72:	f000 f9bb 	bl	80150ec <_free_r>
 8014d76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014d78:	b111      	cbz	r1, 8014d80 <_reclaim_reent+0x68>
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	f000 f9b6 	bl	80150ec <_free_r>
 8014d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d82:	b111      	cbz	r1, 8014d8a <_reclaim_reent+0x72>
 8014d84:	4620      	mov	r0, r4
 8014d86:	f000 f9b1 	bl	80150ec <_free_r>
 8014d8a:	69a3      	ldr	r3, [r4, #24]
 8014d8c:	b1e3      	cbz	r3, 8014dc8 <_reclaim_reent+0xb0>
 8014d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014d90:	4620      	mov	r0, r4
 8014d92:	4798      	blx	r3
 8014d94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014d96:	b1b9      	cbz	r1, 8014dc8 <_reclaim_reent+0xb0>
 8014d98:	4620      	mov	r0, r4
 8014d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d9e:	f7ff bfad 	b.w	8014cfc <cleanup_glue>
 8014da2:	5949      	ldr	r1, [r1, r5]
 8014da4:	b941      	cbnz	r1, 8014db8 <_reclaim_reent+0xa0>
 8014da6:	3504      	adds	r5, #4
 8014da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014daa:	2d80      	cmp	r5, #128	; 0x80
 8014dac:	68d9      	ldr	r1, [r3, #12]
 8014dae:	d1f8      	bne.n	8014da2 <_reclaim_reent+0x8a>
 8014db0:	4620      	mov	r0, r4
 8014db2:	f000 f99b 	bl	80150ec <_free_r>
 8014db6:	e7ba      	b.n	8014d2e <_reclaim_reent+0x16>
 8014db8:	680e      	ldr	r6, [r1, #0]
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f000 f996 	bl	80150ec <_free_r>
 8014dc0:	4631      	mov	r1, r6
 8014dc2:	e7ef      	b.n	8014da4 <_reclaim_reent+0x8c>
 8014dc4:	2500      	movs	r5, #0
 8014dc6:	e7ef      	b.n	8014da8 <_reclaim_reent+0x90>
 8014dc8:	bd70      	pop	{r4, r5, r6, pc}
 8014dca:	bf00      	nop
 8014dcc:	2000002c 	.word	0x2000002c

08014dd0 <_sbrk_r>:
 8014dd0:	b538      	push	{r3, r4, r5, lr}
 8014dd2:	4d06      	ldr	r5, [pc, #24]	; (8014dec <_sbrk_r+0x1c>)
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	4608      	mov	r0, r1
 8014dda:	602b      	str	r3, [r5, #0]
 8014ddc:	f7eb feda 	bl	8000b94 <_sbrk>
 8014de0:	1c43      	adds	r3, r0, #1
 8014de2:	d102      	bne.n	8014dea <_sbrk_r+0x1a>
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	b103      	cbz	r3, 8014dea <_sbrk_r+0x1a>
 8014de8:	6023      	str	r3, [r4, #0]
 8014dea:	bd38      	pop	{r3, r4, r5, pc}
 8014dec:	2001196c 	.word	0x2001196c

08014df0 <__sread>:
 8014df0:	b510      	push	{r4, lr}
 8014df2:	460c      	mov	r4, r1
 8014df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014df8:	f000 fcb2 	bl	8015760 <_read_r>
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	bfab      	itete	ge
 8014e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014e02:	89a3      	ldrhlt	r3, [r4, #12]
 8014e04:	181b      	addge	r3, r3, r0
 8014e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014e0a:	bfac      	ite	ge
 8014e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014e0e:	81a3      	strhlt	r3, [r4, #12]
 8014e10:	bd10      	pop	{r4, pc}

08014e12 <__swrite>:
 8014e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e16:	461f      	mov	r7, r3
 8014e18:	898b      	ldrh	r3, [r1, #12]
 8014e1a:	05db      	lsls	r3, r3, #23
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	460c      	mov	r4, r1
 8014e20:	4616      	mov	r6, r2
 8014e22:	d505      	bpl.n	8014e30 <__swrite+0x1e>
 8014e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e28:	2302      	movs	r3, #2
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	f000 f938 	bl	80150a0 <_lseek_r>
 8014e30:	89a3      	ldrh	r3, [r4, #12]
 8014e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e3a:	81a3      	strh	r3, [r4, #12]
 8014e3c:	4632      	mov	r2, r6
 8014e3e:	463b      	mov	r3, r7
 8014e40:	4628      	mov	r0, r5
 8014e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e46:	f000 b817 	b.w	8014e78 <_write_r>

08014e4a <__sseek>:
 8014e4a:	b510      	push	{r4, lr}
 8014e4c:	460c      	mov	r4, r1
 8014e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e52:	f000 f925 	bl	80150a0 <_lseek_r>
 8014e56:	1c43      	adds	r3, r0, #1
 8014e58:	89a3      	ldrh	r3, [r4, #12]
 8014e5a:	bf15      	itete	ne
 8014e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014e66:	81a3      	strheq	r3, [r4, #12]
 8014e68:	bf18      	it	ne
 8014e6a:	81a3      	strhne	r3, [r4, #12]
 8014e6c:	bd10      	pop	{r4, pc}

08014e6e <__sclose>:
 8014e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e72:	f000 b831 	b.w	8014ed8 <_close_r>
	...

08014e78 <_write_r>:
 8014e78:	b538      	push	{r3, r4, r5, lr}
 8014e7a:	4d07      	ldr	r5, [pc, #28]	; (8014e98 <_write_r+0x20>)
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	4608      	mov	r0, r1
 8014e80:	4611      	mov	r1, r2
 8014e82:	2200      	movs	r2, #0
 8014e84:	602a      	str	r2, [r5, #0]
 8014e86:	461a      	mov	r2, r3
 8014e88:	f7eb fe33 	bl	8000af2 <_write>
 8014e8c:	1c43      	adds	r3, r0, #1
 8014e8e:	d102      	bne.n	8014e96 <_write_r+0x1e>
 8014e90:	682b      	ldr	r3, [r5, #0]
 8014e92:	b103      	cbz	r3, 8014e96 <_write_r+0x1e>
 8014e94:	6023      	str	r3, [r4, #0]
 8014e96:	bd38      	pop	{r3, r4, r5, pc}
 8014e98:	2001196c 	.word	0x2001196c

08014e9c <__assert_func>:
 8014e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e9e:	4614      	mov	r4, r2
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	4b09      	ldr	r3, [pc, #36]	; (8014ec8 <__assert_func+0x2c>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	68d8      	ldr	r0, [r3, #12]
 8014eaa:	b14c      	cbz	r4, 8014ec0 <__assert_func+0x24>
 8014eac:	4b07      	ldr	r3, [pc, #28]	; (8014ecc <__assert_func+0x30>)
 8014eae:	9100      	str	r1, [sp, #0]
 8014eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014eb4:	4906      	ldr	r1, [pc, #24]	; (8014ed0 <__assert_func+0x34>)
 8014eb6:	462b      	mov	r3, r5
 8014eb8:	f000 f8e0 	bl	801507c <fiprintf>
 8014ebc:	f000 fd22 	bl	8015904 <abort>
 8014ec0:	4b04      	ldr	r3, [pc, #16]	; (8014ed4 <__assert_func+0x38>)
 8014ec2:	461c      	mov	r4, r3
 8014ec4:	e7f3      	b.n	8014eae <__assert_func+0x12>
 8014ec6:	bf00      	nop
 8014ec8:	2000002c 	.word	0x2000002c
 8014ecc:	08018d1a 	.word	0x08018d1a
 8014ed0:	08018d27 	.word	0x08018d27
 8014ed4:	08018d55 	.word	0x08018d55

08014ed8 <_close_r>:
 8014ed8:	b538      	push	{r3, r4, r5, lr}
 8014eda:	4d06      	ldr	r5, [pc, #24]	; (8014ef4 <_close_r+0x1c>)
 8014edc:	2300      	movs	r3, #0
 8014ede:	4604      	mov	r4, r0
 8014ee0:	4608      	mov	r0, r1
 8014ee2:	602b      	str	r3, [r5, #0]
 8014ee4:	f7eb fe21 	bl	8000b2a <_close>
 8014ee8:	1c43      	adds	r3, r0, #1
 8014eea:	d102      	bne.n	8014ef2 <_close_r+0x1a>
 8014eec:	682b      	ldr	r3, [r5, #0]
 8014eee:	b103      	cbz	r3, 8014ef2 <_close_r+0x1a>
 8014ef0:	6023      	str	r3, [r4, #0]
 8014ef2:	bd38      	pop	{r3, r4, r5, pc}
 8014ef4:	2001196c 	.word	0x2001196c

08014ef8 <__sflush_r>:
 8014ef8:	898a      	ldrh	r2, [r1, #12]
 8014efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014efe:	4605      	mov	r5, r0
 8014f00:	0710      	lsls	r0, r2, #28
 8014f02:	460c      	mov	r4, r1
 8014f04:	d458      	bmi.n	8014fb8 <__sflush_r+0xc0>
 8014f06:	684b      	ldr	r3, [r1, #4]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	dc05      	bgt.n	8014f18 <__sflush_r+0x20>
 8014f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	dc02      	bgt.n	8014f18 <__sflush_r+0x20>
 8014f12:	2000      	movs	r0, #0
 8014f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f1a:	2e00      	cmp	r6, #0
 8014f1c:	d0f9      	beq.n	8014f12 <__sflush_r+0x1a>
 8014f1e:	2300      	movs	r3, #0
 8014f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f24:	682f      	ldr	r7, [r5, #0]
 8014f26:	602b      	str	r3, [r5, #0]
 8014f28:	d032      	beq.n	8014f90 <__sflush_r+0x98>
 8014f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f2c:	89a3      	ldrh	r3, [r4, #12]
 8014f2e:	075a      	lsls	r2, r3, #29
 8014f30:	d505      	bpl.n	8014f3e <__sflush_r+0x46>
 8014f32:	6863      	ldr	r3, [r4, #4]
 8014f34:	1ac0      	subs	r0, r0, r3
 8014f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f38:	b10b      	cbz	r3, 8014f3e <__sflush_r+0x46>
 8014f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f3c:	1ac0      	subs	r0, r0, r3
 8014f3e:	2300      	movs	r3, #0
 8014f40:	4602      	mov	r2, r0
 8014f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f44:	6a21      	ldr	r1, [r4, #32]
 8014f46:	4628      	mov	r0, r5
 8014f48:	47b0      	blx	r6
 8014f4a:	1c43      	adds	r3, r0, #1
 8014f4c:	89a3      	ldrh	r3, [r4, #12]
 8014f4e:	d106      	bne.n	8014f5e <__sflush_r+0x66>
 8014f50:	6829      	ldr	r1, [r5, #0]
 8014f52:	291d      	cmp	r1, #29
 8014f54:	d82c      	bhi.n	8014fb0 <__sflush_r+0xb8>
 8014f56:	4a2a      	ldr	r2, [pc, #168]	; (8015000 <__sflush_r+0x108>)
 8014f58:	40ca      	lsrs	r2, r1
 8014f5a:	07d6      	lsls	r6, r2, #31
 8014f5c:	d528      	bpl.n	8014fb0 <__sflush_r+0xb8>
 8014f5e:	2200      	movs	r2, #0
 8014f60:	6062      	str	r2, [r4, #4]
 8014f62:	04d9      	lsls	r1, r3, #19
 8014f64:	6922      	ldr	r2, [r4, #16]
 8014f66:	6022      	str	r2, [r4, #0]
 8014f68:	d504      	bpl.n	8014f74 <__sflush_r+0x7c>
 8014f6a:	1c42      	adds	r2, r0, #1
 8014f6c:	d101      	bne.n	8014f72 <__sflush_r+0x7a>
 8014f6e:	682b      	ldr	r3, [r5, #0]
 8014f70:	b903      	cbnz	r3, 8014f74 <__sflush_r+0x7c>
 8014f72:	6560      	str	r0, [r4, #84]	; 0x54
 8014f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f76:	602f      	str	r7, [r5, #0]
 8014f78:	2900      	cmp	r1, #0
 8014f7a:	d0ca      	beq.n	8014f12 <__sflush_r+0x1a>
 8014f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f80:	4299      	cmp	r1, r3
 8014f82:	d002      	beq.n	8014f8a <__sflush_r+0x92>
 8014f84:	4628      	mov	r0, r5
 8014f86:	f000 f8b1 	bl	80150ec <_free_r>
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8014f8e:	e7c1      	b.n	8014f14 <__sflush_r+0x1c>
 8014f90:	6a21      	ldr	r1, [r4, #32]
 8014f92:	2301      	movs	r3, #1
 8014f94:	4628      	mov	r0, r5
 8014f96:	47b0      	blx	r6
 8014f98:	1c41      	adds	r1, r0, #1
 8014f9a:	d1c7      	bne.n	8014f2c <__sflush_r+0x34>
 8014f9c:	682b      	ldr	r3, [r5, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d0c4      	beq.n	8014f2c <__sflush_r+0x34>
 8014fa2:	2b1d      	cmp	r3, #29
 8014fa4:	d001      	beq.n	8014faa <__sflush_r+0xb2>
 8014fa6:	2b16      	cmp	r3, #22
 8014fa8:	d101      	bne.n	8014fae <__sflush_r+0xb6>
 8014faa:	602f      	str	r7, [r5, #0]
 8014fac:	e7b1      	b.n	8014f12 <__sflush_r+0x1a>
 8014fae:	89a3      	ldrh	r3, [r4, #12]
 8014fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fb4:	81a3      	strh	r3, [r4, #12]
 8014fb6:	e7ad      	b.n	8014f14 <__sflush_r+0x1c>
 8014fb8:	690f      	ldr	r7, [r1, #16]
 8014fba:	2f00      	cmp	r7, #0
 8014fbc:	d0a9      	beq.n	8014f12 <__sflush_r+0x1a>
 8014fbe:	0793      	lsls	r3, r2, #30
 8014fc0:	680e      	ldr	r6, [r1, #0]
 8014fc2:	bf08      	it	eq
 8014fc4:	694b      	ldreq	r3, [r1, #20]
 8014fc6:	600f      	str	r7, [r1, #0]
 8014fc8:	bf18      	it	ne
 8014fca:	2300      	movne	r3, #0
 8014fcc:	eba6 0807 	sub.w	r8, r6, r7
 8014fd0:	608b      	str	r3, [r1, #8]
 8014fd2:	f1b8 0f00 	cmp.w	r8, #0
 8014fd6:	dd9c      	ble.n	8014f12 <__sflush_r+0x1a>
 8014fd8:	6a21      	ldr	r1, [r4, #32]
 8014fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014fdc:	4643      	mov	r3, r8
 8014fde:	463a      	mov	r2, r7
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	47b0      	blx	r6
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	dc06      	bgt.n	8014ff6 <__sflush_r+0xfe>
 8014fe8:	89a3      	ldrh	r3, [r4, #12]
 8014fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fee:	81a3      	strh	r3, [r4, #12]
 8014ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ff4:	e78e      	b.n	8014f14 <__sflush_r+0x1c>
 8014ff6:	4407      	add	r7, r0
 8014ff8:	eba8 0800 	sub.w	r8, r8, r0
 8014ffc:	e7e9      	b.n	8014fd2 <__sflush_r+0xda>
 8014ffe:	bf00      	nop
 8015000:	20400001 	.word	0x20400001

08015004 <_fflush_r>:
 8015004:	b538      	push	{r3, r4, r5, lr}
 8015006:	690b      	ldr	r3, [r1, #16]
 8015008:	4605      	mov	r5, r0
 801500a:	460c      	mov	r4, r1
 801500c:	b913      	cbnz	r3, 8015014 <_fflush_r+0x10>
 801500e:	2500      	movs	r5, #0
 8015010:	4628      	mov	r0, r5
 8015012:	bd38      	pop	{r3, r4, r5, pc}
 8015014:	b118      	cbz	r0, 801501e <_fflush_r+0x1a>
 8015016:	6983      	ldr	r3, [r0, #24]
 8015018:	b90b      	cbnz	r3, 801501e <_fflush_r+0x1a>
 801501a:	f7ff fc99 	bl	8014950 <__sinit>
 801501e:	4b14      	ldr	r3, [pc, #80]	; (8015070 <_fflush_r+0x6c>)
 8015020:	429c      	cmp	r4, r3
 8015022:	d11b      	bne.n	801505c <_fflush_r+0x58>
 8015024:	686c      	ldr	r4, [r5, #4]
 8015026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d0ef      	beq.n	801500e <_fflush_r+0xa>
 801502e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015030:	07d0      	lsls	r0, r2, #31
 8015032:	d404      	bmi.n	801503e <_fflush_r+0x3a>
 8015034:	0599      	lsls	r1, r3, #22
 8015036:	d402      	bmi.n	801503e <_fflush_r+0x3a>
 8015038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801503a:	f7ff fd4c 	bl	8014ad6 <__retarget_lock_acquire_recursive>
 801503e:	4628      	mov	r0, r5
 8015040:	4621      	mov	r1, r4
 8015042:	f7ff ff59 	bl	8014ef8 <__sflush_r>
 8015046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015048:	07da      	lsls	r2, r3, #31
 801504a:	4605      	mov	r5, r0
 801504c:	d4e0      	bmi.n	8015010 <_fflush_r+0xc>
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	059b      	lsls	r3, r3, #22
 8015052:	d4dd      	bmi.n	8015010 <_fflush_r+0xc>
 8015054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015056:	f7ff fd3f 	bl	8014ad8 <__retarget_lock_release_recursive>
 801505a:	e7d9      	b.n	8015010 <_fflush_r+0xc>
 801505c:	4b05      	ldr	r3, [pc, #20]	; (8015074 <_fflush_r+0x70>)
 801505e:	429c      	cmp	r4, r3
 8015060:	d101      	bne.n	8015066 <_fflush_r+0x62>
 8015062:	68ac      	ldr	r4, [r5, #8]
 8015064:	e7df      	b.n	8015026 <_fflush_r+0x22>
 8015066:	4b04      	ldr	r3, [pc, #16]	; (8015078 <_fflush_r+0x74>)
 8015068:	429c      	cmp	r4, r3
 801506a:	bf08      	it	eq
 801506c:	68ec      	ldreq	r4, [r5, #12]
 801506e:	e7da      	b.n	8015026 <_fflush_r+0x22>
 8015070:	08018c64 	.word	0x08018c64
 8015074:	08018c84 	.word	0x08018c84
 8015078:	08018c44 	.word	0x08018c44

0801507c <fiprintf>:
 801507c:	b40e      	push	{r1, r2, r3}
 801507e:	b503      	push	{r0, r1, lr}
 8015080:	4601      	mov	r1, r0
 8015082:	ab03      	add	r3, sp, #12
 8015084:	4805      	ldr	r0, [pc, #20]	; (801509c <fiprintf+0x20>)
 8015086:	f853 2b04 	ldr.w	r2, [r3], #4
 801508a:	6800      	ldr	r0, [r0, #0]
 801508c:	9301      	str	r3, [sp, #4]
 801508e:	f000 f8a3 	bl	80151d8 <_vfiprintf_r>
 8015092:	b002      	add	sp, #8
 8015094:	f85d eb04 	ldr.w	lr, [sp], #4
 8015098:	b003      	add	sp, #12
 801509a:	4770      	bx	lr
 801509c:	2000002c 	.word	0x2000002c

080150a0 <_lseek_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	4d07      	ldr	r5, [pc, #28]	; (80150c0 <_lseek_r+0x20>)
 80150a4:	4604      	mov	r4, r0
 80150a6:	4608      	mov	r0, r1
 80150a8:	4611      	mov	r1, r2
 80150aa:	2200      	movs	r2, #0
 80150ac:	602a      	str	r2, [r5, #0]
 80150ae:	461a      	mov	r2, r3
 80150b0:	f7eb fd62 	bl	8000b78 <_lseek>
 80150b4:	1c43      	adds	r3, r0, #1
 80150b6:	d102      	bne.n	80150be <_lseek_r+0x1e>
 80150b8:	682b      	ldr	r3, [r5, #0]
 80150ba:	b103      	cbz	r3, 80150be <_lseek_r+0x1e>
 80150bc:	6023      	str	r3, [r4, #0]
 80150be:	bd38      	pop	{r3, r4, r5, pc}
 80150c0:	2001196c 	.word	0x2001196c

080150c4 <malloc>:
 80150c4:	4b02      	ldr	r3, [pc, #8]	; (80150d0 <malloc+0xc>)
 80150c6:	4601      	mov	r1, r0
 80150c8:	6818      	ldr	r0, [r3, #0]
 80150ca:	f7ff bd4d 	b.w	8014b68 <_malloc_r>
 80150ce:	bf00      	nop
 80150d0:	2000002c 	.word	0x2000002c

080150d4 <__malloc_lock>:
 80150d4:	4801      	ldr	r0, [pc, #4]	; (80150dc <__malloc_lock+0x8>)
 80150d6:	f7ff bcfe 	b.w	8014ad6 <__retarget_lock_acquire_recursive>
 80150da:	bf00      	nop
 80150dc:	20011960 	.word	0x20011960

080150e0 <__malloc_unlock>:
 80150e0:	4801      	ldr	r0, [pc, #4]	; (80150e8 <__malloc_unlock+0x8>)
 80150e2:	f7ff bcf9 	b.w	8014ad8 <__retarget_lock_release_recursive>
 80150e6:	bf00      	nop
 80150e8:	20011960 	.word	0x20011960

080150ec <_free_r>:
 80150ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150ee:	2900      	cmp	r1, #0
 80150f0:	d044      	beq.n	801517c <_free_r+0x90>
 80150f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150f6:	9001      	str	r0, [sp, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f1a1 0404 	sub.w	r4, r1, #4
 80150fe:	bfb8      	it	lt
 8015100:	18e4      	addlt	r4, r4, r3
 8015102:	f7ff ffe7 	bl	80150d4 <__malloc_lock>
 8015106:	4a1e      	ldr	r2, [pc, #120]	; (8015180 <_free_r+0x94>)
 8015108:	9801      	ldr	r0, [sp, #4]
 801510a:	6813      	ldr	r3, [r2, #0]
 801510c:	b933      	cbnz	r3, 801511c <_free_r+0x30>
 801510e:	6063      	str	r3, [r4, #4]
 8015110:	6014      	str	r4, [r2, #0]
 8015112:	b003      	add	sp, #12
 8015114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015118:	f7ff bfe2 	b.w	80150e0 <__malloc_unlock>
 801511c:	42a3      	cmp	r3, r4
 801511e:	d908      	bls.n	8015132 <_free_r+0x46>
 8015120:	6825      	ldr	r5, [r4, #0]
 8015122:	1961      	adds	r1, r4, r5
 8015124:	428b      	cmp	r3, r1
 8015126:	bf01      	itttt	eq
 8015128:	6819      	ldreq	r1, [r3, #0]
 801512a:	685b      	ldreq	r3, [r3, #4]
 801512c:	1949      	addeq	r1, r1, r5
 801512e:	6021      	streq	r1, [r4, #0]
 8015130:	e7ed      	b.n	801510e <_free_r+0x22>
 8015132:	461a      	mov	r2, r3
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	b10b      	cbz	r3, 801513c <_free_r+0x50>
 8015138:	42a3      	cmp	r3, r4
 801513a:	d9fa      	bls.n	8015132 <_free_r+0x46>
 801513c:	6811      	ldr	r1, [r2, #0]
 801513e:	1855      	adds	r5, r2, r1
 8015140:	42a5      	cmp	r5, r4
 8015142:	d10b      	bne.n	801515c <_free_r+0x70>
 8015144:	6824      	ldr	r4, [r4, #0]
 8015146:	4421      	add	r1, r4
 8015148:	1854      	adds	r4, r2, r1
 801514a:	42a3      	cmp	r3, r4
 801514c:	6011      	str	r1, [r2, #0]
 801514e:	d1e0      	bne.n	8015112 <_free_r+0x26>
 8015150:	681c      	ldr	r4, [r3, #0]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	6053      	str	r3, [r2, #4]
 8015156:	4421      	add	r1, r4
 8015158:	6011      	str	r1, [r2, #0]
 801515a:	e7da      	b.n	8015112 <_free_r+0x26>
 801515c:	d902      	bls.n	8015164 <_free_r+0x78>
 801515e:	230c      	movs	r3, #12
 8015160:	6003      	str	r3, [r0, #0]
 8015162:	e7d6      	b.n	8015112 <_free_r+0x26>
 8015164:	6825      	ldr	r5, [r4, #0]
 8015166:	1961      	adds	r1, r4, r5
 8015168:	428b      	cmp	r3, r1
 801516a:	bf04      	itt	eq
 801516c:	6819      	ldreq	r1, [r3, #0]
 801516e:	685b      	ldreq	r3, [r3, #4]
 8015170:	6063      	str	r3, [r4, #4]
 8015172:	bf04      	itt	eq
 8015174:	1949      	addeq	r1, r1, r5
 8015176:	6021      	streq	r1, [r4, #0]
 8015178:	6054      	str	r4, [r2, #4]
 801517a:	e7ca      	b.n	8015112 <_free_r+0x26>
 801517c:	b003      	add	sp, #12
 801517e:	bd30      	pop	{r4, r5, pc}
 8015180:	20011964 	.word	0x20011964

08015184 <__sfputc_r>:
 8015184:	6893      	ldr	r3, [r2, #8]
 8015186:	3b01      	subs	r3, #1
 8015188:	2b00      	cmp	r3, #0
 801518a:	b410      	push	{r4}
 801518c:	6093      	str	r3, [r2, #8]
 801518e:	da08      	bge.n	80151a2 <__sfputc_r+0x1e>
 8015190:	6994      	ldr	r4, [r2, #24]
 8015192:	42a3      	cmp	r3, r4
 8015194:	db01      	blt.n	801519a <__sfputc_r+0x16>
 8015196:	290a      	cmp	r1, #10
 8015198:	d103      	bne.n	80151a2 <__sfputc_r+0x1e>
 801519a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801519e:	f000 baf1 	b.w	8015784 <__swbuf_r>
 80151a2:	6813      	ldr	r3, [r2, #0]
 80151a4:	1c58      	adds	r0, r3, #1
 80151a6:	6010      	str	r0, [r2, #0]
 80151a8:	7019      	strb	r1, [r3, #0]
 80151aa:	4608      	mov	r0, r1
 80151ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151b0:	4770      	bx	lr

080151b2 <__sfputs_r>:
 80151b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b4:	4606      	mov	r6, r0
 80151b6:	460f      	mov	r7, r1
 80151b8:	4614      	mov	r4, r2
 80151ba:	18d5      	adds	r5, r2, r3
 80151bc:	42ac      	cmp	r4, r5
 80151be:	d101      	bne.n	80151c4 <__sfputs_r+0x12>
 80151c0:	2000      	movs	r0, #0
 80151c2:	e007      	b.n	80151d4 <__sfputs_r+0x22>
 80151c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151c8:	463a      	mov	r2, r7
 80151ca:	4630      	mov	r0, r6
 80151cc:	f7ff ffda 	bl	8015184 <__sfputc_r>
 80151d0:	1c43      	adds	r3, r0, #1
 80151d2:	d1f3      	bne.n	80151bc <__sfputs_r+0xa>
 80151d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080151d8 <_vfiprintf_r>:
 80151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151dc:	460d      	mov	r5, r1
 80151de:	b09d      	sub	sp, #116	; 0x74
 80151e0:	4614      	mov	r4, r2
 80151e2:	4698      	mov	r8, r3
 80151e4:	4606      	mov	r6, r0
 80151e6:	b118      	cbz	r0, 80151f0 <_vfiprintf_r+0x18>
 80151e8:	6983      	ldr	r3, [r0, #24]
 80151ea:	b90b      	cbnz	r3, 80151f0 <_vfiprintf_r+0x18>
 80151ec:	f7ff fbb0 	bl	8014950 <__sinit>
 80151f0:	4b89      	ldr	r3, [pc, #548]	; (8015418 <_vfiprintf_r+0x240>)
 80151f2:	429d      	cmp	r5, r3
 80151f4:	d11b      	bne.n	801522e <_vfiprintf_r+0x56>
 80151f6:	6875      	ldr	r5, [r6, #4]
 80151f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151fa:	07d9      	lsls	r1, r3, #31
 80151fc:	d405      	bmi.n	801520a <_vfiprintf_r+0x32>
 80151fe:	89ab      	ldrh	r3, [r5, #12]
 8015200:	059a      	lsls	r2, r3, #22
 8015202:	d402      	bmi.n	801520a <_vfiprintf_r+0x32>
 8015204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015206:	f7ff fc66 	bl	8014ad6 <__retarget_lock_acquire_recursive>
 801520a:	89ab      	ldrh	r3, [r5, #12]
 801520c:	071b      	lsls	r3, r3, #28
 801520e:	d501      	bpl.n	8015214 <_vfiprintf_r+0x3c>
 8015210:	692b      	ldr	r3, [r5, #16]
 8015212:	b9eb      	cbnz	r3, 8015250 <_vfiprintf_r+0x78>
 8015214:	4629      	mov	r1, r5
 8015216:	4630      	mov	r0, r6
 8015218:	f000 fb06 	bl	8015828 <__swsetup_r>
 801521c:	b1c0      	cbz	r0, 8015250 <_vfiprintf_r+0x78>
 801521e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015220:	07dc      	lsls	r4, r3, #31
 8015222:	d50e      	bpl.n	8015242 <_vfiprintf_r+0x6a>
 8015224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015228:	b01d      	add	sp, #116	; 0x74
 801522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522e:	4b7b      	ldr	r3, [pc, #492]	; (801541c <_vfiprintf_r+0x244>)
 8015230:	429d      	cmp	r5, r3
 8015232:	d101      	bne.n	8015238 <_vfiprintf_r+0x60>
 8015234:	68b5      	ldr	r5, [r6, #8]
 8015236:	e7df      	b.n	80151f8 <_vfiprintf_r+0x20>
 8015238:	4b79      	ldr	r3, [pc, #484]	; (8015420 <_vfiprintf_r+0x248>)
 801523a:	429d      	cmp	r5, r3
 801523c:	bf08      	it	eq
 801523e:	68f5      	ldreq	r5, [r6, #12]
 8015240:	e7da      	b.n	80151f8 <_vfiprintf_r+0x20>
 8015242:	89ab      	ldrh	r3, [r5, #12]
 8015244:	0598      	lsls	r0, r3, #22
 8015246:	d4ed      	bmi.n	8015224 <_vfiprintf_r+0x4c>
 8015248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801524a:	f7ff fc45 	bl	8014ad8 <__retarget_lock_release_recursive>
 801524e:	e7e9      	b.n	8015224 <_vfiprintf_r+0x4c>
 8015250:	2300      	movs	r3, #0
 8015252:	9309      	str	r3, [sp, #36]	; 0x24
 8015254:	2320      	movs	r3, #32
 8015256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801525a:	f8cd 800c 	str.w	r8, [sp, #12]
 801525e:	2330      	movs	r3, #48	; 0x30
 8015260:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015424 <_vfiprintf_r+0x24c>
 8015264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015268:	f04f 0901 	mov.w	r9, #1
 801526c:	4623      	mov	r3, r4
 801526e:	469a      	mov	sl, r3
 8015270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015274:	b10a      	cbz	r2, 801527a <_vfiprintf_r+0xa2>
 8015276:	2a25      	cmp	r2, #37	; 0x25
 8015278:	d1f9      	bne.n	801526e <_vfiprintf_r+0x96>
 801527a:	ebba 0b04 	subs.w	fp, sl, r4
 801527e:	d00b      	beq.n	8015298 <_vfiprintf_r+0xc0>
 8015280:	465b      	mov	r3, fp
 8015282:	4622      	mov	r2, r4
 8015284:	4629      	mov	r1, r5
 8015286:	4630      	mov	r0, r6
 8015288:	f7ff ff93 	bl	80151b2 <__sfputs_r>
 801528c:	3001      	adds	r0, #1
 801528e:	f000 80aa 	beq.w	80153e6 <_vfiprintf_r+0x20e>
 8015292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015294:	445a      	add	r2, fp
 8015296:	9209      	str	r2, [sp, #36]	; 0x24
 8015298:	f89a 3000 	ldrb.w	r3, [sl]
 801529c:	2b00      	cmp	r3, #0
 801529e:	f000 80a2 	beq.w	80153e6 <_vfiprintf_r+0x20e>
 80152a2:	2300      	movs	r3, #0
 80152a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152ac:	f10a 0a01 	add.w	sl, sl, #1
 80152b0:	9304      	str	r3, [sp, #16]
 80152b2:	9307      	str	r3, [sp, #28]
 80152b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152b8:	931a      	str	r3, [sp, #104]	; 0x68
 80152ba:	4654      	mov	r4, sl
 80152bc:	2205      	movs	r2, #5
 80152be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152c2:	4858      	ldr	r0, [pc, #352]	; (8015424 <_vfiprintf_r+0x24c>)
 80152c4:	f7ea ffa4 	bl	8000210 <memchr>
 80152c8:	9a04      	ldr	r2, [sp, #16]
 80152ca:	b9d8      	cbnz	r0, 8015304 <_vfiprintf_r+0x12c>
 80152cc:	06d1      	lsls	r1, r2, #27
 80152ce:	bf44      	itt	mi
 80152d0:	2320      	movmi	r3, #32
 80152d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152d6:	0713      	lsls	r3, r2, #28
 80152d8:	bf44      	itt	mi
 80152da:	232b      	movmi	r3, #43	; 0x2b
 80152dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152e0:	f89a 3000 	ldrb.w	r3, [sl]
 80152e4:	2b2a      	cmp	r3, #42	; 0x2a
 80152e6:	d015      	beq.n	8015314 <_vfiprintf_r+0x13c>
 80152e8:	9a07      	ldr	r2, [sp, #28]
 80152ea:	4654      	mov	r4, sl
 80152ec:	2000      	movs	r0, #0
 80152ee:	f04f 0c0a 	mov.w	ip, #10
 80152f2:	4621      	mov	r1, r4
 80152f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152f8:	3b30      	subs	r3, #48	; 0x30
 80152fa:	2b09      	cmp	r3, #9
 80152fc:	d94e      	bls.n	801539c <_vfiprintf_r+0x1c4>
 80152fe:	b1b0      	cbz	r0, 801532e <_vfiprintf_r+0x156>
 8015300:	9207      	str	r2, [sp, #28]
 8015302:	e014      	b.n	801532e <_vfiprintf_r+0x156>
 8015304:	eba0 0308 	sub.w	r3, r0, r8
 8015308:	fa09 f303 	lsl.w	r3, r9, r3
 801530c:	4313      	orrs	r3, r2
 801530e:	9304      	str	r3, [sp, #16]
 8015310:	46a2      	mov	sl, r4
 8015312:	e7d2      	b.n	80152ba <_vfiprintf_r+0xe2>
 8015314:	9b03      	ldr	r3, [sp, #12]
 8015316:	1d19      	adds	r1, r3, #4
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	9103      	str	r1, [sp, #12]
 801531c:	2b00      	cmp	r3, #0
 801531e:	bfbb      	ittet	lt
 8015320:	425b      	neglt	r3, r3
 8015322:	f042 0202 	orrlt.w	r2, r2, #2
 8015326:	9307      	strge	r3, [sp, #28]
 8015328:	9307      	strlt	r3, [sp, #28]
 801532a:	bfb8      	it	lt
 801532c:	9204      	strlt	r2, [sp, #16]
 801532e:	7823      	ldrb	r3, [r4, #0]
 8015330:	2b2e      	cmp	r3, #46	; 0x2e
 8015332:	d10c      	bne.n	801534e <_vfiprintf_r+0x176>
 8015334:	7863      	ldrb	r3, [r4, #1]
 8015336:	2b2a      	cmp	r3, #42	; 0x2a
 8015338:	d135      	bne.n	80153a6 <_vfiprintf_r+0x1ce>
 801533a:	9b03      	ldr	r3, [sp, #12]
 801533c:	1d1a      	adds	r2, r3, #4
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	9203      	str	r2, [sp, #12]
 8015342:	2b00      	cmp	r3, #0
 8015344:	bfb8      	it	lt
 8015346:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801534a:	3402      	adds	r4, #2
 801534c:	9305      	str	r3, [sp, #20]
 801534e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015434 <_vfiprintf_r+0x25c>
 8015352:	7821      	ldrb	r1, [r4, #0]
 8015354:	2203      	movs	r2, #3
 8015356:	4650      	mov	r0, sl
 8015358:	f7ea ff5a 	bl	8000210 <memchr>
 801535c:	b140      	cbz	r0, 8015370 <_vfiprintf_r+0x198>
 801535e:	2340      	movs	r3, #64	; 0x40
 8015360:	eba0 000a 	sub.w	r0, r0, sl
 8015364:	fa03 f000 	lsl.w	r0, r3, r0
 8015368:	9b04      	ldr	r3, [sp, #16]
 801536a:	4303      	orrs	r3, r0
 801536c:	3401      	adds	r4, #1
 801536e:	9304      	str	r3, [sp, #16]
 8015370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015374:	482c      	ldr	r0, [pc, #176]	; (8015428 <_vfiprintf_r+0x250>)
 8015376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801537a:	2206      	movs	r2, #6
 801537c:	f7ea ff48 	bl	8000210 <memchr>
 8015380:	2800      	cmp	r0, #0
 8015382:	d03f      	beq.n	8015404 <_vfiprintf_r+0x22c>
 8015384:	4b29      	ldr	r3, [pc, #164]	; (801542c <_vfiprintf_r+0x254>)
 8015386:	bb1b      	cbnz	r3, 80153d0 <_vfiprintf_r+0x1f8>
 8015388:	9b03      	ldr	r3, [sp, #12]
 801538a:	3307      	adds	r3, #7
 801538c:	f023 0307 	bic.w	r3, r3, #7
 8015390:	3308      	adds	r3, #8
 8015392:	9303      	str	r3, [sp, #12]
 8015394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015396:	443b      	add	r3, r7
 8015398:	9309      	str	r3, [sp, #36]	; 0x24
 801539a:	e767      	b.n	801526c <_vfiprintf_r+0x94>
 801539c:	fb0c 3202 	mla	r2, ip, r2, r3
 80153a0:	460c      	mov	r4, r1
 80153a2:	2001      	movs	r0, #1
 80153a4:	e7a5      	b.n	80152f2 <_vfiprintf_r+0x11a>
 80153a6:	2300      	movs	r3, #0
 80153a8:	3401      	adds	r4, #1
 80153aa:	9305      	str	r3, [sp, #20]
 80153ac:	4619      	mov	r1, r3
 80153ae:	f04f 0c0a 	mov.w	ip, #10
 80153b2:	4620      	mov	r0, r4
 80153b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153b8:	3a30      	subs	r2, #48	; 0x30
 80153ba:	2a09      	cmp	r2, #9
 80153bc:	d903      	bls.n	80153c6 <_vfiprintf_r+0x1ee>
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d0c5      	beq.n	801534e <_vfiprintf_r+0x176>
 80153c2:	9105      	str	r1, [sp, #20]
 80153c4:	e7c3      	b.n	801534e <_vfiprintf_r+0x176>
 80153c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80153ca:	4604      	mov	r4, r0
 80153cc:	2301      	movs	r3, #1
 80153ce:	e7f0      	b.n	80153b2 <_vfiprintf_r+0x1da>
 80153d0:	ab03      	add	r3, sp, #12
 80153d2:	9300      	str	r3, [sp, #0]
 80153d4:	462a      	mov	r2, r5
 80153d6:	4b16      	ldr	r3, [pc, #88]	; (8015430 <_vfiprintf_r+0x258>)
 80153d8:	a904      	add	r1, sp, #16
 80153da:	4630      	mov	r0, r6
 80153dc:	f3af 8000 	nop.w
 80153e0:	4607      	mov	r7, r0
 80153e2:	1c78      	adds	r0, r7, #1
 80153e4:	d1d6      	bne.n	8015394 <_vfiprintf_r+0x1bc>
 80153e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153e8:	07d9      	lsls	r1, r3, #31
 80153ea:	d405      	bmi.n	80153f8 <_vfiprintf_r+0x220>
 80153ec:	89ab      	ldrh	r3, [r5, #12]
 80153ee:	059a      	lsls	r2, r3, #22
 80153f0:	d402      	bmi.n	80153f8 <_vfiprintf_r+0x220>
 80153f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153f4:	f7ff fb70 	bl	8014ad8 <__retarget_lock_release_recursive>
 80153f8:	89ab      	ldrh	r3, [r5, #12]
 80153fa:	065b      	lsls	r3, r3, #25
 80153fc:	f53f af12 	bmi.w	8015224 <_vfiprintf_r+0x4c>
 8015400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015402:	e711      	b.n	8015228 <_vfiprintf_r+0x50>
 8015404:	ab03      	add	r3, sp, #12
 8015406:	9300      	str	r3, [sp, #0]
 8015408:	462a      	mov	r2, r5
 801540a:	4b09      	ldr	r3, [pc, #36]	; (8015430 <_vfiprintf_r+0x258>)
 801540c:	a904      	add	r1, sp, #16
 801540e:	4630      	mov	r0, r6
 8015410:	f000 f880 	bl	8015514 <_printf_i>
 8015414:	e7e4      	b.n	80153e0 <_vfiprintf_r+0x208>
 8015416:	bf00      	nop
 8015418:	08018c64 	.word	0x08018c64
 801541c:	08018c84 	.word	0x08018c84
 8015420:	08018c44 	.word	0x08018c44
 8015424:	08018d56 	.word	0x08018d56
 8015428:	08018d60 	.word	0x08018d60
 801542c:	00000000 	.word	0x00000000
 8015430:	080151b3 	.word	0x080151b3
 8015434:	08018d5c 	.word	0x08018d5c

08015438 <_printf_common>:
 8015438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801543c:	4616      	mov	r6, r2
 801543e:	4699      	mov	r9, r3
 8015440:	688a      	ldr	r2, [r1, #8]
 8015442:	690b      	ldr	r3, [r1, #16]
 8015444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015448:	4293      	cmp	r3, r2
 801544a:	bfb8      	it	lt
 801544c:	4613      	movlt	r3, r2
 801544e:	6033      	str	r3, [r6, #0]
 8015450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015454:	4607      	mov	r7, r0
 8015456:	460c      	mov	r4, r1
 8015458:	b10a      	cbz	r2, 801545e <_printf_common+0x26>
 801545a:	3301      	adds	r3, #1
 801545c:	6033      	str	r3, [r6, #0]
 801545e:	6823      	ldr	r3, [r4, #0]
 8015460:	0699      	lsls	r1, r3, #26
 8015462:	bf42      	ittt	mi
 8015464:	6833      	ldrmi	r3, [r6, #0]
 8015466:	3302      	addmi	r3, #2
 8015468:	6033      	strmi	r3, [r6, #0]
 801546a:	6825      	ldr	r5, [r4, #0]
 801546c:	f015 0506 	ands.w	r5, r5, #6
 8015470:	d106      	bne.n	8015480 <_printf_common+0x48>
 8015472:	f104 0a19 	add.w	sl, r4, #25
 8015476:	68e3      	ldr	r3, [r4, #12]
 8015478:	6832      	ldr	r2, [r6, #0]
 801547a:	1a9b      	subs	r3, r3, r2
 801547c:	42ab      	cmp	r3, r5
 801547e:	dc26      	bgt.n	80154ce <_printf_common+0x96>
 8015480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015484:	1e13      	subs	r3, r2, #0
 8015486:	6822      	ldr	r2, [r4, #0]
 8015488:	bf18      	it	ne
 801548a:	2301      	movne	r3, #1
 801548c:	0692      	lsls	r2, r2, #26
 801548e:	d42b      	bmi.n	80154e8 <_printf_common+0xb0>
 8015490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015494:	4649      	mov	r1, r9
 8015496:	4638      	mov	r0, r7
 8015498:	47c0      	blx	r8
 801549a:	3001      	adds	r0, #1
 801549c:	d01e      	beq.n	80154dc <_printf_common+0xa4>
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	68e5      	ldr	r5, [r4, #12]
 80154a2:	6832      	ldr	r2, [r6, #0]
 80154a4:	f003 0306 	and.w	r3, r3, #6
 80154a8:	2b04      	cmp	r3, #4
 80154aa:	bf08      	it	eq
 80154ac:	1aad      	subeq	r5, r5, r2
 80154ae:	68a3      	ldr	r3, [r4, #8]
 80154b0:	6922      	ldr	r2, [r4, #16]
 80154b2:	bf0c      	ite	eq
 80154b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80154b8:	2500      	movne	r5, #0
 80154ba:	4293      	cmp	r3, r2
 80154bc:	bfc4      	itt	gt
 80154be:	1a9b      	subgt	r3, r3, r2
 80154c0:	18ed      	addgt	r5, r5, r3
 80154c2:	2600      	movs	r6, #0
 80154c4:	341a      	adds	r4, #26
 80154c6:	42b5      	cmp	r5, r6
 80154c8:	d11a      	bne.n	8015500 <_printf_common+0xc8>
 80154ca:	2000      	movs	r0, #0
 80154cc:	e008      	b.n	80154e0 <_printf_common+0xa8>
 80154ce:	2301      	movs	r3, #1
 80154d0:	4652      	mov	r2, sl
 80154d2:	4649      	mov	r1, r9
 80154d4:	4638      	mov	r0, r7
 80154d6:	47c0      	blx	r8
 80154d8:	3001      	adds	r0, #1
 80154da:	d103      	bne.n	80154e4 <_printf_common+0xac>
 80154dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154e4:	3501      	adds	r5, #1
 80154e6:	e7c6      	b.n	8015476 <_printf_common+0x3e>
 80154e8:	18e1      	adds	r1, r4, r3
 80154ea:	1c5a      	adds	r2, r3, #1
 80154ec:	2030      	movs	r0, #48	; 0x30
 80154ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80154f2:	4422      	add	r2, r4
 80154f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80154f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80154fc:	3302      	adds	r3, #2
 80154fe:	e7c7      	b.n	8015490 <_printf_common+0x58>
 8015500:	2301      	movs	r3, #1
 8015502:	4622      	mov	r2, r4
 8015504:	4649      	mov	r1, r9
 8015506:	4638      	mov	r0, r7
 8015508:	47c0      	blx	r8
 801550a:	3001      	adds	r0, #1
 801550c:	d0e6      	beq.n	80154dc <_printf_common+0xa4>
 801550e:	3601      	adds	r6, #1
 8015510:	e7d9      	b.n	80154c6 <_printf_common+0x8e>
	...

08015514 <_printf_i>:
 8015514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015518:	7e0f      	ldrb	r7, [r1, #24]
 801551a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801551c:	2f78      	cmp	r7, #120	; 0x78
 801551e:	4691      	mov	r9, r2
 8015520:	4680      	mov	r8, r0
 8015522:	460c      	mov	r4, r1
 8015524:	469a      	mov	sl, r3
 8015526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801552a:	d807      	bhi.n	801553c <_printf_i+0x28>
 801552c:	2f62      	cmp	r7, #98	; 0x62
 801552e:	d80a      	bhi.n	8015546 <_printf_i+0x32>
 8015530:	2f00      	cmp	r7, #0
 8015532:	f000 80d8 	beq.w	80156e6 <_printf_i+0x1d2>
 8015536:	2f58      	cmp	r7, #88	; 0x58
 8015538:	f000 80a3 	beq.w	8015682 <_printf_i+0x16e>
 801553c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015544:	e03a      	b.n	80155bc <_printf_i+0xa8>
 8015546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801554a:	2b15      	cmp	r3, #21
 801554c:	d8f6      	bhi.n	801553c <_printf_i+0x28>
 801554e:	a101      	add	r1, pc, #4	; (adr r1, 8015554 <_printf_i+0x40>)
 8015550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015554:	080155ad 	.word	0x080155ad
 8015558:	080155c1 	.word	0x080155c1
 801555c:	0801553d 	.word	0x0801553d
 8015560:	0801553d 	.word	0x0801553d
 8015564:	0801553d 	.word	0x0801553d
 8015568:	0801553d 	.word	0x0801553d
 801556c:	080155c1 	.word	0x080155c1
 8015570:	0801553d 	.word	0x0801553d
 8015574:	0801553d 	.word	0x0801553d
 8015578:	0801553d 	.word	0x0801553d
 801557c:	0801553d 	.word	0x0801553d
 8015580:	080156cd 	.word	0x080156cd
 8015584:	080155f1 	.word	0x080155f1
 8015588:	080156af 	.word	0x080156af
 801558c:	0801553d 	.word	0x0801553d
 8015590:	0801553d 	.word	0x0801553d
 8015594:	080156ef 	.word	0x080156ef
 8015598:	0801553d 	.word	0x0801553d
 801559c:	080155f1 	.word	0x080155f1
 80155a0:	0801553d 	.word	0x0801553d
 80155a4:	0801553d 	.word	0x0801553d
 80155a8:	080156b7 	.word	0x080156b7
 80155ac:	682b      	ldr	r3, [r5, #0]
 80155ae:	1d1a      	adds	r2, r3, #4
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	602a      	str	r2, [r5, #0]
 80155b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80155bc:	2301      	movs	r3, #1
 80155be:	e0a3      	b.n	8015708 <_printf_i+0x1f4>
 80155c0:	6820      	ldr	r0, [r4, #0]
 80155c2:	6829      	ldr	r1, [r5, #0]
 80155c4:	0606      	lsls	r6, r0, #24
 80155c6:	f101 0304 	add.w	r3, r1, #4
 80155ca:	d50a      	bpl.n	80155e2 <_printf_i+0xce>
 80155cc:	680e      	ldr	r6, [r1, #0]
 80155ce:	602b      	str	r3, [r5, #0]
 80155d0:	2e00      	cmp	r6, #0
 80155d2:	da03      	bge.n	80155dc <_printf_i+0xc8>
 80155d4:	232d      	movs	r3, #45	; 0x2d
 80155d6:	4276      	negs	r6, r6
 80155d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155dc:	485e      	ldr	r0, [pc, #376]	; (8015758 <_printf_i+0x244>)
 80155de:	230a      	movs	r3, #10
 80155e0:	e019      	b.n	8015616 <_printf_i+0x102>
 80155e2:	680e      	ldr	r6, [r1, #0]
 80155e4:	602b      	str	r3, [r5, #0]
 80155e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80155ea:	bf18      	it	ne
 80155ec:	b236      	sxthne	r6, r6
 80155ee:	e7ef      	b.n	80155d0 <_printf_i+0xbc>
 80155f0:	682b      	ldr	r3, [r5, #0]
 80155f2:	6820      	ldr	r0, [r4, #0]
 80155f4:	1d19      	adds	r1, r3, #4
 80155f6:	6029      	str	r1, [r5, #0]
 80155f8:	0601      	lsls	r1, r0, #24
 80155fa:	d501      	bpl.n	8015600 <_printf_i+0xec>
 80155fc:	681e      	ldr	r6, [r3, #0]
 80155fe:	e002      	b.n	8015606 <_printf_i+0xf2>
 8015600:	0646      	lsls	r6, r0, #25
 8015602:	d5fb      	bpl.n	80155fc <_printf_i+0xe8>
 8015604:	881e      	ldrh	r6, [r3, #0]
 8015606:	4854      	ldr	r0, [pc, #336]	; (8015758 <_printf_i+0x244>)
 8015608:	2f6f      	cmp	r7, #111	; 0x6f
 801560a:	bf0c      	ite	eq
 801560c:	2308      	moveq	r3, #8
 801560e:	230a      	movne	r3, #10
 8015610:	2100      	movs	r1, #0
 8015612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015616:	6865      	ldr	r5, [r4, #4]
 8015618:	60a5      	str	r5, [r4, #8]
 801561a:	2d00      	cmp	r5, #0
 801561c:	bfa2      	ittt	ge
 801561e:	6821      	ldrge	r1, [r4, #0]
 8015620:	f021 0104 	bicge.w	r1, r1, #4
 8015624:	6021      	strge	r1, [r4, #0]
 8015626:	b90e      	cbnz	r6, 801562c <_printf_i+0x118>
 8015628:	2d00      	cmp	r5, #0
 801562a:	d04d      	beq.n	80156c8 <_printf_i+0x1b4>
 801562c:	4615      	mov	r5, r2
 801562e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015632:	fb03 6711 	mls	r7, r3, r1, r6
 8015636:	5dc7      	ldrb	r7, [r0, r7]
 8015638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801563c:	4637      	mov	r7, r6
 801563e:	42bb      	cmp	r3, r7
 8015640:	460e      	mov	r6, r1
 8015642:	d9f4      	bls.n	801562e <_printf_i+0x11a>
 8015644:	2b08      	cmp	r3, #8
 8015646:	d10b      	bne.n	8015660 <_printf_i+0x14c>
 8015648:	6823      	ldr	r3, [r4, #0]
 801564a:	07de      	lsls	r6, r3, #31
 801564c:	d508      	bpl.n	8015660 <_printf_i+0x14c>
 801564e:	6923      	ldr	r3, [r4, #16]
 8015650:	6861      	ldr	r1, [r4, #4]
 8015652:	4299      	cmp	r1, r3
 8015654:	bfde      	ittt	le
 8015656:	2330      	movle	r3, #48	; 0x30
 8015658:	f805 3c01 	strble.w	r3, [r5, #-1]
 801565c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015660:	1b52      	subs	r2, r2, r5
 8015662:	6122      	str	r2, [r4, #16]
 8015664:	f8cd a000 	str.w	sl, [sp]
 8015668:	464b      	mov	r3, r9
 801566a:	aa03      	add	r2, sp, #12
 801566c:	4621      	mov	r1, r4
 801566e:	4640      	mov	r0, r8
 8015670:	f7ff fee2 	bl	8015438 <_printf_common>
 8015674:	3001      	adds	r0, #1
 8015676:	d14c      	bne.n	8015712 <_printf_i+0x1fe>
 8015678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801567c:	b004      	add	sp, #16
 801567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015682:	4835      	ldr	r0, [pc, #212]	; (8015758 <_printf_i+0x244>)
 8015684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015688:	6829      	ldr	r1, [r5, #0]
 801568a:	6823      	ldr	r3, [r4, #0]
 801568c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015690:	6029      	str	r1, [r5, #0]
 8015692:	061d      	lsls	r5, r3, #24
 8015694:	d514      	bpl.n	80156c0 <_printf_i+0x1ac>
 8015696:	07df      	lsls	r7, r3, #31
 8015698:	bf44      	itt	mi
 801569a:	f043 0320 	orrmi.w	r3, r3, #32
 801569e:	6023      	strmi	r3, [r4, #0]
 80156a0:	b91e      	cbnz	r6, 80156aa <_printf_i+0x196>
 80156a2:	6823      	ldr	r3, [r4, #0]
 80156a4:	f023 0320 	bic.w	r3, r3, #32
 80156a8:	6023      	str	r3, [r4, #0]
 80156aa:	2310      	movs	r3, #16
 80156ac:	e7b0      	b.n	8015610 <_printf_i+0xfc>
 80156ae:	6823      	ldr	r3, [r4, #0]
 80156b0:	f043 0320 	orr.w	r3, r3, #32
 80156b4:	6023      	str	r3, [r4, #0]
 80156b6:	2378      	movs	r3, #120	; 0x78
 80156b8:	4828      	ldr	r0, [pc, #160]	; (801575c <_printf_i+0x248>)
 80156ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80156be:	e7e3      	b.n	8015688 <_printf_i+0x174>
 80156c0:	0659      	lsls	r1, r3, #25
 80156c2:	bf48      	it	mi
 80156c4:	b2b6      	uxthmi	r6, r6
 80156c6:	e7e6      	b.n	8015696 <_printf_i+0x182>
 80156c8:	4615      	mov	r5, r2
 80156ca:	e7bb      	b.n	8015644 <_printf_i+0x130>
 80156cc:	682b      	ldr	r3, [r5, #0]
 80156ce:	6826      	ldr	r6, [r4, #0]
 80156d0:	6961      	ldr	r1, [r4, #20]
 80156d2:	1d18      	adds	r0, r3, #4
 80156d4:	6028      	str	r0, [r5, #0]
 80156d6:	0635      	lsls	r5, r6, #24
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	d501      	bpl.n	80156e0 <_printf_i+0x1cc>
 80156dc:	6019      	str	r1, [r3, #0]
 80156de:	e002      	b.n	80156e6 <_printf_i+0x1d2>
 80156e0:	0670      	lsls	r0, r6, #25
 80156e2:	d5fb      	bpl.n	80156dc <_printf_i+0x1c8>
 80156e4:	8019      	strh	r1, [r3, #0]
 80156e6:	2300      	movs	r3, #0
 80156e8:	6123      	str	r3, [r4, #16]
 80156ea:	4615      	mov	r5, r2
 80156ec:	e7ba      	b.n	8015664 <_printf_i+0x150>
 80156ee:	682b      	ldr	r3, [r5, #0]
 80156f0:	1d1a      	adds	r2, r3, #4
 80156f2:	602a      	str	r2, [r5, #0]
 80156f4:	681d      	ldr	r5, [r3, #0]
 80156f6:	6862      	ldr	r2, [r4, #4]
 80156f8:	2100      	movs	r1, #0
 80156fa:	4628      	mov	r0, r5
 80156fc:	f7ea fd88 	bl	8000210 <memchr>
 8015700:	b108      	cbz	r0, 8015706 <_printf_i+0x1f2>
 8015702:	1b40      	subs	r0, r0, r5
 8015704:	6060      	str	r0, [r4, #4]
 8015706:	6863      	ldr	r3, [r4, #4]
 8015708:	6123      	str	r3, [r4, #16]
 801570a:	2300      	movs	r3, #0
 801570c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015710:	e7a8      	b.n	8015664 <_printf_i+0x150>
 8015712:	6923      	ldr	r3, [r4, #16]
 8015714:	462a      	mov	r2, r5
 8015716:	4649      	mov	r1, r9
 8015718:	4640      	mov	r0, r8
 801571a:	47d0      	blx	sl
 801571c:	3001      	adds	r0, #1
 801571e:	d0ab      	beq.n	8015678 <_printf_i+0x164>
 8015720:	6823      	ldr	r3, [r4, #0]
 8015722:	079b      	lsls	r3, r3, #30
 8015724:	d413      	bmi.n	801574e <_printf_i+0x23a>
 8015726:	68e0      	ldr	r0, [r4, #12]
 8015728:	9b03      	ldr	r3, [sp, #12]
 801572a:	4298      	cmp	r0, r3
 801572c:	bfb8      	it	lt
 801572e:	4618      	movlt	r0, r3
 8015730:	e7a4      	b.n	801567c <_printf_i+0x168>
 8015732:	2301      	movs	r3, #1
 8015734:	4632      	mov	r2, r6
 8015736:	4649      	mov	r1, r9
 8015738:	4640      	mov	r0, r8
 801573a:	47d0      	blx	sl
 801573c:	3001      	adds	r0, #1
 801573e:	d09b      	beq.n	8015678 <_printf_i+0x164>
 8015740:	3501      	adds	r5, #1
 8015742:	68e3      	ldr	r3, [r4, #12]
 8015744:	9903      	ldr	r1, [sp, #12]
 8015746:	1a5b      	subs	r3, r3, r1
 8015748:	42ab      	cmp	r3, r5
 801574a:	dcf2      	bgt.n	8015732 <_printf_i+0x21e>
 801574c:	e7eb      	b.n	8015726 <_printf_i+0x212>
 801574e:	2500      	movs	r5, #0
 8015750:	f104 0619 	add.w	r6, r4, #25
 8015754:	e7f5      	b.n	8015742 <_printf_i+0x22e>
 8015756:	bf00      	nop
 8015758:	08018d67 	.word	0x08018d67
 801575c:	08018d78 	.word	0x08018d78

08015760 <_read_r>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	4d07      	ldr	r5, [pc, #28]	; (8015780 <_read_r+0x20>)
 8015764:	4604      	mov	r4, r0
 8015766:	4608      	mov	r0, r1
 8015768:	4611      	mov	r1, r2
 801576a:	2200      	movs	r2, #0
 801576c:	602a      	str	r2, [r5, #0]
 801576e:	461a      	mov	r2, r3
 8015770:	f7eb f9a2 	bl	8000ab8 <_read>
 8015774:	1c43      	adds	r3, r0, #1
 8015776:	d102      	bne.n	801577e <_read_r+0x1e>
 8015778:	682b      	ldr	r3, [r5, #0]
 801577a:	b103      	cbz	r3, 801577e <_read_r+0x1e>
 801577c:	6023      	str	r3, [r4, #0]
 801577e:	bd38      	pop	{r3, r4, r5, pc}
 8015780:	2001196c 	.word	0x2001196c

08015784 <__swbuf_r>:
 8015784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015786:	460e      	mov	r6, r1
 8015788:	4614      	mov	r4, r2
 801578a:	4605      	mov	r5, r0
 801578c:	b118      	cbz	r0, 8015796 <__swbuf_r+0x12>
 801578e:	6983      	ldr	r3, [r0, #24]
 8015790:	b90b      	cbnz	r3, 8015796 <__swbuf_r+0x12>
 8015792:	f7ff f8dd 	bl	8014950 <__sinit>
 8015796:	4b21      	ldr	r3, [pc, #132]	; (801581c <__swbuf_r+0x98>)
 8015798:	429c      	cmp	r4, r3
 801579a:	d12b      	bne.n	80157f4 <__swbuf_r+0x70>
 801579c:	686c      	ldr	r4, [r5, #4]
 801579e:	69a3      	ldr	r3, [r4, #24]
 80157a0:	60a3      	str	r3, [r4, #8]
 80157a2:	89a3      	ldrh	r3, [r4, #12]
 80157a4:	071a      	lsls	r2, r3, #28
 80157a6:	d52f      	bpl.n	8015808 <__swbuf_r+0x84>
 80157a8:	6923      	ldr	r3, [r4, #16]
 80157aa:	b36b      	cbz	r3, 8015808 <__swbuf_r+0x84>
 80157ac:	6923      	ldr	r3, [r4, #16]
 80157ae:	6820      	ldr	r0, [r4, #0]
 80157b0:	1ac0      	subs	r0, r0, r3
 80157b2:	6963      	ldr	r3, [r4, #20]
 80157b4:	b2f6      	uxtb	r6, r6
 80157b6:	4283      	cmp	r3, r0
 80157b8:	4637      	mov	r7, r6
 80157ba:	dc04      	bgt.n	80157c6 <__swbuf_r+0x42>
 80157bc:	4621      	mov	r1, r4
 80157be:	4628      	mov	r0, r5
 80157c0:	f7ff fc20 	bl	8015004 <_fflush_r>
 80157c4:	bb30      	cbnz	r0, 8015814 <__swbuf_r+0x90>
 80157c6:	68a3      	ldr	r3, [r4, #8]
 80157c8:	3b01      	subs	r3, #1
 80157ca:	60a3      	str	r3, [r4, #8]
 80157cc:	6823      	ldr	r3, [r4, #0]
 80157ce:	1c5a      	adds	r2, r3, #1
 80157d0:	6022      	str	r2, [r4, #0]
 80157d2:	701e      	strb	r6, [r3, #0]
 80157d4:	6963      	ldr	r3, [r4, #20]
 80157d6:	3001      	adds	r0, #1
 80157d8:	4283      	cmp	r3, r0
 80157da:	d004      	beq.n	80157e6 <__swbuf_r+0x62>
 80157dc:	89a3      	ldrh	r3, [r4, #12]
 80157de:	07db      	lsls	r3, r3, #31
 80157e0:	d506      	bpl.n	80157f0 <__swbuf_r+0x6c>
 80157e2:	2e0a      	cmp	r6, #10
 80157e4:	d104      	bne.n	80157f0 <__swbuf_r+0x6c>
 80157e6:	4621      	mov	r1, r4
 80157e8:	4628      	mov	r0, r5
 80157ea:	f7ff fc0b 	bl	8015004 <_fflush_r>
 80157ee:	b988      	cbnz	r0, 8015814 <__swbuf_r+0x90>
 80157f0:	4638      	mov	r0, r7
 80157f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157f4:	4b0a      	ldr	r3, [pc, #40]	; (8015820 <__swbuf_r+0x9c>)
 80157f6:	429c      	cmp	r4, r3
 80157f8:	d101      	bne.n	80157fe <__swbuf_r+0x7a>
 80157fa:	68ac      	ldr	r4, [r5, #8]
 80157fc:	e7cf      	b.n	801579e <__swbuf_r+0x1a>
 80157fe:	4b09      	ldr	r3, [pc, #36]	; (8015824 <__swbuf_r+0xa0>)
 8015800:	429c      	cmp	r4, r3
 8015802:	bf08      	it	eq
 8015804:	68ec      	ldreq	r4, [r5, #12]
 8015806:	e7ca      	b.n	801579e <__swbuf_r+0x1a>
 8015808:	4621      	mov	r1, r4
 801580a:	4628      	mov	r0, r5
 801580c:	f000 f80c 	bl	8015828 <__swsetup_r>
 8015810:	2800      	cmp	r0, #0
 8015812:	d0cb      	beq.n	80157ac <__swbuf_r+0x28>
 8015814:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015818:	e7ea      	b.n	80157f0 <__swbuf_r+0x6c>
 801581a:	bf00      	nop
 801581c:	08018c64 	.word	0x08018c64
 8015820:	08018c84 	.word	0x08018c84
 8015824:	08018c44 	.word	0x08018c44

08015828 <__swsetup_r>:
 8015828:	4b32      	ldr	r3, [pc, #200]	; (80158f4 <__swsetup_r+0xcc>)
 801582a:	b570      	push	{r4, r5, r6, lr}
 801582c:	681d      	ldr	r5, [r3, #0]
 801582e:	4606      	mov	r6, r0
 8015830:	460c      	mov	r4, r1
 8015832:	b125      	cbz	r5, 801583e <__swsetup_r+0x16>
 8015834:	69ab      	ldr	r3, [r5, #24]
 8015836:	b913      	cbnz	r3, 801583e <__swsetup_r+0x16>
 8015838:	4628      	mov	r0, r5
 801583a:	f7ff f889 	bl	8014950 <__sinit>
 801583e:	4b2e      	ldr	r3, [pc, #184]	; (80158f8 <__swsetup_r+0xd0>)
 8015840:	429c      	cmp	r4, r3
 8015842:	d10f      	bne.n	8015864 <__swsetup_r+0x3c>
 8015844:	686c      	ldr	r4, [r5, #4]
 8015846:	89a3      	ldrh	r3, [r4, #12]
 8015848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801584c:	0719      	lsls	r1, r3, #28
 801584e:	d42c      	bmi.n	80158aa <__swsetup_r+0x82>
 8015850:	06dd      	lsls	r5, r3, #27
 8015852:	d411      	bmi.n	8015878 <__swsetup_r+0x50>
 8015854:	2309      	movs	r3, #9
 8015856:	6033      	str	r3, [r6, #0]
 8015858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801585c:	81a3      	strh	r3, [r4, #12]
 801585e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015862:	e03e      	b.n	80158e2 <__swsetup_r+0xba>
 8015864:	4b25      	ldr	r3, [pc, #148]	; (80158fc <__swsetup_r+0xd4>)
 8015866:	429c      	cmp	r4, r3
 8015868:	d101      	bne.n	801586e <__swsetup_r+0x46>
 801586a:	68ac      	ldr	r4, [r5, #8]
 801586c:	e7eb      	b.n	8015846 <__swsetup_r+0x1e>
 801586e:	4b24      	ldr	r3, [pc, #144]	; (8015900 <__swsetup_r+0xd8>)
 8015870:	429c      	cmp	r4, r3
 8015872:	bf08      	it	eq
 8015874:	68ec      	ldreq	r4, [r5, #12]
 8015876:	e7e6      	b.n	8015846 <__swsetup_r+0x1e>
 8015878:	0758      	lsls	r0, r3, #29
 801587a:	d512      	bpl.n	80158a2 <__swsetup_r+0x7a>
 801587c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801587e:	b141      	cbz	r1, 8015892 <__swsetup_r+0x6a>
 8015880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015884:	4299      	cmp	r1, r3
 8015886:	d002      	beq.n	801588e <__swsetup_r+0x66>
 8015888:	4630      	mov	r0, r6
 801588a:	f7ff fc2f 	bl	80150ec <_free_r>
 801588e:	2300      	movs	r3, #0
 8015890:	6363      	str	r3, [r4, #52]	; 0x34
 8015892:	89a3      	ldrh	r3, [r4, #12]
 8015894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015898:	81a3      	strh	r3, [r4, #12]
 801589a:	2300      	movs	r3, #0
 801589c:	6063      	str	r3, [r4, #4]
 801589e:	6923      	ldr	r3, [r4, #16]
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	89a3      	ldrh	r3, [r4, #12]
 80158a4:	f043 0308 	orr.w	r3, r3, #8
 80158a8:	81a3      	strh	r3, [r4, #12]
 80158aa:	6923      	ldr	r3, [r4, #16]
 80158ac:	b94b      	cbnz	r3, 80158c2 <__swsetup_r+0x9a>
 80158ae:	89a3      	ldrh	r3, [r4, #12]
 80158b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80158b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80158b8:	d003      	beq.n	80158c2 <__swsetup_r+0x9a>
 80158ba:	4621      	mov	r1, r4
 80158bc:	4630      	mov	r0, r6
 80158be:	f000 f84d 	bl	801595c <__smakebuf_r>
 80158c2:	89a0      	ldrh	r0, [r4, #12]
 80158c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80158c8:	f010 0301 	ands.w	r3, r0, #1
 80158cc:	d00a      	beq.n	80158e4 <__swsetup_r+0xbc>
 80158ce:	2300      	movs	r3, #0
 80158d0:	60a3      	str	r3, [r4, #8]
 80158d2:	6963      	ldr	r3, [r4, #20]
 80158d4:	425b      	negs	r3, r3
 80158d6:	61a3      	str	r3, [r4, #24]
 80158d8:	6923      	ldr	r3, [r4, #16]
 80158da:	b943      	cbnz	r3, 80158ee <__swsetup_r+0xc6>
 80158dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80158e0:	d1ba      	bne.n	8015858 <__swsetup_r+0x30>
 80158e2:	bd70      	pop	{r4, r5, r6, pc}
 80158e4:	0781      	lsls	r1, r0, #30
 80158e6:	bf58      	it	pl
 80158e8:	6963      	ldrpl	r3, [r4, #20]
 80158ea:	60a3      	str	r3, [r4, #8]
 80158ec:	e7f4      	b.n	80158d8 <__swsetup_r+0xb0>
 80158ee:	2000      	movs	r0, #0
 80158f0:	e7f7      	b.n	80158e2 <__swsetup_r+0xba>
 80158f2:	bf00      	nop
 80158f4:	2000002c 	.word	0x2000002c
 80158f8:	08018c64 	.word	0x08018c64
 80158fc:	08018c84 	.word	0x08018c84
 8015900:	08018c44 	.word	0x08018c44

08015904 <abort>:
 8015904:	b508      	push	{r3, lr}
 8015906:	2006      	movs	r0, #6
 8015908:	f000 f890 	bl	8015a2c <raise>
 801590c:	2001      	movs	r0, #1
 801590e:	f7eb f8c9 	bl	8000aa4 <_exit>

08015912 <__swhatbuf_r>:
 8015912:	b570      	push	{r4, r5, r6, lr}
 8015914:	460e      	mov	r6, r1
 8015916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801591a:	2900      	cmp	r1, #0
 801591c:	b096      	sub	sp, #88	; 0x58
 801591e:	4614      	mov	r4, r2
 8015920:	461d      	mov	r5, r3
 8015922:	da08      	bge.n	8015936 <__swhatbuf_r+0x24>
 8015924:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015928:	2200      	movs	r2, #0
 801592a:	602a      	str	r2, [r5, #0]
 801592c:	061a      	lsls	r2, r3, #24
 801592e:	d410      	bmi.n	8015952 <__swhatbuf_r+0x40>
 8015930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015934:	e00e      	b.n	8015954 <__swhatbuf_r+0x42>
 8015936:	466a      	mov	r2, sp
 8015938:	f000 f894 	bl	8015a64 <_fstat_r>
 801593c:	2800      	cmp	r0, #0
 801593e:	dbf1      	blt.n	8015924 <__swhatbuf_r+0x12>
 8015940:	9a01      	ldr	r2, [sp, #4]
 8015942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801594a:	425a      	negs	r2, r3
 801594c:	415a      	adcs	r2, r3
 801594e:	602a      	str	r2, [r5, #0]
 8015950:	e7ee      	b.n	8015930 <__swhatbuf_r+0x1e>
 8015952:	2340      	movs	r3, #64	; 0x40
 8015954:	2000      	movs	r0, #0
 8015956:	6023      	str	r3, [r4, #0]
 8015958:	b016      	add	sp, #88	; 0x58
 801595a:	bd70      	pop	{r4, r5, r6, pc}

0801595c <__smakebuf_r>:
 801595c:	898b      	ldrh	r3, [r1, #12]
 801595e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015960:	079d      	lsls	r5, r3, #30
 8015962:	4606      	mov	r6, r0
 8015964:	460c      	mov	r4, r1
 8015966:	d507      	bpl.n	8015978 <__smakebuf_r+0x1c>
 8015968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	6123      	str	r3, [r4, #16]
 8015970:	2301      	movs	r3, #1
 8015972:	6163      	str	r3, [r4, #20]
 8015974:	b002      	add	sp, #8
 8015976:	bd70      	pop	{r4, r5, r6, pc}
 8015978:	ab01      	add	r3, sp, #4
 801597a:	466a      	mov	r2, sp
 801597c:	f7ff ffc9 	bl	8015912 <__swhatbuf_r>
 8015980:	9900      	ldr	r1, [sp, #0]
 8015982:	4605      	mov	r5, r0
 8015984:	4630      	mov	r0, r6
 8015986:	f7ff f8ef 	bl	8014b68 <_malloc_r>
 801598a:	b948      	cbnz	r0, 80159a0 <__smakebuf_r+0x44>
 801598c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015990:	059a      	lsls	r2, r3, #22
 8015992:	d4ef      	bmi.n	8015974 <__smakebuf_r+0x18>
 8015994:	f023 0303 	bic.w	r3, r3, #3
 8015998:	f043 0302 	orr.w	r3, r3, #2
 801599c:	81a3      	strh	r3, [r4, #12]
 801599e:	e7e3      	b.n	8015968 <__smakebuf_r+0xc>
 80159a0:	4b0d      	ldr	r3, [pc, #52]	; (80159d8 <__smakebuf_r+0x7c>)
 80159a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80159a4:	89a3      	ldrh	r3, [r4, #12]
 80159a6:	6020      	str	r0, [r4, #0]
 80159a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159ac:	81a3      	strh	r3, [r4, #12]
 80159ae:	9b00      	ldr	r3, [sp, #0]
 80159b0:	6163      	str	r3, [r4, #20]
 80159b2:	9b01      	ldr	r3, [sp, #4]
 80159b4:	6120      	str	r0, [r4, #16]
 80159b6:	b15b      	cbz	r3, 80159d0 <__smakebuf_r+0x74>
 80159b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159bc:	4630      	mov	r0, r6
 80159be:	f000 f863 	bl	8015a88 <_isatty_r>
 80159c2:	b128      	cbz	r0, 80159d0 <__smakebuf_r+0x74>
 80159c4:	89a3      	ldrh	r3, [r4, #12]
 80159c6:	f023 0303 	bic.w	r3, r3, #3
 80159ca:	f043 0301 	orr.w	r3, r3, #1
 80159ce:	81a3      	strh	r3, [r4, #12]
 80159d0:	89a0      	ldrh	r0, [r4, #12]
 80159d2:	4305      	orrs	r5, r0
 80159d4:	81a5      	strh	r5, [r4, #12]
 80159d6:	e7cd      	b.n	8015974 <__smakebuf_r+0x18>
 80159d8:	080148e9 	.word	0x080148e9

080159dc <_raise_r>:
 80159dc:	291f      	cmp	r1, #31
 80159de:	b538      	push	{r3, r4, r5, lr}
 80159e0:	4604      	mov	r4, r0
 80159e2:	460d      	mov	r5, r1
 80159e4:	d904      	bls.n	80159f0 <_raise_r+0x14>
 80159e6:	2316      	movs	r3, #22
 80159e8:	6003      	str	r3, [r0, #0]
 80159ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159ee:	bd38      	pop	{r3, r4, r5, pc}
 80159f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80159f2:	b112      	cbz	r2, 80159fa <_raise_r+0x1e>
 80159f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159f8:	b94b      	cbnz	r3, 8015a0e <_raise_r+0x32>
 80159fa:	4620      	mov	r0, r4
 80159fc:	f000 f830 	bl	8015a60 <_getpid_r>
 8015a00:	462a      	mov	r2, r5
 8015a02:	4601      	mov	r1, r0
 8015a04:	4620      	mov	r0, r4
 8015a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a0a:	f000 b817 	b.w	8015a3c <_kill_r>
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	d00a      	beq.n	8015a28 <_raise_r+0x4c>
 8015a12:	1c59      	adds	r1, r3, #1
 8015a14:	d103      	bne.n	8015a1e <_raise_r+0x42>
 8015a16:	2316      	movs	r3, #22
 8015a18:	6003      	str	r3, [r0, #0]
 8015a1a:	2001      	movs	r0, #1
 8015a1c:	e7e7      	b.n	80159ee <_raise_r+0x12>
 8015a1e:	2400      	movs	r4, #0
 8015a20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015a24:	4628      	mov	r0, r5
 8015a26:	4798      	blx	r3
 8015a28:	2000      	movs	r0, #0
 8015a2a:	e7e0      	b.n	80159ee <_raise_r+0x12>

08015a2c <raise>:
 8015a2c:	4b02      	ldr	r3, [pc, #8]	; (8015a38 <raise+0xc>)
 8015a2e:	4601      	mov	r1, r0
 8015a30:	6818      	ldr	r0, [r3, #0]
 8015a32:	f7ff bfd3 	b.w	80159dc <_raise_r>
 8015a36:	bf00      	nop
 8015a38:	2000002c 	.word	0x2000002c

08015a3c <_kill_r>:
 8015a3c:	b538      	push	{r3, r4, r5, lr}
 8015a3e:	4d07      	ldr	r5, [pc, #28]	; (8015a5c <_kill_r+0x20>)
 8015a40:	2300      	movs	r3, #0
 8015a42:	4604      	mov	r4, r0
 8015a44:	4608      	mov	r0, r1
 8015a46:	4611      	mov	r1, r2
 8015a48:	602b      	str	r3, [r5, #0]
 8015a4a:	f7eb f819 	bl	8000a80 <_kill>
 8015a4e:	1c43      	adds	r3, r0, #1
 8015a50:	d102      	bne.n	8015a58 <_kill_r+0x1c>
 8015a52:	682b      	ldr	r3, [r5, #0]
 8015a54:	b103      	cbz	r3, 8015a58 <_kill_r+0x1c>
 8015a56:	6023      	str	r3, [r4, #0]
 8015a58:	bd38      	pop	{r3, r4, r5, pc}
 8015a5a:	bf00      	nop
 8015a5c:	2001196c 	.word	0x2001196c

08015a60 <_getpid_r>:
 8015a60:	f7eb b806 	b.w	8000a70 <_getpid>

08015a64 <_fstat_r>:
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	4d07      	ldr	r5, [pc, #28]	; (8015a84 <_fstat_r+0x20>)
 8015a68:	2300      	movs	r3, #0
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	4608      	mov	r0, r1
 8015a6e:	4611      	mov	r1, r2
 8015a70:	602b      	str	r3, [r5, #0]
 8015a72:	f7eb f866 	bl	8000b42 <_fstat>
 8015a76:	1c43      	adds	r3, r0, #1
 8015a78:	d102      	bne.n	8015a80 <_fstat_r+0x1c>
 8015a7a:	682b      	ldr	r3, [r5, #0]
 8015a7c:	b103      	cbz	r3, 8015a80 <_fstat_r+0x1c>
 8015a7e:	6023      	str	r3, [r4, #0]
 8015a80:	bd38      	pop	{r3, r4, r5, pc}
 8015a82:	bf00      	nop
 8015a84:	2001196c 	.word	0x2001196c

08015a88 <_isatty_r>:
 8015a88:	b538      	push	{r3, r4, r5, lr}
 8015a8a:	4d06      	ldr	r5, [pc, #24]	; (8015aa4 <_isatty_r+0x1c>)
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	4604      	mov	r4, r0
 8015a90:	4608      	mov	r0, r1
 8015a92:	602b      	str	r3, [r5, #0]
 8015a94:	f7eb f865 	bl	8000b62 <_isatty>
 8015a98:	1c43      	adds	r3, r0, #1
 8015a9a:	d102      	bne.n	8015aa2 <_isatty_r+0x1a>
 8015a9c:	682b      	ldr	r3, [r5, #0]
 8015a9e:	b103      	cbz	r3, 8015aa2 <_isatty_r+0x1a>
 8015aa0:	6023      	str	r3, [r4, #0]
 8015aa2:	bd38      	pop	{r3, r4, r5, pc}
 8015aa4:	2001196c 	.word	0x2001196c

08015aa8 <_init>:
 8015aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aaa:	bf00      	nop
 8015aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aae:	bc08      	pop	{r3}
 8015ab0:	469e      	mov	lr, r3
 8015ab2:	4770      	bx	lr

08015ab4 <_fini>:
 8015ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab6:	bf00      	nop
 8015ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aba:	bc08      	pop	{r3}
 8015abc:	469e      	mov	lr, r3
 8015abe:	4770      	bx	lr
