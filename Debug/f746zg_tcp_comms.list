
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019810  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038a0  080199e0  080199e0  000299e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d280  0801d280  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  0801d280  0801d280  0002d280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d288  0801d288  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d288  0801d288  0002d288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d28c  0801d28c  0002d28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801d290  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  0801d490  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  0801d530  000302a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011974  20000340  0801d5d0  00030340  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011cb4  0801d5d0  00031cb4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   00031c59  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007652  00000000  00000000  00061fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002300  00000000  00000000  00069620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002180  00000000  00000000  0006b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001233f  00000000  00000000  0006daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034f39  00000000  00000000  0007fddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001114da  00000000  00000000  000b4d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c61f2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a334  00000000  00000000  001c6244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000340 	.word	0x20000340
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080199c8 	.word	0x080199c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000344 	.word	0x20000344
 800020c:	080199c8 	.word	0x080199c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
}
 8000fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
}
 8000fca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SCB_EnableICache+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
}
 8000ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SCB_EnableDCache+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SCB_EnableDCache+0x84>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001040:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <SCB_EnableDCache+0x84>)
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ef      	bne.n	8001038 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableDCache+0x84>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableDCache+0x84>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001094:	f000 f984 	bl	80013a0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001098:	f7ff ff90 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800109c:	f7ff ffb4 	bl	8001008 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fe36 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f840 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f8ac 	bl	8001204 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ac:	f004 fa9a 	bl	80055e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <main+0x68>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <main+0x6c>)
 80010b6:	f004 fb27 	bl	8005708 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a10      	ldr	r2, [pc, #64]	; (8001100 <main+0x70>)
 80010be:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <main+0x74>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <main+0x78>)
 80010c6:	f004 fb1f 	bl	8005708 <osThreadNew>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <main+0x7c>)
 80010ce:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <main+0x80>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <main+0x84>)
 80010d6:	f004 fb17 	bl	8005708 <osThreadNew>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <main+0x88>)
 80010de:	6013      	str	r3, [r2, #0]

  /* creation of control_systems */
  control_systemsHandle = osThreadNew(start_control_systems, NULL, &control_systems_attributes);
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <main+0x8c>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <main+0x90>)
 80010e6:	f004 fb0f 	bl	8005708 <osThreadNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <main+0x94>)
 80010ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f0:	f004 faac 	bl	800564c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <main+0x64>
 80010f6:	bf00      	nop
 80010f8:	0801cbcc 	.word	0x0801cbcc
 80010fc:	080012fd 	.word	0x080012fd
 8001100:	2000035c 	.word	0x2000035c
 8001104:	0801cbf0 	.word	0x0801cbf0
 8001108:	08001315 	.word	0x08001315
 800110c:	20000360 	.word	0x20000360
 8001110:	0801cc14 	.word	0x0801cc14
 8001114:	08001335 	.word	0x08001335
 8001118:	20000364 	.word	0x20000364
 800111c:	0801cc38 	.word	0x0801cc38
 8001120:	08001359 	.word	0x08001359
 8001124:	20000368 	.word	0x20000368

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f015 fba5 	bl	8016886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <SystemClock_Config+0xd4>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <SystemClock_Config+0xd4>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <SystemClock_Config+0xd4>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <SystemClock_Config+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a25      	ldr	r2, [pc, #148]	; (8001200 <SystemClock_Config+0xd8>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <SystemClock_Config+0xd8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001190:	2319      	movs	r3, #25
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001194:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001198:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fc48 	bl	8003a3c <HAL_RCC_OscConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011b2:	f000 f935 	bl	8001420 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011b6:	f002 fbf1 	bl	800399c <HAL_PWREx_EnableOverDrive>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011c0:	f000 f92e 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2107      	movs	r1, #7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fece 	bl	8003f84 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ee:	f000 f917 	bl	8001420 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_GPIO_Init+0xec>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <MX_GPIO_Init+0xec>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_GPIO_Init+0xec>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_GPIO_Init+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001298:	4816      	ldr	r0, [pc, #88]	; (80012f4 <MX_GPIO_Init+0xf0>)
 800129a:	f002 fb4b 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	4814      	ldr	r0, [pc, #80]	; (80012f8 <MX_GPIO_Init+0xf4>)
 80012a6:	f002 fb45 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_GPIO_Init+0xf0>)
 80012c4:	f002 f98a 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_GPIO_Init+0xf4>)
 80012e2:	f002 f97b 	bl	80035dc <HAL_GPIO_Init>

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800

080012fc <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001304:	f003 fb2c 	bl	8004960 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 8001308:	f000 fb50 	bl	80019ac <tcpclient_init>
  for (;;) {
    osDelay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f004 faa1 	bl	8005854 <osDelay>
 8001312:	e7fb      	b.n	800130c <start_conn_handler+0x10>

08001314 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <start_motor_control+0x1c>)
 8001322:	f002 fb20 	bl	8003966 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001326:	2064      	movs	r0, #100	; 0x64
 8001328:	f004 fa94 	bl	8005854 <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800132c:	e7f6      	b.n	800131c <start_motor_control+0x8>
 800132e:	bf00      	nop
 8001330:	40020400 	.word	0x40020400

08001334 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 800133c:	f003 fb06 	bl	800494c <get_static_netif>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f003 fead 	bl	80050a4 <ethernetif_input>
  sys_check_timeouts();
 800134a:	f012 fc5f 	bl	8013c0c <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f004 fa80 	bl	8005854 <osDelay>
 8001354:	e7fb      	b.n	800134e <start_tcp_thread+0x1a>
	...

08001358 <start_control_systems>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_systems */
void start_control_systems(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_control_systems */
  float *linear_x_ptr = get_linear_x();
 8001360:	f000 fa4a 	bl	80017f8 <get_linear_x>
 8001364:	4603      	mov	r3, r0
 8001366:	617b      	str	r3, [r7, #20]
  float *angular_z_ptr = get_angular_z();
 8001368:	f000 fa50 	bl	800180c <get_angular_z>
 800136c:	4603      	mov	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	float angular_z = *angular_z_ptr;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
	if (angular_z > 0) {
//		motor_dir = DIR_ACW;
	}
    int m = (*linear_x_ptr) * 100;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800139c <start_control_systems+0x44>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 3a90 	vmov	r3, s15
 800138c:	60bb      	str	r3, [r7, #8]
    set_idx(m);
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f000 fa22 	bl	80017d8 <set_idx>

    osDelay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f004 fa5d 	bl	8005854 <osDelay>
  {
 800139a:	e7e9      	b.n	8001370 <start_control_systems+0x18>
 800139c:	42c80000 	.word	0x42c80000

080013a0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013b2:	f000 fde9 	bl	8001f88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MPU_Config+0x58>)
 80013c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80013c2:	230e      	movs	r3, #14
 80013c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013ce:	2303      	movs	r3, #3
 80013d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013e2:	463b      	mov	r3, r7
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fe07 	bl	8001ff8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013ea:	2004      	movs	r0, #4
 80013ec:	f000 fde4 	bl	8001fb8 <HAL_MPU_Enable>

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20010000 	.word	0x20010000

080013fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140e:	f000 fc95 	bl	8001d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40010000 	.word	0x40010000

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	210f      	movs	r1, #15
 8001466:	f06f 0001 	mvn.w	r0, #1
 800146a:	f000 fd63 	bl	8001f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_InitTick+0xd0>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	4a2e      	ldr	r2, [pc, #184]	; (800154c <HAL_InitTick+0xd0>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6453      	str	r3, [r2, #68]	; 0x44
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_InitTick+0xd0>)
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 ff3a 	bl	8004328 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014b4:	f002 ff24 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 80014b8:	4603      	mov	r3, r0
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_InitTick+0xd4>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0c9b      	lsrs	r3, r3, #18
 80014c8:	3b01      	subs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_InitTick+0xd8>)
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_InitTick+0xdc>)
 80014d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_InitTick+0xd8>)
 80014d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_InitTick+0xd8>)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_InitTick+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_InitTick+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_InitTick+0xd8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014f2:	4818      	ldr	r0, [pc, #96]	; (8001554 <HAL_InitTick+0xd8>)
 80014f4:	f002 ff4a 	bl	800438c <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11b      	bne.n	800153e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <HAL_InitTick+0xd8>)
 8001508:	f002 ffa2 	bl	8004450 <HAL_TIM_Base_Start_IT>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001516:	2b00      	cmp	r3, #0
 8001518:	d111      	bne.n	800153e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800151a:	2019      	movs	r0, #25
 800151c:	f000 fd26 	bl	8001f6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d808      	bhi.n	8001538 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	2019      	movs	r0, #25
 800152c:	f000 fd02 	bl	8001f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_InitTick+0xe0>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e002      	b.n	800153e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800153e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001542:	4618      	mov	r0, r3
 8001544:	3730      	adds	r7, #48	; 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	431bde83 	.word	0x431bde83
 8001554:	2000036c 	.word	0x2000036c
 8001558:	40010000 	.word	0x40010000
 800155c:	20000004 	.word	0x20000004

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001592:	f002 ffd5 	bl	8004540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000036c 	.word	0x2000036c

080015a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <ETH_IRQHandler+0x10>)
 80015a6:	f001 f945 	bl	8002834 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20004f9c 	.word	0x20004f9c

080015b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_kill>:

int _kill(int pid, int sig)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <_kill+0x20>)
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
	return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	20011cb0 	.word	0x20011cb0

080015e8 <_exit>:

void _exit (int status)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe5 	bl	80015c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015fa:	e7fe      	b.n	80015fa <_exit+0x12>

080015fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800160e:	f3af 8000 	nop.w
 8001612:	4601      	mov	r1, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf0      	blt.n	800160e <_read+0x12>
	}

return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e009      	b.n	800165c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf1      	blt.n	8001648 <_write+0x12>
	}
	return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_close>:

int _close(int file)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001696:	605a      	str	r2, [r3, #4]
	return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_isatty>:

int _isatty(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return 1;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d205      	bcs.n	8001714 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <_sbrk+0x6c>)
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001712:	e009      	b.n	8001728 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	20050000 	.word	0x20050000
 8001738:	00000400 	.word	0x00000400
 800173c:	200003b8 	.word	0x200003b8
 8001740:	20011cb8 	.word	0x20011cb8
 8001744:	20011cb0 	.word	0x20011cb0

08001748 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <SystemInit+0x24>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <SystemInit+0x24>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SystemInit+0x28>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	40023800 	.word	0x40023800

08001774 <fun>:
int indx = 0;
float linear_x=0, angular_z=0;


float *fun(char string[])
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    static float res[10];
    char *token;
    int count=0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
    token = strtok(string,",");
 8001780:	4913      	ldr	r1, [pc, #76]	; (80017d0 <fun+0x5c>)
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f016 f8a6 	bl	80178d4 <strtok>
 8001788:	6178      	str	r0, [r7, #20]
    float x;
    // res[0] = atof(token);
    while (token)
 800178a:	e018      	b.n	80017be <fun+0x4a>
    {
        x = atof(token);
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f014 ff21 	bl	80165d4 <atof>
 8001792:	ec53 2b10 	vmov	r2, r3, d0
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff fa07 	bl	8000bac <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	60fb      	str	r3, [r7, #12]
        res[count] = x;
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <fun+0x60>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	601a      	str	r2, [r3, #0]
        // printf("%f ",x);
        count+=1;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	3301      	adds	r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
        token = strtok(NULL,",");
 80017b4:	4906      	ldr	r1, [pc, #24]	; (80017d0 <fun+0x5c>)
 80017b6:	2000      	movs	r0, #0
 80017b8:	f016 f88c 	bl	80178d4 <strtok>
 80017bc:	6178      	str	r0, [r7, #20]
    while (token)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e3      	bne.n	800178c <fun+0x18>
    }
    return res;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <fun+0x60>)
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08019a1c 	.word	0x08019a1c
 80017d4:	2000056c 	.word	0x2000056c

080017d8 <set_idx>:

// Function to send the data to the server
void tcpsend (char *data);

void set_idx(int ix) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	indx = ix;
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <set_idx+0x1c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000055c 	.word	0x2000055c

080017f8 <get_linear_x>:

float *get_linear_x() {
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
    return &linear_x;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <get_linear_x+0x10>)
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000560 	.word	0x20000560

0800180c <get_angular_z>:

float *get_angular_z() {
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	return &angular_z;
 8001810:	4b02      	ldr	r3, [pc, #8]	; (800181c <get_angular_z+0x10>)
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	20000564 	.word	0x20000564

08001820 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2010      	movs	r0, #16
 800182e:	f007 ff2b 	bl	8009688 <netconn_new_with_proto_and_callback>
 8001832:	4603      	mov	r3, r0
 8001834:	4a39      	ldr	r2, [pc, #228]	; (800191c <tcpinit_thread+0xfc>)
 8001836:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <tcpinit_thread+0xfc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d068      	beq.n	8001912 <tcpinit_thread+0xf2>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <tcpinit_thread+0xfc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	220a      	movs	r2, #10
 8001846:	4936      	ldr	r1, [pc, #216]	; (8001920 <tcpinit_thread+0x100>)
 8001848:	4618      	mov	r0, r3
 800184a:	f007 ffd7 	bl	80097fc <netconn_bind>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d156      	bne.n	8001908 <tcpinit_thread+0xe8>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <tcpinit_thread+0x104>)
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <tcpinit_thread+0x108>)
 800185e:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <tcpinit_thread+0x10c>)
 8001862:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001866:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <tcpinit_thread+0xfc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <tcpinit_thread+0x10c>)
 800186e:	8812      	ldrh	r2, [r2, #0]
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <tcpinit_thread+0x104>)
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fffa 	bl	800986c <netconn_connect>
 8001878:	4603      	mov	r3, r0
 800187a:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 800187c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d136      	bne.n	80018f2 <tcpinit_thread+0xd2>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8001884:	482a      	ldr	r0, [pc, #168]	; (8001930 <tcpinit_thread+0x110>)
 8001886:	f014 fdf1 	bl	801646c <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <tcpinit_thread+0xfc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4929      	ldr	r1, [pc, #164]	; (8001934 <tcpinit_thread+0x114>)
 8001890:	4618      	mov	r0, r3
 8001892:	f008 f987 	bl	8009ba4 <netconn_recv>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f6      	bne.n	800188a <tcpinit_thread+0x6a>

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <tcpinit_thread+0x114>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <tcpinit_thread+0x114>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	895b      	ldrh	r3, [r3, #10]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4822      	ldr	r0, [pc, #136]	; (8001938 <tcpinit_thread+0x118>)
 80018b0:	f015 f9cd 	bl	8016c4e <strncpy>

							float *linx = fun(msgc);
 80018b4:	4820      	ldr	r0, [pc, #128]	; (8001938 <tcpinit_thread+0x118>)
 80018b6:	f7ff ff5d 	bl	8001774 <fun>
 80018ba:	60b8      	str	r0, [r7, #8]
							linear_x = *(linx);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <tcpinit_thread+0x11c>)
 80018c2:	6013      	str	r3, [r2, #0]
							angular_z = *(linx+1);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <tcpinit_thread+0x120>)
 80018ca:	6013      	str	r3, [r2, #0]
//							sys_arch_sem_wait(&tcpsem, 5);
//
//							// send the data to the TCP Server
//							tcpsend (smsgc);

							memset (msgc, '\0', 100);  // clear the buffer
 80018cc:	2264      	movs	r2, #100	; 0x64
 80018ce:	2100      	movs	r1, #0
 80018d0:	4819      	ldr	r0, [pc, #100]	; (8001938 <tcpinit_thread+0x118>)
 80018d2:	f014 ffd8 	bl	8016886 <memset>
						}
						while (netbuf_next(buf) > 0);
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <tcpinit_thread+0x114>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f009 fe10 	bl	800b500 <netbuf_next>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dcda      	bgt.n	800189c <tcpinit_thread+0x7c>

						netbuf_delete(buf);
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <tcpinit_thread+0x114>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f009 fde8 	bl	800b4c0 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 80018f0:	e7cb      	b.n	800188a <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <tcpinit_thread+0xfc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f008 fac2 	bl	8009e80 <netconn_close>
				netconn_delete(conn);
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <tcpinit_thread+0xfc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f007 ff5f 	bl	80097c4 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001906:	e004      	b.n	8001912 <tcpinit_thread+0xf2>
			netconn_delete(conn);
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <tcpinit_thread+0xfc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f007 ff59 	bl	80097c4 <netconn_delete>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200003bc 	.word	0x200003bc
 8001920:	0801cd84 	.word	0x0801cd84
 8001924:	200003c4 	.word	0x200003c4
 8001928:	01002a0a 	.word	0x01002a0a
 800192c:	200003c8 	.word	0x200003c8
 8001930:	20000568 	.word	0x20000568
 8001934:	200003c0 	.word	0x200003c0
 8001938:	200003cc 	.word	0x200003cc
 800193c:	20000560 	.word	0x20000560
 8001940:	20000564 	.word	0x20000564

08001944 <tcpsend>:

void tcpsend (char *data)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b085      	sub	sp, #20
 8001948:	af02      	add	r7, sp, #8
 800194a:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <tcpsend+0x30>)
 800194e:	681c      	ldr	r4, [r3, #0]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7fe fc5d 	bl	8000210 <strlen>
 8001956:	4602      	mov	r2, r0
 8001958:	2300      	movs	r3, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4620      	mov	r0, r4
 8001962:	f008 f98b 	bl	8009c7c <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 8001966:	4804      	ldr	r0, [pc, #16]	; (8001978 <tcpsend+0x34>)
 8001968:	f014 fd80 	bl	801646c <sys_sem_signal>
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}
 8001974:	200003bc 	.word	0x200003bc
 8001978:	20000568 	.word	0x20000568

0800197c <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <tcpsend_thread+0x24>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4906      	ldr	r1, [pc, #24]	; (80019a4 <tcpsend_thread+0x28>)
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <tcpsend_thread+0x2c>)
 800198e:	f015 f8e7 	bl	8016b60 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
//		sys_arch_sem_wait(&tcpsem, 5);
		// send the data to the server
		tcpsend(smsgc);
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <tcpsend_thread+0x2c>)
 8001994:	f7ff ffd6 	bl	8001944 <tcpsend>
		osDelay(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f003 ff5b 	bl	8005854 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx);
 800199e:	e7f1      	b.n	8001984 <tcpsend_thread+0x8>
 80019a0:	2000055c 	.word	0x2000055c
 80019a4:	08019a20 	.word	0x08019a20
 80019a8:	20000494 	.word	0x20000494

080019ac <tcpclient_init>:




void tcpclient_init (void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <tcpclient_init+0x3c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f014 fd01 	bl	80163c0 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80019be:	2318      	movs	r3, #24
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	2200      	movs	r2, #0
 80019c8:	4908      	ldr	r1, [pc, #32]	; (80019ec <tcpclient_init+0x40>)
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <tcpclient_init+0x44>)
 80019cc:	f014 fdc4 	bl	8016558 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80019d0:	2318      	movs	r3, #24
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d8:	2200      	movs	r2, #0
 80019da:	4906      	ldr	r1, [pc, #24]	; (80019f4 <tcpclient_init+0x48>)
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <tcpclient_init+0x4c>)
 80019de:	f014 fdbb 	bl	8016558 <sys_thread_new>
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000568 	.word	0x20000568
 80019ec:	08001821 	.word	0x08001821
 80019f0:	08019a34 	.word	0x08019a34
 80019f4:	0800197d 	.word	0x0800197d
 80019f8:	08019a44 	.word	0x08019a44

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a02:	490e      	ldr	r1, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a18:	4c0b      	ldr	r4, [pc, #44]	; (8001a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a26:	f7ff fe8f 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f014 fecd 	bl	80167c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fb2f 	bl	8001090 <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001a40:	0801d290 	.word	0x0801d290
  ldr r2, =_sbss
 8001a44:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001a48:	20011cb4 	.word	0x20011cb4

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>

08001a4e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <LAN8742_RegisterBusIO+0x28>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <LAN8742_RegisterBusIO+0x28>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <LAN8742_RegisterBusIO+0x28>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7a:	e014      	b.n	8001aa6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d17c      	bne.n	8001bcc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e01c      	b.n	8001b26 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f107 0208 	add.w	r2, r7, #8
 8001af4:	2112      	movs	r1, #18
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	4798      	blx	r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da03      	bge.n	8001b08 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001b00:	f06f 0304 	mvn.w	r3, #4
 8001b04:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001b06:	e00b      	b.n	8001b20 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d105      	bne.n	8001b20 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
         break;
 8001b1e:	e005      	b.n	8001b2c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b1f      	cmp	r3, #31
 8001b2a:	d9df      	bls.n	8001aec <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b1f      	cmp	r3, #31
 8001b32:	d902      	bls.n	8001b3a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b34:	f06f 0302 	mvn.w	r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d145      	bne.n	8001bcc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6810      	ldr	r0, [r2, #0]
 8001b48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4798      	blx	r3
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db37      	blt.n	8001bc6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6810      	ldr	r0, [r2, #0]
 8001b5e:	f107 0208 	add.w	r2, r7, #8
 8001b62:	2100      	movs	r1, #0
 8001b64:	4798      	blx	r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db28      	blt.n	8001bbe <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4798      	blx	r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b76:	e01c      	b.n	8001bb2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4798      	blx	r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b8a:	d80e      	bhi.n	8001baa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6810      	ldr	r0, [r2, #0]
 8001b94:	f107 0208 	add.w	r2, r7, #8
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4798      	blx	r3
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da07      	bge.n	8001bb2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001ba2:	f06f 0304 	mvn.w	r3, #4
 8001ba6:	613b      	str	r3, [r7, #16]
                 break;
 8001ba8:	e010      	b.n	8001bcc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001baa:	f06f 0301 	mvn.w	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
               break;
 8001bb0:	e00c      	b.n	8001bcc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1dd      	bne.n	8001b78 <LAN8742_Init+0xc6>
 8001bbc:	e006      	b.n	8001bcc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001bbe:	f06f 0304 	mvn.w	r3, #4
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e002      	b.n	8001bcc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001bc6:	f06f 0303 	mvn.w	r3, #3
 8001bca:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d112      	bne.n	8001bf8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4798      	blx	r3
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001bdc:	bf00      	nop
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4798      	blx	r3
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bf0:	d9f5      	bls.n	8001bde <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6810      	ldr	r0, [r2, #0]
 8001c16:	f107 020c 	add.w	r2, r7, #12
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4798      	blx	r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da02      	bge.n	8001c2a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c24:	f06f 0304 	mvn.w	r3, #4
 8001c28:	e06e      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6810      	ldr	r0, [r2, #0]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	2101      	movs	r1, #1
 8001c38:	4798      	blx	r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da02      	bge.n	8001c46 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c40:	f06f 0304 	mvn.w	r3, #4
 8001c44:	e060      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001c50:	2301      	movs	r3, #1
 8001c52:	e059      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6810      	ldr	r0, [r2, #0]
 8001c5c:	f107 020c 	add.w	r2, r7, #12
 8001c60:	2100      	movs	r1, #0
 8001c62:	4798      	blx	r3
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da02      	bge.n	8001c70 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c6a:	f06f 0304 	mvn.w	r3, #4
 8001c6e:	e04b      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11b      	bne.n	8001cb2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <LAN8742_GetLinkState+0x90>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e03a      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e033      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001caa:	2304      	movs	r3, #4
 8001cac:	e02c      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e02a      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6810      	ldr	r0, [r2, #0]
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	211f      	movs	r1, #31
 8001cc0:	4798      	blx	r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da02      	bge.n	8001cce <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001cc8:	f06f 0304 	mvn.w	r3, #4
 8001ccc:	e01c      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	e015      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 031c 	and.w	r3, r3, #28
 8001ce2:	2b18      	cmp	r3, #24
 8001ce4:	d101      	bne.n	8001cea <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e00e      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 031c 	and.w	r3, r3, #28
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e007      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 031c 	and.w	r3, r3, #28
 8001cfe:	2b14      	cmp	r3, #20
 8001d00:	d101      	bne.n	8001d06 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d02:	2304      	movs	r3, #4
 8001d04:	e000      	b.n	8001d08 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d06:	2305      	movs	r3, #5
    }				
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x28>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f8fc 	bl	8001f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f7ff fba8 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fb7e 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000594 	.word	0x20000594

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000594 	.word	0x20000594

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <__NVIC_SetPriorityGrouping>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <__NVIC_SetPriorityGrouping+0x40>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	05fa0000 	.word	0x05fa0000

08001e0c <__NVIC_GetPriorityGrouping>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff4c 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f46:	f7ff ff61 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	6978      	ldr	r0, [r7, #20]
 8001f52:	f7ff ffb1 	bl	8001eb8 <NVIC_EncodePriority>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff80 	bl	8001e64 <__NVIC_SetPriority>
}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff54 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f8c:	f3bf 8f5f 	dmb	sy
}
 8001f90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_MPU_Disable+0x28>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_MPU_Disable+0x28>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_MPU_Disable+0x2c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	e000ed90 	.word	0xe000ed90

08001fb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HAL_MPU_Enable+0x38>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_MPU_Enable+0x3c>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_MPU_Enable+0x3c>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd6:	f3bf 8f4f 	dsb	sy
}
 8001fda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fdc:	f3bf 8f6f 	isb	sy
}
 8001fe0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed90 	.word	0xe000ed90
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	785a      	ldrb	r2, [r3, #1]
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_MPU_ConfigRegion+0x84>)
 8002006:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d029      	beq.n	8002064 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_MPU_ConfigRegion+0x84>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7b1b      	ldrb	r3, [r3, #12]
 800201c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7adb      	ldrb	r3, [r3, #11]
 8002022:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7a9b      	ldrb	r3, [r3, #10]
 800202a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800202c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7b5b      	ldrb	r3, [r3, #13]
 8002032:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002034:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7b9b      	ldrb	r3, [r3, #14]
 800203a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800203c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7bdb      	ldrb	r3, [r3, #15]
 8002042:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002044:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7a5b      	ldrb	r3, [r3, #9]
 800204a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800204c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7a1b      	ldrb	r3, [r3, #8]
 8002052:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002054:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800205e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002060:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002062:	e005      	b.n	8002070 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_MPU_ConfigRegion+0x84>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <HAL_MPU_ConfigRegion+0x84>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed90 	.word	0xe000ed90

08002080 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06a      	b.n	8002168 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2223      	movs	r2, #35	; 0x23
 80020a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f003 f87d 	bl	80051a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_ETH_Init+0xf0>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_ETH_Init+0xf0>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_ETH_Init+0xf0>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_ETH_Init+0xf4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_ETH_Init+0xf4>)
 80020c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_ETH_Init+0xf4>)
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <HAL_ETH_Init+0xf4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_ETH_Init+0xf4>)
 80020de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f8:	f7ff fe34 	bl	8001d64 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020fe:	e011      	b.n	8002124 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002100:	f7ff fe30 	bl	8001d64 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800210e:	d909      	bls.n	8002124 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2204      	movs	r2, #4
 8002114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	22e0      	movs	r2, #224	; 0xe0
 800211c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e021      	b.n	8002168 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e4      	bne.n	8002100 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 ffac 	bl	8003094 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f001 f853 	bl	80031e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 f8a9 	bl	800329a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	461a      	mov	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f001 f811 	bl	8003178 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2210      	movs	r2, #16
 8002162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800

08002178 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002186:	2b10      	cmp	r3, #16
 8002188:	d150      	bne.n	800222c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2223      	movs	r2, #35	; 0x23
 800218e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fa7b 	bl	8002694 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0208 	orr.w	r2, r2, #8
 80021ac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff fde0 	bl	8001d7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0204 	orr.w	r2, r2, #4
 80021d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f7ff fdcd 	bl	8001d7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fdf3 	bl	8002dd6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002206:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800221e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2223      	movs	r2, #35	; 0x23
 8002224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	2b10      	cmp	r3, #16
 8002248:	d17b      	bne.n	8002342 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2223      	movs	r2, #35	; 0x23
 800224e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_ETH_Start_IT+0x114>)
 8002276:	430b      	orrs	r3, r1
 8002278:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800228c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2204      	movs	r2, #4
 8002294:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f9fc 	bl	8002694 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0208 	orr.w	r2, r2, #8
 80022aa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7ff fd61 	bl	8001d7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0204 	orr.w	r2, r2, #4
 80022d0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022da:	2001      	movs	r0, #1
 80022dc:	f7ff fd4e 	bl	8001d7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fd74 	bl	8002dd6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002304:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800231c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_ETH_Start_IT+0x118>)
 800232e:	430b      	orrs	r3, r1
 8002330:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002334:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2223      	movs	r2, #35	; 0x23
 800233a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	00020060 	.word	0x00020060
 8002350:	0001a0c1 	.word	0x0001a0c1

08002354 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002362:	2b23      	cmp	r3, #35	; 0x23
 8002364:	d16e      	bne.n	8002444 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2223      	movs	r2, #35	; 0x23
 800236a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	69d9      	ldr	r1, [r3, #28]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_ETH_Stop_IT+0xfc>)
 800237e:	400b      	ands	r3, r1
 8002380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002384:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002398:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800239c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	f023 0302 	bic.w	r3, r3, #2
 80023b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023b4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0204 	bic.w	r2, r2, #4
 80023c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff fcd4 	bl	8001d7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fcfa 	bl	8002dd6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0208 	bic.w	r2, r2, #8
 80023f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7ff fcbe 	bl	8001d7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e00e      	b.n	800242c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	3212      	adds	r2, #18
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d9ed      	bls.n	800240e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2210      	movs	r2, #16
 800243c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	fffe5f3e 	.word	0xfffe5f3e

08002454 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e045      	b.n	8002504 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247e:	2b23      	cmp	r3, #35	; 0x23
 8002480:	d13f      	bne.n	8002502 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800248a:	2201      	movs	r2, #1
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 ff70 	bl	8003374 <ETH_Prepare_Tx_Descriptors>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f043 0202 	orr.w	r2, r3, #2
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e02a      	b.n	8002504 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80024ae:	f3bf 8f4f 	dsb	sy
}
 80024b2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d904      	bls.n	80024d0 <HAL_ETH_Transmit_IT+0x7c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	1f1a      	subs	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ea:	461a      	mov	r2, r3
 80024ec:	2304      	movs	r3, #4
 80024ee:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	461a      	mov	r2, r3
 80024fa:	2300      	movs	r3, #0
 80024fc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
  }
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0a8      	b.n	800268a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253e:	2b23      	cmp	r3, #35	; 0x23
 8002540:	d001      	beq.n	8002546 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0a1      	b.n	800268a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	3212      	adds	r2, #18
 8002552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255c:	f1c3 0304 	rsb	r3, r3, #4
 8002560:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002562:	e06a      	b.n	800263a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <HAL_ETH_ReadData+0x88>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d040      	beq.n	8002616 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0c1b      	lsrs	r3, r3, #16
 80025c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025c8:	3b04      	subs	r3, #4
 80025ca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025f0:	461a      	mov	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f002 ffa1 	bl	800553c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	441a      	add	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d902      	bls.n	8002628 <HAL_ETH_ReadData+0x11c>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b04      	subs	r3, #4
 8002626:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	3212      	adds	r2, #18
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db06      	blt.n	8002650 <HAL_ETH_ReadData+0x144>
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	429a      	cmp	r2, r3
 8002648:	d202      	bcs.n	8002650 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d089      	beq.n	8002564 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	441a      	add	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f815 	bl	8002694 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	e000      	b.n	800268a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80026a0:	2301      	movs	r3, #1
 80026a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	3212      	adds	r2, #18
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80026bc:	e040      	b.n	8002740 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d112      	bne.n	80026ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 ff06 	bl	80054dc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	74fb      	strb	r3, [r7, #19]
 80026da:	e007      	b.n	80026ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	461a      	mov	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	461a      	mov	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d026      	beq.n	8002740 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <ETH_UpdateDescriptor+0xe4>)
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	e003      	b.n	800270a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002708:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 800270a:	f3bf 8f5f 	dmb	sy
}
 800270e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3301      	adds	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d902      	bls.n	800272e <ETH_UpdateDescriptor+0x9a>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3b04      	subs	r3, #4
 800272c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	3212      	adds	r2, #18
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	617b      	str	r3, [r7, #20]
      desccount--;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	3b01      	subs	r3, #1
 800273e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <ETH_UpdateDescriptor+0xb8>
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1b8      	bne.n	80026be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	429a      	cmp	r2, r3
 8002754:	d00c      	beq.n	8002770 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	461a      	mov	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002770:	bf00      	nop
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	800045f8 	.word	0x800045f8

0800277c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3318      	adds	r3, #24
 8002788:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800279a:	e03f      	b.n	800281c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	3304      	adds	r3, #4
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d028      	beq.n	800281c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db1b      	blt.n	8002818 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	3304      	adds	r3, #4
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fee7 	bl	80055c0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	3304      	adds	r3, #4
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	3301      	adds	r3, #1
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
 8002816:	e001      	b.n	800281c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_ETH_ReleaseTxPacket+0xac>
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1b9      	bne.n	800279c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d112      	bne.n	8002874 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d109      	bne.n	8002874 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002868:	461a      	mov	r2, r3
 800286a:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_ETH_IRQHandler+0x178>)
 800286c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f002 f9fa 	bl	8004c68 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d113      	bne.n	80028ae <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10a      	bne.n	80028ae <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a0:	461a      	mov	r2, r3
 80028a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80028a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f002 f9ed 	bl	8004c88 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c0:	d14c      	bne.n	800295c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	d142      	bne.n	800295c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f043 0208 	orr.w	r2, r3, #8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f8:	d11a      	bne.n	8002930 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_ETH_IRQHandler+0x17c>)
 8002906:	4013      	ands	r3, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002924:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	22e0      	movs	r2, #224	; 0xe0
 800292a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800292e:	e012      	b.n	8002956 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	f248 6380 	movw	r3, #34432	; 0x8680
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294e:	461a      	mov	r2, r3
 8002950:	f248 6380 	movw	r3, #34432	; 0x8680
 8002954:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f002 f9a6 	bl	8004ca8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10e      	bne.n	8002988 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f81c 	bl	80029b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_ETH_IRQHandler+0x180>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_ETH_IRQHandler+0x180>)
 8002996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800299a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f815 	bl	80029cc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	00010040 	.word	0x00010040
 80029b0:	007e2000 	.word	0x007e2000
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 031c 	and.w	r3, r3, #28
 80029fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	02db      	lsls	r3, r3, #11
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0302 	bic.w	r3, r3, #2
 8002a1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a30:	f7ff f998 	bl	8001d64 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a36:	e00d      	b.n	8002a54 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a38:	f7ff f994 	bl	8001d64 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a46:	d301      	bcc.n	8002a4c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e010      	b.n	8002a6e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ec      	bne.n	8002a38 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 031c 	and.w	r3, r3, #28
 8002a92:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	02db      	lsls	r3, r3, #11
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	019b      	lsls	r3, r3, #6
 8002aa4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad0:	f7ff f948 	bl	8001d64 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ad6:	e00d      	b.n	8002af4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002ad8:	f7ff f944 	bl	8001d64 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae6:	d301      	bcc.n	8002aec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e009      	b.n	8002b00 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ec      	bne.n	8002ad8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d9      	b.n	8002cd0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf0c      	ite	eq
 8002b8a:	2301      	moveq	r3, #1
 8002b8c:	2300      	movne	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e00b      	b.n	8002d08 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d105      	bne.n	8002d06 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f88f 	bl	8002e20 <ETH_SetMACConfig>

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 031c 	bic.w	r3, r3, #28
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d28:	f001 fade 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8002d2c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d908      	bls.n	8002d48 <HAL_ETH_SetMDIOClockRange+0x38>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d804      	bhi.n	8002d48 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e027      	b.n	8002d98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d908      	bls.n	8002d62 <HAL_ETH_SetMDIOClockRange+0x52>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d204      	bcs.n	8002d62 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f043 030c 	orr.w	r3, r3, #12
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e01a      	b.n	8002d98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d303      	bcc.n	8002d72 <HAL_ETH_SetMDIOClockRange+0x62>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d911      	bls.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d908      	bls.n	8002d8c <HAL_ETH_SetMDIOClockRange+0x7c>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d804      	bhi.n	8002d8c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e005      	b.n	8002d98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e000      	b.n	8002d98 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002d96:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	01312cff 	.word	0x01312cff
 8002dac:	02160ebf 	.word	0x02160ebf
 8002db0:	03938700 	.word	0x03938700
 8002db4:	05f5e0ff 	.word	0x05f5e0ff
 8002db8:	08f0d17f 	.word	0x08f0d17f

08002dbc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002df8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7fe ffb8 	bl	8001d7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e16:	6193      	str	r3, [r2, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <ETH_SetMACConfig+0x15c>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	7c1b      	ldrb	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <ETH_SetMACConfig+0x28>
 8002e42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e46:	e000      	b.n	8002e4a <ETH_SetMACConfig+0x2a>
 8002e48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	7c5b      	ldrb	r3, [r3, #17]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <ETH_SetMACConfig+0x38>
 8002e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e56:	e000      	b.n	8002e5a <ETH_SetMACConfig+0x3a>
 8002e58:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e5a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	7fdb      	ldrb	r3, [r3, #31]
 8002e66:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e68:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	7f92      	ldrb	r2, [r2, #30]
 8002e74:	2a00      	cmp	r2, #0
 8002e76:	d102      	bne.n	8002e7e <ETH_SetMACConfig+0x5e>
 8002e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7c:	e000      	b.n	8002e80 <ETH_SetMACConfig+0x60>
 8002e7e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	7f1b      	ldrb	r3, [r3, #28]
 8002e86:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e88:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	791b      	ldrb	r3, [r3, #4]
 8002e94:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d102      	bne.n	8002ea8 <ETH_SetMACConfig+0x88>
 8002ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea6:	e000      	b.n	8002eaa <ETH_SetMACConfig+0x8a>
 8002ea8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002eaa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7bdb      	ldrb	r3, [r3, #15]
 8002eb0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002eb2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ec0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7fe ff4e 	bl	8001d7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f06:	2a00      	cmp	r2, #0
 8002f08:	d101      	bne.n	8002f0e <ETH_SetMACConfig+0xee>
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	e000      	b.n	8002f10 <ETH_SetMACConfig+0xf0>
 8002f0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f10:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f1e:	2a01      	cmp	r2, #1
 8002f20:	d101      	bne.n	8002f26 <ETH_SetMACConfig+0x106>
 8002f22:	2208      	movs	r2, #8
 8002f24:	e000      	b.n	8002f28 <ETH_SetMACConfig+0x108>
 8002f26:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f30:	2a01      	cmp	r2, #1
 8002f32:	d101      	bne.n	8002f38 <ETH_SetMACConfig+0x118>
 8002f34:	2204      	movs	r2, #4
 8002f36:	e000      	b.n	8002f3a <ETH_SetMACConfig+0x11a>
 8002f38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f42:	2a01      	cmp	r2, #1
 8002f44:	d101      	bne.n	8002f4a <ETH_SetMACConfig+0x12a>
 8002f46:	2202      	movs	r2, #2
 8002f48:	e000      	b.n	8002f4c <ETH_SetMACConfig+0x12c>
 8002f4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fe ff09 	bl	8001d7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	ff20810f 	.word	0xff20810f

08002f80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <ETH_SetDMAConfig+0x110>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	7b1b      	ldrb	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <ETH_SetDMAConfig+0x2c>
 8002fa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002faa:	e000      	b.n	8002fae <ETH_SetDMAConfig+0x2e>
 8002fac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	7b5b      	ldrb	r3, [r3, #13]
 8002fb2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fb4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	7f52      	ldrb	r2, [r2, #29]
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d102      	bne.n	8002fc4 <ETH_SetDMAConfig+0x44>
 8002fbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fc2:	e000      	b.n	8002fc6 <ETH_SetDMAConfig+0x46>
 8002fc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	7b9b      	ldrb	r3, [r3, #14]
 8002fcc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fd4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	7f1b      	ldrb	r3, [r3, #28]
 8002fda:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002fdc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	7f9b      	ldrb	r3, [r3, #30]
 8002fe2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fe4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003004:	461a      	mov	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003016:	2001      	movs	r0, #1
 8003018:	f7fe feb0 	bl	8001d7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003024:	461a      	mov	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	791b      	ldrb	r3, [r3, #4]
 800302e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003034:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800303a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003040:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003048:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800304a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003052:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003058:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003062:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003066:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003074:	2001      	movs	r0, #1
 8003076:	f7fe fe81 	bl	8001d7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	f8de3f23 	.word	0xf8de3f23

08003094 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b0a6      	sub	sp, #152	; 0x98
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030d0:	2300      	movs	r3, #0
 80030d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003100:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003108:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fe86 	bl	8002e20 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003114:	2301      	movs	r3, #1
 8003116:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003118:	2301      	movs	r3, #1
 800311a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003122:	2301      	movs	r3, #1
 8003124:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003140:	2301      	movs	r3, #1
 8003142:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003148:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800314a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800314e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003154:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800315c:	2300      	movs	r3, #0
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003164:	f107 0308 	add.w	r3, r7, #8
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ff08 	bl	8002f80 <ETH_SetDMAConfig>
}
 8003170:	bf00      	nop
 8003172:	3798      	adds	r7, #152	; 0x98
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3305      	adds	r3, #5
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	3204      	adds	r2, #4
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <ETH_MACAddressConfig+0x68>)
 800319a:	4413      	add	r3, r2
 800319c:	461a      	mov	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3303      	adds	r3, #3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	061a      	lsls	r2, r3, #24
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3302      	adds	r3, #2
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3301      	adds	r3, #1
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	4313      	orrs	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <ETH_MACAddressConfig+0x6c>)
 80031ca:	4413      	add	r3, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	6013      	str	r3, [r2, #0]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40028040 	.word	0x40028040
 80031e4:	40028044 	.word	0x40028044

080031e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e03e      	b.n	8003274 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68d9      	ldr	r1, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	3206      	adds	r2, #6
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d80c      	bhi.n	8003258 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e004      	b.n	8003262 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d9bd      	bls.n	80031f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800328c:	611a      	str	r2, [r3, #16]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e046      	b.n	8003336 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6919      	ldr	r1, [r3, #16]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2200      	movs	r2, #0
 80032d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2200      	movs	r2, #0
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80032ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	3212      	adds	r2, #18
 8003302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d80c      	bhi.n	8003326 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6919      	ldr	r1, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	e004      	b.n	8003330 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d9b5      	bls.n	80032a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003366:	60da      	str	r2, [r3, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003374:	b480      	push	{r7}
 8003376:	b08d      	sub	sp, #52	; 0x34
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3318      	adds	r3, #24
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033b6:	d007      	beq.n	80033c8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	3304      	adds	r3, #4
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0ff      	b.n	80035cc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	3301      	adds	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4b7d      	ldr	r3, [pc, #500]	; (80035d8 <ETH_Prepare_Tx_Descriptors+0x264>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	6852      	ldr	r2, [r2, #4]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800344e:	f3bf 8f5f 	dmb	sy
}
 8003452:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003460:	e082      	b.n	8003568 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e005      	b.n	800348e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	3301      	adds	r3, #1
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	2b03      	cmp	r3, #3
 8003498:	d902      	bls.n	80034a0 <ETH_Prepare_Tx_Descriptors+0x12c>
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	3b04      	subs	r3, #4
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c2:	d007      	beq.n	80034d4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	3304      	adds	r3, #4
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d029      	beq.n	8003528 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e6:	e019      	b.n	800351c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80034e8:	f3bf 8f5f 	dmb	sy
}
 80034ec:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	3301      	adds	r3, #1
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	2b03      	cmp	r3, #3
 8003504:	d902      	bls.n	800350c <ETH_Prepare_Tx_Descriptors+0x198>
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	3b04      	subs	r3, #4
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003514:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	3301      	adds	r3, #1
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
 800351c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	429a      	cmp	r2, r3
 8003522:	d3e1      	bcc.n	80034e8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003524:	2302      	movs	r3, #2
 8003526:	e051      	b.n	80035cc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	3301      	adds	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003544:	4013      	ands	r3, r2
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	6852      	ldr	r2, [r2, #4]
 800354a:	431a      	orrs	r2, r3
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	3301      	adds	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003556:	f3bf 8f5f 	dmb	sy
}
 800355a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f47f af78 	bne.w	8003462 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d006      	beq.n	8003586 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e005      	b.n	8003592 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a2:	6979      	ldr	r1, [r7, #20]
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	3304      	adds	r3, #4
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b4:	b672      	cpsid	i
}
 80035b6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80035c6:	b662      	cpsie	i
}
 80035c8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3734      	adds	r7, #52	; 0x34
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	ffffe000 	.word	0xffffe000

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e175      	b.n	80038e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 8164 	bne.w	80038e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x56>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80be 	beq.w	80038e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	4b66      	ldr	r3, [pc, #408]	; (8003900 <HAL_GPIO_Init+0x324>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	4a65      	ldr	r2, [pc, #404]	; (8003900 <HAL_GPIO_Init+0x324>)
 800376c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003770:	6453      	str	r3, [r2, #68]	; 0x44
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_GPIO_Init+0x324>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800377e:	4a61      	ldr	r2, [pc, #388]	; (8003904 <HAL_GPIO_Init+0x328>)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	220f      	movs	r2, #15
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_GPIO_Init+0x32c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d037      	beq.n	800381a <HAL_GPIO_Init+0x23e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a57      	ldr	r2, [pc, #348]	; (800390c <HAL_GPIO_Init+0x330>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_GPIO_Init+0x23a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_GPIO_Init+0x334>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02b      	beq.n	8003812 <HAL_GPIO_Init+0x236>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a55      	ldr	r2, [pc, #340]	; (8003914 <HAL_GPIO_Init+0x338>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d025      	beq.n	800380e <HAL_GPIO_Init+0x232>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a54      	ldr	r2, [pc, #336]	; (8003918 <HAL_GPIO_Init+0x33c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01f      	beq.n	800380a <HAL_GPIO_Init+0x22e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a53      	ldr	r2, [pc, #332]	; (800391c <HAL_GPIO_Init+0x340>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_GPIO_Init+0x22a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_GPIO_Init+0x344>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_GPIO_Init+0x226>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a51      	ldr	r2, [pc, #324]	; (8003924 <HAL_GPIO_Init+0x348>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_GPIO_Init+0x222>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a50      	ldr	r2, [pc, #320]	; (8003928 <HAL_GPIO_Init+0x34c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x21e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4f      	ldr	r2, [pc, #316]	; (800392c <HAL_GPIO_Init+0x350>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_GPIO_Init+0x21a>
 80037f2:	2309      	movs	r3, #9
 80037f4:	e012      	b.n	800381c <HAL_GPIO_Init+0x240>
 80037f6:	230a      	movs	r3, #10
 80037f8:	e010      	b.n	800381c <HAL_GPIO_Init+0x240>
 80037fa:	2308      	movs	r3, #8
 80037fc:	e00e      	b.n	800381c <HAL_GPIO_Init+0x240>
 80037fe:	2307      	movs	r3, #7
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003802:	2306      	movs	r3, #6
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x240>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x240>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x240>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_GPIO_Init+0x328>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <HAL_GPIO_Init+0x354>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a34      	ldr	r2, [pc, #208]	; (8003930 <HAL_GPIO_Init+0x354>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_GPIO_Init+0x354>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_GPIO_Init+0x354>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_GPIO_Init+0x354>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <HAL_GPIO_Init+0x354>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_GPIO_Init+0x354>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_GPIO_Init+0x354>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f ae86 	bls.w	80035fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40021400 	.word	0x40021400
 8003920:	40021800 	.word	0x40021800
 8003924:	40021c00 	.word	0x40021c00
 8003928:	40022000 	.word	0x40022000
 800392c:	40022400 	.word	0x40022400
 8003930:	40013c00 	.word	0x40013c00

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003978:	887a      	ldrh	r2, [r7, #2]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	041a      	lsls	r2, r3, #16
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43d9      	mvns	r1, r3
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	400b      	ands	r3, r1
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	619a      	str	r2, [r3, #24]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	; 0x40
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ca:	f7fe f9cb 	bl	8001d64 <HAL_GetTick>
 80039ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039d0:	e009      	b.n	80039e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039d2:	f7fe f9c7 	bl	8001d64 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e0:	d901      	bls.n	80039e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e022      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d1ee      	bne.n	80039d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a00:	f7fe f9b0 	bl	8001d64 <HAL_GetTick>
 8003a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a06:	e009      	b.n	8003a1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a08:	f7fe f9ac 	bl	8001d64 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a16:	d901      	bls.n	8003a1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e007      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a28:	d1ee      	bne.n	8003a08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e291      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a60:	4b96      	ldr	r3, [pc, #600]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d00c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6c:	4b93      	ldr	r3, [pc, #588]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d112      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62>
 8003a78:	4b90      	ldr	r3, [pc, #576]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a84:	d10b      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a86:	4b8d      	ldr	r3, [pc, #564]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d06c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x130>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d168      	bne.n	8003b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e26b      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x7a>
 8003aa8:	4b84      	ldr	r3, [pc, #528]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a83      	ldr	r2, [pc, #524]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e02e      	b.n	8003b14 <HAL_RCC_OscConfig+0xd8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x9c>
 8003abe:	4b7f      	ldr	r3, [pc, #508]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7e      	ldr	r2, [pc, #504]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7b      	ldr	r2, [pc, #492]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xd8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003ae2:	4b76      	ldr	r3, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b73      	ldr	r3, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a72      	ldr	r2, [pc, #456]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xd8>
 8003afc:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b6c      	ldr	r3, [pc, #432]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6b      	ldr	r2, [pc, #428]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f922 	bl	8001d64 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe f91e 	bl	8001d64 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e21f      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe f90e 	bl	8001d64 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f90a 	bl	8001d64 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e20b      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x110>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d069      	beq.n	8003c4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b7a:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x190>
 8003b92:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1df      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	493d      	ldr	r1, [pc, #244]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e040      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a38      	ldr	r2, [pc, #224]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe f8c0 	bl	8001d64 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe f8bc 	bl	8001d64 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1bd      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4929      	ldr	r1, [pc, #164]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
 8003c1a:	e018      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe f89c 	bl	8001d64 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe f898 	bl	8001d64 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e199      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d038      	beq.n	8003ccc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d019      	beq.n	8003c96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fe f879 	bl	8001d64 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fe f875 	bl	8001d64 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e176      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x23a>
 8003c94:	e01a      	b.n	8003ccc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <HAL_RCC_OscConfig+0x280>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f85f 	bl	8001d64 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fe f85b 	bl	8001d64 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d903      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e15c      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
 8003cbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b91      	ldr	r3, [pc, #580]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a4 	beq.w	8003e22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b8b      	ldr	r3, [pc, #556]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b88      	ldr	r3, [pc, #544]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a87      	ldr	r2, [pc, #540]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b85      	ldr	r3, [pc, #532]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d02:	4b82      	ldr	r3, [pc, #520]	; (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d118      	bne.n	8003d40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d0e:	4b7f      	ldr	r3, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a7e      	ldr	r2, [pc, #504]	; (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe f823 	bl	8001d64 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fe f81f 	bl	8001d64 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b64      	cmp	r3, #100	; 0x64
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e120      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d34:	4b75      	ldr	r3, [pc, #468]	; (8003f0c <HAL_RCC_OscConfig+0x4d0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x31a>
 8003d48:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	4a6e      	ldr	r2, [pc, #440]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70
 8003d54:	e02d      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x33c>
 8003d5e:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a69      	ldr	r2, [pc, #420]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6a:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a66      	ldr	r2, [pc, #408]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
 8003d76:	e01c      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x35e>
 8003d80:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a60      	ldr	r2, [pc, #384]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	4b5e      	ldr	r3, [pc, #376]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a5d      	ldr	r2, [pc, #372]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	e00b      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
 8003d9a:	4b5b      	ldr	r3, [pc, #364]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a5a      	ldr	r2, [pc, #360]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
 8003da6:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d015      	beq.n	8003de6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd ffd3 	bl	8001d64 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd ffcf 	bl	8001d64 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e0ce      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	4b4b      	ldr	r3, [pc, #300]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ee      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x386>
 8003de4:	e014      	b.n	8003e10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd ffbd 	bl	8001d64 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd ffb9 	bl	8001d64 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0b8      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e04:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a3b      	ldr	r2, [pc, #236]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a4 	beq.w	8003f74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d06b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d149      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd ff8a 	bl	8001d64 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd ff86 	bl	8001d64 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e087      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4313      	orrs	r3, r2
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd ff5a 	bl	8001d64 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd ff56 	bl	8001d64 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e057      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x478>
 8003ed2:	e04f      	b.n	8003f74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd ff40 	bl	8001d64 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd ff3c 	bl	8001d64 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e03d      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4ac>
 8003f06:	e035      	b.n	8003f74 <HAL_RCC_OscConfig+0x538>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCC_OscConfig+0x544>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d028      	beq.n	8003f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d121      	bne.n	8003f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11a      	bne.n	8003f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0d0      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b6a      	ldr	r3, [pc, #424]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d910      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b67      	ldr	r3, [pc, #412]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 020f 	bic.w	r2, r3, #15
 8003fb2:	4965      	ldr	r1, [pc, #404]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0b8      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe4:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a52      	ldr	r2, [pc, #328]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004006:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	494d      	ldr	r1, [pc, #308]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d040      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d115      	bne.n	8004066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e073      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06b      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4936      	ldr	r1, [pc, #216]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fd fe74 	bl	8001d64 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd fe70 	bl	8001d64 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e053      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b27      	ldr	r3, [pc, #156]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d210      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	4922      	ldr	r1, [pc, #136]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e032      	b.n	800413e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4916      	ldr	r1, [pc, #88]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	490e      	ldr	r1, [pc, #56]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004116:	f000 f821 	bl	800415c <HAL_RCC_GetSysClockFreq>
 800411a:	4602      	mov	r2, r0
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	490a      	ldr	r1, [pc, #40]	; (8004150 <HAL_RCC_ClockConfig+0x1cc>)
 8004128:	5ccb      	ldrb	r3, [r1, r3]
 800412a:	fa22 f303 	lsr.w	r3, r2, r3
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1d0>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1d4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd f9a0 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023c00 	.word	0x40023c00
 800414c:	40023800 	.word	0x40023800
 8004150:	0801cc5c 	.word	0x0801cc5c
 8004154:	20000000 	.word	0x20000000
 8004158:	20000004 	.word	0x20000004

0800415c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004160:	b090      	sub	sp, #64	; 0x40
 8004162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416c:	2300      	movs	r3, #0
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d00d      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x40>
 8004180:	2b08      	cmp	r3, #8
 8004182:	f200 80a1 	bhi.w	80042c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x34>
 800418a:	2b04      	cmp	r3, #4
 800418c:	d003      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x3a>
 800418e:	e09b      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004194:	e09b      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004196:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800419a:	e098      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_RCC_GetSysClockFreq+0x180>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041a6:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_GetSysClockFreq+0x180>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d028      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_GetSysClockFreq+0x180>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	2200      	movs	r2, #0
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	627a      	str	r2, [r7, #36]	; 0x24
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041c4:	2100      	movs	r1, #0
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041c8:	fb03 f201 	mul.w	r2, r3, r1
 80041cc:	2300      	movs	r3, #0
 80041ce:	fb00 f303 	mul.w	r3, r0, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	4a43      	ldr	r2, [pc, #268]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041d6:	fba0 1202 	umull	r1, r2, r0, r2
 80041da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041dc:	460a      	mov	r2, r1
 80041de:	62ba      	str	r2, [r7, #40]	; 0x28
 80041e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e2:	4413      	add	r3, r2
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	2200      	movs	r2, #0
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	61fa      	str	r2, [r7, #28]
 80041ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041f6:	f7fc fd29 	bl	8000c4c <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4613      	mov	r3, r2
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004202:	e053      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	2200      	movs	r2, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	617a      	str	r2, [r7, #20]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004216:	f04f 0b00 	mov.w	fp, #0
 800421a:	4652      	mov	r2, sl
 800421c:	465b      	mov	r3, fp
 800421e:	f04f 0000 	mov.w	r0, #0
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	0159      	lsls	r1, r3, #5
 8004228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422c:	0150      	lsls	r0, r2, #5
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	ebb2 080a 	subs.w	r8, r2, sl
 8004236:	eb63 090b 	sbc.w	r9, r3, fp
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004246:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800424a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800424e:	ebb2 0408 	subs.w	r4, r2, r8
 8004252:	eb63 0509 	sbc.w	r5, r3, r9
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	00eb      	lsls	r3, r5, #3
 8004260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004264:	00e2      	lsls	r2, r4, #3
 8004266:	4614      	mov	r4, r2
 8004268:	461d      	mov	r5, r3
 800426a:	eb14 030a 	adds.w	r3, r4, sl
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	eb45 030b 	adc.w	r3, r5, fp
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004282:	4629      	mov	r1, r5
 8004284:	028b      	lsls	r3, r1, #10
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800428c:	4621      	mov	r1, r4
 800428e:	028a      	lsls	r2, r1, #10
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	2200      	movs	r2, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	60fa      	str	r2, [r7, #12]
 800429c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a0:	f7fc fcd4 	bl	8000c4c <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4613      	mov	r3, r2
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetSysClockFreq+0x180>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	3301      	adds	r3, #1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80042bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042c6:	e002      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3740      	adds	r7, #64	; 0x40
 80042d4:	46bd      	mov	sp, r7
 80042d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	017d7840 	.word	0x017d7840

080042e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000000 	.word	0x20000000

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004304:	f7ff fff0 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0b5b      	lsrs	r3, r3, #13
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	0801cc6c 	.word	0x0801cc6c

08004328 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	220f      	movs	r2, #15
 8004336:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <HAL_RCC_GetClockConfig+0x60>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	40023c00 	.word	0x40023c00

0800438c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e049      	b.n	8004432 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f841 	bl	800443a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fa00 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d001      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e054      	b.n	8004512 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a26      	ldr	r2, [pc, #152]	; (8004520 <HAL_TIM_Base_Start_IT+0xd0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d01d      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a22      	ldr	r2, [pc, #136]	; (8004524 <HAL_TIM_Base_Start_IT+0xd4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_TIM_Base_Start_IT+0xd8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_TIM_Base_Start_IT+0xdc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_TIM_Base_Start_IT+0xe0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_TIM_Base_Start_IT+0xe4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_TIM_Base_Start_IT+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d115      	bne.n	80044fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_TIM_Base_Start_IT+0xec>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d015      	beq.n	800450e <HAL_TIM_Base_Start_IT+0xbe>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d011      	beq.n	800450e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	e008      	b.n	800450e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e000      	b.n	8004510 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40010400 	.word	0x40010400
 8004534:	40014000 	.word	0x40014000
 8004538:	40001800 	.word	0x40001800
 800453c:	00010007 	.word	0x00010007

08004540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b02      	cmp	r3, #2
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0202 	mvn.w	r2, #2
 800456c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f905 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8f7 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f908 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d122      	bne.n	80045f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d11b      	bne.n	80045f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0204 	mvn.w	r2, #4
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8db 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8cd 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8de 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d122      	bne.n	8004644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b08      	cmp	r3, #8
 800460a:	d11b      	bne.n	8004644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0208 	mvn.w	r2, #8
 8004614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8b1 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f8a3 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8b4 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b10      	cmp	r3, #16
 8004650:	d122      	bne.n	8004698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b10      	cmp	r3, #16
 800465e:	d11b      	bne.n	8004698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0210 	mvn.w	r2, #16
 8004668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2208      	movs	r2, #8
 800466e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f887 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004684:	e005      	b.n	8004692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f879 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f88a 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d10e      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0201 	mvn.w	r2, #1
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fe9c 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f91a 	bl	8004924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	d10e      	bne.n	800471e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b80      	cmp	r3, #128	; 0x80
 800470c:	d107      	bne.n	800471e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f90d 	bl	8004938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d10e      	bne.n	800474a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d107      	bne.n	800474a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f838 	bl	80047ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b20      	cmp	r3, #32
 8004756:	d10e      	bne.n	8004776 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b20      	cmp	r3, #32
 8004764:	d107      	bne.n	8004776 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f06f 0220 	mvn.w	r2, #32
 800476e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f8cd 	bl	8004910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3c      	ldr	r2, [pc, #240]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3b      	ldr	r2, [pc, #236]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2f      	ldr	r2, [pc, #188]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d027      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d023      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <TIM_Base_SetConfig+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a27      	ldr	r2, [pc, #156]	; (80048fc <TIM_Base_SetConfig+0x12c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <TIM_Base_SetConfig+0x130>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a25      	ldr	r2, [pc, #148]	; (8004904 <TIM_Base_SetConfig+0x134>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a24      	ldr	r2, [pc, #144]	; (8004908 <TIM_Base_SetConfig+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a23      	ldr	r2, [pc, #140]	; (800490c <TIM_Base_SetConfig+0x13c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	615a      	str	r2, [r3, #20]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	40001800 	.word	0x40001800
 8004908:	40001c00 	.word	0x40001c00
 800490c:	40002000 	.word	0x40002000

08004910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return &gnetif;
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <get_static_netif+0x10>)
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000598 	.word	0x20000598

08004960 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004966:	4b98      	ldr	r3, [pc, #608]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004968:	220a      	movs	r2, #10
 800496a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 800496c:	4b96      	ldr	r3, [pc, #600]	; (8004bc8 <MX_LWIP_Init+0x268>)
 800496e:	222a      	movs	r2, #42	; 0x2a
 8004970:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004972:	4b95      	ldr	r3, [pc, #596]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004974:	2200      	movs	r2, #0
 8004976:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8004978:	4b93      	ldr	r3, [pc, #588]	; (8004bc8 <MX_LWIP_Init+0x268>)
 800497a:	2220      	movs	r2, #32
 800497c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800497e:	4b93      	ldr	r3, [pc, #588]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004984:	4b91      	ldr	r3, [pc, #580]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004986:	22ff      	movs	r2, #255	; 0xff
 8004988:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800498a:	4b90      	ldr	r3, [pc, #576]	; (8004bcc <MX_LWIP_Init+0x26c>)
 800498c:	22ff      	movs	r2, #255	; 0xff
 800498e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004990:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004992:	2200      	movs	r2, #0
 8004994:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004996:	4b8e      	ldr	r3, [pc, #568]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004998:	220a      	movs	r2, #10
 800499a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 800499c:	4b8c      	ldr	r3, [pc, #560]	; (8004bd0 <MX_LWIP_Init+0x270>)
 800499e:	222a      	movs	r2, #42	; 0x2a
 80049a0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80049a2:	4b8b      	ldr	r3, [pc, #556]	; (8004bd0 <MX_LWIP_Init+0x270>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80049a8:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <MX_LWIP_Init+0x270>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80049ae:	2100      	movs	r1, #0
 80049b0:	2000      	movs	r0, #0
 80049b2:	f006 ff43 	bl	800b83c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80049b6:	4b84      	ldr	r3, [pc, #528]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	061a      	lsls	r2, r3, #24
 80049bc:	4b82      	ldr	r3, [pc, #520]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	431a      	orrs	r2, r3
 80049c4:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049c6:	789b      	ldrb	r3, [r3, #2]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	4313      	orrs	r3, r2
 80049cc:	4a7e      	ldr	r2, [pc, #504]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049ce:	78d2      	ldrb	r2, [r2, #3]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	061a      	lsls	r2, r3, #24
 80049d4:	4b7c      	ldr	r3, [pc, #496]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	0619      	lsls	r1, r3, #24
 80049da:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	4319      	orrs	r1, r3
 80049e2:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	430b      	orrs	r3, r1
 80049ea:	4977      	ldr	r1, [pc, #476]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049ec:	78c9      	ldrb	r1, [r1, #3]
 80049ee:	430b      	orrs	r3, r1
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049f6:	431a      	orrs	r2, r3
 80049f8:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <MX_LWIP_Init+0x268>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	0619      	lsls	r1, r3, #24
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	4319      	orrs	r1, r3
 8004a06:	4b70      	ldr	r3, [pc, #448]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a08:	789b      	ldrb	r3, [r3, #2]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	496e      	ldr	r1, [pc, #440]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a10:	78c9      	ldrb	r1, [r1, #3]
 8004a12:	430b      	orrs	r3, r1
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	0619      	lsls	r1, r3, #24
 8004a22:	4b69      	ldr	r3, [pc, #420]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	4319      	orrs	r1, r3
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a2c:	789b      	ldrb	r3, [r3, #2]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	430b      	orrs	r3, r1
 8004a32:	4965      	ldr	r1, [pc, #404]	; (8004bc8 <MX_LWIP_Init+0x268>)
 8004a34:	78c9      	ldrb	r1, [r1, #3]
 8004a36:	430b      	orrs	r3, r1
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <MX_LWIP_Init+0x274>)
 8004a3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a40:	4b62      	ldr	r3, [pc, #392]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	061a      	lsls	r2, r3, #24
 8004a46:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	4b5f      	ldr	r3, [pc, #380]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a50:	789b      	ldrb	r3, [r3, #2]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	4313      	orrs	r3, r2
 8004a56:	4a5d      	ldr	r2, [pc, #372]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a58:	78d2      	ldrb	r2, [r2, #3]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	061a      	lsls	r2, r3, #24
 8004a5e:	4b5b      	ldr	r3, [pc, #364]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	0619      	lsls	r1, r3, #24
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	4319      	orrs	r1, r3
 8004a6c:	4b57      	ldr	r3, [pc, #348]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a6e:	789b      	ldrb	r3, [r3, #2]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	4955      	ldr	r1, [pc, #340]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a76:	78c9      	ldrb	r1, [r1, #3]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a80:	431a      	orrs	r2, r3
 8004a82:	4b52      	ldr	r3, [pc, #328]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	0619      	lsls	r1, r3, #24
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	4319      	orrs	r1, r3
 8004a90:	4b4e      	ldr	r3, [pc, #312]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	430b      	orrs	r3, r1
 8004a98:	494c      	ldr	r1, [pc, #304]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004a9a:	78c9      	ldrb	r1, [r1, #3]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	4b49      	ldr	r3, [pc, #292]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	0619      	lsls	r1, r3, #24
 8004aac:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	4319      	orrs	r1, r3
 8004ab4:	4b45      	ldr	r3, [pc, #276]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004ab6:	789b      	ldrb	r3, [r3, #2]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	430b      	orrs	r3, r1
 8004abc:	4943      	ldr	r1, [pc, #268]	; (8004bcc <MX_LWIP_Init+0x26c>)
 8004abe:	78c9      	ldrb	r1, [r1, #3]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	0e1b      	lsrs	r3, r3, #24
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	4a44      	ldr	r2, [pc, #272]	; (8004bd8 <MX_LWIP_Init+0x278>)
 8004ac8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004aca:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	061a      	lsls	r2, r3, #24
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	4b3d      	ldr	r3, [pc, #244]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004ada:	789b      	ldrb	r3, [r3, #2]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	4a3b      	ldr	r2, [pc, #236]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004ae2:	78d2      	ldrb	r2, [r2, #3]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	061a      	lsls	r2, r3, #24
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	0619      	lsls	r1, r3, #24
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	4319      	orrs	r1, r3
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004af8:	789b      	ldrb	r3, [r3, #2]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	430b      	orrs	r3, r1
 8004afe:	4934      	ldr	r1, [pc, #208]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b00:	78c9      	ldrb	r1, [r1, #3]
 8004b02:	430b      	orrs	r3, r1
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	0619      	lsls	r1, r3, #24
 8004b12:	4b2f      	ldr	r3, [pc, #188]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	4319      	orrs	r1, r3
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	430b      	orrs	r3, r1
 8004b22:	492b      	ldr	r1, [pc, #172]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b24:	78c9      	ldrb	r1, [r1, #3]
 8004b26:	430b      	orrs	r3, r1
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	0619      	lsls	r1, r3, #24
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	4319      	orrs	r1, r3
 8004b3e:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b40:	789b      	ldrb	r3, [r3, #2]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	430b      	orrs	r3, r1
 8004b46:	4922      	ldr	r1, [pc, #136]	; (8004bd0 <MX_LWIP_Init+0x270>)
 8004b48:	78c9      	ldrb	r1, [r1, #3]
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <MX_LWIP_Init+0x27c>)
 8004b52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004b54:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <MX_LWIP_Init+0x280>)
 8004b56:	9302      	str	r3, [sp, #8]
 8004b58:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <MX_LWIP_Init+0x284>)
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <MX_LWIP_Init+0x27c>)
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <MX_LWIP_Init+0x278>)
 8004b64:	491b      	ldr	r1, [pc, #108]	; (8004bd4 <MX_LWIP_Init+0x274>)
 8004b66:	4820      	ldr	r0, [pc, #128]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004b68:	f007 fd4a 	bl	800c600 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b6c:	481e      	ldr	r0, [pc, #120]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004b6e:	f007 fef5 	bl	800c95c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004b74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b84:	4818      	ldr	r0, [pc, #96]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004b86:	f007 fef9 	bl	800c97c <netif_set_up>
 8004b8a:	e002      	b.n	8004b92 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004b8c:	4816      	ldr	r0, [pc, #88]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004b8e:	f007 ff61 	bl	800ca54 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004b92:	4916      	ldr	r1, [pc, #88]	; (8004bec <MX_LWIP_Init+0x28c>)
 8004b94:	4814      	ldr	r0, [pc, #80]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004b96:	f007 fff3 	bl	800cb80 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4814      	ldr	r0, [pc, #80]	; (8004bf0 <MX_LWIP_Init+0x290>)
 8004ba0:	f011 fe71 	bl	8016886 <memset>
  attributes.name = "EthLink";
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <MX_LWIP_Init+0x290>)
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <MX_LWIP_Init+0x294>)
 8004ba8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <MX_LWIP_Init+0x290>)
 8004bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bb0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <MX_LWIP_Init+0x290>)
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <MX_LWIP_Init+0x290>)
 8004bba:	490b      	ldr	r1, [pc, #44]	; (8004be8 <MX_LWIP_Init+0x288>)
 8004bbc:	480e      	ldr	r0, [pc, #56]	; (8004bf8 <MX_LWIP_Init+0x298>)
 8004bbe:	f000 fda3 	bl	8005708 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004bc2:	bf00      	nop
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200005d8 	.word	0x200005d8
 8004bcc:	200005dc 	.word	0x200005dc
 8004bd0:	200005e0 	.word	0x200005e0
 8004bd4:	200005cc 	.word	0x200005cc
 8004bd8:	200005d0 	.word	0x200005d0
 8004bdc:	200005d4 	.word	0x200005d4
 8004be0:	0800b74d 	.word	0x0800b74d
 8004be4:	080050f9 	.word	0x080050f9
 8004be8:	20000598 	.word	0x20000598
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	200005e4 	.word	0x200005e4
 8004bf4:	08019a54 	.word	0x08019a54
 8004bf8:	080053c1 	.word	0x080053c1

08004bfc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004c22:	2320      	movs	r3, #32
 8004c24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c26:	f3bf 8f4f 	dsb	sy
}
 8004c2a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8004c2c:	e00b      	b.n	8004c46 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004c2e:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dcf0      	bgt.n	8004c2e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004c4c:	f3bf 8f4f 	dsb	sy
}
 8004c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c52:	f3bf 8f6f 	isb	sy
}
 8004c56:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000ed00 	.word	0xe000ed00

08004c68 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_ETH_RxCpltCallback+0x1c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f865 	bl	8005d44 <osSemaphoreRelease>
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20004f94 	.word	0x20004f94

08004c88 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004c90:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HAL_ETH_TxCpltCallback+0x1c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 f855 	bl	8005d44 <osSemaphoreRelease>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20004f98 	.word	0x20004f98

08004ca8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fe f883 	bl	8002dbc <HAL_ETH_GetDMAError>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d104      	bne.n	8004cca <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <HAL_ETH_ErrorCallback+0x2c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f83d 	bl	8005d44 <osSemaphoreRelease>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20004f94 	.word	0x20004f94

08004cd8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b0aa      	sub	sp, #168	; 0xa8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004cf2:	f107 0310 	add.w	r3, r7, #16
 8004cf6:	2264      	movs	r2, #100	; 0x64
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f011 fdc3 	bl	8016886 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d00:	4b85      	ldr	r3, [pc, #532]	; (8004f18 <low_level_init+0x240>)
 8004d02:	4a86      	ldr	r2, [pc, #536]	; (8004f1c <low_level_init+0x244>)
 8004d04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004d06:	2300      	movs	r3, #0
 8004d08:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004d0e:	23e1      	movs	r3, #225	; 0xe1
 8004d10:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004d12:	2300      	movs	r3, #0
 8004d14:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004d1e:	4a7e      	ldr	r2, [pc, #504]	; (8004f18 <low_level_init+0x240>)
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004d26:	4b7c      	ldr	r3, [pc, #496]	; (8004f18 <low_level_init+0x240>)
 8004d28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d2c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004d2e:	4b7a      	ldr	r3, [pc, #488]	; (8004f18 <low_level_init+0x240>)
 8004d30:	4a7b      	ldr	r2, [pc, #492]	; (8004f20 <low_level_init+0x248>)
 8004d32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004d34:	4b78      	ldr	r3, [pc, #480]	; (8004f18 <low_level_init+0x240>)
 8004d36:	4a7b      	ldr	r2, [pc, #492]	; (8004f24 <low_level_init+0x24c>)
 8004d38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004d3a:	4b77      	ldr	r3, [pc, #476]	; (8004f18 <low_level_init+0x240>)
 8004d3c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004d40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d42:	4875      	ldr	r0, [pc, #468]	; (8004f18 <low_level_init+0x240>)
 8004d44:	f7fd f99c 	bl	8002080 <HAL_ETH_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004d4e:	2238      	movs	r2, #56	; 0x38
 8004d50:	2100      	movs	r1, #0
 8004d52:	4875      	ldr	r0, [pc, #468]	; (8004f28 <low_level_init+0x250>)
 8004d54:	f011 fd97 	bl	8016886 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004d58:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <low_level_init+0x250>)
 8004d5a:	2221      	movs	r2, #33	; 0x21
 8004d5c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004d5e:	4b72      	ldr	r3, [pc, #456]	; (8004f28 <low_level_init+0x250>)
 8004d60:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004d64:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004d66:	4b70      	ldr	r3, [pc, #448]	; (8004f28 <low_level_init+0x250>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004d6c:	486f      	ldr	r0, [pc, #444]	; (8004f2c <low_level_init+0x254>)
 8004d6e:	f007 fb01 	bl	800c374 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2206      	movs	r2, #6
 8004d76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004d7a:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <low_level_init+0x240>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d86:	4b64      	ldr	r3, [pc, #400]	; (8004f18 <low_level_init+0x240>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	785a      	ldrb	r2, [r3, #1]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004d92:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <low_level_init+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	789a      	ldrb	r2, [r3, #2]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004d9e:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <low_level_init+0x240>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	78da      	ldrb	r2, [r3, #3]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004daa:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <low_level_init+0x240>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	791a      	ldrb	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004db6:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <low_level_init+0x240>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	795a      	ldrb	r2, [r3, #5]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004dc8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dd0:	f043 030a 	orr.w	r3, r3, #10
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2101      	movs	r1, #1
 8004de0:	2001      	movs	r0, #1
 8004de2:	f000 fead 	bl	8005b40 <osSemaphoreNew>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4a51      	ldr	r2, [pc, #324]	; (8004f30 <low_level_init+0x258>)
 8004dea:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004dec:	2200      	movs	r2, #0
 8004dee:	2101      	movs	r1, #1
 8004df0:	2001      	movs	r0, #1
 8004df2:	f000 fea5 	bl	8005b40 <osSemaphoreNew>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4a4e      	ldr	r2, [pc, #312]	; (8004f34 <low_level_init+0x25c>)
 8004dfa:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004dfc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e00:	2224      	movs	r2, #36	; 0x24
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f011 fd3e 	bl	8016886 <memset>
  attributes.name = "EthIf";
 8004e0a:	4b4b      	ldr	r3, [pc, #300]	; (8004f38 <low_level_init+0x260>)
 8004e0c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004e0e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004e12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004e16:	2330      	movs	r3, #48	; 0x30
 8004e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004e1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e20:	461a      	mov	r2, r3
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4845      	ldr	r0, [pc, #276]	; (8004f3c <low_level_init+0x264>)
 8004e26:	f000 fc6f 	bl	8005708 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004e2a:	4945      	ldr	r1, [pc, #276]	; (8004f40 <low_level_init+0x268>)
 8004e2c:	4845      	ldr	r0, [pc, #276]	; (8004f44 <low_level_init+0x26c>)
 8004e2e:	f7fc fe0e 	bl	8001a4e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004e32:	4844      	ldr	r0, [pc, #272]	; (8004f44 <low_level_init+0x26c>)
 8004e34:	f7fc fe3d 	bl	8001ab2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004e38:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d164      	bne.n	8004f0a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e40:	4840      	ldr	r0, [pc, #256]	; (8004f44 <low_level_init+0x26c>)
 8004e42:	f7fc fede 	bl	8001c02 <LAN8742_GetLinkState>
 8004e46:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	dc06      	bgt.n	8004e60 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f007 fe64 	bl	800cb20 <netif_set_link_down>
      netif_set_down(netif);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f007 fdfb 	bl	800ca54 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e5e:	e056      	b.n	8004f0e <low_level_init+0x236>
      switch (PHYLinkState)
 8004e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e64:	3b02      	subs	r3, #2
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d82a      	bhi.n	8004ec0 <low_level_init+0x1e8>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <low_level_init+0x198>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e93 	.word	0x08004e93
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004eb3 	.word	0x08004eb3
        duplex = ETH_FULLDUPLEX_MODE;
 8004e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004e90:	e01f      	b.n	8004ed2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004e98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004ea0:	e017      	b.n	8004ed2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004eb0:	e00f      	b.n	8004ed2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004ebe:	e008      	b.n	8004ed2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004ec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004ed0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ed2:	f107 0310 	add.w	r3, r7, #16
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	480f      	ldr	r0, [pc, #60]	; (8004f18 <low_level_init+0x240>)
 8004eda:	f7fd fe15 	bl	8002b08 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004ee4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4809      	ldr	r0, [pc, #36]	; (8004f18 <low_level_init+0x240>)
 8004ef2:	f7fd fef3 	bl	8002cdc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004ef6:	4808      	ldr	r0, [pc, #32]	; (8004f18 <low_level_init+0x240>)
 8004ef8:	f7fd f99e 	bl	8002238 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f007 fd3d 	bl	800c97c <netif_set_up>
    netif_set_link_up(netif);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f007 fdd8 	bl	800cab8 <netif_set_link_up>
}
 8004f08:	e001      	b.n	8004f0e <low_level_init+0x236>
    Error_Handler();
 8004f0a:	f7fc fa89 	bl	8001420 <Error_Handler>
}
 8004f0e:	bf00      	nop
 8004f10:	37a8      	adds	r7, #168	; 0xa8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20004f9c 	.word	0x20004f9c
 8004f1c:	40028000 	.word	0x40028000
 8004f20:	200002a0 	.word	0x200002a0
 8004f24:	20000200 	.word	0x20000200
 8004f28:	2000504c 	.word	0x2000504c
 8004f2c:	0801cc74 	.word	0x0801cc74
 8004f30:	20004f94 	.word	0x20004f94
 8004f34:	20004f98 	.word	0x20004f98
 8004f38:	08019a5c 	.word	0x08019a5c
 8004f3c:	080050a5 	.word	0x080050a5
 8004f40:	2000000c 	.word	0x2000000c
 8004f44:	20005084 	.word	0x20005084

08004f48 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b092      	sub	sp, #72	; 0x48
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	2230      	movs	r2, #48	; 0x30
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f011 fc8c 	bl	8016886 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004f6e:	f107 030c 	add.w	r3, r7, #12
 8004f72:	2230      	movs	r2, #48	; 0x30
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f011 fc85 	bl	8016886 <memset>

  for(q = p; q != NULL; q = q->next)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f80:	e045      	b.n	800500e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d902      	bls.n	8004f8e <low_level_output+0x46>
      return ERR_IF;
 8004f88:	f06f 030b 	mvn.w	r3, #11
 8004f8c:	e065      	b.n	800505a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f90:	6859      	ldr	r1, [r3, #4]
 8004f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	3348      	adds	r3, #72	; 0x48
 8004f9e:	443b      	add	r3, r7
 8004fa0:	3b3c      	subs	r3, #60	; 0x3c
 8004fa2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa6:	895b      	ldrh	r3, [r3, #10]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	3348      	adds	r3, #72	; 0x48
 8004fb6:	443b      	add	r3, r7
 8004fb8:	3b38      	subs	r3, #56	; 0x38
 8004fba:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d011      	beq.n	8004fe6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	f107 000c 	add.w	r0, r7, #12
 8004fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fcc:	460b      	mov	r3, r1
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	440b      	add	r3, r1
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	18c1      	adds	r1, r0, r3
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	3348      	adds	r3, #72	; 0x48
 8004fe0:	443b      	add	r3, r7
 8004fe2:	3b34      	subs	r3, #52	; 0x34
 8004fe4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	3348      	adds	r3, #72	; 0x48
 8004ffa:	443b      	add	r3, r7
 8004ffc:	3b34      	subs	r3, #52	; 0x34
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005004:	3301      	adds	r3, #1
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	643b      	str	r3, [r7, #64]	; 0x40
 800500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1b6      	bne.n	8004f82 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	891b      	ldrh	r3, [r3, #8]
 8005018:	461a      	mov	r2, r3
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <low_level_output+0x11c>)
 800501c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800501e:	4a11      	ldr	r2, [pc, #68]	; (8005064 <low_level_output+0x11c>)
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005026:	4a0f      	ldr	r2, [pc, #60]	; (8005064 <low_level_output+0x11c>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800502c:	6838      	ldr	r0, [r7, #0]
 800502e:	f008 f9fb 	bl	800d428 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005032:	490c      	ldr	r1, [pc, #48]	; (8005064 <low_level_output+0x11c>)
 8005034:	480c      	ldr	r0, [pc, #48]	; (8005068 <low_level_output+0x120>)
 8005036:	f7fd fa0d 	bl	8002454 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800503a:	bf00      	nop
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <low_level_output+0x124>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fe17 	bl	8005c78 <osSemaphoreAcquire>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f5      	bne.n	800503c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005050:	4805      	ldr	r0, [pc, #20]	; (8005068 <low_level_output+0x120>)
 8005052:	f7fd fb93 	bl	800277c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005056:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800505a:	4618      	mov	r0, r3
 800505c:	3748      	adds	r7, #72	; 0x48
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000504c 	.word	0x2000504c
 8005068:	20004f9c 	.word	0x20004f9c
 800506c:	20004f98 	.word	0x20004f98

08005070 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <low_level_input+0x2c>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4619      	mov	r1, r3
 800508a:	4805      	ldr	r0, [pc, #20]	; (80050a0 <low_level_input+0x30>)
 800508c:	f7fd fa3e 	bl	800250c <HAL_ETH_ReadData>
  }

  return p;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20004f90 	.word	0x20004f90
 80050a0:	20004f9c 	.word	0x20004f9c

080050a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <ethernetif_input+0x50>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fddb 	bl	8005c78 <osSemaphoreAcquire>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f5      	bne.n	80050b4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80050c8:	68b8      	ldr	r0, [r7, #8]
 80050ca:	f7ff ffd1 	bl	8005070 <low_level_input>
 80050ce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	4798      	blx	r3
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f008 f8f8 	bl	800d2dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1ea      	bne.n	80050c8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80050f2:	e7df      	b.n	80050b4 <ethernetif_input+0x10>
 80050f4:	20004f94 	.word	0x20004f94

080050f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <ethernetif_init+0x1c>
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <ethernetif_init+0x48>)
 8005108:	f44f 720d 	mov.w	r2, #564	; 0x234
 800510c:	490d      	ldr	r1, [pc, #52]	; (8005144 <ethernetif_init+0x4c>)
 800510e:	480e      	ldr	r0, [pc, #56]	; (8005148 <ethernetif_init+0x50>)
 8005110:	f011 fc56 	bl	80169c0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2273      	movs	r2, #115	; 0x73
 8005118:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2274      	movs	r2, #116	; 0x74
 8005120:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a09      	ldr	r2, [pc, #36]	; (800514c <ethernetif_init+0x54>)
 8005128:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a08      	ldr	r2, [pc, #32]	; (8005150 <ethernetif_init+0x58>)
 800512e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fdd1 	bl	8004cd8 <low_level_init>

  return ERR_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	08019a64 	.word	0x08019a64
 8005144:	08019a80 	.word	0x08019a80
 8005148:	08019a90 	.word	0x08019a90
 800514c:	08014589 	.word	0x08014589
 8005150:	08004f49 	.word	0x08004f49

08005154 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	4809      	ldr	r0, [pc, #36]	; (8005188 <pbuf_free_custom+0x34>)
 8005164:	f007 f9f6 	bl	800c554 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <pbuf_free_custom+0x38>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <pbuf_free_custom+0x38>)
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <pbuf_free_custom+0x3c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fde2 	bl	8005d44 <osSemaphoreRelease>
  }
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	0801cc74 	.word	0x0801cc74
 800518c:	20004f90 	.word	0x20004f90
 8005190:	20004f94 	.word	0x20004f94

08005194 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005198:	f7fc fde4 	bl	8001d64 <HAL_GetTick>
 800519c:	4603      	mov	r3, r0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a52      	ldr	r2, [pc, #328]	; (800530c <HAL_ETH_MspInit+0x168>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	f040 809e 	bne.w	8005304 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80051c8:	4b51      	ldr	r3, [pc, #324]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	4a50      	ldr	r2, [pc, #320]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051d2:	6313      	str	r3, [r2, #48]	; 0x30
 80051d4:	4b4e      	ldr	r3, [pc, #312]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	4a4a      	ldr	r2, [pc, #296]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ea:	6313      	str	r3, [r2, #48]	; 0x30
 80051ec:	4b48      	ldr	r3, [pc, #288]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4b45      	ldr	r3, [pc, #276]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	4a44      	ldr	r2, [pc, #272]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 80051fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005202:	6313      	str	r3, [r2, #48]	; 0x30
 8005204:	4b42      	ldr	r3, [pc, #264]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005210:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	4a3e      	ldr	r2, [pc, #248]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005216:	f043 0304 	orr.w	r3, r3, #4
 800521a:	6313      	str	r3, [r2, #48]	; 0x30
 800521c:	4b3c      	ldr	r3, [pc, #240]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005228:	4b39      	ldr	r3, [pc, #228]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	4a38      	ldr	r2, [pc, #224]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6313      	str	r3, [r2, #48]	; 0x30
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005240:	4b33      	ldr	r3, [pc, #204]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	4a32      	ldr	r2, [pc, #200]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005246:	f043 0302 	orr.w	r3, r3, #2
 800524a:	6313      	str	r3, [r2, #48]	; 0x30
 800524c:	4b30      	ldr	r3, [pc, #192]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	4a2c      	ldr	r2, [pc, #176]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 800525e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005262:	6313      	str	r3, [r2, #48]	; 0x30
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_ETH_MspInit+0x16c>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005270:	2332      	movs	r3, #50	; 0x32
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527c:	2303      	movs	r3, #3
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005280:	230b      	movs	r3, #11
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005288:	4619      	mov	r1, r3
 800528a:	4822      	ldr	r0, [pc, #136]	; (8005314 <HAL_ETH_MspInit+0x170>)
 800528c:	f7fe f9a6 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005290:	2386      	movs	r3, #134	; 0x86
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005294:	2302      	movs	r3, #2
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005298:	2300      	movs	r3, #0
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800529c:	2303      	movs	r3, #3
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052a0:	230b      	movs	r3, #11
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052a8:	4619      	mov	r1, r3
 80052aa:	481b      	ldr	r0, [pc, #108]	; (8005318 <HAL_ETH_MspInit+0x174>)
 80052ac:	f7fe f996 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80052b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b6:	2302      	movs	r3, #2
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052be:	2303      	movs	r3, #3
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052c2:	230b      	movs	r3, #11
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ca:	4619      	mov	r1, r3
 80052cc:	4813      	ldr	r0, [pc, #76]	; (800531c <HAL_ETH_MspInit+0x178>)
 80052ce:	f7fe f985 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80052d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d8:	2302      	movs	r3, #2
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e0:	2303      	movs	r3, #3
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052e4:	230b      	movs	r3, #11
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80052e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ec:	4619      	mov	r1, r3
 80052ee:	480c      	ldr	r0, [pc, #48]	; (8005320 <HAL_ETH_MspInit+0x17c>)
 80052f0:	f7fe f974 	bl	80035dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2105      	movs	r1, #5
 80052f8:	203d      	movs	r0, #61	; 0x3d
 80052fa:	f7fc fe1b 	bl	8001f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80052fe:	203d      	movs	r0, #61	; 0x3d
 8005300:	f7fc fe34 	bl	8001f6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005304:	bf00      	nop
 8005306:	3738      	adds	r7, #56	; 0x38
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40028000 	.word	0x40028000
 8005310:	40023800 	.word	0x40023800
 8005314:	40020800 	.word	0x40020800
 8005318:	40020000 	.word	0x40020000
 800531c:	40020400 	.word	0x40020400
 8005320:	40021800 	.word	0x40021800

08005324 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005328:	4802      	ldr	r0, [pc, #8]	; (8005334 <ETH_PHY_IO_Init+0x10>)
 800532a:	f7fd fcf1 	bl	8002d10 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20004f9c 	.word	0x20004f9c

08005338 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return 0;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	4807      	ldr	r0, [pc, #28]	; (8005378 <ETH_PHY_IO_ReadReg+0x30>)
 800535c:	f7fd fb40 	bl	80029e0 <HAL_ETH_ReadPHYRegister>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800536a:	e000      	b.n	800536e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20004f9c 	.word	0x20004f9c

0800537c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	4807      	ldr	r0, [pc, #28]	; (80053ac <ETH_PHY_IO_WriteReg+0x30>)
 8005390:	f7fd fb71 	bl	8002a76 <HAL_ETH_WritePHYRegister>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539e:	e000      	b.n	80053a2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20004f9c 	.word	0x20004f9c

080053b0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80053b4:	f7fc fcd6 	bl	8001d64 <HAL_GetTick>
 80053b8:	4603      	mov	r3, r0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b0a0      	sub	sp, #128	; 0x80
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	2264      	movs	r2, #100	; 0x64
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f011 fa58 	bl	8016886 <memset>
  int32_t PHYLinkState = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053de:	2300      	movs	r3, #0
 80053e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053e2:	2300      	movs	r3, #0
 80053e4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80053ea:	483a      	ldr	r0, [pc, #232]	; (80054d4 <ethernet_link_thread+0x114>)
 80053ec:	f7fc fc09 	bl	8001c02 <LAN8742_GetLinkState>
 80053f0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053f8:	089b      	lsrs	r3, r3, #2
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <ethernet_link_thread+0x5e>
 8005404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005406:	2b01      	cmp	r3, #1
 8005408:	dc09      	bgt.n	800541e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800540a:	4833      	ldr	r0, [pc, #204]	; (80054d8 <ethernet_link_thread+0x118>)
 800540c:	f7fc ffa2 	bl	8002354 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005410:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005412:	f007 fb1f 	bl	800ca54 <netif_set_down>
    netif_set_link_down(netif);
 8005416:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005418:	f007 fb82 	bl	800cb20 <netif_set_link_down>
 800541c:	e055      	b.n	80054ca <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d14e      	bne.n	80054ca <ethernet_link_thread+0x10a>
 800542c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800542e:	2b01      	cmp	r3, #1
 8005430:	dd4b      	ble.n	80054ca <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005434:	3b02      	subs	r3, #2
 8005436:	2b03      	cmp	r3, #3
 8005438:	d82a      	bhi.n	8005490 <ethernet_link_thread+0xd0>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <ethernet_link_thread+0x80>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005451 	.word	0x08005451
 8005444:	08005463 	.word	0x08005463
 8005448:	08005473 	.word	0x08005473
 800544c:	08005483 	.word	0x08005483
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005454:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800545a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800545c:	2301      	movs	r3, #1
 800545e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005460:	e017      	b.n	8005492 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005462:	2300      	movs	r3, #0
 8005464:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800546a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800546c:	2301      	movs	r3, #1
 800546e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005470:	e00f      	b.n	8005492 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005476:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005478:	2300      	movs	r3, #0
 800547a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800547c:	2301      	movs	r3, #1
 800547e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005480:	e007      	b.n	8005492 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005482:	2300      	movs	r3, #0
 8005484:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005486:	2300      	movs	r3, #0
 8005488:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800548a:	2301      	movs	r3, #1
 800548c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800548e:	e000      	b.n	8005492 <ethernet_link_thread+0xd2>
    default:
      break;
 8005490:	bf00      	nop
    }

    if(linkchanged)
 8005492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005498:	f107 0308 	add.w	r3, r7, #8
 800549c:	4619      	mov	r1, r3
 800549e:	480e      	ldr	r0, [pc, #56]	; (80054d8 <ethernet_link_thread+0x118>)
 80054a0:	f7fd fb32 	bl	8002b08 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80054a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80054a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054aa:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	4619      	mov	r1, r3
 80054b2:	4809      	ldr	r0, [pc, #36]	; (80054d8 <ethernet_link_thread+0x118>)
 80054b4:	f7fd fc12 	bl	8002cdc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80054b8:	4807      	ldr	r0, [pc, #28]	; (80054d8 <ethernet_link_thread+0x118>)
 80054ba:	f7fc fe5d 	bl	8002178 <HAL_ETH_Start>
      netif_set_up(netif);
 80054be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054c0:	f007 fa5c 	bl	800c97c <netif_set_up>
      netif_set_link_up(netif);
 80054c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054c6:	f007 faf7 	bl	800cab8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80054ca:	2064      	movs	r0, #100	; 0x64
 80054cc:	f000 f9c2 	bl	8005854 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054d0:	e78b      	b.n	80053ea <ethernet_link_thread+0x2a>
 80054d2:	bf00      	nop
 80054d4:	20005084 	.word	0x20005084
 80054d8:	20004f9c 	.word	0x20004f9c

080054dc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80054e4:	4812      	ldr	r0, [pc, #72]	; (8005530 <HAL_ETH_RxAllocateCallback+0x54>)
 80054e6:	f006 ffc1 	bl	800c46c <memp_malloc_pool>
 80054ea:	60f8      	str	r0, [r7, #12]
  if (p)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d014      	beq.n	800551c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f103 0220 	add.w	r2, r3, #32
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <HAL_ETH_RxAllocateCallback+0x58>)
 8005500:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800550a:	9201      	str	r2, [sp, #4]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2241      	movs	r2, #65	; 0x41
 8005512:	2100      	movs	r1, #0
 8005514:	2000      	movs	r0, #0
 8005516:	f007 fd27 	bl	800cf68 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800551a:	e005      	b.n	8005528 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_ETH_RxAllocateCallback+0x5c>)
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	0801cc74 	.word	0x0801cc74
 8005534:	08005155 	.word	0x08005155
 8005538:	20004f90 	.word	0x20004f90

0800553c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3b20      	subs	r3, #32
 800555a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2200      	movs	r2, #0
 8005566:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	887a      	ldrh	r2, [r7, #2]
 800556c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e003      	b.n	8005586 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e009      	b.n	80055a8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	891a      	ldrh	r2, [r3, #8]
 8005598:	887b      	ldrh	r3, [r7, #2]
 800559a:	4413      	add	r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f2      	bne.n	8005594 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80055ae:	887b      	ldrh	r3, [r7, #2]
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fb2c 	bl	8004c10 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80055b8:	bf00      	nop
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f007 fe87 	bl	800d2dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ea:	f3ef 8305 	mrs	r3, IPSR
 80055ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80055f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f6:	f3ef 8310 	mrs	r3, PRIMASK
 80055fa:	607b      	str	r3, [r7, #4]
  return(result);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d105      	bne.n	800560e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005602:	f3ef 8311 	mrs	r3, BASEPRI
 8005606:	603b      	str	r3, [r7, #0]
  return(result);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <osKernelInitialize+0x3a>
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <osKernelInitialize+0x64>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005616:	f06f 0305 	mvn.w	r3, #5
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e00c      	b.n	8005638 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <osKernelInitialize+0x64>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <osKernelInitialize+0x64>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e002      	b.n	8005638 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005636:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005638:	68fb      	ldr	r3, [r7, #12]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	200050a4 	.word	0x200050a4

0800564c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005652:	f3ef 8305 	mrs	r3, IPSR
 8005656:	60bb      	str	r3, [r7, #8]
  return(result);
 8005658:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565e:	f3ef 8310 	mrs	r3, PRIMASK
 8005662:	607b      	str	r3, [r7, #4]
  return(result);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d105      	bne.n	8005676 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800566a:	f3ef 8311 	mrs	r3, BASEPRI
 800566e:	603b      	str	r3, [r7, #0]
  return(result);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <osKernelStart+0x3a>
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <osKernelStart+0x68>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d103      	bne.n	8005686 <osKernelStart+0x3a>
    stat = osErrorISR;
 800567e:	f06f 0305 	mvn.w	r3, #5
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e010      	b.n	80056a8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <osKernelStart+0x68>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d109      	bne.n	80056a2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800568e:	f7ff ffa2 	bl	80055d6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005692:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <osKernelStart+0x68>)
 8005694:	2202      	movs	r2, #2
 8005696:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005698:	f002 f9e4 	bl	8007a64 <vTaskStartScheduler>
      stat = osOK;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e002      	b.n	80056a8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200050a4 	.word	0x200050a4

080056b8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056be:	f3ef 8305 	mrs	r3, IPSR
 80056c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056c4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	607b      	str	r3, [r7, #4]
  return(result);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d105      	bne.n	80056e2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056d6:	f3ef 8311 	mrs	r3, BASEPRI
 80056da:	603b      	str	r3, [r7, #0]
  return(result);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <osKernelGetTickCount+0x3a>
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <osKernelGetTickCount+0x4c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d103      	bne.n	80056f2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80056ea:	f002 faed 	bl	8007cc8 <xTaskGetTickCountFromISR>
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	e002      	b.n	80056f8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80056f2:	f002 fad9 	bl	8007ca8 <xTaskGetTickCount>
 80056f6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	200050a4 	.word	0x200050a4

08005708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005708:	b580      	push	{r7, lr}
 800570a:	b090      	sub	sp, #64	; 0x40
 800570c:	af04      	add	r7, sp, #16
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005718:	f3ef 8305 	mrs	r3, IPSR
 800571c:	61fb      	str	r3, [r7, #28]
  return(result);
 800571e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 808f 	bne.w	8005844 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005726:	f3ef 8310 	mrs	r3, PRIMASK
 800572a:	61bb      	str	r3, [r7, #24]
  return(result);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005732:	f3ef 8311 	mrs	r3, BASEPRI
 8005736:	617b      	str	r3, [r7, #20]
  return(result);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <osThreadNew+0x3e>
 800573e:	4b44      	ldr	r3, [pc, #272]	; (8005850 <osThreadNew+0x148>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d07e      	beq.n	8005844 <osThreadNew+0x13c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d07b      	beq.n	8005844 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005750:	2318      	movs	r3, #24
 8005752:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d045      	beq.n	80057f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <osThreadNew+0x6a>
        name = attr->name;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <osThreadNew+0x90>
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	2b38      	cmp	r3, #56	; 0x38
 800578a:	d805      	bhi.n	8005798 <osThreadNew+0x90>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <osThreadNew+0x94>
        return (NULL);
 8005798:	2300      	movs	r3, #0
 800579a:	e054      	b.n	8005846 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00e      	beq.n	80057d2 <osThreadNew+0xca>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2bbb      	cmp	r3, #187	; 0xbb
 80057ba:	d90a      	bls.n	80057d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <osThreadNew+0xca>
        mem = 1;
 80057cc:	2301      	movs	r3, #1
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	e010      	b.n	80057f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <osThreadNew+0xec>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <osThreadNew+0xec>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <osThreadNew+0xec>
          mem = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	e001      	b.n	80057f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d110      	bne.n	800581c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005802:	9202      	str	r2, [sp, #8]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800580e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f001 ff31 	bl	8007678 <xTaskCreateStatic>
 8005816:	4603      	mov	r3, r0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	e013      	b.n	8005844 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d110      	bne.n	8005844 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	b29a      	uxth	r2, r3
 8005826:	f107 0310 	add.w	r3, r7, #16
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 ff82 	bl	800773e <xTaskCreate>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <osThreadNew+0x13c>
          hTask = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005844:	693b      	ldr	r3, [r7, #16]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3730      	adds	r7, #48	; 0x30
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200050a4 	.word	0x200050a4

08005854 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	613b      	str	r3, [r7, #16]
  return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005868:	f3ef 8310 	mrs	r3, PRIMASK
 800586c:	60fb      	str	r3, [r7, #12]
  return(result);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005874:	f3ef 8311 	mrs	r3, BASEPRI
 8005878:	60bb      	str	r3, [r7, #8]
  return(result);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <osDelay+0x3c>
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <osDelay+0x58>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d103      	bne.n	8005890 <osDelay+0x3c>
    stat = osErrorISR;
 8005888:	f06f 0305 	mvn.w	r3, #5
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e007      	b.n	80058a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f002 f8ac 	bl	80079f8 <vTaskDelay>
    }
  }

  return (stat);
 80058a0:	697b      	ldr	r3, [r7, #20]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200050a4 	.word	0x200050a4

080058b0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058bc:	f3ef 8305 	mrs	r3, IPSR
 80058c0:	613b      	str	r3, [r7, #16]
  return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 8085 	bne.w	80059d4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ca:	f3ef 8310 	mrs	r3, PRIMASK
 80058ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058d6:	f3ef 8311 	mrs	r3, BASEPRI
 80058da:	60bb      	str	r3, [r7, #8]
  return(result);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <osMutexNew+0x3a>
 80058e2:	4b3f      	ldr	r3, [pc, #252]	; (80059e0 <osMutexNew+0x130>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d074      	beq.n	80059d4 <osMutexNew+0x124>
    if (attr != NULL) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	e001      	b.n	80058fc <osMutexNew+0x4c>
    } else {
      type = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <osMutexNew+0x5c>
      rmtx = 1U;
 8005906:	2301      	movs	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e001      	b.n	8005910 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d15c      	bne.n	80059d4 <osMutexNew+0x124>
      mem = -1;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800591e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d015      	beq.n	8005952 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <osMutexNew+0x8c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b4f      	cmp	r3, #79	; 0x4f
 8005934:	d902      	bls.n	800593c <osMutexNew+0x8c>
          mem = 1;
 8005936:	2301      	movs	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	e00c      	b.n	8005956 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <osMutexNew+0xa6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d104      	bne.n	8005956 <osMutexNew+0xa6>
            mem = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	e001      	b.n	8005956 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d112      	bne.n	8005982 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4619      	mov	r1, r3
 8005968:	2004      	movs	r0, #4
 800596a:	f000 feb8 	bl	80066de <xQueueCreateMutexStatic>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24
 8005970:	e016      	b.n	80059a0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	4619      	mov	r1, r3
 8005978:	2001      	movs	r0, #1
 800597a:	f000 feb0 	bl	80066de <xQueueCreateMutexStatic>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24
 8005980:	e00e      	b.n	80059a0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800598e:	2004      	movs	r0, #4
 8005990:	f000 fe8d 	bl	80066ae <xQueueCreateMutex>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24
 8005996:	e003      	b.n	80059a0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005998:	2001      	movs	r0, #1
 800599a:	f000 fe88 	bl	80066ae <xQueueCreateMutex>
 800599e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00c      	beq.n	80059c0 <osMutexNew+0x110>
        if (attr != NULL) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <osMutexNew+0x104>
          name = attr->name;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e001      	b.n	80059b8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80059b8:	6979      	ldr	r1, [r7, #20]
 80059ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059bc:	f001 fdd4 	bl	8007568 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <osMutexNew+0x124>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3728      	adds	r7, #40	; 0x28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200050a4 	.word	0x200050a4

080059e4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a02:	f3ef 8305 	mrs	r3, IPSR
 8005a06:	613b      	str	r3, [r7, #16]
  return(result);
 8005a08:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a12:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <osMutexAcquire+0x52>
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <osMutexAcquire+0xb8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d103      	bne.n	8005a36 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005a2e:	f06f 0305 	mvn.w	r3, #5
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e02c      	b.n	8005a90 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005a3c:	f06f 0303 	mvn.w	r3, #3
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e025      	b.n	8005a90 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d011      	beq.n	8005a6e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	69b8      	ldr	r0, [r7, #24]
 8005a4e:	f000 fe97 	bl	8006780 <xQueueTakeMutexRecursive>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d01b      	beq.n	8005a90 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005a5e:	f06f 0301 	mvn.w	r3, #1
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	e014      	b.n	8005a90 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005a66:	f06f 0302 	mvn.w	r3, #2
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e010      	b.n	8005a90 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	69b8      	ldr	r0, [r7, #24]
 8005a72:	f001 fa51 	bl	8006f18 <xQueueSemaphoreTake>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d009      	beq.n	8005a90 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005a82:	f06f 0301 	mvn.w	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e002      	b.n	8005a90 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005a8a:	f06f 0302 	mvn.w	r3, #2
 8005a8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005a90:	69fb      	ldr	r3, [r7, #28]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200050a4 	.word	0x200050a4

08005aa0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f023 0301 	bic.w	r3, r3, #1
 8005aae:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005abc:	f3ef 8305 	mrs	r3, IPSR
 8005ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10f      	bne.n	8005ae8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <osMutexRelease+0x50>
 8005ae0:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <osMutexRelease+0x9c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d103      	bne.n	8005af0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005ae8:	f06f 0305 	mvn.w	r3, #5
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	e01f      	b.n	8005b30 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005af6:	f06f 0303 	mvn.w	r3, #3
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e018      	b.n	8005b30 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005b04:	69b8      	ldr	r0, [r7, #24]
 8005b06:	f000 fe05 	bl	8006714 <xQueueGiveMutexRecursive>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d00f      	beq.n	8005b30 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005b10:	f06f 0302 	mvn.w	r3, #2
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	e00b      	b.n	8005b30 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	69b8      	ldr	r0, [r7, #24]
 8005b20:	f000 fed8 	bl	80068d4 <xQueueGenericSend>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d002      	beq.n	8005b30 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005b2a:	f06f 0302 	mvn.w	r3, #2
 8005b2e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005b30:	69fb      	ldr	r3, [r7, #28]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200050a4 	.word	0x200050a4

08005b40 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b50:	f3ef 8305 	mrs	r3, IPSR
 8005b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b56:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 8086 	bne.w	8005c6a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b62:	617b      	str	r3, [r7, #20]
  return(result);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <osSemaphoreNew+0x3e>
 8005b76:	4b3f      	ldr	r3, [pc, #252]	; (8005c74 <osSemaphoreNew+0x134>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d075      	beq.n	8005c6a <osSemaphoreNew+0x12a>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d072      	beq.n	8005c6a <osSemaphoreNew+0x12a>
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d86e      	bhi.n	8005c6a <osSemaphoreNew+0x12a>
    mem = -1;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <osSemaphoreNew+0x6e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b4f      	cmp	r3, #79	; 0x4f
 8005ba6:	d902      	bls.n	8005bae <osSemaphoreNew+0x6e>
        mem = 1;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	e00c      	b.n	8005bc8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <osSemaphoreNew+0x88>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <osSemaphoreNew+0x88>
          mem = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	e001      	b.n	8005bc8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bce:	d04c      	beq.n	8005c6a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d128      	bne.n	8005c28 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d10a      	bne.n	8005bf2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2203      	movs	r2, #3
 8005be2:	9200      	str	r2, [sp, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2100      	movs	r1, #0
 8005be8:	2001      	movs	r0, #1
 8005bea:	f000 fc5f 	bl	80064ac <xQueueGenericCreateStatic>
 8005bee:	6278      	str	r0, [r7, #36]	; 0x24
 8005bf0:	e005      	b.n	8005bfe <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f000 fcda 	bl	80065b0 <xQueueGenericCreate>
 8005bfc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d022      	beq.n	8005c4a <osSemaphoreNew+0x10a>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01f      	beq.n	8005c4a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c12:	f000 fe5f 	bl	80068d4 <xQueueGenericSend>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d016      	beq.n	8005c4a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c1e:	f001 fb55 	bl	80072cc <vQueueDelete>
            hSemaphore = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	e010      	b.n	8005c4a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d108      	bne.n	8005c40 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fdda 	bl	80067f0 <xQueueCreateCountingSemaphoreStatic>
 8005c3c:	6278      	str	r0, [r7, #36]	; 0x24
 8005c3e:	e004      	b.n	8005c4a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fe0f 	bl	8006866 <xQueueCreateCountingSemaphore>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	e001      	b.n	8005c62 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c66:	f001 fc7f 	bl	8007568 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200050a4 	.word	0x200050a4

08005c78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c90:	f06f 0303 	mvn.w	r3, #3
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	e04b      	b.n	8005d30 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c98:	f3ef 8305 	mrs	r3, IPSR
 8005c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c9e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca8:	613b      	str	r3, [r7, #16]
  return(result);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d026      	beq.n	8005d0a <osSemaphoreAcquire+0x92>
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <osSemaphoreAcquire+0xc4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d122      	bne.n	8005d0a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005cca:	f06f 0303 	mvn.w	r3, #3
 8005cce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005cd0:	e02d      	b.n	8005d2e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2100      	movs	r1, #0
 8005cde:	69b8      	ldr	r0, [r7, #24]
 8005ce0:	f001 fa2e 	bl	8007140 <xQueueReceiveFromISR>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d003      	beq.n	8005cf2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005cea:	f06f 0302 	mvn.w	r3, #2
 8005cee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005cf0:	e01d      	b.n	8005d2e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <osSemaphoreAcquire+0xb6>
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <osSemaphoreAcquire+0xc8>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005d08:	e011      	b.n	8005d2e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	69b8      	ldr	r0, [r7, #24]
 8005d0e:	f001 f903 	bl	8006f18 <xQueueSemaphoreTake>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d00b      	beq.n	8005d30 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005d1e:	f06f 0301 	mvn.w	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e004      	b.n	8005d30 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005d26:	f06f 0302 	mvn.w	r3, #2
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e000      	b.n	8005d30 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005d2e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005d30:	69fb      	ldr	r3, [r7, #28]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200050a4 	.word	0x200050a4
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005d5a:	f06f 0303 	mvn.w	r3, #3
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e03e      	b.n	8005de0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d62:	f3ef 8305 	mrs	r3, IPSR
 8005d66:	617b      	str	r3, [r7, #20]
  return(result);
 8005d68:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10f      	bne.n	8005d8e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d72:	613b      	str	r3, [r7, #16]
  return(result);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01e      	beq.n	8005dc4 <osSemaphoreRelease+0x80>
 8005d86:	4b19      	ldr	r3, [pc, #100]	; (8005dec <osSemaphoreRelease+0xa8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d11a      	bne.n	8005dc4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	4619      	mov	r1, r3
 8005d98:	69b8      	ldr	r0, [r7, #24]
 8005d9a:	f000 ff41 	bl	8006c20 <xQueueGiveFromISR>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d003      	beq.n	8005dac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005da4:	f06f 0302 	mvn.w	r3, #2
 8005da8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005daa:	e018      	b.n	8005dde <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d015      	beq.n	8005dde <osSemaphoreRelease+0x9a>
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <osSemaphoreRelease+0xac>)
 8005db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005dc2:	e00c      	b.n	8005dde <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2100      	movs	r1, #0
 8005dca:	69b8      	ldr	r0, [r7, #24]
 8005dcc:	f000 fd82 	bl	80068d4 <xQueueGenericSend>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d004      	beq.n	8005de0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005dd6:	f06f 0302 	mvn.w	r3, #2
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e000      	b.n	8005de0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005dde:	bf00      	nop
    }
  }

  return (stat);
 8005de0:	69fb      	ldr	r3, [r7, #28]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200050a4 	.word	0x200050a4
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e00:	f3ef 8305 	mrs	r3, IPSR
 8005e04:	617b      	str	r3, [r7, #20]
  return(result);
 8005e06:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10f      	bne.n	8005e2c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e10:	613b      	str	r3, [r7, #16]
  return(result);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e18:	f3ef 8311 	mrs	r3, BASEPRI
 8005e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <osSemaphoreDelete+0x40>
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <osSemaphoreDelete+0x68>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d103      	bne.n	8005e34 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8005e2c:	f06f 0305 	mvn.w	r3, #5
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	e00e      	b.n	8005e52 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8005e3a:	f06f 0303 	mvn.w	r3, #3
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	e007      	b.n	8005e52 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005e42:	69b8      	ldr	r0, [r7, #24]
 8005e44:	f001 fbba 	bl	80075bc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8005e4c:	69b8      	ldr	r0, [r7, #24]
 8005e4e:	f001 fa3d 	bl	80072cc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005e52:	69fb      	ldr	r3, [r7, #28]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200050a4 	.word	0x200050a4

08005e60 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e70:	f3ef 8305 	mrs	r3, IPSR
 8005e74:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d16f      	bne.n	8005f5c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e80:	617b      	str	r3, [r7, #20]
  return(result);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e88:	f3ef 8311 	mrs	r3, BASEPRI
 8005e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <osMessageQueueNew+0x3c>
 8005e94:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <osMessageQueueNew+0x108>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d05f      	beq.n	8005f5c <osMessageQueueNew+0xfc>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d05c      	beq.n	8005f5c <osMessageQueueNew+0xfc>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d059      	beq.n	8005f5c <osMessageQueueNew+0xfc>
    mem = -1;
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d029      	beq.n	8005f08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d012      	beq.n	8005ee2 <osMessageQueueNew+0x82>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b4f      	cmp	r3, #79	; 0x4f
 8005ec2:	d90e      	bls.n	8005ee2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d302      	bcc.n	8005ee2 <osMessageQueueNew+0x82>
        mem = 1;
 8005edc:	2301      	movs	r3, #1
 8005ede:	623b      	str	r3, [r7, #32]
 8005ee0:	e014      	b.n	8005f0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d110      	bne.n	8005f0c <osMessageQueueNew+0xac>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10c      	bne.n	8005f0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d108      	bne.n	8005f0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <osMessageQueueNew+0xac>
          mem = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	623b      	str	r3, [r7, #32]
 8005f06:	e001      	b.n	8005f0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10b      	bne.n	8005f2a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	9100      	str	r1, [sp, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fac3 	bl	80064ac <xQueueGenericCreateStatic>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24
 8005f28:	e008      	b.n	8005f3c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f30:	2200      	movs	r2, #0
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fb3b 	bl	80065b0 <xQueueGenericCreate>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00c      	beq.n	8005f5c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	e001      	b.n	8005f54 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f58:	f001 fb06 	bl	8007568 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200050a4 	.word	0x200050a4

08005f6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f84:	f3ef 8305 	mrs	r3, IPSR
 8005f88:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f8a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10f      	bne.n	8005fb0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f90:	f3ef 8310 	mrs	r3, PRIMASK
 8005f94:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02c      	beq.n	8006002 <osMessageQueuePut+0x96>
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <osMessageQueuePut+0xe0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d128      	bne.n	8006002 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <osMessageQueuePut+0x56>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <osMessageQueuePut+0x56>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005fc2:	f06f 0303 	mvn.w	r3, #3
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fc8:	e039      	b.n	800603e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fce:	f107 0210 	add.w	r2, r7, #16
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	6a38      	ldr	r0, [r7, #32]
 8005fd8:	f000 fd82 	bl	8006ae0 <xQueueGenericSendFromISR>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d003      	beq.n	8005fea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005fe2:	f06f 0302 	mvn.w	r3, #2
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fe8:	e029      	b.n	800603e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d026      	beq.n	800603e <osMessageQueuePut+0xd2>
 8005ff0:	4b17      	ldr	r3, [pc, #92]	; (8006050 <osMessageQueuePut+0xe4>)
 8005ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006000:	e01d      	b.n	800603e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <osMessageQueuePut+0xa2>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800600e:	f06f 0303 	mvn.w	r3, #3
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	e014      	b.n	8006040 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006016:	2300      	movs	r3, #0
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	6a38      	ldr	r0, [r7, #32]
 800601e:	f000 fc59 	bl	80068d4 <xQueueGenericSend>
 8006022:	4603      	mov	r3, r0
 8006024:	2b01      	cmp	r3, #1
 8006026:	d00b      	beq.n	8006040 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800602e:	f06f 0301 	mvn.w	r3, #1
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	e004      	b.n	8006040 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006036:	f06f 0302 	mvn.w	r3, #2
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	e000      	b.n	8006040 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800603e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006042:	4618      	mov	r0, r3
 8006044:	3728      	adds	r7, #40	; 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200050a4 	.word	0x200050a4
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800606a:	f3ef 8305 	mrs	r3, IPSR
 800606e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006070:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006076:	f3ef 8310 	mrs	r3, PRIMASK
 800607a:	61bb      	str	r3, [r7, #24]
  return(result);
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d105      	bne.n	800608e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006082:	f3ef 8311 	mrs	r3, BASEPRI
 8006086:	617b      	str	r3, [r7, #20]
  return(result);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d02c      	beq.n	80060e8 <osMessageQueueGet+0x94>
 800608e:	4b28      	ldr	r3, [pc, #160]	; (8006130 <osMessageQueueGet+0xdc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d128      	bne.n	80060e8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <osMessageQueueGet+0x54>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <osMessageQueueGet+0x54>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80060a8:	f06f 0303 	mvn.w	r3, #3
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ae:	e038      	b.n	8006122 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	461a      	mov	r2, r3
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	6a38      	ldr	r0, [r7, #32]
 80060be:	f001 f83f 	bl	8007140 <xQueueReceiveFromISR>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d003      	beq.n	80060d0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060c8:	f06f 0302 	mvn.w	r3, #2
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ce:	e028      	b.n	8006122 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d025      	beq.n	8006122 <osMessageQueueGet+0xce>
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <osMessageQueueGet+0xe0>)
 80060d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060e6:	e01c      	b.n	8006122 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <osMessageQueueGet+0xa0>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d103      	bne.n	80060fc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80060f4:	f06f 0303 	mvn.w	r3, #3
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	e013      	b.n	8006124 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	6a38      	ldr	r0, [r7, #32]
 8006102:	f000 fe23 	bl	8006d4c <xQueueReceive>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	d00b      	beq.n	8006124 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006112:	f06f 0301 	mvn.w	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
 8006118:	e004      	b.n	8006124 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800611a:	f06f 0302 	mvn.w	r3, #2
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
 8006120:	e000      	b.n	8006124 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006122:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	; 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200050a4 	.word	0x200050a4
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d102      	bne.n	8006150 <osMessageQueueGetCount+0x18>
    count = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	e01e      	b.n	800618e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006150:	f3ef 8305 	mrs	r3, IPSR
 8006154:	617b      	str	r3, [r7, #20]
  return(result);
 8006156:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615c:	f3ef 8310 	mrs	r3, PRIMASK
 8006160:	613b      	str	r3, [r7, #16]
  return(result);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006168:	f3ef 8311 	mrs	r3, BASEPRI
 800616c:	60fb      	str	r3, [r7, #12]
  return(result);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <osMessageQueueGetCount+0x4e>
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <osMessageQueueGetCount+0x60>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d104      	bne.n	8006186 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800617c:	69b8      	ldr	r0, [r7, #24]
 800617e:	f001 f885 	bl	800728c <uxQueueMessagesWaitingFromISR>
 8006182:	61f8      	str	r0, [r7, #28]
 8006184:	e003      	b.n	800618e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006186:	69b8      	ldr	r0, [r7, #24]
 8006188:	f001 f860 	bl	800724c <uxQueueMessagesWaiting>
 800618c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800618e:	69fb      	ldr	r3, [r7, #28]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200050a4 	.word	0x200050a4

0800619c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a8:	f3ef 8305 	mrs	r3, IPSR
 80061ac:	617b      	str	r3, [r7, #20]
  return(result);
 80061ae:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10f      	bne.n	80061d4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b4:	f3ef 8310 	mrs	r3, PRIMASK
 80061b8:	613b      	str	r3, [r7, #16]
  return(result);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061c0:	f3ef 8311 	mrs	r3, BASEPRI
 80061c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <osMessageQueueDelete+0x40>
 80061cc:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <osMessageQueueDelete+0x68>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d103      	bne.n	80061dc <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80061d4:	f06f 0305 	mvn.w	r3, #5
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	e00e      	b.n	80061fa <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80061e2:	f06f 0303 	mvn.w	r3, #3
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	e007      	b.n	80061fa <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80061ea:	69b8      	ldr	r0, [r7, #24]
 80061ec:	f001 f9e6 	bl	80075bc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80061f4:	69b8      	ldr	r0, [r7, #24]
 80061f6:	f001 f869 	bl	80072cc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80061fa:	69fb      	ldr	r3, [r7, #28]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	200050a4 	.word	0x200050a4

08006208 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a07      	ldr	r2, [pc, #28]	; (8006234 <vApplicationGetIdleTaskMemory+0x2c>)
 8006218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4a06      	ldr	r2, [pc, #24]	; (8006238 <vApplicationGetIdleTaskMemory+0x30>)
 800621e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2280      	movs	r2, #128	; 0x80
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200050a8 	.word	0x200050a8
 8006238:	20005164 	.word	0x20005164

0800623c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a07      	ldr	r2, [pc, #28]	; (8006268 <vApplicationGetTimerTaskMemory+0x2c>)
 800624c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4a06      	ldr	r2, [pc, #24]	; (800626c <vApplicationGetTimerTaskMemory+0x30>)
 8006252:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625a:	601a      	str	r2, [r3, #0]
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20005364 	.word	0x20005364
 800626c:	20005420 	.word	0x20005420

08006270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f103 0208 	add.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f103 0208 	add.w	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f103 0208 	add.w	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006328:	d103      	bne.n	8006332 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e00c      	b.n	800634c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3308      	adds	r3, #8
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e002      	b.n	8006340 <vListInsert+0x2e>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d2f6      	bcs.n	800633a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6892      	ldr	r2, [r2, #8]
 800639a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6852      	ldr	r2, [r2, #4]
 80063a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d103      	bne.n	80063b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	1e5a      	subs	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10c      	bne.n	8006406 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	b672      	cpsid	i
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	b662      	cpsie	i
 8006400:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006406:	f002 fe11 	bl	800902c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	3b01      	subs	r3, #1
 8006438:	68f9      	ldr	r1, [r7, #12]
 800643a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	441a      	add	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	22ff      	movs	r2, #255	; 0xff
 800644a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22ff      	movs	r2, #255	; 0xff
 8006452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d114      	bne.n	8006486 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01a      	beq.n	800649a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3310      	adds	r3, #16
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fdb5 	bl	8007fd8 <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d012      	beq.n	800649a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <xQueueGenericReset+0xd0>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	e009      	b.n	800649a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3310      	adds	r3, #16
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fef0 	bl	8006270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3324      	adds	r3, #36	; 0x24
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff feeb 	bl	8006270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800649a:	f002 fdfb 	bl	8009094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800649e:	2301      	movs	r3, #1
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08e      	sub	sp, #56	; 0x38
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10c      	bne.n	80064da <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	b672      	cpsid	i
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	b662      	cpsie	i
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10c      	bne.n	80064fa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	b672      	cpsid	i
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	b662      	cpsie	i
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <xQueueGenericCreateStatic+0x5a>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <xQueueGenericCreateStatic+0x5e>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueGenericCreateStatic+0x60>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10c      	bne.n	800652a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	b672      	cpsid	i
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	b662      	cpsie	i
 8006524:	623b      	str	r3, [r7, #32]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <xQueueGenericCreateStatic+0x8a>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <xQueueGenericCreateStatic+0x8e>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <xQueueGenericCreateStatic+0x90>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10c      	bne.n	800655a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	b672      	cpsid	i
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	b662      	cpsie	i
 8006554:	61fb      	str	r3, [r7, #28]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800655a:	2350      	movs	r3, #80	; 0x50
 800655c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b50      	cmp	r3, #80	; 0x50
 8006562:	d00c      	beq.n	800657e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	b672      	cpsid	i
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	b662      	cpsie	i
 8006578:	61bb      	str	r3, [r7, #24]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800657e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006592:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f847 	bl	8006634 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3730      	adds	r7, #48	; 0x30
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <xQueueGenericCreate+0x2e>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	b672      	cpsid	i
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	b662      	cpsie	i
 80065d8:	613b      	str	r3, [r7, #16]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	e004      	b.n	80065f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3350      	adds	r3, #80	; 0x50
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 fe43 	bl	8009284 <pvPortMalloc>
 80065fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d011      	beq.n	800662a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	3350      	adds	r3, #80	; 0x50
 800660e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006618:	79fa      	ldrb	r2, [r7, #7]
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f805 	bl	8006634 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800662a:	69bb      	ldr	r3, [r7, #24]
	}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e002      	b.n	8006656 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006662:	2101      	movs	r1, #1
 8006664:	69b8      	ldr	r0, [r7, #24]
 8006666:	f7ff feb7 	bl	80063d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	78fa      	ldrb	r2, [r7, #3]
 800666e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800669a:	2300      	movs	r3, #0
 800669c:	2200      	movs	r2, #0
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f917 	bl	80068d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	4603      	mov	r3, r0
 80066b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6939      	ldr	r1, [r7, #16]
 80066c6:	6978      	ldr	r0, [r7, #20]
 80066c8:	f7ff ff72 	bl	80065b0 <xQueueGenericCreate>
 80066cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff ffd3 	bl	800667a <prvInitialiseMutex>

		return xNewQueue;
 80066d4:	68fb      	ldr	r3, [r7, #12]
	}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b088      	sub	sp, #32
 80066e2:	af02      	add	r7, sp, #8
 80066e4:	4603      	mov	r3, r0
 80066e6:	6039      	str	r1, [r7, #0]
 80066e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066ea:	2301      	movs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2200      	movs	r2, #0
 80066fa:	6939      	ldr	r1, [r7, #16]
 80066fc:	6978      	ldr	r0, [r7, #20]
 80066fe:	f7ff fed5 	bl	80064ac <xQueueGenericCreateStatic>
 8006702:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff ffb8 	bl	800667a <prvInitialiseMutex>

		return xNewQueue;
 800670a:	68fb      	ldr	r3, [r7, #12]
	}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10c      	bne.n	8006740 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	b672      	cpsid	i
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	b662      	cpsie	i
 800673a:	60fb      	str	r3, [r7, #12]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	689c      	ldr	r4, [r3, #8]
 8006744:	f001 fe12 	bl	800836c <xTaskGetCurrentTaskHandle>
 8006748:	4603      	mov	r3, r0
 800674a:	429c      	cmp	r4, r3
 800674c:	d111      	bne.n	8006772 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	1e5a      	subs	r2, r3, #1
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	6938      	ldr	r0, [r7, #16]
 8006768:	f000 f8b4 	bl	80068d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800676c:	2301      	movs	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e001      	b.n	8006776 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006776:	697b      	ldr	r3, [r7, #20]
	}
 8006778:	4618      	mov	r0, r3
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	bd90      	pop	{r4, r7, pc}

08006780 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10c      	bne.n	80067ae <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	689c      	ldr	r4, [r3, #8]
 80067b2:	f001 fddb 	bl	800836c <xTaskGetCurrentTaskHandle>
 80067b6:	4603      	mov	r3, r0
 80067b8:	429c      	cmp	r4, r3
 80067ba:	d107      	bne.n	80067cc <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80067c6:	2301      	movs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	e00c      	b.n	80067e6 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6938      	ldr	r0, [r7, #16]
 80067d0:	f000 fba2 	bl	8006f18 <xQueueSemaphoreTake>
 80067d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80067e6:	697b      	ldr	r3, [r7, #20]
	}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}

080067f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10c      	bne.n	800681c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	b672      	cpsid	i
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	b662      	cpsie	i
 8006816:	61bb      	str	r3, [r7, #24]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	429a      	cmp	r2, r3
 8006822:	d90c      	bls.n	800683e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	b672      	cpsid	i
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	b662      	cpsie	i
 8006838:	617b      	str	r3, [r7, #20]
}
 800683a:	bf00      	nop
 800683c:	e7fe      	b.n	800683c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800683e:	2302      	movs	r3, #2
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff fe2f 	bl	80064ac <xQueueGenericCreateStatic>
 800684e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800685c:	69fb      	ldr	r3, [r7, #28]
	}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10c      	bne.n	8006890 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	b672      	cpsid	i
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	b662      	cpsie	i
 800688a:	613b      	str	r3, [r7, #16]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d90c      	bls.n	80068b2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	b672      	cpsid	i
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	b662      	cpsie	i
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068b2:	2202      	movs	r2, #2
 80068b4:	2100      	movs	r1, #0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fe7a 	bl	80065b0 <xQueueGenericCreate>
 80068bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068ca:	697b      	ldr	r3, [r7, #20]
	}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068e2:	2300      	movs	r3, #0
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10c      	bne.n	800690a <xQueueGenericSend+0x36>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	b672      	cpsid	i
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	b662      	cpsie	i
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <xQueueGenericSend+0x44>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <xQueueGenericSend+0x48>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <xQueueGenericSend+0x4a>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10c      	bne.n	800693c <xQueueGenericSend+0x68>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	b672      	cpsid	i
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	b662      	cpsie	i
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d103      	bne.n	800694a <xQueueGenericSend+0x76>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <xQueueGenericSend+0x7a>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueGenericSend+0x7c>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <xQueueGenericSend+0x9a>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	b672      	cpsid	i
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	b662      	cpsie	i
 8006968:	623b      	str	r3, [r7, #32]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800696e:	f001 fd0d 	bl	800838c <xTaskGetSchedulerState>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <xQueueGenericSend+0xaa>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <xQueueGenericSend+0xae>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <xQueueGenericSend+0xb0>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10c      	bne.n	80069a2 <xQueueGenericSend+0xce>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	b672      	cpsid	i
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	b662      	cpsie	i
 800699c:	61fb      	str	r3, [r7, #28]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a2:	f002 fb43 	bl	800902c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <xQueueGenericSend+0xe4>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d129      	bne.n	8006a0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fcc2 	bl	8007346 <prvCopyDataToQueue>
 80069c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d010      	beq.n	80069ee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	3324      	adds	r3, #36	; 0x24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fb01 	bl	8007fd8 <xTaskRemoveFromEventList>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d013      	beq.n	8006a04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <xQueueGenericSend+0x208>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	e00a      	b.n	8006a04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <xQueueGenericSend+0x208>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a04:	f002 fb46 	bl	8009094 <vPortExitCritical>
				return pdPASS;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e063      	b.n	8006ad4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a12:	f002 fb3f 	bl	8009094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e05c      	b.n	8006ad4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 fb3d 	bl	80080a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a2e:	f002 fb31 	bl	8009094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a32:	f001 f88b 	bl	8007b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a36:	f002 faf9 	bl	800902c <vPortEnterCritical>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a46:	d103      	bne.n	8006a50 <xQueueGenericSend+0x17c>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5c:	d103      	bne.n	8006a66 <xQueueGenericSend+0x192>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a66:	f002 fb15 	bl	8009094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6a:	1d3a      	adds	r2, r7, #4
 8006a6c:	f107 0314 	add.w	r3, r7, #20
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fb2c 	bl	80080d0 <xTaskCheckForTimeOut>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d124      	bne.n	8006ac8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a80:	f000 fd59 	bl	8007536 <prvIsQueueFull>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fa4c 	bl	8007f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f000 fce4 	bl	8007466 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a9e:	f001 f863 	bl	8007b68 <xTaskResumeAll>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f47f af7c 	bne.w	80069a2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <xQueueGenericSend+0x208>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	e772      	b.n	80069a2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006abe:	f000 fcd2 	bl	8007466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac2:	f001 f851 	bl	8007b68 <xTaskResumeAll>
 8006ac6:	e76c      	b.n	80069a2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aca:	f000 fccc 	bl	8007466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ace:	f001 f84b 	bl	8007b68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3738      	adds	r7, #56	; 0x38
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08e      	sub	sp, #56	; 0x38
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	b672      	cpsid	i
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	b662      	cpsie	i
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueGenericSendFromISR+0x40>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSendFromISR+0x44>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSendFromISR+0x46>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	b672      	cpsid	i
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	b662      	cpsie	i
 8006b3e:	623b      	str	r3, [r7, #32]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d103      	bne.n	8006b52 <xQueueGenericSendFromISR+0x72>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <xQueueGenericSendFromISR+0x76>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueGenericSendFromISR+0x78>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10c      	bne.n	8006b76 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	b672      	cpsid	i
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	b662      	cpsie	i
 8006b70:	61fb      	str	r3, [r7, #28]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b76:	f002 fb41 	bl	80091fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	b672      	cpsid	i
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	b662      	cpsie	i
 8006b92:	61ba      	str	r2, [r7, #24]
 8006b94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <xQueueGenericSendFromISR+0xcc>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d12c      	bne.n	8006c06 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bbc:	f000 fbc3 	bl	8007346 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc8:	d112      	bne.n	8006bf0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	3324      	adds	r3, #36	; 0x24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 f9fe 	bl	8007fd8 <xTaskRemoveFromEventList>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e007      	b.n	8006c00 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	b25a      	sxtb	r2, r3
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006c04:	e001      	b.n	8006c0a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3738      	adds	r7, #56	; 0x38
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	; 0x38
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10c      	bne.n	8006c4e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	b672      	cpsid	i
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	b662      	cpsie	i
 8006c48:	623b      	str	r3, [r7, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	b672      	cpsid	i
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	b662      	cpsie	i
 8006c6a:	61fb      	str	r3, [r7, #28]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <xQueueGiveFromISR+0x60>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <xQueueGiveFromISR+0x64>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <xQueueGiveFromISR+0x66>
 8006c84:	2300      	movs	r3, #0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	b672      	cpsid	i
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	b662      	cpsie	i
 8006c9e:	61bb      	str	r3, [r7, #24]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ca4:	f002 faaa 	bl	80091fc <vPortValidateInterruptPriority>
	__asm volatile
 8006ca8:	f3ef 8211 	mrs	r2, BASEPRI
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	b672      	cpsid	i
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	b662      	cpsie	i
 8006cc0:	617a      	str	r2, [r7, #20]
 8006cc2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006cc4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d22b      	bcs.n	8006d30 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf2:	d112      	bne.n	8006d1a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d016      	beq.n	8006d2a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	3324      	adds	r3, #36	; 0x24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 f969 	bl	8007fd8 <xTaskRemoveFromEventList>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e007      	b.n	8006d2a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d1e:	3301      	adds	r3, #1
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	b25a      	sxtb	r2, r3
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2e:	e001      	b.n	8006d34 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3738      	adds	r7, #56	; 0x38
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	; 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <xQueueReceive+0x34>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	623b      	str	r3, [r7, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <xQueueReceive+0x42>
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <xQueueReceive+0x46>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueReceive+0x48>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10c      	bne.n	8006db2 <xQueueReceive+0x66>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	b672      	cpsid	i
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	b662      	cpsie	i
 8006dac:	61fb      	str	r3, [r7, #28]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006db2:	f001 faeb 	bl	800838c <xTaskGetSchedulerState>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <xQueueReceive+0x76>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <xQueueReceive+0x7a>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <xQueueReceive+0x7c>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10c      	bne.n	8006de6 <xQueueReceive+0x9a>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	b672      	cpsid	i
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	b662      	cpsie	i
 8006de0:	61bb      	str	r3, [r7, #24]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006de6:	f002 f921 	bl	800902c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01f      	beq.n	8006e36 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dfa:	f000 fb0e 	bl	800741a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00f      	beq.n	8006e2e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	3310      	adds	r3, #16
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 f8e0 	bl	8007fd8 <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e1e:	4b3d      	ldr	r3, [pc, #244]	; (8006f14 <xQueueReceive+0x1c8>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e2e:	f002 f931 	bl	8009094 <vPortExitCritical>
				return pdPASS;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e069      	b.n	8006f0a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e3c:	f002 f92a 	bl	8009094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e062      	b.n	8006f0a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e4a:	f107 0310 	add.w	r3, r7, #16
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f001 f928 	bl	80080a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e58:	f002 f91c 	bl	8009094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e5c:	f000 fe76 	bl	8007b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e60:	f002 f8e4 	bl	800902c <vPortEnterCritical>
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e70:	d103      	bne.n	8006e7a <xQueueReceive+0x12e>
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e80:	b25b      	sxtb	r3, r3
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e86:	d103      	bne.n	8006e90 <xQueueReceive+0x144>
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e90:	f002 f900 	bl	8009094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e94:	1d3a      	adds	r2, r7, #4
 8006e96:	f107 0310 	add.w	r3, r7, #16
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 f917 	bl	80080d0 <xTaskCheckForTimeOut>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d123      	bne.n	8006ef0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eaa:	f000 fb2e 	bl	800750a <prvIsQueueEmpty>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d017      	beq.n	8006ee4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	3324      	adds	r3, #36	; 0x24
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 f837 	bl	8007f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec4:	f000 facf 	bl	8007466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ec8:	f000 fe4e 	bl	8007b68 <xTaskResumeAll>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d189      	bne.n	8006de6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006ed2:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <xQueueReceive+0x1c8>)
 8006ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	e780      	b.n	8006de6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee6:	f000 fabe 	bl	8007466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eea:	f000 fe3d 	bl	8007b68 <xTaskResumeAll>
 8006eee:	e77a      	b.n	8006de6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef2:	f000 fab8 	bl	8007466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ef6:	f000 fe37 	bl	8007b68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006efc:	f000 fb05 	bl	800750a <prvIsQueueEmpty>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f43f af6f 	beq.w	8006de6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3730      	adds	r7, #48	; 0x30
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	; 0x38
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10c      	bne.n	8006f4e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	b672      	cpsid	i
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	b662      	cpsie	i
 8006f48:	623b      	str	r3, [r7, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00c      	beq.n	8006f70 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	b672      	cpsid	i
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	b662      	cpsie	i
 8006f6a:	61fb      	str	r3, [r7, #28]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f70:	f001 fa0c 	bl	800838c <xTaskGetSchedulerState>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <xQueueSemaphoreTake+0x68>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <xQueueSemaphoreTake+0x6c>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <xQueueSemaphoreTake+0x6e>
 8006f84:	2300      	movs	r3, #0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10c      	bne.n	8006fa4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	b672      	cpsid	i
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	b662      	cpsie	i
 8006f9e:	61bb      	str	r3, [r7, #24]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fa4:	f002 f842 	bl	800902c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d024      	beq.n	8006ffe <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	1e5a      	subs	r2, r3, #1
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fc4:	f001 fb60 	bl	8008688 <pvTaskIncrementMutexHeldCount>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00f      	beq.n	8006ff6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	3310      	adds	r3, #16
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fffc 	bl	8007fd8 <xTaskRemoveFromEventList>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fe6:	4b55      	ldr	r3, [pc, #340]	; (800713c <xQueueSemaphoreTake+0x224>)
 8006fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ff6:	f002 f84d 	bl	8009094 <vPortExitCritical>
				return pdPASS;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e099      	b.n	8007132 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d113      	bne.n	800702c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	b672      	cpsid	i
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	b662      	cpsie	i
 800701e:	617b      	str	r3, [r7, #20]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007024:	f002 f836 	bl	8009094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007028:	2300      	movs	r3, #0
 800702a:	e082      	b.n	8007132 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f834 	bl	80080a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007040:	f002 f828 	bl	8009094 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007044:	f000 fd82 	bl	8007b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007048:	f001 fff0 	bl	800902c <vPortEnterCritical>
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007052:	b25b      	sxtb	r3, r3
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007058:	d103      	bne.n	8007062 <xQueueSemaphoreTake+0x14a>
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007068:	b25b      	sxtb	r3, r3
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706e:	d103      	bne.n	8007078 <xQueueSemaphoreTake+0x160>
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007078:	f002 f80c 	bl	8009094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707c:	463a      	mov	r2, r7
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f001 f823 	bl	80080d0 <xTaskCheckForTimeOut>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d132      	bne.n	80070f6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007092:	f000 fa3a 	bl	800750a <prvIsQueueEmpty>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d026      	beq.n	80070ea <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80070a4:	f001 ffc2 	bl	800902c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 f98b 	bl	80083c8 <xTaskPriorityInherit>
 80070b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80070b4:	f001 ffee 	bl	8009094 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	3324      	adds	r3, #36	; 0x24
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	4611      	mov	r1, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 ff35 	bl	8007f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c8:	f000 f9cd 	bl	8007466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070cc:	f000 fd4c 	bl	8007b68 <xTaskResumeAll>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f af66 	bne.w	8006fa4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80070d8:	4b18      	ldr	r3, [pc, #96]	; (800713c <xQueueSemaphoreTake+0x224>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	e75c      	b.n	8006fa4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ec:	f000 f9bb 	bl	8007466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070f0:	f000 fd3a 	bl	8007b68 <xTaskResumeAll>
 80070f4:	e756      	b.n	8006fa4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070f8:	f000 f9b5 	bl	8007466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070fc:	f000 fd34 	bl	8007b68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007102:	f000 fa02 	bl	800750a <prvIsQueueEmpty>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	f43f af4b 	beq.w	8006fa4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00d      	beq.n	8007130 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007114:	f001 ff8a 	bl	800902c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800711a:	f000 f8fc 	bl	8007316 <prvGetDisinheritPriorityAfterTimeout>
 800711e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007126:	4618      	mov	r0, r3
 8007128:	f001 fa28 	bl	800857c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800712c:	f001 ffb2 	bl	8009094 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3738      	adds	r7, #56	; 0x38
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10c      	bne.n	8007170 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	b672      	cpsid	i
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	b662      	cpsie	i
 800716a:	623b      	str	r3, [r7, #32]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <xQueueReceiveFromISR+0x3e>
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <xQueueReceiveFromISR+0x42>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <xQueueReceiveFromISR+0x44>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10c      	bne.n	80071a2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	b672      	cpsid	i
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	b662      	cpsie	i
 800719c:	61fb      	str	r3, [r7, #28]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071a2:	f002 f82b 	bl	80091fc <vPortValidateInterruptPriority>
	__asm volatile
 80071a6:	f3ef 8211 	mrs	r2, BASEPRI
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	b672      	cpsid	i
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	b662      	cpsie	i
 80071be:	61ba      	str	r2, [r7, #24]
 80071c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d02f      	beq.n	8007232 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071e0:	f000 f91b 	bl	800741a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	1e5a      	subs	r2, r3, #1
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f4:	d112      	bne.n	800721c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d016      	beq.n	800722c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	3310      	adds	r3, #16
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fee8 	bl	8007fd8 <xTaskRemoveFromEventList>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00e      	beq.n	800722c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e007      	b.n	800722c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800721c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007220:	3301      	adds	r3, #1
 8007222:	b2db      	uxtb	r3, r3
 8007224:	b25a      	sxtb	r2, r3
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
 8007230:	e001      	b.n	8007236 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007232:	2300      	movs	r3, #0
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	613b      	str	r3, [r7, #16]
	__asm volatile
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f383 8811 	msr	BASEPRI, r3
}
 8007240:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007244:	4618      	mov	r0, r3
 8007246:	3738      	adds	r7, #56	; 0x38
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10c      	bne.n	8007274 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	b672      	cpsid	i
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	b662      	cpsie	i
 800726e:	60bb      	str	r3, [r7, #8]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007274:	f001 feda 	bl	800902c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800727e:	f001 ff09 	bl	8009094 <vPortExitCritical>

	return uxReturn;
 8007282:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10c      	bne.n	80072b8 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	b672      	cpsid	i
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	b662      	cpsie	i
 80072b2:	60fb      	str	r3, [r7, #12]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80072be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10c      	bne.n	80072f8 <vQueueDelete+0x2c>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	60bb      	str	r3, [r7, #8]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f95f 	bl	80075bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f002 f885 	bl	8009418 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d006      	beq.n	8007334 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e001      	b.n	8007338 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007338:	68fb      	ldr	r3, [r7, #12]
	}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10d      	bne.n	8007380 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d14d      	bne.n	8007408 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	4618      	mov	r0, r3
 8007372:	f001 f891 	bl	8008498 <xTaskPriorityDisinherit>
 8007376:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	609a      	str	r2, [r3, #8]
 800737e:	e043      	b.n	8007408 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d119      	bne.n	80073ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6858      	ldr	r0, [r3, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	461a      	mov	r2, r3
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	f00f fa50 	bl	8016836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	441a      	add	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d32b      	bcc.n	8007408 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	e026      	b.n	8007408 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68d8      	ldr	r0, [r3, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	461a      	mov	r2, r3
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	f00f fa36 	bl	8016836 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	425b      	negs	r3, r3
 80073d4:	441a      	add	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d207      	bcs.n	80073f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	425b      	negs	r3, r3
 80073f0:	441a      	add	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d105      	bne.n	8007408 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3b01      	subs	r3, #1
 8007406:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007410:	697b      	ldr	r3, [r7, #20]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d018      	beq.n	800745e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	441a      	add	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d303      	bcc.n	800744e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68d9      	ldr	r1, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	461a      	mov	r2, r3
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	f00f f9ec 	bl	8016836 <memcpy>
	}
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800746e:	f001 fddd 	bl	800902c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007478:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800747a:	e011      	b.n	80074a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	d012      	beq.n	80074aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3324      	adds	r3, #36	; 0x24
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fda5 	bl	8007fd8 <xTaskRemoveFromEventList>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007494:	f000 fe82 	bl	800819c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	3b01      	subs	r3, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dce9      	bgt.n	800747c <prvUnlockQueue+0x16>
 80074a8:	e000      	b.n	80074ac <prvUnlockQueue+0x46>
					break;
 80074aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	22ff      	movs	r2, #255	; 0xff
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074b4:	f001 fdee 	bl	8009094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074b8:	f001 fdb8 	bl	800902c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074c4:	e011      	b.n	80074ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d012      	beq.n	80074f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3310      	adds	r3, #16
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fd80 	bl	8007fd8 <xTaskRemoveFromEventList>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074de:	f000 fe5d 	bl	800819c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dce9      	bgt.n	80074c6 <prvUnlockQueue+0x60>
 80074f2:	e000      	b.n	80074f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	22ff      	movs	r2, #255	; 0xff
 80074fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074fe:	f001 fdc9 	bl	8009094 <vPortExitCritical>
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007512:	f001 fd8b 	bl	800902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e001      	b.n	8007528 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007528:	f001 fdb4 	bl	8009094 <vPortExitCritical>

	return xReturn;
 800752c:	68fb      	ldr	r3, [r7, #12]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800753e:	f001 fd75 	bl	800902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	429a      	cmp	r2, r3
 800754c:	d102      	bne.n	8007554 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800754e:	2301      	movs	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	e001      	b.n	8007558 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007558:	f001 fd9c 	bl	8009094 <vPortExitCritical>

	return xReturn;
 800755c:	68fb      	ldr	r3, [r7, #12]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e014      	b.n	80075a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007578:	4a0f      	ldr	r2, [pc, #60]	; (80075b8 <vQueueAddToRegistry+0x50>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007584:	490c      	ldr	r1, [pc, #48]	; (80075b8 <vQueueAddToRegistry+0x50>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800758e:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <vQueueAddToRegistry+0x50>)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800759a:	e006      	b.n	80075aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	d9e7      	bls.n	8007578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20005820 	.word	0x20005820

080075bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e016      	b.n	80075f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075ca:	4a10      	ldr	r2, [pc, #64]	; (800760c <vQueueUnregisterQueue+0x50>)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	4413      	add	r3, r2
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d10b      	bne.n	80075f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80075da:	4a0c      	ldr	r2, [pc, #48]	; (800760c <vQueueUnregisterQueue+0x50>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2100      	movs	r1, #0
 80075e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80075e4:	4a09      	ldr	r2, [pc, #36]	; (800760c <vQueueUnregisterQueue+0x50>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	4413      	add	r3, r2
 80075ec:	2200      	movs	r2, #0
 80075ee:	605a      	str	r2, [r3, #4]
				break;
 80075f0:	e006      	b.n	8007600 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d9e5      	bls.n	80075ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20005820 	.word	0x20005820

08007610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007620:	f001 fd04 	bl	800902c <vPortEnterCritical>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800762a:	b25b      	sxtb	r3, r3
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007630:	d103      	bne.n	800763a <vQueueWaitForMessageRestricted+0x2a>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007640:	b25b      	sxtb	r3, r3
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007646:	d103      	bne.n	8007650 <vQueueWaitForMessageRestricted+0x40>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007650:	f001 fd20 	bl	8009094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3324      	adds	r3, #36	; 0x24
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fc89 	bl	8007f7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800766a:	6978      	ldr	r0, [r7, #20]
 800766c:	f7ff fefb 	bl	8007466 <prvUnlockQueue>
	}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	; 0x38
 800767c:	af04      	add	r7, sp, #16
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10c      	bne.n	80076a6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	b672      	cpsid	i
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	b662      	cpsie	i
 80076a0:	623b      	str	r3, [r7, #32]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10c      	bne.n	80076c6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	b672      	cpsid	i
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	b662      	cpsie	i
 80076c0:	61fb      	str	r3, [r7, #28]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076c6:	23bc      	movs	r3, #188	; 0xbc
 80076c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2bbc      	cmp	r3, #188	; 0xbc
 80076ce:	d00c      	beq.n	80076ea <xTaskCreateStatic+0x72>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	61bb      	str	r3, [r7, #24]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01e      	beq.n	8007730 <xTaskCreateStatic+0xb8>
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01b      	beq.n	8007730 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007700:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	2202      	movs	r2, #2
 8007706:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800770a:	2300      	movs	r3, #0
 800770c:	9303      	str	r3, [sp, #12]
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	f107 0314 	add.w	r3, r7, #20
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f850 	bl	80077c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800772a:	f000 f8f5 	bl	8007918 <prvAddNewTaskToReadyList>
 800772e:	e001      	b.n	8007734 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007734:	697b      	ldr	r3, [r7, #20]
	}
 8007736:	4618      	mov	r0, r3
 8007738:	3728      	adds	r7, #40	; 0x28
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800773e:	b580      	push	{r7, lr}
 8007740:	b08c      	sub	sp, #48	; 0x30
 8007742:	af04      	add	r7, sp, #16
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fd96 	bl	8009284 <pvPortMalloc>
 8007758:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00e      	beq.n	800777e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007760:	20bc      	movs	r0, #188	; 0xbc
 8007762:	f001 fd8f 	bl	8009284 <pvPortMalloc>
 8007766:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
 8007774:	e005      	b.n	8007782 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007776:	6978      	ldr	r0, [r7, #20]
 8007778:	f001 fe4e 	bl	8009418 <vPortFree>
 800777c:	e001      	b.n	8007782 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d017      	beq.n	80077b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	2300      	movs	r3, #0
 8007794:	9303      	str	r3, [sp, #12]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	9302      	str	r3, [sp, #8]
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f80e 	bl	80077c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077ac:	69f8      	ldr	r0, [r7, #28]
 80077ae:	f000 f8b3 	bl	8007918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077b2:	2301      	movs	r3, #1
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	e002      	b.n	80077be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077be:	69bb      	ldr	r3, [r7, #24]
	}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	461a      	mov	r2, r3
 80077e0:	21a5      	movs	r1, #165	; 0xa5
 80077e2:	f00f f850 	bl	8016886 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80077f0:	440b      	add	r3, r1
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	b672      	cpsid	i
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	b662      	cpsie	i
 800781e:	617b      	str	r3, [r7, #20]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d01f      	beq.n	800786a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800782a:	2300      	movs	r3, #0
 800782c:	61fb      	str	r3, [r7, #28]
 800782e:	e012      	b.n	8007856 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	7819      	ldrb	r1, [r3, #0]
 8007838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	3334      	adds	r3, #52	; 0x34
 8007840:	460a      	mov	r2, r1
 8007842:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d006      	beq.n	800785e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	3301      	adds	r3, #1
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	2b0f      	cmp	r3, #15
 800785a:	d9e9      	bls.n	8007830 <prvInitialiseNewTask+0x68>
 800785c:	e000      	b.n	8007860 <prvInitialiseNewTask+0x98>
			{
				break;
 800785e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007868:	e003      	b.n	8007872 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	2b37      	cmp	r3, #55	; 0x37
 8007876:	d901      	bls.n	800787c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007878:	2337      	movs	r3, #55	; 0x37
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007880:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007886:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	3304      	adds	r3, #4
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fd0c 	bl	80062b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	3318      	adds	r3, #24
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fd07 	bl	80062b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	3354      	adds	r3, #84	; 0x54
 80078cc:	2260      	movs	r2, #96	; 0x60
 80078ce:	2100      	movs	r1, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	f00e ffd8 	bl	8016886 <memset>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	4a0c      	ldr	r2, [pc, #48]	; (800790c <prvInitialiseNewTask+0x144>)
 80078da:	659a      	str	r2, [r3, #88]	; 0x58
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	4a0c      	ldr	r2, [pc, #48]	; (8007910 <prvInitialiseNewTask+0x148>)
 80078e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	4a0b      	ldr	r2, [pc, #44]	; (8007914 <prvInitialiseNewTask+0x14c>)
 80078e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	69b8      	ldr	r0, [r7, #24]
 80078ee:	f001 fa8f 	bl	8008e10 <pxPortInitialiseStack>
 80078f2:	4602      	mov	r2, r0
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007904:	bf00      	nop
 8007906:	3720      	adds	r7, #32
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	0801ceb8 	.word	0x0801ceb8
 8007910:	0801ced8 	.word	0x0801ced8
 8007914:	0801ce98 	.word	0x0801ce98

08007918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007920:	f001 fb84 	bl	800902c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007924:	4b2d      	ldr	r3, [pc, #180]	; (80079dc <prvAddNewTaskToReadyList+0xc4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	4a2c      	ldr	r2, [pc, #176]	; (80079dc <prvAddNewTaskToReadyList+0xc4>)
 800792c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800792e:	4b2c      	ldr	r3, [pc, #176]	; (80079e0 <prvAddNewTaskToReadyList+0xc8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007936:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <prvAddNewTaskToReadyList+0xc8>)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800793c:	4b27      	ldr	r3, [pc, #156]	; (80079dc <prvAddNewTaskToReadyList+0xc4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d110      	bne.n	8007966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007944:	f000 fc4e 	bl	80081e4 <prvInitialiseTaskLists>
 8007948:	e00d      	b.n	8007966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800794a:	4b26      	ldr	r3, [pc, #152]	; (80079e4 <prvAddNewTaskToReadyList+0xcc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007952:	4b23      	ldr	r3, [pc, #140]	; (80079e0 <prvAddNewTaskToReadyList+0xc8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	429a      	cmp	r2, r3
 800795e:	d802      	bhi.n	8007966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007960:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <prvAddNewTaskToReadyList+0xc8>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007966:	4b20      	ldr	r3, [pc, #128]	; (80079e8 <prvAddNewTaskToReadyList+0xd0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3301      	adds	r3, #1
 800796c:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <prvAddNewTaskToReadyList+0xd0>)
 800796e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007970:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <prvAddNewTaskToReadyList+0xd0>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <prvAddNewTaskToReadyList+0xd4>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <prvAddNewTaskToReadyList+0x74>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a18      	ldr	r2, [pc, #96]	; (80079ec <prvAddNewTaskToReadyList+0xd4>)
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <prvAddNewTaskToReadyList+0xd8>)
 800799a:	441a      	add	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe fc91 	bl	80062ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079a8:	f001 fb74 	bl	8009094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <prvAddNewTaskToReadyList+0xcc>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079b4:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <prvAddNewTaskToReadyList+0xc8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	429a      	cmp	r2, r3
 80079c0:	d207      	bcs.n	80079d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079c2:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <prvAddNewTaskToReadyList+0xdc>)
 80079c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20005d34 	.word	0x20005d34
 80079e0:	20005860 	.word	0x20005860
 80079e4:	20005d40 	.word	0x20005d40
 80079e8:	20005d50 	.word	0x20005d50
 80079ec:	20005d3c 	.word	0x20005d3c
 80079f0:	20005864 	.word	0x20005864
 80079f4:	e000ed04 	.word	0xe000ed04

080079f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d019      	beq.n	8007a3e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a0a:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <vTaskDelay+0x64>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <vTaskDelay+0x34>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	b672      	cpsid	i
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	b662      	cpsie	i
 8007a26:	60bb      	str	r3, [r7, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007a2c:	f000 f88e 	bl	8007b4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a30:	2100      	movs	r1, #0
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fe3c 	bl	80086b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a38:	f000 f896 	bl	8007b68 <xTaskResumeAll>
 8007a3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d107      	bne.n	8007a54 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007a44:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <vTaskDelay+0x68>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a54:	bf00      	nop
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20005d5c 	.word	0x20005d5c
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a72:	463a      	mov	r2, r7
 8007a74:	1d39      	adds	r1, r7, #4
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fbc4 	bl	8006208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	9202      	str	r2, [sp, #8]
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	460a      	mov	r2, r1
 8007a92:	4926      	ldr	r1, [pc, #152]	; (8007b2c <vTaskStartScheduler+0xc8>)
 8007a94:	4826      	ldr	r0, [pc, #152]	; (8007b30 <vTaskStartScheduler+0xcc>)
 8007a96:	f7ff fdef 	bl	8007678 <xTaskCreateStatic>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <vTaskStartScheduler+0xd0>)
 8007a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007aa0:	4b24      	ldr	r3, [pc, #144]	; (8007b34 <vTaskStartScheduler+0xd0>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e001      	b.n	8007ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d102      	bne.n	8007abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ab8:	f000 fe4e 	bl	8008758 <xTimerCreateTimerTask>
 8007abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d11d      	bne.n	8007b00 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	b672      	cpsid	i
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	b662      	cpsie	i
 8007ad8:	613b      	str	r3, [r7, #16]
}
 8007ada:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007adc:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <vTaskStartScheduler+0xd4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3354      	adds	r3, #84	; 0x54
 8007ae2:	4a16      	ldr	r2, [pc, #88]	; (8007b3c <vTaskStartScheduler+0xd8>)
 8007ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ae6:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <vTaskStartScheduler+0xdc>)
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007aee:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <vTaskStartScheduler+0xe0>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007af4:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <vTaskStartScheduler+0xe4>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007afa:	f001 fa19 	bl	8008f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007afe:	e010      	b.n	8007b22 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b06:	d10c      	bne.n	8007b22 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	b672      	cpsid	i
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	b662      	cpsie	i
 8007b1c:	60fb      	str	r3, [r7, #12]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <vTaskStartScheduler+0xbc>
}
 8007b22:	bf00      	nop
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08019ab8 	.word	0x08019ab8
 8007b30:	080081b5 	.word	0x080081b5
 8007b34:	20005d58 	.word	0x20005d58
 8007b38:	20005860 	.word	0x20005860
 8007b3c:	2000002c 	.word	0x2000002c
 8007b40:	20005d54 	.word	0x20005d54
 8007b44:	20005d40 	.word	0x20005d40
 8007b48:	20005d38 	.word	0x20005d38

08007b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <vTaskSuspendAll+0x18>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	4a03      	ldr	r2, [pc, #12]	; (8007b64 <vTaskSuspendAll+0x18>)
 8007b58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007b5a:	bf00      	nop
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	20005d5c 	.word	0x20005d5c

08007b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b76:	4b43      	ldr	r3, [pc, #268]	; (8007c84 <xTaskResumeAll+0x11c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10c      	bne.n	8007b98 <xTaskResumeAll+0x30>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	b672      	cpsid	i
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	b662      	cpsie	i
 8007b92:	603b      	str	r3, [r7, #0]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b98:	f001 fa48 	bl	800902c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b9c:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <xTaskResumeAll+0x11c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	4a38      	ldr	r2, [pc, #224]	; (8007c84 <xTaskResumeAll+0x11c>)
 8007ba4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba6:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <xTaskResumeAll+0x11c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d162      	bne.n	8007c74 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bae:	4b36      	ldr	r3, [pc, #216]	; (8007c88 <xTaskResumeAll+0x120>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d05e      	beq.n	8007c74 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bb6:	e02f      	b.n	8007c18 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb8:	4b34      	ldr	r3, [pc, #208]	; (8007c8c <xTaskResumeAll+0x124>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3318      	adds	r3, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fbdd 	bl	8006384 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fbd8 	bl	8006384 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	4b2d      	ldr	r3, [pc, #180]	; (8007c90 <xTaskResumeAll+0x128>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d903      	bls.n	8007be8 <xTaskResumeAll+0x80>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	4a2a      	ldr	r2, [pc, #168]	; (8007c90 <xTaskResumeAll+0x128>)
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4a27      	ldr	r2, [pc, #156]	; (8007c94 <xTaskResumeAll+0x12c>)
 8007bf6:	441a      	add	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7fe fb63 	bl	80062ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4b23      	ldr	r3, [pc, #140]	; (8007c98 <xTaskResumeAll+0x130>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007c12:	4b22      	ldr	r3, [pc, #136]	; (8007c9c <xTaskResumeAll+0x134>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c18:	4b1c      	ldr	r3, [pc, #112]	; (8007c8c <xTaskResumeAll+0x124>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1cb      	bne.n	8007bb8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c26:	f000 fb81 	bl	800832c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <xTaskResumeAll+0x138>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d010      	beq.n	8007c58 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c36:	f000 f859 	bl	8007cec <xTaskIncrementTick>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007c40:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <xTaskResumeAll+0x134>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f1      	bne.n	8007c36 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <xTaskResumeAll+0x138>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c58:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <xTaskResumeAll+0x134>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xTaskResumeAll+0x13c>)
 8007c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c74:	f001 fa0e 	bl	8009094 <vPortExitCritical>

	return xAlreadyYielded;
 8007c78:	68bb      	ldr	r3, [r7, #8]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20005d5c 	.word	0x20005d5c
 8007c88:	20005d34 	.word	0x20005d34
 8007c8c:	20005cf4 	.word	0x20005cf4
 8007c90:	20005d3c 	.word	0x20005d3c
 8007c94:	20005864 	.word	0x20005864
 8007c98:	20005860 	.word	0x20005860
 8007c9c:	20005d48 	.word	0x20005d48
 8007ca0:	20005d44 	.word	0x20005d44
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <xTaskGetTickCount+0x1c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cb4:	687b      	ldr	r3, [r7, #4]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20005d38 	.word	0x20005d38

08007cc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cce:	f001 fa95 	bl	80091fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007cd6:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <xTaskGetTickCountFromISR+0x20>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cdc:	683b      	ldr	r3, [r7, #0]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20005d38 	.word	0x20005d38

08007cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cf6:	4b50      	ldr	r3, [pc, #320]	; (8007e38 <xTaskIncrementTick+0x14c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 808b 	bne.w	8007e16 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d00:	4b4e      	ldr	r3, [pc, #312]	; (8007e3c <xTaskIncrementTick+0x150>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3301      	adds	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d08:	4a4c      	ldr	r2, [pc, #304]	; (8007e3c <xTaskIncrementTick+0x150>)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d122      	bne.n	8007d5a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d14:	4b4a      	ldr	r3, [pc, #296]	; (8007e40 <xTaskIncrementTick+0x154>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00c      	beq.n	8007d38 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	b672      	cpsid	i
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	b662      	cpsie	i
 8007d32:	603b      	str	r3, [r7, #0]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xTaskIncrementTick+0x4a>
 8007d38:	4b41      	ldr	r3, [pc, #260]	; (8007e40 <xTaskIncrementTick+0x154>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	4b41      	ldr	r3, [pc, #260]	; (8007e44 <xTaskIncrementTick+0x158>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3f      	ldr	r2, [pc, #252]	; (8007e40 <xTaskIncrementTick+0x154>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	4a3f      	ldr	r2, [pc, #252]	; (8007e44 <xTaskIncrementTick+0x158>)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b3e      	ldr	r3, [pc, #248]	; (8007e48 <xTaskIncrementTick+0x15c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	4a3d      	ldr	r2, [pc, #244]	; (8007e48 <xTaskIncrementTick+0x15c>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	f000 fae9 	bl	800832c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d5a:	4b3c      	ldr	r3, [pc, #240]	; (8007e4c <xTaskIncrementTick+0x160>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d349      	bcc.n	8007df8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d64:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <xTaskIncrementTick+0x154>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d104      	bne.n	8007d78 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6e:	4b37      	ldr	r3, [pc, #220]	; (8007e4c <xTaskIncrementTick+0x160>)
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d74:	601a      	str	r2, [r3, #0]
					break;
 8007d76:	e03f      	b.n	8007df8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d78:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <xTaskIncrementTick+0x154>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d203      	bcs.n	8007d98 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d90:	4a2e      	ldr	r2, [pc, #184]	; (8007e4c <xTaskIncrementTick+0x160>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d96:	e02f      	b.n	8007df8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe faf1 	bl	8006384 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	3318      	adds	r3, #24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fae8 	bl	8006384 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <xTaskIncrementTick+0x164>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d903      	bls.n	8007dc8 <xTaskIncrementTick+0xdc>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <xTaskIncrementTick+0x164>)
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4a1f      	ldr	r2, [pc, #124]	; (8007e54 <xTaskIncrementTick+0x168>)
 8007dd6:	441a      	add	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fe fa73 	bl	80062ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de8:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <xTaskIncrementTick+0x16c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d3b8      	bcc.n	8007d64 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df6:	e7b5      	b.n	8007d64 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <xTaskIncrementTick+0x16c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	4915      	ldr	r1, [pc, #84]	; (8007e54 <xTaskIncrementTick+0x168>)
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d907      	bls.n	8007e20 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007e10:	2301      	movs	r3, #1
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	e004      	b.n	8007e20 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <xTaskIncrementTick+0x170>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	4a0f      	ldr	r2, [pc, #60]	; (8007e5c <xTaskIncrementTick+0x170>)
 8007e1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e20:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <xTaskIncrementTick+0x174>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e2c:	697b      	ldr	r3, [r7, #20]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20005d5c 	.word	0x20005d5c
 8007e3c:	20005d38 	.word	0x20005d38
 8007e40:	20005cec 	.word	0x20005cec
 8007e44:	20005cf0 	.word	0x20005cf0
 8007e48:	20005d4c 	.word	0x20005d4c
 8007e4c:	20005d54 	.word	0x20005d54
 8007e50:	20005d3c 	.word	0x20005d3c
 8007e54:	20005864 	.word	0x20005864
 8007e58:	20005860 	.word	0x20005860
 8007e5c:	20005d44 	.word	0x20005d44
 8007e60:	20005d48 	.word	0x20005d48

08007e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e6a:	4b2b      	ldr	r3, [pc, #172]	; (8007f18 <vTaskSwitchContext+0xb4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e72:	4b2a      	ldr	r3, [pc, #168]	; (8007f1c <vTaskSwitchContext+0xb8>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e78:	e048      	b.n	8007f0c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007e7a:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <vTaskSwitchContext+0xb8>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e80:	4b27      	ldr	r3, [pc, #156]	; (8007f20 <vTaskSwitchContext+0xbc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	e012      	b.n	8007eae <vTaskSwitchContext+0x4a>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10c      	bne.n	8007ea8 <vTaskSwitchContext+0x44>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	b672      	cpsid	i
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	b662      	cpsie	i
 8007ea2:	607b      	str	r3, [r7, #4]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vTaskSwitchContext+0x42>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	491d      	ldr	r1, [pc, #116]	; (8007f24 <vTaskSwitchContext+0xc0>)
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0e2      	beq.n	8007e88 <vTaskSwitchContext+0x24>
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4a15      	ldr	r2, [pc, #84]	; (8007f24 <vTaskSwitchContext+0xc0>)
 8007ece:	4413      	add	r3, r2
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	605a      	str	r2, [r3, #4]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d104      	bne.n	8007ef2 <vTaskSwitchContext+0x8e>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4a0b      	ldr	r2, [pc, #44]	; (8007f28 <vTaskSwitchContext+0xc4>)
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <vTaskSwitchContext+0xbc>)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <vTaskSwitchContext+0xc4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3354      	adds	r3, #84	; 0x54
 8007f08:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <vTaskSwitchContext+0xc8>)
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	20005d5c 	.word	0x20005d5c
 8007f1c:	20005d48 	.word	0x20005d48
 8007f20:	20005d3c 	.word	0x20005d3c
 8007f24:	20005864 	.word	0x20005864
 8007f28:	20005860 	.word	0x20005860
 8007f2c:	2000002c 	.word	0x2000002c

08007f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10c      	bne.n	8007f5a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	b672      	cpsid	i
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	b662      	cpsie	i
 8007f54:	60fb      	str	r3, [r7, #12]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <vTaskPlaceOnEventList+0x48>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3318      	adds	r3, #24
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fe f9d5 	bl	8006312 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f68:	2101      	movs	r1, #1
 8007f6a:	6838      	ldr	r0, [r7, #0]
 8007f6c:	f000 fba0 	bl	80086b0 <prvAddCurrentTaskToDelayedList>
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20005860 	.word	0x20005860

08007f7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10c      	bne.n	8007fa8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	617b      	str	r3, [r7, #20]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vTaskPlaceOnEventListRestricted+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3318      	adds	r3, #24
 8007fae:	4619      	mov	r1, r3
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7fe f98a 	bl	80062ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	68b8      	ldr	r0, [r7, #8]
 8007fc6:	f000 fb73 	bl	80086b0 <prvAddCurrentTaskToDelayedList>
	}
 8007fca:	bf00      	nop
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20005860 	.word	0x20005860

08007fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10c      	bne.n	8008008 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	b672      	cpsid	i
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	b662      	cpsie	i
 8008002:	60fb      	str	r3, [r7, #12]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	3318      	adds	r3, #24
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe f9b9 	bl	8006384 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008012:	4b1e      	ldr	r3, [pc, #120]	; (800808c <xTaskRemoveFromEventList+0xb4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d11d      	bne.n	8008056 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3304      	adds	r3, #4
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe f9b0 	bl	8006384 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4b19      	ldr	r3, [pc, #100]	; (8008090 <xTaskRemoveFromEventList+0xb8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d903      	bls.n	8008038 <xTaskRemoveFromEventList+0x60>
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	4a16      	ldr	r2, [pc, #88]	; (8008090 <xTaskRemoveFromEventList+0xb8>)
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4a13      	ldr	r2, [pc, #76]	; (8008094 <xTaskRemoveFromEventList+0xbc>)
 8008046:	441a      	add	r2, r3
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f7fe f93b 	bl	80062ca <vListInsertEnd>
 8008054:	e005      	b.n	8008062 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3318      	adds	r3, #24
 800805a:	4619      	mov	r1, r3
 800805c:	480e      	ldr	r0, [pc, #56]	; (8008098 <xTaskRemoveFromEventList+0xc0>)
 800805e:	f7fe f934 	bl	80062ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	4b0d      	ldr	r3, [pc, #52]	; (800809c <xTaskRemoveFromEventList+0xc4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	429a      	cmp	r2, r3
 800806e:	d905      	bls.n	800807c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <xTaskRemoveFromEventList+0xc8>)
 8008076:	2201      	movs	r2, #1
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e001      	b.n	8008080 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008080:	697b      	ldr	r3, [r7, #20]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20005d5c 	.word	0x20005d5c
 8008090:	20005d3c 	.word	0x20005d3c
 8008094:	20005864 	.word	0x20005864
 8008098:	20005cf4 	.word	0x20005cf4
 800809c:	20005860 	.word	0x20005860
 80080a0:	20005d48 	.word	0x20005d48

080080a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <vTaskInternalSetTimeOutState+0x24>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <vTaskInternalSetTimeOutState+0x28>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	605a      	str	r2, [r3, #4]
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	20005d4c 	.word	0x20005d4c
 80080cc:	20005d38 	.word	0x20005d38

080080d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10c      	bne.n	80080fa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	613b      	str	r3, [r7, #16]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10c      	bne.n	800811a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	60fb      	str	r3, [r7, #12]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800811a:	f000 ff87 	bl	800902c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800811e:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <xTaskCheckForTimeOut+0xc4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008136:	d102      	bne.n	800813e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e023      	b.n	8008186 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <xTaskCheckForTimeOut+0xc8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d007      	beq.n	800815a <xTaskCheckForTimeOut+0x8a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	d302      	bcc.n	800815a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e015      	b.n	8008186 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	429a      	cmp	r2, r3
 8008162:	d20b      	bcs.n	800817c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff97 	bl	80080a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e004      	b.n	8008186 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008182:	2301      	movs	r3, #1
 8008184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008186:	f000 ff85 	bl	8009094 <vPortExitCritical>

	return xReturn;
 800818a:	69fb      	ldr	r3, [r7, #28]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20005d38 	.word	0x20005d38
 8008198:	20005d4c 	.word	0x20005d4c

0800819c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <vTaskMissedYield+0x14>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
}
 80081a6:	bf00      	nop
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	20005d48 	.word	0x20005d48

080081b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081bc:	f000 f852 	bl	8008264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <prvIdleTask+0x28>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d9f9      	bls.n	80081bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <prvIdleTask+0x2c>)
 80081ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081d8:	e7f0      	b.n	80081bc <prvIdleTask+0x8>
 80081da:	bf00      	nop
 80081dc:	20005864 	.word	0x20005864
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	e00c      	b.n	800820a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4a12      	ldr	r2, [pc, #72]	; (8008244 <prvInitialiseTaskLists+0x60>)
 80081fc:	4413      	add	r3, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe f836 	bl	8006270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b37      	cmp	r3, #55	; 0x37
 800820e:	d9ef      	bls.n	80081f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008210:	480d      	ldr	r0, [pc, #52]	; (8008248 <prvInitialiseTaskLists+0x64>)
 8008212:	f7fe f82d 	bl	8006270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008216:	480d      	ldr	r0, [pc, #52]	; (800824c <prvInitialiseTaskLists+0x68>)
 8008218:	f7fe f82a 	bl	8006270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800821c:	480c      	ldr	r0, [pc, #48]	; (8008250 <prvInitialiseTaskLists+0x6c>)
 800821e:	f7fe f827 	bl	8006270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008222:	480c      	ldr	r0, [pc, #48]	; (8008254 <prvInitialiseTaskLists+0x70>)
 8008224:	f7fe f824 	bl	8006270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008228:	480b      	ldr	r0, [pc, #44]	; (8008258 <prvInitialiseTaskLists+0x74>)
 800822a:	f7fe f821 	bl	8006270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <prvInitialiseTaskLists+0x78>)
 8008230:	4a05      	ldr	r2, [pc, #20]	; (8008248 <prvInitialiseTaskLists+0x64>)
 8008232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008234:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <prvInitialiseTaskLists+0x7c>)
 8008236:	4a05      	ldr	r2, [pc, #20]	; (800824c <prvInitialiseTaskLists+0x68>)
 8008238:	601a      	str	r2, [r3, #0]
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20005864 	.word	0x20005864
 8008248:	20005cc4 	.word	0x20005cc4
 800824c:	20005cd8 	.word	0x20005cd8
 8008250:	20005cf4 	.word	0x20005cf4
 8008254:	20005d08 	.word	0x20005d08
 8008258:	20005d20 	.word	0x20005d20
 800825c:	20005cec 	.word	0x20005cec
 8008260:	20005cf0 	.word	0x20005cf0

08008264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800826a:	e019      	b.n	80082a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800826c:	f000 fede 	bl	800902c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <prvCheckTasksWaitingTermination+0x50>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe f881 	bl	8006384 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3b01      	subs	r3, #1
 8008288:	4a0b      	ldr	r2, [pc, #44]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 800828a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800828c:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <prvCheckTasksWaitingTermination+0x58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <prvCheckTasksWaitingTermination+0x58>)
 8008294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008296:	f000 fefd 	bl	8009094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f810 	bl	80082c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <prvCheckTasksWaitingTermination+0x58>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e1      	bne.n	800826c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20005d08 	.word	0x20005d08
 80082b8:	20005d34 	.word	0x20005d34
 80082bc:	20005d1c 	.word	0x20005d1c

080082c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3354      	adds	r3, #84	; 0x54
 80082cc:	4618      	mov	r0, r3
 80082ce:	f00e fbdb 	bl	8016a88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d108      	bne.n	80082ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 f899 	bl	8009418 <vPortFree>
				vPortFree( pxTCB );
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 f896 	bl	8009418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ec:	e01a      	b.n	8008324 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d103      	bne.n	8008300 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f88d 	bl	8009418 <vPortFree>
	}
 80082fe:	e011      	b.n	8008324 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008306:	2b02      	cmp	r3, #2
 8008308:	d00c      	beq.n	8008324 <prvDeleteTCB+0x64>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	b672      	cpsid	i
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	b662      	cpsie	i
 800831e:	60fb      	str	r3, [r7, #12]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <prvDeleteTCB+0x62>
	}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <prvResetNextTaskUnblockTime+0x38>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d104      	bne.n	8008346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <prvResetNextTaskUnblockTime+0x3c>)
 800833e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008344:	e008      	b.n	8008358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <prvResetNextTaskUnblockTime+0x38>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	4a04      	ldr	r2, [pc, #16]	; (8008368 <prvResetNextTaskUnblockTime+0x3c>)
 8008356:	6013      	str	r3, [r2, #0]
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	20005cec 	.word	0x20005cec
 8008368:	20005d54 	.word	0x20005d54

0800836c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <xTaskGetCurrentTaskHandle+0x1c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008378:	687b      	ldr	r3, [r7, #4]
	}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20005860 	.word	0x20005860

0800838c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008392:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <xTaskGetSchedulerState+0x34>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800839a:	2301      	movs	r3, #1
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	e008      	b.n	80083b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a0:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <xTaskGetSchedulerState+0x38>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083a8:	2302      	movs	r3, #2
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	e001      	b.n	80083b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083b2:	687b      	ldr	r3, [r7, #4]
	}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20005d40 	.word	0x20005d40
 80083c4:	20005d5c 	.word	0x20005d5c

080083c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d051      	beq.n	8008482 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	4b2a      	ldr	r3, [pc, #168]	; (800848c <xTaskPriorityInherit+0xc4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d241      	bcs.n	8008470 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	db06      	blt.n	8008402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <xTaskPriorityInherit+0xc4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6959      	ldr	r1, [r3, #20]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4a1f      	ldr	r2, [pc, #124]	; (8008490 <xTaskPriorityInherit+0xc8>)
 8008414:	4413      	add	r3, r2
 8008416:	4299      	cmp	r1, r3
 8008418:	d122      	bne.n	8008460 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	3304      	adds	r3, #4
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd ffb0 	bl	8006384 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008424:	4b19      	ldr	r3, [pc, #100]	; (800848c <xTaskPriorityInherit+0xc4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008432:	4b18      	ldr	r3, [pc, #96]	; (8008494 <xTaskPriorityInherit+0xcc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <xTaskPriorityInherit+0x7a>
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	4a15      	ldr	r2, [pc, #84]	; (8008494 <xTaskPriorityInherit+0xcc>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4a10      	ldr	r2, [pc, #64]	; (8008490 <xTaskPriorityInherit+0xc8>)
 8008450:	441a      	add	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fd ff36 	bl	80062ca <vListInsertEnd>
 800845e:	e004      	b.n	800846a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <xTaskPriorityInherit+0xc4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800846a:	2301      	movs	r3, #1
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	e008      	b.n	8008482 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <xTaskPriorityInherit+0xc4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	429a      	cmp	r2, r3
 800847c:	d201      	bcs.n	8008482 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008482:	68fb      	ldr	r3, [r7, #12]
	}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20005860 	.word	0x20005860
 8008490:	20005864 	.word	0x20005864
 8008494:	20005d3c 	.word	0x20005d3c

08008498 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d05a      	beq.n	8008564 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ae:	4b30      	ldr	r3, [pc, #192]	; (8008570 <xTaskPriorityDisinherit+0xd8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d00c      	beq.n	80084d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10c      	bne.n	80084f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	b672      	cpsid	i
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	b662      	cpsie	i
 80084ee:	60bb      	str	r3, [r7, #8]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f8:	1e5a      	subs	r2, r3, #1
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008506:	429a      	cmp	r2, r3
 8008508:	d02c      	beq.n	8008564 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850e:	2b00      	cmp	r3, #0
 8008510:	d128      	bne.n	8008564 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3304      	adds	r3, #4
 8008516:	4618      	mov	r0, r3
 8008518:	f7fd ff34 	bl	8006384 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <xTaskPriorityDisinherit+0xdc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d903      	bls.n	8008544 <xTaskPriorityDisinherit+0xac>
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <xTaskPriorityDisinherit+0xdc>)
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	4613      	mov	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4a09      	ldr	r2, [pc, #36]	; (8008578 <xTaskPriorityDisinherit+0xe0>)
 8008552:	441a      	add	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3304      	adds	r3, #4
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fd feb5 	bl	80062ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008564:	697b      	ldr	r3, [r7, #20]
	}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20005860 	.word	0x20005860
 8008574:	20005d3c 	.word	0x20005d3c
 8008578:	20005864 	.word	0x20005864

0800857c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800858a:	2301      	movs	r3, #1
 800858c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d06e      	beq.n	8008672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10c      	bne.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	b672      	cpsid	i
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	b662      	cpsie	i
 80085b0:	60fb      	str	r3, [r7, #12]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d902      	bls.n	80085c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	e002      	b.n	80085cc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d04d      	beq.n	8008672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d148      	bne.n	8008672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085e0:	4b26      	ldr	r3, [pc, #152]	; (800867c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d10c      	bne.n	8008604 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	60bb      	str	r3, [r7, #8]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	db04      	blt.n	8008622 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	6959      	ldr	r1, [r3, #20]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4a13      	ldr	r2, [pc, #76]	; (8008680 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008632:	4413      	add	r3, r2
 8008634:	4299      	cmp	r1, r3
 8008636:	d11c      	bne.n	8008672 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fea1 	bl	8006384 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008646:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d903      	bls.n	8008656 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a0c      	ldr	r2, [pc, #48]	; (8008684 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4a07      	ldr	r2, [pc, #28]	; (8008680 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008664:	441a      	add	r2, r3
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	3304      	adds	r3, #4
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f7fd fe2c 	bl	80062ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008672:	bf00      	nop
 8008674:	3720      	adds	r7, #32
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20005860 	.word	0x20005860
 8008680:	20005864 	.word	0x20005864
 8008684:	20005d3c 	.word	0x20005d3c

08008688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800868c:	4b07      	ldr	r3, [pc, #28]	; (80086ac <pvTaskIncrementMutexHeldCount+0x24>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <pvTaskIncrementMutexHeldCount+0x24>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800869a:	3201      	adds	r2, #1
 800869c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800869e:	4b03      	ldr	r3, [pc, #12]	; (80086ac <pvTaskIncrementMutexHeldCount+0x24>)
 80086a0:	681b      	ldr	r3, [r3, #0]
	}
 80086a2:	4618      	mov	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	20005860 	.word	0x20005860

080086b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086ba:	4b21      	ldr	r3, [pc, #132]	; (8008740 <prvAddCurrentTaskToDelayedList+0x90>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086c0:	4b20      	ldr	r3, [pc, #128]	; (8008744 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fd fe5c 	bl	8006384 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d2:	d10a      	bne.n	80086ea <prvAddCurrentTaskToDelayedList+0x3a>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086da:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <prvAddCurrentTaskToDelayedList+0x94>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4819      	ldr	r0, [pc, #100]	; (8008748 <prvAddCurrentTaskToDelayedList+0x98>)
 80086e4:	f7fd fdf1 	bl	80062ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086e8:	e026      	b.n	8008738 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4413      	add	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <prvAddCurrentTaskToDelayedList+0x94>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d209      	bcs.n	8008716 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008702:	4b12      	ldr	r3, [pc, #72]	; (800874c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <prvAddCurrentTaskToDelayedList+0x94>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3304      	adds	r3, #4
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	f7fd fdff 	bl	8006312 <vListInsert>
}
 8008714:	e010      	b.n	8008738 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008716:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <prvAddCurrentTaskToDelayedList+0x94>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fd fdf5 	bl	8006312 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <prvAddCurrentTaskToDelayedList+0xa4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	d202      	bcs.n	8008738 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008732:	4a08      	ldr	r2, [pc, #32]	; (8008754 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6013      	str	r3, [r2, #0]
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20005d38 	.word	0x20005d38
 8008744:	20005860 	.word	0x20005860
 8008748:	20005d20 	.word	0x20005d20
 800874c:	20005cf0 	.word	0x20005cf0
 8008750:	20005cec 	.word	0x20005cec
 8008754:	20005d54 	.word	0x20005d54

08008758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008762:	f000 fb15 	bl	8008d90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008766:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <xTimerCreateTimerTask+0x84>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d021      	beq.n	80087b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008776:	1d3a      	adds	r2, r7, #4
 8008778:	f107 0108 	add.w	r1, r7, #8
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4618      	mov	r0, r3
 8008782:	f7fd fd5b 	bl	800623c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	9202      	str	r2, [sp, #8]
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	2302      	movs	r3, #2
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	2300      	movs	r3, #0
 8008796:	460a      	mov	r2, r1
 8008798:	4911      	ldr	r1, [pc, #68]	; (80087e0 <xTimerCreateTimerTask+0x88>)
 800879a:	4812      	ldr	r0, [pc, #72]	; (80087e4 <xTimerCreateTimerTask+0x8c>)
 800879c:	f7fe ff6c 	bl	8007678 <xTaskCreateStatic>
 80087a0:	4603      	mov	r3, r0
 80087a2:	4a11      	ldr	r2, [pc, #68]	; (80087e8 <xTimerCreateTimerTask+0x90>)
 80087a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087a6:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <xTimerCreateTimerTask+0x90>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087ae:	2301      	movs	r3, #1
 80087b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	b672      	cpsid	i
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	b662      	cpsie	i
 80087cc:	613b      	str	r3, [r7, #16]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80087d2:	697b      	ldr	r3, [r7, #20]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20005d90 	.word	0x20005d90
 80087e0:	08019ac0 	.word	0x08019ac0
 80087e4:	08008929 	.word	0x08008929
 80087e8:	20005d94 	.word	0x20005d94

080087ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10c      	bne.n	800881e <xTimerGenericCommand+0x32>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	b672      	cpsid	i
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	b662      	cpsie	i
 8008818:	623b      	str	r3, [r7, #32]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800881e:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <xTimerGenericCommand+0x9c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d02a      	beq.n	800887c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b05      	cmp	r3, #5
 8008836:	dc18      	bgt.n	800886a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008838:	f7ff fda8 	bl	800838c <xTaskGetSchedulerState>
 800883c:	4603      	mov	r3, r0
 800883e:	2b02      	cmp	r3, #2
 8008840:	d109      	bne.n	8008856 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008842:	4b11      	ldr	r3, [pc, #68]	; (8008888 <xTimerGenericCommand+0x9c>)
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f107 0110 	add.w	r1, r7, #16
 800884a:	2300      	movs	r3, #0
 800884c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800884e:	f7fe f841 	bl	80068d4 <xQueueGenericSend>
 8008852:	6278      	str	r0, [r7, #36]	; 0x24
 8008854:	e012      	b.n	800887c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008856:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <xTimerGenericCommand+0x9c>)
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	f107 0110 	add.w	r1, r7, #16
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	f7fe f837 	bl	80068d4 <xQueueGenericSend>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24
 8008868:	e008      	b.n	800887c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <xTimerGenericCommand+0x9c>)
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	f107 0110 	add.w	r1, r7, #16
 8008872:	2300      	movs	r3, #0
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	f7fe f933 	bl	8006ae0 <xQueueGenericSendFromISR>
 800887a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20005d90 	.word	0x20005d90

0800888c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af02      	add	r7, sp, #8
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008896:	4b23      	ldr	r3, [pc, #140]	; (8008924 <prvProcessExpiredTimer+0x98>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fd fd6d 	bl	8006384 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d024      	beq.n	8008902 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	699a      	ldr	r2, [r3, #24]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	18d1      	adds	r1, r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	6978      	ldr	r0, [r7, #20]
 80088c6:	f000 f8d3 	bl	8008a70 <prvInsertTimerInActiveList>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d021      	beq.n	8008914 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088d0:	2300      	movs	r3, #0
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	2300      	movs	r3, #0
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	2100      	movs	r1, #0
 80088da:	6978      	ldr	r0, [r7, #20]
 80088dc:	f7ff ff86 	bl	80087ec <xTimerGenericCommand>
 80088e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d115      	bne.n	8008914 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	b672      	cpsid	i
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	b662      	cpsie	i
 80088fc:	60fb      	str	r3, [r7, #12]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	4798      	blx	r3
}
 800891c:	bf00      	nop
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20005d88 	.word	0x20005d88

08008928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008930:	f107 0308 	add.w	r3, r7, #8
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f857 	bl	80089e8 <prvGetNextExpireTime>
 800893a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4619      	mov	r1, r3
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f803 	bl	800894c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008946:	f000 f8d5 	bl	8008af4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800894a:	e7f1      	b.n	8008930 <prvTimerTask+0x8>

0800894c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008956:	f7ff f8f9 	bl	8007b4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f866 	bl	8008a30 <prvSampleTimeNow>
 8008964:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d130      	bne.n	80089ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <prvProcessTimerOrBlockTask+0x3c>
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	429a      	cmp	r2, r3
 8008978:	d806      	bhi.n	8008988 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800897a:	f7ff f8f5 	bl	8007b68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff ff83 	bl	800888c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008986:	e024      	b.n	80089d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d008      	beq.n	80089a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <prvProcessTimerOrBlockTask+0x90>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <prvProcessTimerOrBlockTask+0x50>
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <prvProcessTimerOrBlockTask+0x52>
 800899c:	2300      	movs	r3, #0
 800899e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089a0:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <prvProcessTimerOrBlockTask+0x94>)
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4619      	mov	r1, r3
 80089ae:	f7fe fe2f 	bl	8007610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089b2:	f7ff f8d9 	bl	8007b68 <xTaskResumeAll>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <prvProcessTimerOrBlockTask+0x98>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	f3bf 8f6f 	isb	sy
}
 80089cc:	e001      	b.n	80089d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089ce:	f7ff f8cb 	bl	8007b68 <xTaskResumeAll>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20005d8c 	.word	0x20005d8c
 80089e0:	20005d90 	.word	0x20005d90
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089f0:	4b0e      	ldr	r3, [pc, #56]	; (8008a2c <prvGetNextExpireTime+0x44>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <prvGetNextExpireTime+0x16>
 80089fa:	2201      	movs	r2, #1
 80089fc:	e000      	b.n	8008a00 <prvGetNextExpireTime+0x18>
 80089fe:	2200      	movs	r2, #0
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d105      	bne.n	8008a18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a0c:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <prvGetNextExpireTime+0x44>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e001      	b.n	8008a1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20005d88 	.word	0x20005d88

08008a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a38:	f7ff f936 	bl	8007ca8 <xTaskGetTickCount>
 8008a3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <prvSampleTimeNow+0x3c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d205      	bcs.n	8008a54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a48:	f000 f93c 	bl	8008cc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	e002      	b.n	8008a5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a5a:	4a04      	ldr	r2, [pc, #16]	; (8008a6c <prvSampleTimeNow+0x3c>)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20005d98 	.word	0x20005d98

08008a70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d812      	bhi.n	8008abc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	1ad2      	subs	r2, r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d302      	bcc.n	8008aaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e01b      	b.n	8008ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008aaa:	4b10      	ldr	r3, [pc, #64]	; (8008aec <prvInsertTimerInActiveList+0x7c>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fd fc2c 	bl	8006312 <vListInsert>
 8008aba:	e012      	b.n	8008ae2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d206      	bcs.n	8008ad2 <prvInsertTimerInActiveList+0x62>
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d302      	bcc.n	8008ad2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008acc:	2301      	movs	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e007      	b.n	8008ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <prvInsertTimerInActiveList+0x80>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f7fd fc18 	bl	8006312 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ae2:	697b      	ldr	r3, [r7, #20]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20005d8c 	.word	0x20005d8c
 8008af0:	20005d88 	.word	0x20005d88

08008af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08e      	sub	sp, #56	; 0x38
 8008af8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008afa:	e0d0      	b.n	8008c9e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	da1a      	bge.n	8008b38 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b02:	1d3b      	adds	r3, r7, #4
 8008b04:	3304      	adds	r3, #4
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10c      	bne.n	8008b28 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	b672      	cpsid	i
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	b662      	cpsie	i
 8008b22:	61fb      	str	r3, [r7, #28]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b2e:	6850      	ldr	r0, [r2, #4]
 8008b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b32:	6892      	ldr	r2, [r2, #8]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f2c0 80ae 	blt.w	8008c9c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fd fc17 	bl	8006384 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b56:	463b      	mov	r3, r7
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff ff69 	bl	8008a30 <prvSampleTimeNow>
 8008b5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	f200 809b 	bhi.w	8008c9e <prvProcessReceivedCommands+0x1aa>
 8008b68:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <prvProcessReceivedCommands+0x7c>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b99 	.word	0x08008b99
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008b99 	.word	0x08008b99
 8008b7c:	08008c11 	.word	0x08008c11
 8008b80:	08008c25 	.word	0x08008c25
 8008b84:	08008c73 	.word	0x08008c73
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008b99 	.word	0x08008b99
 8008b90:	08008c11 	.word	0x08008c11
 8008b94:	08008c25 	.word	0x08008c25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	18d1      	adds	r1, r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb8:	f7ff ff5a 	bl	8008a70 <prvInsertTimerInActiveList>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d06d      	beq.n	8008c9e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d062      	beq.n	8008c9e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	441a      	add	r2, r3
 8008be0:	2300      	movs	r3, #0
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bea:	f7ff fdff 	bl	80087ec <xTimerGenericCommand>
 8008bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d153      	bne.n	8008c9e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	b672      	cpsid	i
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	b662      	cpsie	i
 8008c0a:	61bb      	str	r3, [r7, #24]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c22:	e03c      	b.n	8008c9e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c2a:	f043 0301 	orr.w	r3, r3, #1
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10c      	bne.n	8008c5e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
 8008c58:	617b      	str	r3, [r7, #20]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	18d1      	adds	r1, r2, r3
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6c:	f7ff ff00 	bl	8008a70 <prvInsertTimerInActiveList>
					break;
 8008c70:	e015      	b.n	8008c9e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d103      	bne.n	8008c88 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c82:	f000 fbc9 	bl	8009418 <vPortFree>
 8008c86:	e00a      	b.n	8008c9e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c9a:	e000      	b.n	8008c9e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c9e:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <prvProcessReceivedCommands+0x1cc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	1d39      	adds	r1, r7, #4
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe f850 	bl	8006d4c <xQueueReceive>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f47f af24 	bne.w	8008afc <prvProcessReceivedCommands+0x8>
	}
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	3730      	adds	r7, #48	; 0x30
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20005d90 	.word	0x20005d90

08008cc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cca:	e04a      	b.n	8008d62 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ccc:	4b2e      	ldr	r3, [pc, #184]	; (8008d88 <prvSwitchTimerLists+0xc4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd6:	4b2c      	ldr	r3, [pc, #176]	; (8008d88 <prvSwitchTimerLists+0xc4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fd fb4d 	bl	8006384 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d030      	beq.n	8008d62 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	4413      	add	r3, r2
 8008d08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d90e      	bls.n	8008d30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <prvSwitchTimerLists+0xc4>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fd faf2 	bl	8006312 <vListInsert>
 8008d2e:	e018      	b.n	8008d62 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d30:	2300      	movs	r3, #0
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff fd56 	bl	80087ec <xTimerGenericCommand>
 8008d40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10c      	bne.n	8008d62 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	b672      	cpsid	i
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	b662      	cpsie	i
 8008d5c:	603b      	str	r3, [r7, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <prvSwitchTimerLists+0xc4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1af      	bne.n	8008ccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <prvSwitchTimerLists+0xc4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <prvSwitchTimerLists+0xc8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a04      	ldr	r2, [pc, #16]	; (8008d88 <prvSwitchTimerLists+0xc4>)
 8008d78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d7a:	4a04      	ldr	r2, [pc, #16]	; (8008d8c <prvSwitchTimerLists+0xc8>)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6013      	str	r3, [r2, #0]
}
 8008d80:	bf00      	nop
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20005d88 	.word	0x20005d88
 8008d8c:	20005d8c 	.word	0x20005d8c

08008d90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d96:	f000 f949 	bl	800902c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <prvCheckForValidListAndQueue+0x60>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d120      	bne.n	8008de4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008da2:	4814      	ldr	r0, [pc, #80]	; (8008df4 <prvCheckForValidListAndQueue+0x64>)
 8008da4:	f7fd fa64 	bl	8006270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008da8:	4813      	ldr	r0, [pc, #76]	; (8008df8 <prvCheckForValidListAndQueue+0x68>)
 8008daa:	f7fd fa61 	bl	8006270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <prvCheckForValidListAndQueue+0x6c>)
 8008db0:	4a10      	ldr	r2, [pc, #64]	; (8008df4 <prvCheckForValidListAndQueue+0x64>)
 8008db2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008db4:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <prvCheckForValidListAndQueue+0x70>)
 8008db6:	4a10      	ldr	r2, [pc, #64]	; (8008df8 <prvCheckForValidListAndQueue+0x68>)
 8008db8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <prvCheckForValidListAndQueue+0x74>)
 8008dc0:	4a11      	ldr	r2, [pc, #68]	; (8008e08 <prvCheckForValidListAndQueue+0x78>)
 8008dc2:	2110      	movs	r1, #16
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	f7fd fb71 	bl	80064ac <xQueueGenericCreateStatic>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	4a08      	ldr	r2, [pc, #32]	; (8008df0 <prvCheckForValidListAndQueue+0x60>)
 8008dce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <prvCheckForValidListAndQueue+0x60>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <prvCheckForValidListAndQueue+0x60>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	490b      	ldr	r1, [pc, #44]	; (8008e0c <prvCheckForValidListAndQueue+0x7c>)
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fbc2 	bl	8007568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008de4:	f000 f956 	bl	8009094 <vPortExitCritical>
}
 8008de8:	bf00      	nop
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20005d90 	.word	0x20005d90
 8008df4:	20005d60 	.word	0x20005d60
 8008df8:	20005d74 	.word	0x20005d74
 8008dfc:	20005d88 	.word	0x20005d88
 8008e00:	20005d8c 	.word	0x20005d8c
 8008e04:	20005e3c 	.word	0x20005e3c
 8008e08:	20005d9c 	.word	0x20005d9c
 8008e0c:	08019ac8 	.word	0x08019ac8

08008e10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3b04      	subs	r3, #4
 8008e20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f023 0201 	bic.w	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e40:	4a0c      	ldr	r2, [pc, #48]	; (8008e74 <pxPortInitialiseStack+0x64>)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3b14      	subs	r3, #20
 8008e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f06f 0202 	mvn.w	r2, #2
 8008e5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3b20      	subs	r3, #32
 8008e64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	08008e79 	.word	0x08008e79

08008e78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e82:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <prvTaskExitError+0x5c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8a:	d00c      	beq.n	8008ea6 <prvTaskExitError+0x2e>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	b672      	cpsid	i
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	b662      	cpsie	i
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <prvTaskExitError+0x2c>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	b672      	cpsid	i
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	b662      	cpsie	i
 8008eba:	60bb      	str	r3, [r7, #8]
}
 8008ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ebe:	bf00      	nop
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0fc      	beq.n	8008ec0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	bf00      	nop
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000020 	.word	0x20000020
	...

08008ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ee0:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <pxCurrentTCBConst2>)
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eea:	f380 8809 	msr	PSP, r0
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8811 	msr	BASEPRI, r0
 8008efa:	4770      	bx	lr
 8008efc:	f3af 8000 	nop.w

08008f00 <pxCurrentTCBConst2>:
 8008f00:	20005860 	.word	0x20005860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f08:	4808      	ldr	r0, [pc, #32]	; (8008f2c <prvPortStartFirstTask+0x24>)
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f380 8808 	msr	MSP, r0
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8814 	msr	CONTROL, r0
 8008f1a:	b662      	cpsie	i
 8008f1c:	b661      	cpsie	f
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	df00      	svc	0
 8008f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed08 	.word	0xe000ed08

08008f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f36:	4b37      	ldr	r3, [pc, #220]	; (8009014 <xPortStartScheduler+0xe4>)
 8008f38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	22ff      	movs	r2, #255	; 0xff
 8008f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	4b2f      	ldr	r3, [pc, #188]	; (8009018 <xPortStartScheduler+0xe8>)
 8008f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f5e:	4b2f      	ldr	r3, [pc, #188]	; (800901c <xPortStartScheduler+0xec>)
 8008f60:	2207      	movs	r2, #7
 8008f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f64:	e009      	b.n	8008f7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f66:	4b2d      	ldr	r3, [pc, #180]	; (800901c <xPortStartScheduler+0xec>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	4a2b      	ldr	r2, [pc, #172]	; (800901c <xPortStartScheduler+0xec>)
 8008f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f82:	2b80      	cmp	r3, #128	; 0x80
 8008f84:	d0ef      	beq.n	8008f66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f86:	4b25      	ldr	r3, [pc, #148]	; (800901c <xPortStartScheduler+0xec>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f1c3 0307 	rsb	r3, r3, #7
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d00c      	beq.n	8008fac <xPortStartScheduler+0x7c>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	60bb      	str	r3, [r7, #8]
}
 8008fa8:	bf00      	nop
 8008faa:	e7fe      	b.n	8008faa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fac:	4b1b      	ldr	r3, [pc, #108]	; (800901c <xPortStartScheduler+0xec>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	4a1a      	ldr	r2, [pc, #104]	; (800901c <xPortStartScheduler+0xec>)
 8008fb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <xPortStartScheduler+0xec>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fbe:	4a17      	ldr	r2, [pc, #92]	; (800901c <xPortStartScheduler+0xec>)
 8008fc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fca:	4b15      	ldr	r3, [pc, #84]	; (8009020 <xPortStartScheduler+0xf0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a14      	ldr	r2, [pc, #80]	; (8009020 <xPortStartScheduler+0xf0>)
 8008fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fd6:	4b12      	ldr	r3, [pc, #72]	; (8009020 <xPortStartScheduler+0xf0>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a11      	ldr	r2, [pc, #68]	; (8009020 <xPortStartScheduler+0xf0>)
 8008fdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fe0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fe2:	f000 f8dd 	bl	80091a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	; (8009024 <xPortStartScheduler+0xf4>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fec:	f000 f8fc 	bl	80091e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ff0:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <xPortStartScheduler+0xf8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a0c      	ldr	r2, [pc, #48]	; (8009028 <xPortStartScheduler+0xf8>)
 8008ff6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ffa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ffc:	f7ff ff84 	bl	8008f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009000:	f7fe ff30 	bl	8007e64 <vTaskSwitchContext>
	prvTaskExitError();
 8009004:	f7ff ff38 	bl	8008e78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	e000e400 	.word	0xe000e400
 8009018:	20005e8c 	.word	0x20005e8c
 800901c:	20005e90 	.word	0x20005e90
 8009020:	e000ed20 	.word	0xe000ed20
 8009024:	20000020 	.word	0x20000020
 8009028:	e000ef34 	.word	0xe000ef34

0800902c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	b672      	cpsid	i
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	b662      	cpsie	i
 8009046:	607b      	str	r3, [r7, #4]
}
 8009048:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800904a:	4b10      	ldr	r3, [pc, #64]	; (800908c <vPortEnterCritical+0x60>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3301      	adds	r3, #1
 8009050:	4a0e      	ldr	r2, [pc, #56]	; (800908c <vPortEnterCritical+0x60>)
 8009052:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009054:	4b0d      	ldr	r3, [pc, #52]	; (800908c <vPortEnterCritical+0x60>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d111      	bne.n	8009080 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <vPortEnterCritical+0x64>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00c      	beq.n	8009080 <vPortEnterCritical+0x54>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	b672      	cpsid	i
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	b662      	cpsie	i
 800907a:	603b      	str	r3, [r7, #0]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <vPortEnterCritical+0x52>
	}
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	20000020 	.word	0x20000020
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <vPortExitCritical+0x54>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10c      	bne.n	80090bc <vPortExitCritical+0x28>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	607b      	str	r3, [r7, #4]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80090bc:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <vPortExitCritical+0x54>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	4a09      	ldr	r2, [pc, #36]	; (80090e8 <vPortExitCritical+0x54>)
 80090c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090c6:	4b08      	ldr	r3, [pc, #32]	; (80090e8 <vPortExitCritical+0x54>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <vPortExitCritical+0x46>
 80090ce:	2300      	movs	r3, #0
 80090d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	f383 8811 	msr	BASEPRI, r3
}
 80090d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000020 	.word	0x20000020
 80090ec:	00000000 	.word	0x00000000

080090f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090f0:	f3ef 8009 	mrs	r0, PSP
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4b15      	ldr	r3, [pc, #84]	; (8009150 <pxCurrentTCBConst>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f01e 0f10 	tst.w	lr, #16
 8009100:	bf08      	it	eq
 8009102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009114:	b672      	cpsid	i
 8009116:	f380 8811 	msr	BASEPRI, r0
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	b662      	cpsie	i
 8009124:	f7fe fe9e 	bl	8007e64 <vTaskSwitchContext>
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	f380 8811 	msr	BASEPRI, r0
 8009130:	bc09      	pop	{r0, r3}
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	f01e 0f10 	tst.w	lr, #16
 800913e:	bf08      	it	eq
 8009140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009144:	f380 8809 	msr	PSP, r0
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <pxCurrentTCBConst>:
 8009150:	20005860 	.word	0x20005860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	b672      	cpsid	i
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	b662      	cpsie	i
 8009172:	607b      	str	r3, [r7, #4]
}
 8009174:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009176:	f7fe fdb9 	bl	8007cec <xTaskIncrementTick>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <SysTick_Handler+0x44>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	2300      	movs	r3, #0
 800918a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f383 8811 	msr	BASEPRI, r3
}
 8009192:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <vPortSetupTimerInterrupt+0x34>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <vPortSetupTimerInterrupt+0x38>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <vPortSetupTimerInterrupt+0x3c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <vPortSetupTimerInterrupt+0x40>)
 80091b6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ba:	099b      	lsrs	r3, r3, #6
 80091bc:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <vPortSetupTimerInterrupt+0x44>)
 80091be:	3b01      	subs	r3, #1
 80091c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091c2:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <vPortSetupTimerInterrupt+0x34>)
 80091c4:	2207      	movs	r2, #7
 80091c6:	601a      	str	r2, [r3, #0]
}
 80091c8:	bf00      	nop
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	e000e010 	.word	0xe000e010
 80091d8:	e000e018 	.word	0xe000e018
 80091dc:	20000000 	.word	0x20000000
 80091e0:	10624dd3 	.word	0x10624dd3
 80091e4:	e000e014 	.word	0xe000e014

080091e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091f8 <vPortEnableVFP+0x10>
 80091ec:	6801      	ldr	r1, [r0, #0]
 80091ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091f2:	6001      	str	r1, [r0, #0]
 80091f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091f6:	bf00      	nop
 80091f8:	e000ed88 	.word	0xe000ed88

080091fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009202:	f3ef 8305 	mrs	r3, IPSR
 8009206:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b0f      	cmp	r3, #15
 800920c:	d916      	bls.n	800923c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800920e:	4a19      	ldr	r2, [pc, #100]	; (8009274 <vPortValidateInterruptPriority+0x78>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009218:	4b17      	ldr	r3, [pc, #92]	; (8009278 <vPortValidateInterruptPriority+0x7c>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	7afa      	ldrb	r2, [r7, #11]
 800921e:	429a      	cmp	r2, r3
 8009220:	d20c      	bcs.n	800923c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	b672      	cpsid	i
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	b662      	cpsie	i
 8009236:	607b      	str	r3, [r7, #4]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800923c:	4b0f      	ldr	r3, [pc, #60]	; (800927c <vPortValidateInterruptPriority+0x80>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <vPortValidateInterruptPriority+0x84>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d90c      	bls.n	8009266 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	b672      	cpsid	i
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	b662      	cpsie	i
 8009260:	603b      	str	r3, [r7, #0]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <vPortValidateInterruptPriority+0x68>
	}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	e000e3f0 	.word	0xe000e3f0
 8009278:	20005e8c 	.word	0x20005e8c
 800927c:	e000ed0c 	.word	0xe000ed0c
 8009280:	20005e90 	.word	0x20005e90

08009284 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	; 0x28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800928c:	2300      	movs	r3, #0
 800928e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009290:	f7fe fc5c 	bl	8007b4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009294:	4b5b      	ldr	r3, [pc, #364]	; (8009404 <pvPortMalloc+0x180>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800929c:	f000 f91a 	bl	80094d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a0:	4b59      	ldr	r3, [pc, #356]	; (8009408 <pvPortMalloc+0x184>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4013      	ands	r3, r2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f040 8092 	bne.w	80093d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01f      	beq.n	80092f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80092b4:	2208      	movs	r2, #8
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f003 0307 	and.w	r3, r3, #7
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d016      	beq.n	80092f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	3308      	adds	r3, #8
 80092ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f003 0307 	and.w	r3, r3, #7
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00c      	beq.n	80092f4 <pvPortMalloc+0x70>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092de:	b672      	cpsid	i
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	b662      	cpsie	i
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06b      	beq.n	80093d2 <pvPortMalloc+0x14e>
 80092fa:	4b44      	ldr	r3, [pc, #272]	; (800940c <pvPortMalloc+0x188>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d866      	bhi.n	80093d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009304:	4b42      	ldr	r3, [pc, #264]	; (8009410 <pvPortMalloc+0x18c>)
 8009306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009308:	4b41      	ldr	r3, [pc, #260]	; (8009410 <pvPortMalloc+0x18c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	e004      	b.n	800931a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <pvPortMalloc+0xa8>
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f1      	bne.n	8009310 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800932c:	4b35      	ldr	r3, [pc, #212]	; (8009404 <pvPortMalloc+0x180>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	429a      	cmp	r2, r3
 8009334:	d04d      	beq.n	80093d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	4413      	add	r3, r2
 800933e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2308      	movs	r3, #8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d921      	bls.n	800939c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00c      	beq.n	8009384 <pvPortMalloc+0x100>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	b672      	cpsid	i
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	b662      	cpsie	i
 800937e:	613b      	str	r3, [r7, #16]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	1ad2      	subs	r2, r2, r3
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009396:	69b8      	ldr	r0, [r7, #24]
 8009398:	f000 f8fe 	bl	8009598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800939c:	4b1b      	ldr	r3, [pc, #108]	; (800940c <pvPortMalloc+0x188>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	4a19      	ldr	r2, [pc, #100]	; (800940c <pvPortMalloc+0x188>)
 80093a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093aa:	4b18      	ldr	r3, [pc, #96]	; (800940c <pvPortMalloc+0x188>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b19      	ldr	r3, [pc, #100]	; (8009414 <pvPortMalloc+0x190>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d203      	bcs.n	80093be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093b6:	4b15      	ldr	r3, [pc, #84]	; (800940c <pvPortMalloc+0x188>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a16      	ldr	r2, [pc, #88]	; (8009414 <pvPortMalloc+0x190>)
 80093bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	4b11      	ldr	r3, [pc, #68]	; (8009408 <pvPortMalloc+0x184>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d2:	f7fe fbc9 	bl	8007b68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00c      	beq.n	80093fa <pvPortMalloc+0x176>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	60fb      	str	r3, [r7, #12]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <pvPortMalloc+0x174>
	return pvReturn;
 80093fa:	69fb      	ldr	r3, [r7, #28]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3728      	adds	r7, #40	; 0x28
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20009a9c 	.word	0x20009a9c
 8009408:	20009aa8 	.word	0x20009aa8
 800940c:	20009aa0 	.word	0x20009aa0
 8009410:	20009a94 	.word	0x20009a94
 8009414:	20009aa4 	.word	0x20009aa4

08009418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d04c      	beq.n	80094c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800942a:	2308      	movs	r3, #8
 800942c:	425b      	negs	r3, r3
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	4413      	add	r3, r2
 8009432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	4b23      	ldr	r3, [pc, #140]	; (80094cc <vPortFree+0xb4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4013      	ands	r3, r2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10c      	bne.n	8009460 <vPortFree+0x48>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	b672      	cpsid	i
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	b662      	cpsie	i
 800945a:	60fb      	str	r3, [r7, #12]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00c      	beq.n	8009482 <vPortFree+0x6a>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	b672      	cpsid	i
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	b662      	cpsie	i
 800947c:	60bb      	str	r3, [r7, #8]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b11      	ldr	r3, [pc, #68]	; (80094cc <vPortFree+0xb4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d019      	beq.n	80094c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d115      	bne.n	80094c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <vPortFree+0xb4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a8:	f7fe fb50 	bl	8007b4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <vPortFree+0xb8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a06      	ldr	r2, [pc, #24]	; (80094d0 <vPortFree+0xb8>)
 80094b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f86c 	bl	8009598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094c0:	f7fe fb52 	bl	8007b68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094c4:	bf00      	nop
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20009aa8 	.word	0x20009aa8
 80094d0:	20009aa0 	.word	0x20009aa0

080094d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094e0:	4b27      	ldr	r3, [pc, #156]	; (8009580 <prvHeapInit+0xac>)
 80094e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00c      	beq.n	8009508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3307      	adds	r3, #7
 80094f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0307 	bic.w	r3, r3, #7
 80094fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	4a1f      	ldr	r2, [pc, #124]	; (8009580 <prvHeapInit+0xac>)
 8009504:	4413      	add	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800950c:	4a1d      	ldr	r2, [pc, #116]	; (8009584 <prvHeapInit+0xb0>)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009512:	4b1c      	ldr	r3, [pc, #112]	; (8009584 <prvHeapInit+0xb0>)
 8009514:	2200      	movs	r2, #0
 8009516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	4413      	add	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009520:	2208      	movs	r2, #8
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	1a9b      	subs	r3, r3, r2
 8009526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0307 	bic.w	r3, r3, #7
 800952e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4a15      	ldr	r2, [pc, #84]	; (8009588 <prvHeapInit+0xb4>)
 8009534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <prvHeapInit+0xb4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <prvHeapInit+0xb4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	1ad2      	subs	r2, r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009554:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <prvHeapInit+0xb4>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4a0a      	ldr	r2, [pc, #40]	; (800958c <prvHeapInit+0xb8>)
 8009562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4a09      	ldr	r2, [pc, #36]	; (8009590 <prvHeapInit+0xbc>)
 800956a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800956c:	4b09      	ldr	r3, [pc, #36]	; (8009594 <prvHeapInit+0xc0>)
 800956e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	20005e94 	.word	0x20005e94
 8009584:	20009a94 	.word	0x20009a94
 8009588:	20009a9c 	.word	0x20009a9c
 800958c:	20009aa4 	.word	0x20009aa4
 8009590:	20009aa0 	.word	0x20009aa0
 8009594:	20009aa8 	.word	0x20009aa8

08009598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095a0:	4b28      	ldr	r3, [pc, #160]	; (8009644 <prvInsertBlockIntoFreeList+0xac>)
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e002      	b.n	80095ac <prvInsertBlockIntoFreeList+0x14>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d8f7      	bhi.n	80095a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	4413      	add	r3, r2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d108      	bne.n	80095da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	441a      	add	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d118      	bne.n	8009620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b15      	ldr	r3, [pc, #84]	; (8009648 <prvInsertBlockIntoFreeList+0xb0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d00d      	beq.n	8009616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	441a      	add	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e008      	b.n	8009628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009616:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <prvInsertBlockIntoFreeList+0xb0>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	e003      	b.n	8009628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	429a      	cmp	r2, r3
 800962e:	d002      	beq.n	8009636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009636:	bf00      	nop
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20009a94 	.word	0x20009a94
 8009648:	20009a9c 	.word	0x20009a9c

0800964c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	330c      	adds	r3, #12
 800965c:	461a      	mov	r2, r3
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f002 f8d5 	bl	800b810 <tcpip_send_msg_wait_sem>
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800966a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d103      	bne.n	800967a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009678:	e001      	b.n	800967e <netconn_apimsg+0x32>
  }
  return err;
 800967a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	; 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	603a      	str	r2, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
 8009694:	460b      	mov	r3, r1
 8009696:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 ff1b 	bl	800a4d8 <netconn_alloc>
 80096a2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d054      	beq.n	8009754 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80096aa:	79bb      	ldrb	r3, [r7, #6]
 80096ac:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80096b2:	f107 0308 	add.w	r3, r7, #8
 80096b6:	4619      	mov	r1, r3
 80096b8:	4829      	ldr	r0, [pc, #164]	; (8009760 <netconn_new_with_proto_and_callback+0xd8>)
 80096ba:	f7ff ffc7 	bl	800964c <netconn_apimsg>
 80096be:	4603      	mov	r3, r0
 80096c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80096c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d043      	beq.n	8009754 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <netconn_new_with_proto_and_callback+0x58>
 80096d4:	4b23      	ldr	r3, [pc, #140]	; (8009764 <netconn_new_with_proto_and_callback+0xdc>)
 80096d6:	22a3      	movs	r2, #163	; 0xa3
 80096d8:	4923      	ldr	r1, [pc, #140]	; (8009768 <netconn_new_with_proto_and_callback+0xe0>)
 80096da:	4824      	ldr	r0, [pc, #144]	; (800976c <netconn_new_with_proto_and_callback+0xe4>)
 80096dc:	f00d f970 	bl	80169c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	3310      	adds	r3, #16
 80096e4:	4618      	mov	r0, r3
 80096e6:	f00c fe4d 	bl	8016384 <sys_mbox_valid>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <netconn_new_with_proto_and_callback+0x74>
 80096f0:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <netconn_new_with_proto_and_callback+0xdc>)
 80096f2:	22a4      	movs	r2, #164	; 0xa4
 80096f4:	491e      	ldr	r1, [pc, #120]	; (8009770 <netconn_new_with_proto_and_callback+0xe8>)
 80096f6:	481d      	ldr	r0, [pc, #116]	; (800976c <netconn_new_with_proto_and_callback+0xe4>)
 80096f8:	f00d f962 	bl	80169c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	3314      	adds	r3, #20
 8009700:	4618      	mov	r0, r3
 8009702:	f00c fe3f 	bl	8016384 <sys_mbox_valid>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <netconn_new_with_proto_and_callback+0x90>
 800970c:	4b15      	ldr	r3, [pc, #84]	; (8009764 <netconn_new_with_proto_and_callback+0xdc>)
 800970e:	22a6      	movs	r2, #166	; 0xa6
 8009710:	4918      	ldr	r1, [pc, #96]	; (8009774 <netconn_new_with_proto_and_callback+0xec>)
 8009712:	4816      	ldr	r0, [pc, #88]	; (800976c <netconn_new_with_proto_and_callback+0xe4>)
 8009714:	f00d f954 	bl	80169c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	330c      	adds	r3, #12
 800971c:	4618      	mov	r0, r3
 800971e:	f00c febf 	bl	80164a0 <sys_sem_valid>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <netconn_new_with_proto_and_callback+0xac>
 8009728:	4b0e      	ldr	r3, [pc, #56]	; (8009764 <netconn_new_with_proto_and_callback+0xdc>)
 800972a:	22a9      	movs	r2, #169	; 0xa9
 800972c:	4912      	ldr	r1, [pc, #72]	; (8009778 <netconn_new_with_proto_and_callback+0xf0>)
 800972e:	480f      	ldr	r0, [pc, #60]	; (800976c <netconn_new_with_proto_and_callback+0xe4>)
 8009730:	f00d f946 	bl	80169c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	330c      	adds	r3, #12
 8009738:	4618      	mov	r0, r3
 800973a:	f00c fea4 	bl	8016486 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	3310      	adds	r3, #16
 8009742:	4618      	mov	r0, r3
 8009744:	f00c fdaa 	bl	801629c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009748:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800974a:	2006      	movs	r0, #6
 800974c:	f002 ff26 	bl	800c59c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	e000      	b.n	8009756 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009756:	4618      	mov	r0, r3
 8009758:	3730      	adds	r7, #48	; 0x30
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	0800a4ad 	.word	0x0800a4ad
 8009764:	08019ad0 	.word	0x08019ad0
 8009768:	08019b04 	.word	0x08019b04
 800976c:	08019b28 	.word	0x08019b28
 8009770:	08019b50 	.word	0x08019b50
 8009774:	08019b68 	.word	0x08019b68
 8009778:	08019b8c 	.word	0x08019b8c

0800977c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08c      	sub	sp, #48	; 0x30
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	e014      	b.n	80097b8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009792:	2329      	movs	r3, #41	; 0x29
 8009794:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009796:	f107 030c 	add.w	r3, r7, #12
 800979a:	4619      	mov	r1, r3
 800979c:	4808      	ldr	r0, [pc, #32]	; (80097c0 <netconn_prepare_delete+0x44>)
 800979e:	f7ff ff55 	bl	800964c <netconn_apimsg>
 80097a2:	4603      	mov	r3, r0
 80097a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80097a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <netconn_prepare_delete+0x3a>
    return err;
 80097b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097b4:	e000      	b.n	80097b8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3730      	adds	r7, #48	; 0x30
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	0800aa11 	.word	0x0800aa11

080097c4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <netconn_delete+0x12>
    return ERR_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e00d      	b.n	80097f2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff ffd0 	bl	800977c <netconn_prepare_delete>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80097e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <netconn_delete+0x2a>
    netconn_free(conn);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fedf 	bl	800a5ac <netconn_free>
  }
  return err;
 80097ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08e      	sub	sp, #56	; 0x38
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d109      	bne.n	8009824 <netconn_bind+0x28>
 8009810:	4b11      	ldr	r3, [pc, #68]	; (8009858 <netconn_bind+0x5c>)
 8009812:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009816:	4911      	ldr	r1, [pc, #68]	; (800985c <netconn_bind+0x60>)
 8009818:	4811      	ldr	r0, [pc, #68]	; (8009860 <netconn_bind+0x64>)
 800981a:	f00d f8d1 	bl	80169c0 <iprintf>
 800981e:	f06f 030f 	mvn.w	r3, #15
 8009822:	e015      	b.n	8009850 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800982a:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <netconn_bind+0x68>)
 800982c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800983a:	f107 0314 	add.w	r3, r7, #20
 800983e:	4619      	mov	r1, r3
 8009840:	4809      	ldr	r0, [pc, #36]	; (8009868 <netconn_bind+0x6c>)
 8009842:	f7ff ff03 	bl	800964c <netconn_apimsg>
 8009846:	4603      	mov	r3, r0
 8009848:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800984c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009850:	4618      	mov	r0, r3
 8009852:	3738      	adds	r7, #56	; 0x38
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	08019ad0 	.word	0x08019ad0
 800985c:	08019c08 	.word	0x08019c08
 8009860:	08019b28 	.word	0x08019b28
 8009864:	0801cd84 	.word	0x0801cd84
 8009868:	0800abbd 	.word	0x0800abbd

0800986c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08e      	sub	sp, #56	; 0x38
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	4613      	mov	r3, r2
 8009878:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <netconn_connect+0x28>
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <netconn_connect+0x5c>)
 8009882:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009886:	4911      	ldr	r1, [pc, #68]	; (80098cc <netconn_connect+0x60>)
 8009888:	4811      	ldr	r0, [pc, #68]	; (80098d0 <netconn_connect+0x64>)
 800988a:	f00d f899 	bl	80169c0 <iprintf>
 800988e:	f06f 030f 	mvn.w	r3, #15
 8009892:	e015      	b.n	80098c0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800989a:	4b0e      	ldr	r3, [pc, #56]	; (80098d4 <netconn_connect+0x68>)
 800989c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80098aa:	f107 0314 	add.w	r3, r7, #20
 80098ae:	4619      	mov	r1, r3
 80098b0:	4809      	ldr	r0, [pc, #36]	; (80098d8 <netconn_connect+0x6c>)
 80098b2:	f7ff fecb 	bl	800964c <netconn_apimsg>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80098bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3738      	adds	r7, #56	; 0x38
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	08019ad0 	.word	0x08019ad0
 80098cc:	08019c44 	.word	0x08019c44
 80098d0:	08019b28 	.word	0x08019b28
 80098d4:	0801cd84 	.word	0x0801cd84
 80098d8:	0800ad35 	.word	0x0800ad35

080098dc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d109      	bne.n	8009908 <netconn_recv_data+0x2c>
 80098f4:	4b4d      	ldr	r3, [pc, #308]	; (8009a2c <netconn_recv_data+0x150>)
 80098f6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80098fa:	494d      	ldr	r1, [pc, #308]	; (8009a30 <netconn_recv_data+0x154>)
 80098fc:	484d      	ldr	r0, [pc, #308]	; (8009a34 <netconn_recv_data+0x158>)
 80098fe:	f00d f85f 	bl	80169c0 <iprintf>
 8009902:	f06f 030f 	mvn.w	r3, #15
 8009906:	e08d      	b.n	8009a24 <netconn_recv_data+0x148>
  *new_buf = NULL;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d109      	bne.n	8009928 <netconn_recv_data+0x4c>
 8009914:	4b45      	ldr	r3, [pc, #276]	; (8009a2c <netconn_recv_data+0x150>)
 8009916:	f240 224a 	movw	r2, #586	; 0x24a
 800991a:	4947      	ldr	r1, [pc, #284]	; (8009a38 <netconn_recv_data+0x15c>)
 800991c:	4845      	ldr	r0, [pc, #276]	; (8009a34 <netconn_recv_data+0x158>)
 800991e:	f00d f84f 	bl	80169c0 <iprintf>
 8009922:	f06f 030f 	mvn.w	r3, #15
 8009926:	e07d      	b.n	8009a24 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3310      	adds	r3, #16
 800992c:	4618      	mov	r0, r3
 800992e:	f00c fd29 	bl	8016384 <sys_mbox_valid>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10e      	bne.n	8009956 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 faae 	bl	8009e9a <netconn_err>
 800993e:	4603      	mov	r3, r0
 8009940:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8009942:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800994a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800994e:	e069      	b.n	8009a24 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 8009950:	f06f 030a 	mvn.w	r3, #10
 8009954:	e066      	b.n	8009a24 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	7f1b      	ldrb	r3, [r3, #28]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10f      	bne.n	8009982 <netconn_recv_data+0xa6>
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	7f1b      	ldrb	r3, [r3, #28]
 8009970:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d023      	beq.n	80099ca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3310      	adds	r3, #16
 8009986:	f107 0214 	add.w	r2, r7, #20
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f00c fce2 	bl	8016356 <sys_arch_mbox_tryfetch>
 8009992:	4603      	mov	r3, r0
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009998:	d11f      	bne.n	80099da <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fa7d 	bl	8009e9a <netconn_err>
 80099a0:	4603      	mov	r3, r0
 80099a2:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 80099a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80099ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099b0:	e038      	b.n	8009a24 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	7f1b      	ldrb	r3, [r3, #28]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80099be:	f06f 030a 	mvn.w	r3, #10
 80099c2:	e02f      	b.n	8009a24 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 80099c4:	f06f 0306 	mvn.w	r3, #6
 80099c8:	e02c      	b.n	8009a24 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3310      	adds	r3, #16
 80099ce:	f107 0114 	add.w	r1, r7, #20
 80099d2:	2200      	movs	r2, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f00c fc8d 	bl	80162f4 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f107 0213 	add.w	r2, r7, #19
 80099e0:	4611      	mov	r1, r2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 faaa 	bl	8009f3c <lwip_netconn_is_err_msg>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80099ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099f2:	f113 0f0f 	cmn.w	r3, #15
 80099f6:	d101      	bne.n	80099fc <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e013      	b.n	8009a24 <netconn_recv_data+0x148>
      }
      return err;
 80099fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a00:	e010      	b.n	8009a24 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	891b      	ldrh	r3, [r3, #8]
 8009a06:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <netconn_recv_data+0x140>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	8bba      	ldrh	r2, [r7, #28]
 8009a16:	2101      	movs	r1, #1
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	08019ad0 	.word	0x08019ad0
 8009a30:	08019ce8 	.word	0x08019ce8
 8009a34:	08019b28 	.word	0x08019b28
 8009a38:	08019d08 	.word	0x08019d08

08009a3c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <netconn_tcp_recvd_msg+0x1e>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a56:	2b10      	cmp	r3, #16
 8009a58:	d009      	beq.n	8009a6e <netconn_tcp_recvd_msg+0x32>
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <netconn_tcp_recvd_msg+0x50>)
 8009a5c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009a60:	490b      	ldr	r1, [pc, #44]	; (8009a90 <netconn_tcp_recvd_msg+0x54>)
 8009a62:	480c      	ldr	r0, [pc, #48]	; (8009a94 <netconn_tcp_recvd_msg+0x58>)
 8009a64:	f00c ffac 	bl	80169c0 <iprintf>
 8009a68:	f06f 030f 	mvn.w	r3, #15
 8009a6c:	e00a      	b.n	8009a84 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4806      	ldr	r0, [pc, #24]	; (8009a98 <netconn_tcp_recvd_msg+0x5c>)
 8009a7e:	f7ff fde5 	bl	800964c <netconn_apimsg>
 8009a82:	4603      	mov	r3, r0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	08019ad0 	.word	0x08019ad0
 8009a90:	08019d24 	.word	0x08019d24
 8009a94:	08019b28 	.word	0x08019b28
 8009a98:	0800ae91 	.word	0x0800ae91

08009a9c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b090      	sub	sp, #64	; 0x40
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3310      	adds	r3, #16
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f00c fc68 	bl	8016384 <sys_mbox_valid>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d102      	bne.n	8009ac0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009aba:	f06f 030a 	mvn.w	r3, #10
 8009abe:	e06d      	b.n	8009b9c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	7f1b      	ldrb	r3, [r3, #28]
 8009ac4:	b25b      	sxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da07      	bge.n	8009ada <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	7f1b      	ldrb	r3, [r3, #28]
 8009ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009ad8:	e039      	b.n	8009b4e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	461a      	mov	r2, r3
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f7ff fefb 	bl	80098dc <netconn_recv_data>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009aec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009af4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009af8:	e050      	b.n	8009b9c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10e      	bne.n	8009b28 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <netconn_recv_data_tcp+0x7a>
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	891b      	ldrh	r3, [r3, #8]
 8009b14:	e000      	b.n	8009b18 <netconn_recv_data_tcp+0x7c>
 8009b16:	2301      	movs	r3, #1
 8009b18:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009b1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b1c:	f107 0214 	add.w	r2, r7, #20
 8009b20:	4619      	mov	r1, r3
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff ff8a 	bl	8009a3c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d134      	bne.n	8009b98 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d009      	beq.n	8009b4c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	7f1b      	ldrb	r3, [r3, #28]
 8009b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009b46:	f06f 0306 	mvn.w	r3, #6
 8009b4a:	e027      	b.n	8009b9c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009b4c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <netconn_recv_data_tcp+0xc6>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10f      	bne.n	8009b8a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 f995 	bl	8009e9a <netconn_err>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <netconn_recv_data_tcp+0xe8>
          return err;
 8009b7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b82:	e00b      	b.n	8009b9c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009b84:	f06f 030d 	mvn.w	r3, #13
 8009b88:	e008      	b.n	8009b9c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f947 	bl	8009e20 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009b92:	f06f 030e 	mvn.w	r3, #14
 8009b96:	e001      	b.n	8009b9c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009b98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3740      	adds	r7, #64	; 0x40
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <netconn_recv+0x28>
 8009bb8:	4b2b      	ldr	r3, [pc, #172]	; (8009c68 <netconn_recv+0xc4>)
 8009bba:	f240 3263 	movw	r2, #867	; 0x363
 8009bbe:	492b      	ldr	r1, [pc, #172]	; (8009c6c <netconn_recv+0xc8>)
 8009bc0:	482b      	ldr	r0, [pc, #172]	; (8009c70 <netconn_recv+0xcc>)
 8009bc2:	f00c fefd 	bl	80169c0 <iprintf>
 8009bc6:	f06f 030f 	mvn.w	r3, #15
 8009bca:	e049      	b.n	8009c60 <netconn_recv+0xbc>
  *new_buf = NULL;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <netconn_recv+0x48>
 8009bd8:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <netconn_recv+0xc4>)
 8009bda:	f240 3265 	movw	r2, #869	; 0x365
 8009bde:	4925      	ldr	r1, [pc, #148]	; (8009c74 <netconn_recv+0xd0>)
 8009be0:	4823      	ldr	r0, [pc, #140]	; (8009c70 <netconn_recv+0xcc>)
 8009be2:	f00c feed 	bl	80169c0 <iprintf>
 8009be6:	f06f 030f 	mvn.w	r3, #15
 8009bea:	e039      	b.n	8009c60 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009bf0:	2005      	movs	r0, #5
 8009bf2:	f002 fc5d 	bl	800c4b0 <memp_malloc>
 8009bf6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d102      	bne.n	8009c04 <netconn_recv+0x60>
      return ERR_MEM;
 8009bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c02:	e02d      	b.n	8009c60 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	2200      	movs	r2, #0
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff ff45 	bl	8009a9c <netconn_recv_data_tcp>
 8009c12:	4603      	mov	r3, r0
 8009c14:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009c16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d006      	beq.n	8009c2c <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	2005      	movs	r0, #5
 8009c22:	f002 fcbb 	bl	800c59c <memp_free>
      return err;
 8009c26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c2a:	e019      	b.n	8009c60 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d106      	bne.n	8009c40 <netconn_recv+0x9c>
 8009c32:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <netconn_recv+0xc4>)
 8009c34:	f240 3279 	movw	r2, #889	; 0x379
 8009c38:	490f      	ldr	r1, [pc, #60]	; (8009c78 <netconn_recv+0xd4>)
 8009c3a:	480d      	ldr	r0, [pc, #52]	; (8009c70 <netconn_recv+0xcc>)
 8009c3c:	f00c fec0 	bl	80169c0 <iprintf>

    buf->p = p;
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2200      	movs	r2, #0
 8009c56:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009c5e:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	08019ad0 	.word	0x08019ad0
 8009c6c:	08019ce8 	.word	0x08019ce8
 8009c70:	08019b28 	.word	0x08019b28
 8009c74:	08019d08 	.word	0x08019d08
 8009c78:	08019d74 	.word	0x08019d74

08009c7c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	f107 0110 	add.w	r1, r7, #16
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f805 	bl	8009cb0 <netconn_write_vectors_partly>
 8009ca6:	4603      	mov	r3, r0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b092      	sub	sp, #72	; 0x48
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4611      	mov	r1, r2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	80fb      	strh	r3, [r7, #6]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <netconn_write_vectors_partly+0x30>
 8009ccc:	4b4e      	ldr	r3, [pc, #312]	; (8009e08 <netconn_write_vectors_partly+0x158>)
 8009cce:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009cd2:	494e      	ldr	r1, [pc, #312]	; (8009e0c <netconn_write_vectors_partly+0x15c>)
 8009cd4:	484e      	ldr	r0, [pc, #312]	; (8009e10 <netconn_write_vectors_partly+0x160>)
 8009cd6:	f00c fe73 	bl	80169c0 <iprintf>
 8009cda:	f06f 030f 	mvn.w	r3, #15
 8009cde:	e08e      	b.n	8009dfe <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	d009      	beq.n	8009d00 <netconn_write_vectors_partly+0x50>
 8009cec:	4b46      	ldr	r3, [pc, #280]	; (8009e08 <netconn_write_vectors_partly+0x158>)
 8009cee:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009cf2:	4948      	ldr	r1, [pc, #288]	; (8009e14 <netconn_write_vectors_partly+0x164>)
 8009cf4:	4846      	ldr	r0, [pc, #280]	; (8009e10 <netconn_write_vectors_partly+0x160>)
 8009cf6:	f00c fe63 	bl	80169c0 <iprintf>
 8009cfa:	f06f 0305 	mvn.w	r3, #5
 8009cfe:	e07e      	b.n	8009dfe <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	7f1b      	ldrb	r3, [r3, #28]
 8009d04:	f003 0302 	and.w	r3, r3, #2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <netconn_write_vectors_partly+0x66>
 8009d0c:	797b      	ldrb	r3, [r7, #5]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <netconn_write_vectors_partly+0x6a>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e000      	b.n	8009d1c <netconn_write_vectors_partly+0x6c>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009d20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <netconn_write_vectors_partly+0x84>
 8009d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009d2e:	f06f 0305 	mvn.w	r3, #5
 8009d32:	e064      	b.n	8009dfe <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009d38:	2300      	movs	r3, #0
 8009d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d3c:	e015      	b.n	8009d6a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	4413      	add	r3, r2
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d4a:	4413      	add	r3, r2
 8009d4c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	4413      	add	r3, r2
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d202      	bcs.n	8009d64 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009d5e:	f06f 0305 	mvn.w	r3, #5
 8009d62:	e04c      	b.n	8009dfe <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d66:	3301      	adds	r3, #1
 8009d68:	643b      	str	r3, [r7, #64]	; 0x40
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	dbe5      	blt.n	8009d3e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	e040      	b.n	8009dfe <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da0a      	bge.n	8009d98 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009d88:	f06f 0305 	mvn.w	r3, #5
 8009d8c:	e037      	b.n	8009dfe <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009d8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d92:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009da8:	797b      	ldrb	r3, [r7, #5]
 8009daa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009db6:	f107 0314 	add.w	r3, r7, #20
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4816      	ldr	r0, [pc, #88]	; (8009e18 <netconn_write_vectors_partly+0x168>)
 8009dbe:	f7ff fc45 	bl	800964c <netconn_apimsg>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009dc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d114      	bne.n	8009dfa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dda:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d006      	beq.n	8009dfa <netconn_write_vectors_partly+0x14a>
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <netconn_write_vectors_partly+0x158>)
 8009dee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009df2:	490a      	ldr	r1, [pc, #40]	; (8009e1c <netconn_write_vectors_partly+0x16c>)
 8009df4:	4806      	ldr	r0, [pc, #24]	; (8009e10 <netconn_write_vectors_partly+0x160>)
 8009df6:	f00c fde3 	bl	80169c0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009dfa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3748      	adds	r7, #72	; 0x48
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	08019ad0 	.word	0x08019ad0
 8009e0c:	08019d9c 	.word	0x08019d9c
 8009e10:	08019b28 	.word	0x08019b28
 8009e14:	08019db8 	.word	0x08019db8
 8009e18:	0800b295 	.word	0x0800b295
 8009e1c:	08019ddc 	.word	0x08019ddc

08009e20 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	; 0x30
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <netconn_close_shutdown+0x26>
 8009e32:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <netconn_close_shutdown+0x50>)
 8009e34:	f240 4247 	movw	r2, #1095	; 0x447
 8009e38:	490e      	ldr	r1, [pc, #56]	; (8009e74 <netconn_close_shutdown+0x54>)
 8009e3a:	480f      	ldr	r0, [pc, #60]	; (8009e78 <netconn_close_shutdown+0x58>)
 8009e3c:	f00c fdc0 	bl	80169c0 <iprintf>
 8009e40:	f06f 030f 	mvn.w	r3, #15
 8009e44:	e010      	b.n	8009e68 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e4e:	2329      	movs	r3, #41	; 0x29
 8009e50:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	4619      	mov	r1, r3
 8009e58:	4808      	ldr	r0, [pc, #32]	; (8009e7c <netconn_close_shutdown+0x5c>)
 8009e5a:	f7ff fbf7 	bl	800964c <netconn_apimsg>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009e64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3730      	adds	r7, #48	; 0x30
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	08019ad0 	.word	0x08019ad0
 8009e74:	08019e00 	.word	0x08019e00
 8009e78:	08019b28 	.word	0x08019b28
 8009e7c:	0800b3a9 	.word	0x0800b3a9

08009e80 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009e88:	2103      	movs	r1, #3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff ffc8 	bl	8009e20 <netconn_close_shutdown>
 8009e90:	4603      	mov	r3, r0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <netconn_err+0x12>
    return ERR_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e00d      	b.n	8009ec8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009eac:	f00c fb74 	bl	8016598 <sys_arch_protect>
 8009eb0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	7a1b      	ldrb	r3, [r3, #8]
 8009eb6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f00c fb78 	bl	80165b4 <sys_arch_unprotect>
  return err;
 8009ec4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ede:	f113 0f0d 	cmn.w	r3, #13
 8009ee2:	d009      	beq.n	8009ef8 <lwip_netconn_err_to_msg+0x28>
 8009ee4:	f113 0f0d 	cmn.w	r3, #13
 8009ee8:	dc0c      	bgt.n	8009f04 <lwip_netconn_err_to_msg+0x34>
 8009eea:	f113 0f0f 	cmn.w	r3, #15
 8009eee:	d007      	beq.n	8009f00 <lwip_netconn_err_to_msg+0x30>
 8009ef0:	f113 0f0e 	cmn.w	r3, #14
 8009ef4:	d002      	beq.n	8009efc <lwip_netconn_err_to_msg+0x2c>
 8009ef6:	e005      	b.n	8009f04 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <lwip_netconn_err_to_msg+0x54>)
 8009efa:	e00e      	b.n	8009f1a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <lwip_netconn_err_to_msg+0x58>)
 8009efe:	e00c      	b.n	8009f1a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009f00:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <lwip_netconn_err_to_msg+0x5c>)
 8009f02:	e00a      	b.n	8009f1a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <lwip_netconn_err_to_msg+0x48>
 8009f0c:	4b08      	ldr	r3, [pc, #32]	; (8009f30 <lwip_netconn_err_to_msg+0x60>)
 8009f0e:	227d      	movs	r2, #125	; 0x7d
 8009f10:	4908      	ldr	r1, [pc, #32]	; (8009f34 <lwip_netconn_err_to_msg+0x64>)
 8009f12:	4809      	ldr	r0, [pc, #36]	; (8009f38 <lwip_netconn_err_to_msg+0x68>)
 8009f14:	f00c fd54 	bl	80169c0 <iprintf>
      return NULL;
 8009f18:	2300      	movs	r3, #0
  }
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	0801cc80 	.word	0x0801cc80
 8009f28:	0801cc81 	.word	0x0801cc81
 8009f2c:	0801cc82 	.word	0x0801cc82
 8009f30:	08019e1c 	.word	0x08019e1c
 8009f34:	08019e50 	.word	0x08019e50
 8009f38:	08019e60 	.word	0x08019e60

08009f3c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <lwip_netconn_is_err_msg+0x1c>
 8009f4c:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <lwip_netconn_is_err_msg+0x5c>)
 8009f4e:	2285      	movs	r2, #133	; 0x85
 8009f50:	4912      	ldr	r1, [pc, #72]	; (8009f9c <lwip_netconn_is_err_msg+0x60>)
 8009f52:	4813      	ldr	r0, [pc, #76]	; (8009fa0 <lwip_netconn_is_err_msg+0x64>)
 8009f54:	f00c fd34 	bl	80169c0 <iprintf>

  if (msg == &netconn_aborted) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a12      	ldr	r2, [pc, #72]	; (8009fa4 <lwip_netconn_is_err_msg+0x68>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d104      	bne.n	8009f6a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	22f3      	movs	r2, #243	; 0xf3
 8009f64:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e012      	b.n	8009f90 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a0e      	ldr	r2, [pc, #56]	; (8009fa8 <lwip_netconn_is_err_msg+0x6c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d104      	bne.n	8009f7c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	22f2      	movs	r2, #242	; 0xf2
 8009f76:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e009      	b.n	8009f90 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a0b      	ldr	r2, [pc, #44]	; (8009fac <lwip_netconn_is_err_msg+0x70>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d104      	bne.n	8009f8e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	22f1      	movs	r2, #241	; 0xf1
 8009f88:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	08019e1c 	.word	0x08019e1c
 8009f9c:	08019e88 	.word	0x08019e88
 8009fa0:	08019e60 	.word	0x08019e60
 8009fa4:	0801cc80 	.word	0x0801cc80
 8009fa8:	0801cc81 	.word	0x0801cc81
 8009fac:	0801cc82 	.word	0x0801cc82

08009fb0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <recv_tcp+0x22>
 8009fc4:	4b36      	ldr	r3, [pc, #216]	; (800a0a0 <recv_tcp+0xf0>)
 8009fc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009fca:	4936      	ldr	r1, [pc, #216]	; (800a0a4 <recv_tcp+0xf4>)
 8009fcc:	4836      	ldr	r0, [pc, #216]	; (800a0a8 <recv_tcp+0xf8>)
 8009fce:	f00c fcf7 	bl	80169c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <recv_tcp+0x36>
 8009fd8:	4b31      	ldr	r3, [pc, #196]	; (800a0a0 <recv_tcp+0xf0>)
 8009fda:	f240 122d 	movw	r2, #301	; 0x12d
 8009fde:	4933      	ldr	r1, [pc, #204]	; (800a0ac <recv_tcp+0xfc>)
 8009fe0:	4831      	ldr	r0, [pc, #196]	; (800a0a8 <recv_tcp+0xf8>)
 8009fe2:	f00c fced 	bl	80169c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d006      	beq.n	8009ffc <recv_tcp+0x4c>
 8009fee:	4b2c      	ldr	r3, [pc, #176]	; (800a0a0 <recv_tcp+0xf0>)
 8009ff0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009ff4:	492e      	ldr	r1, [pc, #184]	; (800a0b0 <recv_tcp+0x100>)
 8009ff6:	482c      	ldr	r0, [pc, #176]	; (800a0a8 <recv_tcp+0xf8>)
 8009ff8:	f00c fce2 	bl	80169c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <recv_tcp+0x5c>
    return ERR_VAL;
 800a006:	f06f 0305 	mvn.w	r3, #5
 800a00a:	e045      	b.n	800a098 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	d006      	beq.n	800a024 <recv_tcp+0x74>
 800a016:	4b22      	ldr	r3, [pc, #136]	; (800a0a0 <recv_tcp+0xf0>)
 800a018:	f240 1235 	movw	r2, #309	; 0x135
 800a01c:	4925      	ldr	r1, [pc, #148]	; (800a0b4 <recv_tcp+0x104>)
 800a01e:	4822      	ldr	r0, [pc, #136]	; (800a0a8 <recv_tcp+0xf8>)
 800a020:	f00c fcce 	bl	80169c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	3310      	adds	r3, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	f00c f9ab 	bl	8016384 <sys_mbox_valid>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10d      	bne.n	800a050 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d008      	beq.n	800a04c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	891b      	ldrh	r3, [r3, #8]
 800a03e:	4619      	mov	r1, r3
 800a040:	68b8      	ldr	r0, [r7, #8]
 800a042:	f004 f839 	bl	800e0b8 <tcp_recved>
      pbuf_free(p);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f003 f948 	bl	800d2dc <pbuf_free>
    }
    return ERR_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e023      	b.n	800a098 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <recv_tcp+0xb2>
    msg = p;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	891b      	ldrh	r3, [r3, #8]
 800a05e:	83fb      	strh	r3, [r7, #30]
 800a060:	e003      	b.n	800a06a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <recv_tcp+0x108>)
 800a064:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	3310      	adds	r3, #16
 800a06e:	69b9      	ldr	r1, [r7, #24]
 800a070:	4618      	mov	r0, r3
 800a072:	f00c f925 	bl	80162c0 <sys_mbox_trypost>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a080:	e00a      	b.n	800a098 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <recv_tcp+0xe6>
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	8bfa      	ldrh	r2, [r7, #30]
 800a090:	2100      	movs	r1, #0
 800a092:	6978      	ldr	r0, [r7, #20]
 800a094:	4798      	blx	r3
  }

  return ERR_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3720      	adds	r7, #32
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	08019e1c 	.word	0x08019e1c
 800a0a4:	08019e94 	.word	0x08019e94
 800a0a8:	08019e60 	.word	0x08019e60
 800a0ac:	08019eb8 	.word	0x08019eb8
 800a0b0:	08019ed8 	.word	0x08019ed8
 800a0b4:	08019ef0 	.word	0x08019ef0
 800a0b8:	0801cc82 	.word	0x0801cc82

0800a0bc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d106      	bne.n	800a0de <poll_tcp+0x22>
 800a0d0:	4b29      	ldr	r3, [pc, #164]	; (800a178 <poll_tcp+0xbc>)
 800a0d2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a0d6:	4929      	ldr	r1, [pc, #164]	; (800a17c <poll_tcp+0xc0>)
 800a0d8:	4829      	ldr	r0, [pc, #164]	; (800a180 <poll_tcp+0xc4>)
 800a0da:	f00c fc71 	bl	80169c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d104      	bne.n	800a0f0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 ff07 	bl	800aefc <lwip_netconn_do_writemore>
 800a0ee:	e016      	b.n	800a11e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	785b      	ldrb	r3, [r3, #1]
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d112      	bne.n	800a11e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00a      	beq.n	800a116 <poll_tcp+0x5a>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	7a5b      	ldrb	r3, [r3, #9]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	7a5a      	ldrb	r2, [r3, #9]
 800a110:	3a01      	subs	r2, #1
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a116:	2101      	movs	r1, #1
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 fb0f 	bl	800a73c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	7f1b      	ldrb	r3, [r3, #28]
 800a122:	f003 0310 	and.w	r3, r3, #16
 800a126:	2b00      	cmp	r3, #0
 800a128:	d021      	beq.n	800a16e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01d      	beq.n	800a16e <poll_tcp+0xb2>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a13a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a13e:	d316      	bcc.n	800a16e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d810      	bhi.n	800a16e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7f1b      	ldrb	r3, [r3, #28]
 800a150:	f023 0310 	bic.w	r3, r3, #16
 800a154:	b2da      	uxtb	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d005      	beq.n	800a16e <poll_tcp+0xb2>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2200      	movs	r2, #0
 800a168:	2102      	movs	r1, #2
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	08019e1c 	.word	0x08019e1c
 800a17c:	08019f10 	.word	0x08019f10
 800a180:	08019e60 	.word	0x08019e60

0800a184 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <sent_tcp+0x26>
 800a19c:	4b20      	ldr	r3, [pc, #128]	; (800a220 <sent_tcp+0x9c>)
 800a19e:	f240 1293 	movw	r2, #403	; 0x193
 800a1a2:	4920      	ldr	r1, [pc, #128]	; (800a224 <sent_tcp+0xa0>)
 800a1a4:	4820      	ldr	r0, [pc, #128]	; (800a228 <sent_tcp+0xa4>)
 800a1a6:	f00c fc0b 	bl	80169c0 <iprintf>

  if (conn) {
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d032      	beq.n	800a216 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	785b      	ldrb	r3, [r3, #1]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d104      	bne.n	800a1c2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	6978      	ldr	r0, [r7, #20]
 800a1bc:	f000 fe9e 	bl	800aefc <lwip_netconn_do_writemore>
 800a1c0:	e007      	b.n	800a1d2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d103      	bne.n	800a1d2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	6978      	ldr	r0, [r7, #20]
 800a1ce:	f000 fab5 	bl	800a73c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d01d      	beq.n	800a216 <sent_tcp+0x92>
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a1e6:	d316      	bcc.n	800a216 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d810      	bhi.n	800a216 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	7f1b      	ldrb	r3, [r3, #28]
 800a1f8:	f023 0310 	bic.w	r3, r3, #16
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <sent_tcp+0x92>
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	88fa      	ldrh	r2, [r7, #6]
 800a210:	2102      	movs	r1, #2
 800a212:	6978      	ldr	r0, [r7, #20]
 800a214:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	08019e1c 	.word	0x08019e1c
 800a224:	08019f10 	.word	0x08019f10
 800a228:	08019e60 	.word	0x08019e60

0800a22c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <err_tcp+0x24>
 800a242:	4b5f      	ldr	r3, [pc, #380]	; (800a3c0 <err_tcp+0x194>)
 800a244:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a248:	495e      	ldr	r1, [pc, #376]	; (800a3c4 <err_tcp+0x198>)
 800a24a:	485f      	ldr	r0, [pc, #380]	; (800a3c8 <err_tcp+0x19c>)
 800a24c:	f00c fbb8 	bl	80169c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a250:	f00c f9a2 	bl	8016598 <sys_arch_protect>
 800a254:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	2200      	movs	r2, #0
 800a25a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	7f1b      	ldrb	r3, [r3, #28]
 800a266:	f043 0301 	orr.w	r3, r3, #1
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	785b      	ldrb	r3, [r3, #1]
 800a274:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	2200      	movs	r2, #0
 800a27a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a27c:	69b8      	ldr	r0, [r7, #24]
 800a27e:	f00c f999 	bl	80165b4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <err_tcp+0x6a>
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2200      	movs	r2, #0
 800a290:	2104      	movs	r1, #4
 800a292:	69f8      	ldr	r0, [r7, #28]
 800a294:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <err_tcp+0x7e>
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	69f8      	ldr	r0, [r7, #28]
 800a2a8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <err_tcp+0x92>
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	69f8      	ldr	r0, [r7, #28]
 800a2bc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a2be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff fe04 	bl	8009ed0 <lwip_netconn_err_to_msg>
 800a2c8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	3310      	adds	r3, #16
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f00c f858 	bl	8016384 <sys_mbox_valid>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	3310      	adds	r3, #16
 800a2de:	6939      	ldr	r1, [r7, #16]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f00b ffed 	bl	80162c0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f00c f84a 	bl	8016384 <sys_mbox_valid>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	3314      	adds	r3, #20
 800a2fa:	6939      	ldr	r1, [r7, #16]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f00b ffdf 	bl	80162c0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d005      	beq.n	800a314 <err_tcp+0xe8>
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	d002      	beq.n	800a314 <err_tcp+0xe8>
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	2b03      	cmp	r3, #3
 800a312:	d143      	bne.n	800a39c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	7f1b      	ldrb	r3, [r3, #28]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bf14      	ite	ne
 800a320:	2301      	movne	r3, #1
 800a322:	2300      	moveq	r3, #0
 800a324:	b2db      	uxtb	r3, r3
 800a326:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	7f1b      	ldrb	r3, [r3, #28]
 800a32c:	f023 0304 	bic.w	r3, r3, #4
 800a330:	b2da      	uxtb	r2, r3
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d13b      	bne.n	800a3b4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d106      	bne.n	800a352 <err_tcp+0x126>
 800a344:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <err_tcp+0x194>)
 800a346:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a34a:	4920      	ldr	r1, [pc, #128]	; (800a3cc <err_tcp+0x1a0>)
 800a34c:	481e      	ldr	r0, [pc, #120]	; (800a3c8 <err_tcp+0x19c>)
 800a34e:	f00c fb37 	bl	80169c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	2b04      	cmp	r3, #4
 800a356:	d104      	bne.n	800a362 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	2200      	movs	r2, #0
 800a35e:	711a      	strb	r2, [r3, #4]
 800a360:	e003      	b.n	800a36a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	330c      	adds	r3, #12
 800a372:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a374:	68b8      	ldr	r0, [r7, #8]
 800a376:	f00c f893 	bl	80164a0 <sys_sem_valid>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d106      	bne.n	800a38e <err_tcp+0x162>
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <err_tcp+0x194>)
 800a382:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a386:	4912      	ldr	r1, [pc, #72]	; (800a3d0 <err_tcp+0x1a4>)
 800a388:	480f      	ldr	r0, [pc, #60]	; (800a3c8 <err_tcp+0x19c>)
 800a38a:	f00c fb19 	bl	80169c0 <iprintf>
      conn->current_msg = NULL;
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	2200      	movs	r2, #0
 800a392:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a394:	68b8      	ldr	r0, [r7, #8]
 800a396:	f00c f869 	bl	801646c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a39a:	e00b      	b.n	800a3b4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d008      	beq.n	800a3b6 <err_tcp+0x18a>
 800a3a4:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <err_tcp+0x194>)
 800a3a6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a3aa:	490a      	ldr	r1, [pc, #40]	; (800a3d4 <err_tcp+0x1a8>)
 800a3ac:	4806      	ldr	r0, [pc, #24]	; (800a3c8 <err_tcp+0x19c>)
 800a3ae:	f00c fb07 	bl	80169c0 <iprintf>
  }
}
 800a3b2:	e000      	b.n	800a3b6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a3b4:	bf00      	nop
}
 800a3b6:	bf00      	nop
 800a3b8:	3720      	adds	r7, #32
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	08019e1c 	.word	0x08019e1c
 800a3c4:	08019f10 	.word	0x08019f10
 800a3c8:	08019e60 	.word	0x08019e60
 800a3cc:	08019f20 	.word	0x08019f20
 800a3d0:	08019f3c 	.word	0x08019f3c
 800a3d4:	08019f58 	.word	0x08019f58

0800a3d8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f004 fe43 	bl	800f074 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a3ee:	490a      	ldr	r1, [pc, #40]	; (800a418 <setup_tcp+0x40>)
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f004 fe51 	bl	800f098 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a3f6:	4909      	ldr	r1, [pc, #36]	; (800a41c <setup_tcp+0x44>)
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f004 fe6f 	bl	800f0dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a3fe:	2202      	movs	r2, #2
 800a400:	4907      	ldr	r1, [pc, #28]	; (800a420 <setup_tcp+0x48>)
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f004 fec6 	bl	800f194 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a408:	4906      	ldr	r1, [pc, #24]	; (800a424 <setup_tcp+0x4c>)
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f004 fe88 	bl	800f120 <tcp_err>
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	08009fb1 	.word	0x08009fb1
 800a41c:	0800a185 	.word	0x0800a185
 800a420:	0800a0bd 	.word	0x0800a0bd
 800a424:	0800a22d 	.word	0x0800a22d

0800a428 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a430:	2300      	movs	r3, #0
 800a432:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d006      	beq.n	800a44c <pcb_new+0x24>
 800a43e:	4b18      	ldr	r3, [pc, #96]	; (800a4a0 <pcb_new+0x78>)
 800a440:	f240 2265 	movw	r2, #613	; 0x265
 800a444:	4917      	ldr	r1, [pc, #92]	; (800a4a4 <pcb_new+0x7c>)
 800a446:	4818      	ldr	r0, [pc, #96]	; (800a4a8 <pcb_new+0x80>)
 800a448:	f00c faba 	bl	80169c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a456:	2b10      	cmp	r3, #16
 800a458:	d112      	bne.n	800a480 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681c      	ldr	r4, [r3, #0]
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	4618      	mov	r0, r3
 800a462:	f004 fdf9 	bl	800f058 <tcp_new_ip_type>
 800a466:	4603      	mov	r3, r0
 800a468:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff ffad 	bl	800a3d8 <setup_tcp>
      }
      break;
 800a47e:	e003      	b.n	800a488 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	22fa      	movs	r2, #250	; 0xfa
 800a484:	711a      	strb	r2, [r3, #4]
      return;
 800a486:	e008      	b.n	800a49a <pcb_new+0x72>
      break;
 800a488:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <pcb_new+0x72>
    msg->err = ERR_MEM;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	22ff      	movs	r2, #255	; 0xff
 800a498:	711a      	strb	r2, [r3, #4]
  }
}
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd90      	pop	{r4, r7, pc}
 800a4a0:	08019e1c 	.word	0x08019e1c
 800a4a4:	08019f9c 	.word	0x08019f9c
 800a4a8:	08019e60 	.word	0x08019e60

0800a4ac <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7ff ffad 	bl	800a428 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	6039      	str	r1, [r7, #0]
 800a4e2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a4e8:	2006      	movs	r0, #6
 800a4ea:	f001 ffe1 	bl	800c4b0 <memp_malloc>
 800a4ee:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <netconn_alloc+0x22>
    return NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e04d      	b.n	800a596 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	79fa      	ldrb	r2, [r7, #7]
 800a504:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2200      	movs	r2, #0
 800a50a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a512:	2b10      	cmp	r3, #16
 800a514:	d10c      	bne.n	800a530 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a516:	2306      	movs	r3, #6
 800a518:	60fb      	str	r3, [r7, #12]
      break;
 800a51a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3310      	adds	r3, #16
 800a520:	68f9      	ldr	r1, [r7, #12]
 800a522:	4618      	mov	r0, r3
 800a524:	f00b fea0 	bl	8016268 <sys_mbox_new>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d008      	beq.n	800a540 <netconn_alloc+0x68>
    goto free_and_return;
 800a52e:	e02d      	b.n	800a58c <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a530:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <netconn_alloc+0xc8>)
 800a532:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a536:	491b      	ldr	r1, [pc, #108]	; (800a5a4 <netconn_alloc+0xcc>)
 800a538:	481b      	ldr	r0, [pc, #108]	; (800a5a8 <netconn_alloc+0xd0>)
 800a53a:	f00c fa41 	bl	80169c0 <iprintf>
      goto free_and_return;
 800a53e:	e025      	b.n	800a58c <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	330c      	adds	r3, #12
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f00b ff3a 	bl	80163c0 <sys_sem_new>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d005      	beq.n	800a55e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f00b fea0 	bl	801629c <sys_mbox_free>
    goto free_and_return;
 800a55c:	e016      	b.n	800a58c <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3314      	adds	r3, #20
 800a562:	4618      	mov	r0, r3
 800a564:	f00b ff1f 	bl	80163a6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2200      	movs	r2, #0
 800a56c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a574:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2200      	movs	r2, #0
 800a580:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	7dfa      	ldrb	r2, [r7, #23]
 800a586:	771a      	strb	r2, [r3, #28]
  return conn;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	e004      	b.n	800a596 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a58c:	6939      	ldr	r1, [r7, #16]
 800a58e:	2006      	movs	r0, #6
 800a590:	f002 f804 	bl	800c59c <memp_free>
  return NULL;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08019e1c 	.word	0x08019e1c
 800a5a4:	08019fbc 	.word	0x08019fbc
 800a5a8:	08019e60 	.word	0x08019e60

0800a5ac <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <netconn_free+0x1e>
 800a5bc:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <netconn_free+0x80>)
 800a5be:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a5c2:	491b      	ldr	r1, [pc, #108]	; (800a630 <netconn_free+0x84>)
 800a5c4:	481b      	ldr	r0, [pc, #108]	; (800a634 <netconn_free+0x88>)
 800a5c6:	f00c f9fb 	bl	80169c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3310      	adds	r3, #16
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f00b fed8 	bl	8016384 <sys_mbox_valid>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d006      	beq.n	800a5e8 <netconn_free+0x3c>
 800a5da:	4b14      	ldr	r3, [pc, #80]	; (800a62c <netconn_free+0x80>)
 800a5dc:	f240 3223 	movw	r2, #803	; 0x323
 800a5e0:	4915      	ldr	r1, [pc, #84]	; (800a638 <netconn_free+0x8c>)
 800a5e2:	4814      	ldr	r0, [pc, #80]	; (800a634 <netconn_free+0x88>)
 800a5e4:	f00c f9ec 	bl	80169c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3314      	adds	r3, #20
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f00b fec9 	bl	8016384 <sys_mbox_valid>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d006      	beq.n	800a606 <netconn_free+0x5a>
 800a5f8:	4b0c      	ldr	r3, [pc, #48]	; (800a62c <netconn_free+0x80>)
 800a5fa:	f240 3226 	movw	r2, #806	; 0x326
 800a5fe:	490f      	ldr	r1, [pc, #60]	; (800a63c <netconn_free+0x90>)
 800a600:	480c      	ldr	r0, [pc, #48]	; (800a634 <netconn_free+0x88>)
 800a602:	f00c f9dd 	bl	80169c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	330c      	adds	r3, #12
 800a60a:	4618      	mov	r0, r3
 800a60c:	f00b ff3b 	bl	8016486 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	330c      	adds	r3, #12
 800a614:	4618      	mov	r0, r3
 800a616:	f00b ff54 	bl	80164c2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	2006      	movs	r0, #6
 800a61e:	f001 ffbd 	bl	800c59c <memp_free>
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	08019e1c 	.word	0x08019e1c
 800a630:	08019fe4 	.word	0x08019fe4
 800a634:	08019e60 	.word	0x08019e60
 800a638:	0801a014 	.word	0x0801a014
 800a63c:	0801a050 	.word	0x0801a050

0800a640 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3310      	adds	r3, #16
 800a64c:	4618      	mov	r0, r3
 800a64e:	f00b fe99 	bl	8016384 <sys_mbox_valid>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d02f      	beq.n	800a6b8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a658:	e018      	b.n	800a68c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a662:	2b10      	cmp	r3, #16
 800a664:	d10e      	bne.n	800a684 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f107 020f 	add.w	r2, r7, #15
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff fc64 	bl	8009f3c <lwip_netconn_is_err_msg>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d108      	bne.n	800a68c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f002 fe2d 	bl	800d2dc <pbuf_free>
 800a682:	e003      	b.n	800a68c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 ff1a 	bl	800b4c0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3310      	adds	r3, #16
 800a690:	f107 0210 	add.w	r2, r7, #16
 800a694:	4611      	mov	r1, r2
 800a696:	4618      	mov	r0, r3
 800a698:	f00b fe5d 	bl	8016356 <sys_arch_mbox_tryfetch>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a2:	d1da      	bne.n	800a65a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3310      	adds	r3, #16
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f00b fdf7 	bl	801629c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3310      	adds	r3, #16
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f00b fe77 	bl	80163a6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f00b fe61 	bl	8016384 <sys_mbox_valid>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d034      	beq.n	800a732 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a6c8:	e01d      	b.n	800a706 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f107 020e 	add.w	r2, r7, #14
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff fc32 	bl	8009f3c <lwip_netconn_is_err_msg>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d113      	bne.n	800a706 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a6e2:	6978      	ldr	r0, [r7, #20]
 800a6e4:	f7ff ffac 	bl	800a640 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f003 fbe1 	bl	800debc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a700:	6978      	ldr	r0, [r7, #20]
 800a702:	f7ff ff53 	bl	800a5ac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3314      	adds	r3, #20
 800a70a:	f107 0210 	add.w	r2, r7, #16
 800a70e:	4611      	mov	r1, r2
 800a710:	4618      	mov	r0, r3
 800a712:	f00b fe20 	bl	8016356 <sys_arch_mbox_tryfetch>
 800a716:	4603      	mov	r3, r0
 800a718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a71c:	d1d5      	bne.n	800a6ca <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3314      	adds	r3, #20
 800a722:	4618      	mov	r0, r3
 800a724:	f00b fdba 	bl	801629c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3314      	adds	r3, #20
 800a72c:	4618      	mov	r0, r3
 800a72e:	f00b fe3a 	bl	80163a6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a732:	bf00      	nop
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <lwip_netconn_do_close_internal+0x24>
 800a752:	4b87      	ldr	r3, [pc, #540]	; (800a970 <lwip_netconn_do_close_internal+0x234>)
 800a754:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a758:	4986      	ldr	r1, [pc, #536]	; (800a974 <lwip_netconn_do_close_internal+0x238>)
 800a75a:	4887      	ldr	r0, [pc, #540]	; (800a978 <lwip_netconn_do_close_internal+0x23c>)
 800a75c:	f00c f930 	bl	80169c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a768:	2b10      	cmp	r3, #16
 800a76a:	d006      	beq.n	800a77a <lwip_netconn_do_close_internal+0x3e>
 800a76c:	4b80      	ldr	r3, [pc, #512]	; (800a970 <lwip_netconn_do_close_internal+0x234>)
 800a76e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a772:	4982      	ldr	r1, [pc, #520]	; (800a97c <lwip_netconn_do_close_internal+0x240>)
 800a774:	4880      	ldr	r0, [pc, #512]	; (800a978 <lwip_netconn_do_close_internal+0x23c>)
 800a776:	f00c f923 	bl	80169c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	785b      	ldrb	r3, [r3, #1]
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d006      	beq.n	800a790 <lwip_netconn_do_close_internal+0x54>
 800a782:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <lwip_netconn_do_close_internal+0x234>)
 800a784:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a788:	497d      	ldr	r1, [pc, #500]	; (800a980 <lwip_netconn_do_close_internal+0x244>)
 800a78a:	487b      	ldr	r0, [pc, #492]	; (800a978 <lwip_netconn_do_close_internal+0x23c>)
 800a78c:	f00c f918 	bl	80169c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d106      	bne.n	800a7a6 <lwip_netconn_do_close_internal+0x6a>
 800a798:	4b75      	ldr	r3, [pc, #468]	; (800a970 <lwip_netconn_do_close_internal+0x234>)
 800a79a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a79e:	4979      	ldr	r1, [pc, #484]	; (800a984 <lwip_netconn_do_close_internal+0x248>)
 800a7a0:	4875      	ldr	r0, [pc, #468]	; (800a978 <lwip_netconn_do_close_internal+0x23c>)
 800a7a2:	f00c f90d 	bl	80169c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <lwip_netconn_do_close_internal+0x80>
 800a7ae:	4b70      	ldr	r3, [pc, #448]	; (800a970 <lwip_netconn_do_close_internal+0x234>)
 800a7b0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7b4:	4974      	ldr	r1, [pc, #464]	; (800a988 <lwip_netconn_do_close_internal+0x24c>)
 800a7b6:	4870      	ldr	r0, [pc, #448]	; (800a978 <lwip_netconn_do_close_internal+0x23c>)
 800a7b8:	f00c f902 	bl	80169c0 <iprintf>

  tpcb = conn->pcb.tcp;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	7a1b      	ldrb	r3, [r3, #8]
 800a7c8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d102      	bne.n	800a7e6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	75bb      	strb	r3, [r7, #22]
 800a7e4:	e01f      	b.n	800a826 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00e      	beq.n	800a80a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a7f0:	2b05      	cmp	r3, #5
 800a7f2:	d007      	beq.n	800a804 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a7f8:	2b06      	cmp	r3, #6
 800a7fa:	d003      	beq.n	800a804 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a800:	2b08      	cmp	r3, #8
 800a802:	d102      	bne.n	800a80a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a804:	2301      	movs	r3, #1
 800a806:	75bb      	strb	r3, [r7, #22]
 800a808:	e00d      	b.n	800a826 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a80a:	7b7b      	ldrb	r3, [r7, #13]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <lwip_netconn_do_close_internal+0xe6>
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	8b5b      	ldrh	r3, [r3, #26]
 800a814:	f003 0310 	and.w	r3, r3, #16
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a81c:	2301      	movs	r3, #1
 800a81e:	75bb      	strb	r3, [r7, #22]
 800a820:	e001      	b.n	800a826 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a826:	7dbb      	ldrb	r3, [r7, #22]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a82c:	2100      	movs	r1, #0
 800a82e:	6938      	ldr	r0, [r7, #16]
 800a830:	f004 fc20 	bl	800f074 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	7d1b      	ldrb	r3, [r3, #20]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d104      	bne.n	800a846 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a83c:	2100      	movs	r1, #0
 800a83e:	6938      	ldr	r0, [r7, #16]
 800a840:	f004 fc90 	bl	800f164 <tcp_accept>
 800a844:	e01d      	b.n	800a882 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a84c:	2100      	movs	r1, #0
 800a84e:	6938      	ldr	r0, [r7, #16]
 800a850:	f004 fc22 	bl	800f098 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a854:	2100      	movs	r1, #0
 800a856:	6938      	ldr	r0, [r7, #16]
 800a858:	f004 fc84 	bl	800f164 <tcp_accept>
    }
    if (shut_tx) {
 800a85c:	7b7b      	ldrb	r3, [r7, #13]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a862:	2100      	movs	r1, #0
 800a864:	6938      	ldr	r0, [r7, #16]
 800a866:	f004 fc39 	bl	800f0dc <tcp_sent>
    }
    if (shut_close) {
 800a86a:	7dbb      	ldrb	r3, [r7, #22]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d008      	beq.n	800a882 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a870:	2200      	movs	r2, #0
 800a872:	2100      	movs	r1, #0
 800a874:	6938      	ldr	r0, [r7, #16]
 800a876:	f004 fc8d 	bl	800f194 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a87a:	2100      	movs	r1, #0
 800a87c:	6938      	ldr	r0, [r7, #16]
 800a87e:	f004 fc4f 	bl	800f120 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a882:	7dbb      	ldrb	r3, [r7, #22]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a888:	6938      	ldr	r0, [r7, #16]
 800a88a:	f003 f9d1 	bl	800dc30 <tcp_close>
 800a88e:	4603      	mov	r3, r0
 800a890:	75fb      	strb	r3, [r7, #23]
 800a892:	e007      	b.n	800a8a4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	7b7a      	ldrb	r2, [r7, #13]
 800a898:	4619      	mov	r1, r3
 800a89a:	6938      	ldr	r0, [r7, #16]
 800a89c:	f003 f9f4 	bl	800dc88 <tcp_shutdown>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d102      	bne.n	800a8b2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	757b      	strb	r3, [r7, #21]
 800a8b0:	e016      	b.n	800a8e0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ba:	d10f      	bne.n	800a8dc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	7a5b      	ldrb	r3, [r3, #9]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10c      	bne.n	800a8e0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a8ca:	7dbb      	ldrb	r3, [r7, #22]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a8d0:	6938      	ldr	r0, [r7, #16]
 800a8d2:	f003 faf3 	bl	800debc <tcp_abort>
          err = ERR_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	75fb      	strb	r3, [r7, #23]
 800a8da:	e001      	b.n	800a8e0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a8e0:	7d7b      	ldrb	r3, [r7, #21]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d052      	beq.n	800a98c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	330c      	adds	r3, #12
 800a8ee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	7dfa      	ldrb	r2, [r7, #23]
 800a8f6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d129      	bne.n	800a960 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a90c:	7dbb      	ldrb	r3, [r7, #22]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00c      	beq.n	800a92c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d005      	beq.n	800a92c <lwip_netconn_do_close_internal+0x1f0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	2200      	movs	r2, #0
 800a926:	2104      	movs	r1, #4
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
      }
      if (shut_rx) {
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <lwip_netconn_do_close_internal+0x20a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2200      	movs	r2, #0
 800a940:	2100      	movs	r1, #0
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
      }
      if (shut_tx) {
 800a946:	7b7b      	ldrb	r3, [r7, #13]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d009      	beq.n	800a960 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <lwip_netconn_do_close_internal+0x224>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2200      	movs	r2, #0
 800a95a:	2102      	movs	r1, #2
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f00b fd80 	bl	801646c <sys_sem_signal>
    }
    return ERR_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	e03c      	b.n	800a9ea <lwip_netconn_do_close_internal+0x2ae>
 800a970:	08019e1c 	.word	0x08019e1c
 800a974:	0801a08c 	.word	0x0801a08c
 800a978:	08019e60 	.word	0x08019e60
 800a97c:	0801a09c 	.word	0x0801a09c
 800a980:	0801a0bc 	.word	0x0801a0bc
 800a984:	0801a0e0 	.word	0x0801a0e0
 800a988:	08019f20 	.word	0x08019f20
  }
  if (!close_finished) {
 800a98c:	7d7b      	ldrb	r3, [r7, #21]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d11e      	bne.n	800a9d0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	7d1b      	ldrb	r3, [r3, #20]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d106      	bne.n	800a9a8 <lwip_netconn_do_close_internal+0x26c>
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <lwip_netconn_do_close_internal+0x2b8>)
 800a99c:	f240 4241 	movw	r2, #1089	; 0x441
 800a9a0:	4915      	ldr	r1, [pc, #84]	; (800a9f8 <lwip_netconn_do_close_internal+0x2bc>)
 800a9a2:	4816      	ldr	r0, [pc, #88]	; (800a9fc <lwip_netconn_do_close_internal+0x2c0>)
 800a9a4:	f00c f80c 	bl	80169c0 <iprintf>
    if (shut_tx) {
 800a9a8:	7b7b      	ldrb	r3, [r7, #13]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a9ae:	4914      	ldr	r1, [pc, #80]	; (800aa00 <lwip_netconn_do_close_internal+0x2c4>)
 800a9b0:	6938      	ldr	r0, [r7, #16]
 800a9b2:	f004 fb93 	bl	800f0dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4912      	ldr	r1, [pc, #72]	; (800aa04 <lwip_netconn_do_close_internal+0x2c8>)
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f004 fbea 	bl	800f194 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a9c0:	4911      	ldr	r1, [pc, #68]	; (800aa08 <lwip_netconn_do_close_internal+0x2cc>)
 800a9c2:	6938      	ldr	r0, [r7, #16]
 800a9c4:	f004 fbac 	bl	800f120 <tcp_err>
    tcp_arg(tpcb, conn);
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	6938      	ldr	r0, [r7, #16]
 800a9cc:	f004 fb52 	bl	800f074 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a9d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d106      	bne.n	800a9e6 <lwip_netconn_do_close_internal+0x2aa>
 800a9d8:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <lwip_netconn_do_close_internal+0x2b8>)
 800a9da:	f240 424d 	movw	r2, #1101	; 0x44d
 800a9de:	490b      	ldr	r1, [pc, #44]	; (800aa0c <lwip_netconn_do_close_internal+0x2d0>)
 800a9e0:	4806      	ldr	r0, [pc, #24]	; (800a9fc <lwip_netconn_do_close_internal+0x2c0>)
 800a9e2:	f00b ffed 	bl	80169c0 <iprintf>
  return err;
 800a9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	08019e1c 	.word	0x08019e1c
 800a9f8:	0801a0f4 	.word	0x0801a0f4
 800a9fc:	08019e60 	.word	0x08019e60
 800aa00:	0800a185 	.word	0x0800a185
 800aa04:	0800a0bd 	.word	0x0800a0bd
 800aa08:	0800a22d 	.word	0x0800a22d
 800aa0c:	0801a118 	.word	0x0801a118

0800aa10 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aa24:	7afb      	ldrb	r3, [r7, #11]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00d      	beq.n	800aa46 <lwip_netconn_do_delconn+0x36>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d006      	beq.n	800aa46 <lwip_netconn_do_delconn+0x36>
 800aa38:	4b59      	ldr	r3, [pc, #356]	; (800aba0 <lwip_netconn_do_delconn+0x190>)
 800aa3a:	f240 425e 	movw	r2, #1118	; 0x45e
 800aa3e:	4959      	ldr	r1, [pc, #356]	; (800aba4 <lwip_netconn_do_delconn+0x194>)
 800aa40:	4859      	ldr	r0, [pc, #356]	; (800aba8 <lwip_netconn_do_delconn+0x198>)
 800aa42:	f00b ffbd 	bl	80169c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <lwip_netconn_do_delconn+0x48>
 800aa4c:	7afb      	ldrb	r3, [r7, #11]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d002      	beq.n	800aa58 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d109      	bne.n	800aa6c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d10a      	bne.n	800aa74 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	7f1b      	ldrb	r3, [r3, #28]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d103      	bne.n	800aa74 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	22fb      	movs	r2, #251	; 0xfb
 800aa70:	711a      	strb	r2, [r3, #4]
 800aa72:	e089      	b.n	800ab88 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800aa74:	7afb      	ldrb	r3, [r7, #11]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d10d      	bne.n	800aa96 <lwip_netconn_do_delconn+0x86>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	7f1b      	ldrb	r3, [r3, #28]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d106      	bne.n	800aa96 <lwip_netconn_do_delconn+0x86>
 800aa88:	4b45      	ldr	r3, [pc, #276]	; (800aba0 <lwip_netconn_do_delconn+0x190>)
 800aa8a:	f240 427a 	movw	r2, #1146	; 0x47a
 800aa8e:	4947      	ldr	r1, [pc, #284]	; (800abac <lwip_netconn_do_delconn+0x19c>)
 800aa90:	4845      	ldr	r0, [pc, #276]	; (800aba8 <lwip_netconn_do_delconn+0x198>)
 800aa92:	f00b ff95 	bl	80169c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff fdcd 	bl	800a640 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d051      	beq.n	800ab54 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaba:	2b10      	cmp	r3, #16
 800aabc:	d145      	bne.n	800ab4a <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <lwip_netconn_do_delconn+0xc6>
 800aac8:	4b35      	ldr	r3, [pc, #212]	; (800aba0 <lwip_netconn_do_delconn+0x190>)
 800aaca:	f240 4294 	movw	r2, #1172	; 0x494
 800aace:	4938      	ldr	r1, [pc, #224]	; (800abb0 <lwip_netconn_do_delconn+0x1a0>)
 800aad0:	4835      	ldr	r0, [pc, #212]	; (800aba8 <lwip_netconn_do_delconn+0x198>)
 800aad2:	f00b ff75 	bl	80169c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2204      	movs	r2, #4
 800aadc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2203      	movs	r2, #3
 800aae2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff fe22 	bl	800a73c <lwip_netconn_do_close_internal>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d04b      	beq.n	800ab96 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d006      	beq.n	800ab16 <lwip_netconn_do_delconn+0x106>
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <lwip_netconn_do_delconn+0x190>)
 800ab0a:	f240 429a 	movw	r2, #1178	; 0x49a
 800ab0e:	4929      	ldr	r1, [pc, #164]	; (800abb4 <lwip_netconn_do_delconn+0x1a4>)
 800ab10:	4825      	ldr	r0, [pc, #148]	; (800aba8 <lwip_netconn_do_delconn+0x198>)
 800ab12:	f00b ff55 	bl	80169c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ab16:	4828      	ldr	r0, [pc, #160]	; (800abb8 <lwip_netconn_do_delconn+0x1a8>)
 800ab18:	f00b fd11 	bl	801653e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	330c      	adds	r3, #12
 800ab22:	2100      	movs	r1, #0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f00b fc70 	bl	801640a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ab2a:	4823      	ldr	r0, [pc, #140]	; (800abb8 <lwip_netconn_do_delconn+0x1a8>)
 800ab2c:	f00b fcf8 	bl	8016520 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d02d      	beq.n	800ab96 <lwip_netconn_do_delconn+0x186>
 800ab3a:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <lwip_netconn_do_delconn+0x190>)
 800ab3c:	f240 429e 	movw	r2, #1182	; 0x49e
 800ab40:	491c      	ldr	r1, [pc, #112]	; (800abb4 <lwip_netconn_do_delconn+0x1a4>)
 800ab42:	4819      	ldr	r0, [pc, #100]	; (800aba8 <lwip_netconn_do_delconn+0x198>)
 800ab44:	f00b ff3c 	bl	80169c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ab48:	e025      	b.n	800ab96 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800ab4a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <lwip_netconn_do_delconn+0x15e>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	6810      	ldr	r0, [r2, #0]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <lwip_netconn_do_delconn+0x178>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	6810      	ldr	r0, [r2, #0]
 800ab82:	2200      	movs	r2, #0
 800ab84:	2102      	movs	r1, #2
 800ab86:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	330c      	adds	r3, #12
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f00b fc86 	bl	80164a0 <sys_sem_valid>
 800ab94:	e000      	b.n	800ab98 <lwip_netconn_do_delconn+0x188>
          return;
 800ab96:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	08019e1c 	.word	0x08019e1c
 800aba4:	0801a128 	.word	0x0801a128
 800aba8:	08019e60 	.word	0x08019e60
 800abac:	0801a13c 	.word	0x0801a13c
 800abb0:	0801a15c 	.word	0x0801a15c
 800abb4:	0801a178 	.word	0x0801a178
 800abb8:	20009ab8 	.word	0x20009ab8

0800abbc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d016      	beq.n	800ac00 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abdc:	2b10      	cmp	r3, #16
 800abde:	d10c      	bne.n	800abfa <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6858      	ldr	r0, [r3, #4]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	6899      	ldr	r1, [r3, #8]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	899b      	ldrh	r3, [r3, #12]
 800abee:	461a      	mov	r2, r3
 800abf0:	f003 f970 	bl	800ded4 <tcp_bind>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
        break;
 800abf8:	e004      	b.n	800ac04 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800abfa:	23fa      	movs	r3, #250	; 0xfa
 800abfc:	73fb      	strb	r3, [r7, #15]
        break;
 800abfe:	e001      	b.n	800ac04 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800ac00:	23fa      	movs	r3, #250	; 0xfa
 800ac02:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	7bfa      	ldrb	r2, [r7, #15]
 800ac08:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac0a:	bf00      	nop
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
	...

0800ac14 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800ac30:	f06f 0305 	mvn.w	r3, #5
 800ac34:	e070      	b.n	800ad18 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d006      	beq.n	800ac4c <lwip_netconn_do_connected+0x38>
 800ac3e:	4b38      	ldr	r3, [pc, #224]	; (800ad20 <lwip_netconn_do_connected+0x10c>)
 800ac40:	f240 5223 	movw	r2, #1315	; 0x523
 800ac44:	4937      	ldr	r1, [pc, #220]	; (800ad24 <lwip_netconn_do_connected+0x110>)
 800ac46:	4838      	ldr	r0, [pc, #224]	; (800ad28 <lwip_netconn_do_connected+0x114>)
 800ac48:	f00b feba 	bl	80169c0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <lwip_netconn_do_connected+0x5a>
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	7f1b      	ldrb	r3, [r3, #28]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <lwip_netconn_do_connected+0x5a>
 800ac60:	4b2f      	ldr	r3, [pc, #188]	; (800ad20 <lwip_netconn_do_connected+0x10c>)
 800ac62:	f240 5224 	movw	r2, #1316	; 0x524
 800ac66:	4931      	ldr	r1, [pc, #196]	; (800ad2c <lwip_netconn_do_connected+0x118>)
 800ac68:	482f      	ldr	r0, [pc, #188]	; (800ad28 <lwip_netconn_do_connected+0x114>)
 800ac6a:	f00b fea9 	bl	80169c0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d008      	beq.n	800ac88 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	79fa      	ldrb	r2, [r7, #7]
 800ac7c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	330c      	adds	r3, #12
 800ac86:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d106      	bne.n	800aca2 <lwip_netconn_do_connected+0x8e>
 800ac94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ac9c:	69b8      	ldr	r0, [r7, #24]
 800ac9e:	f7ff fb9b 	bl	800a3d8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	7f1b      	ldrb	r3, [r3, #28]
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bf0c      	ite	eq
 800acae:	2301      	moveq	r3, #1
 800acb0:	2300      	movne	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	7f1b      	ldrb	r3, [r3, #28]
 800acba:	f023 0304 	bic.w	r3, r3, #4
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <lwip_netconn_do_connected+0xbc>
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10c      	bne.n	800acea <lwip_netconn_do_connected+0xd6>
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <lwip_netconn_do_connected+0xc8>
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d006      	beq.n	800acea <lwip_netconn_do_connected+0xd6>
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <lwip_netconn_do_connected+0x10c>)
 800acde:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800ace2:	4913      	ldr	r1, [pc, #76]	; (800ad30 <lwip_netconn_do_connected+0x11c>)
 800ace4:	4810      	ldr	r0, [pc, #64]	; (800ad28 <lwip_netconn_do_connected+0x114>)
 800ace6:	f00b fe6b 	bl	80169c0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2200      	movs	r2, #0
 800acee:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2200      	movs	r2, #0
 800acf4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d005      	beq.n	800ad0a <lwip_netconn_do_connected+0xf6>
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	2200      	movs	r2, #0
 800ad04:	2102      	movs	r1, #2
 800ad06:	69b8      	ldr	r0, [r7, #24]
 800ad08:	4798      	blx	r3

  if (was_blocking) {
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800ad10:	69f8      	ldr	r0, [r7, #28]
 800ad12:	f00b fbab 	bl	801646c <sys_sem_signal>
  }
  return ERR_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	08019e1c 	.word	0x08019e1c
 800ad24:	0801a180 	.word	0x0801a180
 800ad28:	08019e60 	.word	0x08019e60
 800ad2c:	0801a1a0 	.word	0x0801a1a0
 800ad30:	0801a1e0 	.word	0x0801a1e0

0800ad34 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800ad4a:	23f1      	movs	r3, #241	; 0xf1
 800ad4c:	75fb      	strb	r3, [r7, #23]
 800ad4e:	e08b      	b.n	800ae68 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad5a:	2b10      	cmp	r3, #16
 800ad5c:	d179      	bne.n	800ae52 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	785b      	ldrb	r3, [r3, #1]
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	d102      	bne.n	800ad6e <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800ad68:	23f7      	movs	r3, #247	; 0xf7
 800ad6a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800ad6c:	e07b      	b.n	800ae66 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800ad78:	23f6      	movs	r3, #246	; 0xf6
 800ad7a:	75fb      	strb	r3, [r7, #23]
        break;
 800ad7c:	e073      	b.n	800ae66 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff fb28 	bl	800a3d8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6858      	ldr	r0, [r3, #4]
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	6899      	ldr	r1, [r3, #8]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	899a      	ldrh	r2, [r3, #12]
 800ad96:	4b38      	ldr	r3, [pc, #224]	; (800ae78 <lwip_netconn_do_connect+0x144>)
 800ad98:	f003 fa24 	bl	800e1e4 <tcp_connect>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800ada0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d15e      	bne.n	800ae66 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	7f1b      	ldrb	r3, [r3, #28]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bf14      	ite	ne
 800adb6:	2301      	movne	r3, #1
 800adb8:	2300      	moveq	r3, #0
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2203      	movs	r2, #3
 800adc4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d009      	beq.n	800ade0 <lwip_netconn_do_connect+0xac>
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	7f1a      	ldrb	r2, [r3, #28]
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0204 	orr.w	r2, r2, #4
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	771a      	strb	r2, [r3, #28]
 800adde:	e008      	b.n	800adf2 <lwip_netconn_do_connect+0xbe>
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	7f1a      	ldrb	r2, [r3, #28]
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0204 	bic.w	r2, r2, #4
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800adf8:	23fb      	movs	r3, #251	; 0xfb
 800adfa:	75fb      	strb	r3, [r7, #23]
        break;
 800adfc:	e033      	b.n	800ae66 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d006      	beq.n	800ae1e <lwip_netconn_do_connect+0xea>
 800ae10:	4b1a      	ldr	r3, [pc, #104]	; (800ae7c <lwip_netconn_do_connect+0x148>)
 800ae12:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800ae16:	491a      	ldr	r1, [pc, #104]	; (800ae80 <lwip_netconn_do_connect+0x14c>)
 800ae18:	481a      	ldr	r0, [pc, #104]	; (800ae84 <lwip_netconn_do_connect+0x150>)
 800ae1a:	f00b fdd1 	bl	80169c0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800ae1e:	481a      	ldr	r0, [pc, #104]	; (800ae88 <lwip_netconn_do_connect+0x154>)
 800ae20:	f00b fb8d 	bl	801653e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	330c      	adds	r3, #12
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f00b faec 	bl	801640a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800ae32:	4815      	ldr	r0, [pc, #84]	; (800ae88 <lwip_netconn_do_connect+0x154>)
 800ae34:	f00b fb74 	bl	8016520 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d116      	bne.n	800ae70 <lwip_netconn_do_connect+0x13c>
 800ae42:	4b0e      	ldr	r3, [pc, #56]	; (800ae7c <lwip_netconn_do_connect+0x148>)
 800ae44:	f240 5274 	movw	r2, #1396	; 0x574
 800ae48:	490d      	ldr	r1, [pc, #52]	; (800ae80 <lwip_netconn_do_connect+0x14c>)
 800ae4a:	480e      	ldr	r0, [pc, #56]	; (800ae84 <lwip_netconn_do_connect+0x150>)
 800ae4c:	f00b fdb8 	bl	80169c0 <iprintf>
              return;
 800ae50:	e00e      	b.n	800ae70 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800ae52:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <lwip_netconn_do_connect+0x148>)
 800ae54:	f240 527d 	movw	r2, #1405	; 0x57d
 800ae58:	490c      	ldr	r1, [pc, #48]	; (800ae8c <lwip_netconn_do_connect+0x158>)
 800ae5a:	480a      	ldr	r0, [pc, #40]	; (800ae84 <lwip_netconn_do_connect+0x150>)
 800ae5c:	f00b fdb0 	bl	80169c0 <iprintf>
 800ae60:	23fa      	movs	r3, #250	; 0xfa
 800ae62:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800ae64:	e000      	b.n	800ae68 <lwip_netconn_do_connect+0x134>
        break;
 800ae66:	bf00      	nop
    }
  }
  msg->err = err;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	7dfa      	ldrb	r2, [r7, #23]
 800ae6c:	711a      	strb	r2, [r3, #4]
 800ae6e:	e000      	b.n	800ae72 <lwip_netconn_do_connect+0x13e>
              return;
 800ae70:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	0800ac15 	.word	0x0800ac15
 800ae7c:	08019e1c 	.word	0x08019e1c
 800ae80:	0801a178 	.word	0x0801a178
 800ae84:	08019e60 	.word	0x08019e60
 800ae88:	20009ab8 	.word	0x20009ab8
 800ae8c:	0801a200 	.word	0x0801a200

0800ae90 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d022      	beq.n	800aef2 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aeb6:	2b10      	cmp	r3, #16
 800aeb8:	d11b      	bne.n	800aef2 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec6:	d202      	bcs.n	800aece <lwip_netconn_do_recv+0x3e>
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	e001      	b.n	800aed2 <lwip_netconn_do_recv+0x42>
 800aece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aed2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	89fa      	ldrh	r2, [r7, #14]
 800aedc:	4611      	mov	r1, r2
 800aede:	4618      	mov	r0, r3
 800aee0:	f003 f8ea 	bl	800e0b8 <tcp_recved>
        remaining -= recved;
 800aee4:	89fb      	ldrh	r3, [r7, #14]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e6      	bne.n	800aec0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aef2:	bf00      	nop
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <lwip_netconn_do_writemore+0x24>
 800af12:	4b96      	ldr	r3, [pc, #600]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800af14:	f240 6273 	movw	r2, #1651	; 0x673
 800af18:	4995      	ldr	r1, [pc, #596]	; (800b170 <lwip_netconn_do_writemore+0x274>)
 800af1a:	4896      	ldr	r0, [pc, #600]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800af1c:	f00b fd50 	bl	80169c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d006      	beq.n	800af36 <lwip_netconn_do_writemore+0x3a>
 800af28:	4b90      	ldr	r3, [pc, #576]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800af2a:	f240 6274 	movw	r2, #1652	; 0x674
 800af2e:	4992      	ldr	r1, [pc, #584]	; (800b178 <lwip_netconn_do_writemore+0x27c>)
 800af30:	4890      	ldr	r0, [pc, #576]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800af32:	f00b fd45 	bl	80169c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d106      	bne.n	800af4c <lwip_netconn_do_writemore+0x50>
 800af3e:	4b8b      	ldr	r3, [pc, #556]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800af40:	f240 6275 	movw	r2, #1653	; 0x675
 800af44:	498d      	ldr	r1, [pc, #564]	; (800b17c <lwip_netconn_do_writemore+0x280>)
 800af46:	488b      	ldr	r0, [pc, #556]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800af48:	f00b fd3a 	bl	80169c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <lwip_netconn_do_writemore+0x66>
 800af54:	4b85      	ldr	r3, [pc, #532]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800af56:	f240 6276 	movw	r2, #1654	; 0x676
 800af5a:	4989      	ldr	r1, [pc, #548]	; (800b180 <lwip_netconn_do_writemore+0x284>)
 800af5c:	4885      	ldr	r0, [pc, #532]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800af5e:	f00b fd2f 	bl	80169c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	699a      	ldr	r2, [r3, #24]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d306      	bcc.n	800af80 <lwip_netconn_do_writemore+0x84>
 800af72:	4b7e      	ldr	r3, [pc, #504]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800af74:	f240 6277 	movw	r2, #1655	; 0x677
 800af78:	4982      	ldr	r1, [pc, #520]	; (800b184 <lwip_netconn_do_writemore+0x288>)
 800af7a:	487e      	ldr	r0, [pc, #504]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800af7c:	f00b fd20 	bl	80169c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	899b      	ldrh	r3, [r3, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d106      	bne.n	800af98 <lwip_netconn_do_writemore+0x9c>
 800af8a:	4b78      	ldr	r3, [pc, #480]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800af8c:	f240 6279 	movw	r2, #1657	; 0x679
 800af90:	497d      	ldr	r1, [pc, #500]	; (800b188 <lwip_netconn_do_writemore+0x28c>)
 800af92:	4878      	ldr	r0, [pc, #480]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800af94:	f00b fd14 	bl	80169c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	7f1b      	ldrb	r3, [r3, #28]
 800af9e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7f1b      	ldrb	r3, [r3, #28]
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d104      	bne.n	800afb6 <lwip_netconn_do_writemore+0xba>
 800afac:	7ebb      	ldrb	r3, [r7, #26]
 800afae:	f003 0304 	and.w	r3, r3, #4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <lwip_netconn_do_writemore+0xbe>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e000      	b.n	800afbc <lwip_netconn_do_writemore+0xc0>
 800afba:	2300      	movs	r3, #0
 800afbc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	4413      	add	r3, r2
 800afce:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe8:	d307      	bcc.n	800affa <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800afea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afee:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aff0:	7ebb      	ldrb	r3, [r7, #26]
 800aff2:	f043 0302 	orr.w	r3, r3, #2
 800aff6:	76bb      	strb	r3, [r7, #26]
 800aff8:	e001      	b.n	800affe <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b006:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b008:	89fa      	ldrh	r2, [r7, #14]
 800b00a:	8bbb      	ldrh	r3, [r7, #28]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d216      	bcs.n	800b03e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b010:	89fb      	ldrh	r3, [r7, #14]
 800b012:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b014:	7e3b      	ldrb	r3, [r7, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00d      	beq.n	800b036 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b01a:	8bbb      	ldrh	r3, [r7, #28]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10e      	bne.n	800b03e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d102      	bne.n	800b030 <lwip_netconn_do_writemore+0x134>
 800b02a:	f06f 0306 	mvn.w	r3, #6
 800b02e:	e000      	b.n	800b032 <lwip_netconn_do_writemore+0x136>
 800b030:	2300      	movs	r3, #0
 800b032:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b034:	e07d      	b.n	800b132 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b036:	7ebb      	ldrb	r3, [r7, #26]
 800b038:	f043 0302 	orr.w	r3, r3, #2
 800b03c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	691a      	ldr	r2, [r3, #16]
 800b044:	8bbb      	ldrh	r3, [r7, #28]
 800b046:	441a      	add	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a1b      	ldr	r3, [r3, #32]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d906      	bls.n	800b062 <lwip_netconn_do_writemore+0x166>
 800b054:	4b45      	ldr	r3, [pc, #276]	; (800b16c <lwip_netconn_do_writemore+0x270>)
 800b056:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b05a:	494c      	ldr	r1, [pc, #304]	; (800b18c <lwip_netconn_do_writemore+0x290>)
 800b05c:	4845      	ldr	r0, [pc, #276]	; (800b174 <lwip_netconn_do_writemore+0x278>)
 800b05e:	f00b fcaf 	bl	80169c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b062:	8bbb      	ldrh	r3, [r7, #28]
 800b064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b068:	4293      	cmp	r3, r2
 800b06a:	d103      	bne.n	800b074 <lwip_netconn_do_writemore+0x178>
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b072:	d209      	bcs.n	800b088 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b078:	8bba      	ldrh	r2, [r7, #28]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d10b      	bne.n	800b096 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	899b      	ldrh	r3, [r3, #12]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d906      	bls.n	800b096 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b088:	2301      	movs	r3, #1
 800b08a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b08c:	7ebb      	ldrb	r3, [r7, #26]
 800b08e:	f043 0302 	orr.w	r3, r3, #2
 800b092:	76bb      	strb	r3, [r7, #26]
 800b094:	e001      	b.n	800b09a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6858      	ldr	r0, [r3, #4]
 800b09e:	7ebb      	ldrb	r3, [r7, #26]
 800b0a0:	8bba      	ldrh	r2, [r7, #28]
 800b0a2:	6979      	ldr	r1, [r7, #20]
 800b0a4:	f006 ff28 	bl	8011ef8 <tcp_write>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b0ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d12c      	bne.n	800b10e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	6999      	ldr	r1, [r3, #24]
 800b0ba:	8bba      	ldrh	r2, [r7, #28]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	440a      	add	r2, r1
 800b0c2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	6919      	ldr	r1, [r3, #16]
 800b0ca:	8bba      	ldrh	r2, [r7, #28]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	440a      	add	r2, r1
 800b0d2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	691a      	ldr	r2, [r3, #16]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d113      	bne.n	800b10e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	899a      	ldrh	r2, [r3, #12]
 800b0ec:	3a01      	subs	r2, #1
 800b0ee:	b292      	uxth	r2, r2
 800b0f0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	899b      	ldrh	r3, [r3, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d008      	beq.n	800b10e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	689a      	ldr	r2, [r3, #8]
 800b102:	3208      	adds	r2, #8
 800b104:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	2200      	movs	r2, #0
 800b10c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b10e:	7e7b      	ldrb	r3, [r7, #25]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <lwip_netconn_do_writemore+0x222>
 800b114:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f43f af50 	beq.w	800afbe <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b11e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <lwip_netconn_do_writemore+0x234>
 800b126:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b12a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b12e:	d146      	bne.n	800b1be <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b130:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b132:	7e3b      	ldrb	r3, [r7, #24]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d02b      	beq.n	800b190 <lwip_netconn_do_writemore+0x294>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	429a      	cmp	r2, r3
 800b146:	d223      	bcs.n	800b190 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d005      	beq.n	800b15c <lwip_netconn_do_writemore+0x260>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2200      	movs	r2, #0
 800b156:	2103      	movs	r1, #3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	7f1b      	ldrb	r3, [r3, #28]
 800b160:	f043 0310 	orr.w	r3, r3, #16
 800b164:	b2da      	uxtb	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	771a      	strb	r2, [r3, #28]
 800b16a:	e028      	b.n	800b1be <lwip_netconn_do_writemore+0x2c2>
 800b16c:	08019e1c 	.word	0x08019e1c
 800b170:	08019f10 	.word	0x08019f10
 800b174:	08019e60 	.word	0x08019e60
 800b178:	0801a218 	.word	0x0801a218
 800b17c:	08019f20 	.word	0x08019f20
 800b180:	0801a238 	.word	0x0801a238
 800b184:	0801a250 	.word	0x0801a250
 800b188:	0801a290 	.word	0x0801a290
 800b18c:	0801a2b8 	.word	0x0801a2b8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b198:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b19c:	d305      	bcc.n	800b1aa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d909      	bls.n	800b1be <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <lwip_netconn_do_writemore+0x2c2>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2103      	movs	r1, #3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b1be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d11d      	bne.n	800b202 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	699a      	ldr	r2, [r3, #24]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d002      	beq.n	800b1dc <lwip_netconn_do_writemore+0x2e0>
 800b1d6:	7e3b      	ldrb	r3, [r7, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f007 fc71 	bl	8012acc <tcp_output>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b1ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b1f2:	f113 0f04 	cmn.w	r3, #4
 800b1f6:	d12c      	bne.n	800b252 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1f8:	7b3b      	ldrb	r3, [r7, #12]
 800b1fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	76fb      	strb	r3, [r7, #27]
 800b200:	e027      	b.n	800b252 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b202:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b20a:	d120      	bne.n	800b24e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4618      	mov	r0, r3
 800b212:	f007 fc5b 	bl	8012acc <tcp_output>
 800b216:	4603      	mov	r3, r0
 800b218:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b21a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b21e:	f113 0f04 	cmn.w	r3, #4
 800b222:	d104      	bne.n	800b22e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b224:	7b7b      	ldrb	r3, [r7, #13]
 800b226:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b228:	2301      	movs	r3, #1
 800b22a:	76fb      	strb	r3, [r7, #27]
 800b22c:	e011      	b.n	800b252 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b22e:	7e3b      	ldrb	r3, [r7, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00e      	beq.n	800b252 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d102      	bne.n	800b244 <lwip_netconn_do_writemore+0x348>
 800b23e:	f06f 0306 	mvn.w	r3, #6
 800b242:	e000      	b.n	800b246 <lwip_netconn_do_writemore+0x34a>
 800b244:	2300      	movs	r3, #0
 800b246:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b248:	2301      	movs	r3, #1
 800b24a:	76fb      	strb	r3, [r7, #27]
 800b24c:	e001      	b.n	800b252 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b24e:	2301      	movs	r3, #1
 800b250:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b252:	7efb      	ldrb	r3, [r7, #27]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d015      	beq.n	800b284 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	330c      	adds	r3, #12
 800b260:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	7ffa      	ldrb	r2, [r7, #31]
 800b268:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b276:	78fb      	ldrb	r3, [r7, #3]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d006      	beq.n	800b28a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b27c:	68b8      	ldr	r0, [r7, #8]
 800b27e:	f00b f8f5 	bl	801646c <sys_sem_signal>
 800b282:	e002      	b.n	800b28a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b288:	e000      	b.n	800b28c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3720      	adds	r7, #32
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fdf8 	bl	8009e9a <netconn_err>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d163      	bne.n	800b37e <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2c0:	2b10      	cmp	r3, #16
 800b2c2:	d15c      	bne.n	800b37e <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d002      	beq.n	800b2d4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b2ce:	23fb      	movs	r3, #251	; 0xfb
 800b2d0:	73fb      	strb	r3, [r7, #15]
 800b2d2:	e054      	b.n	800b37e <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d04d      	beq.n	800b37a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <lwip_netconn_do_write+0x6a>
 800b2f0:	4b27      	ldr	r3, [pc, #156]	; (800b390 <lwip_netconn_do_write+0xfc>)
 800b2f2:	f240 7223 	movw	r2, #1827	; 0x723
 800b2f6:	4927      	ldr	r1, [pc, #156]	; (800b394 <lwip_netconn_do_write+0x100>)
 800b2f8:	4827      	ldr	r0, [pc, #156]	; (800b398 <lwip_netconn_do_write+0x104>)
 800b2fa:	f00b fb61 	bl	80169c0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <lwip_netconn_do_write+0x80>
 800b306:	4b22      	ldr	r3, [pc, #136]	; (800b390 <lwip_netconn_do_write+0xfc>)
 800b308:	f240 7224 	movw	r2, #1828	; 0x724
 800b30c:	4923      	ldr	r1, [pc, #140]	; (800b39c <lwip_netconn_do_write+0x108>)
 800b30e:	4822      	ldr	r0, [pc, #136]	; (800b398 <lwip_netconn_do_write+0x104>)
 800b310:	f00b fb56 	bl	80169c0 <iprintf>
        msg->conn->current_msg = msg;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2100      	movs	r1, #0
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff fdea 	bl	800aefc <lwip_netconn_do_writemore>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d02b      	beq.n	800b386 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d006      	beq.n	800b346 <lwip_netconn_do_write+0xb2>
 800b338:	4b15      	ldr	r3, [pc, #84]	; (800b390 <lwip_netconn_do_write+0xfc>)
 800b33a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b33e:	4918      	ldr	r1, [pc, #96]	; (800b3a0 <lwip_netconn_do_write+0x10c>)
 800b340:	4815      	ldr	r0, [pc, #84]	; (800b398 <lwip_netconn_do_write+0x104>)
 800b342:	f00b fb3d 	bl	80169c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b346:	4817      	ldr	r0, [pc, #92]	; (800b3a4 <lwip_netconn_do_write+0x110>)
 800b348:	f00b f8f9 	bl	801653e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	330c      	adds	r3, #12
 800b352:	2100      	movs	r1, #0
 800b354:	4618      	mov	r0, r3
 800b356:	f00b f858 	bl	801640a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b35a:	4812      	ldr	r0, [pc, #72]	; (800b3a4 <lwip_netconn_do_write+0x110>)
 800b35c:	f00b f8e0 	bl	8016520 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	785b      	ldrb	r3, [r3, #1]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d10d      	bne.n	800b386 <lwip_netconn_do_write+0xf2>
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <lwip_netconn_do_write+0xfc>)
 800b36c:	f240 722c 	movw	r2, #1836	; 0x72c
 800b370:	490b      	ldr	r1, [pc, #44]	; (800b3a0 <lwip_netconn_do_write+0x10c>)
 800b372:	4809      	ldr	r0, [pc, #36]	; (800b398 <lwip_netconn_do_write+0x104>)
 800b374:	f00b fb24 	bl	80169c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b378:	e005      	b.n	800b386 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800b37a:	23f5      	movs	r3, #245	; 0xf5
 800b37c:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	7bfa      	ldrb	r2, [r7, #15]
 800b382:	711a      	strb	r2, [r3, #4]
 800b384:	e000      	b.n	800b388 <lwip_netconn_do_write+0xf4>
        return;
 800b386:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	08019e1c 	.word	0x08019e1c
 800b394:	0801a15c 	.word	0x0801a15c
 800b398:	08019e60 	.word	0x08019e60
 800b39c:	0801a2e4 	.word	0x0801a2e4
 800b3a0:	0801a178 	.word	0x0801a178
 800b3a4:	20009ab8 	.word	0x20009ab8

0800b3a8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	785b      	ldrb	r3, [r3, #1]
 800b3ba:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d069      	beq.n	800b49a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b3d0:	2b10      	cmp	r3, #16
 800b3d2:	d162      	bne.n	800b49a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d002      	beq.n	800b3e2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d05b      	beq.n	800b49a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d103      	bne.n	800b3f0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	22f5      	movs	r2, #245	; 0xf5
 800b3ec:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b3ee:	e059      	b.n	800b4a4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d103      	bne.n	800b3fe <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	22fb      	movs	r2, #251	; 0xfb
 800b3fa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b3fc:	e052      	b.n	800b4a4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	7a1b      	ldrb	r3, [r3, #8]
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d004      	beq.n	800b414 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff f916 	bl	800a640 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d006      	beq.n	800b42c <lwip_netconn_do_close+0x84>
 800b41e:	4b23      	ldr	r3, [pc, #140]	; (800b4ac <lwip_netconn_do_close+0x104>)
 800b420:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b424:	4922      	ldr	r1, [pc, #136]	; (800b4b0 <lwip_netconn_do_close+0x108>)
 800b426:	4823      	ldr	r0, [pc, #140]	; (800b4b4 <lwip_netconn_do_close+0x10c>)
 800b428:	f00b faca 	bl	80169c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2204      	movs	r2, #4
 800b432:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2100      	movs	r1, #0
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff f97a 	bl	800a73c <lwip_netconn_do_close_internal>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d029      	beq.n	800b4a2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b04      	cmp	r3, #4
 800b456:	d006      	beq.n	800b466 <lwip_netconn_do_close+0xbe>
 800b458:	4b14      	ldr	r3, [pc, #80]	; (800b4ac <lwip_netconn_do_close+0x104>)
 800b45a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b45e:	4916      	ldr	r1, [pc, #88]	; (800b4b8 <lwip_netconn_do_close+0x110>)
 800b460:	4814      	ldr	r0, [pc, #80]	; (800b4b4 <lwip_netconn_do_close+0x10c>)
 800b462:	f00b faad 	bl	80169c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b466:	4815      	ldr	r0, [pc, #84]	; (800b4bc <lwip_netconn_do_close+0x114>)
 800b468:	f00b f869 	bl	801653e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	330c      	adds	r3, #12
 800b472:	2100      	movs	r1, #0
 800b474:	4618      	mov	r0, r3
 800b476:	f00a ffc8 	bl	801640a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b47a:	4810      	ldr	r0, [pc, #64]	; (800b4bc <lwip_netconn_do_close+0x114>)
 800b47c:	f00b f850 	bl	8016520 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00b      	beq.n	800b4a2 <lwip_netconn_do_close+0xfa>
 800b48a:	4b08      	ldr	r3, [pc, #32]	; (800b4ac <lwip_netconn_do_close+0x104>)
 800b48c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b490:	4909      	ldr	r1, [pc, #36]	; (800b4b8 <lwip_netconn_do_close+0x110>)
 800b492:	4808      	ldr	r0, [pc, #32]	; (800b4b4 <lwip_netconn_do_close+0x10c>)
 800b494:	f00b fa94 	bl	80169c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b498:	e003      	b.n	800b4a2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	22f5      	movs	r2, #245	; 0xf5
 800b49e:	711a      	strb	r2, [r3, #4]
 800b4a0:	e000      	b.n	800b4a4 <lwip_netconn_do_close+0xfc>
      return;
 800b4a2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	08019e1c 	.word	0x08019e1c
 800b4b0:	0801a15c 	.word	0x0801a15c
 800b4b4:	08019e60 	.word	0x08019e60
 800b4b8:	0801a178 	.word	0x0801a178
 800b4bc:	20009ab8 	.word	0x20009ab8

0800b4c0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d013      	beq.n	800b4f6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00b      	beq.n	800b4ee <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f001 fefe 	bl	800d2dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	605a      	str	r2, [r3, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	2005      	movs	r0, #5
 800b4f2:	f001 f853 	bl	800c59c <memp_free>
  }
}
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d108      	bne.n	800b520 <netbuf_next+0x20>
 800b50e:	4b11      	ldr	r3, [pc, #68]	; (800b554 <netbuf_next+0x54>)
 800b510:	22e0      	movs	r2, #224	; 0xe0
 800b512:	4911      	ldr	r1, [pc, #68]	; (800b558 <netbuf_next+0x58>)
 800b514:	4811      	ldr	r0, [pc, #68]	; (800b55c <netbuf_next+0x5c>)
 800b516:	f00b fa53 	bl	80169c0 <iprintf>
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b51e:	e014      	b.n	800b54a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <netbuf_next+0x30>
    return -1;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b52e:	e00c      	b.n	800b54a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <netbuf_next+0x48>
    return 1;
 800b544:	2301      	movs	r3, #1
 800b546:	e000      	b.n	800b54a <netbuf_next+0x4a>
  }
  return 0;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	0801a310 	.word	0x0801a310
 800b558:	0801a470 	.word	0x0801a470
 800b55c:	0801a360 	.word	0x0801a360

0800b560 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b56a:	f008 fb89 	bl	8013c80 <sys_timeouts_sleeptime>
 800b56e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b576:	d10b      	bne.n	800b590 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b578:	4813      	ldr	r0, [pc, #76]	; (800b5c8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b57a:	f00a ffe0 	bl	801653e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b57e:	2200      	movs	r2, #0
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f00a feb6 	bl	80162f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b588:	480f      	ldr	r0, [pc, #60]	; (800b5c8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b58a:	f00a ffc9 	bl	8016520 <sys_mutex_lock>
    return;
 800b58e:	e018      	b.n	800b5c2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d102      	bne.n	800b59c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b596:	f008 fb39 	bl	8013c0c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b59a:	e7e6      	b.n	800b56a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b59c:	480a      	ldr	r0, [pc, #40]	; (800b5c8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b59e:	f00a ffce 	bl	801653e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f00a fea4 	bl	80162f4 <sys_arch_mbox_fetch>
 800b5ac:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b5ae:	4806      	ldr	r0, [pc, #24]	; (800b5c8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b5b0:	f00a ffb6 	bl	8016520 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ba:	d102      	bne.n	800b5c2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b5bc:	f008 fb26 	bl	8013c0c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b5c0:	e7d3      	b.n	800b56a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20009ab8 	.word	0x20009ab8

0800b5cc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b5d4:	4810      	ldr	r0, [pc, #64]	; (800b618 <tcpip_thread+0x4c>)
 800b5d6:	f00a ffa3 	bl	8016520 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b5da:	4b10      	ldr	r3, [pc, #64]	; (800b61c <tcpip_thread+0x50>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d005      	beq.n	800b5ee <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b5e2:	4b0e      	ldr	r3, [pc, #56]	; (800b61c <tcpip_thread+0x50>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a0e      	ldr	r2, [pc, #56]	; (800b620 <tcpip_thread+0x54>)
 800b5e8:	6812      	ldr	r2, [r2, #0]
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b5ee:	f107 030c 	add.w	r3, r7, #12
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	480b      	ldr	r0, [pc, #44]	; (800b624 <tcpip_thread+0x58>)
 800b5f6:	f7ff ffb3 	bl	800b560 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d106      	bne.n	800b60e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b600:	4b09      	ldr	r3, [pc, #36]	; (800b628 <tcpip_thread+0x5c>)
 800b602:	2291      	movs	r2, #145	; 0x91
 800b604:	4909      	ldr	r1, [pc, #36]	; (800b62c <tcpip_thread+0x60>)
 800b606:	480a      	ldr	r0, [pc, #40]	; (800b630 <tcpip_thread+0x64>)
 800b608:	f00b f9da 	bl	80169c0 <iprintf>
      continue;
 800b60c:	e003      	b.n	800b616 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	4618      	mov	r0, r3
 800b612:	f000 f80f 	bl	800b634 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b616:	e7ea      	b.n	800b5ee <tcpip_thread+0x22>
 800b618:	20009ab8 	.word	0x20009ab8
 800b61c:	20009aac 	.word	0x20009aac
 800b620:	20009ab0 	.word	0x20009ab0
 800b624:	20009ab4 	.word	0x20009ab4
 800b628:	0801a4a8 	.word	0x0801a4a8
 800b62c:	0801a4d8 	.word	0x0801a4d8
 800b630:	0801a4f8 	.word	0x0801a4f8

0800b634 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b02      	cmp	r3, #2
 800b642:	d026      	beq.n	800b692 <tcpip_thread_handle_msg+0x5e>
 800b644:	2b02      	cmp	r3, #2
 800b646:	dc2b      	bgt.n	800b6a0 <tcpip_thread_handle_msg+0x6c>
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <tcpip_thread_handle_msg+0x1e>
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d015      	beq.n	800b67c <tcpip_thread_handle_msg+0x48>
 800b650:	e026      	b.n	800b6a0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	6850      	ldr	r0, [r2, #4]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	6892      	ldr	r2, [r2, #8]
 800b65e:	4611      	mov	r1, r2
 800b660:	4798      	blx	r3
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d004      	beq.n	800b672 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f001 fe35 	bl	800d2dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	2008      	movs	r0, #8
 800b676:	f000 ff91 	bl	800c59c <memp_free>
      break;
 800b67a:	e018      	b.n	800b6ae <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6892      	ldr	r2, [r2, #8]
 800b684:	4610      	mov	r0, r2
 800b686:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	2007      	movs	r0, #7
 800b68c:	f000 ff86 	bl	800c59c <memp_free>
      break;
 800b690:	e00d      	b.n	800b6ae <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6892      	ldr	r2, [r2, #8]
 800b69a:	4610      	mov	r0, r2
 800b69c:	4798      	blx	r3
      break;
 800b69e:	e006      	b.n	800b6ae <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b6a0:	4b05      	ldr	r3, [pc, #20]	; (800b6b8 <tcpip_thread_handle_msg+0x84>)
 800b6a2:	22cf      	movs	r2, #207	; 0xcf
 800b6a4:	4905      	ldr	r1, [pc, #20]	; (800b6bc <tcpip_thread_handle_msg+0x88>)
 800b6a6:	4806      	ldr	r0, [pc, #24]	; (800b6c0 <tcpip_thread_handle_msg+0x8c>)
 800b6a8:	f00b f98a 	bl	80169c0 <iprintf>
      break;
 800b6ac:	bf00      	nop
  }
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	0801a4a8 	.word	0x0801a4a8
 800b6bc:	0801a4d8 	.word	0x0801a4d8
 800b6c0:	0801a4f8 	.word	0x0801a4f8

0800b6c4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b6d0:	481a      	ldr	r0, [pc, #104]	; (800b73c <tcpip_inpkt+0x78>)
 800b6d2:	f00a fe57 	bl	8016384 <sys_mbox_valid>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d105      	bne.n	800b6e8 <tcpip_inpkt+0x24>
 800b6dc:	4b18      	ldr	r3, [pc, #96]	; (800b740 <tcpip_inpkt+0x7c>)
 800b6de:	22fc      	movs	r2, #252	; 0xfc
 800b6e0:	4918      	ldr	r1, [pc, #96]	; (800b744 <tcpip_inpkt+0x80>)
 800b6e2:	4819      	ldr	r0, [pc, #100]	; (800b748 <tcpip_inpkt+0x84>)
 800b6e4:	f00b f96c 	bl	80169c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b6e8:	2008      	movs	r0, #8
 800b6ea:	f000 fee1 	bl	800c4b0 <memp_malloc>
 800b6ee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6fa:	e01a      	b.n	800b732 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b714:	6979      	ldr	r1, [r7, #20]
 800b716:	4809      	ldr	r0, [pc, #36]	; (800b73c <tcpip_inpkt+0x78>)
 800b718:	f00a fdd2 	bl	80162c0 <sys_mbox_trypost>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d006      	beq.n	800b730 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	2008      	movs	r0, #8
 800b726:	f000 ff39 	bl	800c59c <memp_free>
    return ERR_MEM;
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b72e:	e000      	b.n	800b732 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b730:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20009ab4 	.word	0x20009ab4
 800b740:	0801a4a8 	.word	0x0801a4a8
 800b744:	0801a520 	.word	0x0801a520
 800b748:	0801a4f8 	.word	0x0801a4f8

0800b74c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b75c:	f003 0318 	and.w	r3, r3, #24
 800b760:	2b00      	cmp	r3, #0
 800b762:	d006      	beq.n	800b772 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b764:	4a08      	ldr	r2, [pc, #32]	; (800b788 <tcpip_input+0x3c>)
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff ffab 	bl	800b6c4 <tcpip_inpkt>
 800b76e:	4603      	mov	r3, r0
 800b770:	e005      	b.n	800b77e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b772:	4a06      	ldr	r2, [pc, #24]	; (800b78c <tcpip_input+0x40>)
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff ffa4 	bl	800b6c4 <tcpip_inpkt>
 800b77c:	4603      	mov	r3, r0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	080160bd 	.word	0x080160bd
 800b78c:	08014fd9 	.word	0x08014fd9

0800b790 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b79a:	4819      	ldr	r0, [pc, #100]	; (800b800 <tcpip_try_callback+0x70>)
 800b79c:	f00a fdf2 	bl	8016384 <sys_mbox_valid>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <tcpip_try_callback+0x24>
 800b7a6:	4b17      	ldr	r3, [pc, #92]	; (800b804 <tcpip_try_callback+0x74>)
 800b7a8:	f240 125d 	movw	r2, #349	; 0x15d
 800b7ac:	4916      	ldr	r1, [pc, #88]	; (800b808 <tcpip_try_callback+0x78>)
 800b7ae:	4817      	ldr	r0, [pc, #92]	; (800b80c <tcpip_try_callback+0x7c>)
 800b7b0:	f00b f906 	bl	80169c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b7b4:	2007      	movs	r0, #7
 800b7b6:	f000 fe7b 	bl	800c4b0 <memp_malloc>
 800b7ba:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d102      	bne.n	800b7c8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b7c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7c6:	e017      	b.n	800b7f8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b7da:	68f9      	ldr	r1, [r7, #12]
 800b7dc:	4808      	ldr	r0, [pc, #32]	; (800b800 <tcpip_try_callback+0x70>)
 800b7de:	f00a fd6f 	bl	80162c0 <sys_mbox_trypost>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d006      	beq.n	800b7f6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	2007      	movs	r0, #7
 800b7ec:	f000 fed6 	bl	800c59c <memp_free>
    return ERR_MEM;
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7f4:	e000      	b.n	800b7f8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20009ab4 	.word	0x20009ab4
 800b804:	0801a4a8 	.word	0x0801a4a8
 800b808:	0801a520 	.word	0x0801a520
 800b80c:	0801a4f8 	.word	0x0801a4f8

0800b810 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b81c:	4806      	ldr	r0, [pc, #24]	; (800b838 <tcpip_send_msg_wait_sem+0x28>)
 800b81e:	f00a fe7f 	bl	8016520 <sys_mutex_lock>
  fn(apimsg);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	68b8      	ldr	r0, [r7, #8]
 800b826:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b828:	4803      	ldr	r0, [pc, #12]	; (800b838 <tcpip_send_msg_wait_sem+0x28>)
 800b82a:	f00a fe88 	bl	801653e <sys_mutex_unlock>
  return ERR_OK;
 800b82e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20009ab8 	.word	0x20009ab8

0800b83c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af02      	add	r7, sp, #8
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b846:	f000 f98b 	bl	800bb60 <lwip_init>

  tcpip_init_done = initfunc;
 800b84a:	4a17      	ldr	r2, [pc, #92]	; (800b8a8 <tcpip_init+0x6c>)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b850:	4a16      	ldr	r2, [pc, #88]	; (800b8ac <tcpip_init+0x70>)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b856:	2106      	movs	r1, #6
 800b858:	4815      	ldr	r0, [pc, #84]	; (800b8b0 <tcpip_init+0x74>)
 800b85a:	f00a fd05 	bl	8016268 <sys_mbox_new>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d006      	beq.n	800b872 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b864:	4b13      	ldr	r3, [pc, #76]	; (800b8b4 <tcpip_init+0x78>)
 800b866:	f240 2261 	movw	r2, #609	; 0x261
 800b86a:	4913      	ldr	r1, [pc, #76]	; (800b8b8 <tcpip_init+0x7c>)
 800b86c:	4813      	ldr	r0, [pc, #76]	; (800b8bc <tcpip_init+0x80>)
 800b86e:	f00b f8a7 	bl	80169c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b872:	4813      	ldr	r0, [pc, #76]	; (800b8c0 <tcpip_init+0x84>)
 800b874:	f00a fe3e 	bl	80164f4 <sys_mutex_new>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b87e:	4b0d      	ldr	r3, [pc, #52]	; (800b8b4 <tcpip_init+0x78>)
 800b880:	f240 2265 	movw	r2, #613	; 0x265
 800b884:	490f      	ldr	r1, [pc, #60]	; (800b8c4 <tcpip_init+0x88>)
 800b886:	480d      	ldr	r0, [pc, #52]	; (800b8bc <tcpip_init+0x80>)
 800b888:	f00b f89a 	bl	80169c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b88c:	2318      	movs	r3, #24
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b894:	2200      	movs	r2, #0
 800b896:	490c      	ldr	r1, [pc, #48]	; (800b8c8 <tcpip_init+0x8c>)
 800b898:	480c      	ldr	r0, [pc, #48]	; (800b8cc <tcpip_init+0x90>)
 800b89a:	f00a fe5d 	bl	8016558 <sys_thread_new>
}
 800b89e:	bf00      	nop
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20009aac 	.word	0x20009aac
 800b8ac:	20009ab0 	.word	0x20009ab0
 800b8b0:	20009ab4 	.word	0x20009ab4
 800b8b4:	0801a4a8 	.word	0x0801a4a8
 800b8b8:	0801a530 	.word	0x0801a530
 800b8bc:	0801a4f8 	.word	0x0801a4f8
 800b8c0:	20009ab8 	.word	0x20009ab8
 800b8c4:	0801a554 	.word	0x0801a554
 800b8c8:	0800b5cd 	.word	0x0800b5cd
 800b8cc:	0801a578 	.word	0x0801a578

0800b8d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b8da:	88fb      	ldrh	r3, [r7, #6]
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	b21a      	sxth	r2, r3
 800b8e0:	88fb      	ldrh	r3, [r7, #6]
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	b21b      	sxth	r3, r3
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	b21b      	sxth	r3, r3
 800b8ec:	b29b      	uxth	r3, r3
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b083      	sub	sp, #12
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	061a      	lsls	r2, r3, #24
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	021b      	lsls	r3, r3, #8
 800b90a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b90e:	431a      	orrs	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	0a1b      	lsrs	r3, r3, #8
 800b914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b918:	431a      	orrs	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	0e1b      	lsrs	r3, r3, #24
 800b91e:	4313      	orrs	r3, r2
}
 800b920:	4618      	mov	r0, r3
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	; 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00d      	beq.n	800b96c <lwip_standard_chksum+0x40>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dd0a      	ble.n	800b96c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b956:	69fa      	ldr	r2, [r7, #28]
 800b958:	1c53      	adds	r3, r2, #1
 800b95a:	61fb      	str	r3, [r7, #28]
 800b95c:	f107 030e 	add.w	r3, r7, #14
 800b960:	3301      	adds	r3, #1
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	701a      	strb	r2, [r3, #0]
    len--;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	3b01      	subs	r3, #1
 800b96a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b970:	e00a      	b.n	800b988 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	1c9a      	adds	r2, r3, #2
 800b976:	61ba      	str	r2, [r7, #24]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	4413      	add	r3, r2
 800b980:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	3b02      	subs	r3, #2
 800b986:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	dcf1      	bgt.n	800b972 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	dd04      	ble.n	800b99e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b994:	f107 030e 	add.w	r3, r7, #14
 800b998:	69ba      	ldr	r2, [r7, #24]
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b99e:	89fb      	ldrh	r3, [r7, #14]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	0c1a      	lsrs	r2, r3, #16
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4413      	add	r3, r2
 800b9b2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	0c1a      	lsrs	r2, r3, #16
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	4413      	add	r3, r2
 800b9be:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d007      	beq.n	800b9d6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	021b      	lsls	r3, r3, #8
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	0a1b      	lsrs	r3, r3, #8
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	b29b      	uxth	r3, r3
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3724      	adds	r7, #36	; 0x24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b086      	sub	sp, #24
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	60f8      	str	r0, [r7, #12]
 800b9ee:	607b      	str	r3, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	72fb      	strb	r3, [r7, #11]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	617b      	str	r3, [r7, #20]
 800ba00:	e02b      	b.n	800ba5a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	895b      	ldrh	r3, [r3, #10]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f7ff ff8d 	bl	800b92c <lwip_standard_chksum>
 800ba12:	4603      	mov	r3, r0
 800ba14:	461a      	mov	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4413      	add	r3, r2
 800ba1a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	0c1a      	lsrs	r2, r3, #16
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	4413      	add	r3, r2
 800ba26:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	895b      	ldrh	r3, [r3, #10]
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00e      	beq.n	800ba54 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bf0c      	ite	eq
 800ba3c:	2301      	moveq	r3, #1
 800ba3e:	2300      	movne	r3, #0
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	021b      	lsls	r3, r3, #8
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	0a1b      	lsrs	r3, r3, #8
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	4313      	orrs	r3, r2
 800ba52:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1d0      	bne.n	800ba02 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	4313      	orrs	r3, r2
 800ba74:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800ba76:	7afb      	ldrb	r3, [r7, #11]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff ff28 	bl	800b8d0 <lwip_htons>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4413      	add	r3, r2
 800ba88:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800ba8a:	893b      	ldrh	r3, [r7, #8]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7ff ff1f 	bl	800b8d0 <lwip_htons>
 800ba92:	4603      	mov	r3, r0
 800ba94:	461a      	mov	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4413      	add	r3, r2
 800ba9a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	0c1a      	lsrs	r2, r3, #16
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	4413      	add	r3, r2
 800baa6:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	0c1a      	lsrs	r2, r3, #16
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4413      	add	r3, r2
 800bab2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	43db      	mvns	r3, r3
 800baba:	b29b      	uxth	r3, r3
}
 800babc:	4618      	mov	r0, r3
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	607b      	str	r3, [r7, #4]
 800bace:	460b      	mov	r3, r1
 800bad0:	72fb      	strb	r3, [r7, #11]
 800bad2:	4613      	mov	r3, r2
 800bad4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	b29b      	uxth	r3, r3
 800bae0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	0c1b      	lsrs	r3, r3, #16
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	4413      	add	r3, r2
 800baea:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	4413      	add	r3, r2
 800bafa:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	0c1b      	lsrs	r3, r3, #16
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	4413      	add	r3, r2
 800bb04:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	0c1a      	lsrs	r2, r3, #16
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	4413      	add	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	0c1a      	lsrs	r2, r3, #16
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800bb1e:	893a      	ldrh	r2, [r7, #8]
 800bb20:	7af9      	ldrb	r1, [r7, #11]
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f7ff ff5e 	bl	800b9e6 <inet_cksum_pseudo_base>
 800bb2a:	4603      	mov	r3, r0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	607b      	str	r3, [r7, #4]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	72fb      	strb	r3, [r7, #11]
 800bb42:	4613      	mov	r3, r2
 800bb44:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800bb46:	893a      	ldrh	r2, [r7, #8]
 800bb48:	7af9      	ldrb	r1, [r7, #11]
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f7ff ffb7 	bl	800bac4 <inet_chksum_pseudo>
 800bb56:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bb6a:	f00a fcb7 	bl	80164dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bb6e:	f000 f8d3 	bl	800bd18 <mem_init>
  memp_init();
 800bb72:	f000 fc2f 	bl	800c3d4 <memp_init>
  pbuf_init();
  netif_init();
 800bb76:	f000 fd3b 	bl	800c5f0 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bb7a:	f001 fe49 	bl	800d810 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bb7e:	f007 fffd 	bl	8013b7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bb96:	4b05      	ldr	r3, [pc, #20]	; (800bbac <ptr_to_mem+0x20>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	4413      	add	r3, r2
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	370c      	adds	r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	2000eae8 	.word	0x2000eae8

0800bbb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <mem_to_ptr+0x20>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	b29b      	uxth	r3, r3
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	2000eae8 	.word	0x2000eae8

0800bbd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bbd4:	b590      	push	{r4, r7, lr}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bbdc:	4b45      	ldr	r3, [pc, #276]	; (800bcf4 <plug_holes+0x120>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d206      	bcs.n	800bbf4 <plug_holes+0x20>
 800bbe6:	4b44      	ldr	r3, [pc, #272]	; (800bcf8 <plug_holes+0x124>)
 800bbe8:	f240 12df 	movw	r2, #479	; 0x1df
 800bbec:	4943      	ldr	r1, [pc, #268]	; (800bcfc <plug_holes+0x128>)
 800bbee:	4844      	ldr	r0, [pc, #272]	; (800bd00 <plug_holes+0x12c>)
 800bbf0:	f00a fee6 	bl	80169c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bbf4:	4b43      	ldr	r3, [pc, #268]	; (800bd04 <plug_holes+0x130>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d306      	bcc.n	800bc0c <plug_holes+0x38>
 800bbfe:	4b3e      	ldr	r3, [pc, #248]	; (800bcf8 <plug_holes+0x124>)
 800bc00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bc04:	4940      	ldr	r1, [pc, #256]	; (800bd08 <plug_holes+0x134>)
 800bc06:	483e      	ldr	r0, [pc, #248]	; (800bd00 <plug_holes+0x12c>)
 800bc08:	f00a feda 	bl	80169c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	791b      	ldrb	r3, [r3, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d006      	beq.n	800bc22 <plug_holes+0x4e>
 800bc14:	4b38      	ldr	r3, [pc, #224]	; (800bcf8 <plug_holes+0x124>)
 800bc16:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bc1a:	493c      	ldr	r1, [pc, #240]	; (800bd0c <plug_holes+0x138>)
 800bc1c:	4838      	ldr	r0, [pc, #224]	; (800bd00 <plug_holes+0x12c>)
 800bc1e:	f00a fecf 	bl	80169c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bc2a:	d906      	bls.n	800bc3a <plug_holes+0x66>
 800bc2c:	4b32      	ldr	r3, [pc, #200]	; (800bcf8 <plug_holes+0x124>)
 800bc2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bc32:	4937      	ldr	r1, [pc, #220]	; (800bd10 <plug_holes+0x13c>)
 800bc34:	4832      	ldr	r0, [pc, #200]	; (800bd00 <plug_holes+0x12c>)
 800bc36:	f00a fec3 	bl	80169c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7ff ffa4 	bl	800bb8c <ptr_to_mem>
 800bc44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d024      	beq.n	800bc98 <plug_holes+0xc4>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	791b      	ldrb	r3, [r3, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d120      	bne.n	800bc98 <plug_holes+0xc4>
 800bc56:	4b2b      	ldr	r3, [pc, #172]	; (800bd04 <plug_holes+0x130>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d01b      	beq.n	800bc98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bc60:	4b2c      	ldr	r3, [pc, #176]	; (800bd14 <plug_holes+0x140>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d102      	bne.n	800bc70 <plug_holes+0x9c>
      lfree = mem;
 800bc6a:	4a2a      	ldr	r2, [pc, #168]	; (800bd14 <plug_holes+0x140>)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	881a      	ldrh	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bc80:	d00a      	beq.n	800bc98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff ff80 	bl	800bb8c <ptr_to_mem>
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7ff ff8e 	bl	800bbb0 <mem_to_ptr>
 800bc94:	4603      	mov	r3, r0
 800bc96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	885b      	ldrh	r3, [r3, #2]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7ff ff75 	bl	800bb8c <ptr_to_mem>
 800bca2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d01f      	beq.n	800bcec <plug_holes+0x118>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	791b      	ldrb	r3, [r3, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d11b      	bne.n	800bcec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bcb4:	4b17      	ldr	r3, [pc, #92]	; (800bd14 <plug_holes+0x140>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d102      	bne.n	800bcc4 <plug_holes+0xf0>
      lfree = pmem;
 800bcbe:	4a15      	ldr	r2, [pc, #84]	; (800bd14 <plug_holes+0x140>)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	881a      	ldrh	r2, [r3, #0]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bcd4:	d00a      	beq.n	800bcec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff ff56 	bl	800bb8c <ptr_to_mem>
 800bce0:	4604      	mov	r4, r0
 800bce2:	68b8      	ldr	r0, [r7, #8]
 800bce4:	f7ff ff64 	bl	800bbb0 <mem_to_ptr>
 800bce8:	4603      	mov	r3, r0
 800bcea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bcec:	bf00      	nop
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd90      	pop	{r4, r7, pc}
 800bcf4:	2000eae8 	.word	0x2000eae8
 800bcf8:	0801a588 	.word	0x0801a588
 800bcfc:	0801a5b8 	.word	0x0801a5b8
 800bd00:	0801a5d0 	.word	0x0801a5d0
 800bd04:	2000eaec 	.word	0x2000eaec
 800bd08:	0801a5f8 	.word	0x0801a5f8
 800bd0c:	0801a614 	.word	0x0801a614
 800bd10:	0801a630 	.word	0x0801a630
 800bd14:	2000eaf4 	.word	0x2000eaf4

0800bd18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bd1e:	4b1f      	ldr	r3, [pc, #124]	; (800bd9c <mem_init+0x84>)
 800bd20:	3303      	adds	r3, #3
 800bd22:	f023 0303 	bic.w	r3, r3, #3
 800bd26:	461a      	mov	r2, r3
 800bd28:	4b1d      	ldr	r3, [pc, #116]	; (800bda0 <mem_init+0x88>)
 800bd2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bd2c:	4b1c      	ldr	r3, [pc, #112]	; (800bda0 <mem_init+0x88>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800bd38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bd46:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800bd4a:	f7ff ff1f 	bl	800bb8c <ptr_to_mem>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	4a14      	ldr	r2, [pc, #80]	; (800bda4 <mem_init+0x8c>)
 800bd52:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bd54:	4b13      	ldr	r3, [pc, #76]	; (800bda4 <mem_init+0x8c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bd5c:	4b11      	ldr	r3, [pc, #68]	; (800bda4 <mem_init+0x8c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800bd64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bd66:	4b0f      	ldr	r3, [pc, #60]	; (800bda4 <mem_init+0x8c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800bd6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <mem_init+0x88>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a0c      	ldr	r2, [pc, #48]	; (800bda8 <mem_init+0x90>)
 800bd76:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd78:	480c      	ldr	r0, [pc, #48]	; (800bdac <mem_init+0x94>)
 800bd7a:	f00a fbbb 	bl	80164f4 <sys_mutex_new>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d006      	beq.n	800bd92 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd84:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <mem_init+0x98>)
 800bd86:	f240 221f 	movw	r2, #543	; 0x21f
 800bd8a:	490a      	ldr	r1, [pc, #40]	; (800bdb4 <mem_init+0x9c>)
 800bd8c:	480a      	ldr	r0, [pc, #40]	; (800bdb8 <mem_init+0xa0>)
 800bd8e:	f00a fe17 	bl	80169c0 <iprintf>
  }
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20009ad4 	.word	0x20009ad4
 800bda0:	2000eae8 	.word	0x2000eae8
 800bda4:	2000eaec 	.word	0x2000eaec
 800bda8:	2000eaf4 	.word	0x2000eaf4
 800bdac:	2000eaf0 	.word	0x2000eaf0
 800bdb0:	0801a588 	.word	0x0801a588
 800bdb4:	0801a65c 	.word	0x0801a65c
 800bdb8:	0801a5d0 	.word	0x0801a5d0

0800bdbc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fef3 	bl	800bbb0 <mem_to_ptr>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff feda 	bl	800bb8c <ptr_to_mem>
 800bdd8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	885b      	ldrh	r3, [r3, #2]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fed4 	bl	800bb8c <ptr_to_mem>
 800bde4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bdee:	d818      	bhi.n	800be22 <mem_link_valid+0x66>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	885b      	ldrh	r3, [r3, #2]
 800bdf4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bdf8:	d813      	bhi.n	800be22 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bdfe:	8afa      	ldrh	r2, [r7, #22]
 800be00:	429a      	cmp	r2, r3
 800be02:	d004      	beq.n	800be0e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	8afa      	ldrh	r2, [r7, #22]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d109      	bne.n	800be22 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be0e:	4b08      	ldr	r3, [pc, #32]	; (800be30 <mem_link_valid+0x74>)
 800be10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	429a      	cmp	r2, r3
 800be16:	d006      	beq.n	800be26 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	885b      	ldrh	r3, [r3, #2]
 800be1c:	8afa      	ldrh	r2, [r7, #22]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d001      	beq.n	800be26 <mem_link_valid+0x6a>
    return 0;
 800be22:	2300      	movs	r3, #0
 800be24:	e000      	b.n	800be28 <mem_link_valid+0x6c>
  }
  return 1;
 800be26:	2301      	movs	r3, #1
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3718      	adds	r7, #24
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	2000eaec 	.word	0x2000eaec

0800be34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d070      	beq.n	800bf24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00d      	beq.n	800be68 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800be4c:	4b37      	ldr	r3, [pc, #220]	; (800bf2c <mem_free+0xf8>)
 800be4e:	f240 2273 	movw	r2, #627	; 0x273
 800be52:	4937      	ldr	r1, [pc, #220]	; (800bf30 <mem_free+0xfc>)
 800be54:	4837      	ldr	r0, [pc, #220]	; (800bf34 <mem_free+0x100>)
 800be56:	f00a fdb3 	bl	80169c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be5a:	f00a fb9d 	bl	8016598 <sys_arch_protect>
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f00a fba7 	bl	80165b4 <sys_arch_unprotect>
    return;
 800be66:	e05e      	b.n	800bf26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3b08      	subs	r3, #8
 800be6c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800be6e:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <mem_free+0x104>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69fa      	ldr	r2, [r7, #28]
 800be74:	429a      	cmp	r2, r3
 800be76:	d306      	bcc.n	800be86 <mem_free+0x52>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f103 020c 	add.w	r2, r3, #12
 800be7e:	4b2f      	ldr	r3, [pc, #188]	; (800bf3c <mem_free+0x108>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	429a      	cmp	r2, r3
 800be84:	d90d      	bls.n	800bea2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800be86:	4b29      	ldr	r3, [pc, #164]	; (800bf2c <mem_free+0xf8>)
 800be88:	f240 227f 	movw	r2, #639	; 0x27f
 800be8c:	492c      	ldr	r1, [pc, #176]	; (800bf40 <mem_free+0x10c>)
 800be8e:	4829      	ldr	r0, [pc, #164]	; (800bf34 <mem_free+0x100>)
 800be90:	f00a fd96 	bl	80169c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be94:	f00a fb80 	bl	8016598 <sys_arch_protect>
 800be98:	6138      	str	r0, [r7, #16]
 800be9a:	6938      	ldr	r0, [r7, #16]
 800be9c:	f00a fb8a 	bl	80165b4 <sys_arch_unprotect>
    return;
 800bea0:	e041      	b.n	800bf26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bea2:	4828      	ldr	r0, [pc, #160]	; (800bf44 <mem_free+0x110>)
 800bea4:	f00a fb3c 	bl	8016520 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	791b      	ldrb	r3, [r3, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d110      	bne.n	800bed2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800beb0:	4b1e      	ldr	r3, [pc, #120]	; (800bf2c <mem_free+0xf8>)
 800beb2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800beb6:	4924      	ldr	r1, [pc, #144]	; (800bf48 <mem_free+0x114>)
 800beb8:	481e      	ldr	r0, [pc, #120]	; (800bf34 <mem_free+0x100>)
 800beba:	f00a fd81 	bl	80169c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bebe:	4821      	ldr	r0, [pc, #132]	; (800bf44 <mem_free+0x110>)
 800bec0:	f00a fb3d 	bl	801653e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bec4:	f00a fb68 	bl	8016598 <sys_arch_protect>
 800bec8:	6178      	str	r0, [r7, #20]
 800beca:	6978      	ldr	r0, [r7, #20]
 800becc:	f00a fb72 	bl	80165b4 <sys_arch_unprotect>
    return;
 800bed0:	e029      	b.n	800bf26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bed2:	69f8      	ldr	r0, [r7, #28]
 800bed4:	f7ff ff72 	bl	800bdbc <mem_link_valid>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d110      	bne.n	800bf00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <mem_free+0xf8>)
 800bee0:	f240 2295 	movw	r2, #661	; 0x295
 800bee4:	4919      	ldr	r1, [pc, #100]	; (800bf4c <mem_free+0x118>)
 800bee6:	4813      	ldr	r0, [pc, #76]	; (800bf34 <mem_free+0x100>)
 800bee8:	f00a fd6a 	bl	80169c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800beec:	4815      	ldr	r0, [pc, #84]	; (800bf44 <mem_free+0x110>)
 800beee:	f00a fb26 	bl	801653e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bef2:	f00a fb51 	bl	8016598 <sys_arch_protect>
 800bef6:	61b8      	str	r0, [r7, #24]
 800bef8:	69b8      	ldr	r0, [r7, #24]
 800befa:	f00a fb5b 	bl	80165b4 <sys_arch_unprotect>
    return;
 800befe:	e012      	b.n	800bf26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	2200      	movs	r2, #0
 800bf04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bf06:	4b12      	ldr	r3, [pc, #72]	; (800bf50 <mem_free+0x11c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69fa      	ldr	r2, [r7, #28]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d202      	bcs.n	800bf16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bf10:	4a0f      	ldr	r2, [pc, #60]	; (800bf50 <mem_free+0x11c>)
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bf16:	69f8      	ldr	r0, [r7, #28]
 800bf18:	f7ff fe5c 	bl	800bbd4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bf1c:	4809      	ldr	r0, [pc, #36]	; (800bf44 <mem_free+0x110>)
 800bf1e:	f00a fb0e 	bl	801653e <sys_mutex_unlock>
 800bf22:	e000      	b.n	800bf26 <mem_free+0xf2>
    return;
 800bf24:	bf00      	nop
}
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	0801a588 	.word	0x0801a588
 800bf30:	0801a678 	.word	0x0801a678
 800bf34:	0801a5d0 	.word	0x0801a5d0
 800bf38:	2000eae8 	.word	0x2000eae8
 800bf3c:	2000eaec 	.word	0x2000eaec
 800bf40:	0801a69c 	.word	0x0801a69c
 800bf44:	2000eaf0 	.word	0x2000eaf0
 800bf48:	0801a6b8 	.word	0x0801a6b8
 800bf4c:	0801a6e0 	.word	0x0801a6e0
 800bf50:	2000eaf4 	.word	0x2000eaf4

0800bf54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bf60:	887b      	ldrh	r3, [r7, #2]
 800bf62:	3303      	adds	r3, #3
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	f023 0303 	bic.w	r3, r3, #3
 800bf6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bf6c:	8bfb      	ldrh	r3, [r7, #30]
 800bf6e:	2b0b      	cmp	r3, #11
 800bf70:	d801      	bhi.n	800bf76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf72:	230c      	movs	r3, #12
 800bf74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf76:	8bfb      	ldrh	r3, [r7, #30]
 800bf78:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bf7c:	d803      	bhi.n	800bf86 <mem_trim+0x32>
 800bf7e:	8bfa      	ldrh	r2, [r7, #30]
 800bf80:	887b      	ldrh	r3, [r7, #2]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d201      	bcs.n	800bf8a <mem_trim+0x36>
    return NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	e0d8      	b.n	800c13c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf8a:	4b6e      	ldr	r3, [pc, #440]	; (800c144 <mem_trim+0x1f0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d304      	bcc.n	800bf9e <mem_trim+0x4a>
 800bf94:	4b6c      	ldr	r3, [pc, #432]	; (800c148 <mem_trim+0x1f4>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d306      	bcc.n	800bfac <mem_trim+0x58>
 800bf9e:	4b6b      	ldr	r3, [pc, #428]	; (800c14c <mem_trim+0x1f8>)
 800bfa0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bfa4:	496a      	ldr	r1, [pc, #424]	; (800c150 <mem_trim+0x1fc>)
 800bfa6:	486b      	ldr	r0, [pc, #428]	; (800c154 <mem_trim+0x200>)
 800bfa8:	f00a fd0a 	bl	80169c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bfac:	4b65      	ldr	r3, [pc, #404]	; (800c144 <mem_trim+0x1f0>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d304      	bcc.n	800bfc0 <mem_trim+0x6c>
 800bfb6:	4b64      	ldr	r3, [pc, #400]	; (800c148 <mem_trim+0x1f4>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d307      	bcc.n	800bfd0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bfc0:	f00a faea 	bl	8016598 <sys_arch_protect>
 800bfc4:	60b8      	str	r0, [r7, #8]
 800bfc6:	68b8      	ldr	r0, [r7, #8]
 800bfc8:	f00a faf4 	bl	80165b4 <sys_arch_unprotect>
    return rmem;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	e0b5      	b.n	800c13c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3b08      	subs	r3, #8
 800bfd4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bfd6:	69b8      	ldr	r0, [r7, #24]
 800bfd8:	f7ff fdea 	bl	800bbb0 <mem_to_ptr>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	881a      	ldrh	r2, [r3, #0]
 800bfe4:	8afb      	ldrh	r3, [r7, #22]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	3b08      	subs	r3, #8
 800bfec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bfee:	8bfa      	ldrh	r2, [r7, #30]
 800bff0:	8abb      	ldrh	r3, [r7, #20]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d906      	bls.n	800c004 <mem_trim+0xb0>
 800bff6:	4b55      	ldr	r3, [pc, #340]	; (800c14c <mem_trim+0x1f8>)
 800bff8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bffc:	4956      	ldr	r1, [pc, #344]	; (800c158 <mem_trim+0x204>)
 800bffe:	4855      	ldr	r0, [pc, #340]	; (800c154 <mem_trim+0x200>)
 800c000:	f00a fcde 	bl	80169c0 <iprintf>
  if (newsize > size) {
 800c004:	8bfa      	ldrh	r2, [r7, #30]
 800c006:	8abb      	ldrh	r3, [r7, #20]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d901      	bls.n	800c010 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	e095      	b.n	800c13c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c010:	8bfa      	ldrh	r2, [r7, #30]
 800c012:	8abb      	ldrh	r3, [r7, #20]
 800c014:	429a      	cmp	r2, r3
 800c016:	d101      	bne.n	800c01c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	e08f      	b.n	800c13c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c01c:	484f      	ldr	r0, [pc, #316]	; (800c15c <mem_trim+0x208>)
 800c01e:	f00a fa7f 	bl	8016520 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff fdb0 	bl	800bb8c <ptr_to_mem>
 800c02c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	791b      	ldrb	r3, [r3, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d13f      	bne.n	800c0b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c03e:	d106      	bne.n	800c04e <mem_trim+0xfa>
 800c040:	4b42      	ldr	r3, [pc, #264]	; (800c14c <mem_trim+0x1f8>)
 800c042:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c046:	4946      	ldr	r1, [pc, #280]	; (800c160 <mem_trim+0x20c>)
 800c048:	4842      	ldr	r0, [pc, #264]	; (800c154 <mem_trim+0x200>)
 800c04a:	f00a fcb9 	bl	80169c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c054:	8afa      	ldrh	r2, [r7, #22]
 800c056:	8bfb      	ldrh	r3, [r7, #30]
 800c058:	4413      	add	r3, r2
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	3308      	adds	r3, #8
 800c05e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c060:	4b40      	ldr	r3, [pc, #256]	; (800c164 <mem_trim+0x210>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	429a      	cmp	r2, r3
 800c068:	d106      	bne.n	800c078 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c06a:	89fb      	ldrh	r3, [r7, #14]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fd8d 	bl	800bb8c <ptr_to_mem>
 800c072:	4603      	mov	r3, r0
 800c074:	4a3b      	ldr	r2, [pc, #236]	; (800c164 <mem_trim+0x210>)
 800c076:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c078:	89fb      	ldrh	r3, [r7, #14]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff fd86 	bl	800bb8c <ptr_to_mem>
 800c080:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	2200      	movs	r2, #0
 800c086:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	89ba      	ldrh	r2, [r7, #12]
 800c08c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	8afa      	ldrh	r2, [r7, #22]
 800c092:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	89fa      	ldrh	r2, [r7, #14]
 800c098:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c0a2:	d047      	beq.n	800c134 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7ff fd6f 	bl	800bb8c <ptr_to_mem>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	89fb      	ldrh	r3, [r7, #14]
 800c0b2:	8053      	strh	r3, [r2, #2]
 800c0b4:	e03e      	b.n	800c134 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c0b6:	8bfb      	ldrh	r3, [r7, #30]
 800c0b8:	f103 0214 	add.w	r2, r3, #20
 800c0bc:	8abb      	ldrh	r3, [r7, #20]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d838      	bhi.n	800c134 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c0c2:	8afa      	ldrh	r2, [r7, #22]
 800c0c4:	8bfb      	ldrh	r3, [r7, #30]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c0d6:	d106      	bne.n	800c0e6 <mem_trim+0x192>
 800c0d8:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <mem_trim+0x1f8>)
 800c0da:	f240 3216 	movw	r2, #790	; 0x316
 800c0de:	4920      	ldr	r1, [pc, #128]	; (800c160 <mem_trim+0x20c>)
 800c0e0:	481c      	ldr	r0, [pc, #112]	; (800c154 <mem_trim+0x200>)
 800c0e2:	f00a fc6d 	bl	80169c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c0e6:	89fb      	ldrh	r3, [r7, #14]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7ff fd4f 	bl	800bb8c <ptr_to_mem>
 800c0ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c0f0:	4b1c      	ldr	r3, [pc, #112]	; (800c164 <mem_trim+0x210>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d202      	bcs.n	800c100 <mem_trim+0x1ac>
      lfree = mem2;
 800c0fa:	4a1a      	ldr	r2, [pc, #104]	; (800c164 <mem_trim+0x210>)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2200      	movs	r2, #0
 800c104:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	881a      	ldrh	r2, [r3, #0]
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	8afa      	ldrh	r2, [r7, #22]
 800c112:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	89fa      	ldrh	r2, [r7, #14]
 800c118:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c122:	d007      	beq.n	800c134 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff fd2f 	bl	800bb8c <ptr_to_mem>
 800c12e:	4602      	mov	r2, r0
 800c130:	89fb      	ldrh	r3, [r7, #14]
 800c132:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c134:	4809      	ldr	r0, [pc, #36]	; (800c15c <mem_trim+0x208>)
 800c136:	f00a fa02 	bl	801653e <sys_mutex_unlock>
  return rmem;
 800c13a:	687b      	ldr	r3, [r7, #4]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	2000eae8 	.word	0x2000eae8
 800c148:	2000eaec 	.word	0x2000eaec
 800c14c:	0801a588 	.word	0x0801a588
 800c150:	0801a714 	.word	0x0801a714
 800c154:	0801a5d0 	.word	0x0801a5d0
 800c158:	0801a72c 	.word	0x0801a72c
 800c15c:	2000eaf0 	.word	0x2000eaf0
 800c160:	0801a74c 	.word	0x0801a74c
 800c164:	2000eaf4 	.word	0x2000eaf4

0800c168 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <mem_malloc+0x14>
    return NULL;
 800c178:	2300      	movs	r3, #0
 800c17a:	e0e2      	b.n	800c342 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c17c:	88fb      	ldrh	r3, [r7, #6]
 800c17e:	3303      	adds	r3, #3
 800c180:	b29b      	uxth	r3, r3
 800c182:	f023 0303 	bic.w	r3, r3, #3
 800c186:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c188:	8bbb      	ldrh	r3, [r7, #28]
 800c18a:	2b0b      	cmp	r3, #11
 800c18c:	d801      	bhi.n	800c192 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c18e:	230c      	movs	r3, #12
 800c190:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c192:	8bbb      	ldrh	r3, [r7, #28]
 800c194:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c198:	d803      	bhi.n	800c1a2 <mem_malloc+0x3a>
 800c19a:	8bba      	ldrh	r2, [r7, #28]
 800c19c:	88fb      	ldrh	r3, [r7, #6]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d201      	bcs.n	800c1a6 <mem_malloc+0x3e>
    return NULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e0cd      	b.n	800c342 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c1a6:	4869      	ldr	r0, [pc, #420]	; (800c34c <mem_malloc+0x1e4>)
 800c1a8:	f00a f9ba 	bl	8016520 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c1ac:	4b68      	ldr	r3, [pc, #416]	; (800c350 <mem_malloc+0x1e8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff fcfd 	bl	800bbb0 <mem_to_ptr>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	83fb      	strh	r3, [r7, #30]
 800c1ba:	e0b7      	b.n	800c32c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c1bc:	8bfb      	ldrh	r3, [r7, #30]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff fce4 	bl	800bb8c <ptr_to_mem>
 800c1c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	791b      	ldrb	r3, [r3, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f040 80a7 	bne.w	800c31e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	8bfb      	ldrh	r3, [r7, #30]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	f1a3 0208 	sub.w	r2, r3, #8
 800c1de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	f0c0 809c 	bcc.w	800c31e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	8bfb      	ldrh	r3, [r7, #30]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	f1a3 0208 	sub.w	r2, r3, #8
 800c1f4:	8bbb      	ldrh	r3, [r7, #28]
 800c1f6:	3314      	adds	r3, #20
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d333      	bcc.n	800c264 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c1fc:	8bfa      	ldrh	r2, [r7, #30]
 800c1fe:	8bbb      	ldrh	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	b29b      	uxth	r3, r3
 800c204:	3308      	adds	r3, #8
 800c206:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c208:	8a7b      	ldrh	r3, [r7, #18]
 800c20a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c20e:	d106      	bne.n	800c21e <mem_malloc+0xb6>
 800c210:	4b50      	ldr	r3, [pc, #320]	; (800c354 <mem_malloc+0x1ec>)
 800c212:	f240 3287 	movw	r2, #903	; 0x387
 800c216:	4950      	ldr	r1, [pc, #320]	; (800c358 <mem_malloc+0x1f0>)
 800c218:	4850      	ldr	r0, [pc, #320]	; (800c35c <mem_malloc+0x1f4>)
 800c21a:	f00a fbd1 	bl	80169c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c21e:	8a7b      	ldrh	r3, [r7, #18]
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fcb3 	bl	800bb8c <ptr_to_mem>
 800c226:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	881a      	ldrh	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	8bfa      	ldrh	r2, [r7, #30]
 800c23a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	8a7a      	ldrh	r2, [r7, #18]
 800c240:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	2201      	movs	r2, #1
 800c246:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c250:	d00b      	beq.n	800c26a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff fc98 	bl	800bb8c <ptr_to_mem>
 800c25c:	4602      	mov	r2, r0
 800c25e:	8a7b      	ldrh	r3, [r7, #18]
 800c260:	8053      	strh	r3, [r2, #2]
 800c262:	e002      	b.n	800c26a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2201      	movs	r2, #1
 800c268:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c26a:	4b39      	ldr	r3, [pc, #228]	; (800c350 <mem_malloc+0x1e8>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	429a      	cmp	r2, r3
 800c272:	d127      	bne.n	800c2c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c274:	4b36      	ldr	r3, [pc, #216]	; (800c350 <mem_malloc+0x1e8>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c27a:	e005      	b.n	800c288 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff fc83 	bl	800bb8c <ptr_to_mem>
 800c286:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	791b      	ldrb	r3, [r3, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d004      	beq.n	800c29a <mem_malloc+0x132>
 800c290:	4b33      	ldr	r3, [pc, #204]	; (800c360 <mem_malloc+0x1f8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	429a      	cmp	r2, r3
 800c298:	d1f0      	bne.n	800c27c <mem_malloc+0x114>
          }
          lfree = cur;
 800c29a:	4a2d      	ldr	r2, [pc, #180]	; (800c350 <mem_malloc+0x1e8>)
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c2a0:	4b2b      	ldr	r3, [pc, #172]	; (800c350 <mem_malloc+0x1e8>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	4b2e      	ldr	r3, [pc, #184]	; (800c360 <mem_malloc+0x1f8>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d00b      	beq.n	800c2c4 <mem_malloc+0x15c>
 800c2ac:	4b28      	ldr	r3, [pc, #160]	; (800c350 <mem_malloc+0x1e8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	791b      	ldrb	r3, [r3, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d006      	beq.n	800c2c4 <mem_malloc+0x15c>
 800c2b6:	4b27      	ldr	r3, [pc, #156]	; (800c354 <mem_malloc+0x1ec>)
 800c2b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c2bc:	4929      	ldr	r1, [pc, #164]	; (800c364 <mem_malloc+0x1fc>)
 800c2be:	4827      	ldr	r0, [pc, #156]	; (800c35c <mem_malloc+0x1f4>)
 800c2c0:	f00a fb7e 	bl	80169c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c2c4:	4821      	ldr	r0, [pc, #132]	; (800c34c <mem_malloc+0x1e4>)
 800c2c6:	f00a f93a 	bl	801653e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c2ca:	8bba      	ldrh	r2, [r7, #28]
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	4a23      	ldr	r2, [pc, #140]	; (800c360 <mem_malloc+0x1f8>)
 800c2d4:	6812      	ldr	r2, [r2, #0]
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d906      	bls.n	800c2e8 <mem_malloc+0x180>
 800c2da:	4b1e      	ldr	r3, [pc, #120]	; (800c354 <mem_malloc+0x1ec>)
 800c2dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c2e0:	4921      	ldr	r1, [pc, #132]	; (800c368 <mem_malloc+0x200>)
 800c2e2:	481e      	ldr	r0, [pc, #120]	; (800c35c <mem_malloc+0x1f4>)
 800c2e4:	f00a fb6c 	bl	80169c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d006      	beq.n	800c300 <mem_malloc+0x198>
 800c2f2:	4b18      	ldr	r3, [pc, #96]	; (800c354 <mem_malloc+0x1ec>)
 800c2f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c2f8:	491c      	ldr	r1, [pc, #112]	; (800c36c <mem_malloc+0x204>)
 800c2fa:	4818      	ldr	r0, [pc, #96]	; (800c35c <mem_malloc+0x1f4>)
 800c2fc:	f00a fb60 	bl	80169c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d006      	beq.n	800c318 <mem_malloc+0x1b0>
 800c30a:	4b12      	ldr	r3, [pc, #72]	; (800c354 <mem_malloc+0x1ec>)
 800c30c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c310:	4917      	ldr	r1, [pc, #92]	; (800c370 <mem_malloc+0x208>)
 800c312:	4812      	ldr	r0, [pc, #72]	; (800c35c <mem_malloc+0x1f4>)
 800c314:	f00a fb54 	bl	80169c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3308      	adds	r3, #8
 800c31c:	e011      	b.n	800c342 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c31e:	8bfb      	ldrh	r3, [r7, #30]
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff fc33 	bl	800bb8c <ptr_to_mem>
 800c326:	4603      	mov	r3, r0
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c32c:	8bfa      	ldrh	r2, [r7, #30]
 800c32e:	8bbb      	ldrh	r3, [r7, #28]
 800c330:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800c334:	429a      	cmp	r2, r3
 800c336:	f4ff af41 	bcc.w	800c1bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c33a:	4804      	ldr	r0, [pc, #16]	; (800c34c <mem_malloc+0x1e4>)
 800c33c:	f00a f8ff 	bl	801653e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3720      	adds	r7, #32
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	2000eaf0 	.word	0x2000eaf0
 800c350:	2000eaf4 	.word	0x2000eaf4
 800c354:	0801a588 	.word	0x0801a588
 800c358:	0801a74c 	.word	0x0801a74c
 800c35c:	0801a5d0 	.word	0x0801a5d0
 800c360:	2000eaec 	.word	0x2000eaec
 800c364:	0801a760 	.word	0x0801a760
 800c368:	0801a77c 	.word	0x0801a77c
 800c36c:	0801a7ac 	.word	0x0801a7ac
 800c370:	0801a7dc 	.word	0x0801a7dc

0800c374 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	3303      	adds	r3, #3
 800c38a:	f023 0303 	bic.w	r3, r3, #3
 800c38e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c390:	2300      	movs	r3, #0
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	e011      	b.n	800c3ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	885b      	ldrh	r3, [r3, #2]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	dbe7      	blt.n	800c396 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c3c6:	bf00      	nop
 800c3c8:	bf00      	nop
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c3da:	2300      	movs	r3, #0
 800c3dc:	80fb      	strh	r3, [r7, #6]
 800c3de:	e009      	b.n	800c3f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c3e0:	88fb      	ldrh	r3, [r7, #6]
 800c3e2:	4a08      	ldr	r2, [pc, #32]	; (800c404 <memp_init+0x30>)
 800c3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff ffc3 	bl	800c374 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c3ee:	88fb      	ldrh	r3, [r7, #6]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	80fb      	strh	r3, [r7, #6]
 800c3f4:	88fb      	ldrh	r3, [r7, #6]
 800c3f6:	2b0b      	cmp	r3, #11
 800c3f8:	d9f2      	bls.n	800c3e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	0801cd14 	.word	0x0801cd14

0800c408 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c410:	f00a f8c2 	bl	8016598 <sys_arch_protect>
 800c414:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d015      	beq.n	800c450 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	6812      	ldr	r2, [r2, #0]
 800c42c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <do_memp_malloc_pool+0x3e>
 800c438:	4b09      	ldr	r3, [pc, #36]	; (800c460 <do_memp_malloc_pool+0x58>)
 800c43a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c43e:	4909      	ldr	r1, [pc, #36]	; (800c464 <do_memp_malloc_pool+0x5c>)
 800c440:	4809      	ldr	r0, [pc, #36]	; (800c468 <do_memp_malloc_pool+0x60>)
 800c442:	f00a fabd 	bl	80169c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f00a f8b4 	bl	80165b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	e003      	b.n	800c458 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f00a f8af 	bl	80165b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	0801a800 	.word	0x0801a800
 800c464:	0801a830 	.word	0x0801a830
 800c468:	0801a854 	.word	0x0801a854

0800c46c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d106      	bne.n	800c488 <memp_malloc_pool+0x1c>
 800c47a:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <memp_malloc_pool+0x38>)
 800c47c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c480:	4909      	ldr	r1, [pc, #36]	; (800c4a8 <memp_malloc_pool+0x3c>)
 800c482:	480a      	ldr	r0, [pc, #40]	; (800c4ac <memp_malloc_pool+0x40>)
 800c484:	f00a fa9c 	bl	80169c0 <iprintf>
  if (desc == NULL) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <memp_malloc_pool+0x26>
    return NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	e003      	b.n	800c49a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f7ff ffb8 	bl	800c408 <do_memp_malloc_pool>
 800c498:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0801a800 	.word	0x0801a800
 800c4a8:	0801a87c 	.word	0x0801a87c
 800c4ac:	0801a854 	.word	0x0801a854

0800c4b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c4ba:	79fb      	ldrb	r3, [r7, #7]
 800c4bc:	2b0b      	cmp	r3, #11
 800c4be:	d908      	bls.n	800c4d2 <memp_malloc+0x22>
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <memp_malloc+0x3c>)
 800c4c2:	f240 1257 	movw	r2, #343	; 0x157
 800c4c6:	490a      	ldr	r1, [pc, #40]	; (800c4f0 <memp_malloc+0x40>)
 800c4c8:	480a      	ldr	r0, [pc, #40]	; (800c4f4 <memp_malloc+0x44>)
 800c4ca:	f00a fa79 	bl	80169c0 <iprintf>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e008      	b.n	800c4e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	4a08      	ldr	r2, [pc, #32]	; (800c4f8 <memp_malloc+0x48>)
 800c4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7ff ff94 	bl	800c408 <do_memp_malloc_pool>
 800c4e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	0801a800 	.word	0x0801a800
 800c4f0:	0801a890 	.word	0x0801a890
 800c4f4:	0801a854 	.word	0x0801a854
 800c4f8:	0801cd14 	.word	0x0801cd14

0800c4fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	f003 0303 	and.w	r3, r3, #3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d006      	beq.n	800c51e <do_memp_free_pool+0x22>
 800c510:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <do_memp_free_pool+0x4c>)
 800c512:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c516:	490d      	ldr	r1, [pc, #52]	; (800c54c <do_memp_free_pool+0x50>)
 800c518:	480d      	ldr	r0, [pc, #52]	; (800c550 <do_memp_free_pool+0x54>)
 800c51a:	f00a fa51 	bl	80169c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c522:	f00a f839 	bl	8016598 <sys_arch_protect>
 800c526:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c53a:	68b8      	ldr	r0, [r7, #8]
 800c53c:	f00a f83a 	bl	80165b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c540:	bf00      	nop
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	0801a800 	.word	0x0801a800
 800c54c:	0801a8b0 	.word	0x0801a8b0
 800c550:	0801a854 	.word	0x0801a854

0800c554 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <memp_free_pool+0x1e>
 800c564:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <memp_free_pool+0x3c>)
 800c566:	f240 1295 	movw	r2, #405	; 0x195
 800c56a:	490a      	ldr	r1, [pc, #40]	; (800c594 <memp_free_pool+0x40>)
 800c56c:	480a      	ldr	r0, [pc, #40]	; (800c598 <memp_free_pool+0x44>)
 800c56e:	f00a fa27 	bl	80169c0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d007      	beq.n	800c588 <memp_free_pool+0x34>
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d004      	beq.n	800c588 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff ffbb 	bl	800c4fc <do_memp_free_pool>
 800c586:	e000      	b.n	800c58a <memp_free_pool+0x36>
    return;
 800c588:	bf00      	nop
}
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	0801a800 	.word	0x0801a800
 800c594:	0801a87c 	.word	0x0801a87c
 800c598:	0801a854 	.word	0x0801a854

0800c59c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6039      	str	r1, [r7, #0]
 800c5a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c5a8:	79fb      	ldrb	r3, [r7, #7]
 800c5aa:	2b0b      	cmp	r3, #11
 800c5ac:	d907      	bls.n	800c5be <memp_free+0x22>
 800c5ae:	4b0c      	ldr	r3, [pc, #48]	; (800c5e0 <memp_free+0x44>)
 800c5b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c5b4:	490b      	ldr	r1, [pc, #44]	; (800c5e4 <memp_free+0x48>)
 800c5b6:	480c      	ldr	r0, [pc, #48]	; (800c5e8 <memp_free+0x4c>)
 800c5b8:	f00a fa02 	bl	80169c0 <iprintf>
 800c5bc:	e00c      	b.n	800c5d8 <memp_free+0x3c>

  if (mem == NULL) {
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d008      	beq.n	800c5d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	4a09      	ldr	r2, [pc, #36]	; (800c5ec <memp_free+0x50>)
 800c5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ff94 	bl	800c4fc <do_memp_free_pool>
 800c5d4:	e000      	b.n	800c5d8 <memp_free+0x3c>
    return;
 800c5d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	0801a800 	.word	0x0801a800
 800c5e4:	0801a8d0 	.word	0x0801a8d0
 800c5e8:	0801a854 	.word	0x0801a854
 800c5ec:	0801cd14 	.word	0x0801cd14

0800c5f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c5f4:	bf00      	nop
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
	...

0800c600 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d108      	bne.n	800c626 <netif_add+0x26>
 800c614:	4b57      	ldr	r3, [pc, #348]	; (800c774 <netif_add+0x174>)
 800c616:	f240 1227 	movw	r2, #295	; 0x127
 800c61a:	4957      	ldr	r1, [pc, #348]	; (800c778 <netif_add+0x178>)
 800c61c:	4857      	ldr	r0, [pc, #348]	; (800c77c <netif_add+0x17c>)
 800c61e:	f00a f9cf 	bl	80169c0 <iprintf>
 800c622:	2300      	movs	r3, #0
 800c624:	e0a2      	b.n	800c76c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d108      	bne.n	800c63e <netif_add+0x3e>
 800c62c:	4b51      	ldr	r3, [pc, #324]	; (800c774 <netif_add+0x174>)
 800c62e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c632:	4953      	ldr	r1, [pc, #332]	; (800c780 <netif_add+0x180>)
 800c634:	4851      	ldr	r0, [pc, #324]	; (800c77c <netif_add+0x17c>)
 800c636:	f00a f9c3 	bl	80169c0 <iprintf>
 800c63a:	2300      	movs	r3, #0
 800c63c:	e096      	b.n	800c76c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c644:	4b4f      	ldr	r3, [pc, #316]	; (800c784 <netif_add+0x184>)
 800c646:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c64e:	4b4d      	ldr	r3, [pc, #308]	; (800c784 <netif_add+0x184>)
 800c650:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c658:	4b4a      	ldr	r3, [pc, #296]	; (800c784 <netif_add+0x184>)
 800c65a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4a45      	ldr	r2, [pc, #276]	; (800c788 <netif_add+0x188>)
 800c672:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6a3a      	ldr	r2, [r7, #32]
 800c68c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c68e:	4b3f      	ldr	r3, [pc, #252]	; (800c78c <netif_add+0x18c>)
 800c690:	781a      	ldrb	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c69c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	68b9      	ldr	r1, [r7, #8]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f000 f90f 	bl	800c8c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	4798      	blx	r3
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <netif_add+0xba>
    return NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e058      	b.n	800c76c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6c0:	2bff      	cmp	r3, #255	; 0xff
 800c6c2:	d103      	bne.n	800c6cc <netif_add+0xcc>
        netif->num = 0;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6d0:	4b2f      	ldr	r3, [pc, #188]	; (800c790 <netif_add+0x190>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e02b      	b.n	800c730 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d106      	bne.n	800c6ee <netif_add+0xee>
 800c6e0:	4b24      	ldr	r3, [pc, #144]	; (800c774 <netif_add+0x174>)
 800c6e2:	f240 128b 	movw	r2, #395	; 0x18b
 800c6e6:	492b      	ldr	r1, [pc, #172]	; (800c794 <netif_add+0x194>)
 800c6e8:	4824      	ldr	r0, [pc, #144]	; (800c77c <netif_add+0x17c>)
 800c6ea:	f00a f969 	bl	80169c0 <iprintf>
        num_netifs++;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2bff      	cmp	r3, #255	; 0xff
 800c6f8:	dd06      	ble.n	800c708 <netif_add+0x108>
 800c6fa:	4b1e      	ldr	r3, [pc, #120]	; (800c774 <netif_add+0x174>)
 800c6fc:	f240 128d 	movw	r2, #397	; 0x18d
 800c700:	4925      	ldr	r1, [pc, #148]	; (800c798 <netif_add+0x198>)
 800c702:	481e      	ldr	r0, [pc, #120]	; (800c77c <netif_add+0x17c>)
 800c704:	f00a f95c 	bl	80169c0 <iprintf>
        if (netif2->num == netif->num) {
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c714:	429a      	cmp	r2, r3
 800c716:	d108      	bne.n	800c72a <netif_add+0x12a>
          netif->num++;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c71e:	3301      	adds	r3, #1
 800c720:	b2da      	uxtb	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c728:	e005      	b.n	800c736 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	617b      	str	r3, [r7, #20]
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1d0      	bne.n	800c6d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1be      	bne.n	800c6ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c742:	2bfe      	cmp	r3, #254	; 0xfe
 800c744:	d103      	bne.n	800c74e <netif_add+0x14e>
    netif_num = 0;
 800c746:	4b11      	ldr	r3, [pc, #68]	; (800c78c <netif_add+0x18c>)
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
 800c74c:	e006      	b.n	800c75c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c754:	3301      	adds	r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <netif_add+0x18c>)
 800c75a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c75c:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <netif_add+0x190>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c764:	4a0a      	ldr	r2, [pc, #40]	; (800c790 <netif_add+0x190>)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c76a:	68fb      	ldr	r3, [r7, #12]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	0801a8ec 	.word	0x0801a8ec
 800c778:	0801a980 	.word	0x0801a980
 800c77c:	0801a93c 	.word	0x0801a93c
 800c780:	0801a99c 	.word	0x0801a99c
 800c784:	0801cd84 	.word	0x0801cd84
 800c788:	0800cba3 	.word	0x0800cba3
 800c78c:	20011b44 	.word	0x20011b44
 800c790:	20011b3c 	.word	0x20011b3c
 800c794:	0801a9c0 	.word	0x0801a9c0
 800c798:	0801a9d4 	.word	0x0801a9d4

0800c79c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f002 fe99 	bl	800f4e0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d106      	bne.n	800c7d8 <netif_do_set_ipaddr+0x20>
 800c7ca:	4b1d      	ldr	r3, [pc, #116]	; (800c840 <netif_do_set_ipaddr+0x88>)
 800c7cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c7d0:	491c      	ldr	r1, [pc, #112]	; (800c844 <netif_do_set_ipaddr+0x8c>)
 800c7d2:	481d      	ldr	r0, [pc, #116]	; (800c848 <netif_do_set_ipaddr+0x90>)
 800c7d4:	f00a f8f4 	bl	80169c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d106      	bne.n	800c7ec <netif_do_set_ipaddr+0x34>
 800c7de:	4b18      	ldr	r3, [pc, #96]	; (800c840 <netif_do_set_ipaddr+0x88>)
 800c7e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c7e4:	4917      	ldr	r1, [pc, #92]	; (800c844 <netif_do_set_ipaddr+0x8c>)
 800c7e6:	4818      	ldr	r0, [pc, #96]	; (800c848 <netif_do_set_ipaddr+0x90>)
 800c7e8:	f00a f8ea 	bl	80169c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d01c      	beq.n	800c834 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3304      	adds	r3, #4
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c80a:	f107 0314 	add.w	r3, r7, #20
 800c80e:	4619      	mov	r1, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ffc3 	bl	800c79c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <netif_do_set_ipaddr+0x6a>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	e000      	b.n	800c824 <netif_do_set_ipaddr+0x6c>
 800c822:	2300      	movs	r3, #0
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c828:	2101      	movs	r1, #1
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 f8d2 	bl	800c9d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c830:	2301      	movs	r3, #1
 800c832:	e000      	b.n	800c836 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	0801a8ec 	.word	0x0801a8ec
 800c844:	0801aa04 	.word	0x0801aa04
 800c848:	0801a93c 	.word	0x0801a93c

0800c84c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3308      	adds	r3, #8
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d00a      	beq.n	800c87c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <netif_do_set_netmask+0x26>
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	e000      	b.n	800c874 <netif_do_set_netmask+0x28>
 800c872:	2300      	movs	r3, #0
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c878:	2301      	movs	r3, #1
 800c87a:	e000      	b.n	800c87e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	330c      	adds	r3, #12
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d00a      	beq.n	800c8ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <netif_do_set_gw+0x26>
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	e000      	b.n	800c8b2 <netif_do_set_gw+0x28>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e000      	b.n	800c8bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b088      	sub	sp, #32
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c8e4:	4b1c      	ldr	r3, [pc, #112]	; (800c958 <netif_set_addr+0x90>)
 800c8e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	; (800c958 <netif_set_addr+0x90>)
 800c8f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c8f8:	4b17      	ldr	r3, [pc, #92]	; (800c958 <netif_set_addr+0x90>)
 800c8fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d003      	beq.n	800c90a <netif_set_addr+0x42>
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <netif_set_addr+0x46>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e000      	b.n	800c910 <netif_set_addr+0x48>
 800c90e:	2300      	movs	r3, #0
 800c910:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d006      	beq.n	800c926 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c918:	f107 0310 	add.w	r3, r7, #16
 800c91c:	461a      	mov	r2, r3
 800c91e:	68b9      	ldr	r1, [r7, #8]
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f7ff ff49 	bl	800c7b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c926:	69fa      	ldr	r2, [r7, #28]
 800c928:	6879      	ldr	r1, [r7, #4]
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff ff8e 	bl	800c84c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c930:	69ba      	ldr	r2, [r7, #24]
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f7ff ffa8 	bl	800c88a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c940:	f107 0310 	add.w	r3, r7, #16
 800c944:	461a      	mov	r2, r3
 800c946:	68b9      	ldr	r1, [r7, #8]
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff ff35 	bl	800c7b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c94e:	bf00      	nop
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	0801cd84 	.word	0x0801cd84

0800c95c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c964:	4a04      	ldr	r2, [pc, #16]	; (800c978 <netif_set_default+0x1c>)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c96a:	bf00      	nop
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	20011b40 	.word	0x20011b40

0800c97c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d107      	bne.n	800c99a <netif_set_up+0x1e>
 800c98a:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <netif_set_up+0x4c>)
 800c98c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c990:	490e      	ldr	r1, [pc, #56]	; (800c9cc <netif_set_up+0x50>)
 800c992:	480f      	ldr	r0, [pc, #60]	; (800c9d0 <netif_set_up+0x54>)
 800c994:	f00a f814 	bl	80169c0 <iprintf>
 800c998:	e013      	b.n	800c9c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10c      	bne.n	800c9c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9ae:	f043 0301 	orr.w	r3, r3, #1
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9ba:	2103      	movs	r1, #3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f809 	bl	800c9d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	0801a8ec 	.word	0x0801a8ec
 800c9cc:	0801aa74 	.word	0x0801aa74
 800c9d0:	0801a93c 	.word	0x0801a93c

0800c9d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d106      	bne.n	800c9f4 <netif_issue_reports+0x20>
 800c9e6:	4b18      	ldr	r3, [pc, #96]	; (800ca48 <netif_issue_reports+0x74>)
 800c9e8:	f240 326d 	movw	r2, #877	; 0x36d
 800c9ec:	4917      	ldr	r1, [pc, #92]	; (800ca4c <netif_issue_reports+0x78>)
 800c9ee:	4818      	ldr	r0, [pc, #96]	; (800ca50 <netif_issue_reports+0x7c>)
 800c9f0:	f009 ffe6 	bl	80169c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9fa:	f003 0304 	and.w	r3, r3, #4
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d01e      	beq.n	800ca40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d017      	beq.n	800ca40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d013      	beq.n	800ca42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00e      	beq.n	800ca42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca2a:	f003 0308 	and.w	r3, r3, #8
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d007      	beq.n	800ca42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3304      	adds	r3, #4
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f008 f893 	bl	8014b64 <etharp_request>
 800ca3e:	e000      	b.n	800ca42 <netif_issue_reports+0x6e>
    return;
 800ca40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	0801a8ec 	.word	0x0801a8ec
 800ca4c:	0801aa90 	.word	0x0801aa90
 800ca50:	0801a93c 	.word	0x0801a93c

0800ca54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d107      	bne.n	800ca72 <netif_set_down+0x1e>
 800ca62:	4b12      	ldr	r3, [pc, #72]	; (800caac <netif_set_down+0x58>)
 800ca64:	f240 329b 	movw	r2, #923	; 0x39b
 800ca68:	4911      	ldr	r1, [pc, #68]	; (800cab0 <netif_set_down+0x5c>)
 800ca6a:	4812      	ldr	r0, [pc, #72]	; (800cab4 <netif_set_down+0x60>)
 800ca6c:	f009 ffa8 	bl	80169c0 <iprintf>
 800ca70:	e019      	b.n	800caa6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca78:	f003 0301 	and.w	r3, r3, #1
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d012      	beq.n	800caa6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca86:	f023 0301 	bic.w	r3, r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca98:	f003 0308 	and.w	r3, r3, #8
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f007 fc1d 	bl	80142e0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	0801a8ec 	.word	0x0801a8ec
 800cab0:	0801aab4 	.word	0x0801aab4
 800cab4:	0801a93c 	.word	0x0801a93c

0800cab8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d107      	bne.n	800cad6 <netif_set_link_up+0x1e>
 800cac6:	4b13      	ldr	r3, [pc, #76]	; (800cb14 <netif_set_link_up+0x5c>)
 800cac8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cacc:	4912      	ldr	r1, [pc, #72]	; (800cb18 <netif_set_link_up+0x60>)
 800cace:	4813      	ldr	r0, [pc, #76]	; (800cb1c <netif_set_link_up+0x64>)
 800cad0:	f009 ff76 	bl	80169c0 <iprintf>
 800cad4:	e01b      	b.n	800cb0e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cadc:	f003 0304 	and.w	r3, r3, #4
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d114      	bne.n	800cb0e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caea:	f043 0304 	orr.w	r3, r3, #4
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800caf6:	2103      	movs	r1, #3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff ff6b 	bl	800c9d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <netif_set_link_up+0x56>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	0801a8ec 	.word	0x0801a8ec
 800cb18:	0801aad4 	.word	0x0801aad4
 800cb1c:	0801a93c 	.word	0x0801a93c

0800cb20 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d107      	bne.n	800cb3e <netif_set_link_down+0x1e>
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <netif_set_link_down+0x54>)
 800cb30:	f240 4206 	movw	r2, #1030	; 0x406
 800cb34:	4910      	ldr	r1, [pc, #64]	; (800cb78 <netif_set_link_down+0x58>)
 800cb36:	4811      	ldr	r0, [pc, #68]	; (800cb7c <netif_set_link_down+0x5c>)
 800cb38:	f009 ff42 	bl	80169c0 <iprintf>
 800cb3c:	e017      	b.n	800cb6e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d010      	beq.n	800cb6e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb52:	f023 0304 	bic.w	r3, r3, #4
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	69db      	ldr	r3, [r3, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d003      	beq.n	800cb6e <netif_set_link_down+0x4e>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	0801a8ec 	.word	0x0801a8ec
 800cb78:	0801aaf8 	.word	0x0801aaf8
 800cb7c:	0801a93c 	.word	0x0801a93c

0800cb80 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	61da      	str	r2, [r3, #28]
  }
}
 800cb96:	bf00      	nop
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cba2:	b480      	push	{r7}
 800cba4:	b085      	sub	sp, #20
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	60b9      	str	r1, [r7, #8]
 800cbac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cbae:	f06f 030b 	mvn.w	r3, #11
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
	...

0800cbc0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cbca:	79fb      	ldrb	r3, [r7, #7]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d013      	beq.n	800cbf8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cbd0:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <netif_get_by_index+0x48>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	e00c      	b.n	800cbf2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbde:	3301      	adds	r3, #1
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	79fa      	ldrb	r2, [r7, #7]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d101      	bne.n	800cbec <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	e006      	b.n	800cbfa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1ef      	bne.n	800cbd8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	20011b3c 	.word	0x20011b3c

0800cc0c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cc12:	f009 fcc1 	bl	8016598 <sys_arch_protect>
 800cc16:	6038      	str	r0, [r7, #0]
 800cc18:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <pbuf_free_ooseq+0x44>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	6838      	ldr	r0, [r7, #0]
 800cc20:	f009 fcc8 	bl	80165b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cc24:	4b0b      	ldr	r3, [pc, #44]	; (800cc54 <pbuf_free_ooseq+0x48>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	607b      	str	r3, [r7, #4]
 800cc2a:	e00a      	b.n	800cc42 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d003      	beq.n	800cc3c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f002 fc91 	bl	800f55c <tcp_free_ooseq>
      return;
 800cc3a:	e005      	b.n	800cc48 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	607b      	str	r3, [r7, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1f1      	bne.n	800cc2c <pbuf_free_ooseq+0x20>
    }
  }
}
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20011b45 	.word	0x20011b45
 800cc54:	20011b54 	.word	0x20011b54

0800cc58 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cc60:	f7ff ffd4 	bl	800cc0c <pbuf_free_ooseq>
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cc72:	f009 fc91 	bl	8016598 <sys_arch_protect>
 800cc76:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cc78:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <pbuf_pool_is_empty+0x4c>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cc7e:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <pbuf_pool_is_empty+0x4c>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f009 fc95 	bl	80165b4 <sys_arch_unprotect>

  if (!queued) {
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10f      	bne.n	800ccb0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cc90:	2100      	movs	r1, #0
 800cc92:	480a      	ldr	r0, [pc, #40]	; (800ccbc <pbuf_pool_is_empty+0x50>)
 800cc94:	f7fe fd7c 	bl	800b790 <tcpip_try_callback>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d008      	beq.n	800ccb0 <pbuf_pool_is_empty+0x44>
 800cc9e:	f009 fc7b 	bl	8016598 <sys_arch_protect>
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <pbuf_pool_is_empty+0x4c>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	701a      	strb	r2, [r3, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f009 fc82 	bl	80165b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ccb0:	bf00      	nop
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20011b45 	.word	0x20011b45
 800ccbc:	0800cc59 	.word	0x0800cc59

0800ccc0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	4611      	mov	r1, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	460b      	mov	r3, r1
 800ccd0:	80fb      	strh	r3, [r7, #6]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	88fa      	ldrh	r2, [r7, #6]
 800cce6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	88ba      	ldrh	r2, [r7, #4]
 800ccec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ccee:	8b3b      	ldrh	r3, [r7, #24]
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	7f3a      	ldrb	r2, [r7, #28]
 800ccfa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	73da      	strb	r2, [r3, #15]
}
 800cd08:	bf00      	nop
 800cd0a:	3714      	adds	r7, #20
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08c      	sub	sp, #48	; 0x30
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	71fb      	strb	r3, [r7, #7]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	80bb      	strh	r3, [r7, #4]
 800cd22:	4613      	mov	r3, r2
 800cd24:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cd26:	79fb      	ldrb	r3, [r7, #7]
 800cd28:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cd2a:	887b      	ldrh	r3, [r7, #2]
 800cd2c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cd30:	d07f      	beq.n	800ce32 <pbuf_alloc+0x11e>
 800cd32:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cd36:	f300 80c8 	bgt.w	800ceca <pbuf_alloc+0x1b6>
 800cd3a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cd3e:	d010      	beq.n	800cd62 <pbuf_alloc+0x4e>
 800cd40:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cd44:	f300 80c1 	bgt.w	800ceca <pbuf_alloc+0x1b6>
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d002      	beq.n	800cd52 <pbuf_alloc+0x3e>
 800cd4c:	2b41      	cmp	r3, #65	; 0x41
 800cd4e:	f040 80bc 	bne.w	800ceca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cd52:	887a      	ldrh	r2, [r7, #2]
 800cd54:	88bb      	ldrh	r3, [r7, #4]
 800cd56:	4619      	mov	r1, r3
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f000 f8d1 	bl	800cf00 <pbuf_alloc_reference>
 800cd5e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cd60:	e0bd      	b.n	800cede <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cd6a:	88bb      	ldrh	r3, [r7, #4]
 800cd6c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cd6e:	200b      	movs	r0, #11
 800cd70:	f7ff fb9e 	bl	800c4b0 <memp_malloc>
 800cd74:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d109      	bne.n	800cd90 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cd7c:	f7ff ff76 	bl	800cc6c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <pbuf_alloc+0x78>
            pbuf_free(p);
 800cd86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd88:	f000 faa8 	bl	800d2dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	e0a7      	b.n	800cee0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cd90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd92:	3303      	adds	r3, #3
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	f023 0303 	bic.w	r3, r3, #3
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	8b7a      	ldrh	r2, [r7, #26]
 800cda4:	4293      	cmp	r3, r2
 800cda6:	bf28      	it	cs
 800cda8:	4613      	movcs	r3, r2
 800cdaa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cdac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdae:	3310      	adds	r3, #16
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	3303      	adds	r3, #3
 800cdb6:	f023 0303 	bic.w	r3, r3, #3
 800cdba:	4618      	mov	r0, r3
 800cdbc:	89f9      	ldrh	r1, [r7, #14]
 800cdbe:	8b7a      	ldrh	r2, [r7, #26]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	887b      	ldrh	r3, [r7, #2]
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4601      	mov	r1, r0
 800cdcc:	6938      	ldr	r0, [r7, #16]
 800cdce:	f7ff ff77 	bl	800ccc0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	f003 0303 	and.w	r3, r3, #3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d006      	beq.n	800cdec <pbuf_alloc+0xd8>
 800cdde:	4b42      	ldr	r3, [pc, #264]	; (800cee8 <pbuf_alloc+0x1d4>)
 800cde0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cde4:	4941      	ldr	r1, [pc, #260]	; (800ceec <pbuf_alloc+0x1d8>)
 800cde6:	4842      	ldr	r0, [pc, #264]	; (800cef0 <pbuf_alloc+0x1dc>)
 800cde8:	f009 fdea 	bl	80169c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cdec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdee:	3303      	adds	r3, #3
 800cdf0:	f023 0303 	bic.w	r3, r3, #3
 800cdf4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cdf8:	d106      	bne.n	800ce08 <pbuf_alloc+0xf4>
 800cdfa:	4b3b      	ldr	r3, [pc, #236]	; (800cee8 <pbuf_alloc+0x1d4>)
 800cdfc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ce00:	493c      	ldr	r1, [pc, #240]	; (800cef4 <pbuf_alloc+0x1e0>)
 800ce02:	483b      	ldr	r0, [pc, #236]	; (800cef0 <pbuf_alloc+0x1dc>)
 800ce04:	f009 fddc 	bl	80169c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	627b      	str	r3, [r7, #36]	; 0x24
 800ce12:	e002      	b.n	800ce1a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ce1e:	8b7a      	ldrh	r2, [r7, #26]
 800ce20:	89fb      	ldrh	r3, [r7, #14]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ce2a:	8b7b      	ldrh	r3, [r7, #26]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d19e      	bne.n	800cd6e <pbuf_alloc+0x5a>
      break;
 800ce30:	e055      	b.n	800cede <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ce32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce34:	3303      	adds	r3, #3
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	f023 0303 	bic.w	r3, r3, #3
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	88bb      	ldrh	r3, [r7, #4]
 800ce40:	3303      	adds	r3, #3
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	f023 0303 	bic.w	r3, r3, #3
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	4413      	add	r3, r2
 800ce4c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ce4e:	8b3b      	ldrh	r3, [r7, #24]
 800ce50:	3310      	adds	r3, #16
 800ce52:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce54:	8b3a      	ldrh	r2, [r7, #24]
 800ce56:	88bb      	ldrh	r3, [r7, #4]
 800ce58:	3303      	adds	r3, #3
 800ce5a:	f023 0303 	bic.w	r3, r3, #3
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d306      	bcc.n	800ce70 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ce62:	8afa      	ldrh	r2, [r7, #22]
 800ce64:	88bb      	ldrh	r3, [r7, #4]
 800ce66:	3303      	adds	r3, #3
 800ce68:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d201      	bcs.n	800ce74 <pbuf_alloc+0x160>
        return NULL;
 800ce70:	2300      	movs	r3, #0
 800ce72:	e035      	b.n	800cee0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ce74:	8afb      	ldrh	r3, [r7, #22]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff f976 	bl	800c168 <mem_malloc>
 800ce7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <pbuf_alloc+0x174>
        return NULL;
 800ce84:	2300      	movs	r3, #0
 800ce86:	e02b      	b.n	800cee0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ce88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce8a:	3310      	adds	r3, #16
 800ce8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce8e:	4413      	add	r3, r2
 800ce90:	3303      	adds	r3, #3
 800ce92:	f023 0303 	bic.w	r3, r3, #3
 800ce96:	4618      	mov	r0, r3
 800ce98:	88b9      	ldrh	r1, [r7, #4]
 800ce9a:	88ba      	ldrh	r2, [r7, #4]
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	887b      	ldrh	r3, [r7, #2]
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	460b      	mov	r3, r1
 800cea6:	4601      	mov	r1, r0
 800cea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ceaa:	f7ff ff09 	bl	800ccc0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d010      	beq.n	800cedc <pbuf_alloc+0x1c8>
 800ceba:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <pbuf_alloc+0x1d4>)
 800cebc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cec0:	490d      	ldr	r1, [pc, #52]	; (800cef8 <pbuf_alloc+0x1e4>)
 800cec2:	480b      	ldr	r0, [pc, #44]	; (800cef0 <pbuf_alloc+0x1dc>)
 800cec4:	f009 fd7c 	bl	80169c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cec8:	e008      	b.n	800cedc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ceca:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <pbuf_alloc+0x1d4>)
 800cecc:	f240 1227 	movw	r2, #295	; 0x127
 800ced0:	490a      	ldr	r1, [pc, #40]	; (800cefc <pbuf_alloc+0x1e8>)
 800ced2:	4807      	ldr	r0, [pc, #28]	; (800cef0 <pbuf_alloc+0x1dc>)
 800ced4:	f009 fd74 	bl	80169c0 <iprintf>
      return NULL;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e001      	b.n	800cee0 <pbuf_alloc+0x1cc>
      break;
 800cedc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3728      	adds	r7, #40	; 0x28
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	0801ab1c 	.word	0x0801ab1c
 800ceec:	0801ab4c 	.word	0x0801ab4c
 800cef0:	0801ab7c 	.word	0x0801ab7c
 800cef4:	0801aba4 	.word	0x0801aba4
 800cef8:	0801abd8 	.word	0x0801abd8
 800cefc:	0801ac04 	.word	0x0801ac04

0800cf00 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af02      	add	r7, sp, #8
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	807b      	strh	r3, [r7, #2]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cf10:	883b      	ldrh	r3, [r7, #0]
 800cf12:	2b41      	cmp	r3, #65	; 0x41
 800cf14:	d009      	beq.n	800cf2a <pbuf_alloc_reference+0x2a>
 800cf16:	883b      	ldrh	r3, [r7, #0]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d006      	beq.n	800cf2a <pbuf_alloc_reference+0x2a>
 800cf1c:	4b0f      	ldr	r3, [pc, #60]	; (800cf5c <pbuf_alloc_reference+0x5c>)
 800cf1e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cf22:	490f      	ldr	r1, [pc, #60]	; (800cf60 <pbuf_alloc_reference+0x60>)
 800cf24:	480f      	ldr	r0, [pc, #60]	; (800cf64 <pbuf_alloc_reference+0x64>)
 800cf26:	f009 fd4b 	bl	80169c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cf2a:	200a      	movs	r0, #10
 800cf2c:	f7ff fac0 	bl	800c4b0 <memp_malloc>
 800cf30:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d101      	bne.n	800cf3c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e00b      	b.n	800cf54 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cf3c:	8879      	ldrh	r1, [r7, #2]
 800cf3e:	887a      	ldrh	r2, [r7, #2]
 800cf40:	2300      	movs	r3, #0
 800cf42:	9301      	str	r3, [sp, #4]
 800cf44:	883b      	ldrh	r3, [r7, #0]
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7ff feb7 	bl	800ccc0 <pbuf_init_alloced_pbuf>
  return p;
 800cf52:	68fb      	ldr	r3, [r7, #12]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	0801ab1c 	.word	0x0801ab1c
 800cf60:	0801ac20 	.word	0x0801ac20
 800cf64:	0801ab7c 	.word	0x0801ab7c

0800cf68 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b088      	sub	sp, #32
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	607b      	str	r3, [r7, #4]
 800cf70:	4603      	mov	r3, r0
 800cf72:	73fb      	strb	r3, [r7, #15]
 800cf74:	460b      	mov	r3, r1
 800cf76:	81bb      	strh	r3, [r7, #12]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
 800cf7e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf80:	8a7b      	ldrh	r3, [r7, #18]
 800cf82:	3303      	adds	r3, #3
 800cf84:	f023 0203 	bic.w	r2, r3, #3
 800cf88:	89bb      	ldrh	r3, [r7, #12]
 800cf8a:	441a      	add	r2, r3
 800cf8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d901      	bls.n	800cf96 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	e018      	b.n	800cfc8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d007      	beq.n	800cfac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf9c:	8a7b      	ldrh	r3, [r7, #18]
 800cf9e:	3303      	adds	r3, #3
 800cfa0:	f023 0303 	bic.w	r3, r3, #3
 800cfa4:	6a3a      	ldr	r2, [r7, #32]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	e001      	b.n	800cfb0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cfac:	2300      	movs	r3, #0
 800cfae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	89b9      	ldrh	r1, [r7, #12]
 800cfb4:	89ba      	ldrh	r2, [r7, #12]
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	897b      	ldrh	r3, [r7, #10]
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	6979      	ldr	r1, [r7, #20]
 800cfc2:	f7ff fe7d 	bl	800ccc0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cfc6:	687b      	ldr	r3, [r7, #4]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <pbuf_realloc+0x20>
 800cfe2:	4b3a      	ldr	r3, [pc, #232]	; (800d0cc <pbuf_realloc+0xfc>)
 800cfe4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cfe8:	4939      	ldr	r1, [pc, #228]	; (800d0d0 <pbuf_realloc+0x100>)
 800cfea:	483a      	ldr	r0, [pc, #232]	; (800d0d4 <pbuf_realloc+0x104>)
 800cfec:	f009 fce8 	bl	80169c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	891b      	ldrh	r3, [r3, #8]
 800cff4:	887a      	ldrh	r2, [r7, #2]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d263      	bcs.n	800d0c2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	891a      	ldrh	r2, [r3, #8]
 800cffe:	887b      	ldrh	r3, [r7, #2]
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d004:	887b      	ldrh	r3, [r7, #2]
 800d006:	817b      	strh	r3, [r7, #10]
  q = p;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d00c:	e018      	b.n	800d040 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	895b      	ldrh	r3, [r3, #10]
 800d012:	897a      	ldrh	r2, [r7, #10]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	891a      	ldrh	r2, [r3, #8]
 800d01c:	893b      	ldrh	r3, [r7, #8]
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	b29a      	uxth	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <pbuf_realloc+0x70>
 800d032:	4b26      	ldr	r3, [pc, #152]	; (800d0cc <pbuf_realloc+0xfc>)
 800d034:	f240 12af 	movw	r2, #431	; 0x1af
 800d038:	4927      	ldr	r1, [pc, #156]	; (800d0d8 <pbuf_realloc+0x108>)
 800d03a:	4826      	ldr	r0, [pc, #152]	; (800d0d4 <pbuf_realloc+0x104>)
 800d03c:	f009 fcc0 	bl	80169c0 <iprintf>
  while (rem_len > q->len) {
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	895b      	ldrh	r3, [r3, #10]
 800d044:	897a      	ldrh	r2, [r7, #10]
 800d046:	429a      	cmp	r2, r3
 800d048:	d8e1      	bhi.n	800d00e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	7b1b      	ldrb	r3, [r3, #12]
 800d04e:	f003 030f 	and.w	r3, r3, #15
 800d052:	2b00      	cmp	r3, #0
 800d054:	d121      	bne.n	800d09a <pbuf_realloc+0xca>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	895b      	ldrh	r3, [r3, #10]
 800d05a:	897a      	ldrh	r2, [r7, #10]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d01c      	beq.n	800d09a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	7b5b      	ldrb	r3, [r3, #13]
 800d064:	f003 0302 	and.w	r3, r3, #2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d116      	bne.n	800d09a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	b29a      	uxth	r2, r3
 800d076:	897b      	ldrh	r3, [r7, #10]
 800d078:	4413      	add	r3, r2
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	4619      	mov	r1, r3
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7fe ff68 	bl	800bf54 <mem_trim>
 800d084:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <pbuf_realloc+0xca>
 800d08c:	4b0f      	ldr	r3, [pc, #60]	; (800d0cc <pbuf_realloc+0xfc>)
 800d08e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d092:	4912      	ldr	r1, [pc, #72]	; (800d0dc <pbuf_realloc+0x10c>)
 800d094:	480f      	ldr	r0, [pc, #60]	; (800d0d4 <pbuf_realloc+0x104>)
 800d096:	f009 fc93 	bl	80169c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	897a      	ldrh	r2, [r7, #10]
 800d09e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	895a      	ldrh	r2, [r3, #10]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f911 	bl	800d2dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	601a      	str	r2, [r3, #0]
 800d0c0:	e000      	b.n	800d0c4 <pbuf_realloc+0xf4>
    return;
 800d0c2:	bf00      	nop

}
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	0801ab1c 	.word	0x0801ab1c
 800d0d0:	0801ac34 	.word	0x0801ac34
 800d0d4:	0801ab7c 	.word	0x0801ab7c
 800d0d8:	0801ac4c 	.word	0x0801ac4c
 800d0dc:	0801ac64 	.word	0x0801ac64

0800d0e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d106      	bne.n	800d102 <pbuf_add_header_impl+0x22>
 800d0f4:	4b2b      	ldr	r3, [pc, #172]	; (800d1a4 <pbuf_add_header_impl+0xc4>)
 800d0f6:	f240 12df 	movw	r2, #479	; 0x1df
 800d0fa:	492b      	ldr	r1, [pc, #172]	; (800d1a8 <pbuf_add_header_impl+0xc8>)
 800d0fc:	482b      	ldr	r0, [pc, #172]	; (800d1ac <pbuf_add_header_impl+0xcc>)
 800d0fe:	f009 fc5f 	bl	80169c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <pbuf_add_header_impl+0x30>
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d10e:	d301      	bcc.n	800d114 <pbuf_add_header_impl+0x34>
    return 1;
 800d110:	2301      	movs	r3, #1
 800d112:	e043      	b.n	800d19c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <pbuf_add_header_impl+0x3e>
    return 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	e03e      	b.n	800d19c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	891a      	ldrh	r2, [r3, #8]
 800d126:	8a7b      	ldrh	r3, [r7, #18]
 800d128:	4413      	add	r3, r2
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	8a7a      	ldrh	r2, [r7, #18]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d901      	bls.n	800d136 <pbuf_add_header_impl+0x56>
    return 1;
 800d132:	2301      	movs	r3, #1
 800d134:	e032      	b.n	800d19c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	7b1b      	ldrb	r3, [r3, #12]
 800d13a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d13c:	8a3b      	ldrh	r3, [r7, #16]
 800d13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00c      	beq.n	800d160 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	425b      	negs	r3, r3
 800d14e:	4413      	add	r3, r2
 800d150:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3310      	adds	r3, #16
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d20d      	bcs.n	800d178 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e01d      	b.n	800d19c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d006      	beq.n	800d174 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	425b      	negs	r3, r3
 800d16e:	4413      	add	r3, r2
 800d170:	617b      	str	r3, [r7, #20]
 800d172:	e001      	b.n	800d178 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d174:	2301      	movs	r3, #1
 800d176:	e011      	b.n	800d19c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	895a      	ldrh	r2, [r3, #10]
 800d182:	8a7b      	ldrh	r3, [r7, #18]
 800d184:	4413      	add	r3, r2
 800d186:	b29a      	uxth	r2, r3
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	891a      	ldrh	r2, [r3, #8]
 800d190:	8a7b      	ldrh	r3, [r7, #18]
 800d192:	4413      	add	r3, r2
 800d194:	b29a      	uxth	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	811a      	strh	r2, [r3, #8]


  return 0;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3718      	adds	r7, #24
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	0801ab1c 	.word	0x0801ab1c
 800d1a8:	0801ac80 	.word	0x0801ac80
 800d1ac:	0801ab7c 	.word	0x0801ab7c

0800d1b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff ff8e 	bl	800d0e0 <pbuf_add_header_impl>
 800d1c4:	4603      	mov	r3, r0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d106      	bne.n	800d1ee <pbuf_remove_header+0x1e>
 800d1e0:	4b20      	ldr	r3, [pc, #128]	; (800d264 <pbuf_remove_header+0x94>)
 800d1e2:	f240 224b 	movw	r2, #587	; 0x24b
 800d1e6:	4920      	ldr	r1, [pc, #128]	; (800d268 <pbuf_remove_header+0x98>)
 800d1e8:	4820      	ldr	r0, [pc, #128]	; (800d26c <pbuf_remove_header+0x9c>)
 800d1ea:	f009 fbe9 	bl	80169c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d003      	beq.n	800d1fc <pbuf_remove_header+0x2c>
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1fa:	d301      	bcc.n	800d200 <pbuf_remove_header+0x30>
    return 1;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e02c      	b.n	800d25a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <pbuf_remove_header+0x3a>
    return 0;
 800d206:	2300      	movs	r3, #0
 800d208:	e027      	b.n	800d25a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	895b      	ldrh	r3, [r3, #10]
 800d212:	89fa      	ldrh	r2, [r7, #14]
 800d214:	429a      	cmp	r2, r3
 800d216:	d908      	bls.n	800d22a <pbuf_remove_header+0x5a>
 800d218:	4b12      	ldr	r3, [pc, #72]	; (800d264 <pbuf_remove_header+0x94>)
 800d21a:	f240 2255 	movw	r2, #597	; 0x255
 800d21e:	4914      	ldr	r1, [pc, #80]	; (800d270 <pbuf_remove_header+0xa0>)
 800d220:	4812      	ldr	r0, [pc, #72]	; (800d26c <pbuf_remove_header+0x9c>)
 800d222:	f009 fbcd 	bl	80169c0 <iprintf>
 800d226:	2301      	movs	r3, #1
 800d228:	e017      	b.n	800d25a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	441a      	add	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	895a      	ldrh	r2, [r3, #10]
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	b29a      	uxth	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	891a      	ldrh	r2, [r3, #8]
 800d24e:	89fb      	ldrh	r3, [r7, #14]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	b29a      	uxth	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	0801ab1c 	.word	0x0801ab1c
 800d268:	0801ac80 	.word	0x0801ac80
 800d26c:	0801ab7c 	.word	0x0801ab7c
 800d270:	0801ac8c 	.word	0x0801ac8c

0800d274 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	807b      	strh	r3, [r7, #2]
 800d280:	4613      	mov	r3, r2
 800d282:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d284:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	da08      	bge.n	800d29e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d28c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d290:	425b      	negs	r3, r3
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff ff9b 	bl	800d1d0 <pbuf_remove_header>
 800d29a:	4603      	mov	r3, r0
 800d29c:	e007      	b.n	800d2ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d29e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2a2:	787a      	ldrb	r2, [r7, #1]
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7ff ff1a 	bl	800d0e0 <pbuf_add_header_impl>
 800d2ac:	4603      	mov	r3, r0
  }
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	460b      	mov	r3, r1
 800d2c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d2c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7ff ffd2 	bl	800d274 <pbuf_header_impl>
 800d2d0:	4603      	mov	r3, r0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
	...

0800d2dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b088      	sub	sp, #32
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d106      	bne.n	800d2fe <pbuf_free+0x22>
 800d2f0:	4b3b      	ldr	r3, [pc, #236]	; (800d3e0 <pbuf_free+0x104>)
 800d2f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d2f6:	493b      	ldr	r1, [pc, #236]	; (800d3e4 <pbuf_free+0x108>)
 800d2f8:	483b      	ldr	r0, [pc, #236]	; (800d3e8 <pbuf_free+0x10c>)
 800d2fa:	f009 fb61 	bl	80169c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	e069      	b.n	800d3d6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d306:	e062      	b.n	800d3ce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d308:	f009 f946 	bl	8016598 <sys_arch_protect>
 800d30c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	7b9b      	ldrb	r3, [r3, #14]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d106      	bne.n	800d324 <pbuf_free+0x48>
 800d316:	4b32      	ldr	r3, [pc, #200]	; (800d3e0 <pbuf_free+0x104>)
 800d318:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d31c:	4933      	ldr	r1, [pc, #204]	; (800d3ec <pbuf_free+0x110>)
 800d31e:	4832      	ldr	r0, [pc, #200]	; (800d3e8 <pbuf_free+0x10c>)
 800d320:	f009 fb4e 	bl	80169c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7b9b      	ldrb	r3, [r3, #14]
 800d328:	3b01      	subs	r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	739a      	strb	r2, [r3, #14]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7b9b      	ldrb	r3, [r3, #14]
 800d334:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d336:	69b8      	ldr	r0, [r7, #24]
 800d338:	f009 f93c 	bl	80165b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d143      	bne.n	800d3ca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	7b1b      	ldrb	r3, [r3, #12]
 800d34c:	f003 030f 	and.w	r3, r3, #15
 800d350:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	7b5b      	ldrb	r3, [r3, #13]
 800d356:	f003 0302 	and.w	r3, r3, #2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d011      	beq.n	800d382 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d106      	bne.n	800d378 <pbuf_free+0x9c>
 800d36a:	4b1d      	ldr	r3, [pc, #116]	; (800d3e0 <pbuf_free+0x104>)
 800d36c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d370:	491f      	ldr	r1, [pc, #124]	; (800d3f0 <pbuf_free+0x114>)
 800d372:	481d      	ldr	r0, [pc, #116]	; (800d3e8 <pbuf_free+0x10c>)
 800d374:	f009 fb24 	bl	80169c0 <iprintf>
        pc->custom_free_function(p);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	4798      	blx	r3
 800d380:	e01d      	b.n	800d3be <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	2b02      	cmp	r3, #2
 800d386:	d104      	bne.n	800d392 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	200b      	movs	r0, #11
 800d38c:	f7ff f906 	bl	800c59c <memp_free>
 800d390:	e015      	b.n	800d3be <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d392:	7bfb      	ldrb	r3, [r7, #15]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d104      	bne.n	800d3a2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	200a      	movs	r0, #10
 800d39c:	f7ff f8fe 	bl	800c59c <memp_free>
 800d3a0:	e00d      	b.n	800d3be <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d103      	bne.n	800d3b0 <pbuf_free+0xd4>
          mem_free(p);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7fe fd43 	bl	800be34 <mem_free>
 800d3ae:	e006      	b.n	800d3be <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d3b0:	4b0b      	ldr	r3, [pc, #44]	; (800d3e0 <pbuf_free+0x104>)
 800d3b2:	f240 320f 	movw	r2, #783	; 0x30f
 800d3b6:	490f      	ldr	r1, [pc, #60]	; (800d3f4 <pbuf_free+0x118>)
 800d3b8:	480b      	ldr	r0, [pc, #44]	; (800d3e8 <pbuf_free+0x10c>)
 800d3ba:	f009 fb01 	bl	80169c0 <iprintf>
        }
      }
      count++;
 800d3be:	7ffb      	ldrb	r3, [r7, #31]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	607b      	str	r3, [r7, #4]
 800d3c8:	e001      	b.n	800d3ce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d199      	bne.n	800d308 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d3d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3720      	adds	r7, #32
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	0801ab1c 	.word	0x0801ab1c
 800d3e4:	0801ac80 	.word	0x0801ac80
 800d3e8:	0801ab7c 	.word	0x0801ab7c
 800d3ec:	0801acac 	.word	0x0801acac
 800d3f0:	0801acc4 	.word	0x0801acc4
 800d3f4:	0801ace8 	.word	0x0801ace8

0800d3f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d404:	e005      	b.n	800d412 <pbuf_clen+0x1a>
    ++len;
 800d406:	89fb      	ldrh	r3, [r7, #14]
 800d408:	3301      	adds	r3, #1
 800d40a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1f6      	bne.n	800d406 <pbuf_clen+0xe>
  }
  return len;
 800d418:	89fb      	ldrh	r3, [r7, #14]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
	...

0800d428 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d016      	beq.n	800d464 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d436:	f009 f8af 	bl	8016598 <sys_arch_protect>
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	7b9b      	ldrb	r3, [r3, #14]
 800d440:	3301      	adds	r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	739a      	strb	r2, [r3, #14]
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f009 f8b3 	bl	80165b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7b9b      	ldrb	r3, [r3, #14]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <pbuf_ref+0x3c>
 800d456:	4b05      	ldr	r3, [pc, #20]	; (800d46c <pbuf_ref+0x44>)
 800d458:	f240 3242 	movw	r2, #834	; 0x342
 800d45c:	4904      	ldr	r1, [pc, #16]	; (800d470 <pbuf_ref+0x48>)
 800d45e:	4805      	ldr	r0, [pc, #20]	; (800d474 <pbuf_ref+0x4c>)
 800d460:	f009 faae 	bl	80169c0 <iprintf>
  }
}
 800d464:	bf00      	nop
 800d466:	3710      	adds	r7, #16
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	0801ab1c 	.word	0x0801ab1c
 800d470:	0801acfc 	.word	0x0801acfc
 800d474:	0801ab7c 	.word	0x0801ab7c

0800d478 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <pbuf_cat+0x16>
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d107      	bne.n	800d49e <pbuf_cat+0x26>
 800d48e:	4b20      	ldr	r3, [pc, #128]	; (800d510 <pbuf_cat+0x98>)
 800d490:	f240 3259 	movw	r2, #857	; 0x359
 800d494:	491f      	ldr	r1, [pc, #124]	; (800d514 <pbuf_cat+0x9c>)
 800d496:	4820      	ldr	r0, [pc, #128]	; (800d518 <pbuf_cat+0xa0>)
 800d498:	f009 fa92 	bl	80169c0 <iprintf>
 800d49c:	e034      	b.n	800d508 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e00a      	b.n	800d4ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	891a      	ldrh	r2, [r3, #8]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	891b      	ldrh	r3, [r3, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1f0      	bne.n	800d4a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	891a      	ldrh	r2, [r3, #8]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	895b      	ldrh	r3, [r3, #10]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d006      	beq.n	800d4dc <pbuf_cat+0x64>
 800d4ce:	4b10      	ldr	r3, [pc, #64]	; (800d510 <pbuf_cat+0x98>)
 800d4d0:	f240 3262 	movw	r2, #866	; 0x362
 800d4d4:	4911      	ldr	r1, [pc, #68]	; (800d51c <pbuf_cat+0xa4>)
 800d4d6:	4810      	ldr	r0, [pc, #64]	; (800d518 <pbuf_cat+0xa0>)
 800d4d8:	f009 fa72 	bl	80169c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d006      	beq.n	800d4f2 <pbuf_cat+0x7a>
 800d4e4:	4b0a      	ldr	r3, [pc, #40]	; (800d510 <pbuf_cat+0x98>)
 800d4e6:	f240 3263 	movw	r2, #867	; 0x363
 800d4ea:	490d      	ldr	r1, [pc, #52]	; (800d520 <pbuf_cat+0xa8>)
 800d4ec:	480a      	ldr	r0, [pc, #40]	; (800d518 <pbuf_cat+0xa0>)
 800d4ee:	f009 fa67 	bl	80169c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	891a      	ldrh	r2, [r3, #8]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	891b      	ldrh	r3, [r3, #8]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	0801ab1c 	.word	0x0801ab1c
 800d514:	0801ad10 	.word	0x0801ad10
 800d518:	0801ab7c 	.word	0x0801ab7c
 800d51c:	0801ad48 	.word	0x0801ad48
 800d520:	0801ad78 	.word	0x0801ad78

0800d524 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d52e:	2300      	movs	r3, #0
 800d530:	617b      	str	r3, [r7, #20]
 800d532:	2300      	movs	r3, #0
 800d534:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d008      	beq.n	800d54e <pbuf_copy+0x2a>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d005      	beq.n	800d54e <pbuf_copy+0x2a>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	891a      	ldrh	r2, [r3, #8]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	891b      	ldrh	r3, [r3, #8]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d209      	bcs.n	800d562 <pbuf_copy+0x3e>
 800d54e:	4b57      	ldr	r3, [pc, #348]	; (800d6ac <pbuf_copy+0x188>)
 800d550:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d554:	4956      	ldr	r1, [pc, #344]	; (800d6b0 <pbuf_copy+0x18c>)
 800d556:	4857      	ldr	r0, [pc, #348]	; (800d6b4 <pbuf_copy+0x190>)
 800d558:	f009 fa32 	bl	80169c0 <iprintf>
 800d55c:	f06f 030f 	mvn.w	r3, #15
 800d560:	e09f      	b.n	800d6a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	895b      	ldrh	r3, [r3, #10]
 800d566:	461a      	mov	r2, r3
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	1ad2      	subs	r2, r2, r3
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	895b      	ldrh	r3, [r3, #10]
 800d570:	4619      	mov	r1, r3
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	1acb      	subs	r3, r1, r3
 800d576:	429a      	cmp	r2, r3
 800d578:	d306      	bcc.n	800d588 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	895b      	ldrh	r3, [r3, #10]
 800d57e:	461a      	mov	r2, r3
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	e005      	b.n	800d594 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	895b      	ldrh	r3, [r3, #10]
 800d58c:	461a      	mov	r2, r3
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685a      	ldr	r2, [r3, #4]
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	18d0      	adds	r0, r2, r3
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	f009 f945 	bl	8016836 <memcpy>
    offset_to += len;
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d906      	bls.n	800d5d6 <pbuf_copy+0xb2>
 800d5c8:	4b38      	ldr	r3, [pc, #224]	; (800d6ac <pbuf_copy+0x188>)
 800d5ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d5ce:	493a      	ldr	r1, [pc, #232]	; (800d6b8 <pbuf_copy+0x194>)
 800d5d0:	4838      	ldr	r0, [pc, #224]	; (800d6b4 <pbuf_copy+0x190>)
 800d5d2:	f009 f9f5 	bl	80169c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	895b      	ldrh	r3, [r3, #10]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d906      	bls.n	800d5f0 <pbuf_copy+0xcc>
 800d5e2:	4b32      	ldr	r3, [pc, #200]	; (800d6ac <pbuf_copy+0x188>)
 800d5e4:	f240 32da 	movw	r2, #986	; 0x3da
 800d5e8:	4934      	ldr	r1, [pc, #208]	; (800d6bc <pbuf_copy+0x198>)
 800d5ea:	4832      	ldr	r0, [pc, #200]	; (800d6b4 <pbuf_copy+0x190>)
 800d5ec:	f009 f9e8 	bl	80169c0 <iprintf>
    if (offset_from >= p_from->len) {
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	895b      	ldrh	r3, [r3, #10]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d304      	bcc.n	800d606 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	895b      	ldrh	r3, [r3, #10]
 800d60a:	461a      	mov	r2, r3
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	4293      	cmp	r3, r2
 800d610:	d114      	bne.n	800d63c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10c      	bne.n	800d63c <pbuf_copy+0x118>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d009      	beq.n	800d63c <pbuf_copy+0x118>
 800d628:	4b20      	ldr	r3, [pc, #128]	; (800d6ac <pbuf_copy+0x188>)
 800d62a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d62e:	4924      	ldr	r1, [pc, #144]	; (800d6c0 <pbuf_copy+0x19c>)
 800d630:	4820      	ldr	r0, [pc, #128]	; (800d6b4 <pbuf_copy+0x190>)
 800d632:	f009 f9c5 	bl	80169c0 <iprintf>
 800d636:	f06f 030f 	mvn.w	r3, #15
 800d63a:	e032      	b.n	800d6a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d013      	beq.n	800d66a <pbuf_copy+0x146>
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	895a      	ldrh	r2, [r3, #10]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	891b      	ldrh	r3, [r3, #8]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d10d      	bne.n	800d66a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d009      	beq.n	800d66a <pbuf_copy+0x146>
 800d656:	4b15      	ldr	r3, [pc, #84]	; (800d6ac <pbuf_copy+0x188>)
 800d658:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d65c:	4919      	ldr	r1, [pc, #100]	; (800d6c4 <pbuf_copy+0x1a0>)
 800d65e:	4815      	ldr	r0, [pc, #84]	; (800d6b4 <pbuf_copy+0x190>)
 800d660:	f009 f9ae 	bl	80169c0 <iprintf>
 800d664:	f06f 0305 	mvn.w	r3, #5
 800d668:	e01b      	b.n	800d6a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d013      	beq.n	800d698 <pbuf_copy+0x174>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	895a      	ldrh	r2, [r3, #10]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	891b      	ldrh	r3, [r3, #8]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d10d      	bne.n	800d698 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d009      	beq.n	800d698 <pbuf_copy+0x174>
 800d684:	4b09      	ldr	r3, [pc, #36]	; (800d6ac <pbuf_copy+0x188>)
 800d686:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d68a:	490e      	ldr	r1, [pc, #56]	; (800d6c4 <pbuf_copy+0x1a0>)
 800d68c:	4809      	ldr	r0, [pc, #36]	; (800d6b4 <pbuf_copy+0x190>)
 800d68e:	f009 f997 	bl	80169c0 <iprintf>
 800d692:	f06f 0305 	mvn.w	r3, #5
 800d696:	e004      	b.n	800d6a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f47f af61 	bne.w	800d562 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	0801ab1c 	.word	0x0801ab1c
 800d6b0:	0801adc4 	.word	0x0801adc4
 800d6b4:	0801ab7c 	.word	0x0801ab7c
 800d6b8:	0801adf4 	.word	0x0801adf4
 800d6bc:	0801ae0c 	.word	0x0801ae0c
 800d6c0:	0801ae28 	.word	0x0801ae28
 800d6c4:	0801ae38 	.word	0x0801ae38

0800d6c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	80fb      	strh	r3, [r7, #6]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d108      	bne.n	800d6fe <pbuf_copy_partial+0x36>
 800d6ec:	4b2b      	ldr	r3, [pc, #172]	; (800d79c <pbuf_copy_partial+0xd4>)
 800d6ee:	f240 420a 	movw	r2, #1034	; 0x40a
 800d6f2:	492b      	ldr	r1, [pc, #172]	; (800d7a0 <pbuf_copy_partial+0xd8>)
 800d6f4:	482b      	ldr	r0, [pc, #172]	; (800d7a4 <pbuf_copy_partial+0xdc>)
 800d6f6:	f009 f963 	bl	80169c0 <iprintf>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e04a      	b.n	800d794 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d108      	bne.n	800d716 <pbuf_copy_partial+0x4e>
 800d704:	4b25      	ldr	r3, [pc, #148]	; (800d79c <pbuf_copy_partial+0xd4>)
 800d706:	f240 420b 	movw	r2, #1035	; 0x40b
 800d70a:	4927      	ldr	r1, [pc, #156]	; (800d7a8 <pbuf_copy_partial+0xe0>)
 800d70c:	4825      	ldr	r0, [pc, #148]	; (800d7a4 <pbuf_copy_partial+0xdc>)
 800d70e:	f009 f957 	bl	80169c0 <iprintf>
 800d712:	2300      	movs	r3, #0
 800d714:	e03e      	b.n	800d794 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	61fb      	str	r3, [r7, #28]
 800d71a:	e034      	b.n	800d786 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d71c:	88bb      	ldrh	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00a      	beq.n	800d738 <pbuf_copy_partial+0x70>
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	895b      	ldrh	r3, [r3, #10]
 800d726:	88ba      	ldrh	r2, [r7, #4]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d305      	bcc.n	800d738 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	895b      	ldrh	r3, [r3, #10]
 800d730:	88ba      	ldrh	r2, [r7, #4]
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	80bb      	strh	r3, [r7, #4]
 800d736:	e023      	b.n	800d780 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	895a      	ldrh	r2, [r3, #10]
 800d73c:	88bb      	ldrh	r3, [r7, #4]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d742:	8b3a      	ldrh	r2, [r7, #24]
 800d744:	88fb      	ldrh	r3, [r7, #6]
 800d746:	429a      	cmp	r2, r3
 800d748:	d901      	bls.n	800d74e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d74a:	88fb      	ldrh	r3, [r7, #6]
 800d74c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d74e:	8b7b      	ldrh	r3, [r7, #26]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	18d0      	adds	r0, r2, r3
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	88bb      	ldrh	r3, [r7, #4]
 800d75a:	4413      	add	r3, r2
 800d75c:	8b3a      	ldrh	r2, [r7, #24]
 800d75e:	4619      	mov	r1, r3
 800d760:	f009 f869 	bl	8016836 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d764:	8afa      	ldrh	r2, [r7, #22]
 800d766:	8b3b      	ldrh	r3, [r7, #24]
 800d768:	4413      	add	r3, r2
 800d76a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d76c:	8b7a      	ldrh	r2, [r7, #26]
 800d76e:	8b3b      	ldrh	r3, [r7, #24]
 800d770:	4413      	add	r3, r2
 800d772:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d774:	88fa      	ldrh	r2, [r7, #6]
 800d776:	8b3b      	ldrh	r3, [r7, #24]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	61fb      	str	r3, [r7, #28]
 800d786:	88fb      	ldrh	r3, [r7, #6]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <pbuf_copy_partial+0xca>
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1c4      	bne.n	800d71c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d792:	8afb      	ldrh	r3, [r7, #22]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	0801ab1c 	.word	0x0801ab1c
 800d7a0:	0801ae64 	.word	0x0801ae64
 800d7a4:	0801ab7c 	.word	0x0801ab7c
 800d7a8:	0801ae84 	.word	0x0801ae84

0800d7ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	603a      	str	r2, [r7, #0]
 800d7b6:	71fb      	strb	r3, [r7, #7]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	8919      	ldrh	r1, [r3, #8]
 800d7c0:	88ba      	ldrh	r2, [r7, #4]
 800d7c2:	79fb      	ldrb	r3, [r7, #7]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff faa5 	bl	800cd14 <pbuf_alloc>
 800d7ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <pbuf_clone+0x2a>
    return NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e011      	b.n	800d7fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f7ff fea3 	bl	800d524 <pbuf_copy>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d7e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d006      	beq.n	800d7f8 <pbuf_clone+0x4c>
 800d7ea:	4b06      	ldr	r3, [pc, #24]	; (800d804 <pbuf_clone+0x58>)
 800d7ec:	f240 5224 	movw	r2, #1316	; 0x524
 800d7f0:	4905      	ldr	r1, [pc, #20]	; (800d808 <pbuf_clone+0x5c>)
 800d7f2:	4806      	ldr	r0, [pc, #24]	; (800d80c <pbuf_clone+0x60>)
 800d7f4:	f009 f8e4 	bl	80169c0 <iprintf>
  return q;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	0801ab1c 	.word	0x0801ab1c
 800d808:	0801af90 	.word	0x0801af90
 800d80c:	0801ab7c 	.word	0x0801ab7c

0800d810 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d814:	f009 f8ec 	bl	80169f0 <rand>
 800d818:	4603      	mov	r3, r0
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d820:	b29b      	uxth	r3, r3
 800d822:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d826:	b29a      	uxth	r2, r3
 800d828:	4b01      	ldr	r3, [pc, #4]	; (800d830 <tcp_init+0x20>)
 800d82a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d82c:	bf00      	nop
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20000024 	.word	0x20000024

0800d834 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	7d1b      	ldrb	r3, [r3, #20]
 800d840:	2b01      	cmp	r3, #1
 800d842:	d105      	bne.n	800d850 <tcp_free+0x1c>
 800d844:	4b06      	ldr	r3, [pc, #24]	; (800d860 <tcp_free+0x2c>)
 800d846:	22d4      	movs	r2, #212	; 0xd4
 800d848:	4906      	ldr	r1, [pc, #24]	; (800d864 <tcp_free+0x30>)
 800d84a:	4807      	ldr	r0, [pc, #28]	; (800d868 <tcp_free+0x34>)
 800d84c:	f009 f8b8 	bl	80169c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d850:	6879      	ldr	r1, [r7, #4]
 800d852:	2000      	movs	r0, #0
 800d854:	f7fe fea2 	bl	800c59c <memp_free>
}
 800d858:	bf00      	nop
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	0801b01c 	.word	0x0801b01c
 800d864:	0801b04c 	.word	0x0801b04c
 800d868:	0801b060 	.word	0x0801b060

0800d86c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	7d1b      	ldrb	r3, [r3, #20]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d105      	bne.n	800d888 <tcp_free_listen+0x1c>
 800d87c:	4b06      	ldr	r3, [pc, #24]	; (800d898 <tcp_free_listen+0x2c>)
 800d87e:	22df      	movs	r2, #223	; 0xdf
 800d880:	4906      	ldr	r1, [pc, #24]	; (800d89c <tcp_free_listen+0x30>)
 800d882:	4807      	ldr	r0, [pc, #28]	; (800d8a0 <tcp_free_listen+0x34>)
 800d884:	f009 f89c 	bl	80169c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	2001      	movs	r0, #1
 800d88c:	f7fe fe86 	bl	800c59c <memp_free>
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	0801b01c 	.word	0x0801b01c
 800d89c:	0801b088 	.word	0x0801b088
 800d8a0:	0801b060 	.word	0x0801b060

0800d8a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d8a8:	f001 f8f4 	bl	800ea94 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d8ac:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <tcp_tmr+0x28>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <tcp_tmr+0x28>)
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <tcp_tmr+0x28>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d8c4:	f000 fda6 	bl	800e414 <tcp_slowtmr>
  }
}
 800d8c8:	bf00      	nop
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20011b5d 	.word	0x20011b5d

0800d8d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d105      	bne.n	800d8ec <tcp_remove_listener+0x1c>
 800d8e0:	4b0d      	ldr	r3, [pc, #52]	; (800d918 <tcp_remove_listener+0x48>)
 800d8e2:	22ff      	movs	r2, #255	; 0xff
 800d8e4:	490d      	ldr	r1, [pc, #52]	; (800d91c <tcp_remove_listener+0x4c>)
 800d8e6:	480e      	ldr	r0, [pc, #56]	; (800d920 <tcp_remove_listener+0x50>)
 800d8e8:	f009 f86a 	bl	80169c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	60fb      	str	r3, [r7, #12]
 800d8f0:	e00a      	b.n	800d908 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d102      	bne.n	800d902 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1f1      	bne.n	800d8f2 <tcp_remove_listener+0x22>
    }
  }
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	0801b01c 	.word	0x0801b01c
 800d91c:	0801b0a4 	.word	0x0801b0a4
 800d920:	0801b060 	.word	0x0801b060

0800d924 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d106      	bne.n	800d940 <tcp_listen_closed+0x1c>
 800d932:	4b14      	ldr	r3, [pc, #80]	; (800d984 <tcp_listen_closed+0x60>)
 800d934:	f240 1211 	movw	r2, #273	; 0x111
 800d938:	4913      	ldr	r1, [pc, #76]	; (800d988 <tcp_listen_closed+0x64>)
 800d93a:	4814      	ldr	r0, [pc, #80]	; (800d98c <tcp_listen_closed+0x68>)
 800d93c:	f009 f840 	bl	80169c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7d1b      	ldrb	r3, [r3, #20]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d006      	beq.n	800d956 <tcp_listen_closed+0x32>
 800d948:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <tcp_listen_closed+0x60>)
 800d94a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d94e:	4910      	ldr	r1, [pc, #64]	; (800d990 <tcp_listen_closed+0x6c>)
 800d950:	480e      	ldr	r0, [pc, #56]	; (800d98c <tcp_listen_closed+0x68>)
 800d952:	f009 f835 	bl	80169c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d956:	2301      	movs	r3, #1
 800d958:	60fb      	str	r3, [r7, #12]
 800d95a:	e00b      	b.n	800d974 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d95c:	4a0d      	ldr	r2, [pc, #52]	; (800d994 <tcp_listen_closed+0x70>)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff ffb1 	bl	800d8d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3301      	adds	r3, #1
 800d972:	60fb      	str	r3, [r7, #12]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b03      	cmp	r3, #3
 800d978:	d9f0      	bls.n	800d95c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d97a:	bf00      	nop
 800d97c:	bf00      	nop
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0801b01c 	.word	0x0801b01c
 800d988:	0801b0cc 	.word	0x0801b0cc
 800d98c:	0801b060 	.word	0x0801b060
 800d990:	0801b0d8 	.word	0x0801b0d8
 800d994:	0801cd5c 	.word	0x0801cd5c

0800d998 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d998:	b5b0      	push	{r4, r5, r7, lr}
 800d99a:	b088      	sub	sp, #32
 800d99c:	af04      	add	r7, sp, #16
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d106      	bne.n	800d9b8 <tcp_close_shutdown+0x20>
 800d9aa:	4b63      	ldr	r3, [pc, #396]	; (800db38 <tcp_close_shutdown+0x1a0>)
 800d9ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d9b0:	4962      	ldr	r1, [pc, #392]	; (800db3c <tcp_close_shutdown+0x1a4>)
 800d9b2:	4863      	ldr	r0, [pc, #396]	; (800db40 <tcp_close_shutdown+0x1a8>)
 800d9b4:	f009 f804 	bl	80169c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d066      	beq.n	800da8c <tcp_close_shutdown+0xf4>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	7d1b      	ldrb	r3, [r3, #20]
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d003      	beq.n	800d9ce <tcp_close_shutdown+0x36>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ca:	2b07      	cmp	r3, #7
 800d9cc:	d15e      	bne.n	800da8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d104      	bne.n	800d9e0 <tcp_close_shutdown+0x48>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d9de:	d055      	beq.n	800da8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8b5b      	ldrh	r3, [r3, #26]
 800d9e4:	f003 0310 	and.w	r3, r3, #16
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <tcp_close_shutdown+0x62>
 800d9ec:	4b52      	ldr	r3, [pc, #328]	; (800db38 <tcp_close_shutdown+0x1a0>)
 800d9ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d9f2:	4954      	ldr	r1, [pc, #336]	; (800db44 <tcp_close_shutdown+0x1ac>)
 800d9f4:	4852      	ldr	r0, [pc, #328]	; (800db40 <tcp_close_shutdown+0x1a8>)
 800d9f6:	f008 ffe3 	bl	80169c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da02:	687d      	ldr	r5, [r7, #4]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3304      	adds	r3, #4
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	8ad2      	ldrh	r2, [r2, #22]
 800da0c:	6879      	ldr	r1, [r7, #4]
 800da0e:	8b09      	ldrh	r1, [r1, #24]
 800da10:	9102      	str	r1, [sp, #8]
 800da12:	9201      	str	r2, [sp, #4]
 800da14:	9300      	str	r3, [sp, #0]
 800da16:	462b      	mov	r3, r5
 800da18:	4622      	mov	r2, r4
 800da1a:	4601      	mov	r1, r0
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f005 fe2b 	bl	8013678 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f001 fbe6 	bl	800f1f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800da28:	4b47      	ldr	r3, [pc, #284]	; (800db48 <tcp_close_shutdown+0x1b0>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d105      	bne.n	800da3e <tcp_close_shutdown+0xa6>
 800da32:	4b45      	ldr	r3, [pc, #276]	; (800db48 <tcp_close_shutdown+0x1b0>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	4a43      	ldr	r2, [pc, #268]	; (800db48 <tcp_close_shutdown+0x1b0>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	e013      	b.n	800da66 <tcp_close_shutdown+0xce>
 800da3e:	4b42      	ldr	r3, [pc, #264]	; (800db48 <tcp_close_shutdown+0x1b0>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e00c      	b.n	800da60 <tcp_close_shutdown+0xc8>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d104      	bne.n	800da5a <tcp_close_shutdown+0xc2>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	68da      	ldr	r2, [r3, #12]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	60da      	str	r2, [r3, #12]
 800da58:	e005      	b.n	800da66 <tcp_close_shutdown+0xce>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1ef      	bne.n	800da46 <tcp_close_shutdown+0xae>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	60da      	str	r2, [r3, #12]
 800da6c:	4b37      	ldr	r3, [pc, #220]	; (800db4c <tcp_close_shutdown+0x1b4>)
 800da6e:	2201      	movs	r2, #1
 800da70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800da72:	4b37      	ldr	r3, [pc, #220]	; (800db50 <tcp_close_shutdown+0x1b8>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d102      	bne.n	800da82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800da7c:	f004 f87e 	bl	8011b7c <tcp_trigger_input_pcb_close>
 800da80:	e002      	b.n	800da88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff fed6 	bl	800d834 <tcp_free>
      }
      return ERR_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	e050      	b.n	800db2e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7d1b      	ldrb	r3, [r3, #20]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d03b      	beq.n	800db0c <tcp_close_shutdown+0x174>
 800da94:	2b02      	cmp	r3, #2
 800da96:	dc44      	bgt.n	800db22 <tcp_close_shutdown+0x18a>
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <tcp_close_shutdown+0x10a>
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d02a      	beq.n	800daf6 <tcp_close_shutdown+0x15e>
 800daa0:	e03f      	b.n	800db22 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8adb      	ldrh	r3, [r3, #22]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d021      	beq.n	800daee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800daaa:	4b2a      	ldr	r3, [pc, #168]	; (800db54 <tcp_close_shutdown+0x1bc>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d105      	bne.n	800dac0 <tcp_close_shutdown+0x128>
 800dab4:	4b27      	ldr	r3, [pc, #156]	; (800db54 <tcp_close_shutdown+0x1bc>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	4a26      	ldr	r2, [pc, #152]	; (800db54 <tcp_close_shutdown+0x1bc>)
 800dabc:	6013      	str	r3, [r2, #0]
 800dabe:	e013      	b.n	800dae8 <tcp_close_shutdown+0x150>
 800dac0:	4b24      	ldr	r3, [pc, #144]	; (800db54 <tcp_close_shutdown+0x1bc>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	e00c      	b.n	800dae2 <tcp_close_shutdown+0x14a>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d104      	bne.n	800dadc <tcp_close_shutdown+0x144>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	60da      	str	r2, [r3, #12]
 800dada:	e005      	b.n	800dae8 <tcp_close_shutdown+0x150>
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	60bb      	str	r3, [r7, #8]
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1ef      	bne.n	800dac8 <tcp_close_shutdown+0x130>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff fea0 	bl	800d834 <tcp_free>
      break;
 800daf4:	e01a      	b.n	800db2c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff ff14 	bl	800d924 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4816      	ldr	r0, [pc, #88]	; (800db58 <tcp_close_shutdown+0x1c0>)
 800db00:	f001 fbc8 	bl	800f294 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f7ff feb1 	bl	800d86c <tcp_free_listen>
      break;
 800db0a:	e00f      	b.n	800db2c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db0c:	6879      	ldr	r1, [r7, #4]
 800db0e:	480e      	ldr	r0, [pc, #56]	; (800db48 <tcp_close_shutdown+0x1b0>)
 800db10:	f001 fbc0 	bl	800f294 <tcp_pcb_remove>
 800db14:	4b0d      	ldr	r3, [pc, #52]	; (800db4c <tcp_close_shutdown+0x1b4>)
 800db16:	2201      	movs	r2, #1
 800db18:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fe8a 	bl	800d834 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800db20:	e004      	b.n	800db2c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f81a 	bl	800db5c <tcp_close_shutdown_fin>
 800db28:	4603      	mov	r3, r0
 800db2a:	e000      	b.n	800db2e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bdb0      	pop	{r4, r5, r7, pc}
 800db36:	bf00      	nop
 800db38:	0801b01c 	.word	0x0801b01c
 800db3c:	0801b0f0 	.word	0x0801b0f0
 800db40:	0801b060 	.word	0x0801b060
 800db44:	0801b110 	.word	0x0801b110
 800db48:	20011b54 	.word	0x20011b54
 800db4c:	20011b5c 	.word	0x20011b5c
 800db50:	20011b94 	.word	0x20011b94
 800db54:	20011b4c 	.word	0x20011b4c
 800db58:	20011b50 	.word	0x20011b50

0800db5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <tcp_close_shutdown_fin+0x1c>
 800db6a:	4b2e      	ldr	r3, [pc, #184]	; (800dc24 <tcp_close_shutdown_fin+0xc8>)
 800db6c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800db70:	492d      	ldr	r1, [pc, #180]	; (800dc28 <tcp_close_shutdown_fin+0xcc>)
 800db72:	482e      	ldr	r0, [pc, #184]	; (800dc2c <tcp_close_shutdown_fin+0xd0>)
 800db74:	f008 ff24 	bl	80169c0 <iprintf>

  switch (pcb->state) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	7d1b      	ldrb	r3, [r3, #20]
 800db7c:	2b07      	cmp	r3, #7
 800db7e:	d020      	beq.n	800dbc2 <tcp_close_shutdown_fin+0x66>
 800db80:	2b07      	cmp	r3, #7
 800db82:	dc2b      	bgt.n	800dbdc <tcp_close_shutdown_fin+0x80>
 800db84:	2b03      	cmp	r3, #3
 800db86:	d002      	beq.n	800db8e <tcp_close_shutdown_fin+0x32>
 800db88:	2b04      	cmp	r3, #4
 800db8a:	d00d      	beq.n	800dba8 <tcp_close_shutdown_fin+0x4c>
 800db8c:	e026      	b.n	800dbdc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f004 fe5e 	bl	8012850 <tcp_send_fin>
 800db94:	4603      	mov	r3, r0
 800db96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d11f      	bne.n	800dbe0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2205      	movs	r2, #5
 800dba4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dba6:	e01b      	b.n	800dbe0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f004 fe51 	bl	8012850 <tcp_send_fin>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d114      	bne.n	800dbe4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dbc0:	e010      	b.n	800dbe4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f004 fe44 	bl	8012850 <tcp_send_fin>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dbcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d109      	bne.n	800dbe8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2209      	movs	r2, #9
 800dbd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dbda:	e005      	b.n	800dbe8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	e01c      	b.n	800dc1a <tcp_close_shutdown_fin+0xbe>
      break;
 800dbe0:	bf00      	nop
 800dbe2:	e002      	b.n	800dbea <tcp_close_shutdown_fin+0x8e>
      break;
 800dbe4:	bf00      	nop
 800dbe6:	e000      	b.n	800dbea <tcp_close_shutdown_fin+0x8e>
      break;
 800dbe8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d103      	bne.n	800dbfa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f004 ff6a 	bl	8012acc <tcp_output>
 800dbf8:	e00d      	b.n	800dc16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dbfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc02:	d108      	bne.n	800dc16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	8b5b      	ldrh	r3, [r3, #26]
 800dc08:	f043 0308 	orr.w	r3, r3, #8
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	e001      	b.n	800dc1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dc16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	0801b01c 	.word	0x0801b01c
 800dc28:	0801b0cc 	.word	0x0801b0cc
 800dc2c:	0801b060 	.word	0x0801b060

0800dc30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d109      	bne.n	800dc52 <tcp_close+0x22>
 800dc3e:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <tcp_close+0x4c>)
 800dc40:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dc44:	490e      	ldr	r1, [pc, #56]	; (800dc80 <tcp_close+0x50>)
 800dc46:	480f      	ldr	r0, [pc, #60]	; (800dc84 <tcp_close+0x54>)
 800dc48:	f008 feba 	bl	80169c0 <iprintf>
 800dc4c:	f06f 030f 	mvn.w	r3, #15
 800dc50:	e00f      	b.n	800dc72 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	7d1b      	ldrb	r3, [r3, #20]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d006      	beq.n	800dc68 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	8b5b      	ldrh	r3, [r3, #26]
 800dc5e:	f043 0310 	orr.w	r3, r3, #16
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dc68:	2101      	movs	r1, #1
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff fe94 	bl	800d998 <tcp_close_shutdown>
 800dc70:	4603      	mov	r3, r0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	0801b01c 	.word	0x0801b01c
 800dc80:	0801b12c 	.word	0x0801b12c
 800dc84:	0801b060 	.word	0x0801b060

0800dc88 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d109      	bne.n	800dcae <tcp_shutdown+0x26>
 800dc9a:	4b26      	ldr	r3, [pc, #152]	; (800dd34 <tcp_shutdown+0xac>)
 800dc9c:	f240 2207 	movw	r2, #519	; 0x207
 800dca0:	4925      	ldr	r1, [pc, #148]	; (800dd38 <tcp_shutdown+0xb0>)
 800dca2:	4826      	ldr	r0, [pc, #152]	; (800dd3c <tcp_shutdown+0xb4>)
 800dca4:	f008 fe8c 	bl	80169c0 <iprintf>
 800dca8:	f06f 030f 	mvn.w	r3, #15
 800dcac:	e03d      	b.n	800dd2a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	7d1b      	ldrb	r3, [r3, #20]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d102      	bne.n	800dcbc <tcp_shutdown+0x34>
    return ERR_CONN;
 800dcb6:	f06f 030a 	mvn.w	r3, #10
 800dcba:	e036      	b.n	800dd2a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d01b      	beq.n	800dcfa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8b5b      	ldrh	r3, [r3, #26]
 800dcc6:	f043 0310 	orr.w	r3, r3, #16
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d005      	beq.n	800dce2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff fe5d 	bl	800d998 <tcp_close_shutdown>
 800dcde:	4603      	mov	r3, r0
 800dce0:	e023      	b.n	800dd2a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d007      	beq.n	800dcfa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7ff faf4 	bl	800d2dc <pbuf_free>
      pcb->refused_data = NULL;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d013      	beq.n	800dd28 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b04      	cmp	r3, #4
 800dd06:	dc02      	bgt.n	800dd0e <tcp_shutdown+0x86>
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	da02      	bge.n	800dd12 <tcp_shutdown+0x8a>
 800dd0c:	e009      	b.n	800dd22 <tcp_shutdown+0x9a>
 800dd0e:	2b07      	cmp	r3, #7
 800dd10:	d107      	bne.n	800dd22 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	4619      	mov	r1, r3
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f7ff fe3d 	bl	800d998 <tcp_close_shutdown>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	e003      	b.n	800dd2a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dd22:	f06f 030a 	mvn.w	r3, #10
 800dd26:	e000      	b.n	800dd2a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	0801b01c 	.word	0x0801b01c
 800dd38:	0801b144 	.word	0x0801b144
 800dd3c:	0801b060 	.word	0x0801b060

0800dd40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08e      	sub	sp, #56	; 0x38
 800dd44:	af04      	add	r7, sp, #16
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d107      	bne.n	800dd60 <tcp_abandon+0x20>
 800dd50:	4b52      	ldr	r3, [pc, #328]	; (800de9c <tcp_abandon+0x15c>)
 800dd52:	f240 223d 	movw	r2, #573	; 0x23d
 800dd56:	4952      	ldr	r1, [pc, #328]	; (800dea0 <tcp_abandon+0x160>)
 800dd58:	4852      	ldr	r0, [pc, #328]	; (800dea4 <tcp_abandon+0x164>)
 800dd5a:	f008 fe31 	bl	80169c0 <iprintf>
 800dd5e:	e099      	b.n	800de94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	7d1b      	ldrb	r3, [r3, #20]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d106      	bne.n	800dd76 <tcp_abandon+0x36>
 800dd68:	4b4c      	ldr	r3, [pc, #304]	; (800de9c <tcp_abandon+0x15c>)
 800dd6a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd6e:	494e      	ldr	r1, [pc, #312]	; (800dea8 <tcp_abandon+0x168>)
 800dd70:	484c      	ldr	r0, [pc, #304]	; (800dea4 <tcp_abandon+0x164>)
 800dd72:	f008 fe25 	bl	80169c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	7d1b      	ldrb	r3, [r3, #20]
 800dd7a:	2b0a      	cmp	r3, #10
 800dd7c:	d107      	bne.n	800dd8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd7e:	6879      	ldr	r1, [r7, #4]
 800dd80:	484a      	ldr	r0, [pc, #296]	; (800deac <tcp_abandon+0x16c>)
 800dd82:	f001 fa87 	bl	800f294 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff fd54 	bl	800d834 <tcp_free>
 800dd8c:	e082      	b.n	800de94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dda8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	7d1b      	ldrb	r3, [r3, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d126      	bne.n	800de06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	8adb      	ldrh	r3, [r3, #22]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d02e      	beq.n	800de1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ddc0:	4b3b      	ldr	r3, [pc, #236]	; (800deb0 <tcp_abandon+0x170>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d105      	bne.n	800ddd6 <tcp_abandon+0x96>
 800ddca:	4b39      	ldr	r3, [pc, #228]	; (800deb0 <tcp_abandon+0x170>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	4a37      	ldr	r2, [pc, #220]	; (800deb0 <tcp_abandon+0x170>)
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	e013      	b.n	800ddfe <tcp_abandon+0xbe>
 800ddd6:	4b36      	ldr	r3, [pc, #216]	; (800deb0 <tcp_abandon+0x170>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	61fb      	str	r3, [r7, #28]
 800dddc:	e00c      	b.n	800ddf8 <tcp_abandon+0xb8>
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d104      	bne.n	800ddf2 <tcp_abandon+0xb2>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68da      	ldr	r2, [r3, #12]
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	60da      	str	r2, [r3, #12]
 800ddf0:	e005      	b.n	800ddfe <tcp_abandon+0xbe>
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	61fb      	str	r3, [r7, #28]
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1ef      	bne.n	800ddde <tcp_abandon+0x9e>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	60da      	str	r2, [r3, #12]
 800de04:	e00b      	b.n	800de1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	8adb      	ldrh	r3, [r3, #22]
 800de0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	4828      	ldr	r0, [pc, #160]	; (800deb4 <tcp_abandon+0x174>)
 800de14:	f001 fa3e 	bl	800f294 <tcp_pcb_remove>
 800de18:	4b27      	ldr	r3, [pc, #156]	; (800deb8 <tcp_abandon+0x178>)
 800de1a:	2201      	movs	r2, #1
 800de1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de22:	2b00      	cmp	r3, #0
 800de24:	d004      	beq.n	800de30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 ff12 	bl	800ec54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de34:	2b00      	cmp	r3, #0
 800de36:	d004      	beq.n	800de42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3c:	4618      	mov	r0, r3
 800de3e:	f000 ff09 	bl	800ec54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de46:	2b00      	cmp	r3, #0
 800de48:	d004      	beq.n	800de54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de4e:	4618      	mov	r0, r3
 800de50:	f000 ff00 	bl	800ec54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00e      	beq.n	800de78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	3304      	adds	r3, #4
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	8b12      	ldrh	r2, [r2, #24]
 800de64:	9202      	str	r2, [sp, #8]
 800de66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de68:	9201      	str	r2, [sp, #4]
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	460b      	mov	r3, r1
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	69b9      	ldr	r1, [r7, #24]
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f005 fc00 	bl	8013678 <tcp_rst>
    }
    last_state = pcb->state;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7d1b      	ldrb	r3, [r3, #20]
 800de7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff fcd8 	bl	800d834 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d004      	beq.n	800de94 <tcp_abandon+0x154>
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	f06f 010c 	mvn.w	r1, #12
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	4798      	blx	r3
  }
}
 800de94:	3728      	adds	r7, #40	; 0x28
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	0801b01c 	.word	0x0801b01c
 800dea0:	0801b160 	.word	0x0801b160
 800dea4:	0801b060 	.word	0x0801b060
 800dea8:	0801b17c 	.word	0x0801b17c
 800deac:	20011b58 	.word	0x20011b58
 800deb0:	20011b4c 	.word	0x20011b4c
 800deb4:	20011b54 	.word	0x20011b54
 800deb8:	20011b5c 	.word	0x20011b5c

0800debc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dec4:	2101      	movs	r1, #1
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff ff3a 	bl	800dd40 <tcp_abandon>
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	4613      	mov	r3, r2
 800dee0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dee2:	2304      	movs	r3, #4
 800dee4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800deec:	4b3e      	ldr	r3, [pc, #248]	; (800dfe8 <tcp_bind+0x114>)
 800deee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d109      	bne.n	800df0a <tcp_bind+0x36>
 800def6:	4b3d      	ldr	r3, [pc, #244]	; (800dfec <tcp_bind+0x118>)
 800def8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800defc:	493c      	ldr	r1, [pc, #240]	; (800dff0 <tcp_bind+0x11c>)
 800defe:	483d      	ldr	r0, [pc, #244]	; (800dff4 <tcp_bind+0x120>)
 800df00:	f008 fd5e 	bl	80169c0 <iprintf>
 800df04:	f06f 030f 	mvn.w	r3, #15
 800df08:	e06a      	b.n	800dfe0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	7d1b      	ldrb	r3, [r3, #20]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d009      	beq.n	800df26 <tcp_bind+0x52>
 800df12:	4b36      	ldr	r3, [pc, #216]	; (800dfec <tcp_bind+0x118>)
 800df14:	f240 22ab 	movw	r2, #683	; 0x2ab
 800df18:	4937      	ldr	r1, [pc, #220]	; (800dff8 <tcp_bind+0x124>)
 800df1a:	4836      	ldr	r0, [pc, #216]	; (800dff4 <tcp_bind+0x120>)
 800df1c:	f008 fd50 	bl	80169c0 <iprintf>
 800df20:	f06f 0305 	mvn.w	r3, #5
 800df24:	e05c      	b.n	800dfe0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800df26:	88fb      	ldrh	r3, [r7, #6]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d109      	bne.n	800df40 <tcp_bind+0x6c>
    port = tcp_new_port();
 800df2c:	f000 f914 	bl	800e158 <tcp_new_port>
 800df30:	4603      	mov	r3, r0
 800df32:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800df34:	88fb      	ldrh	r3, [r7, #6]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d135      	bne.n	800dfa6 <tcp_bind+0xd2>
      return ERR_BUF;
 800df3a:	f06f 0301 	mvn.w	r3, #1
 800df3e:	e04f      	b.n	800dfe0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800df40:	2300      	movs	r3, #0
 800df42:	61fb      	str	r3, [r7, #28]
 800df44:	e02b      	b.n	800df9e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df46:	4a2d      	ldr	r2, [pc, #180]	; (800dffc <tcp_bind+0x128>)
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	61bb      	str	r3, [r7, #24]
 800df52:	e01e      	b.n	800df92 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	8adb      	ldrh	r3, [r3, #22]
 800df58:	88fa      	ldrh	r2, [r7, #6]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d116      	bne.n	800df8c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800df5e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df60:	2b00      	cmp	r3, #0
 800df62:	d010      	beq.n	800df86 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00c      	beq.n	800df86 <tcp_bind+0xb2>
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d009      	beq.n	800df86 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d005      	beq.n	800df86 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df82:	429a      	cmp	r2, r3
 800df84:	d102      	bne.n	800df8c <tcp_bind+0xb8>
              return ERR_USE;
 800df86:	f06f 0307 	mvn.w	r3, #7
 800df8a:	e029      	b.n	800dfe0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	61bb      	str	r3, [r7, #24]
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1dd      	bne.n	800df54 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	3301      	adds	r3, #1
 800df9c:	61fb      	str	r3, [r7, #28]
 800df9e:	69fa      	ldr	r2, [r7, #28]
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	dbcf      	blt.n	800df46 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00c      	beq.n	800dfc6 <tcp_bind+0xf2>
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d008      	beq.n	800dfc6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d002      	beq.n	800dfc0 <tcp_bind+0xec>
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	e000      	b.n	800dfc2 <tcp_bind+0xee>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	88fa      	ldrh	r2, [r7, #6]
 800dfca:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dfcc:	4b0c      	ldr	r3, [pc, #48]	; (800e000 <tcp_bind+0x12c>)
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	60da      	str	r2, [r3, #12]
 800dfd4:	4a0a      	ldr	r2, [pc, #40]	; (800e000 <tcp_bind+0x12c>)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	f005 fd0f 	bl	80139fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3720      	adds	r7, #32
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	0801cd84 	.word	0x0801cd84
 800dfec:	0801b01c 	.word	0x0801b01c
 800dff0:	0801b1b0 	.word	0x0801b1b0
 800dff4:	0801b060 	.word	0x0801b060
 800dff8:	0801b1c8 	.word	0x0801b1c8
 800dffc:	0801cd5c 	.word	0x0801cd5c
 800e000:	20011b4c 	.word	0x20011b4c

0800e004 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <tcp_update_rcv_ann_wnd+0x1c>
 800e012:	4b25      	ldr	r3, [pc, #148]	; (800e0a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e014:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e018:	4924      	ldr	r1, [pc, #144]	; (800e0ac <tcp_update_rcv_ann_wnd+0xa8>)
 800e01a:	4825      	ldr	r0, [pc, #148]	; (800e0b0 <tcp_update_rcv_ann_wnd+0xac>)
 800e01c:	f008 fcd0 	bl	80169c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e028:	4413      	add	r3, r2
 800e02a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e034:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e038:	bf28      	it	cs
 800e03a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e03e:	b292      	uxth	r2, r2
 800e040:	4413      	add	r3, r2
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	db08      	blt.n	800e05c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	e020      	b.n	800e09e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	dd03      	ble.n	800e072 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e070:	e014      	b.n	800e09c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e084:	d306      	bcc.n	800e094 <tcp_update_rcv_ann_wnd+0x90>
 800e086:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e088:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e08c:	4909      	ldr	r1, [pc, #36]	; (800e0b4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e08e:	4808      	ldr	r0, [pc, #32]	; (800e0b0 <tcp_update_rcv_ann_wnd+0xac>)
 800e090:	f008 fc96 	bl	80169c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	b29a      	uxth	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e09c:	2300      	movs	r3, #0
  }
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	0801b01c 	.word	0x0801b01c
 800e0ac:	0801b278 	.word	0x0801b278
 800e0b0:	0801b060 	.word	0x0801b060
 800e0b4:	0801b29c 	.word	0x0801b29c

0800e0b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d107      	bne.n	800e0da <tcp_recved+0x22>
 800e0ca:	4b1f      	ldr	r3, [pc, #124]	; (800e148 <tcp_recved+0x90>)
 800e0cc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e0d0:	491e      	ldr	r1, [pc, #120]	; (800e14c <tcp_recved+0x94>)
 800e0d2:	481f      	ldr	r0, [pc, #124]	; (800e150 <tcp_recved+0x98>)
 800e0d4:	f008 fc74 	bl	80169c0 <iprintf>
 800e0d8:	e032      	b.n	800e140 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	7d1b      	ldrb	r3, [r3, #20]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d106      	bne.n	800e0f0 <tcp_recved+0x38>
 800e0e2:	4b19      	ldr	r3, [pc, #100]	; (800e148 <tcp_recved+0x90>)
 800e0e4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e0e8:	491a      	ldr	r1, [pc, #104]	; (800e154 <tcp_recved+0x9c>)
 800e0ea:	4819      	ldr	r0, [pc, #100]	; (800e150 <tcp_recved+0x98>)
 800e0ec:	f008 fc68 	bl	80169c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0f4:	887b      	ldrh	r3, [r7, #2]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e0fa:	89fb      	ldrh	r3, [r7, #14]
 800e0fc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e100:	d804      	bhi.n	800e10c <tcp_recved+0x54>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e106:	89fa      	ldrh	r2, [r7, #14]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d204      	bcs.n	800e116 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e112:	851a      	strh	r2, [r3, #40]	; 0x28
 800e114:	e002      	b.n	800e11c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	89fa      	ldrh	r2, [r7, #14]
 800e11a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff ff71 	bl	800e004 <tcp_update_rcv_ann_wnd>
 800e122:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e12a:	d309      	bcc.n	800e140 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8b5b      	ldrh	r3, [r3, #26]
 800e130:	f043 0302 	orr.w	r3, r3, #2
 800e134:	b29a      	uxth	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f004 fcc6 	bl	8012acc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	0801b01c 	.word	0x0801b01c
 800e14c:	0801b2b8 	.word	0x0801b2b8
 800e150:	0801b060 	.word	0x0801b060
 800e154:	0801b2d0 	.word	0x0801b2d0

0800e158 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e15e:	2300      	movs	r3, #0
 800e160:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e162:	4b1e      	ldr	r3, [pc, #120]	; (800e1dc <tcp_new_port+0x84>)
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	3301      	adds	r3, #1
 800e168:	b29a      	uxth	r2, r3
 800e16a:	4b1c      	ldr	r3, [pc, #112]	; (800e1dc <tcp_new_port+0x84>)
 800e16c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e16e:	4b1b      	ldr	r3, [pc, #108]	; (800e1dc <tcp_new_port+0x84>)
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e176:	4293      	cmp	r3, r2
 800e178:	d103      	bne.n	800e182 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e17a:	4b18      	ldr	r3, [pc, #96]	; (800e1dc <tcp_new_port+0x84>)
 800e17c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e180:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e182:	2300      	movs	r3, #0
 800e184:	71fb      	strb	r3, [r7, #7]
 800e186:	e01e      	b.n	800e1c6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	4a15      	ldr	r2, [pc, #84]	; (800e1e0 <tcp_new_port+0x88>)
 800e18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	603b      	str	r3, [r7, #0]
 800e194:	e011      	b.n	800e1ba <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	8ada      	ldrh	r2, [r3, #22]
 800e19a:	4b10      	ldr	r3, [pc, #64]	; (800e1dc <tcp_new_port+0x84>)
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d108      	bne.n	800e1b4 <tcp_new_port+0x5c>
        n++;
 800e1a2:	88bb      	ldrh	r3, [r7, #4]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e1a8:	88bb      	ldrh	r3, [r7, #4]
 800e1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1ae:	d3d8      	bcc.n	800e162 <tcp_new_port+0xa>
          return 0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e00d      	b.n	800e1d0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	603b      	str	r3, [r7, #0]
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1ea      	bne.n	800e196 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	71fb      	strb	r3, [r7, #7]
 800e1c6:	79fb      	ldrb	r3, [r7, #7]
 800e1c8:	2b03      	cmp	r3, #3
 800e1ca:	d9dd      	bls.n	800e188 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e1cc:	4b03      	ldr	r3, [pc, #12]	; (800e1dc <tcp_new_port+0x84>)
 800e1ce:	881b      	ldrh	r3, [r3, #0]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	20000024 	.word	0x20000024
 800e1e0:	0801cd5c 	.word	0x0801cd5c

0800e1e4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08a      	sub	sp, #40	; 0x28
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d109      	bne.n	800e212 <tcp_connect+0x2e>
 800e1fe:	4b7d      	ldr	r3, [pc, #500]	; (800e3f4 <tcp_connect+0x210>)
 800e200:	f240 4235 	movw	r2, #1077	; 0x435
 800e204:	497c      	ldr	r1, [pc, #496]	; (800e3f8 <tcp_connect+0x214>)
 800e206:	487d      	ldr	r0, [pc, #500]	; (800e3fc <tcp_connect+0x218>)
 800e208:	f008 fbda 	bl	80169c0 <iprintf>
 800e20c:	f06f 030f 	mvn.w	r3, #15
 800e210:	e0ec      	b.n	800e3ec <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d109      	bne.n	800e22c <tcp_connect+0x48>
 800e218:	4b76      	ldr	r3, [pc, #472]	; (800e3f4 <tcp_connect+0x210>)
 800e21a:	f240 4236 	movw	r2, #1078	; 0x436
 800e21e:	4978      	ldr	r1, [pc, #480]	; (800e400 <tcp_connect+0x21c>)
 800e220:	4876      	ldr	r0, [pc, #472]	; (800e3fc <tcp_connect+0x218>)
 800e222:	f008 fbcd 	bl	80169c0 <iprintf>
 800e226:	f06f 030f 	mvn.w	r3, #15
 800e22a:	e0df      	b.n	800e3ec <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	7d1b      	ldrb	r3, [r3, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d009      	beq.n	800e248 <tcp_connect+0x64>
 800e234:	4b6f      	ldr	r3, [pc, #444]	; (800e3f4 <tcp_connect+0x210>)
 800e236:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e23a:	4972      	ldr	r1, [pc, #456]	; (800e404 <tcp_connect+0x220>)
 800e23c:	486f      	ldr	r0, [pc, #444]	; (800e3fc <tcp_connect+0x218>)
 800e23e:	f008 fbbf 	bl	80169c0 <iprintf>
 800e242:	f06f 0309 	mvn.w	r3, #9
 800e246:	e0d1      	b.n	800e3ec <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <tcp_connect+0x70>
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	e000      	b.n	800e256 <tcp_connect+0x72>
 800e254:	2300      	movs	r3, #0
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	88fa      	ldrh	r2, [r7, #6]
 800e25e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	7a1b      	ldrb	r3, [r3, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d006      	beq.n	800e276 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	7a1b      	ldrb	r3, [r3, #8]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fe fca7 	bl	800cbc0 <netif_get_by_index>
 800e272:	6278      	str	r0, [r7, #36]	; 0x24
 800e274:	e005      	b.n	800e282 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3304      	adds	r3, #4
 800e27a:	4618      	mov	r0, r3
 800e27c:	f006 fe12 	bl	8014ea4 <ip4_route>
 800e280:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e288:	f06f 0303 	mvn.w	r3, #3
 800e28c:	e0ae      	b.n	800e3ec <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <tcp_connect+0xb8>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d111      	bne.n	800e2c0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d002      	beq.n	800e2a8 <tcp_connect+0xc4>
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	e000      	b.n	800e2aa <tcp_connect+0xc6>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d102      	bne.n	800e2b8 <tcp_connect+0xd4>
      return ERR_RTE;
 800e2b2:	f06f 0303 	mvn.w	r3, #3
 800e2b6:	e099      	b.n	800e3ec <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	8adb      	ldrh	r3, [r3, #22]
 800e2c4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	8adb      	ldrh	r3, [r3, #22]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10c      	bne.n	800e2e8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e2ce:	f7ff ff43 	bl	800e158 <tcp_new_port>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	8adb      	ldrh	r3, [r3, #22]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d102      	bne.n	800e2e8 <tcp_connect+0x104>
      return ERR_BUF;
 800e2e2:	f06f 0301 	mvn.w	r3, #1
 800e2e6:	e081      	b.n	800e3ec <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f001 f867 	bl	800f3bc <tcp_next_iss>
 800e2ee:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	1e5a      	subs	r2, r3, #1
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	1e5a      	subs	r2, r3, #1
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	1e5a      	subs	r2, r3, #1
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e31a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e33c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3304      	adds	r3, #4
 800e346:	461a      	mov	r2, r3
 800e348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e34a:	f001 f85d 	bl	800f408 <tcp_eff_send_mss_netif>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2201      	movs	r2, #1
 800e35a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e366:	2102      	movs	r1, #2
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f004 fac1 	bl	80128f0 <tcp_enqueue_flags>
 800e36e:	4603      	mov	r3, r0
 800e370:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e372:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d136      	bne.n	800e3e8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2202      	movs	r2, #2
 800e37e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e380:	8b7b      	ldrh	r3, [r7, #26]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d021      	beq.n	800e3ca <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e386:	4b20      	ldr	r3, [pc, #128]	; (800e408 <tcp_connect+0x224>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d105      	bne.n	800e39c <tcp_connect+0x1b8>
 800e390:	4b1d      	ldr	r3, [pc, #116]	; (800e408 <tcp_connect+0x224>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	4a1c      	ldr	r2, [pc, #112]	; (800e408 <tcp_connect+0x224>)
 800e398:	6013      	str	r3, [r2, #0]
 800e39a:	e013      	b.n	800e3c4 <tcp_connect+0x1e0>
 800e39c:	4b1a      	ldr	r3, [pc, #104]	; (800e408 <tcp_connect+0x224>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	623b      	str	r3, [r7, #32]
 800e3a2:	e00c      	b.n	800e3be <tcp_connect+0x1da>
 800e3a4:	6a3b      	ldr	r3, [r7, #32]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d104      	bne.n	800e3b8 <tcp_connect+0x1d4>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68da      	ldr	r2, [r3, #12]
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	60da      	str	r2, [r3, #12]
 800e3b6:	e005      	b.n	800e3c4 <tcp_connect+0x1e0>
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	623b      	str	r3, [r7, #32]
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1ef      	bne.n	800e3a4 <tcp_connect+0x1c0>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e3ca:	4b10      	ldr	r3, [pc, #64]	; (800e40c <tcp_connect+0x228>)
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	60da      	str	r2, [r3, #12]
 800e3d2:	4a0e      	ldr	r2, [pc, #56]	; (800e40c <tcp_connect+0x228>)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	f005 fb10 	bl	80139fc <tcp_timer_needed>
 800e3dc:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <tcp_connect+0x22c>)
 800e3de:	2201      	movs	r2, #1
 800e3e0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f004 fb72 	bl	8012acc <tcp_output>
  }
  return ret;
 800e3e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3728      	adds	r7, #40	; 0x28
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	0801b01c 	.word	0x0801b01c
 800e3f8:	0801b2f8 	.word	0x0801b2f8
 800e3fc:	0801b060 	.word	0x0801b060
 800e400:	0801b314 	.word	0x0801b314
 800e404:	0801b330 	.word	0x0801b330
 800e408:	20011b4c 	.word	0x20011b4c
 800e40c:	20011b54 	.word	0x20011b54
 800e410:	20011b5c 	.word	0x20011b5c

0800e414 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e414:	b5b0      	push	{r4, r5, r7, lr}
 800e416:	b090      	sub	sp, #64	; 0x40
 800e418:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e41a:	2300      	movs	r3, #0
 800e41c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e420:	4b94      	ldr	r3, [pc, #592]	; (800e674 <tcp_slowtmr+0x260>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3301      	adds	r3, #1
 800e426:	4a93      	ldr	r2, [pc, #588]	; (800e674 <tcp_slowtmr+0x260>)
 800e428:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e42a:	4b93      	ldr	r3, [pc, #588]	; (800e678 <tcp_slowtmr+0x264>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	b2da      	uxtb	r2, r3
 800e432:	4b91      	ldr	r3, [pc, #580]	; (800e678 <tcp_slowtmr+0x264>)
 800e434:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e43a:	4b90      	ldr	r3, [pc, #576]	; (800e67c <tcp_slowtmr+0x268>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e440:	e29d      	b.n	800e97e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	7d1b      	ldrb	r3, [r3, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <tcp_slowtmr+0x44>
 800e44a:	4b8d      	ldr	r3, [pc, #564]	; (800e680 <tcp_slowtmr+0x26c>)
 800e44c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e450:	498c      	ldr	r1, [pc, #560]	; (800e684 <tcp_slowtmr+0x270>)
 800e452:	488d      	ldr	r0, [pc, #564]	; (800e688 <tcp_slowtmr+0x274>)
 800e454:	f008 fab4 	bl	80169c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d106      	bne.n	800e46e <tcp_slowtmr+0x5a>
 800e460:	4b87      	ldr	r3, [pc, #540]	; (800e680 <tcp_slowtmr+0x26c>)
 800e462:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e466:	4989      	ldr	r1, [pc, #548]	; (800e68c <tcp_slowtmr+0x278>)
 800e468:	4887      	ldr	r0, [pc, #540]	; (800e688 <tcp_slowtmr+0x274>)
 800e46a:	f008 faa9 	bl	80169c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	7d1b      	ldrb	r3, [r3, #20]
 800e472:	2b0a      	cmp	r3, #10
 800e474:	d106      	bne.n	800e484 <tcp_slowtmr+0x70>
 800e476:	4b82      	ldr	r3, [pc, #520]	; (800e680 <tcp_slowtmr+0x26c>)
 800e478:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e47c:	4984      	ldr	r1, [pc, #528]	; (800e690 <tcp_slowtmr+0x27c>)
 800e47e:	4882      	ldr	r0, [pc, #520]	; (800e688 <tcp_slowtmr+0x274>)
 800e480:	f008 fa9e 	bl	80169c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	7f9a      	ldrb	r2, [r3, #30]
 800e488:	4b7b      	ldr	r3, [pc, #492]	; (800e678 <tcp_slowtmr+0x264>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d105      	bne.n	800e49c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e492:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e49a:	e270      	b.n	800e97e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e49c:	4b76      	ldr	r3, [pc, #472]	; (800e678 <tcp_slowtmr+0x264>)
 800e49e:	781a      	ldrb	r2, [r3, #0]
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d10a      	bne.n	800e4ce <tcp_slowtmr+0xba>
 800e4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4be:	2b05      	cmp	r3, #5
 800e4c0:	d905      	bls.n	800e4ce <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4cc:	e11e      	b.n	800e70c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4d4:	2b0b      	cmp	r3, #11
 800e4d6:	d905      	bls.n	800e4e4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4dc:	3301      	adds	r3, #1
 800e4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4e2:	e113      	b.n	800e70c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d075      	beq.n	800e5da <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d006      	beq.n	800e504 <tcp_slowtmr+0xf0>
 800e4f6:	4b62      	ldr	r3, [pc, #392]	; (800e680 <tcp_slowtmr+0x26c>)
 800e4f8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e4fc:	4965      	ldr	r1, [pc, #404]	; (800e694 <tcp_slowtmr+0x280>)
 800e4fe:	4862      	ldr	r0, [pc, #392]	; (800e688 <tcp_slowtmr+0x274>)
 800e500:	f008 fa5e 	bl	80169c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d106      	bne.n	800e51a <tcp_slowtmr+0x106>
 800e50c:	4b5c      	ldr	r3, [pc, #368]	; (800e680 <tcp_slowtmr+0x26c>)
 800e50e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e512:	4961      	ldr	r1, [pc, #388]	; (800e698 <tcp_slowtmr+0x284>)
 800e514:	485c      	ldr	r0, [pc, #368]	; (800e688 <tcp_slowtmr+0x274>)
 800e516:	f008 fa53 	bl	80169c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e520:	2b0b      	cmp	r3, #11
 800e522:	d905      	bls.n	800e530 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e528:	3301      	adds	r3, #1
 800e52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e52e:	e0ed      	b.n	800e70c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e536:	3b01      	subs	r3, #1
 800e538:	4a58      	ldr	r2, [pc, #352]	; (800e69c <tcp_slowtmr+0x288>)
 800e53a:	5cd3      	ldrb	r3, [r2, r3]
 800e53c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e544:	7c7a      	ldrb	r2, [r7, #17]
 800e546:	429a      	cmp	r2, r3
 800e548:	d907      	bls.n	800e55a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e550:	3301      	adds	r3, #1
 800e552:	b2da      	uxtb	r2, r3
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e560:	7c7a      	ldrb	r2, [r7, #17]
 800e562:	429a      	cmp	r2, r3
 800e564:	f200 80d2 	bhi.w	800e70c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e568:	2301      	movs	r3, #1
 800e56a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e572:	2b00      	cmp	r3, #0
 800e574:	d108      	bne.n	800e588 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e578:	f005 f972 	bl	8013860 <tcp_zero_window_probe>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d014      	beq.n	800e5ac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e582:	2300      	movs	r3, #0
 800e584:	623b      	str	r3, [r7, #32]
 800e586:	e011      	b.n	800e5ac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e58e:	4619      	mov	r1, r3
 800e590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e592:	f004 f815 	bl	80125c0 <tcp_split_unsent_seg>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d107      	bne.n	800e5ac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e59c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e59e:	f004 fa95 	bl	8012acc <tcp_output>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d101      	bne.n	800e5ac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e5ac:	6a3b      	ldr	r3, [r7, #32]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f000 80ac 	beq.w	800e70c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5c2:	2b06      	cmp	r3, #6
 800e5c4:	f200 80a2 	bhi.w	800e70c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e5d8:	e098      	b.n	800e70c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	db0f      	blt.n	800e604 <tcp_slowtmr+0x1f0>
 800e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d008      	beq.n	800e604 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	b21a      	sxth	r2, r3
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e610:	429a      	cmp	r2, r3
 800e612:	db7b      	blt.n	800e70c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e616:	f004 fd5d 	bl	80130d4 <tcp_rexmit_rto_prepare>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d007      	beq.n	800e630 <tcp_slowtmr+0x21c>
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e624:	2b00      	cmp	r3, #0
 800e626:	d171      	bne.n	800e70c <tcp_slowtmr+0x2f8>
 800e628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d06d      	beq.n	800e70c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e632:	7d1b      	ldrb	r3, [r3, #20]
 800e634:	2b02      	cmp	r3, #2
 800e636:	d03a      	beq.n	800e6ae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e63e:	2b0c      	cmp	r3, #12
 800e640:	bf28      	it	cs
 800e642:	230c      	movcs	r3, #12
 800e644:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e64c:	10db      	asrs	r3, r3, #3
 800e64e:	b21b      	sxth	r3, r3
 800e650:	461a      	mov	r2, r3
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e658:	4413      	add	r3, r2
 800e65a:	7efa      	ldrb	r2, [r7, #27]
 800e65c:	4910      	ldr	r1, [pc, #64]	; (800e6a0 <tcp_slowtmr+0x28c>)
 800e65e:	5c8a      	ldrb	r2, [r1, r2]
 800e660:	4093      	lsls	r3, r2
 800e662:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e66a:	4293      	cmp	r3, r2
 800e66c:	dc1a      	bgt.n	800e6a4 <tcp_slowtmr+0x290>
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	b21a      	sxth	r2, r3
 800e672:	e019      	b.n	800e6a8 <tcp_slowtmr+0x294>
 800e674:	20011b48 	.word	0x20011b48
 800e678:	20011b5e 	.word	0x20011b5e
 800e67c:	20011b54 	.word	0x20011b54
 800e680:	0801b01c 	.word	0x0801b01c
 800e684:	0801b360 	.word	0x0801b360
 800e688:	0801b060 	.word	0x0801b060
 800e68c:	0801b38c 	.word	0x0801b38c
 800e690:	0801b3b8 	.word	0x0801b3b8
 800e694:	0801b3e8 	.word	0x0801b3e8
 800e698:	0801b41c 	.word	0x0801b41c
 800e69c:	0801cd54 	.word	0x0801cd54
 800e6a0:	0801cd44 	.word	0x0801cd44
 800e6a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	bf28      	it	cs
 800e6c4:	4613      	movcs	r3, r2
 800e6c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e6c8:	8a7b      	ldrh	r3, [r7, #18]
 800e6ca:	085b      	lsrs	r3, r3, #1
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d206      	bcs.n	800e6f4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	2200      	movs	r2, #0
 800e702:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e708:	f004 fd54 	bl	80131b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	7d1b      	ldrb	r3, [r3, #20]
 800e710:	2b06      	cmp	r3, #6
 800e712:	d111      	bne.n	800e738 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	8b5b      	ldrh	r3, [r3, #26]
 800e718:	f003 0310 	and.w	r3, r3, #16
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e720:	4b9c      	ldr	r3, [pc, #624]	; (800e994 <tcp_slowtmr+0x580>)
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e726:	6a1b      	ldr	r3, [r3, #32]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	2b28      	cmp	r3, #40	; 0x28
 800e72c:	d904      	bls.n	800e738 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e72e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e732:	3301      	adds	r3, #1
 800e734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	7a5b      	ldrb	r3, [r3, #9]
 800e73c:	f003 0308 	and.w	r3, r3, #8
 800e740:	2b00      	cmp	r3, #0
 800e742:	d04a      	beq.n	800e7da <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e748:	2b04      	cmp	r3, #4
 800e74a:	d003      	beq.n	800e754 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e750:	2b07      	cmp	r3, #7
 800e752:	d142      	bne.n	800e7da <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e754:	4b8f      	ldr	r3, [pc, #572]	; (800e994 <tcp_slowtmr+0x580>)
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	6a1b      	ldr	r3, [r3, #32]
 800e75c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e760:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e764:	4b8c      	ldr	r3, [pc, #560]	; (800e998 <tcp_slowtmr+0x584>)
 800e766:	440b      	add	r3, r1
 800e768:	498c      	ldr	r1, [pc, #560]	; (800e99c <tcp_slowtmr+0x588>)
 800e76a:	fba1 1303 	umull	r1, r3, r1, r3
 800e76e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e770:	429a      	cmp	r2, r3
 800e772:	d90a      	bls.n	800e78a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e778:	3301      	adds	r3, #1
 800e77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e77e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e782:	3301      	adds	r3, #1
 800e784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e788:	e027      	b.n	800e7da <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e78a:	4b82      	ldr	r3, [pc, #520]	; (800e994 <tcp_slowtmr+0x580>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	4b7f      	ldr	r3, [pc, #508]	; (800e9a0 <tcp_slowtmr+0x58c>)
 800e7a4:	fb00 f303 	mul.w	r3, r0, r3
 800e7a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e7aa:	497c      	ldr	r1, [pc, #496]	; (800e99c <tcp_slowtmr+0x588>)
 800e7ac:	fba1 1303 	umull	r1, r3, r1, r3
 800e7b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d911      	bls.n	800e7da <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e7b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7b8:	f005 f812 	bl	80137e0 <tcp_keepalive>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e7c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d107      	bne.n	800e7da <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d011      	beq.n	800e806 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e7e2:	4b6c      	ldr	r3, [pc, #432]	; (800e994 <tcp_slowtmr+0x580>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	1ad2      	subs	r2, r2, r3
 800e7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	005b      	lsls	r3, r3, #1
 800e7f8:	440b      	add	r3, r1
 800e7fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d302      	bcc.n	800e806 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e802:	f000 feab 	bl	800f55c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	7d1b      	ldrb	r3, [r3, #20]
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d10b      	bne.n	800e826 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e80e:	4b61      	ldr	r3, [pc, #388]	; (800e994 <tcp_slowtmr+0x580>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	2b28      	cmp	r3, #40	; 0x28
 800e81a:	d904      	bls.n	800e826 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e820:	3301      	adds	r3, #1
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	7d1b      	ldrb	r3, [r3, #20]
 800e82a:	2b09      	cmp	r3, #9
 800e82c:	d10b      	bne.n	800e846 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e82e:	4b59      	ldr	r3, [pc, #356]	; (800e994 <tcp_slowtmr+0x580>)
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	6a1b      	ldr	r3, [r3, #32]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	2bf0      	cmp	r3, #240	; 0xf0
 800e83a:	d904      	bls.n	800e846 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e840:	3301      	adds	r3, #1
 800e842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d060      	beq.n	800e910 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e854:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e858:	f000 fccc 	bl	800f1f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d010      	beq.n	800e884 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e862:	4b50      	ldr	r3, [pc, #320]	; (800e9a4 <tcp_slowtmr+0x590>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e868:	429a      	cmp	r2, r3
 800e86a:	d106      	bne.n	800e87a <tcp_slowtmr+0x466>
 800e86c:	4b4e      	ldr	r3, [pc, #312]	; (800e9a8 <tcp_slowtmr+0x594>)
 800e86e:	f240 526d 	movw	r2, #1389	; 0x56d
 800e872:	494e      	ldr	r1, [pc, #312]	; (800e9ac <tcp_slowtmr+0x598>)
 800e874:	484e      	ldr	r0, [pc, #312]	; (800e9b0 <tcp_slowtmr+0x59c>)
 800e876:	f008 f8a3 	bl	80169c0 <iprintf>
        prev->next = pcb->next;
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e880:	60da      	str	r2, [r3, #12]
 800e882:	e00f      	b.n	800e8a4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e884:	4b47      	ldr	r3, [pc, #284]	; (800e9a4 <tcp_slowtmr+0x590>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d006      	beq.n	800e89c <tcp_slowtmr+0x488>
 800e88e:	4b46      	ldr	r3, [pc, #280]	; (800e9a8 <tcp_slowtmr+0x594>)
 800e890:	f240 5271 	movw	r2, #1393	; 0x571
 800e894:	4947      	ldr	r1, [pc, #284]	; (800e9b4 <tcp_slowtmr+0x5a0>)
 800e896:	4846      	ldr	r0, [pc, #280]	; (800e9b0 <tcp_slowtmr+0x59c>)
 800e898:	f008 f892 	bl	80169c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	4a40      	ldr	r2, [pc, #256]	; (800e9a4 <tcp_slowtmr+0x590>)
 800e8a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e8a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d013      	beq.n	800e8d4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e8b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8bc:	8ad2      	ldrh	r2, [r2, #22]
 800e8be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8c0:	8b09      	ldrh	r1, [r1, #24]
 800e8c2:	9102      	str	r1, [sp, #8]
 800e8c4:	9201      	str	r2, [sp, #4]
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	4601      	mov	r1, r0
 800e8ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d0:	f004 fed2 	bl	8013678 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8dc:	7d1b      	ldrb	r3, [r3, #20]
 800e8de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e8ea:	6838      	ldr	r0, [r7, #0]
 800e8ec:	f7fe ffa2 	bl	800d834 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e8f0:	4b31      	ldr	r3, [pc, #196]	; (800e9b8 <tcp_slowtmr+0x5a4>)
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d004      	beq.n	800e906 <tcp_slowtmr+0x4f2>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f06f 010c 	mvn.w	r1, #12
 800e902:	68b8      	ldr	r0, [r7, #8]
 800e904:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e906:	4b2c      	ldr	r3, [pc, #176]	; (800e9b8 <tcp_slowtmr+0x5a4>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d037      	beq.n	800e97e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e90e:	e592      	b.n	800e436 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	7f1b      	ldrb	r3, [r3, #28]
 800e91e:	3301      	adds	r3, #1
 800e920:	b2da      	uxtb	r2, r3
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	7f1a      	ldrb	r2, [r3, #28]
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	7f5b      	ldrb	r3, [r3, #29]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d325      	bcc.n	800e97e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e934:	2200      	movs	r2, #0
 800e936:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e938:	4b1f      	ldr	r3, [pc, #124]	; (800e9b8 <tcp_slowtmr+0x5a4>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00b      	beq.n	800e960 <tcp_slowtmr+0x54c>
 800e948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e950:	6912      	ldr	r2, [r2, #16]
 800e952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e954:	4610      	mov	r0, r2
 800e956:	4798      	blx	r3
 800e958:	4603      	mov	r3, r0
 800e95a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e95e:	e002      	b.n	800e966 <tcp_slowtmr+0x552>
 800e960:	2300      	movs	r3, #0
 800e962:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e966:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <tcp_slowtmr+0x5a4>)
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d000      	beq.n	800e970 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e96e:	e562      	b.n	800e436 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e970:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e974:	2b00      	cmp	r3, #0
 800e976:	d102      	bne.n	800e97e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e97a:	f004 f8a7 	bl	8012acc <tcp_output>
  while (pcb != NULL) {
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	2b00      	cmp	r3, #0
 800e982:	f47f ad5e 	bne.w	800e442 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e986:	2300      	movs	r3, #0
 800e988:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e98a:	4b0c      	ldr	r3, [pc, #48]	; (800e9bc <tcp_slowtmr+0x5a8>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e990:	e069      	b.n	800ea66 <tcp_slowtmr+0x652>
 800e992:	bf00      	nop
 800e994:	20011b48 	.word	0x20011b48
 800e998:	000a4cb8 	.word	0x000a4cb8
 800e99c:	10624dd3 	.word	0x10624dd3
 800e9a0:	000124f8 	.word	0x000124f8
 800e9a4:	20011b54 	.word	0x20011b54
 800e9a8:	0801b01c 	.word	0x0801b01c
 800e9ac:	0801b454 	.word	0x0801b454
 800e9b0:	0801b060 	.word	0x0801b060
 800e9b4:	0801b480 	.word	0x0801b480
 800e9b8:	20011b5c 	.word	0x20011b5c
 800e9bc:	20011b58 	.word	0x20011b58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c2:	7d1b      	ldrb	r3, [r3, #20]
 800e9c4:	2b0a      	cmp	r3, #10
 800e9c6:	d006      	beq.n	800e9d6 <tcp_slowtmr+0x5c2>
 800e9c8:	4b2b      	ldr	r3, [pc, #172]	; (800ea78 <tcp_slowtmr+0x664>)
 800e9ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e9ce:	492b      	ldr	r1, [pc, #172]	; (800ea7c <tcp_slowtmr+0x668>)
 800e9d0:	482b      	ldr	r0, [pc, #172]	; (800ea80 <tcp_slowtmr+0x66c>)
 800e9d2:	f007 fff5 	bl	80169c0 <iprintf>
    pcb_remove = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e9dc:	4b29      	ldr	r3, [pc, #164]	; (800ea84 <tcp_slowtmr+0x670>)
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e2:	6a1b      	ldr	r3, [r3, #32]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	2bf0      	cmp	r3, #240	; 0xf0
 800e9e8:	d904      	bls.n	800e9f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d02f      	beq.n	800ea5c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e9fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9fe:	f000 fbf9 	bl	800f1f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d010      	beq.n	800ea2a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea08:	4b1f      	ldr	r3, [pc, #124]	; (800ea88 <tcp_slowtmr+0x674>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d106      	bne.n	800ea20 <tcp_slowtmr+0x60c>
 800ea12:	4b19      	ldr	r3, [pc, #100]	; (800ea78 <tcp_slowtmr+0x664>)
 800ea14:	f240 52af 	movw	r2, #1455	; 0x5af
 800ea18:	491c      	ldr	r1, [pc, #112]	; (800ea8c <tcp_slowtmr+0x678>)
 800ea1a:	4819      	ldr	r0, [pc, #100]	; (800ea80 <tcp_slowtmr+0x66c>)
 800ea1c:	f007 ffd0 	bl	80169c0 <iprintf>
        prev->next = pcb->next;
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	68da      	ldr	r2, [r3, #12]
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	60da      	str	r2, [r3, #12]
 800ea28:	e00f      	b.n	800ea4a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea2a:	4b17      	ldr	r3, [pc, #92]	; (800ea88 <tcp_slowtmr+0x674>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d006      	beq.n	800ea42 <tcp_slowtmr+0x62e>
 800ea34:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <tcp_slowtmr+0x664>)
 800ea36:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ea3a:	4915      	ldr	r1, [pc, #84]	; (800ea90 <tcp_slowtmr+0x67c>)
 800ea3c:	4810      	ldr	r0, [pc, #64]	; (800ea80 <tcp_slowtmr+0x66c>)
 800ea3e:	f007 ffbf 	bl	80169c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	4a10      	ldr	r2, [pc, #64]	; (800ea88 <tcp_slowtmr+0x674>)
 800ea48:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea54:	69f8      	ldr	r0, [r7, #28]
 800ea56:	f7fe feed 	bl	800d834 <tcp_free>
 800ea5a:	e004      	b.n	800ea66 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1a9      	bne.n	800e9c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea6c:	bf00      	nop
 800ea6e:	bf00      	nop
 800ea70:	3730      	adds	r7, #48	; 0x30
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bdb0      	pop	{r4, r5, r7, pc}
 800ea76:	bf00      	nop
 800ea78:	0801b01c 	.word	0x0801b01c
 800ea7c:	0801b4ac 	.word	0x0801b4ac
 800ea80:	0801b060 	.word	0x0801b060
 800ea84:	20011b48 	.word	0x20011b48
 800ea88:	20011b58 	.word	0x20011b58
 800ea8c:	0801b4dc 	.word	0x0801b4dc
 800ea90:	0801b504 	.word	0x0801b504

0800ea94 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea9a:	4b2d      	ldr	r3, [pc, #180]	; (800eb50 <tcp_fasttmr+0xbc>)
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	4b2b      	ldr	r3, [pc, #172]	; (800eb50 <tcp_fasttmr+0xbc>)
 800eaa4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eaa6:	4b2b      	ldr	r3, [pc, #172]	; (800eb54 <tcp_fasttmr+0xc0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eaac:	e048      	b.n	800eb40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7f9a      	ldrb	r2, [r3, #30]
 800eab2:	4b27      	ldr	r3, [pc, #156]	; (800eb50 <tcp_fasttmr+0xbc>)
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d03f      	beq.n	800eb3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eaba:	4b25      	ldr	r3, [pc, #148]	; (800eb50 <tcp_fasttmr+0xbc>)
 800eabc:	781a      	ldrb	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	8b5b      	ldrh	r3, [r3, #26]
 800eac6:	f003 0301 	and.w	r3, r3, #1
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d010      	beq.n	800eaf0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	8b5b      	ldrh	r3, [r3, #26]
 800ead2:	f043 0302 	orr.w	r3, r3, #2
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f003 fff5 	bl	8012acc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	8b5b      	ldrh	r3, [r3, #26]
 800eae6:	f023 0303 	bic.w	r3, r3, #3
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	8b5b      	ldrh	r3, [r3, #26]
 800eaf4:	f003 0308 	and.w	r3, r3, #8
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d009      	beq.n	800eb10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8b5b      	ldrh	r3, [r3, #26]
 800eb00:	f023 0308 	bic.w	r3, r3, #8
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff f826 	bl	800db5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb1e:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <tcp_fasttmr+0xc4>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f819 	bl	800eb5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb2a:	4b0b      	ldr	r3, [pc, #44]	; (800eb58 <tcp_fasttmr+0xc4>)
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d000      	beq.n	800eb34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb32:	e7b8      	b.n	800eaa6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	607b      	str	r3, [r7, #4]
 800eb38:	e002      	b.n	800eb40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1b3      	bne.n	800eaae <tcp_fasttmr+0x1a>
    }
  }
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	20011b5e 	.word	0x20011b5e
 800eb54:	20011b54 	.word	0x20011b54
 800eb58:	20011b5c 	.word	0x20011b5c

0800eb5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb5c:	b590      	push	{r4, r7, lr}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d109      	bne.n	800eb7e <tcp_process_refused_data+0x22>
 800eb6a:	4b37      	ldr	r3, [pc, #220]	; (800ec48 <tcp_process_refused_data+0xec>)
 800eb6c:	f240 6209 	movw	r2, #1545	; 0x609
 800eb70:	4936      	ldr	r1, [pc, #216]	; (800ec4c <tcp_process_refused_data+0xf0>)
 800eb72:	4837      	ldr	r0, [pc, #220]	; (800ec50 <tcp_process_refused_data+0xf4>)
 800eb74:	f007 ff24 	bl	80169c0 <iprintf>
 800eb78:	f06f 030f 	mvn.w	r3, #15
 800eb7c:	e060      	b.n	800ec40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb82:	7b5b      	ldrb	r3, [r3, #13]
 800eb84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00b      	beq.n	800ebb4 <tcp_process_refused_data+0x58>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6918      	ldr	r0, [r3, #16]
 800eba6:	2300      	movs	r3, #0
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	6879      	ldr	r1, [r7, #4]
 800ebac:	47a0      	blx	r4
 800ebae:	4603      	mov	r3, r0
 800ebb0:	73fb      	strb	r3, [r7, #15]
 800ebb2:	e007      	b.n	800ebc4 <tcp_process_refused_data+0x68>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	6879      	ldr	r1, [r7, #4]
 800ebba:	2000      	movs	r0, #0
 800ebbc:	f000 f8a4 	bl	800ed08 <tcp_recv_null>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ebc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d12a      	bne.n	800ec22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
 800ebce:	f003 0320 	and.w	r3, r3, #32
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d033      	beq.n	800ec3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ebde:	d005      	beq.n	800ebec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00b      	beq.n	800ec0e <tcp_process_refused_data+0xb2>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6918      	ldr	r0, [r3, #16]
 800ec00:	2300      	movs	r3, #0
 800ec02:	2200      	movs	r2, #0
 800ec04:	6879      	ldr	r1, [r7, #4]
 800ec06:	47a0      	blx	r4
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73fb      	strb	r3, [r7, #15]
 800ec0c:	e001      	b.n	800ec12 <tcp_process_refused_data+0xb6>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec16:	f113 0f0d 	cmn.w	r3, #13
 800ec1a:	d110      	bne.n	800ec3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec1c:	f06f 030c 	mvn.w	r3, #12
 800ec20:	e00e      	b.n	800ec40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec26:	f113 0f0d 	cmn.w	r3, #13
 800ec2a:	d102      	bne.n	800ec32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec2c:	f06f 030c 	mvn.w	r3, #12
 800ec30:	e006      	b.n	800ec40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ec38:	f06f 0304 	mvn.w	r3, #4
 800ec3c:	e000      	b.n	800ec40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd90      	pop	{r4, r7, pc}
 800ec48:	0801b01c 	.word	0x0801b01c
 800ec4c:	0801b52c 	.word	0x0801b52c
 800ec50:	0801b060 	.word	0x0801b060

0800ec54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec5c:	e007      	b.n	800ec6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f80a 	bl	800ec7e <tcp_seg_free>
    seg = next;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1f4      	bne.n	800ec5e <tcp_segs_free+0xa>
  }
}
 800ec74:	bf00      	nop
 800ec76:	bf00      	nop
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b082      	sub	sp, #8
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00c      	beq.n	800eca6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d004      	beq.n	800ec9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe fb1f 	bl	800d2dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec9e:	6879      	ldr	r1, [r7, #4]
 800eca0:	2002      	movs	r0, #2
 800eca2:	f7fd fc7b 	bl	800c59c <memp_free>
  }
}
 800eca6:	bf00      	nop
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
	...

0800ecb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <tcp_seg_copy+0x1c>
 800ecbe:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <tcp_seg_copy+0x4c>)
 800ecc0:	f240 6282 	movw	r2, #1666	; 0x682
 800ecc4:	490e      	ldr	r1, [pc, #56]	; (800ed00 <tcp_seg_copy+0x50>)
 800ecc6:	480f      	ldr	r0, [pc, #60]	; (800ed04 <tcp_seg_copy+0x54>)
 800ecc8:	f007 fe7a 	bl	80169c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eccc:	2002      	movs	r0, #2
 800ecce:	f7fd fbef 	bl	800c4b0 <memp_malloc>
 800ecd2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d101      	bne.n	800ecde <tcp_seg_copy+0x2e>
    return NULL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	e00a      	b.n	800ecf4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ecde:	2210      	movs	r2, #16
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f007 fda7 	bl	8016836 <memcpy>
  pbuf_ref(cseg->p);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fe fb9b 	bl	800d428 <pbuf_ref>
  return cseg;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	0801b01c 	.word	0x0801b01c
 800ed00:	0801b570 	.word	0x0801b570
 800ed04:	0801b060 	.word	0x0801b060

0800ed08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d109      	bne.n	800ed30 <tcp_recv_null+0x28>
 800ed1c:	4b12      	ldr	r3, [pc, #72]	; (800ed68 <tcp_recv_null+0x60>)
 800ed1e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed22:	4912      	ldr	r1, [pc, #72]	; (800ed6c <tcp_recv_null+0x64>)
 800ed24:	4812      	ldr	r0, [pc, #72]	; (800ed70 <tcp_recv_null+0x68>)
 800ed26:	f007 fe4b 	bl	80169c0 <iprintf>
 800ed2a:	f06f 030f 	mvn.w	r3, #15
 800ed2e:	e016      	b.n	800ed5e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d009      	beq.n	800ed4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	891b      	ldrh	r3, [r3, #8]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	68b8      	ldr	r0, [r7, #8]
 800ed3e:	f7ff f9bb 	bl	800e0b8 <tcp_recved>
    pbuf_free(p);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f7fe faca 	bl	800d2dc <pbuf_free>
 800ed48:	e008      	b.n	800ed5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ed4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d104      	bne.n	800ed5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ed52:	68b8      	ldr	r0, [r7, #8]
 800ed54:	f7fe ff6c 	bl	800dc30 <tcp_close>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	e000      	b.n	800ed5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	0801b01c 	.word	0x0801b01c
 800ed6c:	0801b58c 	.word	0x0801b58c
 800ed70:	0801b060 	.word	0x0801b060

0800ed74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b086      	sub	sp, #24
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	db01      	blt.n	800ed8a <tcp_kill_prio+0x16>
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	e000      	b.n	800ed8c <tcp_kill_prio+0x18>
 800ed8a:	237f      	movs	r3, #127	; 0x7f
 800ed8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed8e:	7afb      	ldrb	r3, [r7, #11]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d034      	beq.n	800edfe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed94:	7afb      	ldrb	r3, [r7, #11]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eda2:	4b19      	ldr	r3, [pc, #100]	; (800ee08 <tcp_kill_prio+0x94>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	617b      	str	r3, [r7, #20]
 800eda8:	e01f      	b.n	800edea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	7d5b      	ldrb	r3, [r3, #21]
 800edae:	7afa      	ldrb	r2, [r7, #11]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d80c      	bhi.n	800edce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800edb8:	7afa      	ldrb	r2, [r7, #11]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d112      	bne.n	800ede4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800edbe:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <tcp_kill_prio+0x98>)
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	6a1b      	ldr	r3, [r3, #32]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d80a      	bhi.n	800ede4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800edce:	4b0f      	ldr	r3, [pc, #60]	; (800ee0c <tcp_kill_prio+0x98>)
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	6a1b      	ldr	r3, [r3, #32]
 800edd6:	1ad3      	subs	r3, r2, r3
 800edd8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	7d5b      	ldrb	r3, [r3, #21]
 800ede2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	617b      	str	r3, [r7, #20]
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1dc      	bne.n	800edaa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d004      	beq.n	800ee00 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800edf6:	6938      	ldr	r0, [r7, #16]
 800edf8:	f7ff f860 	bl	800debc <tcp_abort>
 800edfc:	e000      	b.n	800ee00 <tcp_kill_prio+0x8c>
    return;
 800edfe:	bf00      	nop
  }
}
 800ee00:	3718      	adds	r7, #24
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20011b54 	.word	0x20011b54
 800ee0c:	20011b48 	.word	0x20011b48

0800ee10 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	2b08      	cmp	r3, #8
 800ee1e:	d009      	beq.n	800ee34 <tcp_kill_state+0x24>
 800ee20:	79fb      	ldrb	r3, [r7, #7]
 800ee22:	2b09      	cmp	r3, #9
 800ee24:	d006      	beq.n	800ee34 <tcp_kill_state+0x24>
 800ee26:	4b1a      	ldr	r3, [pc, #104]	; (800ee90 <tcp_kill_state+0x80>)
 800ee28:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ee2c:	4919      	ldr	r1, [pc, #100]	; (800ee94 <tcp_kill_state+0x84>)
 800ee2e:	481a      	ldr	r0, [pc, #104]	; (800ee98 <tcp_kill_state+0x88>)
 800ee30:	f007 fdc6 	bl	80169c0 <iprintf>

  inactivity = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee3c:	4b17      	ldr	r3, [pc, #92]	; (800ee9c <tcp_kill_state+0x8c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	617b      	str	r3, [r7, #20]
 800ee42:	e017      	b.n	800ee74 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	7d1b      	ldrb	r3, [r3, #20]
 800ee48:	79fa      	ldrb	r2, [r7, #7]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d10f      	bne.n	800ee6e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee4e:	4b14      	ldr	r3, [pc, #80]	; (800eea0 <tcp_kill_state+0x90>)
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	6a1b      	ldr	r3, [r3, #32]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d807      	bhi.n	800ee6e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ee5e:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <tcp_kill_state+0x90>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e4      	bne.n	800ee44 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d003      	beq.n	800ee88 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee80:	2100      	movs	r1, #0
 800ee82:	6938      	ldr	r0, [r7, #16]
 800ee84:	f7fe ff5c 	bl	800dd40 <tcp_abandon>
  }
}
 800ee88:	bf00      	nop
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	0801b01c 	.word	0x0801b01c
 800ee94:	0801b5a8 	.word	0x0801b5a8
 800ee98:	0801b060 	.word	0x0801b060
 800ee9c:	20011b54 	.word	0x20011b54
 800eea0:	20011b48 	.word	0x20011b48

0800eea4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeb2:	4b12      	ldr	r3, [pc, #72]	; (800eefc <tcp_kill_timewait+0x58>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	e012      	b.n	800eee0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eeba:	4b11      	ldr	r3, [pc, #68]	; (800ef00 <tcp_kill_timewait+0x5c>)
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d807      	bhi.n	800eeda <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eeca:	4b0d      	ldr	r3, [pc, #52]	; (800ef00 <tcp_kill_timewait+0x5c>)
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1e9      	bne.n	800eeba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eeec:	68b8      	ldr	r0, [r7, #8]
 800eeee:	f7fe ffe5 	bl	800debc <tcp_abort>
  }
}
 800eef2:	bf00      	nop
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20011b58 	.word	0x20011b58
 800ef00:	20011b48 	.word	0x20011b48

0800ef04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef0a:	4b10      	ldr	r3, [pc, #64]	; (800ef4c <tcp_handle_closepend+0x48>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef10:	e014      	b.n	800ef3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	8b5b      	ldrh	r3, [r3, #26]
 800ef1c:	f003 0308 	and.w	r3, r3, #8
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d009      	beq.n	800ef38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	8b5b      	ldrh	r3, [r3, #26]
 800ef28:	f023 0308 	bic.w	r3, r3, #8
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7fe fe12 	bl	800db5c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1e7      	bne.n	800ef12 <tcp_handle_closepend+0xe>
  }
}
 800ef42:	bf00      	nop
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	20011b54 	.word	0x20011b54

0800ef50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	4603      	mov	r3, r0
 800ef58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	f7fd faa8 	bl	800c4b0 <memp_malloc>
 800ef60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d126      	bne.n	800efb6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef68:	f7ff ffcc 	bl	800ef04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef6c:	f7ff ff9a 	bl	800eea4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef70:	2000      	movs	r0, #0
 800ef72:	f7fd fa9d 	bl	800c4b0 <memp_malloc>
 800ef76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d11b      	bne.n	800efb6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef7e:	2009      	movs	r0, #9
 800ef80:	f7ff ff46 	bl	800ee10 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef84:	2000      	movs	r0, #0
 800ef86:	f7fd fa93 	bl	800c4b0 <memp_malloc>
 800ef8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d111      	bne.n	800efb6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef92:	2008      	movs	r0, #8
 800ef94:	f7ff ff3c 	bl	800ee10 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef98:	2000      	movs	r0, #0
 800ef9a:	f7fd fa89 	bl	800c4b0 <memp_malloc>
 800ef9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d107      	bne.n	800efb6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff fee3 	bl	800ed74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efae:	2000      	movs	r0, #0
 800efb0:	f7fd fa7e 	bl	800c4b0 <memp_malloc>
 800efb4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d03f      	beq.n	800f03c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800efbc:	229c      	movs	r2, #156	; 0x9c
 800efbe:	2100      	movs	r1, #0
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f007 fc60 	bl	8016886 <memset>
    pcb->prio = prio;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	79fa      	ldrb	r2, [r7, #7]
 800efca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efd2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800efdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	22ff      	movs	r2, #255	; 0xff
 800efea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eff2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2206      	movs	r2, #6
 800eff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2206      	movs	r2, #6
 800f000:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f008:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f012:	4b0d      	ldr	r3, [pc, #52]	; (800f048 <tcp_alloc+0xf8>)
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f01a:	4b0c      	ldr	r3, [pc, #48]	; (800f04c <tcp_alloc+0xfc>)
 800f01c:	781a      	ldrb	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f028:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4a08      	ldr	r2, [pc, #32]	; (800f050 <tcp_alloc+0x100>)
 800f030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a07      	ldr	r2, [pc, #28]	; (800f054 <tcp_alloc+0x104>)
 800f038:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f03c:	68fb      	ldr	r3, [r7, #12]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	20011b48 	.word	0x20011b48
 800f04c:	20011b5e 	.word	0x20011b5e
 800f050:	0800ed09 	.word	0x0800ed09
 800f054:	006ddd00 	.word	0x006ddd00

0800f058 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	4603      	mov	r3, r0
 800f060:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f062:	2040      	movs	r0, #64	; 0x40
 800f064:	f7ff ff74 	bl	800ef50 <tcp_alloc>
 800f068:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f06a:	68fb      	ldr	r3, [r7, #12]
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d002      	beq.n	800f08a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	611a      	str	r2, [r3, #16]
  }
}
 800f08a:	bf00      	nop
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
	...

0800f098 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00e      	beq.n	800f0c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7d1b      	ldrb	r3, [r3, #20]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d106      	bne.n	800f0be <tcp_recv+0x26>
 800f0b0:	4b07      	ldr	r3, [pc, #28]	; (800f0d0 <tcp_recv+0x38>)
 800f0b2:	f240 72df 	movw	r2, #2015	; 0x7df
 800f0b6:	4907      	ldr	r1, [pc, #28]	; (800f0d4 <tcp_recv+0x3c>)
 800f0b8:	4807      	ldr	r0, [pc, #28]	; (800f0d8 <tcp_recv+0x40>)
 800f0ba:	f007 fc81 	bl	80169c0 <iprintf>
    pcb->recv = recv;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f0c6:	bf00      	nop
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0801b01c 	.word	0x0801b01c
 800f0d4:	0801b5b8 	.word	0x0801b5b8
 800f0d8:	0801b060 	.word	0x0801b060

0800f0dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00e      	beq.n	800f10a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7d1b      	ldrb	r3, [r3, #20]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d106      	bne.n	800f102 <tcp_sent+0x26>
 800f0f4:	4b07      	ldr	r3, [pc, #28]	; (800f114 <tcp_sent+0x38>)
 800f0f6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f0fa:	4907      	ldr	r1, [pc, #28]	; (800f118 <tcp_sent+0x3c>)
 800f0fc:	4807      	ldr	r0, [pc, #28]	; (800f11c <tcp_sent+0x40>)
 800f0fe:	f007 fc5f 	bl	80169c0 <iprintf>
    pcb->sent = sent;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	683a      	ldr	r2, [r7, #0]
 800f106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f10a:	bf00      	nop
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	0801b01c 	.word	0x0801b01c
 800f118:	0801b5e0 	.word	0x0801b5e0
 800f11c:	0801b060 	.word	0x0801b060

0800f120 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00e      	beq.n	800f14e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7d1b      	ldrb	r3, [r3, #20]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d106      	bne.n	800f146 <tcp_err+0x26>
 800f138:	4b07      	ldr	r3, [pc, #28]	; (800f158 <tcp_err+0x38>)
 800f13a:	f640 020d 	movw	r2, #2061	; 0x80d
 800f13e:	4907      	ldr	r1, [pc, #28]	; (800f15c <tcp_err+0x3c>)
 800f140:	4807      	ldr	r0, [pc, #28]	; (800f160 <tcp_err+0x40>)
 800f142:	f007 fc3d 	bl	80169c0 <iprintf>
    pcb->errf = err;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f14e:	bf00      	nop
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0801b01c 	.word	0x0801b01c
 800f15c:	0801b608 	.word	0x0801b608
 800f160:	0801b060 	.word	0x0801b060

0800f164 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f164:	b480      	push	{r7}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d008      	beq.n	800f186 <tcp_accept+0x22>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	7d1b      	ldrb	r3, [r3, #20]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d104      	bne.n	800f186 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	619a      	str	r2, [r3, #24]
  }
}
 800f186:	bf00      	nop
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
	...

0800f194 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d107      	bne.n	800f1b8 <tcp_poll+0x24>
 800f1a8:	4b0e      	ldr	r3, [pc, #56]	; (800f1e4 <tcp_poll+0x50>)
 800f1aa:	f640 023d 	movw	r2, #2109	; 0x83d
 800f1ae:	490e      	ldr	r1, [pc, #56]	; (800f1e8 <tcp_poll+0x54>)
 800f1b0:	480e      	ldr	r0, [pc, #56]	; (800f1ec <tcp_poll+0x58>)
 800f1b2:	f007 fc05 	bl	80169c0 <iprintf>
 800f1b6:	e011      	b.n	800f1dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	7d1b      	ldrb	r3, [r3, #20]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d106      	bne.n	800f1ce <tcp_poll+0x3a>
 800f1c0:	4b08      	ldr	r3, [pc, #32]	; (800f1e4 <tcp_poll+0x50>)
 800f1c2:	f640 023e 	movw	r2, #2110	; 0x83e
 800f1c6:	490a      	ldr	r1, [pc, #40]	; (800f1f0 <tcp_poll+0x5c>)
 800f1c8:	4808      	ldr	r0, [pc, #32]	; (800f1ec <tcp_poll+0x58>)
 800f1ca:	f007 fbf9 	bl	80169c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	79fa      	ldrb	r2, [r7, #7]
 800f1da:	775a      	strb	r2, [r3, #29]
}
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	0801b01c 	.word	0x0801b01c
 800f1e8:	0801b630 	.word	0x0801b630
 800f1ec:	0801b060 	.word	0x0801b060
 800f1f0:	0801b648 	.word	0x0801b648

0800f1f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d107      	bne.n	800f212 <tcp_pcb_purge+0x1e>
 800f202:	4b21      	ldr	r3, [pc, #132]	; (800f288 <tcp_pcb_purge+0x94>)
 800f204:	f640 0251 	movw	r2, #2129	; 0x851
 800f208:	4920      	ldr	r1, [pc, #128]	; (800f28c <tcp_pcb_purge+0x98>)
 800f20a:	4821      	ldr	r0, [pc, #132]	; (800f290 <tcp_pcb_purge+0x9c>)
 800f20c:	f007 fbd8 	bl	80169c0 <iprintf>
 800f210:	e037      	b.n	800f282 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	7d1b      	ldrb	r3, [r3, #20]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d033      	beq.n	800f282 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f21e:	2b0a      	cmp	r3, #10
 800f220:	d02f      	beq.n	800f282 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f226:	2b01      	cmp	r3, #1
 800f228:	d02b      	beq.n	800f282 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d007      	beq.n	800f242 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe f850 	bl	800d2dc <pbuf_free>
      pcb->refused_data = NULL;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f246:	2b00      	cmp	r3, #0
 800f248:	d002      	beq.n	800f250 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f986 	bl	800f55c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f256:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff fcf9 	bl	800ec54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f266:	4618      	mov	r0, r3
 800f268:	f7ff fcf4 	bl	800ec54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	66da      	str	r2, [r3, #108]	; 0x6c
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	0801b01c 	.word	0x0801b01c
 800f28c:	0801b668 	.word	0x0801b668
 800f290:	0801b060 	.word	0x0801b060

0800f294 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d106      	bne.n	800f2b2 <tcp_pcb_remove+0x1e>
 800f2a4:	4b3e      	ldr	r3, [pc, #248]	; (800f3a0 <tcp_pcb_remove+0x10c>)
 800f2a6:	f640 0283 	movw	r2, #2179	; 0x883
 800f2aa:	493e      	ldr	r1, [pc, #248]	; (800f3a4 <tcp_pcb_remove+0x110>)
 800f2ac:	483e      	ldr	r0, [pc, #248]	; (800f3a8 <tcp_pcb_remove+0x114>)
 800f2ae:	f007 fb87 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d106      	bne.n	800f2c6 <tcp_pcb_remove+0x32>
 800f2b8:	4b39      	ldr	r3, [pc, #228]	; (800f3a0 <tcp_pcb_remove+0x10c>)
 800f2ba:	f640 0284 	movw	r2, #2180	; 0x884
 800f2be:	493b      	ldr	r1, [pc, #236]	; (800f3ac <tcp_pcb_remove+0x118>)
 800f2c0:	4839      	ldr	r0, [pc, #228]	; (800f3a8 <tcp_pcb_remove+0x114>)
 800f2c2:	f007 fb7d 	bl	80169c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	683a      	ldr	r2, [r7, #0]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d105      	bne.n	800f2dc <tcp_pcb_remove+0x48>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68da      	ldr	r2, [r3, #12]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	601a      	str	r2, [r3, #0]
 800f2da:	e013      	b.n	800f304 <tcp_pcb_remove+0x70>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	60fb      	str	r3, [r7, #12]
 800f2e2:	e00c      	b.n	800f2fe <tcp_pcb_remove+0x6a>
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d104      	bne.n	800f2f8 <tcp_pcb_remove+0x64>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	68da      	ldr	r2, [r3, #12]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	60da      	str	r2, [r3, #12]
 800f2f6:	e005      	b.n	800f304 <tcp_pcb_remove+0x70>
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1ef      	bne.n	800f2e4 <tcp_pcb_remove+0x50>
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	2200      	movs	r2, #0
 800f308:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f30a:	6838      	ldr	r0, [r7, #0]
 800f30c:	f7ff ff72 	bl	800f1f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	2b0a      	cmp	r3, #10
 800f316:	d013      	beq.n	800f340 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d00f      	beq.n	800f340 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	8b5b      	ldrh	r3, [r3, #26]
 800f324:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d009      	beq.n	800f340 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	8b5b      	ldrh	r3, [r3, #26]
 800f330:	f043 0302 	orr.w	r3, r3, #2
 800f334:	b29a      	uxth	r2, r3
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f33a:	6838      	ldr	r0, [r7, #0]
 800f33c:	f003 fbc6 	bl	8012acc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	7d1b      	ldrb	r3, [r3, #20]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d020      	beq.n	800f38a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d006      	beq.n	800f35e <tcp_pcb_remove+0xca>
 800f350:	4b13      	ldr	r3, [pc, #76]	; (800f3a0 <tcp_pcb_remove+0x10c>)
 800f352:	f640 0293 	movw	r2, #2195	; 0x893
 800f356:	4916      	ldr	r1, [pc, #88]	; (800f3b0 <tcp_pcb_remove+0x11c>)
 800f358:	4813      	ldr	r0, [pc, #76]	; (800f3a8 <tcp_pcb_remove+0x114>)
 800f35a:	f007 fb31 	bl	80169c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f362:	2b00      	cmp	r3, #0
 800f364:	d006      	beq.n	800f374 <tcp_pcb_remove+0xe0>
 800f366:	4b0e      	ldr	r3, [pc, #56]	; (800f3a0 <tcp_pcb_remove+0x10c>)
 800f368:	f640 0294 	movw	r2, #2196	; 0x894
 800f36c:	4911      	ldr	r1, [pc, #68]	; (800f3b4 <tcp_pcb_remove+0x120>)
 800f36e:	480e      	ldr	r0, [pc, #56]	; (800f3a8 <tcp_pcb_remove+0x114>)
 800f370:	f007 fb26 	bl	80169c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d006      	beq.n	800f38a <tcp_pcb_remove+0xf6>
 800f37c:	4b08      	ldr	r3, [pc, #32]	; (800f3a0 <tcp_pcb_remove+0x10c>)
 800f37e:	f640 0296 	movw	r2, #2198	; 0x896
 800f382:	490d      	ldr	r1, [pc, #52]	; (800f3b8 <tcp_pcb_remove+0x124>)
 800f384:	4808      	ldr	r0, [pc, #32]	; (800f3a8 <tcp_pcb_remove+0x114>)
 800f386:	f007 fb1b 	bl	80169c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	2200      	movs	r2, #0
 800f38e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	2200      	movs	r2, #0
 800f394:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f396:	bf00      	nop
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	0801b01c 	.word	0x0801b01c
 800f3a4:	0801b684 	.word	0x0801b684
 800f3a8:	0801b060 	.word	0x0801b060
 800f3ac:	0801b6a0 	.word	0x0801b6a0
 800f3b0:	0801b6c0 	.word	0x0801b6c0
 800f3b4:	0801b6d8 	.word	0x0801b6d8
 800f3b8:	0801b6f4 	.word	0x0801b6f4

0800f3bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d106      	bne.n	800f3d8 <tcp_next_iss+0x1c>
 800f3ca:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <tcp_next_iss+0x38>)
 800f3cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800f3d0:	4909      	ldr	r1, [pc, #36]	; (800f3f8 <tcp_next_iss+0x3c>)
 800f3d2:	480a      	ldr	r0, [pc, #40]	; (800f3fc <tcp_next_iss+0x40>)
 800f3d4:	f007 faf4 	bl	80169c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f3d8:	4b09      	ldr	r3, [pc, #36]	; (800f400 <tcp_next_iss+0x44>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	4b09      	ldr	r3, [pc, #36]	; (800f404 <tcp_next_iss+0x48>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	4a07      	ldr	r2, [pc, #28]	; (800f400 <tcp_next_iss+0x44>)
 800f3e4:	6013      	str	r3, [r2, #0]
  return iss;
 800f3e6:	4b06      	ldr	r3, [pc, #24]	; (800f400 <tcp_next_iss+0x44>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	0801b01c 	.word	0x0801b01c
 800f3f8:	0801b70c 	.word	0x0801b70c
 800f3fc:	0801b060 	.word	0x0801b060
 800f400:	20000028 	.word	0x20000028
 800f404:	20011b48 	.word	0x20011b48

0800f408 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	4603      	mov	r3, r0
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d106      	bne.n	800f42a <tcp_eff_send_mss_netif+0x22>
 800f41c:	4b14      	ldr	r3, [pc, #80]	; (800f470 <tcp_eff_send_mss_netif+0x68>)
 800f41e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f422:	4914      	ldr	r1, [pc, #80]	; (800f474 <tcp_eff_send_mss_netif+0x6c>)
 800f424:	4814      	ldr	r0, [pc, #80]	; (800f478 <tcp_eff_send_mss_netif+0x70>)
 800f426:	f007 facb 	bl	80169c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f430:	89fb      	ldrh	r3, [r7, #14]
 800f432:	e019      	b.n	800f468 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f438:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f43a:	8afb      	ldrh	r3, [r7, #22]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d012      	beq.n	800f466 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f440:	2328      	movs	r3, #40	; 0x28
 800f442:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f444:	8afa      	ldrh	r2, [r7, #22]
 800f446:	8abb      	ldrh	r3, [r7, #20]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d904      	bls.n	800f456 <tcp_eff_send_mss_netif+0x4e>
 800f44c:	8afa      	ldrh	r2, [r7, #22]
 800f44e:	8abb      	ldrh	r3, [r7, #20]
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	b29b      	uxth	r3, r3
 800f454:	e000      	b.n	800f458 <tcp_eff_send_mss_netif+0x50>
 800f456:	2300      	movs	r3, #0
 800f458:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f45a:	8a7a      	ldrh	r2, [r7, #18]
 800f45c:	89fb      	ldrh	r3, [r7, #14]
 800f45e:	4293      	cmp	r3, r2
 800f460:	bf28      	it	cs
 800f462:	4613      	movcs	r3, r2
 800f464:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f466:	89fb      	ldrh	r3, [r7, #14]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	0801b01c 	.word	0x0801b01c
 800f474:	0801b728 	.word	0x0801b728
 800f478:	0801b060 	.word	0x0801b060

0800f47c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d119      	bne.n	800f4c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f490:	4b10      	ldr	r3, [pc, #64]	; (800f4d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f492:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f496:	4910      	ldr	r1, [pc, #64]	; (800f4d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f498:	4810      	ldr	r0, [pc, #64]	; (800f4dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f49a:	f007 fa91 	bl	80169c0 <iprintf>

  while (pcb != NULL) {
 800f49e:	e011      	b.n	800f4c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d108      	bne.n	800f4be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f7fe fd02 	bl	800debc <tcp_abort>
      pcb = next;
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e002      	b.n	800f4c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1ea      	bne.n	800f4a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f4ca:	bf00      	nop
 800f4cc:	bf00      	nop
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	0801b01c 	.word	0x0801b01c
 800f4d8:	0801b750 	.word	0x0801b750
 800f4dc:	0801b060 	.word	0x0801b060

0800f4e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d02a      	beq.n	800f546 <tcp_netif_ip_addr_changed+0x66>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d026      	beq.n	800f546 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f4f8:	4b15      	ldr	r3, [pc, #84]	; (800f550 <tcp_netif_ip_addr_changed+0x70>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff ffbc 	bl	800f47c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f504:	4b13      	ldr	r3, [pc, #76]	; (800f554 <tcp_netif_ip_addr_changed+0x74>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff ffb6 	bl	800f47c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d017      	beq.n	800f546 <tcp_netif_ip_addr_changed+0x66>
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d013      	beq.n	800f546 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f51e:	4b0e      	ldr	r3, [pc, #56]	; (800f558 <tcp_netif_ip_addr_changed+0x78>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e00c      	b.n	800f540 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d103      	bne.n	800f53a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	60fb      	str	r3, [r7, #12]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1ef      	bne.n	800f526 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f546:	bf00      	nop
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20011b54 	.word	0x20011b54
 800f554:	20011b4c 	.word	0x20011b4c
 800f558:	20011b50 	.word	0x20011b50

0800f55c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d007      	beq.n	800f57c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff fb6f 	bl	800ec54 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2200      	movs	r2, #0
 800f57a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f57c:	bf00      	nop
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f584:	b590      	push	{r4, r7, lr}
 800f586:	b08d      	sub	sp, #52	; 0x34
 800f588:	af04      	add	r7, sp, #16
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d105      	bne.n	800f5a0 <tcp_input+0x1c>
 800f594:	4b9b      	ldr	r3, [pc, #620]	; (800f804 <tcp_input+0x280>)
 800f596:	2283      	movs	r2, #131	; 0x83
 800f598:	499b      	ldr	r1, [pc, #620]	; (800f808 <tcp_input+0x284>)
 800f59a:	489c      	ldr	r0, [pc, #624]	; (800f80c <tcp_input+0x288>)
 800f59c:	f007 fa10 	bl	80169c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	4a9a      	ldr	r2, [pc, #616]	; (800f810 <tcp_input+0x28c>)
 800f5a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	895b      	ldrh	r3, [r3, #10]
 800f5ac:	2b13      	cmp	r3, #19
 800f5ae:	f240 83d1 	bls.w	800fd54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f5b2:	4b98      	ldr	r3, [pc, #608]	; (800f814 <tcp_input+0x290>)
 800f5b4:	695b      	ldr	r3, [r3, #20]
 800f5b6:	4a97      	ldr	r2, [pc, #604]	; (800f814 <tcp_input+0x290>)
 800f5b8:	6812      	ldr	r2, [r2, #0]
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f005 fefd 	bl	80153bc <ip4_addr_isbroadcast_u32>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f040 83c7 	bne.w	800fd58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f5ca:	4b92      	ldr	r3, [pc, #584]	; (800f814 <tcp_input+0x290>)
 800f5cc:	695b      	ldr	r3, [r3, #20]
 800f5ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f5d2:	2be0      	cmp	r3, #224	; 0xe0
 800f5d4:	f000 83c0 	beq.w	800fd58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f5d8:	4b8d      	ldr	r3, [pc, #564]	; (800f810 <tcp_input+0x28c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	899b      	ldrh	r3, [r3, #12]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fc f975 	bl	800b8d0 <lwip_htons>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	0b1b      	lsrs	r3, r3, #12
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f5f2:	7cbb      	ldrb	r3, [r7, #18]
 800f5f4:	2b13      	cmp	r3, #19
 800f5f6:	f240 83b1 	bls.w	800fd5c <tcp_input+0x7d8>
 800f5fa:	7cbb      	ldrb	r3, [r7, #18]
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	891b      	ldrh	r3, [r3, #8]
 800f602:	429a      	cmp	r2, r3
 800f604:	f200 83aa 	bhi.w	800fd5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f608:	7cbb      	ldrb	r3, [r7, #18]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	3b14      	subs	r3, #20
 800f60e:	b29a      	uxth	r2, r3
 800f610:	4b81      	ldr	r3, [pc, #516]	; (800f818 <tcp_input+0x294>)
 800f612:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f614:	4b81      	ldr	r3, [pc, #516]	; (800f81c <tcp_input+0x298>)
 800f616:	2200      	movs	r2, #0
 800f618:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	895a      	ldrh	r2, [r3, #10]
 800f61e:	7cbb      	ldrb	r3, [r7, #18]
 800f620:	b29b      	uxth	r3, r3
 800f622:	429a      	cmp	r2, r3
 800f624:	d309      	bcc.n	800f63a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f626:	4b7c      	ldr	r3, [pc, #496]	; (800f818 <tcp_input+0x294>)
 800f628:	881a      	ldrh	r2, [r3, #0]
 800f62a:	4b7d      	ldr	r3, [pc, #500]	; (800f820 <tcp_input+0x29c>)
 800f62c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f62e:	7cbb      	ldrb	r3, [r7, #18]
 800f630:	4619      	mov	r1, r3
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7fd fdcc 	bl	800d1d0 <pbuf_remove_header>
 800f638:	e04e      	b.n	800f6d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d105      	bne.n	800f64e <tcp_input+0xca>
 800f642:	4b70      	ldr	r3, [pc, #448]	; (800f804 <tcp_input+0x280>)
 800f644:	22c2      	movs	r2, #194	; 0xc2
 800f646:	4977      	ldr	r1, [pc, #476]	; (800f824 <tcp_input+0x2a0>)
 800f648:	4870      	ldr	r0, [pc, #448]	; (800f80c <tcp_input+0x288>)
 800f64a:	f007 f9b9 	bl	80169c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f64e:	2114      	movs	r1, #20
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7fd fdbd 	bl	800d1d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	895a      	ldrh	r2, [r3, #10]
 800f65a:	4b71      	ldr	r3, [pc, #452]	; (800f820 <tcp_input+0x29c>)
 800f65c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f65e:	4b6e      	ldr	r3, [pc, #440]	; (800f818 <tcp_input+0x294>)
 800f660:	881a      	ldrh	r2, [r3, #0]
 800f662:	4b6f      	ldr	r3, [pc, #444]	; (800f820 <tcp_input+0x29c>)
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f66a:	4b6d      	ldr	r3, [pc, #436]	; (800f820 <tcp_input+0x29c>)
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	4619      	mov	r1, r3
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7fd fdad 	bl	800d1d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	895b      	ldrh	r3, [r3, #10]
 800f67c:	8a3a      	ldrh	r2, [r7, #16]
 800f67e:	429a      	cmp	r2, r3
 800f680:	f200 836e 	bhi.w	800fd60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	4a64      	ldr	r2, [pc, #400]	; (800f81c <tcp_input+0x298>)
 800f68c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	8a3a      	ldrh	r2, [r7, #16]
 800f694:	4611      	mov	r1, r2
 800f696:	4618      	mov	r0, r3
 800f698:	f7fd fd9a 	bl	800d1d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	891a      	ldrh	r2, [r3, #8]
 800f6a0:	8a3b      	ldrh	r3, [r7, #16]
 800f6a2:	1ad3      	subs	r3, r2, r3
 800f6a4:	b29a      	uxth	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	895b      	ldrh	r3, [r3, #10]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d005      	beq.n	800f6be <tcp_input+0x13a>
 800f6b2:	4b54      	ldr	r3, [pc, #336]	; (800f804 <tcp_input+0x280>)
 800f6b4:	22df      	movs	r2, #223	; 0xdf
 800f6b6:	495c      	ldr	r1, [pc, #368]	; (800f828 <tcp_input+0x2a4>)
 800f6b8:	4854      	ldr	r0, [pc, #336]	; (800f80c <tcp_input+0x288>)
 800f6ba:	f007 f981 	bl	80169c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	891a      	ldrh	r2, [r3, #8]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	891b      	ldrh	r3, [r3, #8]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d005      	beq.n	800f6d8 <tcp_input+0x154>
 800f6cc:	4b4d      	ldr	r3, [pc, #308]	; (800f804 <tcp_input+0x280>)
 800f6ce:	22e0      	movs	r2, #224	; 0xe0
 800f6d0:	4956      	ldr	r1, [pc, #344]	; (800f82c <tcp_input+0x2a8>)
 800f6d2:	484e      	ldr	r0, [pc, #312]	; (800f80c <tcp_input+0x288>)
 800f6d4:	f007 f974 	bl	80169c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f6d8:	4b4d      	ldr	r3, [pc, #308]	; (800f810 <tcp_input+0x28c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	4a4b      	ldr	r2, [pc, #300]	; (800f810 <tcp_input+0x28c>)
 800f6e2:	6814      	ldr	r4, [r2, #0]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fc f8f3 	bl	800b8d0 <lwip_htons>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f6ee:	4b48      	ldr	r3, [pc, #288]	; (800f810 <tcp_input+0x28c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	885b      	ldrh	r3, [r3, #2]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4a46      	ldr	r2, [pc, #280]	; (800f810 <tcp_input+0x28c>)
 800f6f8:	6814      	ldr	r4, [r2, #0]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fc f8e8 	bl	800b8d0 <lwip_htons>
 800f700:	4603      	mov	r3, r0
 800f702:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f704:	4b42      	ldr	r3, [pc, #264]	; (800f810 <tcp_input+0x28c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	4a41      	ldr	r2, [pc, #260]	; (800f810 <tcp_input+0x28c>)
 800f70c:	6814      	ldr	r4, [r2, #0]
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fc f8f3 	bl	800b8fa <lwip_htonl>
 800f714:	4603      	mov	r3, r0
 800f716:	6063      	str	r3, [r4, #4]
 800f718:	6863      	ldr	r3, [r4, #4]
 800f71a:	4a45      	ldr	r2, [pc, #276]	; (800f830 <tcp_input+0x2ac>)
 800f71c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f71e:	4b3c      	ldr	r3, [pc, #240]	; (800f810 <tcp_input+0x28c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	4a3a      	ldr	r2, [pc, #232]	; (800f810 <tcp_input+0x28c>)
 800f726:	6814      	ldr	r4, [r2, #0]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fc f8e6 	bl	800b8fa <lwip_htonl>
 800f72e:	4603      	mov	r3, r0
 800f730:	60a3      	str	r3, [r4, #8]
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	4a3f      	ldr	r2, [pc, #252]	; (800f834 <tcp_input+0x2b0>)
 800f736:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f738:	4b35      	ldr	r3, [pc, #212]	; (800f810 <tcp_input+0x28c>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	89db      	ldrh	r3, [r3, #14]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	4a33      	ldr	r2, [pc, #204]	; (800f810 <tcp_input+0x28c>)
 800f742:	6814      	ldr	r4, [r2, #0]
 800f744:	4618      	mov	r0, r3
 800f746:	f7fc f8c3 	bl	800b8d0 <lwip_htons>
 800f74a:	4603      	mov	r3, r0
 800f74c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f74e:	4b30      	ldr	r3, [pc, #192]	; (800f810 <tcp_input+0x28c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	899b      	ldrh	r3, [r3, #12]
 800f754:	b29b      	uxth	r3, r3
 800f756:	4618      	mov	r0, r3
 800f758:	f7fc f8ba 	bl	800b8d0 <lwip_htons>
 800f75c:	4603      	mov	r3, r0
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f764:	b2da      	uxtb	r2, r3
 800f766:	4b34      	ldr	r3, [pc, #208]	; (800f838 <tcp_input+0x2b4>)
 800f768:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	891a      	ldrh	r2, [r3, #8]
 800f76e:	4b33      	ldr	r3, [pc, #204]	; (800f83c <tcp_input+0x2b8>)
 800f770:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f772:	4b31      	ldr	r3, [pc, #196]	; (800f838 <tcp_input+0x2b4>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	f003 0303 	and.w	r3, r3, #3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00c      	beq.n	800f798 <tcp_input+0x214>
    tcplen++;
 800f77e:	4b2f      	ldr	r3, [pc, #188]	; (800f83c <tcp_input+0x2b8>)
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	3301      	adds	r3, #1
 800f784:	b29a      	uxth	r2, r3
 800f786:	4b2d      	ldr	r3, [pc, #180]	; (800f83c <tcp_input+0x2b8>)
 800f788:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	891a      	ldrh	r2, [r3, #8]
 800f78e:	4b2b      	ldr	r3, [pc, #172]	; (800f83c <tcp_input+0x2b8>)
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	429a      	cmp	r2, r3
 800f794:	f200 82e6 	bhi.w	800fd64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f798:	2300      	movs	r3, #0
 800f79a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f79c:	4b28      	ldr	r3, [pc, #160]	; (800f840 <tcp_input+0x2bc>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	61fb      	str	r3, [r7, #28]
 800f7a2:	e09d      	b.n	800f8e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	7d1b      	ldrb	r3, [r3, #20]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d105      	bne.n	800f7b8 <tcp_input+0x234>
 800f7ac:	4b15      	ldr	r3, [pc, #84]	; (800f804 <tcp_input+0x280>)
 800f7ae:	22fb      	movs	r2, #251	; 0xfb
 800f7b0:	4924      	ldr	r1, [pc, #144]	; (800f844 <tcp_input+0x2c0>)
 800f7b2:	4816      	ldr	r0, [pc, #88]	; (800f80c <tcp_input+0x288>)
 800f7b4:	f007 f904 	bl	80169c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	7d1b      	ldrb	r3, [r3, #20]
 800f7bc:	2b0a      	cmp	r3, #10
 800f7be:	d105      	bne.n	800f7cc <tcp_input+0x248>
 800f7c0:	4b10      	ldr	r3, [pc, #64]	; (800f804 <tcp_input+0x280>)
 800f7c2:	22fc      	movs	r2, #252	; 0xfc
 800f7c4:	4920      	ldr	r1, [pc, #128]	; (800f848 <tcp_input+0x2c4>)
 800f7c6:	4811      	ldr	r0, [pc, #68]	; (800f80c <tcp_input+0x288>)
 800f7c8:	f007 f8fa 	bl	80169c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	7d1b      	ldrb	r3, [r3, #20]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d105      	bne.n	800f7e0 <tcp_input+0x25c>
 800f7d4:	4b0b      	ldr	r3, [pc, #44]	; (800f804 <tcp_input+0x280>)
 800f7d6:	22fd      	movs	r2, #253	; 0xfd
 800f7d8:	491c      	ldr	r1, [pc, #112]	; (800f84c <tcp_input+0x2c8>)
 800f7da:	480c      	ldr	r0, [pc, #48]	; (800f80c <tcp_input+0x288>)
 800f7dc:	f007 f8f0 	bl	80169c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	7a1b      	ldrb	r3, [r3, #8]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d033      	beq.n	800f850 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	7a1a      	ldrb	r2, [r3, #8]
 800f7ec:	4b09      	ldr	r3, [pc, #36]	; (800f814 <tcp_input+0x290>)
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d029      	beq.n	800f850 <tcp_input+0x2cc>
      prev = pcb;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	61bb      	str	r3, [r7, #24]
      continue;
 800f800:	e06b      	b.n	800f8da <tcp_input+0x356>
 800f802:	bf00      	nop
 800f804:	0801b784 	.word	0x0801b784
 800f808:	0801b7b8 	.word	0x0801b7b8
 800f80c:	0801b7d0 	.word	0x0801b7d0
 800f810:	20011b70 	.word	0x20011b70
 800f814:	20009abc 	.word	0x20009abc
 800f818:	20011b74 	.word	0x20011b74
 800f81c:	20011b78 	.word	0x20011b78
 800f820:	20011b76 	.word	0x20011b76
 800f824:	0801b7f8 	.word	0x0801b7f8
 800f828:	0801b808 	.word	0x0801b808
 800f82c:	0801b814 	.word	0x0801b814
 800f830:	20011b80 	.word	0x20011b80
 800f834:	20011b84 	.word	0x20011b84
 800f838:	20011b8c 	.word	0x20011b8c
 800f83c:	20011b8a 	.word	0x20011b8a
 800f840:	20011b54 	.word	0x20011b54
 800f844:	0801b834 	.word	0x0801b834
 800f848:	0801b85c 	.word	0x0801b85c
 800f84c:	0801b888 	.word	0x0801b888
    }

    if (pcb->remote_port == tcphdr->src &&
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	8b1a      	ldrh	r2, [r3, #24]
 800f854:	4b72      	ldr	r3, [pc, #456]	; (800fa20 <tcp_input+0x49c>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	881b      	ldrh	r3, [r3, #0]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d13a      	bne.n	800f8d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	8ada      	ldrh	r2, [r3, #22]
 800f864:	4b6e      	ldr	r3, [pc, #440]	; (800fa20 <tcp_input+0x49c>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	885b      	ldrh	r3, [r3, #2]
 800f86a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d132      	bne.n	800f8d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	685a      	ldr	r2, [r3, #4]
 800f874:	4b6b      	ldr	r3, [pc, #428]	; (800fa24 <tcp_input+0x4a0>)
 800f876:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f878:	429a      	cmp	r2, r3
 800f87a:	d12c      	bne.n	800f8d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	4b68      	ldr	r3, [pc, #416]	; (800fa24 <tcp_input+0x4a0>)
 800f882:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f884:	429a      	cmp	r2, r3
 800f886:	d126      	bne.n	800f8d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	69fa      	ldr	r2, [r7, #28]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d106      	bne.n	800f8a0 <tcp_input+0x31c>
 800f892:	4b65      	ldr	r3, [pc, #404]	; (800fa28 <tcp_input+0x4a4>)
 800f894:	f240 120d 	movw	r2, #269	; 0x10d
 800f898:	4964      	ldr	r1, [pc, #400]	; (800fa2c <tcp_input+0x4a8>)
 800f89a:	4865      	ldr	r0, [pc, #404]	; (800fa30 <tcp_input+0x4ac>)
 800f89c:	f007 f890 	bl	80169c0 <iprintf>
      if (prev != NULL) {
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00a      	beq.n	800f8bc <tcp_input+0x338>
        prev->next = pcb->next;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	68da      	ldr	r2, [r3, #12]
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f8ae:	4b61      	ldr	r3, [pc, #388]	; (800fa34 <tcp_input+0x4b0>)
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f8b6:	4a5f      	ldr	r2, [pc, #380]	; (800fa34 <tcp_input+0x4b0>)
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	69fa      	ldr	r2, [r7, #28]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d111      	bne.n	800f8ea <tcp_input+0x366>
 800f8c6:	4b58      	ldr	r3, [pc, #352]	; (800fa28 <tcp_input+0x4a4>)
 800f8c8:	f240 1215 	movw	r2, #277	; 0x115
 800f8cc:	495a      	ldr	r1, [pc, #360]	; (800fa38 <tcp_input+0x4b4>)
 800f8ce:	4858      	ldr	r0, [pc, #352]	; (800fa30 <tcp_input+0x4ac>)
 800f8d0:	f007 f876 	bl	80169c0 <iprintf>
      break;
 800f8d4:	e009      	b.n	800f8ea <tcp_input+0x366>
    }
    prev = pcb;
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	61fb      	str	r3, [r7, #28]
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f47f af5e 	bne.w	800f7a4 <tcp_input+0x220>
 800f8e8:	e000      	b.n	800f8ec <tcp_input+0x368>
      break;
 800f8ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f040 80aa 	bne.w	800fa48 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8f4:	4b51      	ldr	r3, [pc, #324]	; (800fa3c <tcp_input+0x4b8>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	61fb      	str	r3, [r7, #28]
 800f8fa:	e03f      	b.n	800f97c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	7d1b      	ldrb	r3, [r3, #20]
 800f900:	2b0a      	cmp	r3, #10
 800f902:	d006      	beq.n	800f912 <tcp_input+0x38e>
 800f904:	4b48      	ldr	r3, [pc, #288]	; (800fa28 <tcp_input+0x4a4>)
 800f906:	f240 121f 	movw	r2, #287	; 0x11f
 800f90a:	494d      	ldr	r1, [pc, #308]	; (800fa40 <tcp_input+0x4bc>)
 800f90c:	4848      	ldr	r0, [pc, #288]	; (800fa30 <tcp_input+0x4ac>)
 800f90e:	f007 f857 	bl	80169c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	7a1b      	ldrb	r3, [r3, #8]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d009      	beq.n	800f92e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	7a1a      	ldrb	r2, [r3, #8]
 800f91e:	4b41      	ldr	r3, [pc, #260]	; (800fa24 <tcp_input+0x4a0>)
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f926:	3301      	adds	r3, #1
 800f928:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d122      	bne.n	800f974 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	8b1a      	ldrh	r2, [r3, #24]
 800f932:	4b3b      	ldr	r3, [pc, #236]	; (800fa20 <tcp_input+0x49c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d11b      	bne.n	800f976 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	8ada      	ldrh	r2, [r3, #22]
 800f942:	4b37      	ldr	r3, [pc, #220]	; (800fa20 <tcp_input+0x49c>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	885b      	ldrh	r3, [r3, #2]
 800f948:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d113      	bne.n	800f976 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	685a      	ldr	r2, [r3, #4]
 800f952:	4b34      	ldr	r3, [pc, #208]	; (800fa24 <tcp_input+0x4a0>)
 800f954:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f956:	429a      	cmp	r2, r3
 800f958:	d10d      	bne.n	800f976 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	4b31      	ldr	r3, [pc, #196]	; (800fa24 <tcp_input+0x4a0>)
 800f960:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f962:	429a      	cmp	r2, r3
 800f964:	d107      	bne.n	800f976 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f966:	69f8      	ldr	r0, [r7, #28]
 800f968:	f000 fb56 	bl	8010018 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7fd fcb5 	bl	800d2dc <pbuf_free>
        return;
 800f972:	e1fd      	b.n	800fd70 <tcp_input+0x7ec>
        continue;
 800f974:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	61fb      	str	r3, [r7, #28]
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1bc      	bne.n	800f8fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f982:	2300      	movs	r3, #0
 800f984:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f986:	4b2f      	ldr	r3, [pc, #188]	; (800fa44 <tcp_input+0x4c0>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	617b      	str	r3, [r7, #20]
 800f98c:	e02a      	b.n	800f9e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	7a1b      	ldrb	r3, [r3, #8]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00c      	beq.n	800f9b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	7a1a      	ldrb	r2, [r3, #8]
 800f99a:	4b22      	ldr	r3, [pc, #136]	; (800fa24 <tcp_input+0x4a0>)
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d002      	beq.n	800f9b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	61bb      	str	r3, [r7, #24]
        continue;
 800f9ae:	e016      	b.n	800f9de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	8ada      	ldrh	r2, [r3, #22]
 800f9b4:	4b1a      	ldr	r3, [pc, #104]	; (800fa20 <tcp_input+0x49c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	885b      	ldrh	r3, [r3, #2]
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d10c      	bne.n	800f9da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	4b17      	ldr	r3, [pc, #92]	; (800fa24 <tcp_input+0x4a0>)
 800f9c6:	695b      	ldr	r3, [r3, #20]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d00f      	beq.n	800f9ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00d      	beq.n	800f9ee <tcp_input+0x46a>
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d009      	beq.n	800f9ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	617b      	str	r3, [r7, #20]
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1d1      	bne.n	800f98e <tcp_input+0x40a>
 800f9ea:	e000      	b.n	800f9ee <tcp_input+0x46a>
            break;
 800f9ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d029      	beq.n	800fa48 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f9f4:	69bb      	ldr	r3, [r7, #24]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	68da      	ldr	r2, [r3, #12]
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fa02:	4b10      	ldr	r3, [pc, #64]	; (800fa44 <tcp_input+0x4c0>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fa0a:	4a0e      	ldr	r2, [pc, #56]	; (800fa44 <tcp_input+0x4c0>)
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fa10:	6978      	ldr	r0, [r7, #20]
 800fa12:	f000 fa03 	bl	800fe1c <tcp_listen_input>
      }
      pbuf_free(p);
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f7fd fc60 	bl	800d2dc <pbuf_free>
      return;
 800fa1c:	e1a8      	b.n	800fd70 <tcp_input+0x7ec>
 800fa1e:	bf00      	nop
 800fa20:	20011b70 	.word	0x20011b70
 800fa24:	20009abc 	.word	0x20009abc
 800fa28:	0801b784 	.word	0x0801b784
 800fa2c:	0801b8b0 	.word	0x0801b8b0
 800fa30:	0801b7d0 	.word	0x0801b7d0
 800fa34:	20011b54 	.word	0x20011b54
 800fa38:	0801b8dc 	.word	0x0801b8dc
 800fa3c:	20011b58 	.word	0x20011b58
 800fa40:	0801b908 	.word	0x0801b908
 800fa44:	20011b50 	.word	0x20011b50
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f000 8158 	beq.w	800fd00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa50:	4b95      	ldr	r3, [pc, #596]	; (800fca8 <tcp_input+0x724>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	891a      	ldrh	r2, [r3, #8]
 800fa5a:	4b93      	ldr	r3, [pc, #588]	; (800fca8 <tcp_input+0x724>)
 800fa5c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fa5e:	4a92      	ldr	r2, [pc, #584]	; (800fca8 <tcp_input+0x724>)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa64:	4b91      	ldr	r3, [pc, #580]	; (800fcac <tcp_input+0x728>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a8f      	ldr	r2, [pc, #572]	; (800fca8 <tcp_input+0x724>)
 800fa6a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa6c:	4b90      	ldr	r3, [pc, #576]	; (800fcb0 <tcp_input+0x72c>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa72:	4b90      	ldr	r3, [pc, #576]	; (800fcb4 <tcp_input+0x730>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa78:	4b8f      	ldr	r3, [pc, #572]	; (800fcb8 <tcp_input+0x734>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa7e:	4b8f      	ldr	r3, [pc, #572]	; (800fcbc <tcp_input+0x738>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	f003 0308 	and.w	r3, r3, #8
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d006      	beq.n	800fa98 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	7b5b      	ldrb	r3, [r3, #13]
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d017      	beq.n	800fad0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800faa0:	69f8      	ldr	r0, [r7, #28]
 800faa2:	f7ff f85b 	bl	800eb5c <tcp_process_refused_data>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f113 0f0d 	cmn.w	r3, #13
 800faac:	d007      	beq.n	800fabe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00c      	beq.n	800fad0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fab6:	4b82      	ldr	r3, [pc, #520]	; (800fcc0 <tcp_input+0x73c>)
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d008      	beq.n	800fad0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f040 80e3 	bne.w	800fc8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fac8:	69f8      	ldr	r0, [r7, #28]
 800faca:	f003 fe27 	bl	801371c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800face:	e0de      	b.n	800fc8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fad0:	4a7c      	ldr	r2, [pc, #496]	; (800fcc4 <tcp_input+0x740>)
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fad6:	69f8      	ldr	r0, [r7, #28]
 800fad8:	f000 fb18 	bl	801010c <tcp_process>
 800fadc:	4603      	mov	r3, r0
 800fade:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fae0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fae4:	f113 0f0d 	cmn.w	r3, #13
 800fae8:	f000 80d3 	beq.w	800fc92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800faec:	4b71      	ldr	r3, [pc, #452]	; (800fcb4 <tcp_input+0x730>)
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	f003 0308 	and.w	r3, r3, #8
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d015      	beq.n	800fb24 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d008      	beq.n	800fb14 <tcp_input+0x590>
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb08:	69fa      	ldr	r2, [r7, #28]
 800fb0a:	6912      	ldr	r2, [r2, #16]
 800fb0c:	f06f 010d 	mvn.w	r1, #13
 800fb10:	4610      	mov	r0, r2
 800fb12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb14:	69f9      	ldr	r1, [r7, #28]
 800fb16:	486c      	ldr	r0, [pc, #432]	; (800fcc8 <tcp_input+0x744>)
 800fb18:	f7ff fbbc 	bl	800f294 <tcp_pcb_remove>
        tcp_free(pcb);
 800fb1c:	69f8      	ldr	r0, [r7, #28]
 800fb1e:	f7fd fe89 	bl	800d834 <tcp_free>
 800fb22:	e0da      	b.n	800fcda <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fb24:	2300      	movs	r3, #0
 800fb26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fb28:	4b63      	ldr	r3, [pc, #396]	; (800fcb8 <tcp_input+0x734>)
 800fb2a:	881b      	ldrh	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01d      	beq.n	800fb6c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fb30:	4b61      	ldr	r3, [pc, #388]	; (800fcb8 <tcp_input+0x734>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00a      	beq.n	800fb56 <tcp_input+0x5d2>
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb46:	69fa      	ldr	r2, [r7, #28]
 800fb48:	6910      	ldr	r0, [r2, #16]
 800fb4a:	89fa      	ldrh	r2, [r7, #14]
 800fb4c:	69f9      	ldr	r1, [r7, #28]
 800fb4e:	4798      	blx	r3
 800fb50:	4603      	mov	r3, r0
 800fb52:	74fb      	strb	r3, [r7, #19]
 800fb54:	e001      	b.n	800fb5a <tcp_input+0x5d6>
 800fb56:	2300      	movs	r3, #0
 800fb58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb5e:	f113 0f0d 	cmn.w	r3, #13
 800fb62:	f000 8098 	beq.w	800fc96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb66:	4b54      	ldr	r3, [pc, #336]	; (800fcb8 <tcp_input+0x734>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb6c:	69f8      	ldr	r0, [r7, #28]
 800fb6e:	f000 f915 	bl	800fd9c <tcp_input_delayed_close>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f040 8090 	bne.w	800fc9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb7a:	4b4d      	ldr	r3, [pc, #308]	; (800fcb0 <tcp_input+0x72c>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d041      	beq.n	800fc06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d006      	beq.n	800fb98 <tcp_input+0x614>
 800fb8a:	4b50      	ldr	r3, [pc, #320]	; (800fccc <tcp_input+0x748>)
 800fb8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb90:	494f      	ldr	r1, [pc, #316]	; (800fcd0 <tcp_input+0x74c>)
 800fb92:	4850      	ldr	r0, [pc, #320]	; (800fcd4 <tcp_input+0x750>)
 800fb94:	f006 ff14 	bl	80169c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	8b5b      	ldrh	r3, [r3, #26]
 800fb9c:	f003 0310 	and.w	r3, r3, #16
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d008      	beq.n	800fbb6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fba4:	4b42      	ldr	r3, [pc, #264]	; (800fcb0 <tcp_input+0x72c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fd fb97 	bl	800d2dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fbae:	69f8      	ldr	r0, [r7, #28]
 800fbb0:	f7fe f984 	bl	800debc <tcp_abort>
            goto aborted;
 800fbb4:	e091      	b.n	800fcda <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00c      	beq.n	800fbda <tcp_input+0x656>
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	6918      	ldr	r0, [r3, #16]
 800fbca:	4b39      	ldr	r3, [pc, #228]	; (800fcb0 <tcp_input+0x72c>)
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	2300      	movs	r3, #0
 800fbd0:	69f9      	ldr	r1, [r7, #28]
 800fbd2:	47a0      	blx	r4
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	74fb      	strb	r3, [r7, #19]
 800fbd8:	e008      	b.n	800fbec <tcp_input+0x668>
 800fbda:	4b35      	ldr	r3, [pc, #212]	; (800fcb0 <tcp_input+0x72c>)
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	2300      	movs	r3, #0
 800fbe0:	69f9      	ldr	r1, [r7, #28]
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	f7ff f890 	bl	800ed08 <tcp_recv_null>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fbec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbf0:	f113 0f0d 	cmn.w	r3, #13
 800fbf4:	d053      	beq.n	800fc9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fbf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d003      	beq.n	800fc06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fbfe:	4b2c      	ldr	r3, [pc, #176]	; (800fcb0 <tcp_input+0x72c>)
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fc06:	4b2b      	ldr	r3, [pc, #172]	; (800fcb4 <tcp_input+0x730>)
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	f003 0320 	and.w	r3, r3, #32
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d030      	beq.n	800fc74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d009      	beq.n	800fc2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc1e:	7b5a      	ldrb	r2, [r3, #13]
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc24:	f042 0220 	orr.w	r2, r2, #32
 800fc28:	b2d2      	uxtb	r2, r2
 800fc2a:	735a      	strb	r2, [r3, #13]
 800fc2c:	e022      	b.n	800fc74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fc36:	d005      	beq.n	800fc44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00b      	beq.n	800fc66 <tcp_input+0x6e2>
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	6918      	ldr	r0, [r3, #16]
 800fc58:	2300      	movs	r3, #0
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	69f9      	ldr	r1, [r7, #28]
 800fc5e:	47a0      	blx	r4
 800fc60:	4603      	mov	r3, r0
 800fc62:	74fb      	strb	r3, [r7, #19]
 800fc64:	e001      	b.n	800fc6a <tcp_input+0x6e6>
 800fc66:	2300      	movs	r3, #0
 800fc68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc6e:	f113 0f0d 	cmn.w	r3, #13
 800fc72:	d016      	beq.n	800fca2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc74:	4b13      	ldr	r3, [pc, #76]	; (800fcc4 <tcp_input+0x740>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc7a:	69f8      	ldr	r0, [r7, #28]
 800fc7c:	f000 f88e 	bl	800fd9c <tcp_input_delayed_close>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d128      	bne.n	800fcd8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc86:	69f8      	ldr	r0, [r7, #28]
 800fc88:	f002 ff20 	bl	8012acc <tcp_output>
 800fc8c:	e025      	b.n	800fcda <tcp_input+0x756>
        goto aborted;
 800fc8e:	bf00      	nop
 800fc90:	e023      	b.n	800fcda <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc92:	bf00      	nop
 800fc94:	e021      	b.n	800fcda <tcp_input+0x756>
              goto aborted;
 800fc96:	bf00      	nop
 800fc98:	e01f      	b.n	800fcda <tcp_input+0x756>
          goto aborted;
 800fc9a:	bf00      	nop
 800fc9c:	e01d      	b.n	800fcda <tcp_input+0x756>
            goto aborted;
 800fc9e:	bf00      	nop
 800fca0:	e01b      	b.n	800fcda <tcp_input+0x756>
              goto aborted;
 800fca2:	bf00      	nop
 800fca4:	e019      	b.n	800fcda <tcp_input+0x756>
 800fca6:	bf00      	nop
 800fca8:	20011b60 	.word	0x20011b60
 800fcac:	20011b70 	.word	0x20011b70
 800fcb0:	20011b90 	.word	0x20011b90
 800fcb4:	20011b8d 	.word	0x20011b8d
 800fcb8:	20011b88 	.word	0x20011b88
 800fcbc:	20011b8c 	.word	0x20011b8c
 800fcc0:	20011b8a 	.word	0x20011b8a
 800fcc4:	20011b94 	.word	0x20011b94
 800fcc8:	20011b54 	.word	0x20011b54
 800fccc:	0801b784 	.word	0x0801b784
 800fcd0:	0801b938 	.word	0x0801b938
 800fcd4:	0801b7d0 	.word	0x0801b7d0
          goto aborted;
 800fcd8:	bf00      	nop
    tcp_input_pcb = NULL;
 800fcda:	4b27      	ldr	r3, [pc, #156]	; (800fd78 <tcp_input+0x7f4>)
 800fcdc:	2200      	movs	r2, #0
 800fcde:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fce0:	4b26      	ldr	r3, [pc, #152]	; (800fd7c <tcp_input+0x7f8>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fce6:	4b26      	ldr	r3, [pc, #152]	; (800fd80 <tcp_input+0x7fc>)
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d03f      	beq.n	800fd6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fcee:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <tcp_input+0x7fc>)
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fd faf2 	bl	800d2dc <pbuf_free>
      inseg.p = NULL;
 800fcf8:	4b21      	ldr	r3, [pc, #132]	; (800fd80 <tcp_input+0x7fc>)
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fcfe:	e036      	b.n	800fd6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd00:	4b20      	ldr	r3, [pc, #128]	; (800fd84 <tcp_input+0x800>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	899b      	ldrh	r3, [r3, #12]
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fb fde1 	bl	800b8d0 <lwip_htons>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	f003 0304 	and.w	r3, r3, #4
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d118      	bne.n	800fd4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd1a:	4b1b      	ldr	r3, [pc, #108]	; (800fd88 <tcp_input+0x804>)
 800fd1c:	6819      	ldr	r1, [r3, #0]
 800fd1e:	4b1b      	ldr	r3, [pc, #108]	; (800fd8c <tcp_input+0x808>)
 800fd20:	881b      	ldrh	r3, [r3, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	4b1a      	ldr	r3, [pc, #104]	; (800fd90 <tcp_input+0x80c>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd2a:	4b16      	ldr	r3, [pc, #88]	; (800fd84 <tcp_input+0x800>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd2e:	885b      	ldrh	r3, [r3, #2]
 800fd30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd32:	4a14      	ldr	r2, [pc, #80]	; (800fd84 <tcp_input+0x800>)
 800fd34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd36:	8812      	ldrh	r2, [r2, #0]
 800fd38:	b292      	uxth	r2, r2
 800fd3a:	9202      	str	r2, [sp, #8]
 800fd3c:	9301      	str	r3, [sp, #4]
 800fd3e:	4b15      	ldr	r3, [pc, #84]	; (800fd94 <tcp_input+0x810>)
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	4b15      	ldr	r3, [pc, #84]	; (800fd98 <tcp_input+0x814>)
 800fd44:	4602      	mov	r2, r0
 800fd46:	2000      	movs	r0, #0
 800fd48:	f003 fc96 	bl	8013678 <tcp_rst>
    pbuf_free(p);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f7fd fac5 	bl	800d2dc <pbuf_free>
  return;
 800fd52:	e00c      	b.n	800fd6e <tcp_input+0x7ea>
    goto dropped;
 800fd54:	bf00      	nop
 800fd56:	e006      	b.n	800fd66 <tcp_input+0x7e2>
    goto dropped;
 800fd58:	bf00      	nop
 800fd5a:	e004      	b.n	800fd66 <tcp_input+0x7e2>
    goto dropped;
 800fd5c:	bf00      	nop
 800fd5e:	e002      	b.n	800fd66 <tcp_input+0x7e2>
      goto dropped;
 800fd60:	bf00      	nop
 800fd62:	e000      	b.n	800fd66 <tcp_input+0x7e2>
      goto dropped;
 800fd64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7fd fab8 	bl	800d2dc <pbuf_free>
 800fd6c:	e000      	b.n	800fd70 <tcp_input+0x7ec>
  return;
 800fd6e:	bf00      	nop
}
 800fd70:	3724      	adds	r7, #36	; 0x24
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd90      	pop	{r4, r7, pc}
 800fd76:	bf00      	nop
 800fd78:	20011b94 	.word	0x20011b94
 800fd7c:	20011b90 	.word	0x20011b90
 800fd80:	20011b60 	.word	0x20011b60
 800fd84:	20011b70 	.word	0x20011b70
 800fd88:	20011b84 	.word	0x20011b84
 800fd8c:	20011b8a 	.word	0x20011b8a
 800fd90:	20011b80 	.word	0x20011b80
 800fd94:	20009acc 	.word	0x20009acc
 800fd98:	20009ad0 	.word	0x20009ad0

0800fd9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d106      	bne.n	800fdb8 <tcp_input_delayed_close+0x1c>
 800fdaa:	4b17      	ldr	r3, [pc, #92]	; (800fe08 <tcp_input_delayed_close+0x6c>)
 800fdac:	f240 225a 	movw	r2, #602	; 0x25a
 800fdb0:	4916      	ldr	r1, [pc, #88]	; (800fe0c <tcp_input_delayed_close+0x70>)
 800fdb2:	4817      	ldr	r0, [pc, #92]	; (800fe10 <tcp_input_delayed_close+0x74>)
 800fdb4:	f006 fe04 	bl	80169c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fdb8:	4b16      	ldr	r3, [pc, #88]	; (800fe14 <tcp_input_delayed_close+0x78>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	f003 0310 	and.w	r3, r3, #16
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d01c      	beq.n	800fdfe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	8b5b      	ldrh	r3, [r3, #26]
 800fdc8:	f003 0310 	and.w	r3, r3, #16
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d10d      	bne.n	800fdec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d008      	beq.n	800fdec <tcp_input_delayed_close+0x50>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	6912      	ldr	r2, [r2, #16]
 800fde4:	f06f 010e 	mvn.w	r1, #14
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fdec:	6879      	ldr	r1, [r7, #4]
 800fdee:	480a      	ldr	r0, [pc, #40]	; (800fe18 <tcp_input_delayed_close+0x7c>)
 800fdf0:	f7ff fa50 	bl	800f294 <tcp_pcb_remove>
    tcp_free(pcb);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7fd fd1d 	bl	800d834 <tcp_free>
    return 1;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e000      	b.n	800fe00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0801b784 	.word	0x0801b784
 800fe0c:	0801b954 	.word	0x0801b954
 800fe10:	0801b7d0 	.word	0x0801b7d0
 800fe14:	20011b8d 	.word	0x20011b8d
 800fe18:	20011b54 	.word	0x20011b54

0800fe1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fe1c:	b590      	push	{r4, r7, lr}
 800fe1e:	b08b      	sub	sp, #44	; 0x2c
 800fe20:	af04      	add	r7, sp, #16
 800fe22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fe24:	4b6f      	ldr	r3, [pc, #444]	; (800ffe4 <tcp_listen_input+0x1c8>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	f003 0304 	and.w	r3, r3, #4
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f040 80d2 	bne.w	800ffd6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d106      	bne.n	800fe46 <tcp_listen_input+0x2a>
 800fe38:	4b6b      	ldr	r3, [pc, #428]	; (800ffe8 <tcp_listen_input+0x1cc>)
 800fe3a:	f240 2281 	movw	r2, #641	; 0x281
 800fe3e:	496b      	ldr	r1, [pc, #428]	; (800ffec <tcp_listen_input+0x1d0>)
 800fe40:	486b      	ldr	r0, [pc, #428]	; (800fff0 <tcp_listen_input+0x1d4>)
 800fe42:	f006 fdbd 	bl	80169c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fe46:	4b67      	ldr	r3, [pc, #412]	; (800ffe4 <tcp_listen_input+0x1c8>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 0310 	and.w	r3, r3, #16
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d019      	beq.n	800fe86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe52:	4b68      	ldr	r3, [pc, #416]	; (800fff4 <tcp_listen_input+0x1d8>)
 800fe54:	6819      	ldr	r1, [r3, #0]
 800fe56:	4b68      	ldr	r3, [pc, #416]	; (800fff8 <tcp_listen_input+0x1dc>)
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	4b67      	ldr	r3, [pc, #412]	; (800fffc <tcp_listen_input+0x1e0>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe62:	4b67      	ldr	r3, [pc, #412]	; (8010000 <tcp_listen_input+0x1e4>)
 800fe64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe66:	885b      	ldrh	r3, [r3, #2]
 800fe68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe6a:	4a65      	ldr	r2, [pc, #404]	; (8010000 <tcp_listen_input+0x1e4>)
 800fe6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe6e:	8812      	ldrh	r2, [r2, #0]
 800fe70:	b292      	uxth	r2, r2
 800fe72:	9202      	str	r2, [sp, #8]
 800fe74:	9301      	str	r3, [sp, #4]
 800fe76:	4b63      	ldr	r3, [pc, #396]	; (8010004 <tcp_listen_input+0x1e8>)
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	4b63      	ldr	r3, [pc, #396]	; (8010008 <tcp_listen_input+0x1ec>)
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f003 fbfa 	bl	8013678 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe84:	e0a9      	b.n	800ffda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe86:	4b57      	ldr	r3, [pc, #348]	; (800ffe4 <tcp_listen_input+0x1c8>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	f003 0302 	and.w	r3, r3, #2
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f000 80a3 	beq.w	800ffda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	7d5b      	ldrb	r3, [r3, #21]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7ff f859 	bl	800ef50 <tcp_alloc>
 800fe9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d111      	bne.n	800feca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	699b      	ldr	r3, [r3, #24]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00a      	beq.n	800fec4 <tcp_listen_input+0xa8>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	699b      	ldr	r3, [r3, #24]
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	6910      	ldr	r0, [r2, #16]
 800feb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feba:	2100      	movs	r1, #0
 800febc:	4798      	blx	r3
 800febe:	4603      	mov	r3, r0
 800fec0:	73bb      	strb	r3, [r7, #14]
      return;
 800fec2:	e08b      	b.n	800ffdc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fec4:	23f0      	movs	r3, #240	; 0xf0
 800fec6:	73bb      	strb	r3, [r7, #14]
      return;
 800fec8:	e088      	b.n	800ffdc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800feca:	4b50      	ldr	r3, [pc, #320]	; (801000c <tcp_listen_input+0x1f0>)
 800fecc:	695a      	ldr	r2, [r3, #20]
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fed2:	4b4e      	ldr	r3, [pc, #312]	; (801000c <tcp_listen_input+0x1f0>)
 800fed4:	691a      	ldr	r2, [r3, #16]
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	8ada      	ldrh	r2, [r3, #22]
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fee2:	4b47      	ldr	r3, [pc, #284]	; (8010000 <tcp_listen_input+0x1e4>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	881b      	ldrh	r3, [r3, #0]
 800fee8:	b29a      	uxth	r2, r3
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	2203      	movs	r2, #3
 800fef2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fef4:	4b41      	ldr	r3, [pc, #260]	; (800fffc <tcp_listen_input+0x1e0>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	1c5a      	adds	r2, r3, #1
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ff06:	6978      	ldr	r0, [r7, #20]
 800ff08:	f7ff fa58 	bl	800f3bc <tcp_next_iss>
 800ff0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	693a      	ldr	r2, [r7, #16]
 800ff12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	693a      	ldr	r2, [r7, #16]
 800ff18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	693a      	ldr	r2, [r7, #16]
 800ff1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	693a      	ldr	r2, [r7, #16]
 800ff24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ff26:	4b35      	ldr	r3, [pc, #212]	; (800fffc <tcp_listen_input+0x1e0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	1e5a      	subs	r2, r3, #1
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	691a      	ldr	r2, [r3, #16]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7a5b      	ldrb	r3, [r3, #9]
 800ff42:	f003 030c 	and.w	r3, r3, #12
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	7a1a      	ldrb	r2, [r3, #8]
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ff54:	4b2e      	ldr	r3, [pc, #184]	; (8010010 <tcp_listen_input+0x1f4>)
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	60da      	str	r2, [r3, #12]
 800ff5c:	4a2c      	ldr	r2, [pc, #176]	; (8010010 <tcp_listen_input+0x1f4>)
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	6013      	str	r3, [r2, #0]
 800ff62:	f003 fd4b 	bl	80139fc <tcp_timer_needed>
 800ff66:	4b2b      	ldr	r3, [pc, #172]	; (8010014 <tcp_listen_input+0x1f8>)
 800ff68:	2201      	movs	r2, #1
 800ff6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff6c:	6978      	ldr	r0, [r7, #20]
 800ff6e:	f001 fd8f 	bl	8011a90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff72:	4b23      	ldr	r3, [pc, #140]	; (8010000 <tcp_listen_input+0x1e4>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	89db      	ldrh	r3, [r3, #14]
 800ff78:	b29a      	uxth	r2, r3
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	3304      	adds	r3, #4
 800ff94:	4618      	mov	r0, r3
 800ff96:	f004 ff85 	bl	8014ea4 <ip4_route>
 800ff9a:	4601      	mov	r1, r0
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7ff fa30 	bl	800f408 <tcp_eff_send_mss_netif>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ffb0:	2112      	movs	r1, #18
 800ffb2:	6978      	ldr	r0, [r7, #20]
 800ffb4:	f002 fc9c 	bl	80128f0 <tcp_enqueue_flags>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ffbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d004      	beq.n	800ffce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	6978      	ldr	r0, [r7, #20]
 800ffc8:	f7fd feba 	bl	800dd40 <tcp_abandon>
      return;
 800ffcc:	e006      	b.n	800ffdc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ffce:	6978      	ldr	r0, [r7, #20]
 800ffd0:	f002 fd7c 	bl	8012acc <tcp_output>
  return;
 800ffd4:	e001      	b.n	800ffda <tcp_listen_input+0x1be>
    return;
 800ffd6:	bf00      	nop
 800ffd8:	e000      	b.n	800ffdc <tcp_listen_input+0x1c0>
  return;
 800ffda:	bf00      	nop
}
 800ffdc:	371c      	adds	r7, #28
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd90      	pop	{r4, r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	20011b8c 	.word	0x20011b8c
 800ffe8:	0801b784 	.word	0x0801b784
 800ffec:	0801b97c 	.word	0x0801b97c
 800fff0:	0801b7d0 	.word	0x0801b7d0
 800fff4:	20011b84 	.word	0x20011b84
 800fff8:	20011b8a 	.word	0x20011b8a
 800fffc:	20011b80 	.word	0x20011b80
 8010000:	20011b70 	.word	0x20011b70
 8010004:	20009acc 	.word	0x20009acc
 8010008:	20009ad0 	.word	0x20009ad0
 801000c:	20009abc 	.word	0x20009abc
 8010010:	20011b54 	.word	0x20011b54
 8010014:	20011b5c 	.word	0x20011b5c

08010018 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b086      	sub	sp, #24
 801001c:	af04      	add	r7, sp, #16
 801001e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010020:	4b2f      	ldr	r3, [pc, #188]	; (80100e0 <tcp_timewait_input+0xc8>)
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	f003 0304 	and.w	r3, r3, #4
 8010028:	2b00      	cmp	r3, #0
 801002a:	d153      	bne.n	80100d4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <tcp_timewait_input+0x28>
 8010032:	4b2c      	ldr	r3, [pc, #176]	; (80100e4 <tcp_timewait_input+0xcc>)
 8010034:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010038:	492b      	ldr	r1, [pc, #172]	; (80100e8 <tcp_timewait_input+0xd0>)
 801003a:	482c      	ldr	r0, [pc, #176]	; (80100ec <tcp_timewait_input+0xd4>)
 801003c:	f006 fcc0 	bl	80169c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010040:	4b27      	ldr	r3, [pc, #156]	; (80100e0 <tcp_timewait_input+0xc8>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	f003 0302 	and.w	r3, r3, #2
 8010048:	2b00      	cmp	r3, #0
 801004a:	d02a      	beq.n	80100a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801004c:	4b28      	ldr	r3, [pc, #160]	; (80100f0 <tcp_timewait_input+0xd8>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	2b00      	cmp	r3, #0
 8010058:	db2d      	blt.n	80100b6 <tcp_timewait_input+0x9e>
 801005a:	4b25      	ldr	r3, [pc, #148]	; (80100f0 <tcp_timewait_input+0xd8>)
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010062:	6879      	ldr	r1, [r7, #4]
 8010064:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010066:	440b      	add	r3, r1
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	dc23      	bgt.n	80100b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801006e:	4b21      	ldr	r3, [pc, #132]	; (80100f4 <tcp_timewait_input+0xdc>)
 8010070:	6819      	ldr	r1, [r3, #0]
 8010072:	4b21      	ldr	r3, [pc, #132]	; (80100f8 <tcp_timewait_input+0xe0>)
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	4b1d      	ldr	r3, [pc, #116]	; (80100f0 <tcp_timewait_input+0xd8>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801007e:	4b1f      	ldr	r3, [pc, #124]	; (80100fc <tcp_timewait_input+0xe4>)
 8010080:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010082:	885b      	ldrh	r3, [r3, #2]
 8010084:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010086:	4a1d      	ldr	r2, [pc, #116]	; (80100fc <tcp_timewait_input+0xe4>)
 8010088:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801008a:	8812      	ldrh	r2, [r2, #0]
 801008c:	b292      	uxth	r2, r2
 801008e:	9202      	str	r2, [sp, #8]
 8010090:	9301      	str	r3, [sp, #4]
 8010092:	4b1b      	ldr	r3, [pc, #108]	; (8010100 <tcp_timewait_input+0xe8>)
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	4b1b      	ldr	r3, [pc, #108]	; (8010104 <tcp_timewait_input+0xec>)
 8010098:	4602      	mov	r2, r0
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f003 faec 	bl	8013678 <tcp_rst>
      return;
 80100a0:	e01b      	b.n	80100da <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80100a2:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <tcp_timewait_input+0xc8>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	f003 0301 	and.w	r3, r3, #1
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d003      	beq.n	80100b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80100ae:	4b16      	ldr	r3, [pc, #88]	; (8010108 <tcp_timewait_input+0xf0>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80100b6:	4b10      	ldr	r3, [pc, #64]	; (80100f8 <tcp_timewait_input+0xe0>)
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00c      	beq.n	80100d8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	8b5b      	ldrh	r3, [r3, #26]
 80100c2:	f043 0302 	orr.w	r3, r3, #2
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f002 fcfd 	bl	8012acc <tcp_output>
  }
  return;
 80100d2:	e001      	b.n	80100d8 <tcp_timewait_input+0xc0>
    return;
 80100d4:	bf00      	nop
 80100d6:	e000      	b.n	80100da <tcp_timewait_input+0xc2>
  return;
 80100d8:	bf00      	nop
}
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	20011b8c 	.word	0x20011b8c
 80100e4:	0801b784 	.word	0x0801b784
 80100e8:	0801b99c 	.word	0x0801b99c
 80100ec:	0801b7d0 	.word	0x0801b7d0
 80100f0:	20011b80 	.word	0x20011b80
 80100f4:	20011b84 	.word	0x20011b84
 80100f8:	20011b8a 	.word	0x20011b8a
 80100fc:	20011b70 	.word	0x20011b70
 8010100:	20009acc 	.word	0x20009acc
 8010104:	20009ad0 	.word	0x20009ad0
 8010108:	20011b48 	.word	0x20011b48

0801010c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801010c:	b590      	push	{r4, r7, lr}
 801010e:	b08d      	sub	sp, #52	; 0x34
 8010110:	af04      	add	r7, sp, #16
 8010112:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010114:	2300      	movs	r3, #0
 8010116:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010118:	2300      	movs	r3, #0
 801011a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <tcp_process+0x24>
 8010122:	4b9d      	ldr	r3, [pc, #628]	; (8010398 <tcp_process+0x28c>)
 8010124:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010128:	499c      	ldr	r1, [pc, #624]	; (801039c <tcp_process+0x290>)
 801012a:	489d      	ldr	r0, [pc, #628]	; (80103a0 <tcp_process+0x294>)
 801012c:	f006 fc48 	bl	80169c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010130:	4b9c      	ldr	r3, [pc, #624]	; (80103a4 <tcp_process+0x298>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	f003 0304 	and.w	r3, r3, #4
 8010138:	2b00      	cmp	r3, #0
 801013a:	d04e      	beq.n	80101da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	7d1b      	ldrb	r3, [r3, #20]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d108      	bne.n	8010156 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010148:	4b97      	ldr	r3, [pc, #604]	; (80103a8 <tcp_process+0x29c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	429a      	cmp	r2, r3
 801014e:	d123      	bne.n	8010198 <tcp_process+0x8c>
        acceptable = 1;
 8010150:	2301      	movs	r3, #1
 8010152:	76fb      	strb	r3, [r7, #27]
 8010154:	e020      	b.n	8010198 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801015a:	4b94      	ldr	r3, [pc, #592]	; (80103ac <tcp_process+0x2a0>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	429a      	cmp	r2, r3
 8010160:	d102      	bne.n	8010168 <tcp_process+0x5c>
        acceptable = 1;
 8010162:	2301      	movs	r3, #1
 8010164:	76fb      	strb	r3, [r7, #27]
 8010166:	e017      	b.n	8010198 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010168:	4b90      	ldr	r3, [pc, #576]	; (80103ac <tcp_process+0x2a0>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	db10      	blt.n	8010198 <tcp_process+0x8c>
 8010176:	4b8d      	ldr	r3, [pc, #564]	; (80103ac <tcp_process+0x2a0>)
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010182:	440b      	add	r3, r1
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	dc06      	bgt.n	8010198 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	8b5b      	ldrh	r3, [r3, #26]
 801018e:	f043 0302 	orr.w	r3, r3, #2
 8010192:	b29a      	uxth	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010198:	7efb      	ldrb	r3, [r7, #27]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d01b      	beq.n	80101d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7d1b      	ldrb	r3, [r3, #20]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d106      	bne.n	80101b4 <tcp_process+0xa8>
 80101a6:	4b7c      	ldr	r3, [pc, #496]	; (8010398 <tcp_process+0x28c>)
 80101a8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80101ac:	4980      	ldr	r1, [pc, #512]	; (80103b0 <tcp_process+0x2a4>)
 80101ae:	487c      	ldr	r0, [pc, #496]	; (80103a0 <tcp_process+0x294>)
 80101b0:	f006 fc06 	bl	80169c0 <iprintf>
      recv_flags |= TF_RESET;
 80101b4:	4b7f      	ldr	r3, [pc, #508]	; (80103b4 <tcp_process+0x2a8>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	f043 0308 	orr.w	r3, r3, #8
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	4b7d      	ldr	r3, [pc, #500]	; (80103b4 <tcp_process+0x2a8>)
 80101c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8b5b      	ldrh	r3, [r3, #26]
 80101c6:	f023 0301 	bic.w	r3, r3, #1
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80101d0:	f06f 030d 	mvn.w	r3, #13
 80101d4:	e37a      	b.n	80108cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80101d6:	2300      	movs	r3, #0
 80101d8:	e378      	b.n	80108cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80101da:	4b72      	ldr	r3, [pc, #456]	; (80103a4 <tcp_process+0x298>)
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	f003 0302 	and.w	r3, r3, #2
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d010      	beq.n	8010208 <tcp_process+0xfc>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	7d1b      	ldrb	r3, [r3, #20]
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d00c      	beq.n	8010208 <tcp_process+0xfc>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	7d1b      	ldrb	r3, [r3, #20]
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	d008      	beq.n	8010208 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	8b5b      	ldrh	r3, [r3, #26]
 80101fa:	f043 0302 	orr.w	r3, r3, #2
 80101fe:	b29a      	uxth	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010204:	2300      	movs	r3, #0
 8010206:	e361      	b.n	80108cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	8b5b      	ldrh	r3, [r3, #26]
 801020c:	f003 0310 	and.w	r3, r3, #16
 8010210:	2b00      	cmp	r3, #0
 8010212:	d103      	bne.n	801021c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010214:	4b68      	ldr	r3, [pc, #416]	; (80103b8 <tcp_process+0x2ac>)
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f001 fc2f 	bl	8011a90 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	7d1b      	ldrb	r3, [r3, #20]
 8010236:	3b02      	subs	r3, #2
 8010238:	2b07      	cmp	r3, #7
 801023a:	f200 8337 	bhi.w	80108ac <tcp_process+0x7a0>
 801023e:	a201      	add	r2, pc, #4	; (adr r2, 8010244 <tcp_process+0x138>)
 8010240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010244:	08010265 	.word	0x08010265
 8010248:	08010495 	.word	0x08010495
 801024c:	0801060d 	.word	0x0801060d
 8010250:	08010637 	.word	0x08010637
 8010254:	0801075b 	.word	0x0801075b
 8010258:	0801060d 	.word	0x0801060d
 801025c:	080107e7 	.word	0x080107e7
 8010260:	08010877 	.word	0x08010877
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010264:	4b4f      	ldr	r3, [pc, #316]	; (80103a4 <tcp_process+0x298>)
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	f003 0310 	and.w	r3, r3, #16
 801026c:	2b00      	cmp	r3, #0
 801026e:	f000 80e4 	beq.w	801043a <tcp_process+0x32e>
 8010272:	4b4c      	ldr	r3, [pc, #304]	; (80103a4 <tcp_process+0x298>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	f003 0302 	and.w	r3, r3, #2
 801027a:	2b00      	cmp	r3, #0
 801027c:	f000 80dd 	beq.w	801043a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010284:	1c5a      	adds	r2, r3, #1
 8010286:	4b48      	ldr	r3, [pc, #288]	; (80103a8 <tcp_process+0x29c>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	429a      	cmp	r2, r3
 801028c:	f040 80d5 	bne.w	801043a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010290:	4b46      	ldr	r3, [pc, #280]	; (80103ac <tcp_process+0x2a0>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	1c5a      	adds	r2, r3, #1
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80102a2:	4b41      	ldr	r3, [pc, #260]	; (80103a8 <tcp_process+0x29c>)
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80102aa:	4b44      	ldr	r3, [pc, #272]	; (80103bc <tcp_process+0x2b0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	89db      	ldrh	r3, [r3, #14]
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80102c4:	4b39      	ldr	r3, [pc, #228]	; (80103ac <tcp_process+0x2a0>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	1e5a      	subs	r2, r3, #1
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2204      	movs	r2, #4
 80102d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	3304      	adds	r3, #4
 80102dc:	4618      	mov	r0, r3
 80102de:	f004 fde1 	bl	8014ea4 <ip4_route>
 80102e2:	4601      	mov	r1, r0
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	3304      	adds	r3, #4
 80102e8:	461a      	mov	r2, r3
 80102ea:	4620      	mov	r0, r4
 80102ec:	f7ff f88c 	bl	800f408 <tcp_eff_send_mss_netif>
 80102f0:	4603      	mov	r3, r0
 80102f2:	461a      	mov	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102fc:	009a      	lsls	r2, r3, #2
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	f241 111c 	movw	r1, #4380	; 0x111c
 8010308:	428b      	cmp	r3, r1
 801030a:	bf38      	it	cc
 801030c:	460b      	movcc	r3, r1
 801030e:	429a      	cmp	r2, r3
 8010310:	d204      	bcs.n	801031c <tcp_process+0x210>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	b29b      	uxth	r3, r3
 801031a:	e00d      	b.n	8010338 <tcp_process+0x22c>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010320:	005b      	lsls	r3, r3, #1
 8010322:	f241 121c 	movw	r2, #4380	; 0x111c
 8010326:	4293      	cmp	r3, r2
 8010328:	d904      	bls.n	8010334 <tcp_process+0x228>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	b29b      	uxth	r3, r3
 8010332:	e001      	b.n	8010338 <tcp_process+0x22c>
 8010334:	f241 131c 	movw	r3, #4380	; 0x111c
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010344:	2b00      	cmp	r3, #0
 8010346:	d106      	bne.n	8010356 <tcp_process+0x24a>
 8010348:	4b13      	ldr	r3, [pc, #76]	; (8010398 <tcp_process+0x28c>)
 801034a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801034e:	491c      	ldr	r1, [pc, #112]	; (80103c0 <tcp_process+0x2b4>)
 8010350:	4813      	ldr	r0, [pc, #76]	; (80103a0 <tcp_process+0x294>)
 8010352:	f006 fb35 	bl	80169c0 <iprintf>
        --pcb->snd_queuelen;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801035c:	3b01      	subs	r3, #1
 801035e:	b29a      	uxth	r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801036a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d12a      	bne.n	80103c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010376:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d106      	bne.n	801038c <tcp_process+0x280>
 801037e:	4b06      	ldr	r3, [pc, #24]	; (8010398 <tcp_process+0x28c>)
 8010380:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010384:	490f      	ldr	r1, [pc, #60]	; (80103c4 <tcp_process+0x2b8>)
 8010386:	4806      	ldr	r0, [pc, #24]	; (80103a0 <tcp_process+0x294>)
 8010388:	f006 fb1a 	bl	80169c0 <iprintf>
          pcb->unsent = rseg->next;
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	66da      	str	r2, [r3, #108]	; 0x6c
 8010394:	e01c      	b.n	80103d0 <tcp_process+0x2c4>
 8010396:	bf00      	nop
 8010398:	0801b784 	.word	0x0801b784
 801039c:	0801b9bc 	.word	0x0801b9bc
 80103a0:	0801b7d0 	.word	0x0801b7d0
 80103a4:	20011b8c 	.word	0x20011b8c
 80103a8:	20011b84 	.word	0x20011b84
 80103ac:	20011b80 	.word	0x20011b80
 80103b0:	0801b9d8 	.word	0x0801b9d8
 80103b4:	20011b8d 	.word	0x20011b8d
 80103b8:	20011b48 	.word	0x20011b48
 80103bc:	20011b70 	.word	0x20011b70
 80103c0:	0801b9f8 	.word	0x0801b9f8
 80103c4:	0801ba10 	.word	0x0801ba10
        } else {
          pcb->unacked = rseg->next;
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80103d0:	69f8      	ldr	r0, [r7, #28]
 80103d2:	f7fe fc54 	bl	800ec7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d104      	bne.n	80103e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103e4:	861a      	strh	r2, [r3, #48]	; 0x30
 80103e6:	e006      	b.n	80103f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00a      	beq.n	8010416 <tcp_process+0x30a>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	6910      	ldr	r0, [r2, #16]
 801040a:	2200      	movs	r2, #0
 801040c:	6879      	ldr	r1, [r7, #4]
 801040e:	4798      	blx	r3
 8010410:	4603      	mov	r3, r0
 8010412:	76bb      	strb	r3, [r7, #26]
 8010414:	e001      	b.n	801041a <tcp_process+0x30e>
 8010416:	2300      	movs	r3, #0
 8010418:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801041a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801041e:	f113 0f0d 	cmn.w	r3, #13
 8010422:	d102      	bne.n	801042a <tcp_process+0x31e>
          return ERR_ABRT;
 8010424:	f06f 030c 	mvn.w	r3, #12
 8010428:	e250      	b.n	80108cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	8b5b      	ldrh	r3, [r3, #26]
 801042e:	f043 0302 	orr.w	r3, r3, #2
 8010432:	b29a      	uxth	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010438:	e23a      	b.n	80108b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801043a:	4b98      	ldr	r3, [pc, #608]	; (801069c <tcp_process+0x590>)
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	f003 0310 	and.w	r3, r3, #16
 8010442:	2b00      	cmp	r3, #0
 8010444:	f000 8234 	beq.w	80108b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010448:	4b95      	ldr	r3, [pc, #596]	; (80106a0 <tcp_process+0x594>)
 801044a:	6819      	ldr	r1, [r3, #0]
 801044c:	4b95      	ldr	r3, [pc, #596]	; (80106a4 <tcp_process+0x598>)
 801044e:	881b      	ldrh	r3, [r3, #0]
 8010450:	461a      	mov	r2, r3
 8010452:	4b95      	ldr	r3, [pc, #596]	; (80106a8 <tcp_process+0x59c>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010458:	4b94      	ldr	r3, [pc, #592]	; (80106ac <tcp_process+0x5a0>)
 801045a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801045c:	885b      	ldrh	r3, [r3, #2]
 801045e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010460:	4a92      	ldr	r2, [pc, #584]	; (80106ac <tcp_process+0x5a0>)
 8010462:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010464:	8812      	ldrh	r2, [r2, #0]
 8010466:	b292      	uxth	r2, r2
 8010468:	9202      	str	r2, [sp, #8]
 801046a:	9301      	str	r3, [sp, #4]
 801046c:	4b90      	ldr	r3, [pc, #576]	; (80106b0 <tcp_process+0x5a4>)
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	4b90      	ldr	r3, [pc, #576]	; (80106b4 <tcp_process+0x5a8>)
 8010472:	4602      	mov	r2, r0
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f003 f8ff 	bl	8013678 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010480:	2b05      	cmp	r3, #5
 8010482:	f200 8215 	bhi.w	80108b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f002 feb9 	bl	8013204 <tcp_rexmit_rto>
      break;
 8010492:	e20d      	b.n	80108b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010494:	4b81      	ldr	r3, [pc, #516]	; (801069c <tcp_process+0x590>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f003 0310 	and.w	r3, r3, #16
 801049c:	2b00      	cmp	r3, #0
 801049e:	f000 80a1 	beq.w	80105e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104a2:	4b7f      	ldr	r3, [pc, #508]	; (80106a0 <tcp_process+0x594>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	3b01      	subs	r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	db7e      	blt.n	80105b0 <tcp_process+0x4a4>
 80104b2:	4b7b      	ldr	r3, [pc, #492]	; (80106a0 <tcp_process+0x594>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	dc77      	bgt.n	80105b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2204      	movs	r2, #4
 80104c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d102      	bne.n	80104d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80104ce:	23fa      	movs	r3, #250	; 0xfa
 80104d0:	76bb      	strb	r3, [r7, #26]
 80104d2:	e01d      	b.n	8010510 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104d8:	699b      	ldr	r3, [r3, #24]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d106      	bne.n	80104ec <tcp_process+0x3e0>
 80104de:	4b76      	ldr	r3, [pc, #472]	; (80106b8 <tcp_process+0x5ac>)
 80104e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80104e4:	4975      	ldr	r1, [pc, #468]	; (80106bc <tcp_process+0x5b0>)
 80104e6:	4876      	ldr	r0, [pc, #472]	; (80106c0 <tcp_process+0x5b4>)
 80104e8:	f006 fa6a 	bl	80169c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104f0:	699b      	ldr	r3, [r3, #24]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00a      	beq.n	801050c <tcp_process+0x400>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	6910      	ldr	r0, [r2, #16]
 8010500:	2200      	movs	r2, #0
 8010502:	6879      	ldr	r1, [r7, #4]
 8010504:	4798      	blx	r3
 8010506:	4603      	mov	r3, r0
 8010508:	76bb      	strb	r3, [r7, #26]
 801050a:	e001      	b.n	8010510 <tcp_process+0x404>
 801050c:	23f0      	movs	r3, #240	; 0xf0
 801050e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010510:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00a      	beq.n	801052e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010518:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801051c:	f113 0f0d 	cmn.w	r3, #13
 8010520:	d002      	beq.n	8010528 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f7fd fcca 	bl	800debc <tcp_abort>
            }
            return ERR_ABRT;
 8010528:	f06f 030c 	mvn.w	r3, #12
 801052c:	e1ce      	b.n	80108cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 fae0 	bl	8010af4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010534:	4b63      	ldr	r3, [pc, #396]	; (80106c4 <tcp_process+0x5b8>)
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d005      	beq.n	8010548 <tcp_process+0x43c>
            recv_acked--;
 801053c:	4b61      	ldr	r3, [pc, #388]	; (80106c4 <tcp_process+0x5b8>)
 801053e:	881b      	ldrh	r3, [r3, #0]
 8010540:	3b01      	subs	r3, #1
 8010542:	b29a      	uxth	r2, r3
 8010544:	4b5f      	ldr	r3, [pc, #380]	; (80106c4 <tcp_process+0x5b8>)
 8010546:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801054c:	009a      	lsls	r2, r3, #2
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	f241 111c 	movw	r1, #4380	; 0x111c
 8010558:	428b      	cmp	r3, r1
 801055a:	bf38      	it	cc
 801055c:	460b      	movcc	r3, r1
 801055e:	429a      	cmp	r2, r3
 8010560:	d204      	bcs.n	801056c <tcp_process+0x460>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	b29b      	uxth	r3, r3
 801056a:	e00d      	b.n	8010588 <tcp_process+0x47c>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010570:	005b      	lsls	r3, r3, #1
 8010572:	f241 121c 	movw	r2, #4380	; 0x111c
 8010576:	4293      	cmp	r3, r2
 8010578:	d904      	bls.n	8010584 <tcp_process+0x478>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801057e:	005b      	lsls	r3, r3, #1
 8010580:	b29b      	uxth	r3, r3
 8010582:	e001      	b.n	8010588 <tcp_process+0x47c>
 8010584:	f241 131c 	movw	r3, #4380	; 0x111c
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801058e:	4b4e      	ldr	r3, [pc, #312]	; (80106c8 <tcp_process+0x5bc>)
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	f003 0320 	and.w	r3, r3, #32
 8010596:	2b00      	cmp	r3, #0
 8010598:	d037      	beq.n	801060a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8b5b      	ldrh	r3, [r3, #26]
 801059e:	f043 0302 	orr.w	r3, r3, #2
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2207      	movs	r2, #7
 80105ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80105ae:	e02c      	b.n	801060a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105b0:	4b3b      	ldr	r3, [pc, #236]	; (80106a0 <tcp_process+0x594>)
 80105b2:	6819      	ldr	r1, [r3, #0]
 80105b4:	4b3b      	ldr	r3, [pc, #236]	; (80106a4 <tcp_process+0x598>)
 80105b6:	881b      	ldrh	r3, [r3, #0]
 80105b8:	461a      	mov	r2, r3
 80105ba:	4b3b      	ldr	r3, [pc, #236]	; (80106a8 <tcp_process+0x59c>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105c0:	4b3a      	ldr	r3, [pc, #232]	; (80106ac <tcp_process+0x5a0>)
 80105c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105c4:	885b      	ldrh	r3, [r3, #2]
 80105c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105c8:	4a38      	ldr	r2, [pc, #224]	; (80106ac <tcp_process+0x5a0>)
 80105ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105cc:	8812      	ldrh	r2, [r2, #0]
 80105ce:	b292      	uxth	r2, r2
 80105d0:	9202      	str	r2, [sp, #8]
 80105d2:	9301      	str	r3, [sp, #4]
 80105d4:	4b36      	ldr	r3, [pc, #216]	; (80106b0 <tcp_process+0x5a4>)
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	4b36      	ldr	r3, [pc, #216]	; (80106b4 <tcp_process+0x5a8>)
 80105da:	4602      	mov	r2, r0
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f003 f84b 	bl	8013678 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80105e2:	e167      	b.n	80108b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80105e4:	4b2d      	ldr	r3, [pc, #180]	; (801069c <tcp_process+0x590>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 0302 	and.w	r3, r3, #2
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f000 8161 	beq.w	80108b4 <tcp_process+0x7a8>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f6:	1e5a      	subs	r2, r3, #1
 80105f8:	4b2b      	ldr	r3, [pc, #172]	; (80106a8 <tcp_process+0x59c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	f040 8159 	bne.w	80108b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f002 fe20 	bl	8013248 <tcp_rexmit>
      break;
 8010608:	e154      	b.n	80108b4 <tcp_process+0x7a8>
 801060a:	e153      	b.n	80108b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fa71 	bl	8010af4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010612:	4b2d      	ldr	r3, [pc, #180]	; (80106c8 <tcp_process+0x5bc>)
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	f003 0320 	and.w	r3, r3, #32
 801061a:	2b00      	cmp	r3, #0
 801061c:	f000 814c 	beq.w	80108b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	8b5b      	ldrh	r3, [r3, #26]
 8010624:	f043 0302 	orr.w	r3, r3, #2
 8010628:	b29a      	uxth	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2207      	movs	r2, #7
 8010632:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010634:	e140      	b.n	80108b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 fa5c 	bl	8010af4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801063c:	4b22      	ldr	r3, [pc, #136]	; (80106c8 <tcp_process+0x5bc>)
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	f003 0320 	and.w	r3, r3, #32
 8010644:	2b00      	cmp	r3, #0
 8010646:	d071      	beq.n	801072c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010648:	4b14      	ldr	r3, [pc, #80]	; (801069c <tcp_process+0x590>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f003 0310 	and.w	r3, r3, #16
 8010650:	2b00      	cmp	r3, #0
 8010652:	d060      	beq.n	8010716 <tcp_process+0x60a>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010658:	4b11      	ldr	r3, [pc, #68]	; (80106a0 <tcp_process+0x594>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	429a      	cmp	r2, r3
 801065e:	d15a      	bne.n	8010716 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010664:	2b00      	cmp	r3, #0
 8010666:	d156      	bne.n	8010716 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	8b5b      	ldrh	r3, [r3, #26]
 801066c:	f043 0302 	orr.w	r3, r3, #2
 8010670:	b29a      	uxth	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7fe fdbc 	bl	800f1f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801067c:	4b13      	ldr	r3, [pc, #76]	; (80106cc <tcp_process+0x5c0>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	429a      	cmp	r2, r3
 8010684:	d105      	bne.n	8010692 <tcp_process+0x586>
 8010686:	4b11      	ldr	r3, [pc, #68]	; (80106cc <tcp_process+0x5c0>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	4a0f      	ldr	r2, [pc, #60]	; (80106cc <tcp_process+0x5c0>)
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	e02e      	b.n	80106f0 <tcp_process+0x5e4>
 8010692:	4b0e      	ldr	r3, [pc, #56]	; (80106cc <tcp_process+0x5c0>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	617b      	str	r3, [r7, #20]
 8010698:	e027      	b.n	80106ea <tcp_process+0x5de>
 801069a:	bf00      	nop
 801069c:	20011b8c 	.word	0x20011b8c
 80106a0:	20011b84 	.word	0x20011b84
 80106a4:	20011b8a 	.word	0x20011b8a
 80106a8:	20011b80 	.word	0x20011b80
 80106ac:	20011b70 	.word	0x20011b70
 80106b0:	20009acc 	.word	0x20009acc
 80106b4:	20009ad0 	.word	0x20009ad0
 80106b8:	0801b784 	.word	0x0801b784
 80106bc:	0801ba24 	.word	0x0801ba24
 80106c0:	0801b7d0 	.word	0x0801b7d0
 80106c4:	20011b88 	.word	0x20011b88
 80106c8:	20011b8d 	.word	0x20011b8d
 80106cc:	20011b54 	.word	0x20011b54
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d104      	bne.n	80106e4 <tcp_process+0x5d8>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	68da      	ldr	r2, [r3, #12]
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	60da      	str	r2, [r3, #12]
 80106e2:	e005      	b.n	80106f0 <tcp_process+0x5e4>
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	617b      	str	r3, [r7, #20]
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1ef      	bne.n	80106d0 <tcp_process+0x5c4>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2200      	movs	r2, #0
 80106f4:	60da      	str	r2, [r3, #12]
 80106f6:	4b77      	ldr	r3, [pc, #476]	; (80108d4 <tcp_process+0x7c8>)
 80106f8:	2201      	movs	r2, #1
 80106fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	220a      	movs	r2, #10
 8010700:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010702:	4b75      	ldr	r3, [pc, #468]	; (80108d8 <tcp_process+0x7cc>)
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	60da      	str	r2, [r3, #12]
 801070a:	4a73      	ldr	r2, [pc, #460]	; (80108d8 <tcp_process+0x7cc>)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	f003 f974 	bl	80139fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010714:	e0d2      	b.n	80108bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	8b5b      	ldrh	r3, [r3, #26]
 801071a:	f043 0302 	orr.w	r3, r3, #2
 801071e:	b29a      	uxth	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2208      	movs	r2, #8
 8010728:	751a      	strb	r2, [r3, #20]
      break;
 801072a:	e0c7      	b.n	80108bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801072c:	4b6b      	ldr	r3, [pc, #428]	; (80108dc <tcp_process+0x7d0>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	f003 0310 	and.w	r3, r3, #16
 8010734:	2b00      	cmp	r3, #0
 8010736:	f000 80c1 	beq.w	80108bc <tcp_process+0x7b0>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801073e:	4b68      	ldr	r3, [pc, #416]	; (80108e0 <tcp_process+0x7d4>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	429a      	cmp	r2, r3
 8010744:	f040 80ba 	bne.w	80108bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801074c:	2b00      	cmp	r3, #0
 801074e:	f040 80b5 	bne.w	80108bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2206      	movs	r2, #6
 8010756:	751a      	strb	r2, [r3, #20]
      break;
 8010758:	e0b0      	b.n	80108bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 f9ca 	bl	8010af4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010760:	4b60      	ldr	r3, [pc, #384]	; (80108e4 <tcp_process+0x7d8>)
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	f003 0320 	and.w	r3, r3, #32
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 80a9 	beq.w	80108c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8b5b      	ldrh	r3, [r3, #26]
 8010772:	f043 0302 	orr.w	r3, r3, #2
 8010776:	b29a      	uxth	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7fe fd39 	bl	800f1f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010782:	4b59      	ldr	r3, [pc, #356]	; (80108e8 <tcp_process+0x7dc>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	429a      	cmp	r2, r3
 801078a:	d105      	bne.n	8010798 <tcp_process+0x68c>
 801078c:	4b56      	ldr	r3, [pc, #344]	; (80108e8 <tcp_process+0x7dc>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	4a55      	ldr	r2, [pc, #340]	; (80108e8 <tcp_process+0x7dc>)
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	e013      	b.n	80107c0 <tcp_process+0x6b4>
 8010798:	4b53      	ldr	r3, [pc, #332]	; (80108e8 <tcp_process+0x7dc>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	613b      	str	r3, [r7, #16]
 801079e:	e00c      	b.n	80107ba <tcp_process+0x6ae>
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d104      	bne.n	80107b4 <tcp_process+0x6a8>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	68da      	ldr	r2, [r3, #12]
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	60da      	str	r2, [r3, #12]
 80107b2:	e005      	b.n	80107c0 <tcp_process+0x6b4>
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	613b      	str	r3, [r7, #16]
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1ef      	bne.n	80107a0 <tcp_process+0x694>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2200      	movs	r2, #0
 80107c4:	60da      	str	r2, [r3, #12]
 80107c6:	4b43      	ldr	r3, [pc, #268]	; (80108d4 <tcp_process+0x7c8>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	220a      	movs	r2, #10
 80107d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107d2:	4b41      	ldr	r3, [pc, #260]	; (80108d8 <tcp_process+0x7cc>)
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	60da      	str	r2, [r3, #12]
 80107da:	4a3f      	ldr	r2, [pc, #252]	; (80108d8 <tcp_process+0x7cc>)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6013      	str	r3, [r2, #0]
 80107e0:	f003 f90c 	bl	80139fc <tcp_timer_needed>
      }
      break;
 80107e4:	e06c      	b.n	80108c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f984 	bl	8010af4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80107ec:	4b3b      	ldr	r3, [pc, #236]	; (80108dc <tcp_process+0x7d0>)
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	f003 0310 	and.w	r3, r3, #16
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d065      	beq.n	80108c4 <tcp_process+0x7b8>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107fc:	4b38      	ldr	r3, [pc, #224]	; (80108e0 <tcp_process+0x7d4>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	429a      	cmp	r2, r3
 8010802:	d15f      	bne.n	80108c4 <tcp_process+0x7b8>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010808:	2b00      	cmp	r3, #0
 801080a:	d15b      	bne.n	80108c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7fe fcf1 	bl	800f1f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010812:	4b35      	ldr	r3, [pc, #212]	; (80108e8 <tcp_process+0x7dc>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	429a      	cmp	r2, r3
 801081a:	d105      	bne.n	8010828 <tcp_process+0x71c>
 801081c:	4b32      	ldr	r3, [pc, #200]	; (80108e8 <tcp_process+0x7dc>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	4a31      	ldr	r2, [pc, #196]	; (80108e8 <tcp_process+0x7dc>)
 8010824:	6013      	str	r3, [r2, #0]
 8010826:	e013      	b.n	8010850 <tcp_process+0x744>
 8010828:	4b2f      	ldr	r3, [pc, #188]	; (80108e8 <tcp_process+0x7dc>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	60fb      	str	r3, [r7, #12]
 801082e:	e00c      	b.n	801084a <tcp_process+0x73e>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	687a      	ldr	r2, [r7, #4]
 8010836:	429a      	cmp	r2, r3
 8010838:	d104      	bne.n	8010844 <tcp_process+0x738>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	68da      	ldr	r2, [r3, #12]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	60da      	str	r2, [r3, #12]
 8010842:	e005      	b.n	8010850 <tcp_process+0x744>
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1ef      	bne.n	8010830 <tcp_process+0x724>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	60da      	str	r2, [r3, #12]
 8010856:	4b1f      	ldr	r3, [pc, #124]	; (80108d4 <tcp_process+0x7c8>)
 8010858:	2201      	movs	r2, #1
 801085a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	220a      	movs	r2, #10
 8010860:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010862:	4b1d      	ldr	r3, [pc, #116]	; (80108d8 <tcp_process+0x7cc>)
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	60da      	str	r2, [r3, #12]
 801086a:	4a1b      	ldr	r2, [pc, #108]	; (80108d8 <tcp_process+0x7cc>)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6013      	str	r3, [r2, #0]
 8010870:	f003 f8c4 	bl	80139fc <tcp_timer_needed>
      }
      break;
 8010874:	e026      	b.n	80108c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 f93c 	bl	8010af4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801087c:	4b17      	ldr	r3, [pc, #92]	; (80108dc <tcp_process+0x7d0>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	f003 0310 	and.w	r3, r3, #16
 8010884:	2b00      	cmp	r3, #0
 8010886:	d01f      	beq.n	80108c8 <tcp_process+0x7bc>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801088c:	4b14      	ldr	r3, [pc, #80]	; (80108e0 <tcp_process+0x7d4>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	429a      	cmp	r2, r3
 8010892:	d119      	bne.n	80108c8 <tcp_process+0x7bc>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010898:	2b00      	cmp	r3, #0
 801089a:	d115      	bne.n	80108c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801089c:	4b11      	ldr	r3, [pc, #68]	; (80108e4 <tcp_process+0x7d8>)
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	f043 0310 	orr.w	r3, r3, #16
 80108a4:	b2da      	uxtb	r2, r3
 80108a6:	4b0f      	ldr	r3, [pc, #60]	; (80108e4 <tcp_process+0x7d8>)
 80108a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80108aa:	e00d      	b.n	80108c8 <tcp_process+0x7bc>
    default:
      break;
 80108ac:	bf00      	nop
 80108ae:	e00c      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108b0:	bf00      	nop
 80108b2:	e00a      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108b4:	bf00      	nop
 80108b6:	e008      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108b8:	bf00      	nop
 80108ba:	e006      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108bc:	bf00      	nop
 80108be:	e004      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108c0:	bf00      	nop
 80108c2:	e002      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108c4:	bf00      	nop
 80108c6:	e000      	b.n	80108ca <tcp_process+0x7be>
      break;
 80108c8:	bf00      	nop
  }
  return ERR_OK;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3724      	adds	r7, #36	; 0x24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd90      	pop	{r4, r7, pc}
 80108d4:	20011b5c 	.word	0x20011b5c
 80108d8:	20011b58 	.word	0x20011b58
 80108dc:	20011b8c 	.word	0x20011b8c
 80108e0:	20011b84 	.word	0x20011b84
 80108e4:	20011b8d 	.word	0x20011b8d
 80108e8:	20011b54 	.word	0x20011b54

080108ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d106      	bne.n	801090a <tcp_oos_insert_segment+0x1e>
 80108fc:	4b3b      	ldr	r3, [pc, #236]	; (80109ec <tcp_oos_insert_segment+0x100>)
 80108fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8010902:	493b      	ldr	r1, [pc, #236]	; (80109f0 <tcp_oos_insert_segment+0x104>)
 8010904:	483b      	ldr	r0, [pc, #236]	; (80109f4 <tcp_oos_insert_segment+0x108>)
 8010906:	f006 f85b 	bl	80169c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	899b      	ldrh	r3, [r3, #12]
 8010910:	b29b      	uxth	r3, r3
 8010912:	4618      	mov	r0, r3
 8010914:	f7fa ffdc 	bl	800b8d0 <lwip_htons>
 8010918:	4603      	mov	r3, r0
 801091a:	b2db      	uxtb	r3, r3
 801091c:	f003 0301 	and.w	r3, r3, #1
 8010920:	2b00      	cmp	r3, #0
 8010922:	d028      	beq.n	8010976 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010924:	6838      	ldr	r0, [r7, #0]
 8010926:	f7fe f995 	bl	800ec54 <tcp_segs_free>
    next = NULL;
 801092a:	2300      	movs	r3, #0
 801092c:	603b      	str	r3, [r7, #0]
 801092e:	e056      	b.n	80109de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	899b      	ldrh	r3, [r3, #12]
 8010936:	b29b      	uxth	r3, r3
 8010938:	4618      	mov	r0, r3
 801093a:	f7fa ffc9 	bl	800b8d0 <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	b2db      	uxtb	r3, r3
 8010942:	f003 0301 	and.w	r3, r3, #1
 8010946:	2b00      	cmp	r3, #0
 8010948:	d00d      	beq.n	8010966 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	899b      	ldrh	r3, [r3, #12]
 8010950:	b29c      	uxth	r4, r3
 8010952:	2001      	movs	r0, #1
 8010954:	f7fa ffbc 	bl	800b8d0 <lwip_htons>
 8010958:	4603      	mov	r3, r0
 801095a:	461a      	mov	r2, r3
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	4322      	orrs	r2, r4
 8010962:	b292      	uxth	r2, r2
 8010964:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7fe f984 	bl	800ec7e <tcp_seg_free>
    while (next &&
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00e      	beq.n	801099a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	891b      	ldrh	r3, [r3, #8]
 8010980:	461a      	mov	r2, r3
 8010982:	4b1d      	ldr	r3, [pc, #116]	; (80109f8 <tcp_oos_insert_segment+0x10c>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	441a      	add	r2, r3
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	6839      	ldr	r1, [r7, #0]
 8010990:	8909      	ldrh	r1, [r1, #8]
 8010992:	440b      	add	r3, r1
 8010994:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010996:	2b00      	cmp	r3, #0
 8010998:	daca      	bge.n	8010930 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d01e      	beq.n	80109de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	891b      	ldrh	r3, [r3, #8]
 80109a4:	461a      	mov	r2, r3
 80109a6:	4b14      	ldr	r3, [pc, #80]	; (80109f8 <tcp_oos_insert_segment+0x10c>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	441a      	add	r2, r3
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	dd12      	ble.n	80109de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	b29a      	uxth	r2, r3
 80109c0:	4b0d      	ldr	r3, [pc, #52]	; (80109f8 <tcp_oos_insert_segment+0x10c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	685a      	ldr	r2, [r3, #4]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	891b      	ldrh	r3, [r3, #8]
 80109d6:	4619      	mov	r1, r3
 80109d8:	4610      	mov	r0, r2
 80109da:	f7fc faf9 	bl	800cfd0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	683a      	ldr	r2, [r7, #0]
 80109e2:	601a      	str	r2, [r3, #0]
}
 80109e4:	bf00      	nop
 80109e6:	3714      	adds	r7, #20
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd90      	pop	{r4, r7, pc}
 80109ec:	0801b784 	.word	0x0801b784
 80109f0:	0801ba44 	.word	0x0801ba44
 80109f4:	0801b7d0 	.word	0x0801b7d0
 80109f8:	20011b80 	.word	0x20011b80

080109fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80109fc:	b5b0      	push	{r4, r5, r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
 8010a08:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010a0a:	e03e      	b.n	8010a8a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fc fcec 	bl	800d3f8 <pbuf_clen>
 8010a20:	4603      	mov	r3, r0
 8010a22:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a2a:	8a7a      	ldrh	r2, [r7, #18]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d906      	bls.n	8010a3e <tcp_free_acked_segments+0x42>
 8010a30:	4b2a      	ldr	r3, [pc, #168]	; (8010adc <tcp_free_acked_segments+0xe0>)
 8010a32:	f240 4257 	movw	r2, #1111	; 0x457
 8010a36:	492a      	ldr	r1, [pc, #168]	; (8010ae0 <tcp_free_acked_segments+0xe4>)
 8010a38:	482a      	ldr	r0, [pc, #168]	; (8010ae4 <tcp_free_acked_segments+0xe8>)
 8010a3a:	f005 ffc1 	bl	80169c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010a44:	8a7b      	ldrh	r3, [r7, #18]
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	891a      	ldrh	r2, [r3, #8]
 8010a54:	4b24      	ldr	r3, [pc, #144]	; (8010ae8 <tcp_free_acked_segments+0xec>)
 8010a56:	881b      	ldrh	r3, [r3, #0]
 8010a58:	4413      	add	r3, r2
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	4b22      	ldr	r3, [pc, #136]	; (8010ae8 <tcp_free_acked_segments+0xec>)
 8010a5e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010a60:	6978      	ldr	r0, [r7, #20]
 8010a62:	f7fe f90c 	bl	800ec7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00c      	beq.n	8010a8a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d109      	bne.n	8010a8a <tcp_free_acked_segments+0x8e>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d106      	bne.n	8010a8a <tcp_free_acked_segments+0x8e>
 8010a7c:	4b17      	ldr	r3, [pc, #92]	; (8010adc <tcp_free_acked_segments+0xe0>)
 8010a7e:	f240 4261 	movw	r2, #1121	; 0x461
 8010a82:	491a      	ldr	r1, [pc, #104]	; (8010aec <tcp_free_acked_segments+0xf0>)
 8010a84:	4817      	ldr	r0, [pc, #92]	; (8010ae4 <tcp_free_acked_segments+0xe8>)
 8010a86:	f005 ff9b 	bl	80169c0 <iprintf>
  while (seg_list != NULL &&
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d020      	beq.n	8010ad2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fa ff2f 	bl	800b8fa <lwip_htonl>
 8010a9c:	4604      	mov	r4, r0
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	891b      	ldrh	r3, [r3, #8]
 8010aa2:	461d      	mov	r5, r3
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	899b      	ldrh	r3, [r3, #12]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fa ff0f 	bl	800b8d0 <lwip_htons>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	f003 0303 	and.w	r3, r3, #3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <tcp_free_acked_segments+0xc6>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e000      	b.n	8010ac4 <tcp_free_acked_segments+0xc8>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	442b      	add	r3, r5
 8010ac6:	18e2      	adds	r2, r4, r3
 8010ac8:	4b09      	ldr	r3, [pc, #36]	; (8010af0 <tcp_free_acked_segments+0xf4>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dd9c      	ble.n	8010a0c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010ad2:	68bb      	ldr	r3, [r7, #8]
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3718      	adds	r7, #24
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bdb0      	pop	{r4, r5, r7, pc}
 8010adc:	0801b784 	.word	0x0801b784
 8010ae0:	0801ba6c 	.word	0x0801ba6c
 8010ae4:	0801b7d0 	.word	0x0801b7d0
 8010ae8:	20011b88 	.word	0x20011b88
 8010aec:	0801ba94 	.word	0x0801ba94
 8010af0:	20011b84 	.word	0x20011b84

08010af4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010af4:	b5b0      	push	{r4, r5, r7, lr}
 8010af6:	b094      	sub	sp, #80	; 0x50
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010afc:	2300      	movs	r3, #0
 8010afe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d106      	bne.n	8010b14 <tcp_receive+0x20>
 8010b06:	4b91      	ldr	r3, [pc, #580]	; (8010d4c <tcp_receive+0x258>)
 8010b08:	f240 427b 	movw	r2, #1147	; 0x47b
 8010b0c:	4990      	ldr	r1, [pc, #576]	; (8010d50 <tcp_receive+0x25c>)
 8010b0e:	4891      	ldr	r0, [pc, #580]	; (8010d54 <tcp_receive+0x260>)
 8010b10:	f005 ff56 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	7d1b      	ldrb	r3, [r3, #20]
 8010b18:	2b03      	cmp	r3, #3
 8010b1a:	d806      	bhi.n	8010b2a <tcp_receive+0x36>
 8010b1c:	4b8b      	ldr	r3, [pc, #556]	; (8010d4c <tcp_receive+0x258>)
 8010b1e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010b22:	498d      	ldr	r1, [pc, #564]	; (8010d58 <tcp_receive+0x264>)
 8010b24:	488b      	ldr	r0, [pc, #556]	; (8010d54 <tcp_receive+0x260>)
 8010b26:	f005 ff4b 	bl	80169c0 <iprintf>

  if (flags & TCP_ACK) {
 8010b2a:	4b8c      	ldr	r3, [pc, #560]	; (8010d5c <tcp_receive+0x268>)
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	f003 0310 	and.w	r3, r3, #16
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f000 8264 	beq.w	8011000 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b3e:	461a      	mov	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b44:	4413      	add	r3, r2
 8010b46:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b4c:	4b84      	ldr	r3, [pc, #528]	; (8010d60 <tcp_receive+0x26c>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	db1b      	blt.n	8010b8e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b5a:	4b81      	ldr	r3, [pc, #516]	; (8010d60 <tcp_receive+0x26c>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d106      	bne.n	8010b70 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b66:	4b7f      	ldr	r3, [pc, #508]	; (8010d64 <tcp_receive+0x270>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	db0e      	blt.n	8010b8e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b74:	4b7b      	ldr	r3, [pc, #492]	; (8010d64 <tcp_receive+0x270>)
 8010b76:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d125      	bne.n	8010bc8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b7c:	4b7a      	ldr	r3, [pc, #488]	; (8010d68 <tcp_receive+0x274>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	89db      	ldrh	r3, [r3, #14]
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d91c      	bls.n	8010bc8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b8e:	4b76      	ldr	r3, [pc, #472]	; (8010d68 <tcp_receive+0x274>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	89db      	ldrh	r3, [r3, #14]
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d205      	bcs.n	8010bb8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010bb8:	4b69      	ldr	r3, [pc, #420]	; (8010d60 <tcp_receive+0x26c>)
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010bc0:	4b68      	ldr	r3, [pc, #416]	; (8010d64 <tcp_receive+0x270>)
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010bc8:	4b66      	ldr	r3, [pc, #408]	; (8010d64 <tcp_receive+0x270>)
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	dc58      	bgt.n	8010c88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010bd6:	4b65      	ldr	r3, [pc, #404]	; (8010d6c <tcp_receive+0x278>)
 8010bd8:	881b      	ldrh	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d14b      	bne.n	8010c76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010be8:	4413      	add	r3, r2
 8010bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d142      	bne.n	8010c76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	db3d      	blt.n	8010c76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bfe:	4b59      	ldr	r3, [pc, #356]	; (8010d64 <tcp_receive+0x270>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d137      	bne.n	8010c76 <tcp_receive+0x182>
              found_dupack = 1;
 8010c06:	2301      	movs	r3, #1
 8010c08:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c10:	2bff      	cmp	r3, #255	; 0xff
 8010c12:	d007      	beq.n	8010c24 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d91b      	bls.n	8010c66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d30a      	bcc.n	8010c5c <tcp_receive+0x168>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c50:	4413      	add	r3, r2
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c5a:	e004      	b.n	8010c66 <tcp_receive+0x172>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d902      	bls.n	8010c76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f002 fb55 	bl	8013320 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f040 8161 	bne.w	8010f40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c86:	e15b      	b.n	8010f40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c88:	4b36      	ldr	r3, [pc, #216]	; (8010d64 <tcp_receive+0x270>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c90:	1ad3      	subs	r3, r2, r3
 8010c92:	3b01      	subs	r3, #1
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f2c0 814e 	blt.w	8010f36 <tcp_receive+0x442>
 8010c9a:	4b32      	ldr	r3, [pc, #200]	; (8010d64 <tcp_receive+0x270>)
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f300 8146 	bgt.w	8010f36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	8b5b      	ldrh	r3, [r3, #26]
 8010cae:	f003 0304 	and.w	r3, r3, #4
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d010      	beq.n	8010cd8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	8b5b      	ldrh	r3, [r3, #26]
 8010cba:	f023 0304 	bic.w	r3, r3, #4
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ce6:	10db      	asrs	r3, r3, #3
 8010ce8:	b21b      	sxth	r3, r3
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	4413      	add	r3, r2
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	b21a      	sxth	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010d00:	4b18      	ldr	r3, [pc, #96]	; (8010d64 <tcp_receive+0x270>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010d18:	4b12      	ldr	r3, [pc, #72]	; (8010d64 <tcp_receive+0x270>)
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	7d1b      	ldrb	r3, [r3, #20]
 8010d24:	2b03      	cmp	r3, #3
 8010d26:	f240 8097 	bls.w	8010e58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d245      	bcs.n	8010dc6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	8b5b      	ldrh	r3, [r3, #26]
 8010d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d014      	beq.n	8010d70 <tcp_receive+0x27c>
 8010d46:	2301      	movs	r3, #1
 8010d48:	e013      	b.n	8010d72 <tcp_receive+0x27e>
 8010d4a:	bf00      	nop
 8010d4c:	0801b784 	.word	0x0801b784
 8010d50:	0801bab4 	.word	0x0801bab4
 8010d54:	0801b7d0 	.word	0x0801b7d0
 8010d58:	0801bad0 	.word	0x0801bad0
 8010d5c:	20011b8c 	.word	0x20011b8c
 8010d60:	20011b80 	.word	0x20011b80
 8010d64:	20011b84 	.word	0x20011b84
 8010d68:	20011b70 	.word	0x20011b70
 8010d6c:	20011b8a 	.word	0x20011b8a
 8010d70:	2302      	movs	r3, #2
 8010d72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d80:	fb12 f303 	smulbb	r3, r2, r3
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	bf28      	it	cs
 8010d8c:	4613      	movcs	r3, r2
 8010d8e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d98:	4413      	add	r3, r2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d309      	bcc.n	8010dba <tcp_receive+0x2c6>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dae:	4413      	add	r3, r2
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010db8:	e04e      	b.n	8010e58 <tcp_receive+0x364>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010dc4:	e048      	b.n	8010e58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010dcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dce:	4413      	add	r3, r2
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d309      	bcc.n	8010df0 <tcp_receive+0x2fc>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010de2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010de4:	4413      	add	r3, r2
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010dee:	e004      	b.n	8010dfa <tcp_receive+0x306>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010df6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d326      	bcc.n	8010e58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e2a:	4413      	add	r3, r2
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d30a      	bcc.n	8010e4e <tcp_receive+0x35a>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e42:	4413      	add	r3, r2
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e4c:	e004      	b.n	8010e58 <tcp_receive+0x364>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e60:	4a98      	ldr	r2, [pc, #608]	; (80110c4 <tcp_receive+0x5d0>)
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7ff fdca 	bl	80109fc <tcp_free_acked_segments>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e76:	4a94      	ldr	r2, [pc, #592]	; (80110c8 <tcp_receive+0x5d4>)
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f7ff fdbf 	bl	80109fc <tcp_free_acked_segments>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d104      	bne.n	8010e96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e92:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e94:	e002      	b.n	8010e9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d103      	bne.n	8010eb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010eb8:	4b84      	ldr	r3, [pc, #528]	; (80110cc <tcp_receive+0x5d8>)
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	8b5b      	ldrh	r3, [r3, #26]
 8010eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d035      	beq.n	8010f3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d118      	bne.n	8010f0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00c      	beq.n	8010efc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fa fd03 	bl	800b8fa <lwip_htonl>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	dc20      	bgt.n	8010f3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	8b5b      	ldrh	r3, [r3, #26]
 8010f00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f0a:	e018      	b.n	8010f3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fa fcee 	bl	800b8fa <lwip_htonl>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	1ae3      	subs	r3, r4, r3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	dc0b      	bgt.n	8010f3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	8b5b      	ldrh	r3, [r3, #26]
 8010f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f34:	e003      	b.n	8010f3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f002 fbf0 	bl	801371c <tcp_send_empty_ack>
 8010f3c:	e000      	b.n	8010f40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d05b      	beq.n	8011000 <tcp_receive+0x50c>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f4c:	4b60      	ldr	r3, [pc, #384]	; (80110d0 <tcp_receive+0x5dc>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	1ad3      	subs	r3, r2, r3
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	da54      	bge.n	8011000 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010f56:	4b5f      	ldr	r3, [pc, #380]	; (80110d4 <tcp_receive+0x5e0>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f74:	10db      	asrs	r3, r3, #3
 8010f76:	b21b      	sxth	r3, r3
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f8e:	4413      	add	r3, r2
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	b21a      	sxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	da05      	bge.n	8010fac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010fa4:	425b      	negs	r3, r3
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010fac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fb6:	109b      	asrs	r3, r3, #2
 8010fb8:	b21b      	sxth	r3, r3
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	1ad3      	subs	r3, r2, r3
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010fd0:	4413      	add	r3, r2
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	b21a      	sxth	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010fe0:	10db      	asrs	r3, r3, #3
 8010fe2:	b21b      	sxth	r3, r3
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4413      	add	r3, r2
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	b21a      	sxth	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011000:	4b35      	ldr	r3, [pc, #212]	; (80110d8 <tcp_receive+0x5e4>)
 8011002:	881b      	ldrh	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 84e2 	beq.w	80119ce <tcp_receive+0xeda>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	7d1b      	ldrb	r3, [r3, #20]
 801100e:	2b06      	cmp	r3, #6
 8011010:	f200 84dd 	bhi.w	80119ce <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011018:	4b30      	ldr	r3, [pc, #192]	; (80110dc <tcp_receive+0x5e8>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	1ad3      	subs	r3, r2, r3
 801101e:	3b01      	subs	r3, #1
 8011020:	2b00      	cmp	r3, #0
 8011022:	f2c0 808f 	blt.w	8011144 <tcp_receive+0x650>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801102a:	4b2b      	ldr	r3, [pc, #172]	; (80110d8 <tcp_receive+0x5e4>)
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	4619      	mov	r1, r3
 8011030:	4b2a      	ldr	r3, [pc, #168]	; (80110dc <tcp_receive+0x5e8>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	440b      	add	r3, r1
 8011036:	1ad3      	subs	r3, r2, r3
 8011038:	3301      	adds	r3, #1
 801103a:	2b00      	cmp	r3, #0
 801103c:	f300 8082 	bgt.w	8011144 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011040:	4b27      	ldr	r3, [pc, #156]	; (80110e0 <tcp_receive+0x5ec>)
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801104a:	4b24      	ldr	r3, [pc, #144]	; (80110dc <tcp_receive+0x5e8>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	1ad3      	subs	r3, r2, r3
 8011050:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011052:	4b23      	ldr	r3, [pc, #140]	; (80110e0 <tcp_receive+0x5ec>)
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d106      	bne.n	8011068 <tcp_receive+0x574>
 801105a:	4b22      	ldr	r3, [pc, #136]	; (80110e4 <tcp_receive+0x5f0>)
 801105c:	f240 5294 	movw	r2, #1428	; 0x594
 8011060:	4921      	ldr	r1, [pc, #132]	; (80110e8 <tcp_receive+0x5f4>)
 8011062:	4822      	ldr	r0, [pc, #136]	; (80110ec <tcp_receive+0x5f8>)
 8011064:	f005 fcac 	bl	80169c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801106e:	4293      	cmp	r3, r2
 8011070:	d906      	bls.n	8011080 <tcp_receive+0x58c>
 8011072:	4b1c      	ldr	r3, [pc, #112]	; (80110e4 <tcp_receive+0x5f0>)
 8011074:	f240 5295 	movw	r2, #1429	; 0x595
 8011078:	491d      	ldr	r1, [pc, #116]	; (80110f0 <tcp_receive+0x5fc>)
 801107a:	481c      	ldr	r0, [pc, #112]	; (80110ec <tcp_receive+0x5f8>)
 801107c:	f005 fca0 	bl	80169c0 <iprintf>
      off = (u16_t)off32;
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011082:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011086:	4b16      	ldr	r3, [pc, #88]	; (80110e0 <tcp_receive+0x5ec>)
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	891b      	ldrh	r3, [r3, #8]
 801108c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011090:	429a      	cmp	r2, r3
 8011092:	d906      	bls.n	80110a2 <tcp_receive+0x5ae>
 8011094:	4b13      	ldr	r3, [pc, #76]	; (80110e4 <tcp_receive+0x5f0>)
 8011096:	f240 5297 	movw	r2, #1431	; 0x597
 801109a:	4916      	ldr	r1, [pc, #88]	; (80110f4 <tcp_receive+0x600>)
 801109c:	4813      	ldr	r0, [pc, #76]	; (80110ec <tcp_receive+0x5f8>)
 801109e:	f005 fc8f 	bl	80169c0 <iprintf>
      inseg.len -= off;
 80110a2:	4b0f      	ldr	r3, [pc, #60]	; (80110e0 <tcp_receive+0x5ec>)
 80110a4:	891a      	ldrh	r2, [r3, #8]
 80110a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	4b0c      	ldr	r3, [pc, #48]	; (80110e0 <tcp_receive+0x5ec>)
 80110b0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80110b2:	4b0b      	ldr	r3, [pc, #44]	; (80110e0 <tcp_receive+0x5ec>)
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	891a      	ldrh	r2, [r3, #8]
 80110b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80110c0:	e02a      	b.n	8011118 <tcp_receive+0x624>
 80110c2:	bf00      	nop
 80110c4:	0801baec 	.word	0x0801baec
 80110c8:	0801baf4 	.word	0x0801baf4
 80110cc:	20011b88 	.word	0x20011b88
 80110d0:	20011b84 	.word	0x20011b84
 80110d4:	20011b48 	.word	0x20011b48
 80110d8:	20011b8a 	.word	0x20011b8a
 80110dc:	20011b80 	.word	0x20011b80
 80110e0:	20011b60 	.word	0x20011b60
 80110e4:	0801b784 	.word	0x0801b784
 80110e8:	0801bafc 	.word	0x0801bafc
 80110ec:	0801b7d0 	.word	0x0801b7d0
 80110f0:	0801bb0c 	.word	0x0801bb0c
 80110f4:	0801bb1c 	.word	0x0801bb1c
        off -= p->len;
 80110f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110fa:	895b      	ldrh	r3, [r3, #10]
 80110fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011108:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801110a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801110c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801110e:	2200      	movs	r2, #0
 8011110:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801111a:	895b      	ldrh	r3, [r3, #10]
 801111c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011120:	429a      	cmp	r2, r3
 8011122:	d8e9      	bhi.n	80110f8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011128:	4619      	mov	r1, r3
 801112a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801112c:	f7fc f850 	bl	800d1d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011134:	4a91      	ldr	r2, [pc, #580]	; (801137c <tcp_receive+0x888>)
 8011136:	6013      	str	r3, [r2, #0]
 8011138:	4b91      	ldr	r3, [pc, #580]	; (8011380 <tcp_receive+0x88c>)
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	4a8f      	ldr	r2, [pc, #572]	; (801137c <tcp_receive+0x888>)
 801113e:	6812      	ldr	r2, [r2, #0]
 8011140:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011142:	e00d      	b.n	8011160 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011144:	4b8d      	ldr	r3, [pc, #564]	; (801137c <tcp_receive+0x888>)
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	da06      	bge.n	8011160 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	8b5b      	ldrh	r3, [r3, #26]
 8011156:	f043 0302 	orr.w	r3, r3, #2
 801115a:	b29a      	uxth	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011160:	4b86      	ldr	r3, [pc, #536]	; (801137c <tcp_receive+0x888>)
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	2b00      	cmp	r3, #0
 801116c:	f2c0 842a 	blt.w	80119c4 <tcp_receive+0xed0>
 8011170:	4b82      	ldr	r3, [pc, #520]	; (801137c <tcp_receive+0x888>)
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011178:	6879      	ldr	r1, [r7, #4]
 801117a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801117c:	440b      	add	r3, r1
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	3301      	adds	r3, #1
 8011182:	2b00      	cmp	r3, #0
 8011184:	f300 841e 	bgt.w	80119c4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801118c:	4b7b      	ldr	r3, [pc, #492]	; (801137c <tcp_receive+0x888>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	429a      	cmp	r2, r3
 8011192:	f040 829a 	bne.w	80116ca <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011196:	4b7a      	ldr	r3, [pc, #488]	; (8011380 <tcp_receive+0x88c>)
 8011198:	891c      	ldrh	r4, [r3, #8]
 801119a:	4b79      	ldr	r3, [pc, #484]	; (8011380 <tcp_receive+0x88c>)
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	899b      	ldrh	r3, [r3, #12]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fa fb94 	bl	800b8d0 <lwip_htons>
 80111a8:	4603      	mov	r3, r0
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	f003 0303 	and.w	r3, r3, #3
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d001      	beq.n	80111b8 <tcp_receive+0x6c4>
 80111b4:	2301      	movs	r3, #1
 80111b6:	e000      	b.n	80111ba <tcp_receive+0x6c6>
 80111b8:	2300      	movs	r3, #0
 80111ba:	4423      	add	r3, r4
 80111bc:	b29a      	uxth	r2, r3
 80111be:	4b71      	ldr	r3, [pc, #452]	; (8011384 <tcp_receive+0x890>)
 80111c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111c6:	4b6f      	ldr	r3, [pc, #444]	; (8011384 <tcp_receive+0x890>)
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d275      	bcs.n	80112ba <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111ce:	4b6c      	ldr	r3, [pc, #432]	; (8011380 <tcp_receive+0x88c>)
 80111d0:	68db      	ldr	r3, [r3, #12]
 80111d2:	899b      	ldrh	r3, [r3, #12]
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fa fb7a 	bl	800b8d0 <lwip_htons>
 80111dc:	4603      	mov	r3, r0
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	f003 0301 	and.w	r3, r3, #1
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d01f      	beq.n	8011228 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80111e8:	4b65      	ldr	r3, [pc, #404]	; (8011380 <tcp_receive+0x88c>)
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	899b      	ldrh	r3, [r3, #12]
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	b21b      	sxth	r3, r3
 80111f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111f6:	b21c      	sxth	r4, r3
 80111f8:	4b61      	ldr	r3, [pc, #388]	; (8011380 <tcp_receive+0x88c>)
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	899b      	ldrh	r3, [r3, #12]
 80111fe:	b29b      	uxth	r3, r3
 8011200:	4618      	mov	r0, r3
 8011202:	f7fa fb65 	bl	800b8d0 <lwip_htons>
 8011206:	4603      	mov	r3, r0
 8011208:	b2db      	uxtb	r3, r3
 801120a:	b29b      	uxth	r3, r3
 801120c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fa fb5c 	bl	800b8d0 <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b21b      	sxth	r3, r3
 801121c:	4323      	orrs	r3, r4
 801121e:	b21a      	sxth	r2, r3
 8011220:	4b57      	ldr	r3, [pc, #348]	; (8011380 <tcp_receive+0x88c>)
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	b292      	uxth	r2, r2
 8011226:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801122c:	4b54      	ldr	r3, [pc, #336]	; (8011380 <tcp_receive+0x88c>)
 801122e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011230:	4b53      	ldr	r3, [pc, #332]	; (8011380 <tcp_receive+0x88c>)
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	899b      	ldrh	r3, [r3, #12]
 8011236:	b29b      	uxth	r3, r3
 8011238:	4618      	mov	r0, r3
 801123a:	f7fa fb49 	bl	800b8d0 <lwip_htons>
 801123e:	4603      	mov	r3, r0
 8011240:	b2db      	uxtb	r3, r3
 8011242:	f003 0302 	and.w	r3, r3, #2
 8011246:	2b00      	cmp	r3, #0
 8011248:	d005      	beq.n	8011256 <tcp_receive+0x762>
            inseg.len -= 1;
 801124a:	4b4d      	ldr	r3, [pc, #308]	; (8011380 <tcp_receive+0x88c>)
 801124c:	891b      	ldrh	r3, [r3, #8]
 801124e:	3b01      	subs	r3, #1
 8011250:	b29a      	uxth	r2, r3
 8011252:	4b4b      	ldr	r3, [pc, #300]	; (8011380 <tcp_receive+0x88c>)
 8011254:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011256:	4b4a      	ldr	r3, [pc, #296]	; (8011380 <tcp_receive+0x88c>)
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	4a49      	ldr	r2, [pc, #292]	; (8011380 <tcp_receive+0x88c>)
 801125c:	8912      	ldrh	r2, [r2, #8]
 801125e:	4611      	mov	r1, r2
 8011260:	4618      	mov	r0, r3
 8011262:	f7fb feb5 	bl	800cfd0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011266:	4b46      	ldr	r3, [pc, #280]	; (8011380 <tcp_receive+0x88c>)
 8011268:	891c      	ldrh	r4, [r3, #8]
 801126a:	4b45      	ldr	r3, [pc, #276]	; (8011380 <tcp_receive+0x88c>)
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	899b      	ldrh	r3, [r3, #12]
 8011270:	b29b      	uxth	r3, r3
 8011272:	4618      	mov	r0, r3
 8011274:	f7fa fb2c 	bl	800b8d0 <lwip_htons>
 8011278:	4603      	mov	r3, r0
 801127a:	b2db      	uxtb	r3, r3
 801127c:	f003 0303 	and.w	r3, r3, #3
 8011280:	2b00      	cmp	r3, #0
 8011282:	d001      	beq.n	8011288 <tcp_receive+0x794>
 8011284:	2301      	movs	r3, #1
 8011286:	e000      	b.n	801128a <tcp_receive+0x796>
 8011288:	2300      	movs	r3, #0
 801128a:	4423      	add	r3, r4
 801128c:	b29a      	uxth	r2, r3
 801128e:	4b3d      	ldr	r3, [pc, #244]	; (8011384 <tcp_receive+0x890>)
 8011290:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011292:	4b3c      	ldr	r3, [pc, #240]	; (8011384 <tcp_receive+0x890>)
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	4b38      	ldr	r3, [pc, #224]	; (801137c <tcp_receive+0x888>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	441a      	add	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a2:	6879      	ldr	r1, [r7, #4]
 80112a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112a6:	440b      	add	r3, r1
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d006      	beq.n	80112ba <tcp_receive+0x7c6>
 80112ac:	4b36      	ldr	r3, [pc, #216]	; (8011388 <tcp_receive+0x894>)
 80112ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80112b2:	4936      	ldr	r1, [pc, #216]	; (801138c <tcp_receive+0x898>)
 80112b4:	4836      	ldr	r0, [pc, #216]	; (8011390 <tcp_receive+0x89c>)
 80112b6:	f005 fb83 	bl	80169c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 80e7 	beq.w	8011492 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80112c4:	4b2e      	ldr	r3, [pc, #184]	; (8011380 <tcp_receive+0x88c>)
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	899b      	ldrh	r3, [r3, #12]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fa faff 	bl	800b8d0 <lwip_htons>
 80112d2:	4603      	mov	r3, r0
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	f003 0301 	and.w	r3, r3, #1
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d010      	beq.n	8011300 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80112de:	e00a      	b.n	80112f6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80112f0:	68f8      	ldr	r0, [r7, #12]
 80112f2:	f7fd fcc4 	bl	800ec7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1f0      	bne.n	80112e0 <tcp_receive+0x7ec>
 80112fe:	e0c8      	b.n	8011492 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011304:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011306:	e052      	b.n	80113ae <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	899b      	ldrh	r3, [r3, #12]
 801130e:	b29b      	uxth	r3, r3
 8011310:	4618      	mov	r0, r3
 8011312:	f7fa fadd 	bl	800b8d0 <lwip_htons>
 8011316:	4603      	mov	r3, r0
 8011318:	b2db      	uxtb	r3, r3
 801131a:	f003 0301 	and.w	r3, r3, #1
 801131e:	2b00      	cmp	r3, #0
 8011320:	d03d      	beq.n	801139e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011322:	4b17      	ldr	r3, [pc, #92]	; (8011380 <tcp_receive+0x88c>)
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	899b      	ldrh	r3, [r3, #12]
 8011328:	b29b      	uxth	r3, r3
 801132a:	4618      	mov	r0, r3
 801132c:	f7fa fad0 	bl	800b8d0 <lwip_htons>
 8011330:	4603      	mov	r3, r0
 8011332:	b2db      	uxtb	r3, r3
 8011334:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011338:	2b00      	cmp	r3, #0
 801133a:	d130      	bne.n	801139e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801133c:	4b10      	ldr	r3, [pc, #64]	; (8011380 <tcp_receive+0x88c>)
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	899b      	ldrh	r3, [r3, #12]
 8011342:	b29c      	uxth	r4, r3
 8011344:	2001      	movs	r0, #1
 8011346:	f7fa fac3 	bl	800b8d0 <lwip_htons>
 801134a:	4603      	mov	r3, r0
 801134c:	461a      	mov	r2, r3
 801134e:	4b0c      	ldr	r3, [pc, #48]	; (8011380 <tcp_receive+0x88c>)
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	4322      	orrs	r2, r4
 8011354:	b292      	uxth	r2, r2
 8011356:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011358:	4b09      	ldr	r3, [pc, #36]	; (8011380 <tcp_receive+0x88c>)
 801135a:	891c      	ldrh	r4, [r3, #8]
 801135c:	4b08      	ldr	r3, [pc, #32]	; (8011380 <tcp_receive+0x88c>)
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	899b      	ldrh	r3, [r3, #12]
 8011362:	b29b      	uxth	r3, r3
 8011364:	4618      	mov	r0, r3
 8011366:	f7fa fab3 	bl	800b8d0 <lwip_htons>
 801136a:	4603      	mov	r3, r0
 801136c:	b2db      	uxtb	r3, r3
 801136e:	f003 0303 	and.w	r3, r3, #3
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00e      	beq.n	8011394 <tcp_receive+0x8a0>
 8011376:	2301      	movs	r3, #1
 8011378:	e00d      	b.n	8011396 <tcp_receive+0x8a2>
 801137a:	bf00      	nop
 801137c:	20011b80 	.word	0x20011b80
 8011380:	20011b60 	.word	0x20011b60
 8011384:	20011b8a 	.word	0x20011b8a
 8011388:	0801b784 	.word	0x0801b784
 801138c:	0801bb2c 	.word	0x0801bb2c
 8011390:	0801b7d0 	.word	0x0801b7d0
 8011394:	2300      	movs	r3, #0
 8011396:	4423      	add	r3, r4
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b98      	ldr	r3, [pc, #608]	; (80115fc <tcp_receive+0xb08>)
 801139c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801139e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80113a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80113a8:	6938      	ldr	r0, [r7, #16]
 80113aa:	f7fd fc68 	bl	800ec7e <tcp_seg_free>
            while (next &&
 80113ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d00e      	beq.n	80113d2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80113b4:	4b91      	ldr	r3, [pc, #580]	; (80115fc <tcp_receive+0xb08>)
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	461a      	mov	r2, r3
 80113ba:	4b91      	ldr	r3, [pc, #580]	; (8011600 <tcp_receive+0xb0c>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	441a      	add	r2, r3
 80113c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80113c8:	8909      	ldrh	r1, [r1, #8]
 80113ca:	440b      	add	r3, r1
 80113cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	da9a      	bge.n	8011308 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80113d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d059      	beq.n	801148c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80113d8:	4b88      	ldr	r3, [pc, #544]	; (80115fc <tcp_receive+0xb08>)
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	461a      	mov	r2, r3
 80113de:	4b88      	ldr	r3, [pc, #544]	; (8011600 <tcp_receive+0xb0c>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	441a      	add	r2, r3
 80113e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	dd4d      	ble.n	801148c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80113f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	4b81      	ldr	r3, [pc, #516]	; (8011600 <tcp_receive+0xb0c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	b29a      	uxth	r2, r3
 8011402:	4b80      	ldr	r3, [pc, #512]	; (8011604 <tcp_receive+0xb10>)
 8011404:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011406:	4b7f      	ldr	r3, [pc, #508]	; (8011604 <tcp_receive+0xb10>)
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	899b      	ldrh	r3, [r3, #12]
 801140c:	b29b      	uxth	r3, r3
 801140e:	4618      	mov	r0, r3
 8011410:	f7fa fa5e 	bl	800b8d0 <lwip_htons>
 8011414:	4603      	mov	r3, r0
 8011416:	b2db      	uxtb	r3, r3
 8011418:	f003 0302 	and.w	r3, r3, #2
 801141c:	2b00      	cmp	r3, #0
 801141e:	d005      	beq.n	801142c <tcp_receive+0x938>
                inseg.len -= 1;
 8011420:	4b78      	ldr	r3, [pc, #480]	; (8011604 <tcp_receive+0xb10>)
 8011422:	891b      	ldrh	r3, [r3, #8]
 8011424:	3b01      	subs	r3, #1
 8011426:	b29a      	uxth	r2, r3
 8011428:	4b76      	ldr	r3, [pc, #472]	; (8011604 <tcp_receive+0xb10>)
 801142a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801142c:	4b75      	ldr	r3, [pc, #468]	; (8011604 <tcp_receive+0xb10>)
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	4a74      	ldr	r2, [pc, #464]	; (8011604 <tcp_receive+0xb10>)
 8011432:	8912      	ldrh	r2, [r2, #8]
 8011434:	4611      	mov	r1, r2
 8011436:	4618      	mov	r0, r3
 8011438:	f7fb fdca 	bl	800cfd0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801143c:	4b71      	ldr	r3, [pc, #452]	; (8011604 <tcp_receive+0xb10>)
 801143e:	891c      	ldrh	r4, [r3, #8]
 8011440:	4b70      	ldr	r3, [pc, #448]	; (8011604 <tcp_receive+0xb10>)
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	899b      	ldrh	r3, [r3, #12]
 8011446:	b29b      	uxth	r3, r3
 8011448:	4618      	mov	r0, r3
 801144a:	f7fa fa41 	bl	800b8d0 <lwip_htons>
 801144e:	4603      	mov	r3, r0
 8011450:	b2db      	uxtb	r3, r3
 8011452:	f003 0303 	and.w	r3, r3, #3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <tcp_receive+0x96a>
 801145a:	2301      	movs	r3, #1
 801145c:	e000      	b.n	8011460 <tcp_receive+0x96c>
 801145e:	2300      	movs	r3, #0
 8011460:	4423      	add	r3, r4
 8011462:	b29a      	uxth	r2, r3
 8011464:	4b65      	ldr	r3, [pc, #404]	; (80115fc <tcp_receive+0xb08>)
 8011466:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011468:	4b64      	ldr	r3, [pc, #400]	; (80115fc <tcp_receive+0xb08>)
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	461a      	mov	r2, r3
 801146e:	4b64      	ldr	r3, [pc, #400]	; (8011600 <tcp_receive+0xb0c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	441a      	add	r2, r3
 8011474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	429a      	cmp	r2, r3
 801147c:	d006      	beq.n	801148c <tcp_receive+0x998>
 801147e:	4b62      	ldr	r3, [pc, #392]	; (8011608 <tcp_receive+0xb14>)
 8011480:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011484:	4961      	ldr	r1, [pc, #388]	; (801160c <tcp_receive+0xb18>)
 8011486:	4862      	ldr	r0, [pc, #392]	; (8011610 <tcp_receive+0xb1c>)
 8011488:	f005 fa9a 	bl	80169c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011490:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011492:	4b5a      	ldr	r3, [pc, #360]	; (80115fc <tcp_receive+0xb08>)
 8011494:	881b      	ldrh	r3, [r3, #0]
 8011496:	461a      	mov	r2, r3
 8011498:	4b59      	ldr	r3, [pc, #356]	; (8011600 <tcp_receive+0xb0c>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	441a      	add	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80114a6:	4b55      	ldr	r3, [pc, #340]	; (80115fc <tcp_receive+0xb08>)
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d206      	bcs.n	80114bc <tcp_receive+0x9c8>
 80114ae:	4b56      	ldr	r3, [pc, #344]	; (8011608 <tcp_receive+0xb14>)
 80114b0:	f240 6207 	movw	r2, #1543	; 0x607
 80114b4:	4957      	ldr	r1, [pc, #348]	; (8011614 <tcp_receive+0xb20>)
 80114b6:	4856      	ldr	r0, [pc, #344]	; (8011610 <tcp_receive+0xb1c>)
 80114b8:	f005 fa82 	bl	80169c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80114c0:	4b4e      	ldr	r3, [pc, #312]	; (80115fc <tcp_receive+0xb08>)
 80114c2:	881b      	ldrh	r3, [r3, #0]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f7fc fd99 	bl	800e004 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80114d2:	4b4c      	ldr	r3, [pc, #304]	; (8011604 <tcp_receive+0xb10>)
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	891b      	ldrh	r3, [r3, #8]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d006      	beq.n	80114ea <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80114dc:	4b49      	ldr	r3, [pc, #292]	; (8011604 <tcp_receive+0xb10>)
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	4a4d      	ldr	r2, [pc, #308]	; (8011618 <tcp_receive+0xb24>)
 80114e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80114e4:	4b47      	ldr	r3, [pc, #284]	; (8011604 <tcp_receive+0xb10>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80114ea:	4b46      	ldr	r3, [pc, #280]	; (8011604 <tcp_receive+0xb10>)
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	899b      	ldrh	r3, [r3, #12]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fa f9ec 	bl	800b8d0 <lwip_htons>
 80114f8:	4603      	mov	r3, r0
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	f003 0301 	and.w	r3, r3, #1
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 80b8 	beq.w	8011676 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011506:	4b45      	ldr	r3, [pc, #276]	; (801161c <tcp_receive+0xb28>)
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	f043 0320 	orr.w	r3, r3, #32
 801150e:	b2da      	uxtb	r2, r3
 8011510:	4b42      	ldr	r3, [pc, #264]	; (801161c <tcp_receive+0xb28>)
 8011512:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011514:	e0af      	b.n	8011676 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801151a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	4a36      	ldr	r2, [pc, #216]	; (8011600 <tcp_receive+0xb0c>)
 8011526:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	891b      	ldrh	r3, [r3, #8]
 801152c:	461c      	mov	r4, r3
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	899b      	ldrh	r3, [r3, #12]
 8011534:	b29b      	uxth	r3, r3
 8011536:	4618      	mov	r0, r3
 8011538:	f7fa f9ca 	bl	800b8d0 <lwip_htons>
 801153c:	4603      	mov	r3, r0
 801153e:	b2db      	uxtb	r3, r3
 8011540:	f003 0303 	and.w	r3, r3, #3
 8011544:	2b00      	cmp	r3, #0
 8011546:	d001      	beq.n	801154c <tcp_receive+0xa58>
 8011548:	2301      	movs	r3, #1
 801154a:	e000      	b.n	801154e <tcp_receive+0xa5a>
 801154c:	2300      	movs	r3, #0
 801154e:	191a      	adds	r2, r3, r4
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011554:	441a      	add	r2, r3
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801155e:	461c      	mov	r4, r3
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	891b      	ldrh	r3, [r3, #8]
 8011564:	461d      	mov	r5, r3
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	899b      	ldrh	r3, [r3, #12]
 801156c:	b29b      	uxth	r3, r3
 801156e:	4618      	mov	r0, r3
 8011570:	f7fa f9ae 	bl	800b8d0 <lwip_htons>
 8011574:	4603      	mov	r3, r0
 8011576:	b2db      	uxtb	r3, r3
 8011578:	f003 0303 	and.w	r3, r3, #3
 801157c:	2b00      	cmp	r3, #0
 801157e:	d001      	beq.n	8011584 <tcp_receive+0xa90>
 8011580:	2301      	movs	r3, #1
 8011582:	e000      	b.n	8011586 <tcp_receive+0xa92>
 8011584:	2300      	movs	r3, #0
 8011586:	442b      	add	r3, r5
 8011588:	429c      	cmp	r4, r3
 801158a:	d206      	bcs.n	801159a <tcp_receive+0xaa6>
 801158c:	4b1e      	ldr	r3, [pc, #120]	; (8011608 <tcp_receive+0xb14>)
 801158e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011592:	4923      	ldr	r1, [pc, #140]	; (8011620 <tcp_receive+0xb2c>)
 8011594:	481e      	ldr	r0, [pc, #120]	; (8011610 <tcp_receive+0xb1c>)
 8011596:	f005 fa13 	bl	80169c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	891b      	ldrh	r3, [r3, #8]
 801159e:	461c      	mov	r4, r3
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	899b      	ldrh	r3, [r3, #12]
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7fa f991 	bl	800b8d0 <lwip_htons>
 80115ae:	4603      	mov	r3, r0
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	f003 0303 	and.w	r3, r3, #3
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d001      	beq.n	80115be <tcp_receive+0xaca>
 80115ba:	2301      	movs	r3, #1
 80115bc:	e000      	b.n	80115c0 <tcp_receive+0xacc>
 80115be:	2300      	movs	r3, #0
 80115c0:	1919      	adds	r1, r3, r4
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115c6:	b28b      	uxth	r3, r1
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7fc fd17 	bl	800e004 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	891b      	ldrh	r3, [r3, #8]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d028      	beq.n	8011632 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80115e0:	4b0d      	ldr	r3, [pc, #52]	; (8011618 <tcp_receive+0xb24>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d01d      	beq.n	8011624 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80115e8:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <tcp_receive+0xb24>)
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	4619      	mov	r1, r3
 80115f2:	4610      	mov	r0, r2
 80115f4:	f7fb ff40 	bl	800d478 <pbuf_cat>
 80115f8:	e018      	b.n	801162c <tcp_receive+0xb38>
 80115fa:	bf00      	nop
 80115fc:	20011b8a 	.word	0x20011b8a
 8011600:	20011b80 	.word	0x20011b80
 8011604:	20011b60 	.word	0x20011b60
 8011608:	0801b784 	.word	0x0801b784
 801160c:	0801bb64 	.word	0x0801bb64
 8011610:	0801b7d0 	.word	0x0801b7d0
 8011614:	0801bba0 	.word	0x0801bba0
 8011618:	20011b90 	.word	0x20011b90
 801161c:	20011b8d 	.word	0x20011b8d
 8011620:	0801bbc0 	.word	0x0801bbc0
            } else {
              recv_data = cseg->p;
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	4a70      	ldr	r2, [pc, #448]	; (80117ec <tcp_receive+0xcf8>)
 801162a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	2200      	movs	r2, #0
 8011630:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	899b      	ldrh	r3, [r3, #12]
 8011638:	b29b      	uxth	r3, r3
 801163a:	4618      	mov	r0, r3
 801163c:	f7fa f948 	bl	800b8d0 <lwip_htons>
 8011640:	4603      	mov	r3, r0
 8011642:	b2db      	uxtb	r3, r3
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00d      	beq.n	8011668 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801164c:	4b68      	ldr	r3, [pc, #416]	; (80117f0 <tcp_receive+0xcfc>)
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	f043 0320 	orr.w	r3, r3, #32
 8011654:	b2da      	uxtb	r2, r3
 8011656:	4b66      	ldr	r3, [pc, #408]	; (80117f0 <tcp_receive+0xcfc>)
 8011658:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	7d1b      	ldrb	r3, [r3, #20]
 801165e:	2b04      	cmp	r3, #4
 8011660:	d102      	bne.n	8011668 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2207      	movs	r2, #7
 8011666:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011670:	68b8      	ldr	r0, [r7, #8]
 8011672:	f7fd fb04 	bl	800ec7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801167a:	2b00      	cmp	r3, #0
 801167c:	d008      	beq.n	8011690 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801168a:	429a      	cmp	r2, r3
 801168c:	f43f af43 	beq.w	8011516 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	8b5b      	ldrh	r3, [r3, #26]
 8011694:	f003 0301 	and.w	r3, r3, #1
 8011698:	2b00      	cmp	r3, #0
 801169a:	d00e      	beq.n	80116ba <tcp_receive+0xbc6>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f023 0301 	bic.w	r3, r3, #1
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	835a      	strh	r2, [r3, #26]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	8b5b      	ldrh	r3, [r3, #26]
 80116ae:	f043 0302 	orr.w	r3, r3, #2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80116b8:	e188      	b.n	80119cc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	8b5b      	ldrh	r3, [r3, #26]
 80116be:	f043 0301 	orr.w	r3, r3, #1
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80116c8:	e180      	b.n	80119cc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d106      	bne.n	80116e0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80116d2:	4848      	ldr	r0, [pc, #288]	; (80117f4 <tcp_receive+0xd00>)
 80116d4:	f7fd faec 	bl	800ecb0 <tcp_seg_copy>
 80116d8:	4602      	mov	r2, r0
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	675a      	str	r2, [r3, #116]	; 0x74
 80116de:	e16d      	b.n	80119bc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80116e0:	2300      	movs	r3, #0
 80116e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80116ea:	e157      	b.n	801199c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	685a      	ldr	r2, [r3, #4]
 80116f2:	4b41      	ldr	r3, [pc, #260]	; (80117f8 <tcp_receive+0xd04>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d11d      	bne.n	8011736 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80116fa:	4b3e      	ldr	r3, [pc, #248]	; (80117f4 <tcp_receive+0xd00>)
 80116fc:	891a      	ldrh	r2, [r3, #8]
 80116fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011700:	891b      	ldrh	r3, [r3, #8]
 8011702:	429a      	cmp	r2, r3
 8011704:	f240 814f 	bls.w	80119a6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011708:	483a      	ldr	r0, [pc, #232]	; (80117f4 <tcp_receive+0xd00>)
 801170a:	f7fd fad1 	bl	800ecb0 <tcp_seg_copy>
 801170e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	2b00      	cmp	r3, #0
 8011714:	f000 8149 	beq.w	80119aa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801171a:	2b00      	cmp	r3, #0
 801171c:	d003      	beq.n	8011726 <tcp_receive+0xc32>
                    prev->next = cseg;
 801171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011720:	697a      	ldr	r2, [r7, #20]
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	e002      	b.n	801172c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801172c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801172e:	6978      	ldr	r0, [r7, #20]
 8011730:	f7ff f8dc 	bl	80108ec <tcp_oos_insert_segment>
                }
                break;
 8011734:	e139      	b.n	80119aa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011738:	2b00      	cmp	r3, #0
 801173a:	d117      	bne.n	801176c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801173c:	4b2e      	ldr	r3, [pc, #184]	; (80117f8 <tcp_receive+0xd04>)
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	2b00      	cmp	r3, #0
 801174a:	da57      	bge.n	80117fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801174c:	4829      	ldr	r0, [pc, #164]	; (80117f4 <tcp_receive+0xd00>)
 801174e:	f7fd faaf 	bl	800ecb0 <tcp_seg_copy>
 8011752:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	2b00      	cmp	r3, #0
 8011758:	f000 8129 	beq.w	80119ae <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	69ba      	ldr	r2, [r7, #24]
 8011760:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011764:	69b8      	ldr	r0, [r7, #24]
 8011766:	f7ff f8c1 	bl	80108ec <tcp_oos_insert_segment>
                  }
                  break;
 801176a:	e120      	b.n	80119ae <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801176c:	4b22      	ldr	r3, [pc, #136]	; (80117f8 <tcp_receive+0xd04>)
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	3b01      	subs	r3, #1
 801177a:	2b00      	cmp	r3, #0
 801177c:	db3e      	blt.n	80117fc <tcp_receive+0xd08>
 801177e:	4b1e      	ldr	r3, [pc, #120]	; (80117f8 <tcp_receive+0xd04>)
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	3301      	adds	r3, #1
 801178c:	2b00      	cmp	r3, #0
 801178e:	dc35      	bgt.n	80117fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011790:	4818      	ldr	r0, [pc, #96]	; (80117f4 <tcp_receive+0xd00>)
 8011792:	f7fd fa8d 	bl	800ecb0 <tcp_seg_copy>
 8011796:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	2b00      	cmp	r3, #0
 801179c:	f000 8109 	beq.w	80119b2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80117a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117a8:	8912      	ldrh	r2, [r2, #8]
 80117aa:	441a      	add	r2, r3
 80117ac:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <tcp_receive+0xd04>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	dd12      	ble.n	80117dc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80117b6:	4b10      	ldr	r3, [pc, #64]	; (80117f8 <tcp_receive+0xd04>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80117cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d2:	891b      	ldrh	r3, [r3, #8]
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7fb fbfa 	bl	800cfd0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80117dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117de:	69fa      	ldr	r2, [r7, #28]
 80117e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80117e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117e4:	69f8      	ldr	r0, [r7, #28]
 80117e6:	f7ff f881 	bl	80108ec <tcp_oos_insert_segment>
                  }
                  break;
 80117ea:	e0e2      	b.n	80119b2 <tcp_receive+0xebe>
 80117ec:	20011b90 	.word	0x20011b90
 80117f0:	20011b8d 	.word	0x20011b8d
 80117f4:	20011b60 	.word	0x20011b60
 80117f8:	20011b80 	.word	0x20011b80
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80117fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	f040 80c6 	bne.w	8011996 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801180a:	4b80      	ldr	r3, [pc, #512]	; (8011a0c <tcp_receive+0xf18>)
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011816:	2b00      	cmp	r3, #0
 8011818:	f340 80bd 	ble.w	8011996 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	899b      	ldrh	r3, [r3, #12]
 8011822:	b29b      	uxth	r3, r3
 8011824:	4618      	mov	r0, r3
 8011826:	f7fa f853 	bl	800b8d0 <lwip_htons>
 801182a:	4603      	mov	r3, r0
 801182c:	b2db      	uxtb	r3, r3
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	f040 80bf 	bne.w	80119b6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011838:	4875      	ldr	r0, [pc, #468]	; (8011a10 <tcp_receive+0xf1c>)
 801183a:	f7fd fa39 	bl	800ecb0 <tcp_seg_copy>
 801183e:	4602      	mov	r2, r0
 8011840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011842:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	f000 80b6 	beq.w	80119ba <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801184e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011856:	8912      	ldrh	r2, [r2, #8]
 8011858:	441a      	add	r2, r3
 801185a:	4b6c      	ldr	r3, [pc, #432]	; (8011a0c <tcp_receive+0xf18>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	2b00      	cmp	r3, #0
 8011862:	dd12      	ble.n	801188a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011864:	4b69      	ldr	r3, [pc, #420]	; (8011a0c <tcp_receive+0xf18>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	b29a      	uxth	r2, r3
 801186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	b29b      	uxth	r3, r3
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	b29a      	uxth	r2, r3
 8011876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011878:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801187a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187c:	685a      	ldr	r2, [r3, #4]
 801187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011880:	891b      	ldrh	r3, [r3, #8]
 8011882:	4619      	mov	r1, r3
 8011884:	4610      	mov	r0, r2
 8011886:	f7fb fba3 	bl	800cfd0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801188a:	4b62      	ldr	r3, [pc, #392]	; (8011a14 <tcp_receive+0xf20>)
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	4b5e      	ldr	r3, [pc, #376]	; (8011a0c <tcp_receive+0xf18>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	441a      	add	r2, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189a:	6879      	ldr	r1, [r7, #4]
 801189c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801189e:	440b      	add	r3, r1
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f340 8089 	ble.w	80119ba <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80118a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	899b      	ldrh	r3, [r3, #12]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fa f80c 	bl	800b8d0 <lwip_htons>
 80118b8:	4603      	mov	r3, r0
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	f003 0301 	and.w	r3, r3, #1
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d022      	beq.n	801190a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80118c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	899b      	ldrh	r3, [r3, #12]
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	b21b      	sxth	r3, r3
 80118d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80118d4:	b21c      	sxth	r4, r3
 80118d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	899b      	ldrh	r3, [r3, #12]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7f9 fff5 	bl	800b8d0 <lwip_htons>
 80118e6:	4603      	mov	r3, r0
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7f9 ffec 	bl	800b8d0 <lwip_htons>
 80118f8:	4603      	mov	r3, r0
 80118fa:	b21b      	sxth	r3, r3
 80118fc:	4323      	orrs	r3, r4
 80118fe:	b21a      	sxth	r2, r3
 8011900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	b292      	uxth	r2, r2
 8011908:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011914:	4413      	add	r3, r2
 8011916:	b299      	uxth	r1, r3
 8011918:	4b3c      	ldr	r3, [pc, #240]	; (8011a0c <tcp_receive+0xf18>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	b29a      	uxth	r2, r3
 801191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	1a8a      	subs	r2, r1, r2
 8011924:	b292      	uxth	r2, r2
 8011926:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	685a      	ldr	r2, [r3, #4]
 801192e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	891b      	ldrh	r3, [r3, #8]
 8011934:	4619      	mov	r1, r3
 8011936:	4610      	mov	r0, r2
 8011938:	f7fb fb4a 	bl	800cfd0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	891c      	ldrh	r4, [r3, #8]
 8011942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	899b      	ldrh	r3, [r3, #12]
 801194a:	b29b      	uxth	r3, r3
 801194c:	4618      	mov	r0, r3
 801194e:	f7f9 ffbf 	bl	800b8d0 <lwip_htons>
 8011952:	4603      	mov	r3, r0
 8011954:	b2db      	uxtb	r3, r3
 8011956:	f003 0303 	and.w	r3, r3, #3
 801195a:	2b00      	cmp	r3, #0
 801195c:	d001      	beq.n	8011962 <tcp_receive+0xe6e>
 801195e:	2301      	movs	r3, #1
 8011960:	e000      	b.n	8011964 <tcp_receive+0xe70>
 8011962:	2300      	movs	r3, #0
 8011964:	4423      	add	r3, r4
 8011966:	b29a      	uxth	r2, r3
 8011968:	4b2a      	ldr	r3, [pc, #168]	; (8011a14 <tcp_receive+0xf20>)
 801196a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801196c:	4b29      	ldr	r3, [pc, #164]	; (8011a14 <tcp_receive+0xf20>)
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	461a      	mov	r2, r3
 8011972:	4b26      	ldr	r3, [pc, #152]	; (8011a0c <tcp_receive+0xf18>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	441a      	add	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197c:	6879      	ldr	r1, [r7, #4]
 801197e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011980:	440b      	add	r3, r1
 8011982:	429a      	cmp	r2, r3
 8011984:	d019      	beq.n	80119ba <tcp_receive+0xec6>
 8011986:	4b24      	ldr	r3, [pc, #144]	; (8011a18 <tcp_receive+0xf24>)
 8011988:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801198c:	4923      	ldr	r1, [pc, #140]	; (8011a1c <tcp_receive+0xf28>)
 801198e:	4824      	ldr	r0, [pc, #144]	; (8011a20 <tcp_receive+0xf2c>)
 8011990:	f005 f816 	bl	80169c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011994:	e011      	b.n	80119ba <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	63bb      	str	r3, [r7, #56]	; 0x38
 801199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199e:	2b00      	cmp	r3, #0
 80119a0:	f47f aea4 	bne.w	80116ec <tcp_receive+0xbf8>
 80119a4:	e00a      	b.n	80119bc <tcp_receive+0xec8>
                break;
 80119a6:	bf00      	nop
 80119a8:	e008      	b.n	80119bc <tcp_receive+0xec8>
                break;
 80119aa:	bf00      	nop
 80119ac:	e006      	b.n	80119bc <tcp_receive+0xec8>
                  break;
 80119ae:	bf00      	nop
 80119b0:	e004      	b.n	80119bc <tcp_receive+0xec8>
                  break;
 80119b2:	bf00      	nop
 80119b4:	e002      	b.n	80119bc <tcp_receive+0xec8>
                  break;
 80119b6:	bf00      	nop
 80119b8:	e000      	b.n	80119bc <tcp_receive+0xec8>
                break;
 80119ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f001 fead 	bl	801371c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80119c2:	e003      	b.n	80119cc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f001 fea9 	bl	801371c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80119ca:	e01a      	b.n	8011a02 <tcp_receive+0xf0e>
 80119cc:	e019      	b.n	8011a02 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80119ce:	4b0f      	ldr	r3, [pc, #60]	; (8011a0c <tcp_receive+0xf18>)
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d6:	1ad3      	subs	r3, r2, r3
 80119d8:	2b00      	cmp	r3, #0
 80119da:	db0a      	blt.n	80119f2 <tcp_receive+0xefe>
 80119dc:	4b0b      	ldr	r3, [pc, #44]	; (8011a0c <tcp_receive+0xf18>)
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e4:	6879      	ldr	r1, [r7, #4]
 80119e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119e8:	440b      	add	r3, r1
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	3301      	adds	r3, #1
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	dd07      	ble.n	8011a02 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	8b5b      	ldrh	r3, [r3, #26]
 80119f6:	f043 0302 	orr.w	r3, r3, #2
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011a00:	e7ff      	b.n	8011a02 <tcp_receive+0xf0e>
 8011a02:	bf00      	nop
 8011a04:	3750      	adds	r7, #80	; 0x50
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bdb0      	pop	{r4, r5, r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	20011b80 	.word	0x20011b80
 8011a10:	20011b60 	.word	0x20011b60
 8011a14:	20011b8a 	.word	0x20011b8a
 8011a18:	0801b784 	.word	0x0801b784
 8011a1c:	0801bb2c 	.word	0x0801bb2c
 8011a20:	0801b7d0 	.word	0x0801b7d0

08011a24 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011a2a:	4b15      	ldr	r3, [pc, #84]	; (8011a80 <tcp_get_next_optbyte+0x5c>)
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	1c5a      	adds	r2, r3, #1
 8011a30:	b291      	uxth	r1, r2
 8011a32:	4a13      	ldr	r2, [pc, #76]	; (8011a80 <tcp_get_next_optbyte+0x5c>)
 8011a34:	8011      	strh	r1, [r2, #0]
 8011a36:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011a38:	4b12      	ldr	r3, [pc, #72]	; (8011a84 <tcp_get_next_optbyte+0x60>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d004      	beq.n	8011a4a <tcp_get_next_optbyte+0x26>
 8011a40:	4b11      	ldr	r3, [pc, #68]	; (8011a88 <tcp_get_next_optbyte+0x64>)
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	88fa      	ldrh	r2, [r7, #6]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d208      	bcs.n	8011a5c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011a4a:	4b10      	ldr	r3, [pc, #64]	; (8011a8c <tcp_get_next_optbyte+0x68>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	3314      	adds	r3, #20
 8011a50:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011a52:	88fb      	ldrh	r3, [r7, #6]
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	4413      	add	r3, r2
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	e00b      	b.n	8011a74 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011a5c:	88fb      	ldrh	r3, [r7, #6]
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	4b09      	ldr	r3, [pc, #36]	; (8011a88 <tcp_get_next_optbyte+0x64>)
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a6a:	4b06      	ldr	r3, [pc, #24]	; (8011a84 <tcp_get_next_optbyte+0x60>)
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	797b      	ldrb	r3, [r7, #5]
 8011a70:	4413      	add	r3, r2
 8011a72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr
 8011a80:	20011b7c 	.word	0x20011b7c
 8011a84:	20011b78 	.word	0x20011b78
 8011a88:	20011b76 	.word	0x20011b76
 8011a8c:	20011b70 	.word	0x20011b70

08011a90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <tcp_parseopt+0x1c>
 8011a9e:	4b32      	ldr	r3, [pc, #200]	; (8011b68 <tcp_parseopt+0xd8>)
 8011aa0:	f240 727d 	movw	r2, #1917	; 0x77d
 8011aa4:	4931      	ldr	r1, [pc, #196]	; (8011b6c <tcp_parseopt+0xdc>)
 8011aa6:	4832      	ldr	r0, [pc, #200]	; (8011b70 <tcp_parseopt+0xe0>)
 8011aa8:	f004 ff8a 	bl	80169c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011aac:	4b31      	ldr	r3, [pc, #196]	; (8011b74 <tcp_parseopt+0xe4>)
 8011aae:	881b      	ldrh	r3, [r3, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d055      	beq.n	8011b60 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011ab4:	4b30      	ldr	r3, [pc, #192]	; (8011b78 <tcp_parseopt+0xe8>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	801a      	strh	r2, [r3, #0]
 8011aba:	e045      	b.n	8011b48 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011abc:	f7ff ffb2 	bl	8011a24 <tcp_get_next_optbyte>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
 8011ac6:	2b02      	cmp	r3, #2
 8011ac8:	d006      	beq.n	8011ad8 <tcp_parseopt+0x48>
 8011aca:	2b02      	cmp	r3, #2
 8011acc:	dc2b      	bgt.n	8011b26 <tcp_parseopt+0x96>
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d041      	beq.n	8011b56 <tcp_parseopt+0xc6>
 8011ad2:	2b01      	cmp	r3, #1
 8011ad4:	d127      	bne.n	8011b26 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011ad6:	e037      	b.n	8011b48 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011ad8:	f7ff ffa4 	bl	8011a24 <tcp_get_next_optbyte>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b04      	cmp	r3, #4
 8011ae0:	d13b      	bne.n	8011b5a <tcp_parseopt+0xca>
 8011ae2:	4b25      	ldr	r3, [pc, #148]	; (8011b78 <tcp_parseopt+0xe8>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	4a22      	ldr	r2, [pc, #136]	; (8011b74 <tcp_parseopt+0xe4>)
 8011aea:	8812      	ldrh	r2, [r2, #0]
 8011aec:	4293      	cmp	r3, r2
 8011aee:	da34      	bge.n	8011b5a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011af0:	f7ff ff98 	bl	8011a24 <tcp_get_next_optbyte>
 8011af4:	4603      	mov	r3, r0
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	021b      	lsls	r3, r3, #8
 8011afa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011afc:	f7ff ff92 	bl	8011a24 <tcp_get_next_optbyte>
 8011b00:	4603      	mov	r3, r0
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	89bb      	ldrh	r3, [r7, #12]
 8011b06:	4313      	orrs	r3, r2
 8011b08:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011b0a:	89bb      	ldrh	r3, [r7, #12]
 8011b0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011b10:	d804      	bhi.n	8011b1c <tcp_parseopt+0x8c>
 8011b12:	89bb      	ldrh	r3, [r7, #12]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d001      	beq.n	8011b1c <tcp_parseopt+0x8c>
 8011b18:	89ba      	ldrh	r2, [r7, #12]
 8011b1a:	e001      	b.n	8011b20 <tcp_parseopt+0x90>
 8011b1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011b24:	e010      	b.n	8011b48 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011b26:	f7ff ff7d 	bl	8011a24 <tcp_get_next_optbyte>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011b2e:	7afb      	ldrb	r3, [r7, #11]
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d914      	bls.n	8011b5e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011b34:	7afb      	ldrb	r3, [r7, #11]
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	4b0f      	ldr	r3, [pc, #60]	; (8011b78 <tcp_parseopt+0xe8>)
 8011b3a:	881b      	ldrh	r3, [r3, #0]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	3b02      	subs	r3, #2
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	4b0c      	ldr	r3, [pc, #48]	; (8011b78 <tcp_parseopt+0xe8>)
 8011b46:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011b48:	4b0b      	ldr	r3, [pc, #44]	; (8011b78 <tcp_parseopt+0xe8>)
 8011b4a:	881a      	ldrh	r2, [r3, #0]
 8011b4c:	4b09      	ldr	r3, [pc, #36]	; (8011b74 <tcp_parseopt+0xe4>)
 8011b4e:	881b      	ldrh	r3, [r3, #0]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d3b3      	bcc.n	8011abc <tcp_parseopt+0x2c>
 8011b54:	e004      	b.n	8011b60 <tcp_parseopt+0xd0>
          return;
 8011b56:	bf00      	nop
 8011b58:	e002      	b.n	8011b60 <tcp_parseopt+0xd0>
            return;
 8011b5a:	bf00      	nop
 8011b5c:	e000      	b.n	8011b60 <tcp_parseopt+0xd0>
            return;
 8011b5e:	bf00      	nop
      }
    }
  }
}
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	0801b784 	.word	0x0801b784
 8011b6c:	0801bbe8 	.word	0x0801bbe8
 8011b70:	0801b7d0 	.word	0x0801b7d0
 8011b74:	20011b74 	.word	0x20011b74
 8011b78:	20011b7c 	.word	0x20011b7c

08011b7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b80:	4b05      	ldr	r3, [pc, #20]	; (8011b98 <tcp_trigger_input_pcb_close+0x1c>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	f043 0310 	orr.w	r3, r3, #16
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	4b03      	ldr	r3, [pc, #12]	; (8011b98 <tcp_trigger_input_pcb_close+0x1c>)
 8011b8c:	701a      	strb	r2, [r3, #0]
}
 8011b8e:	bf00      	nop
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr
 8011b98:	20011b8d 	.word	0x20011b8d

08011b9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00a      	beq.n	8011bc4 <tcp_route+0x28>
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	7a1b      	ldrb	r3, [r3, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d006      	beq.n	8011bc4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	7a1b      	ldrb	r3, [r3, #8]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fb f800 	bl	800cbc0 <netif_get_by_index>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	e003      	b.n	8011bcc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f003 f96d 	bl	8014ea4 <ip4_route>
 8011bca:	4603      	mov	r3, r0
  }
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011bd4:	b590      	push	{r4, r7, lr}
 8011bd6:	b087      	sub	sp, #28
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	603b      	str	r3, [r7, #0]
 8011be0:	4613      	mov	r3, r2
 8011be2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d105      	bne.n	8011bf6 <tcp_create_segment+0x22>
 8011bea:	4b44      	ldr	r3, [pc, #272]	; (8011cfc <tcp_create_segment+0x128>)
 8011bec:	22a3      	movs	r2, #163	; 0xa3
 8011bee:	4944      	ldr	r1, [pc, #272]	; (8011d00 <tcp_create_segment+0x12c>)
 8011bf0:	4844      	ldr	r0, [pc, #272]	; (8011d04 <tcp_create_segment+0x130>)
 8011bf2:	f004 fee5 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d105      	bne.n	8011c08 <tcp_create_segment+0x34>
 8011bfc:	4b3f      	ldr	r3, [pc, #252]	; (8011cfc <tcp_create_segment+0x128>)
 8011bfe:	22a4      	movs	r2, #164	; 0xa4
 8011c00:	4941      	ldr	r1, [pc, #260]	; (8011d08 <tcp_create_segment+0x134>)
 8011c02:	4840      	ldr	r0, [pc, #256]	; (8011d04 <tcp_create_segment+0x130>)
 8011c04:	f004 fedc 	bl	80169c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	f003 0304 	and.w	r3, r3, #4
 8011c14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011c16:	2002      	movs	r0, #2
 8011c18:	f7fa fc4a 	bl	800c4b0 <memp_malloc>
 8011c1c:	6138      	str	r0, [r7, #16]
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d104      	bne.n	8011c2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011c24:	68b8      	ldr	r0, [r7, #8]
 8011c26:	f7fb fb59 	bl	800d2dc <pbuf_free>
    return NULL;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	e061      	b.n	8011cf2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011c34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	68ba      	ldr	r2, [r7, #8]
 8011c40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	891a      	ldrh	r2, [r3, #8]
 8011c46:	7dfb      	ldrb	r3, [r7, #23]
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d205      	bcs.n	8011c5a <tcp_create_segment+0x86>
 8011c4e:	4b2b      	ldr	r3, [pc, #172]	; (8011cfc <tcp_create_segment+0x128>)
 8011c50:	22b0      	movs	r2, #176	; 0xb0
 8011c52:	492e      	ldr	r1, [pc, #184]	; (8011d0c <tcp_create_segment+0x138>)
 8011c54:	482b      	ldr	r0, [pc, #172]	; (8011d04 <tcp_create_segment+0x130>)
 8011c56:	f004 feb3 	bl	80169c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	891a      	ldrh	r2, [r3, #8]
 8011c5e:	7dfb      	ldrb	r3, [r7, #23]
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	1ad3      	subs	r3, r2, r3
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011c6a:	2114      	movs	r1, #20
 8011c6c:	68b8      	ldr	r0, [r7, #8]
 8011c6e:	f7fb fa9f 	bl	800d1b0 <pbuf_add_header>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d004      	beq.n	8011c82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c78:	6938      	ldr	r0, [r7, #16]
 8011c7a:	f7fd f800 	bl	800ec7e <tcp_seg_free>
    return NULL;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	e037      	b.n	8011cf2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	685a      	ldr	r2, [r3, #4]
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	8ada      	ldrh	r2, [r3, #22]
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	68dc      	ldr	r4, [r3, #12]
 8011c94:	4610      	mov	r0, r2
 8011c96:	f7f9 fe1b 	bl	800b8d0 <lwip_htons>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	8b1a      	ldrh	r2, [r3, #24]
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	68dc      	ldr	r4, [r3, #12]
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	f7f9 fe12 	bl	800b8d0 <lwip_htons>
 8011cac:	4603      	mov	r3, r0
 8011cae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	68dc      	ldr	r4, [r3, #12]
 8011cb4:	6838      	ldr	r0, [r7, #0]
 8011cb6:	f7f9 fe20 	bl	800b8fa <lwip_htonl>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011cbe:	7dfb      	ldrb	r3, [r7, #23]
 8011cc0:	089b      	lsrs	r3, r3, #2
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	3305      	adds	r3, #5
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	031b      	lsls	r3, r3, #12
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	79fb      	ldrb	r3, [r7, #7]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	68dc      	ldr	r4, [r3, #12]
 8011cda:	4610      	mov	r0, r2
 8011cdc:	f7f9 fdf8 	bl	800b8d0 <lwip_htons>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	749a      	strb	r2, [r3, #18]
 8011cec:	2200      	movs	r2, #0
 8011cee:	74da      	strb	r2, [r3, #19]
  return seg;
 8011cf0:	693b      	ldr	r3, [r7, #16]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	371c      	adds	r7, #28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd90      	pop	{r4, r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	0801bc04 	.word	0x0801bc04
 8011d00:	0801bc38 	.word	0x0801bc38
 8011d04:	0801bc58 	.word	0x0801bc58
 8011d08:	0801bc80 	.word	0x0801bc80
 8011d0c:	0801bca4 	.word	0x0801bca4

08011d10 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b086      	sub	sp, #24
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	607b      	str	r3, [r7, #4]
 8011d18:	4603      	mov	r3, r0
 8011d1a:	73fb      	strb	r3, [r7, #15]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	81bb      	strh	r3, [r7, #12]
 8011d20:	4613      	mov	r3, r2
 8011d22:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011d24:	89bb      	ldrh	r3, [r7, #12]
 8011d26:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d105      	bne.n	8011d3a <tcp_pbuf_prealloc+0x2a>
 8011d2e:	4b30      	ldr	r3, [pc, #192]	; (8011df0 <tcp_pbuf_prealloc+0xe0>)
 8011d30:	22e8      	movs	r2, #232	; 0xe8
 8011d32:	4930      	ldr	r1, [pc, #192]	; (8011df4 <tcp_pbuf_prealloc+0xe4>)
 8011d34:	4830      	ldr	r0, [pc, #192]	; (8011df8 <tcp_pbuf_prealloc+0xe8>)
 8011d36:	f004 fe43 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011d3a:	6a3b      	ldr	r3, [r7, #32]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d105      	bne.n	8011d4c <tcp_pbuf_prealloc+0x3c>
 8011d40:	4b2b      	ldr	r3, [pc, #172]	; (8011df0 <tcp_pbuf_prealloc+0xe0>)
 8011d42:	22e9      	movs	r2, #233	; 0xe9
 8011d44:	492d      	ldr	r1, [pc, #180]	; (8011dfc <tcp_pbuf_prealloc+0xec>)
 8011d46:	482c      	ldr	r0, [pc, #176]	; (8011df8 <tcp_pbuf_prealloc+0xe8>)
 8011d48:	f004 fe3a 	bl	80169c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011d4c:	89ba      	ldrh	r2, [r7, #12]
 8011d4e:	897b      	ldrh	r3, [r7, #10]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d221      	bcs.n	8011d98 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d58:	f003 0302 	and.w	r3, r3, #2
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d111      	bne.n	8011d84 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011d60:	6a3b      	ldr	r3, [r7, #32]
 8011d62:	8b5b      	ldrh	r3, [r3, #26]
 8011d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d115      	bne.n	8011d98 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d007      	beq.n	8011d84 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d103      	bne.n	8011d84 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d009      	beq.n	8011d98 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d84:	89bb      	ldrh	r3, [r7, #12]
 8011d86:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011d8a:	f023 0203 	bic.w	r2, r3, #3
 8011d8e:	897b      	ldrh	r3, [r7, #10]
 8011d90:	4293      	cmp	r3, r2
 8011d92:	bf28      	it	cs
 8011d94:	4613      	movcs	r3, r2
 8011d96:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d98:	8af9      	ldrh	r1, [r7, #22]
 8011d9a:	7bfb      	ldrb	r3, [r7, #15]
 8011d9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fa ffb7 	bl	800cd14 <pbuf_alloc>
 8011da6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d101      	bne.n	8011db2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	e019      	b.n	8011de6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d006      	beq.n	8011dc8 <tcp_pbuf_prealloc+0xb8>
 8011dba:	4b0d      	ldr	r3, [pc, #52]	; (8011df0 <tcp_pbuf_prealloc+0xe0>)
 8011dbc:	f240 120b 	movw	r2, #267	; 0x10b
 8011dc0:	490f      	ldr	r1, [pc, #60]	; (8011e00 <tcp_pbuf_prealloc+0xf0>)
 8011dc2:	480d      	ldr	r0, [pc, #52]	; (8011df8 <tcp_pbuf_prealloc+0xe8>)
 8011dc4:	f004 fdfc 	bl	80169c0 <iprintf>
  *oversize = p->len - length;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	895a      	ldrh	r2, [r3, #10]
 8011dcc:	89bb      	ldrh	r3, [r7, #12]
 8011dce:	1ad3      	subs	r3, r2, r3
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	89ba      	ldrh	r2, [r7, #12]
 8011dda:	811a      	strh	r2, [r3, #8]
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	891a      	ldrh	r2, [r3, #8]
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	815a      	strh	r2, [r3, #10]
  return p;
 8011de4:	693b      	ldr	r3, [r7, #16]
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3718      	adds	r7, #24
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	0801bc04 	.word	0x0801bc04
 8011df4:	0801bcbc 	.word	0x0801bcbc
 8011df8:	0801bc58 	.word	0x0801bc58
 8011dfc:	0801bce0 	.word	0x0801bce0
 8011e00:	0801bd00 	.word	0x0801bd00

08011e04 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d106      	bne.n	8011e24 <tcp_write_checks+0x20>
 8011e16:	4b33      	ldr	r3, [pc, #204]	; (8011ee4 <tcp_write_checks+0xe0>)
 8011e18:	f240 1233 	movw	r2, #307	; 0x133
 8011e1c:	4932      	ldr	r1, [pc, #200]	; (8011ee8 <tcp_write_checks+0xe4>)
 8011e1e:	4833      	ldr	r0, [pc, #204]	; (8011eec <tcp_write_checks+0xe8>)
 8011e20:	f004 fdce 	bl	80169c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	7d1b      	ldrb	r3, [r3, #20]
 8011e28:	2b04      	cmp	r3, #4
 8011e2a:	d00e      	beq.n	8011e4a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011e30:	2b07      	cmp	r3, #7
 8011e32:	d00a      	beq.n	8011e4a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d006      	beq.n	8011e4a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011e40:	2b03      	cmp	r3, #3
 8011e42:	d002      	beq.n	8011e4a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011e44:	f06f 030a 	mvn.w	r3, #10
 8011e48:	e048      	b.n	8011edc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011e4a:	887b      	ldrh	r3, [r7, #2]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d101      	bne.n	8011e54 <tcp_write_checks+0x50>
    return ERR_OK;
 8011e50:	2300      	movs	r3, #0
 8011e52:	e043      	b.n	8011edc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e5a:	887a      	ldrh	r2, [r7, #2]
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d909      	bls.n	8011e74 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	8b5b      	ldrh	r3, [r3, #26]
 8011e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e72:	e033      	b.n	8011edc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e7a:	2b08      	cmp	r3, #8
 8011e7c:	d909      	bls.n	8011e92 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	8b5b      	ldrh	r3, [r3, #26]
 8011e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e90:	e024      	b.n	8011edc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00f      	beq.n	8011ebc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d11a      	bne.n	8011eda <tcp_write_checks+0xd6>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d116      	bne.n	8011eda <tcp_write_checks+0xd6>
 8011eac:	4b0d      	ldr	r3, [pc, #52]	; (8011ee4 <tcp_write_checks+0xe0>)
 8011eae:	f240 1255 	movw	r2, #341	; 0x155
 8011eb2:	490f      	ldr	r1, [pc, #60]	; (8011ef0 <tcp_write_checks+0xec>)
 8011eb4:	480d      	ldr	r0, [pc, #52]	; (8011eec <tcp_write_checks+0xe8>)
 8011eb6:	f004 fd83 	bl	80169c0 <iprintf>
 8011eba:	e00e      	b.n	8011eda <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d103      	bne.n	8011ecc <tcp_write_checks+0xc8>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d006      	beq.n	8011eda <tcp_write_checks+0xd6>
 8011ecc:	4b05      	ldr	r3, [pc, #20]	; (8011ee4 <tcp_write_checks+0xe0>)
 8011ece:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011ed2:	4908      	ldr	r1, [pc, #32]	; (8011ef4 <tcp_write_checks+0xf0>)
 8011ed4:	4805      	ldr	r0, [pc, #20]	; (8011eec <tcp_write_checks+0xe8>)
 8011ed6:	f004 fd73 	bl	80169c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011eda:	2300      	movs	r3, #0
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3708      	adds	r7, #8
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	0801bc04 	.word	0x0801bc04
 8011ee8:	0801bd14 	.word	0x0801bd14
 8011eec:	0801bc58 	.word	0x0801bc58
 8011ef0:	0801bd34 	.word	0x0801bd34
 8011ef4:	0801bd70 	.word	0x0801bd70

08011ef8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011ef8:	b590      	push	{r4, r7, lr}
 8011efa:	b09b      	sub	sp, #108	; 0x6c
 8011efc:	af04      	add	r7, sp, #16
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	4611      	mov	r1, r2
 8011f04:	461a      	mov	r2, r3
 8011f06:	460b      	mov	r3, r1
 8011f08:	80fb      	strh	r3, [r7, #6]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011f12:	2300      	movs	r3, #0
 8011f14:	653b      	str	r3, [r7, #80]	; 0x50
 8011f16:	2300      	movs	r3, #0
 8011f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f1e:	2300      	movs	r3, #0
 8011f20:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011f22:	2300      	movs	r3, #0
 8011f24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011f32:	2300      	movs	r3, #0
 8011f34:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011f36:	2300      	movs	r3, #0
 8011f38:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <tcp_write+0x5c>
 8011f40:	4ba4      	ldr	r3, [pc, #656]	; (80121d4 <tcp_write+0x2dc>)
 8011f42:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011f46:	49a4      	ldr	r1, [pc, #656]	; (80121d8 <tcp_write+0x2e0>)
 8011f48:	48a4      	ldr	r0, [pc, #656]	; (80121dc <tcp_write+0x2e4>)
 8011f4a:	f004 fd39 	bl	80169c0 <iprintf>
 8011f4e:	f06f 030f 	mvn.w	r3, #15
 8011f52:	e32a      	b.n	80125aa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f5a:	085b      	lsrs	r3, r3, #1
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f62:	4293      	cmp	r3, r2
 8011f64:	bf28      	it	cs
 8011f66:	4613      	movcs	r3, r2
 8011f68:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d102      	bne.n	8011f76 <tcp_write+0x7e>
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f74:	e000      	b.n	8011f78 <tcp_write+0x80>
 8011f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f78:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d109      	bne.n	8011f94 <tcp_write+0x9c>
 8011f80:	4b94      	ldr	r3, [pc, #592]	; (80121d4 <tcp_write+0x2dc>)
 8011f82:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011f86:	4996      	ldr	r1, [pc, #600]	; (80121e0 <tcp_write+0x2e8>)
 8011f88:	4894      	ldr	r0, [pc, #592]	; (80121dc <tcp_write+0x2e4>)
 8011f8a:	f004 fd19 	bl	80169c0 <iprintf>
 8011f8e:	f06f 030f 	mvn.w	r3, #15
 8011f92:	e30a      	b.n	80125aa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f94:	88fb      	ldrh	r3, [r7, #6]
 8011f96:	4619      	mov	r1, r3
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7ff ff33 	bl	8011e04 <tcp_write_checks>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011fa4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <tcp_write+0xba>
    return err;
 8011fac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011fb0:	e2fb      	b.n	80125aa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fb8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f000 80f6 	beq.w	80121b8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8011fd2:	e002      	b.n	8011fda <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1f8      	bne.n	8011fd4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fe4:	7a9b      	ldrb	r3, [r3, #10]
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f003 0304 	and.w	r3, r3, #4
 8011fee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff4:	891b      	ldrh	r3, [r3, #8]
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	8c3b      	ldrh	r3, [r7, #32]
 8011ffa:	440b      	add	r3, r1
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	da06      	bge.n	801200e <tcp_write+0x116>
 8012000:	4b74      	ldr	r3, [pc, #464]	; (80121d4 <tcp_write+0x2dc>)
 8012002:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012006:	4977      	ldr	r1, [pc, #476]	; (80121e4 <tcp_write+0x2ec>)
 8012008:	4874      	ldr	r0, [pc, #464]	; (80121dc <tcp_write+0x2e4>)
 801200a:	f004 fcd9 	bl	80169c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012010:	891a      	ldrh	r2, [r3, #8]
 8012012:	8c3b      	ldrh	r3, [r7, #32]
 8012014:	4413      	add	r3, r2
 8012016:	b29b      	uxth	r3, r3
 8012018:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801201a:	1ad3      	subs	r3, r2, r3
 801201c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012024:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012026:	8a7b      	ldrh	r3, [r7, #18]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d026      	beq.n	801207a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801202c:	8a7b      	ldrh	r3, [r7, #18]
 801202e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012030:	429a      	cmp	r2, r3
 8012032:	d206      	bcs.n	8012042 <tcp_write+0x14a>
 8012034:	4b67      	ldr	r3, [pc, #412]	; (80121d4 <tcp_write+0x2dc>)
 8012036:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801203a:	496b      	ldr	r1, [pc, #428]	; (80121e8 <tcp_write+0x2f0>)
 801203c:	4867      	ldr	r0, [pc, #412]	; (80121dc <tcp_write+0x2e4>)
 801203e:	f004 fcbf 	bl	80169c0 <iprintf>
      seg = last_unsent;
 8012042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012044:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012046:	8a7b      	ldrh	r3, [r7, #18]
 8012048:	88fa      	ldrh	r2, [r7, #6]
 801204a:	4293      	cmp	r3, r2
 801204c:	bf28      	it	cs
 801204e:	4613      	movcs	r3, r2
 8012050:	b29b      	uxth	r3, r3
 8012052:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012054:	4293      	cmp	r3, r2
 8012056:	bf28      	it	cs
 8012058:	4613      	movcs	r3, r2
 801205a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801205c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012062:	4413      	add	r3, r2
 8012064:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012068:	8a7a      	ldrh	r2, [r7, #18]
 801206a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801206c:	1ad3      	subs	r3, r2, r3
 801206e:	b29b      	uxth	r3, r3
 8012070:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012072:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012076:	1ad3      	subs	r3, r2, r3
 8012078:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801207a:	8a7b      	ldrh	r3, [r7, #18]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00b      	beq.n	8012098 <tcp_write+0x1a0>
 8012080:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012084:	88fb      	ldrh	r3, [r7, #6]
 8012086:	429a      	cmp	r2, r3
 8012088:	d006      	beq.n	8012098 <tcp_write+0x1a0>
 801208a:	4b52      	ldr	r3, [pc, #328]	; (80121d4 <tcp_write+0x2dc>)
 801208c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012090:	4956      	ldr	r1, [pc, #344]	; (80121ec <tcp_write+0x2f4>)
 8012092:	4852      	ldr	r0, [pc, #328]	; (80121dc <tcp_write+0x2e4>)
 8012094:	f004 fc94 	bl	80169c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012098:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801209c:	88fb      	ldrh	r3, [r7, #6]
 801209e:	429a      	cmp	r2, r3
 80120a0:	f080 8167 	bcs.w	8012372 <tcp_write+0x47a>
 80120a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	f000 8163 	beq.w	8012372 <tcp_write+0x47a>
 80120ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ae:	891b      	ldrh	r3, [r3, #8]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	f000 815e 	beq.w	8012372 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80120b6:	88fa      	ldrh	r2, [r7, #6]
 80120b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120bc:	1ad2      	subs	r2, r2, r3
 80120be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80120c0:	4293      	cmp	r3, r2
 80120c2:	bfa8      	it	ge
 80120c4:	4613      	movge	r3, r2
 80120c6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80120c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ca:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80120cc:	797b      	ldrb	r3, [r7, #5]
 80120ce:	f003 0301 	and.w	r3, r3, #1
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d027      	beq.n	8012126 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80120d6:	f107 0012 	add.w	r0, r7, #18
 80120da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120dc:	8bf9      	ldrh	r1, [r7, #30]
 80120de:	2301      	movs	r3, #1
 80120e0:	9302      	str	r3, [sp, #8]
 80120e2:	797b      	ldrb	r3, [r7, #5]
 80120e4:	9301      	str	r3, [sp, #4]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	4603      	mov	r3, r0
 80120ec:	2000      	movs	r0, #0
 80120ee:	f7ff fe0f 	bl	8011d10 <tcp_pbuf_prealloc>
 80120f2:	6578      	str	r0, [r7, #84]	; 0x54
 80120f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f000 8225 	beq.w	8012546 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80120fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120fe:	6858      	ldr	r0, [r3, #4]
 8012100:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	4413      	add	r3, r2
 8012108:	8bfa      	ldrh	r2, [r7, #30]
 801210a:	4619      	mov	r1, r3
 801210c:	f004 fb93 	bl	8016836 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012110:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012112:	f7fb f971 	bl	800d3f8 <pbuf_clen>
 8012116:	4603      	mov	r3, r0
 8012118:	461a      	mov	r2, r3
 801211a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801211e:	4413      	add	r3, r2
 8012120:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012124:	e041      	b.n	80121aa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	637b      	str	r3, [r7, #52]	; 0x34
 801212c:	e002      	b.n	8012134 <tcp_write+0x23c>
 801212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	637b      	str	r3, [r7, #52]	; 0x34
 8012134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1f8      	bne.n	801212e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213e:	7b1b      	ldrb	r3, [r3, #12]
 8012140:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d115      	bne.n	8012174 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801214e:	8952      	ldrh	r2, [r2, #10]
 8012150:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	429a      	cmp	r2, r3
 8012156:	d10d      	bne.n	8012174 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801215c:	2b00      	cmp	r3, #0
 801215e:	d006      	beq.n	801216e <tcp_write+0x276>
 8012160:	4b1c      	ldr	r3, [pc, #112]	; (80121d4 <tcp_write+0x2dc>)
 8012162:	f240 2231 	movw	r2, #561	; 0x231
 8012166:	4922      	ldr	r1, [pc, #136]	; (80121f0 <tcp_write+0x2f8>)
 8012168:	481c      	ldr	r0, [pc, #112]	; (80121dc <tcp_write+0x2e4>)
 801216a:	f004 fc29 	bl	80169c0 <iprintf>
          extendlen = seglen;
 801216e:	8bfb      	ldrh	r3, [r7, #30]
 8012170:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012172:	e01a      	b.n	80121aa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012174:	8bfb      	ldrh	r3, [r7, #30]
 8012176:	2201      	movs	r2, #1
 8012178:	4619      	mov	r1, r3
 801217a:	2000      	movs	r0, #0
 801217c:	f7fa fdca 	bl	800cd14 <pbuf_alloc>
 8012180:	6578      	str	r0, [r7, #84]	; 0x54
 8012182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012184:	2b00      	cmp	r3, #0
 8012186:	f000 81e0 	beq.w	801254a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801218a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801218e:	68ba      	ldr	r2, [r7, #8]
 8012190:	441a      	add	r2, r3
 8012192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012194:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012196:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012198:	f7fb f92e 	bl	800d3f8 <pbuf_clen>
 801219c:	4603      	mov	r3, r0
 801219e:	461a      	mov	r2, r3
 80121a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80121a4:	4413      	add	r3, r2
 80121a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80121aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121ae:	8bfb      	ldrh	r3, [r7, #30]
 80121b0:	4413      	add	r3, r2
 80121b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80121b6:	e0dc      	b.n	8012372 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f000 80d7 	beq.w	8012372 <tcp_write+0x47a>
 80121c4:	4b03      	ldr	r3, [pc, #12]	; (80121d4 <tcp_write+0x2dc>)
 80121c6:	f240 224a 	movw	r2, #586	; 0x24a
 80121ca:	490a      	ldr	r1, [pc, #40]	; (80121f4 <tcp_write+0x2fc>)
 80121cc:	4803      	ldr	r0, [pc, #12]	; (80121dc <tcp_write+0x2e4>)
 80121ce:	f004 fbf7 	bl	80169c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80121d2:	e0ce      	b.n	8012372 <tcp_write+0x47a>
 80121d4:	0801bc04 	.word	0x0801bc04
 80121d8:	0801bda4 	.word	0x0801bda4
 80121dc:	0801bc58 	.word	0x0801bc58
 80121e0:	0801bdbc 	.word	0x0801bdbc
 80121e4:	0801bdf0 	.word	0x0801bdf0
 80121e8:	0801be08 	.word	0x0801be08
 80121ec:	0801be28 	.word	0x0801be28
 80121f0:	0801be48 	.word	0x0801be48
 80121f4:	0801be74 	.word	0x0801be74
    struct pbuf *p;
    u16_t left = len - pos;
 80121f8:	88fa      	ldrh	r2, [r7, #6]
 80121fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012202:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012206:	b29b      	uxth	r3, r3
 8012208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801220e:	8b7a      	ldrh	r2, [r7, #26]
 8012210:	8bbb      	ldrh	r3, [r7, #28]
 8012212:	4293      	cmp	r3, r2
 8012214:	bf28      	it	cs
 8012216:	4613      	movcs	r3, r2
 8012218:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801221a:	797b      	ldrb	r3, [r7, #5]
 801221c:	f003 0301 	and.w	r3, r3, #1
 8012220:	2b00      	cmp	r3, #0
 8012222:	d036      	beq.n	8012292 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012224:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012228:	b29a      	uxth	r2, r3
 801222a:	8b3b      	ldrh	r3, [r7, #24]
 801222c:	4413      	add	r3, r2
 801222e:	b299      	uxth	r1, r3
 8012230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012232:	2b00      	cmp	r3, #0
 8012234:	bf0c      	ite	eq
 8012236:	2301      	moveq	r3, #1
 8012238:	2300      	movne	r3, #0
 801223a:	b2db      	uxtb	r3, r3
 801223c:	f107 0012 	add.w	r0, r7, #18
 8012240:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012242:	9302      	str	r3, [sp, #8]
 8012244:	797b      	ldrb	r3, [r7, #5]
 8012246:	9301      	str	r3, [sp, #4]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	9300      	str	r3, [sp, #0]
 801224c:	4603      	mov	r3, r0
 801224e:	2036      	movs	r0, #54	; 0x36
 8012250:	f7ff fd5e 	bl	8011d10 <tcp_pbuf_prealloc>
 8012254:	6338      	str	r0, [r7, #48]	; 0x30
 8012256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012258:	2b00      	cmp	r3, #0
 801225a:	f000 8178 	beq.w	801254e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012260:	895b      	ldrh	r3, [r3, #10]
 8012262:	8b3a      	ldrh	r2, [r7, #24]
 8012264:	429a      	cmp	r2, r3
 8012266:	d906      	bls.n	8012276 <tcp_write+0x37e>
 8012268:	4b8c      	ldr	r3, [pc, #560]	; (801249c <tcp_write+0x5a4>)
 801226a:	f240 2266 	movw	r2, #614	; 0x266
 801226e:	498c      	ldr	r1, [pc, #560]	; (80124a0 <tcp_write+0x5a8>)
 8012270:	488c      	ldr	r0, [pc, #560]	; (80124a4 <tcp_write+0x5ac>)
 8012272:	f004 fba5 	bl	80169c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012278:	685a      	ldr	r2, [r3, #4]
 801227a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801227e:	18d0      	adds	r0, r2, r3
 8012280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012284:	68ba      	ldr	r2, [r7, #8]
 8012286:	4413      	add	r3, r2
 8012288:	8b3a      	ldrh	r2, [r7, #24]
 801228a:	4619      	mov	r1, r3
 801228c:	f004 fad3 	bl	8016836 <memcpy>
 8012290:	e02f      	b.n	80122f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012292:	8a7b      	ldrh	r3, [r7, #18]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d006      	beq.n	80122a6 <tcp_write+0x3ae>
 8012298:	4b80      	ldr	r3, [pc, #512]	; (801249c <tcp_write+0x5a4>)
 801229a:	f240 2271 	movw	r2, #625	; 0x271
 801229e:	4982      	ldr	r1, [pc, #520]	; (80124a8 <tcp_write+0x5b0>)
 80122a0:	4880      	ldr	r0, [pc, #512]	; (80124a4 <tcp_write+0x5ac>)
 80122a2:	f004 fb8d 	bl	80169c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80122a6:	8b3b      	ldrh	r3, [r7, #24]
 80122a8:	2201      	movs	r2, #1
 80122aa:	4619      	mov	r1, r3
 80122ac:	2036      	movs	r0, #54	; 0x36
 80122ae:	f7fa fd31 	bl	800cd14 <pbuf_alloc>
 80122b2:	6178      	str	r0, [r7, #20]
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f000 814b 	beq.w	8012552 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80122bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	441a      	add	r2, r3
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80122c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122d2:	4619      	mov	r1, r3
 80122d4:	2036      	movs	r0, #54	; 0x36
 80122d6:	f7fa fd1d 	bl	800cd14 <pbuf_alloc>
 80122da:	6338      	str	r0, [r7, #48]	; 0x30
 80122dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d103      	bne.n	80122ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80122e2:	6978      	ldr	r0, [r7, #20]
 80122e4:	f7fa fffa 	bl	800d2dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80122e8:	e136      	b.n	8012558 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80122ea:	6979      	ldr	r1, [r7, #20]
 80122ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ee:	f7fb f8c3 	bl	800d478 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80122f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f4:	f7fb f880 	bl	800d3f8 <pbuf_clen>
 80122f8:	4603      	mov	r3, r0
 80122fa:	461a      	mov	r2, r3
 80122fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012300:	4413      	add	r3, r2
 8012302:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801230a:	2b09      	cmp	r3, #9
 801230c:	d903      	bls.n	8012316 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801230e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012310:	f7fa ffe4 	bl	800d2dc <pbuf_free>
      goto memerr;
 8012314:	e120      	b.n	8012558 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801231a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801231e:	441a      	add	r2, r3
 8012320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	4613      	mov	r3, r2
 8012328:	2200      	movs	r2, #0
 801232a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801232c:	68f8      	ldr	r0, [r7, #12]
 801232e:	f7ff fc51 	bl	8011bd4 <tcp_create_segment>
 8012332:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012336:	2b00      	cmp	r3, #0
 8012338:	f000 810d 	beq.w	8012556 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801233e:	2b00      	cmp	r3, #0
 8012340:	d102      	bne.n	8012348 <tcp_write+0x450>
      queue = seg;
 8012342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012344:	647b      	str	r3, [r7, #68]	; 0x44
 8012346:	e00c      	b.n	8012362 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801234a:	2b00      	cmp	r3, #0
 801234c:	d106      	bne.n	801235c <tcp_write+0x464>
 801234e:	4b53      	ldr	r3, [pc, #332]	; (801249c <tcp_write+0x5a4>)
 8012350:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012354:	4955      	ldr	r1, [pc, #340]	; (80124ac <tcp_write+0x5b4>)
 8012356:	4853      	ldr	r0, [pc, #332]	; (80124a4 <tcp_write+0x5ac>)
 8012358:	f004 fb32 	bl	80169c0 <iprintf>
      prev_seg->next = seg;
 801235c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801235e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012360:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012364:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012366:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801236a:	8b3b      	ldrh	r3, [r7, #24]
 801236c:	4413      	add	r3, r2
 801236e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012372:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012376:	88fb      	ldrh	r3, [r7, #6]
 8012378:	429a      	cmp	r2, r3
 801237a:	f4ff af3d 	bcc.w	80121f8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801237e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012380:	2b00      	cmp	r3, #0
 8012382:	d02c      	beq.n	80123de <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	62fb      	str	r3, [r7, #44]	; 0x2c
 801238a:	e01e      	b.n	80123ca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	891a      	ldrh	r2, [r3, #8]
 8012390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012392:	4413      	add	r3, r2
 8012394:	b29a      	uxth	r2, r3
 8012396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012398:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d110      	bne.n	80123c4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80123a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123a8:	8952      	ldrh	r2, [r2, #10]
 80123aa:	4413      	add	r3, r2
 80123ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80123ae:	68b9      	ldr	r1, [r7, #8]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f004 fa40 	bl	8016836 <memcpy>
        p->len += oversize_used;
 80123b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b8:	895a      	ldrh	r2, [r3, #10]
 80123ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123bc:	4413      	add	r3, r2
 80123be:	b29a      	uxth	r2, r3
 80123c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80123c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1dd      	bne.n	801238c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80123d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d2:	891a      	ldrh	r2, [r3, #8]
 80123d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123d6:	4413      	add	r3, r2
 80123d8:	b29a      	uxth	r2, r3
 80123da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80123de:	8a7a      	ldrh	r2, [r7, #18]
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80123e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d018      	beq.n	801241e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80123ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d106      	bne.n	8012400 <tcp_write+0x508>
 80123f2:	4b2a      	ldr	r3, [pc, #168]	; (801249c <tcp_write+0x5a4>)
 80123f4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80123f8:	492d      	ldr	r1, [pc, #180]	; (80124b0 <tcp_write+0x5b8>)
 80123fa:	482a      	ldr	r0, [pc, #168]	; (80124a4 <tcp_write+0x5ac>)
 80123fc:	f004 fae0 	bl	80169c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012406:	4618      	mov	r0, r3
 8012408:	f7fb f836 	bl	800d478 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801240c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240e:	891a      	ldrh	r2, [r3, #8]
 8012410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012412:	891b      	ldrh	r3, [r3, #8]
 8012414:	4413      	add	r3, r2
 8012416:	b29a      	uxth	r2, r3
 8012418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801241a:	811a      	strh	r2, [r3, #8]
 801241c:	e037      	b.n	801248e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801241e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012420:	2b00      	cmp	r3, #0
 8012422:	d034      	beq.n	801248e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012426:	2b00      	cmp	r3, #0
 8012428:	d003      	beq.n	8012432 <tcp_write+0x53a>
 801242a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d106      	bne.n	8012440 <tcp_write+0x548>
 8012432:	4b1a      	ldr	r3, [pc, #104]	; (801249c <tcp_write+0x5a4>)
 8012434:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012438:	491e      	ldr	r1, [pc, #120]	; (80124b4 <tcp_write+0x5bc>)
 801243a:	481a      	ldr	r0, [pc, #104]	; (80124a4 <tcp_write+0x5ac>)
 801243c:	f004 fac0 	bl	80169c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	62bb      	str	r3, [r7, #40]	; 0x28
 8012446:	e009      	b.n	801245c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244a:	891a      	ldrh	r2, [r3, #8]
 801244c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801244e:	4413      	add	r3, r2
 8012450:	b29a      	uxth	r2, r3
 8012452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012454:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	62bb      	str	r3, [r7, #40]	; 0x28
 801245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d1f1      	bne.n	8012448 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	891a      	ldrh	r2, [r3, #8]
 8012468:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801246a:	4413      	add	r3, r2
 801246c:	b29a      	uxth	r2, r3
 801246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012470:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012474:	895a      	ldrh	r2, [r3, #10]
 8012476:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012478:	4413      	add	r3, r2
 801247a:	b29a      	uxth	r2, r3
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012482:	891a      	ldrh	r2, [r3, #8]
 8012484:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012486:	4413      	add	r3, r2
 8012488:	b29a      	uxth	r2, r3
 801248a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801248c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801248e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012490:	2b00      	cmp	r3, #0
 8012492:	d111      	bne.n	80124b8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012498:	66da      	str	r2, [r3, #108]	; 0x6c
 801249a:	e010      	b.n	80124be <tcp_write+0x5c6>
 801249c:	0801bc04 	.word	0x0801bc04
 80124a0:	0801bea4 	.word	0x0801bea4
 80124a4:	0801bc58 	.word	0x0801bc58
 80124a8:	0801bee4 	.word	0x0801bee4
 80124ac:	0801bef4 	.word	0x0801bef4
 80124b0:	0801bf08 	.word	0x0801bf08
 80124b4:	0801bf40 	.word	0x0801bf40
  } else {
    last_unsent->next = queue;
 80124b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80124c2:	88fb      	ldrh	r3, [r7, #6]
 80124c4:	441a      	add	r2, r3
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80124d0:	88fb      	ldrh	r3, [r7, #6]
 80124d2:	1ad3      	subs	r3, r2, r3
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80124e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d00e      	beq.n	801250e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d10a      	bne.n	801250e <tcp_write+0x616>
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d106      	bne.n	801250e <tcp_write+0x616>
 8012500:	4b2c      	ldr	r3, [pc, #176]	; (80125b4 <tcp_write+0x6bc>)
 8012502:	f240 3212 	movw	r2, #786	; 0x312
 8012506:	492c      	ldr	r1, [pc, #176]	; (80125b8 <tcp_write+0x6c0>)
 8012508:	482c      	ldr	r0, [pc, #176]	; (80125bc <tcp_write+0x6c4>)
 801250a:	f004 fa59 	bl	80169c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012510:	2b00      	cmp	r3, #0
 8012512:	d016      	beq.n	8012542 <tcp_write+0x64a>
 8012514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d012      	beq.n	8012542 <tcp_write+0x64a>
 801251c:	797b      	ldrb	r3, [r7, #5]
 801251e:	f003 0302 	and.w	r3, r3, #2
 8012522:	2b00      	cmp	r3, #0
 8012524:	d10d      	bne.n	8012542 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	899b      	ldrh	r3, [r3, #12]
 801252c:	b29c      	uxth	r4, r3
 801252e:	2008      	movs	r0, #8
 8012530:	f7f9 f9ce 	bl	800b8d0 <lwip_htons>
 8012534:	4603      	mov	r3, r0
 8012536:	461a      	mov	r2, r3
 8012538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	4322      	orrs	r2, r4
 801253e:	b292      	uxth	r2, r2
 8012540:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	e031      	b.n	80125aa <tcp_write+0x6b2>
          goto memerr;
 8012546:	bf00      	nop
 8012548:	e006      	b.n	8012558 <tcp_write+0x660>
            goto memerr;
 801254a:	bf00      	nop
 801254c:	e004      	b.n	8012558 <tcp_write+0x660>
        goto memerr;
 801254e:	bf00      	nop
 8012550:	e002      	b.n	8012558 <tcp_write+0x660>
        goto memerr;
 8012552:	bf00      	nop
 8012554:	e000      	b.n	8012558 <tcp_write+0x660>
      goto memerr;
 8012556:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	8b5b      	ldrh	r3, [r3, #26]
 801255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012560:	b29a      	uxth	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801256c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801256e:	f7fa feb5 	bl	800d2dc <pbuf_free>
  }
  if (queue != NULL) {
 8012572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012574:	2b00      	cmp	r3, #0
 8012576:	d002      	beq.n	801257e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012578:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801257a:	f7fc fb6b 	bl	800ec54 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00e      	beq.n	80125a6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10a      	bne.n	80125a6 <tcp_write+0x6ae>
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012594:	2b00      	cmp	r3, #0
 8012596:	d106      	bne.n	80125a6 <tcp_write+0x6ae>
 8012598:	4b06      	ldr	r3, [pc, #24]	; (80125b4 <tcp_write+0x6bc>)
 801259a:	f240 3227 	movw	r2, #807	; 0x327
 801259e:	4906      	ldr	r1, [pc, #24]	; (80125b8 <tcp_write+0x6c0>)
 80125a0:	4806      	ldr	r0, [pc, #24]	; (80125bc <tcp_write+0x6c4>)
 80125a2:	f004 fa0d 	bl	80169c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80125a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	375c      	adds	r7, #92	; 0x5c
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd90      	pop	{r4, r7, pc}
 80125b2:	bf00      	nop
 80125b4:	0801bc04 	.word	0x0801bc04
 80125b8:	0801bf78 	.word	0x0801bf78
 80125bc:	0801bc58 	.word	0x0801bc58

080125c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80125c0:	b590      	push	{r4, r7, lr}
 80125c2:	b08b      	sub	sp, #44	; 0x2c
 80125c4:	af02      	add	r7, sp, #8
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	61fb      	str	r3, [r7, #28]
 80125d0:	2300      	movs	r3, #0
 80125d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80125d4:	2300      	movs	r3, #0
 80125d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d106      	bne.n	80125ec <tcp_split_unsent_seg+0x2c>
 80125de:	4b95      	ldr	r3, [pc, #596]	; (8012834 <tcp_split_unsent_seg+0x274>)
 80125e0:	f240 324b 	movw	r2, #843	; 0x34b
 80125e4:	4994      	ldr	r1, [pc, #592]	; (8012838 <tcp_split_unsent_seg+0x278>)
 80125e6:	4895      	ldr	r0, [pc, #596]	; (801283c <tcp_split_unsent_seg+0x27c>)
 80125e8:	f004 f9ea 	bl	80169c0 <iprintf>

  useg = pcb->unsent;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d102      	bne.n	80125fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80125f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125fc:	e116      	b.n	801282c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80125fe:	887b      	ldrh	r3, [r7, #2]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d109      	bne.n	8012618 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012604:	4b8b      	ldr	r3, [pc, #556]	; (8012834 <tcp_split_unsent_seg+0x274>)
 8012606:	f240 3253 	movw	r2, #851	; 0x353
 801260a:	498d      	ldr	r1, [pc, #564]	; (8012840 <tcp_split_unsent_seg+0x280>)
 801260c:	488b      	ldr	r0, [pc, #556]	; (801283c <tcp_split_unsent_seg+0x27c>)
 801260e:	f004 f9d7 	bl	80169c0 <iprintf>
    return ERR_VAL;
 8012612:	f06f 0305 	mvn.w	r3, #5
 8012616:	e109      	b.n	801282c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	891b      	ldrh	r3, [r3, #8]
 801261c:	887a      	ldrh	r2, [r7, #2]
 801261e:	429a      	cmp	r2, r3
 8012620:	d301      	bcc.n	8012626 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012622:	2300      	movs	r3, #0
 8012624:	e102      	b.n	801282c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801262a:	887a      	ldrh	r2, [r7, #2]
 801262c:	429a      	cmp	r2, r3
 801262e:	d906      	bls.n	801263e <tcp_split_unsent_seg+0x7e>
 8012630:	4b80      	ldr	r3, [pc, #512]	; (8012834 <tcp_split_unsent_seg+0x274>)
 8012632:	f240 325b 	movw	r2, #859	; 0x35b
 8012636:	4983      	ldr	r1, [pc, #524]	; (8012844 <tcp_split_unsent_seg+0x284>)
 8012638:	4880      	ldr	r0, [pc, #512]	; (801283c <tcp_split_unsent_seg+0x27c>)
 801263a:	f004 f9c1 	bl	80169c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	891b      	ldrh	r3, [r3, #8]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d106      	bne.n	8012654 <tcp_split_unsent_seg+0x94>
 8012646:	4b7b      	ldr	r3, [pc, #492]	; (8012834 <tcp_split_unsent_seg+0x274>)
 8012648:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801264c:	497e      	ldr	r1, [pc, #504]	; (8012848 <tcp_split_unsent_seg+0x288>)
 801264e:	487b      	ldr	r0, [pc, #492]	; (801283c <tcp_split_unsent_seg+0x27c>)
 8012650:	f004 f9b6 	bl	80169c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	7a9b      	ldrb	r3, [r3, #10]
 8012658:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801265a:	7bfb      	ldrb	r3, [r7, #15]
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	b2db      	uxtb	r3, r3
 8012660:	f003 0304 	and.w	r3, r3, #4
 8012664:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	891a      	ldrh	r2, [r3, #8]
 801266a:	887b      	ldrh	r3, [r7, #2]
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012670:	7bbb      	ldrb	r3, [r7, #14]
 8012672:	b29a      	uxth	r2, r3
 8012674:	89bb      	ldrh	r3, [r7, #12]
 8012676:	4413      	add	r3, r2
 8012678:	b29b      	uxth	r3, r3
 801267a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801267e:	4619      	mov	r1, r3
 8012680:	2036      	movs	r0, #54	; 0x36
 8012682:	f7fa fb47 	bl	800cd14 <pbuf_alloc>
 8012686:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	2b00      	cmp	r3, #0
 801268c:	f000 80b7 	beq.w	80127fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	891a      	ldrh	r2, [r3, #8]
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	891b      	ldrh	r3, [r3, #8]
 801269a:	1ad3      	subs	r3, r2, r3
 801269c:	b29a      	uxth	r2, r3
 801269e:	887b      	ldrh	r3, [r7, #2]
 80126a0:	4413      	add	r3, r2
 80126a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	6858      	ldr	r0, [r3, #4]
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	685a      	ldr	r2, [r3, #4]
 80126ac:	7bbb      	ldrb	r3, [r7, #14]
 80126ae:	18d1      	adds	r1, r2, r3
 80126b0:	897b      	ldrh	r3, [r7, #10]
 80126b2:	89ba      	ldrh	r2, [r7, #12]
 80126b4:	f7fb f808 	bl	800d6c8 <pbuf_copy_partial>
 80126b8:	4603      	mov	r3, r0
 80126ba:	461a      	mov	r2, r3
 80126bc:	89bb      	ldrh	r3, [r7, #12]
 80126be:	4293      	cmp	r3, r2
 80126c0:	f040 809f 	bne.w	8012802 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	899b      	ldrh	r3, [r3, #12]
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7f9 f8ff 	bl	800b8d0 <lwip_htons>
 80126d2:	4603      	mov	r3, r0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80126dc:	2300      	movs	r3, #0
 80126de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80126e0:	7efb      	ldrb	r3, [r7, #27]
 80126e2:	f003 0308 	and.w	r3, r3, #8
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d007      	beq.n	80126fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80126ea:	7efb      	ldrb	r3, [r7, #27]
 80126ec:	f023 0308 	bic.w	r3, r3, #8
 80126f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80126f2:	7ebb      	ldrb	r3, [r7, #26]
 80126f4:	f043 0308 	orr.w	r3, r3, #8
 80126f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80126fa:	7efb      	ldrb	r3, [r7, #27]
 80126fc:	f003 0301 	and.w	r3, r3, #1
 8012700:	2b00      	cmp	r3, #0
 8012702:	d007      	beq.n	8012714 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012704:	7efb      	ldrb	r3, [r7, #27]
 8012706:	f023 0301 	bic.w	r3, r3, #1
 801270a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801270c:	7ebb      	ldrb	r3, [r7, #26]
 801270e:	f043 0301 	orr.w	r3, r3, #1
 8012712:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	4618      	mov	r0, r3
 801271c:	f7f9 f8ed 	bl	800b8fa <lwip_htonl>
 8012720:	4602      	mov	r2, r0
 8012722:	887b      	ldrh	r3, [r7, #2]
 8012724:	18d1      	adds	r1, r2, r3
 8012726:	7eba      	ldrb	r2, [r7, #26]
 8012728:	7bfb      	ldrb	r3, [r7, #15]
 801272a:	9300      	str	r3, [sp, #0]
 801272c:	460b      	mov	r3, r1
 801272e:	6939      	ldr	r1, [r7, #16]
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7ff fa4f 	bl	8011bd4 <tcp_create_segment>
 8012736:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d063      	beq.n	8012806 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	4618      	mov	r0, r3
 8012744:	f7fa fe58 	bl	800d3f8 <pbuf_clen>
 8012748:	4603      	mov	r3, r0
 801274a:	461a      	mov	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012752:	1a9b      	subs	r3, r3, r2
 8012754:	b29a      	uxth	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	6858      	ldr	r0, [r3, #4]
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	891a      	ldrh	r2, [r3, #8]
 8012766:	89bb      	ldrh	r3, [r7, #12]
 8012768:	1ad3      	subs	r3, r2, r3
 801276a:	b29b      	uxth	r3, r3
 801276c:	4619      	mov	r1, r3
 801276e:	f7fa fc2f 	bl	800cfd0 <pbuf_realloc>
  useg->len -= remainder;
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	891a      	ldrh	r2, [r3, #8]
 8012776:	89bb      	ldrh	r3, [r7, #12]
 8012778:	1ad3      	subs	r3, r2, r3
 801277a:	b29a      	uxth	r2, r3
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29c      	uxth	r4, r3
 8012788:	7efb      	ldrb	r3, [r7, #27]
 801278a:	b29b      	uxth	r3, r3
 801278c:	4618      	mov	r0, r3
 801278e:	f7f9 f89f 	bl	800b8d0 <lwip_htons>
 8012792:	4603      	mov	r3, r0
 8012794:	461a      	mov	r2, r3
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	4322      	orrs	r2, r4
 801279c:	b292      	uxth	r2, r2
 801279e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7fa fe27 	bl	800d3f8 <pbuf_clen>
 80127aa:	4603      	mov	r3, r0
 80127ac:	461a      	mov	r2, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127b4:	4413      	add	r3, r2
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fa fe18 	bl	800d3f8 <pbuf_clen>
 80127c8:	4603      	mov	r3, r0
 80127ca:	461a      	mov	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127d2:	4413      	add	r3, r2
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	69fa      	ldr	r2, [r7, #28]
 80127e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d103      	bne.n	80127fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2200      	movs	r2, #0
 80127f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80127fa:	2300      	movs	r3, #0
 80127fc:	e016      	b.n	801282c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80127fe:	bf00      	nop
 8012800:	e002      	b.n	8012808 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012802:	bf00      	nop
 8012804:	e000      	b.n	8012808 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012806:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d006      	beq.n	801281c <tcp_split_unsent_seg+0x25c>
 801280e:	4b09      	ldr	r3, [pc, #36]	; (8012834 <tcp_split_unsent_seg+0x274>)
 8012810:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012814:	490d      	ldr	r1, [pc, #52]	; (801284c <tcp_split_unsent_seg+0x28c>)
 8012816:	4809      	ldr	r0, [pc, #36]	; (801283c <tcp_split_unsent_seg+0x27c>)
 8012818:	f004 f8d2 	bl	80169c0 <iprintf>
  if (p != NULL) {
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d002      	beq.n	8012828 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012822:	6938      	ldr	r0, [r7, #16]
 8012824:	f7fa fd5a 	bl	800d2dc <pbuf_free>
  }

  return ERR_MEM;
 8012828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801282c:	4618      	mov	r0, r3
 801282e:	3724      	adds	r7, #36	; 0x24
 8012830:	46bd      	mov	sp, r7
 8012832:	bd90      	pop	{r4, r7, pc}
 8012834:	0801bc04 	.word	0x0801bc04
 8012838:	0801bf98 	.word	0x0801bf98
 801283c:	0801bc58 	.word	0x0801bc58
 8012840:	0801bfbc 	.word	0x0801bfbc
 8012844:	0801bfe0 	.word	0x0801bfe0
 8012848:	0801bff0 	.word	0x0801bff0
 801284c:	0801c000 	.word	0x0801c000

08012850 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012850:	b590      	push	{r4, r7, lr}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d106      	bne.n	801286c <tcp_send_fin+0x1c>
 801285e:	4b21      	ldr	r3, [pc, #132]	; (80128e4 <tcp_send_fin+0x94>)
 8012860:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012864:	4920      	ldr	r1, [pc, #128]	; (80128e8 <tcp_send_fin+0x98>)
 8012866:	4821      	ldr	r0, [pc, #132]	; (80128ec <tcp_send_fin+0x9c>)
 8012868:	f004 f8aa 	bl	80169c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012870:	2b00      	cmp	r3, #0
 8012872:	d02e      	beq.n	80128d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012878:	60fb      	str	r3, [r7, #12]
 801287a:	e002      	b.n	8012882 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1f8      	bne.n	801287c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	68db      	ldr	r3, [r3, #12]
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	b29b      	uxth	r3, r3
 8012892:	4618      	mov	r0, r3
 8012894:	f7f9 f81c 	bl	800b8d0 <lwip_htons>
 8012898:	4603      	mov	r3, r0
 801289a:	b2db      	uxtb	r3, r3
 801289c:	f003 0307 	and.w	r3, r3, #7
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d116      	bne.n	80128d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	899b      	ldrh	r3, [r3, #12]
 80128aa:	b29c      	uxth	r4, r3
 80128ac:	2001      	movs	r0, #1
 80128ae:	f7f9 f80f 	bl	800b8d0 <lwip_htons>
 80128b2:	4603      	mov	r3, r0
 80128b4:	461a      	mov	r2, r3
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	4322      	orrs	r2, r4
 80128bc:	b292      	uxth	r2, r2
 80128be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	8b5b      	ldrh	r3, [r3, #26]
 80128c4:	f043 0320 	orr.w	r3, r3, #32
 80128c8:	b29a      	uxth	r2, r3
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80128ce:	2300      	movs	r3, #0
 80128d0:	e004      	b.n	80128dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80128d2:	2101      	movs	r1, #1
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 f80b 	bl	80128f0 <tcp_enqueue_flags>
 80128da:	4603      	mov	r3, r0
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3714      	adds	r7, #20
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd90      	pop	{r4, r7, pc}
 80128e4:	0801bc04 	.word	0x0801bc04
 80128e8:	0801c00c 	.word	0x0801c00c
 80128ec:	0801bc58 	.word	0x0801bc58

080128f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b08a      	sub	sp, #40	; 0x28
 80128f4:	af02      	add	r7, sp, #8
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	460b      	mov	r3, r1
 80128fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80128fc:	2300      	movs	r3, #0
 80128fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012900:	2300      	movs	r3, #0
 8012902:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012904:	78fb      	ldrb	r3, [r7, #3]
 8012906:	f003 0303 	and.w	r3, r3, #3
 801290a:	2b00      	cmp	r3, #0
 801290c:	d106      	bne.n	801291c <tcp_enqueue_flags+0x2c>
 801290e:	4b67      	ldr	r3, [pc, #412]	; (8012aac <tcp_enqueue_flags+0x1bc>)
 8012910:	f240 4211 	movw	r2, #1041	; 0x411
 8012914:	4966      	ldr	r1, [pc, #408]	; (8012ab0 <tcp_enqueue_flags+0x1c0>)
 8012916:	4867      	ldr	r0, [pc, #412]	; (8012ab4 <tcp_enqueue_flags+0x1c4>)
 8012918:	f004 f852 	bl	80169c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d106      	bne.n	8012930 <tcp_enqueue_flags+0x40>
 8012922:	4b62      	ldr	r3, [pc, #392]	; (8012aac <tcp_enqueue_flags+0x1bc>)
 8012924:	f240 4213 	movw	r2, #1043	; 0x413
 8012928:	4963      	ldr	r1, [pc, #396]	; (8012ab8 <tcp_enqueue_flags+0x1c8>)
 801292a:	4862      	ldr	r0, [pc, #392]	; (8012ab4 <tcp_enqueue_flags+0x1c4>)
 801292c:	f004 f848 	bl	80169c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012930:	78fb      	ldrb	r3, [r7, #3]
 8012932:	f003 0302 	and.w	r3, r3, #2
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801293a:	2301      	movs	r3, #1
 801293c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801293e:	7ffb      	ldrb	r3, [r7, #31]
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	b2db      	uxtb	r3, r3
 8012944:	f003 0304 	and.w	r3, r3, #4
 8012948:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801294a:	7dfb      	ldrb	r3, [r7, #23]
 801294c:	b29b      	uxth	r3, r3
 801294e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012952:	4619      	mov	r1, r3
 8012954:	2036      	movs	r0, #54	; 0x36
 8012956:	f7fa f9dd 	bl	800cd14 <pbuf_alloc>
 801295a:	6138      	str	r0, [r7, #16]
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d109      	bne.n	8012976 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8b5b      	ldrh	r3, [r3, #26]
 8012966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801296a:	b29a      	uxth	r2, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012974:	e095      	b.n	8012aa2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	895a      	ldrh	r2, [r3, #10]
 801297a:	7dfb      	ldrb	r3, [r7, #23]
 801297c:	b29b      	uxth	r3, r3
 801297e:	429a      	cmp	r2, r3
 8012980:	d206      	bcs.n	8012990 <tcp_enqueue_flags+0xa0>
 8012982:	4b4a      	ldr	r3, [pc, #296]	; (8012aac <tcp_enqueue_flags+0x1bc>)
 8012984:	f240 4239 	movw	r2, #1081	; 0x439
 8012988:	494c      	ldr	r1, [pc, #304]	; (8012abc <tcp_enqueue_flags+0x1cc>)
 801298a:	484a      	ldr	r0, [pc, #296]	; (8012ab4 <tcp_enqueue_flags+0x1c4>)
 801298c:	f004 f818 	bl	80169c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012994:	78fa      	ldrb	r2, [r7, #3]
 8012996:	7ffb      	ldrb	r3, [r7, #31]
 8012998:	9300      	str	r3, [sp, #0]
 801299a:	460b      	mov	r3, r1
 801299c:	6939      	ldr	r1, [r7, #16]
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7ff f918 	bl	8011bd4 <tcp_create_segment>
 80129a4:	60f8      	str	r0, [r7, #12]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d109      	bne.n	80129c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	8b5b      	ldrh	r3, [r3, #26]
 80129b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80129ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129be:	e070      	b.n	8012aa2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	f003 0303 	and.w	r3, r3, #3
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d006      	beq.n	80129da <tcp_enqueue_flags+0xea>
 80129cc:	4b37      	ldr	r3, [pc, #220]	; (8012aac <tcp_enqueue_flags+0x1bc>)
 80129ce:	f240 4242 	movw	r2, #1090	; 0x442
 80129d2:	493b      	ldr	r1, [pc, #236]	; (8012ac0 <tcp_enqueue_flags+0x1d0>)
 80129d4:	4837      	ldr	r0, [pc, #220]	; (8012ab4 <tcp_enqueue_flags+0x1c4>)
 80129d6:	f003 fff3 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	891b      	ldrh	r3, [r3, #8]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d006      	beq.n	80129f0 <tcp_enqueue_flags+0x100>
 80129e2:	4b32      	ldr	r3, [pc, #200]	; (8012aac <tcp_enqueue_flags+0x1bc>)
 80129e4:	f240 4243 	movw	r2, #1091	; 0x443
 80129e8:	4936      	ldr	r1, [pc, #216]	; (8012ac4 <tcp_enqueue_flags+0x1d4>)
 80129ea:	4832      	ldr	r0, [pc, #200]	; (8012ab4 <tcp_enqueue_flags+0x1c4>)
 80129ec:	f003 ffe8 	bl	80169c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d103      	bne.n	8012a00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	68fa      	ldr	r2, [r7, #12]
 80129fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80129fe:	e00d      	b.n	8012a1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a04:	61bb      	str	r3, [r7, #24]
 8012a06:	e002      	b.n	8012a0e <tcp_enqueue_flags+0x11e>
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	61bb      	str	r3, [r7, #24]
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d1f8      	bne.n	8012a08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012a24:	78fb      	ldrb	r3, [r7, #3]
 8012a26:	f003 0302 	and.w	r3, r3, #2
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d104      	bne.n	8012a38 <tcp_enqueue_flags+0x148>
 8012a2e:	78fb      	ldrb	r3, [r7, #3]
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d004      	beq.n	8012a42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a3c:	1c5a      	adds	r2, r3, #1
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012a42:	78fb      	ldrb	r3, [r7, #3]
 8012a44:	f003 0301 	and.w	r3, r3, #1
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d006      	beq.n	8012a5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	8b5b      	ldrh	r3, [r3, #26]
 8012a50:	f043 0320 	orr.w	r3, r3, #32
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fa fcca 	bl	800d3f8 <pbuf_clen>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a6e:	4413      	add	r3, r2
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00e      	beq.n	8012aa0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d10a      	bne.n	8012aa0 <tcp_enqueue_flags+0x1b0>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d106      	bne.n	8012aa0 <tcp_enqueue_flags+0x1b0>
 8012a92:	4b06      	ldr	r3, [pc, #24]	; (8012aac <tcp_enqueue_flags+0x1bc>)
 8012a94:	f240 4265 	movw	r2, #1125	; 0x465
 8012a98:	490b      	ldr	r1, [pc, #44]	; (8012ac8 <tcp_enqueue_flags+0x1d8>)
 8012a9a:	4806      	ldr	r0, [pc, #24]	; (8012ab4 <tcp_enqueue_flags+0x1c4>)
 8012a9c:	f003 ff90 	bl	80169c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012aa0:	2300      	movs	r3, #0
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3720      	adds	r7, #32
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	0801bc04 	.word	0x0801bc04
 8012ab0:	0801c028 	.word	0x0801c028
 8012ab4:	0801bc58 	.word	0x0801bc58
 8012ab8:	0801c080 	.word	0x0801c080
 8012abc:	0801c0a0 	.word	0x0801c0a0
 8012ac0:	0801c0dc 	.word	0x0801c0dc
 8012ac4:	0801c0f4 	.word	0x0801c0f4
 8012ac8:	0801c120 	.word	0x0801c120

08012acc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012acc:	b5b0      	push	{r4, r5, r7, lr}
 8012ace:	b08a      	sub	sp, #40	; 0x28
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_output+0x1c>
 8012ada:	4b8a      	ldr	r3, [pc, #552]	; (8012d04 <tcp_output+0x238>)
 8012adc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012ae0:	4989      	ldr	r1, [pc, #548]	; (8012d08 <tcp_output+0x23c>)
 8012ae2:	488a      	ldr	r0, [pc, #552]	; (8012d0c <tcp_output+0x240>)
 8012ae4:	f003 ff6c 	bl	80169c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	7d1b      	ldrb	r3, [r3, #20]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d106      	bne.n	8012afe <tcp_output+0x32>
 8012af0:	4b84      	ldr	r3, [pc, #528]	; (8012d04 <tcp_output+0x238>)
 8012af2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012af6:	4986      	ldr	r1, [pc, #536]	; (8012d10 <tcp_output+0x244>)
 8012af8:	4884      	ldr	r0, [pc, #528]	; (8012d0c <tcp_output+0x240>)
 8012afa:	f003 ff61 	bl	80169c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012afe:	4b85      	ldr	r3, [pc, #532]	; (8012d14 <tcp_output+0x248>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d101      	bne.n	8012b0c <tcp_output+0x40>
    return ERR_OK;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	e1ce      	b.n	8012eaa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	bf28      	it	cs
 8012b1c:	4613      	movcs	r3, r2
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d10b      	bne.n	8012b46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	8b5b      	ldrh	r3, [r3, #26]
 8012b32:	f003 0302 	and.w	r3, r3, #2
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 81aa 	beq.w	8012e90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f000 fded 	bl	801371c <tcp_send_empty_ack>
 8012b42:	4603      	mov	r3, r0
 8012b44:	e1b1      	b.n	8012eaa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012b46:	6879      	ldr	r1, [r7, #4]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3304      	adds	r3, #4
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f7ff f824 	bl	8011b9c <tcp_route>
 8012b54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d102      	bne.n	8012b62 <tcp_output+0x96>
    return ERR_RTE;
 8012b5c:	f06f 0303 	mvn.w	r3, #3
 8012b60:	e1a3      	b.n	8012eaa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d003      	beq.n	8012b70 <tcp_output+0xa4>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d111      	bne.n	8012b94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d002      	beq.n	8012b7c <tcp_output+0xb0>
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	3304      	adds	r3, #4
 8012b7a:	e000      	b.n	8012b7e <tcp_output+0xb2>
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d102      	bne.n	8012b8c <tcp_output+0xc0>
      return ERR_RTE;
 8012b86:	f06f 0303 	mvn.w	r3, #3
 8012b8a:	e18e      	b.n	8012eaa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7f8 fead 	bl	800b8fa <lwip_htonl>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012baa:	8912      	ldrh	r2, [r2, #8]
 8012bac:	4413      	add	r3, r2
 8012bae:	69ba      	ldr	r2, [r7, #24]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d227      	bcs.n	8012c04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012bba:	461a      	mov	r2, r3
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d114      	bne.n	8012bec <tcp_output+0x120>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d110      	bne.n	8012bec <tcp_output+0x120>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d10b      	bne.n	8012bec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2201      	movs	r2, #1
 8012be0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2200      	movs	r2, #0
 8012be8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	8b5b      	ldrh	r3, [r3, #26]
 8012bf0:	f003 0302 	and.w	r3, r3, #2
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	f000 814d 	beq.w	8012e94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f000 fd8e 	bl	801371c <tcp_send_empty_ack>
 8012c00:	4603      	mov	r3, r0
 8012c02:	e152      	b.n	8012eaa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012c12:	6a3b      	ldr	r3, [r7, #32]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	f000 811c 	beq.w	8012e52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012c1a:	e002      	b.n	8012c22 <tcp_output+0x156>
 8012c1c:	6a3b      	ldr	r3, [r7, #32]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	623b      	str	r3, [r7, #32]
 8012c22:	6a3b      	ldr	r3, [r7, #32]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d1f8      	bne.n	8012c1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012c2a:	e112      	b.n	8012e52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	68db      	ldr	r3, [r3, #12]
 8012c30:	899b      	ldrh	r3, [r3, #12]
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f8 fe4b 	bl	800b8d0 <lwip_htons>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	f003 0304 	and.w	r3, r3, #4
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d006      	beq.n	8012c54 <tcp_output+0x188>
 8012c46:	4b2f      	ldr	r3, [pc, #188]	; (8012d04 <tcp_output+0x238>)
 8012c48:	f240 5236 	movw	r2, #1334	; 0x536
 8012c4c:	4932      	ldr	r1, [pc, #200]	; (8012d18 <tcp_output+0x24c>)
 8012c4e:	482f      	ldr	r0, [pc, #188]	; (8012d0c <tcp_output+0x240>)
 8012c50:	f003 feb6 	bl	80169c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d01f      	beq.n	8012c9c <tcp_output+0x1d0>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	8b5b      	ldrh	r3, [r3, #26]
 8012c60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d119      	bne.n	8012c9c <tcp_output+0x1d0>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00b      	beq.n	8012c88 <tcp_output+0x1bc>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d110      	bne.n	8012c9c <tcp_output+0x1d0>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c7e:	891a      	ldrh	r2, [r3, #8]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d209      	bcs.n	8012c9c <tcp_output+0x1d0>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d004      	beq.n	8012c9c <tcp_output+0x1d0>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c98:	2b08      	cmp	r3, #8
 8012c9a:	d901      	bls.n	8012ca0 <tcp_output+0x1d4>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e000      	b.n	8012ca2 <tcp_output+0x1d6>
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d106      	bne.n	8012cb4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	8b5b      	ldrh	r3, [r3, #26]
 8012caa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 80e4 	beq.w	8012e7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7d1b      	ldrb	r3, [r3, #20]
 8012cb8:	2b02      	cmp	r3, #2
 8012cba:	d00d      	beq.n	8012cd8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	899b      	ldrh	r3, [r3, #12]
 8012cc2:	b29c      	uxth	r4, r3
 8012cc4:	2010      	movs	r0, #16
 8012cc6:	f7f8 fe03 	bl	800b8d0 <lwip_htons>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	461a      	mov	r2, r3
 8012cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd0:	68db      	ldr	r3, [r3, #12]
 8012cd2:	4322      	orrs	r2, r4
 8012cd4:	b292      	uxth	r2, r2
 8012cd6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012cd8:	697a      	ldr	r2, [r7, #20]
 8012cda:	6879      	ldr	r1, [r7, #4]
 8012cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cde:	f000 f909 	bl	8012ef4 <tcp_output_segment>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d016      	beq.n	8012d1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	8b5b      	ldrh	r3, [r3, #26]
 8012cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	835a      	strh	r2, [r3, #26]
      return err;
 8012cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d00:	e0d3      	b.n	8012eaa <tcp_output+0x3de>
 8012d02:	bf00      	nop
 8012d04:	0801bc04 	.word	0x0801bc04
 8012d08:	0801c148 	.word	0x0801c148
 8012d0c:	0801bc58 	.word	0x0801bc58
 8012d10:	0801c160 	.word	0x0801c160
 8012d14:	20011b94 	.word	0x20011b94
 8012d18:	0801c188 	.word	0x0801c188
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	7d1b      	ldrb	r3, [r3, #20]
 8012d28:	2b02      	cmp	r3, #2
 8012d2a:	d006      	beq.n	8012d3a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	8b5b      	ldrh	r3, [r3, #26]
 8012d30:	f023 0303 	bic.w	r3, r3, #3
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3c:	68db      	ldr	r3, [r3, #12]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7f8 fdda 	bl	800b8fa <lwip_htonl>
 8012d46:	4604      	mov	r4, r0
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	891b      	ldrh	r3, [r3, #8]
 8012d4c:	461d      	mov	r5, r3
 8012d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	899b      	ldrh	r3, [r3, #12]
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f8 fdba 	bl	800b8d0 <lwip_htons>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	f003 0303 	and.w	r3, r3, #3
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d001      	beq.n	8012d6c <tcp_output+0x2a0>
 8012d68:	2301      	movs	r3, #1
 8012d6a:	e000      	b.n	8012d6e <tcp_output+0x2a2>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	442b      	add	r3, r5
 8012d70:	4423      	add	r3, r4
 8012d72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	1ad3      	subs	r3, r2, r3
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	da02      	bge.n	8012d86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	68ba      	ldr	r2, [r7, #8]
 8012d84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	891b      	ldrh	r3, [r3, #8]
 8012d8a:	461c      	mov	r4, r3
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	899b      	ldrh	r3, [r3, #12]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7f8 fd9b 	bl	800b8d0 <lwip_htons>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	f003 0303 	and.w	r3, r3, #3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <tcp_output+0x2de>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e000      	b.n	8012dac <tcp_output+0x2e0>
 8012daa:	2300      	movs	r3, #0
 8012dac:	4423      	add	r3, r4
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d049      	beq.n	8012e46 <tcp_output+0x37a>
      seg->next = NULL;
 8012db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db4:	2200      	movs	r2, #0
 8012db6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d105      	bne.n	8012dcc <tcp_output+0x300>
        pcb->unacked = seg;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dc4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc8:	623b      	str	r3, [r7, #32]
 8012dca:	e03f      	b.n	8012e4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	685b      	ldr	r3, [r3, #4]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f8 fd91 	bl	800b8fa <lwip_htonl>
 8012dd8:	4604      	mov	r4, r0
 8012dda:	6a3b      	ldr	r3, [r7, #32]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7f8 fd8a 	bl	800b8fa <lwip_htonl>
 8012de6:	4603      	mov	r3, r0
 8012de8:	1ae3      	subs	r3, r4, r3
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	da24      	bge.n	8012e38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	3370      	adds	r3, #112	; 0x70
 8012df2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012df4:	e002      	b.n	8012dfc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d011      	beq.n	8012e28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e04:	69fb      	ldr	r3, [r7, #28]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f8 fd74 	bl	800b8fa <lwip_htonl>
 8012e12:	4604      	mov	r4, r0
 8012e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7f8 fd6d 	bl	800b8fa <lwip_htonl>
 8012e20:	4603      	mov	r3, r0
 8012e22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	dbe6      	blt.n	8012df6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e34:	601a      	str	r2, [r3, #0]
 8012e36:	e009      	b.n	8012e4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012e38:	6a3b      	ldr	r3, [r7, #32]
 8012e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012e3e:	6a3b      	ldr	r3, [r7, #32]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	623b      	str	r3, [r7, #32]
 8012e44:	e002      	b.n	8012e4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e48:	f7fb ff19 	bl	800ec7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d012      	beq.n	8012e7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f8 fd4b 	bl	800b8fa <lwip_htonl>
 8012e64:	4602      	mov	r2, r0
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e6a:	1ad3      	subs	r3, r2, r3
 8012e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e6e:	8912      	ldrh	r2, [r2, #8]
 8012e70:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e72:	69ba      	ldr	r2, [r7, #24]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	f4bf aed9 	bcs.w	8012c2c <tcp_output+0x160>
 8012e7a:	e000      	b.n	8012e7e <tcp_output+0x3b2>
      break;
 8012e7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d108      	bne.n	8012e98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e8e:	e004      	b.n	8012e9a <tcp_output+0x3ce>
    goto output_done;
 8012e90:	bf00      	nop
 8012e92:	e002      	b.n	8012e9a <tcp_output+0x3ce>
    goto output_done;
 8012e94:	bf00      	nop
 8012e96:	e000      	b.n	8012e9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	8b5b      	ldrh	r3, [r3, #26]
 8012e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012ea8:	2300      	movs	r3, #0
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3728      	adds	r7, #40	; 0x28
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8012eb2:	bf00      	nop

08012eb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <tcp_output_segment_busy+0x1c>
 8012ec2:	4b09      	ldr	r3, [pc, #36]	; (8012ee8 <tcp_output_segment_busy+0x34>)
 8012ec4:	f240 529a 	movw	r2, #1434	; 0x59a
 8012ec8:	4908      	ldr	r1, [pc, #32]	; (8012eec <tcp_output_segment_busy+0x38>)
 8012eca:	4809      	ldr	r0, [pc, #36]	; (8012ef0 <tcp_output_segment_busy+0x3c>)
 8012ecc:	f003 fd78 	bl	80169c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	7b9b      	ldrb	r3, [r3, #14]
 8012ed6:	2b01      	cmp	r3, #1
 8012ed8:	d001      	beq.n	8012ede <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012eda:	2301      	movs	r3, #1
 8012edc:	e000      	b.n	8012ee0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012ede:	2300      	movs	r3, #0
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3708      	adds	r7, #8
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	0801bc04 	.word	0x0801bc04
 8012eec:	0801c1a0 	.word	0x0801c1a0
 8012ef0:	0801bc58 	.word	0x0801bc58

08012ef4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012ef4:	b5b0      	push	{r4, r5, r7, lr}
 8012ef6:	b08c      	sub	sp, #48	; 0x30
 8012ef8:	af04      	add	r7, sp, #16
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d106      	bne.n	8012f14 <tcp_output_segment+0x20>
 8012f06:	4b6c      	ldr	r3, [pc, #432]	; (80130b8 <tcp_output_segment+0x1c4>)
 8012f08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012f0c:	496b      	ldr	r1, [pc, #428]	; (80130bc <tcp_output_segment+0x1c8>)
 8012f0e:	486c      	ldr	r0, [pc, #432]	; (80130c0 <tcp_output_segment+0x1cc>)
 8012f10:	f003 fd56 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d106      	bne.n	8012f28 <tcp_output_segment+0x34>
 8012f1a:	4b67      	ldr	r3, [pc, #412]	; (80130b8 <tcp_output_segment+0x1c4>)
 8012f1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012f20:	4968      	ldr	r1, [pc, #416]	; (80130c4 <tcp_output_segment+0x1d0>)
 8012f22:	4867      	ldr	r0, [pc, #412]	; (80130c0 <tcp_output_segment+0x1cc>)
 8012f24:	f003 fd4c 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d106      	bne.n	8012f3c <tcp_output_segment+0x48>
 8012f2e:	4b62      	ldr	r3, [pc, #392]	; (80130b8 <tcp_output_segment+0x1c4>)
 8012f30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012f34:	4964      	ldr	r1, [pc, #400]	; (80130c8 <tcp_output_segment+0x1d4>)
 8012f36:	4862      	ldr	r0, [pc, #392]	; (80130c0 <tcp_output_segment+0x1cc>)
 8012f38:	f003 fd42 	bl	80169c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f7ff ffb9 	bl	8012eb4 <tcp_output_segment_busy>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d001      	beq.n	8012f4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	e0b1      	b.n	80130b0 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	68dc      	ldr	r4, [r3, #12]
 8012f54:	4610      	mov	r0, r2
 8012f56:	f7f8 fcd0 	bl	800b8fa <lwip_htonl>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	68dc      	ldr	r4, [r3, #12]
 8012f66:	4610      	mov	r0, r2
 8012f68:	f7f8 fcb2 	bl	800b8d0 <lwip_htons>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f74:	68ba      	ldr	r2, [r7, #8]
 8012f76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f78:	441a      	add	r2, r3
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	3314      	adds	r3, #20
 8012f84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	7a9b      	ldrb	r3, [r3, #10]
 8012f8a:	f003 0301 	and.w	r3, r3, #1
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d015      	beq.n	8012fbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	3304      	adds	r3, #4
 8012f96:	461a      	mov	r2, r3
 8012f98:	6879      	ldr	r1, [r7, #4]
 8012f9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f9e:	f7fc fa33 	bl	800f408 <tcp_eff_send_mss_netif>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012fa6:	8b7b      	ldrh	r3, [r7, #26]
 8012fa8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f8 fca4 	bl	800b8fa <lwip_htonl>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	3304      	adds	r3, #4
 8012fbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	da02      	bge.n	8012fce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d10c      	bne.n	8012ff0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012fd6:	4b3d      	ldr	r3, [pc, #244]	; (80130cc <tcp_output_segment+0x1d8>)
 8012fd8:	681a      	ldr	r2, [r3, #0]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f8 fc88 	bl	800b8fa <lwip_htonl>
 8012fea:	4602      	mov	r2, r0
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	68da      	ldr	r2, [r3, #12]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	1ad3      	subs	r3, r2, r3
 8012ffc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	8959      	ldrh	r1, [r3, #10]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	8b3a      	ldrh	r2, [r7, #24]
 801300a:	1a8a      	subs	r2, r1, r2
 801300c:	b292      	uxth	r2, r2
 801300e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	8919      	ldrh	r1, [r3, #8]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	8b3a      	ldrh	r2, [r7, #24]
 801301c:	1a8a      	subs	r2, r1, r2
 801301e:	b292      	uxth	r2, r2
 8013020:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	68fa      	ldr	r2, [r7, #12]
 8013028:	68d2      	ldr	r2, [r2, #12]
 801302a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	68db      	ldr	r3, [r3, #12]
 8013030:	2200      	movs	r2, #0
 8013032:	741a      	strb	r2, [r3, #16]
 8013034:	2200      	movs	r2, #0
 8013036:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	68db      	ldr	r3, [r3, #12]
 801303c:	f103 0214 	add.w	r2, r3, #20
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	7a9b      	ldrb	r3, [r3, #10]
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	f003 0304 	and.w	r3, r3, #4
 801304a:	4413      	add	r3, r2
 801304c:	69fa      	ldr	r2, [r7, #28]
 801304e:	429a      	cmp	r2, r3
 8013050:	d006      	beq.n	8013060 <tcp_output_segment+0x16c>
 8013052:	4b19      	ldr	r3, [pc, #100]	; (80130b8 <tcp_output_segment+0x1c4>)
 8013054:	f240 621c 	movw	r2, #1564	; 0x61c
 8013058:	491d      	ldr	r1, [pc, #116]	; (80130d0 <tcp_output_segment+0x1dc>)
 801305a:	4819      	ldr	r0, [pc, #100]	; (80130c0 <tcp_output_segment+0x1cc>)
 801305c:	f003 fcb0 	bl	80169c0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013068:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801306a:	68bd      	ldr	r5, [r7, #8]
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013070:	68fa      	ldr	r2, [r7, #12]
 8013072:	68d4      	ldr	r4, [r2, #12]
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	462b      	mov	r3, r5
 8013078:	460a      	mov	r2, r1
 801307a:	2106      	movs	r1, #6
 801307c:	f7f8 fd5a 	bl	800bb34 <ip_chksum_pseudo>
 8013080:	4603      	mov	r3, r0
 8013082:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	6858      	ldr	r0, [r3, #4]
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	1d1c      	adds	r4, r3, #4
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	7add      	ldrb	r5, [r3, #11]
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	7a9b      	ldrb	r3, [r3, #10]
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	9202      	str	r2, [sp, #8]
 801309a:	2206      	movs	r2, #6
 801309c:	9201      	str	r2, [sp, #4]
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	462b      	mov	r3, r5
 80130a2:	4622      	mov	r2, r4
 80130a4:	f002 f8b2 	bl	801520c <ip4_output_if>
 80130a8:	4603      	mov	r3, r0
 80130aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80130ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3720      	adds	r7, #32
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bdb0      	pop	{r4, r5, r7, pc}
 80130b8:	0801bc04 	.word	0x0801bc04
 80130bc:	0801c1c8 	.word	0x0801c1c8
 80130c0:	0801bc58 	.word	0x0801bc58
 80130c4:	0801c1e8 	.word	0x0801c1e8
 80130c8:	0801c208 	.word	0x0801c208
 80130cc:	20011b48 	.word	0x20011b48
 80130d0:	0801c22c 	.word	0x0801c22c

080130d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80130d4:	b5b0      	push	{r4, r5, r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcp_rexmit_rto_prepare+0x1c>
 80130e2:	4b31      	ldr	r3, [pc, #196]	; (80131a8 <tcp_rexmit_rto_prepare+0xd4>)
 80130e4:	f240 6263 	movw	r2, #1635	; 0x663
 80130e8:	4930      	ldr	r1, [pc, #192]	; (80131ac <tcp_rexmit_rto_prepare+0xd8>)
 80130ea:	4831      	ldr	r0, [pc, #196]	; (80131b0 <tcp_rexmit_rto_prepare+0xdc>)
 80130ec:	f003 fc68 	bl	80169c0 <iprintf>

  if (pcb->unacked == NULL) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d102      	bne.n	80130fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80130f8:	f06f 0305 	mvn.w	r3, #5
 80130fc:	e050      	b.n	80131a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	e00b      	b.n	801311e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	f7ff fed4 	bl	8012eb4 <tcp_output_segment_busy>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	d002      	beq.n	8013118 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013112:	f06f 0305 	mvn.w	r3, #5
 8013116:	e043      	b.n	80131a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	60fb      	str	r3, [r7, #12]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1ef      	bne.n	8013106 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013126:	68f8      	ldr	r0, [r7, #12]
 8013128:	f7ff fec4 	bl	8012eb4 <tcp_output_segment_busy>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013132:	f06f 0305 	mvn.w	r3, #5
 8013136:	e033      	b.n	80131a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2200      	movs	r2, #0
 801314c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	8b5b      	ldrh	r3, [r3, #26]
 8013152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013156:	b29a      	uxth	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	685b      	ldr	r3, [r3, #4]
 8013162:	4618      	mov	r0, r3
 8013164:	f7f8 fbc9 	bl	800b8fa <lwip_htonl>
 8013168:	4604      	mov	r4, r0
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	891b      	ldrh	r3, [r3, #8]
 801316e:	461d      	mov	r5, r3
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	899b      	ldrh	r3, [r3, #12]
 8013176:	b29b      	uxth	r3, r3
 8013178:	4618      	mov	r0, r3
 801317a:	f7f8 fba9 	bl	800b8d0 <lwip_htons>
 801317e:	4603      	mov	r3, r0
 8013180:	b2db      	uxtb	r3, r3
 8013182:	f003 0303 	and.w	r3, r3, #3
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <tcp_rexmit_rto_prepare+0xba>
 801318a:	2301      	movs	r3, #1
 801318c:	e000      	b.n	8013190 <tcp_rexmit_rto_prepare+0xbc>
 801318e:	2300      	movs	r3, #0
 8013190:	442b      	add	r3, r5
 8013192:	18e2      	adds	r2, r4, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bdb0      	pop	{r4, r5, r7, pc}
 80131a8:	0801bc04 	.word	0x0801bc04
 80131ac:	0801c240 	.word	0x0801c240
 80131b0:	0801bc58 	.word	0x0801bc58

080131b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d106      	bne.n	80131d0 <tcp_rexmit_rto_commit+0x1c>
 80131c2:	4b0d      	ldr	r3, [pc, #52]	; (80131f8 <tcp_rexmit_rto_commit+0x44>)
 80131c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80131c8:	490c      	ldr	r1, [pc, #48]	; (80131fc <tcp_rexmit_rto_commit+0x48>)
 80131ca:	480d      	ldr	r0, [pc, #52]	; (8013200 <tcp_rexmit_rto_commit+0x4c>)
 80131cc:	f003 fbf8 	bl	80169c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131d6:	2bff      	cmp	r3, #255	; 0xff
 80131d8:	d007      	beq.n	80131ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131e0:	3301      	adds	r3, #1
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7ff fc6e 	bl	8012acc <tcp_output>
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	0801bc04 	.word	0x0801bc04
 80131fc:	0801c264 	.word	0x0801c264
 8013200:	0801bc58 	.word	0x0801bc58

08013204 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d106      	bne.n	8013220 <tcp_rexmit_rto+0x1c>
 8013212:	4b0a      	ldr	r3, [pc, #40]	; (801323c <tcp_rexmit_rto+0x38>)
 8013214:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013218:	4909      	ldr	r1, [pc, #36]	; (8013240 <tcp_rexmit_rto+0x3c>)
 801321a:	480a      	ldr	r0, [pc, #40]	; (8013244 <tcp_rexmit_rto+0x40>)
 801321c:	f003 fbd0 	bl	80169c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7ff ff57 	bl	80130d4 <tcp_rexmit_rto_prepare>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d102      	bne.n	8013232 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7ff ffc1 	bl	80131b4 <tcp_rexmit_rto_commit>
  }
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	0801bc04 	.word	0x0801bc04
 8013240:	0801c288 	.word	0x0801c288
 8013244:	0801bc58 	.word	0x0801bc58

08013248 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013248:	b590      	push	{r4, r7, lr}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d106      	bne.n	8013264 <tcp_rexmit+0x1c>
 8013256:	4b2f      	ldr	r3, [pc, #188]	; (8013314 <tcp_rexmit+0xcc>)
 8013258:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801325c:	492e      	ldr	r1, [pc, #184]	; (8013318 <tcp_rexmit+0xd0>)
 801325e:	482f      	ldr	r0, [pc, #188]	; (801331c <tcp_rexmit+0xd4>)
 8013260:	f003 fbae 	bl	80169c0 <iprintf>

  if (pcb->unacked == NULL) {
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013268:	2b00      	cmp	r3, #0
 801326a:	d102      	bne.n	8013272 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801326c:	f06f 0305 	mvn.w	r3, #5
 8013270:	e04c      	b.n	801330c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013276:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013278:	68b8      	ldr	r0, [r7, #8]
 801327a:	f7ff fe1b 	bl	8012eb4 <tcp_output_segment_busy>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013284:	f06f 0305 	mvn.w	r3, #5
 8013288:	e040      	b.n	801330c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	336c      	adds	r3, #108	; 0x6c
 8013296:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013298:	e002      	b.n	80132a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d011      	beq.n	80132cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f8 fb22 	bl	800b8fa <lwip_htonl>
 80132b6:	4604      	mov	r4, r0
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	4618      	mov	r0, r3
 80132c0:	f7f8 fb1b 	bl	800b8fa <lwip_htonl>
 80132c4:	4603      	mov	r3, r0
 80132c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	dbe6      	blt.n	801329a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	68ba      	ldr	r2, [r7, #8]
 80132d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d103      	bne.n	80132ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2200      	movs	r2, #0
 80132e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132f0:	2bff      	cmp	r3, #255	; 0xff
 80132f2:	d007      	beq.n	8013304 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132fa:	3301      	adds	r3, #1
 80132fc:	b2da      	uxtb	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2200      	movs	r2, #0
 8013308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3714      	adds	r7, #20
 8013310:	46bd      	mov	sp, r7
 8013312:	bd90      	pop	{r4, r7, pc}
 8013314:	0801bc04 	.word	0x0801bc04
 8013318:	0801c2a4 	.word	0x0801c2a4
 801331c:	0801bc58 	.word	0x0801bc58

08013320 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d106      	bne.n	801333c <tcp_rexmit_fast+0x1c>
 801332e:	4b2a      	ldr	r3, [pc, #168]	; (80133d8 <tcp_rexmit_fast+0xb8>)
 8013330:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013334:	4929      	ldr	r1, [pc, #164]	; (80133dc <tcp_rexmit_fast+0xbc>)
 8013336:	482a      	ldr	r0, [pc, #168]	; (80133e0 <tcp_rexmit_fast+0xc0>)
 8013338:	f003 fb42 	bl	80169c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013340:	2b00      	cmp	r3, #0
 8013342:	d045      	beq.n	80133d0 <tcp_rexmit_fast+0xb0>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	8b5b      	ldrh	r3, [r3, #26]
 8013348:	f003 0304 	and.w	r3, r3, #4
 801334c:	2b00      	cmp	r3, #0
 801334e:	d13f      	bne.n	80133d0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7ff ff79 	bl	8013248 <tcp_rexmit>
 8013356:	4603      	mov	r3, r0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d139      	bne.n	80133d0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013368:	4293      	cmp	r3, r2
 801336a:	bf28      	it	cs
 801336c:	4613      	movcs	r3, r2
 801336e:	b29b      	uxth	r3, r3
 8013370:	2b00      	cmp	r3, #0
 8013372:	da00      	bge.n	8013376 <tcp_rexmit_fast+0x56>
 8013374:	3301      	adds	r3, #1
 8013376:	105b      	asrs	r3, r3, #1
 8013378:	b29a      	uxth	r2, r3
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013386:	461a      	mov	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	429a      	cmp	r2, r3
 8013390:	d206      	bcs.n	80133a0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013396:	005b      	lsls	r3, r3, #1
 8013398:	b29a      	uxth	r2, r3
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133aa:	4619      	mov	r1, r3
 80133ac:	0049      	lsls	r1, r1, #1
 80133ae:	440b      	add	r3, r1
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	4413      	add	r3, r2
 80133b4:	b29a      	uxth	r2, r3
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	8b5b      	ldrh	r3, [r3, #26]
 80133c0:	f043 0304 	orr.w	r3, r3, #4
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	0801bc04 	.word	0x0801bc04
 80133dc:	0801c2bc 	.word	0x0801c2bc
 80133e0:	0801bc58 	.word	0x0801bc58

080133e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b086      	sub	sp, #24
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	607b      	str	r3, [r7, #4]
 80133ee:	460b      	mov	r3, r1
 80133f0:	817b      	strh	r3, [r7, #10]
 80133f2:	4613      	mov	r3, r2
 80133f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80133f6:	897a      	ldrh	r2, [r7, #10]
 80133f8:	893b      	ldrh	r3, [r7, #8]
 80133fa:	4413      	add	r3, r2
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	3314      	adds	r3, #20
 8013400:	b29b      	uxth	r3, r3
 8013402:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013406:	4619      	mov	r1, r3
 8013408:	2022      	movs	r0, #34	; 0x22
 801340a:	f7f9 fc83 	bl	800cd14 <pbuf_alloc>
 801340e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d04d      	beq.n	80134b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013416:	897b      	ldrh	r3, [r7, #10]
 8013418:	3313      	adds	r3, #19
 801341a:	697a      	ldr	r2, [r7, #20]
 801341c:	8952      	ldrh	r2, [r2, #10]
 801341e:	4293      	cmp	r3, r2
 8013420:	db06      	blt.n	8013430 <tcp_output_alloc_header_common+0x4c>
 8013422:	4b26      	ldr	r3, [pc, #152]	; (80134bc <tcp_output_alloc_header_common+0xd8>)
 8013424:	f240 7223 	movw	r2, #1827	; 0x723
 8013428:	4925      	ldr	r1, [pc, #148]	; (80134c0 <tcp_output_alloc_header_common+0xdc>)
 801342a:	4826      	ldr	r0, [pc, #152]	; (80134c4 <tcp_output_alloc_header_common+0xe0>)
 801342c:	f003 fac8 	bl	80169c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013436:	8c3b      	ldrh	r3, [r7, #32]
 8013438:	4618      	mov	r0, r3
 801343a:	f7f8 fa49 	bl	800b8d0 <lwip_htons>
 801343e:	4603      	mov	r3, r0
 8013440:	461a      	mov	r2, r3
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 fa41 	bl	800b8d0 <lwip_htons>
 801344e:	4603      	mov	r3, r0
 8013450:	461a      	mov	r2, r3
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801345c:	68f8      	ldr	r0, [r7, #12]
 801345e:	f7f8 fa4c 	bl	800b8fa <lwip_htonl>
 8013462:	4602      	mov	r2, r0
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013468:	897b      	ldrh	r3, [r7, #10]
 801346a:	089b      	lsrs	r3, r3, #2
 801346c:	b29b      	uxth	r3, r3
 801346e:	3305      	adds	r3, #5
 8013470:	b29b      	uxth	r3, r3
 8013472:	031b      	lsls	r3, r3, #12
 8013474:	b29a      	uxth	r2, r3
 8013476:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801347a:	b29b      	uxth	r3, r3
 801347c:	4313      	orrs	r3, r2
 801347e:	b29b      	uxth	r3, r3
 8013480:	4618      	mov	r0, r3
 8013482:	f7f8 fa25 	bl	800b8d0 <lwip_htons>
 8013486:	4603      	mov	r3, r0
 8013488:	461a      	mov	r2, r3
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801348e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013490:	4618      	mov	r0, r3
 8013492:	f7f8 fa1d 	bl	800b8d0 <lwip_htons>
 8013496:	4603      	mov	r3, r0
 8013498:	461a      	mov	r2, r3
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	2200      	movs	r2, #0
 80134a2:	741a      	strb	r2, [r3, #16]
 80134a4:	2200      	movs	r2, #0
 80134a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	2200      	movs	r2, #0
 80134ac:	749a      	strb	r2, [r3, #18]
 80134ae:	2200      	movs	r2, #0
 80134b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80134b2:	697b      	ldr	r3, [r7, #20]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3718      	adds	r7, #24
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	0801bc04 	.word	0x0801bc04
 80134c0:	0801c2dc 	.word	0x0801c2dc
 80134c4:	0801bc58 	.word	0x0801bc58

080134c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80134c8:	b5b0      	push	{r4, r5, r7, lr}
 80134ca:	b08a      	sub	sp, #40	; 0x28
 80134cc:	af04      	add	r7, sp, #16
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	607b      	str	r3, [r7, #4]
 80134d2:	460b      	mov	r3, r1
 80134d4:	817b      	strh	r3, [r7, #10]
 80134d6:	4613      	mov	r3, r2
 80134d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d106      	bne.n	80134ee <tcp_output_alloc_header+0x26>
 80134e0:	4b15      	ldr	r3, [pc, #84]	; (8013538 <tcp_output_alloc_header+0x70>)
 80134e2:	f240 7242 	movw	r2, #1858	; 0x742
 80134e6:	4915      	ldr	r1, [pc, #84]	; (801353c <tcp_output_alloc_header+0x74>)
 80134e8:	4815      	ldr	r0, [pc, #84]	; (8013540 <tcp_output_alloc_header+0x78>)
 80134ea:	f003 fa69 	bl	80169c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	8adb      	ldrh	r3, [r3, #22]
 80134f6:	68fa      	ldr	r2, [r7, #12]
 80134f8:	8b12      	ldrh	r2, [r2, #24]
 80134fa:	68f9      	ldr	r1, [r7, #12]
 80134fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80134fe:	893d      	ldrh	r5, [r7, #8]
 8013500:	897c      	ldrh	r4, [r7, #10]
 8013502:	9103      	str	r1, [sp, #12]
 8013504:	2110      	movs	r1, #16
 8013506:	9102      	str	r1, [sp, #8]
 8013508:	9201      	str	r2, [sp, #4]
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	462a      	mov	r2, r5
 8013510:	4621      	mov	r1, r4
 8013512:	f7ff ff67 	bl	80133e4 <tcp_output_alloc_header_common>
 8013516:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d006      	beq.n	801352c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013526:	441a      	add	r2, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801352c:	697b      	ldr	r3, [r7, #20]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bdb0      	pop	{r4, r5, r7, pc}
 8013536:	bf00      	nop
 8013538:	0801bc04 	.word	0x0801bc04
 801353c:	0801c30c 	.word	0x0801c30c
 8013540:	0801bc58 	.word	0x0801bc58

08013544 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b088      	sub	sp, #32
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	4611      	mov	r1, r2
 8013550:	461a      	mov	r2, r3
 8013552:	460b      	mov	r3, r1
 8013554:	71fb      	strb	r3, [r7, #7]
 8013556:	4613      	mov	r3, r2
 8013558:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801355a:	2300      	movs	r3, #0
 801355c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d106      	bne.n	8013572 <tcp_output_fill_options+0x2e>
 8013564:	4b13      	ldr	r3, [pc, #76]	; (80135b4 <tcp_output_fill_options+0x70>)
 8013566:	f240 7256 	movw	r2, #1878	; 0x756
 801356a:	4913      	ldr	r1, [pc, #76]	; (80135b8 <tcp_output_fill_options+0x74>)
 801356c:	4813      	ldr	r0, [pc, #76]	; (80135bc <tcp_output_fill_options+0x78>)
 801356e:	f003 fa27 	bl	80169c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	3314      	adds	r3, #20
 801357c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	f103 0214 	add.w	r2, r3, #20
 8013584:	8bfb      	ldrh	r3, [r7, #30]
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	4619      	mov	r1, r3
 801358a:	79fb      	ldrb	r3, [r7, #7]
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	f003 0304 	and.w	r3, r3, #4
 8013592:	440b      	add	r3, r1
 8013594:	4413      	add	r3, r2
 8013596:	697a      	ldr	r2, [r7, #20]
 8013598:	429a      	cmp	r2, r3
 801359a:	d006      	beq.n	80135aa <tcp_output_fill_options+0x66>
 801359c:	4b05      	ldr	r3, [pc, #20]	; (80135b4 <tcp_output_fill_options+0x70>)
 801359e:	f240 7275 	movw	r2, #1909	; 0x775
 80135a2:	4907      	ldr	r1, [pc, #28]	; (80135c0 <tcp_output_fill_options+0x7c>)
 80135a4:	4805      	ldr	r0, [pc, #20]	; (80135bc <tcp_output_fill_options+0x78>)
 80135a6:	f003 fa0b 	bl	80169c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80135aa:	bf00      	nop
 80135ac:	3720      	adds	r7, #32
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	0801bc04 	.word	0x0801bc04
 80135b8:	0801c334 	.word	0x0801c334
 80135bc:	0801bc58 	.word	0x0801bc58
 80135c0:	0801c22c 	.word	0x0801c22c

080135c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08c      	sub	sp, #48	; 0x30
 80135c8:	af04      	add	r7, sp, #16
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d106      	bne.n	80135e6 <tcp_output_control_segment+0x22>
 80135d8:	4b24      	ldr	r3, [pc, #144]	; (801366c <tcp_output_control_segment+0xa8>)
 80135da:	f240 7287 	movw	r2, #1927	; 0x787
 80135de:	4924      	ldr	r1, [pc, #144]	; (8013670 <tcp_output_control_segment+0xac>)
 80135e0:	4824      	ldr	r0, [pc, #144]	; (8013674 <tcp_output_control_segment+0xb0>)
 80135e2:	f003 f9ed 	bl	80169c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80135e6:	683a      	ldr	r2, [r7, #0]
 80135e8:	6879      	ldr	r1, [r7, #4]
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	f7fe fad6 	bl	8011b9c <tcp_route>
 80135f0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d102      	bne.n	80135fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80135f8:	23fc      	movs	r3, #252	; 0xfc
 80135fa:	77fb      	strb	r3, [r7, #31]
 80135fc:	e02c      	b.n	8013658 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	891a      	ldrh	r2, [r3, #8]
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2106      	movs	r1, #6
 8013610:	68b8      	ldr	r0, [r7, #8]
 8013612:	f7f8 fa8f 	bl	800bb34 <ip_chksum_pseudo>
 8013616:	4603      	mov	r3, r0
 8013618:	461a      	mov	r2, r3
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d006      	beq.n	8013632 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	7adb      	ldrb	r3, [r3, #11]
 8013628:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	7a9b      	ldrb	r3, [r3, #10]
 801362e:	777b      	strb	r3, [r7, #29]
 8013630:	e003      	b.n	801363a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013632:	23ff      	movs	r3, #255	; 0xff
 8013634:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801363a:	7fba      	ldrb	r2, [r7, #30]
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	9302      	str	r3, [sp, #8]
 8013640:	2306      	movs	r3, #6
 8013642:	9301      	str	r3, [sp, #4]
 8013644:	7f7b      	ldrb	r3, [r7, #29]
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	4613      	mov	r3, r2
 801364a:	683a      	ldr	r2, [r7, #0]
 801364c:	6879      	ldr	r1, [r7, #4]
 801364e:	68b8      	ldr	r0, [r7, #8]
 8013650:	f001 fddc 	bl	801520c <ip4_output_if>
 8013654:	4603      	mov	r3, r0
 8013656:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013658:	68b8      	ldr	r0, [r7, #8]
 801365a:	f7f9 fe3f 	bl	800d2dc <pbuf_free>
  return err;
 801365e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013662:	4618      	mov	r0, r3
 8013664:	3720      	adds	r7, #32
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	0801bc04 	.word	0x0801bc04
 8013670:	0801c35c 	.word	0x0801c35c
 8013674:	0801bc58 	.word	0x0801bc58

08013678 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013678:	b590      	push	{r4, r7, lr}
 801367a:	b08b      	sub	sp, #44	; 0x2c
 801367c:	af04      	add	r7, sp, #16
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d106      	bne.n	801369a <tcp_rst+0x22>
 801368c:	4b1f      	ldr	r3, [pc, #124]	; (801370c <tcp_rst+0x94>)
 801368e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013692:	491f      	ldr	r1, [pc, #124]	; (8013710 <tcp_rst+0x98>)
 8013694:	481f      	ldr	r0, [pc, #124]	; (8013714 <tcp_rst+0x9c>)
 8013696:	f003 f993 	bl	80169c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369c:	2b00      	cmp	r3, #0
 801369e:	d106      	bne.n	80136ae <tcp_rst+0x36>
 80136a0:	4b1a      	ldr	r3, [pc, #104]	; (801370c <tcp_rst+0x94>)
 80136a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80136a6:	491c      	ldr	r1, [pc, #112]	; (8013718 <tcp_rst+0xa0>)
 80136a8:	481a      	ldr	r0, [pc, #104]	; (8013714 <tcp_rst+0x9c>)
 80136aa:	f003 f989 	bl	80169c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136ae:	2300      	movs	r3, #0
 80136b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80136b2:	f246 0308 	movw	r3, #24584	; 0x6008
 80136b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	b29c      	uxth	r4, r3
 80136bc:	68b8      	ldr	r0, [r7, #8]
 80136be:	f7f8 f91c 	bl	800b8fa <lwip_htonl>
 80136c2:	4602      	mov	r2, r0
 80136c4:	8abb      	ldrh	r3, [r7, #20]
 80136c6:	9303      	str	r3, [sp, #12]
 80136c8:	2314      	movs	r3, #20
 80136ca:	9302      	str	r3, [sp, #8]
 80136cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80136ce:	9301      	str	r3, [sp, #4]
 80136d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	4613      	mov	r3, r2
 80136d6:	2200      	movs	r2, #0
 80136d8:	4621      	mov	r1, r4
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7ff fe82 	bl	80133e4 <tcp_output_alloc_header_common>
 80136e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d00c      	beq.n	8013702 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80136e8:	7dfb      	ldrb	r3, [r7, #23]
 80136ea:	2200      	movs	r2, #0
 80136ec:	6939      	ldr	r1, [r7, #16]
 80136ee:	68f8      	ldr	r0, [r7, #12]
 80136f0:	f7ff ff28 	bl	8013544 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80136f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f6:	683a      	ldr	r2, [r7, #0]
 80136f8:	6939      	ldr	r1, [r7, #16]
 80136fa:	68f8      	ldr	r0, [r7, #12]
 80136fc:	f7ff ff62 	bl	80135c4 <tcp_output_control_segment>
 8013700:	e000      	b.n	8013704 <tcp_rst+0x8c>
    return;
 8013702:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013704:	371c      	adds	r7, #28
 8013706:	46bd      	mov	sp, r7
 8013708:	bd90      	pop	{r4, r7, pc}
 801370a:	bf00      	nop
 801370c:	0801bc04 	.word	0x0801bc04
 8013710:	0801c388 	.word	0x0801c388
 8013714:	0801bc58 	.word	0x0801bc58
 8013718:	0801c3a4 	.word	0x0801c3a4

0801371c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801371c:	b590      	push	{r4, r7, lr}
 801371e:	b087      	sub	sp, #28
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013724:	2300      	movs	r3, #0
 8013726:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013728:	2300      	movs	r3, #0
 801372a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d106      	bne.n	8013740 <tcp_send_empty_ack+0x24>
 8013732:	4b28      	ldr	r3, [pc, #160]	; (80137d4 <tcp_send_empty_ack+0xb8>)
 8013734:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013738:	4927      	ldr	r1, [pc, #156]	; (80137d8 <tcp_send_empty_ack+0xbc>)
 801373a:	4828      	ldr	r0, [pc, #160]	; (80137dc <tcp_send_empty_ack+0xc0>)
 801373c:	f003 f940 	bl	80169c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013740:	7dfb      	ldrb	r3, [r7, #23]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	b2db      	uxtb	r3, r3
 8013746:	f003 0304 	and.w	r3, r3, #4
 801374a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801374c:	7d7b      	ldrb	r3, [r7, #21]
 801374e:	b29c      	uxth	r4, r3
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013754:	4618      	mov	r0, r3
 8013756:	f7f8 f8d0 	bl	800b8fa <lwip_htonl>
 801375a:	4603      	mov	r3, r0
 801375c:	2200      	movs	r2, #0
 801375e:	4621      	mov	r1, r4
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f7ff feb1 	bl	80134c8 <tcp_output_alloc_header>
 8013766:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d109      	bne.n	8013782 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	8b5b      	ldrh	r3, [r3, #26]
 8013772:	f043 0303 	orr.w	r3, r3, #3
 8013776:	b29a      	uxth	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801377c:	f06f 0301 	mvn.w	r3, #1
 8013780:	e023      	b.n	80137ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013782:	7dbb      	ldrb	r3, [r7, #22]
 8013784:	7dfa      	ldrb	r2, [r7, #23]
 8013786:	6939      	ldr	r1, [r7, #16]
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7ff fedb 	bl	8013544 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	3304      	adds	r3, #4
 8013794:	6939      	ldr	r1, [r7, #16]
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7ff ff14 	bl	80135c4 <tcp_output_control_segment>
 801379c:	4603      	mov	r3, r0
 801379e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80137a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d007      	beq.n	80137b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	8b5b      	ldrh	r3, [r3, #26]
 80137ac:	f043 0303 	orr.w	r3, r3, #3
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	835a      	strh	r2, [r3, #26]
 80137b6:	e006      	b.n	80137c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	8b5b      	ldrh	r3, [r3, #26]
 80137bc:	f023 0303 	bic.w	r3, r3, #3
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80137c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	371c      	adds	r7, #28
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd90      	pop	{r4, r7, pc}
 80137d2:	bf00      	nop
 80137d4:	0801bc04 	.word	0x0801bc04
 80137d8:	0801c3c0 	.word	0x0801c3c0
 80137dc:	0801bc58 	.word	0x0801bc58

080137e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80137e0:	b590      	push	{r4, r7, lr}
 80137e2:	b087      	sub	sp, #28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137e8:	2300      	movs	r3, #0
 80137ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <tcp_keepalive+0x20>
 80137f2:	4b18      	ldr	r3, [pc, #96]	; (8013854 <tcp_keepalive+0x74>)
 80137f4:	f640 0224 	movw	r2, #2084	; 0x824
 80137f8:	4917      	ldr	r1, [pc, #92]	; (8013858 <tcp_keepalive+0x78>)
 80137fa:	4818      	ldr	r0, [pc, #96]	; (801385c <tcp_keepalive+0x7c>)
 80137fc:	f003 f8e0 	bl	80169c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013800:	7dfb      	ldrb	r3, [r7, #23]
 8013802:	b29c      	uxth	r4, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013808:	3b01      	subs	r3, #1
 801380a:	4618      	mov	r0, r3
 801380c:	f7f8 f875 	bl	800b8fa <lwip_htonl>
 8013810:	4603      	mov	r3, r0
 8013812:	2200      	movs	r2, #0
 8013814:	4621      	mov	r1, r4
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f7ff fe56 	bl	80134c8 <tcp_output_alloc_header>
 801381c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d102      	bne.n	801382a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013828:	e010      	b.n	801384c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801382a:	7dfb      	ldrb	r3, [r7, #23]
 801382c:	2200      	movs	r2, #0
 801382e:	6939      	ldr	r1, [r7, #16]
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f7ff fe87 	bl	8013544 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	3304      	adds	r3, #4
 801383c:	6939      	ldr	r1, [r7, #16]
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7ff fec0 	bl	80135c4 <tcp_output_control_segment>
 8013844:	4603      	mov	r3, r0
 8013846:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801384c:	4618      	mov	r0, r3
 801384e:	371c      	adds	r7, #28
 8013850:	46bd      	mov	sp, r7
 8013852:	bd90      	pop	{r4, r7, pc}
 8013854:	0801bc04 	.word	0x0801bc04
 8013858:	0801c3e0 	.word	0x0801c3e0
 801385c:	0801bc58 	.word	0x0801bc58

08013860 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b08b      	sub	sp, #44	; 0x2c
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013868:	2300      	movs	r3, #0
 801386a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d106      	bne.n	8013882 <tcp_zero_window_probe+0x22>
 8013874:	4b4c      	ldr	r3, [pc, #304]	; (80139a8 <tcp_zero_window_probe+0x148>)
 8013876:	f640 024f 	movw	r2, #2127	; 0x84f
 801387a:	494c      	ldr	r1, [pc, #304]	; (80139ac <tcp_zero_window_probe+0x14c>)
 801387c:	484c      	ldr	r0, [pc, #304]	; (80139b0 <tcp_zero_window_probe+0x150>)
 801387e:	f003 f89f 	bl	80169c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013886:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013888:	6a3b      	ldr	r3, [r7, #32]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801388e:	2300      	movs	r3, #0
 8013890:	e086      	b.n	80139a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013898:	2bff      	cmp	r3, #255	; 0xff
 801389a:	d007      	beq.n	80138ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80138a2:	3301      	adds	r3, #1
 80138a4:	b2da      	uxtb	r2, r3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	899b      	ldrh	r3, [r3, #12]
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7f8 f80b 	bl	800b8d0 <lwip_htons>
 80138ba:	4603      	mov	r3, r0
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	f003 0301 	and.w	r3, r3, #1
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d005      	beq.n	80138d2 <tcp_zero_window_probe+0x72>
 80138c6:	6a3b      	ldr	r3, [r7, #32]
 80138c8:	891b      	ldrh	r3, [r3, #8]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d101      	bne.n	80138d2 <tcp_zero_window_probe+0x72>
 80138ce:	2301      	movs	r3, #1
 80138d0:	e000      	b.n	80138d4 <tcp_zero_window_probe+0x74>
 80138d2:	2300      	movs	r3, #0
 80138d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80138d6:	7ffb      	ldrb	r3, [r7, #31]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	bf0c      	ite	eq
 80138dc:	2301      	moveq	r3, #1
 80138de:	2300      	movne	r3, #0
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80138e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138e8:	b299      	uxth	r1, r3
 80138ea:	6a3b      	ldr	r3, [r7, #32]
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	8bba      	ldrh	r2, [r7, #28]
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7ff fde8 	bl	80134c8 <tcp_output_alloc_header>
 80138f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d102      	bne.n	8013906 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013904:	e04c      	b.n	80139a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801390c:	7ffb      	ldrb	r3, [r7, #31]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d011      	beq.n	8013936 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	899b      	ldrh	r3, [r3, #12]
 8013916:	b29b      	uxth	r3, r3
 8013918:	b21b      	sxth	r3, r3
 801391a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801391e:	b21c      	sxth	r4, r3
 8013920:	2011      	movs	r0, #17
 8013922:	f7f7 ffd5 	bl	800b8d0 <lwip_htons>
 8013926:	4603      	mov	r3, r0
 8013928:	b21b      	sxth	r3, r3
 801392a:	4323      	orrs	r3, r4
 801392c:	b21b      	sxth	r3, r3
 801392e:	b29a      	uxth	r2, r3
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	819a      	strh	r2, [r3, #12]
 8013934:	e010      	b.n	8013958 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	3314      	adds	r3, #20
 801393c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801393e:	6a3b      	ldr	r3, [r7, #32]
 8013940:	6858      	ldr	r0, [r3, #4]
 8013942:	6a3b      	ldr	r3, [r7, #32]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	891a      	ldrh	r2, [r3, #8]
 8013948:	6a3b      	ldr	r3, [r7, #32]
 801394a:	891b      	ldrh	r3, [r3, #8]
 801394c:	1ad3      	subs	r3, r2, r3
 801394e:	b29b      	uxth	r3, r3
 8013950:	2201      	movs	r2, #1
 8013952:	6939      	ldr	r1, [r7, #16]
 8013954:	f7f9 feb8 	bl	800d6c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013958:	6a3b      	ldr	r3, [r7, #32]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	4618      	mov	r0, r3
 8013960:	f7f7 ffcb 	bl	800b8fa <lwip_htonl>
 8013964:	4603      	mov	r3, r0
 8013966:	3301      	adds	r3, #1
 8013968:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	1ad3      	subs	r3, r2, r3
 8013972:	2b00      	cmp	r3, #0
 8013974:	da02      	bge.n	801397c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801397c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013980:	2200      	movs	r2, #0
 8013982:	69b9      	ldr	r1, [r7, #24]
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f7ff fddd 	bl	8013544 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	3304      	adds	r3, #4
 8013990:	69b9      	ldr	r1, [r7, #24]
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7ff fe16 	bl	80135c4 <tcp_output_control_segment>
 8013998:	4603      	mov	r3, r0
 801399a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801399c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	372c      	adds	r7, #44	; 0x2c
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd90      	pop	{r4, r7, pc}
 80139a8:	0801bc04 	.word	0x0801bc04
 80139ac:	0801c3fc 	.word	0x0801c3fc
 80139b0:	0801bc58 	.word	0x0801bc58

080139b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80139bc:	f7f9 ff72 	bl	800d8a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80139c0:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <tcpip_tcp_timer+0x38>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d103      	bne.n	80139d0 <tcpip_tcp_timer+0x1c>
 80139c8:	4b09      	ldr	r3, [pc, #36]	; (80139f0 <tcpip_tcp_timer+0x3c>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d005      	beq.n	80139dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139d0:	2200      	movs	r2, #0
 80139d2:	4908      	ldr	r1, [pc, #32]	; (80139f4 <tcpip_tcp_timer+0x40>)
 80139d4:	20fa      	movs	r0, #250	; 0xfa
 80139d6:	f000 f8f3 	bl	8013bc0 <sys_timeout>
 80139da:	e003      	b.n	80139e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80139dc:	4b06      	ldr	r3, [pc, #24]	; (80139f8 <tcpip_tcp_timer+0x44>)
 80139de:	2200      	movs	r2, #0
 80139e0:	601a      	str	r2, [r3, #0]
  }
}
 80139e2:	bf00      	nop
 80139e4:	bf00      	nop
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	20011b54 	.word	0x20011b54
 80139f0:	20011b58 	.word	0x20011b58
 80139f4:	080139b5 	.word	0x080139b5
 80139f8:	20011ba0 	.word	0x20011ba0

080139fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013a00:	4b0a      	ldr	r3, [pc, #40]	; (8013a2c <tcp_timer_needed+0x30>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10f      	bne.n	8013a28 <tcp_timer_needed+0x2c>
 8013a08:	4b09      	ldr	r3, [pc, #36]	; (8013a30 <tcp_timer_needed+0x34>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d103      	bne.n	8013a18 <tcp_timer_needed+0x1c>
 8013a10:	4b08      	ldr	r3, [pc, #32]	; (8013a34 <tcp_timer_needed+0x38>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d007      	beq.n	8013a28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013a18:	4b04      	ldr	r3, [pc, #16]	; (8013a2c <tcp_timer_needed+0x30>)
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013a1e:	2200      	movs	r2, #0
 8013a20:	4905      	ldr	r1, [pc, #20]	; (8013a38 <tcp_timer_needed+0x3c>)
 8013a22:	20fa      	movs	r0, #250	; 0xfa
 8013a24:	f000 f8cc 	bl	8013bc0 <sys_timeout>
  }
}
 8013a28:	bf00      	nop
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	20011ba0 	.word	0x20011ba0
 8013a30:	20011b54 	.word	0x20011b54
 8013a34:	20011b58 	.word	0x20011b58
 8013a38:	080139b5 	.word	0x080139b5

08013a3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b086      	sub	sp, #24
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013a48:	2009      	movs	r0, #9
 8013a4a:	f7f8 fd31 	bl	800c4b0 <memp_malloc>
 8013a4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d109      	bne.n	8013a6a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d151      	bne.n	8013b00 <sys_timeout_abs+0xc4>
 8013a5c:	4b2a      	ldr	r3, [pc, #168]	; (8013b08 <sys_timeout_abs+0xcc>)
 8013a5e:	22be      	movs	r2, #190	; 0xbe
 8013a60:	492a      	ldr	r1, [pc, #168]	; (8013b0c <sys_timeout_abs+0xd0>)
 8013a62:	482b      	ldr	r0, [pc, #172]	; (8013b10 <sys_timeout_abs+0xd4>)
 8013a64:	f002 ffac 	bl	80169c0 <iprintf>
    return;
 8013a68:	e04a      	b.n	8013b00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	68ba      	ldr	r2, [r7, #8]
 8013a74:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	687a      	ldr	r2, [r7, #4]
 8013a7a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013a82:	4b24      	ldr	r3, [pc, #144]	; (8013b14 <sys_timeout_abs+0xd8>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d103      	bne.n	8013a92 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a8a:	4a22      	ldr	r2, [pc, #136]	; (8013b14 <sys_timeout_abs+0xd8>)
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	6013      	str	r3, [r2, #0]
    return;
 8013a90:	e037      	b.n	8013b02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	685a      	ldr	r2, [r3, #4]
 8013a96:	4b1f      	ldr	r3, [pc, #124]	; (8013b14 <sys_timeout_abs+0xd8>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	1ad3      	subs	r3, r2, r3
 8013a9e:	0fdb      	lsrs	r3, r3, #31
 8013aa0:	f003 0301 	and.w	r3, r3, #1
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d007      	beq.n	8013aba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013aaa:	4b1a      	ldr	r3, [pc, #104]	; (8013b14 <sys_timeout_abs+0xd8>)
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013ab2:	4a18      	ldr	r2, [pc, #96]	; (8013b14 <sys_timeout_abs+0xd8>)
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	6013      	str	r3, [r2, #0]
 8013ab8:	e023      	b.n	8013b02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013aba:	4b16      	ldr	r3, [pc, #88]	; (8013b14 <sys_timeout_abs+0xd8>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	617b      	str	r3, [r7, #20]
 8013ac0:	e01a      	b.n	8013af8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00b      	beq.n	8013ae2 <sys_timeout_abs+0xa6>
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	685a      	ldr	r2, [r3, #4]
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	0fdb      	lsrs	r3, r3, #31
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d007      	beq.n	8013af2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	693a      	ldr	r2, [r7, #16]
 8013aee:	601a      	str	r2, [r3, #0]
        break;
 8013af0:	e007      	b.n	8013b02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	617b      	str	r3, [r7, #20]
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1e1      	bne.n	8013ac2 <sys_timeout_abs+0x86>
 8013afe:	e000      	b.n	8013b02 <sys_timeout_abs+0xc6>
    return;
 8013b00:	bf00      	nop
      }
    }
  }
}
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	0801c420 	.word	0x0801c420
 8013b0c:	0801c454 	.word	0x0801c454
 8013b10:	0801c494 	.word	0x0801c494
 8013b14:	20011b98 	.word	0x20011b98

08013b18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b086      	sub	sp, #24
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	4798      	blx	r3

  now = sys_now();
 8013b2a:	f7f1 fb33 	bl	8005194 <sys_now>
 8013b2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	4b0f      	ldr	r3, [pc, #60]	; (8013b74 <lwip_cyclic_timer+0x5c>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4413      	add	r3, r2
 8013b3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013b3c:	68fa      	ldr	r2, [r7, #12]
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	1ad3      	subs	r3, r2, r3
 8013b42:	0fdb      	lsrs	r3, r3, #31
 8013b44:	f003 0301 	and.w	r3, r3, #1
 8013b48:	b2db      	uxtb	r3, r3
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d009      	beq.n	8013b62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	4413      	add	r3, r2
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	4907      	ldr	r1, [pc, #28]	; (8013b78 <lwip_cyclic_timer+0x60>)
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7ff ff6e 	bl	8013a3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b60:	e004      	b.n	8013b6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b62:	687a      	ldr	r2, [r7, #4]
 8013b64:	4904      	ldr	r1, [pc, #16]	; (8013b78 <lwip_cyclic_timer+0x60>)
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7ff ff68 	bl	8013a3c <sys_timeout_abs>
}
 8013b6c:	bf00      	nop
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	20011b9c 	.word	0x20011b9c
 8013b78:	08013b19 	.word	0x08013b19

08013b7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b82:	2301      	movs	r3, #1
 8013b84:	607b      	str	r3, [r7, #4]
 8013b86:	e00e      	b.n	8013ba6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b88:	4a0b      	ldr	r2, [pc, #44]	; (8013bb8 <sys_timeouts_init+0x3c>)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	00db      	lsls	r3, r3, #3
 8013b94:	4a08      	ldr	r2, [pc, #32]	; (8013bb8 <sys_timeouts_init+0x3c>)
 8013b96:	4413      	add	r3, r2
 8013b98:	461a      	mov	r2, r3
 8013b9a:	4908      	ldr	r1, [pc, #32]	; (8013bbc <sys_timeouts_init+0x40>)
 8013b9c:	f000 f810 	bl	8013bc0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	607b      	str	r3, [r7, #4]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d9ed      	bls.n	8013b88 <sys_timeouts_init+0xc>
  }
}
 8013bac:	bf00      	nop
 8013bae:	bf00      	nop
 8013bb0:	3708      	adds	r7, #8
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	0801cd6c 	.word	0x0801cd6c
 8013bbc:	08013b19 	.word	0x08013b19

08013bc0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b086      	sub	sp, #24
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bd2:	d306      	bcc.n	8013be2 <sys_timeout+0x22>
 8013bd4:	4b0a      	ldr	r3, [pc, #40]	; (8013c00 <sys_timeout+0x40>)
 8013bd6:	f240 1229 	movw	r2, #297	; 0x129
 8013bda:	490a      	ldr	r1, [pc, #40]	; (8013c04 <sys_timeout+0x44>)
 8013bdc:	480a      	ldr	r0, [pc, #40]	; (8013c08 <sys_timeout+0x48>)
 8013bde:	f002 feef 	bl	80169c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013be2:	f7f1 fad7 	bl	8005194 <sys_now>
 8013be6:	4602      	mov	r2, r0
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	4413      	add	r3, r2
 8013bec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	68b9      	ldr	r1, [r7, #8]
 8013bf2:	6978      	ldr	r0, [r7, #20]
 8013bf4:	f7ff ff22 	bl	8013a3c <sys_timeout_abs>
#endif
}
 8013bf8:	bf00      	nop
 8013bfa:	3718      	adds	r7, #24
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	0801c420 	.word	0x0801c420
 8013c04:	0801c4bc 	.word	0x0801c4bc
 8013c08:	0801c494 	.word	0x0801c494

08013c0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013c12:	f7f1 fabf 	bl	8005194 <sys_now>
 8013c16:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013c18:	4b17      	ldr	r3, [pc, #92]	; (8013c78 <sys_check_timeouts+0x6c>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d022      	beq.n	8013c6a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	1ad3      	subs	r3, r2, r3
 8013c2c:	0fdb      	lsrs	r3, r3, #31
 8013c2e:	f003 0301 	and.w	r3, r3, #1
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d11a      	bne.n	8013c6e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4a0e      	ldr	r2, [pc, #56]	; (8013c78 <sys_check_timeouts+0x6c>)
 8013c3e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	68db      	ldr	r3, [r3, #12]
 8013c4a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	4a0a      	ldr	r2, [pc, #40]	; (8013c7c <sys_check_timeouts+0x70>)
 8013c52:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013c54:	68b9      	ldr	r1, [r7, #8]
 8013c56:	2009      	movs	r0, #9
 8013c58:	f7f8 fca0 	bl	800c59c <memp_free>
    if (handler != NULL) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d0da      	beq.n	8013c18 <sys_check_timeouts+0xc>
      handler(arg);
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6838      	ldr	r0, [r7, #0]
 8013c66:	4798      	blx	r3
  do {
 8013c68:	e7d6      	b.n	8013c18 <sys_check_timeouts+0xc>
      return;
 8013c6a:	bf00      	nop
 8013c6c:	e000      	b.n	8013c70 <sys_check_timeouts+0x64>
      return;
 8013c6e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	20011b98 	.word	0x20011b98
 8013c7c:	20011b9c 	.word	0x20011b9c

08013c80 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013c86:	4b16      	ldr	r3, [pc, #88]	; (8013ce0 <sys_timeouts_sleeptime+0x60>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d102      	bne.n	8013c94 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c92:	e020      	b.n	8013cd6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013c94:	f7f1 fa7e 	bl	8005194 <sys_now>
 8013c98:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013c9a:	4b11      	ldr	r3, [pc, #68]	; (8013ce0 <sys_timeouts_sleeptime+0x60>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	685a      	ldr	r2, [r3, #4]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	1ad3      	subs	r3, r2, r3
 8013ca4:	0fdb      	lsrs	r3, r3, #31
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d001      	beq.n	8013cb4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	e010      	b.n	8013cd6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013cb4:	4b0a      	ldr	r3, [pc, #40]	; (8013ce0 <sys_timeouts_sleeptime+0x60>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	685a      	ldr	r2, [r3, #4]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	da06      	bge.n	8013cd4 <sys_timeouts_sleeptime+0x54>
 8013cc6:	4b07      	ldr	r3, [pc, #28]	; (8013ce4 <sys_timeouts_sleeptime+0x64>)
 8013cc8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013ccc:	4906      	ldr	r1, [pc, #24]	; (8013ce8 <sys_timeouts_sleeptime+0x68>)
 8013cce:	4807      	ldr	r0, [pc, #28]	; (8013cec <sys_timeouts_sleeptime+0x6c>)
 8013cd0:	f002 fe76 	bl	80169c0 <iprintf>
    return ret;
 8013cd4:	683b      	ldr	r3, [r7, #0]
  }
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3708      	adds	r7, #8
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	20011b98 	.word	0x20011b98
 8013ce4:	0801c420 	.word	0x0801c420
 8013ce8:	0801c4f4 	.word	0x0801c4f4
 8013cec:	0801c494 	.word	0x0801c494

08013cf0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013cf8:	4915      	ldr	r1, [pc, #84]	; (8013d50 <etharp_free_entry+0x60>)
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	005b      	lsls	r3, r3, #1
 8013d00:	4413      	add	r3, r2
 8013d02:	00db      	lsls	r3, r3, #3
 8013d04:	440b      	add	r3, r1
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d013      	beq.n	8013d34 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013d0c:	4910      	ldr	r1, [pc, #64]	; (8013d50 <etharp_free_entry+0x60>)
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	4613      	mov	r3, r2
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	4413      	add	r3, r2
 8013d16:	00db      	lsls	r3, r3, #3
 8013d18:	440b      	add	r3, r1
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7f9 fadd 	bl	800d2dc <pbuf_free>
    arp_table[i].q = NULL;
 8013d22:	490b      	ldr	r1, [pc, #44]	; (8013d50 <etharp_free_entry+0x60>)
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	4613      	mov	r3, r2
 8013d28:	005b      	lsls	r3, r3, #1
 8013d2a:	4413      	add	r3, r2
 8013d2c:	00db      	lsls	r3, r3, #3
 8013d2e:	440b      	add	r3, r1
 8013d30:	2200      	movs	r2, #0
 8013d32:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013d34:	4906      	ldr	r1, [pc, #24]	; (8013d50 <etharp_free_entry+0x60>)
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	4613      	mov	r3, r2
 8013d3a:	005b      	lsls	r3, r3, #1
 8013d3c:	4413      	add	r3, r2
 8013d3e:	00db      	lsls	r3, r3, #3
 8013d40:	440b      	add	r3, r1
 8013d42:	3314      	adds	r3, #20
 8013d44:	2200      	movs	r2, #0
 8013d46:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013d48:	bf00      	nop
 8013d4a:	3708      	adds	r7, #8
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}
 8013d50:	20011ba4 	.word	0x20011ba4

08013d54 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	607b      	str	r3, [r7, #4]
 8013d5e:	e096      	b.n	8013e8e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013d60:	494f      	ldr	r1, [pc, #316]	; (8013ea0 <etharp_tmr+0x14c>)
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	4613      	mov	r3, r2
 8013d66:	005b      	lsls	r3, r3, #1
 8013d68:	4413      	add	r3, r2
 8013d6a:	00db      	lsls	r3, r3, #3
 8013d6c:	440b      	add	r3, r1
 8013d6e:	3314      	adds	r3, #20
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013d74:	78fb      	ldrb	r3, [r7, #3]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f000 8086 	beq.w	8013e88 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013d7c:	4948      	ldr	r1, [pc, #288]	; (8013ea0 <etharp_tmr+0x14c>)
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	4613      	mov	r3, r2
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	4413      	add	r3, r2
 8013d86:	00db      	lsls	r3, r3, #3
 8013d88:	440b      	add	r3, r1
 8013d8a:	3312      	adds	r3, #18
 8013d8c:	881b      	ldrh	r3, [r3, #0]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	b298      	uxth	r0, r3
 8013d92:	4943      	ldr	r1, [pc, #268]	; (8013ea0 <etharp_tmr+0x14c>)
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	4613      	mov	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	440b      	add	r3, r1
 8013da0:	3312      	adds	r3, #18
 8013da2:	4602      	mov	r2, r0
 8013da4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013da6:	493e      	ldr	r1, [pc, #248]	; (8013ea0 <etharp_tmr+0x14c>)
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	4613      	mov	r3, r2
 8013dac:	005b      	lsls	r3, r3, #1
 8013dae:	4413      	add	r3, r2
 8013db0:	00db      	lsls	r3, r3, #3
 8013db2:	440b      	add	r3, r1
 8013db4:	3312      	adds	r3, #18
 8013db6:	881b      	ldrh	r3, [r3, #0]
 8013db8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013dbc:	d215      	bcs.n	8013dea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013dbe:	4938      	ldr	r1, [pc, #224]	; (8013ea0 <etharp_tmr+0x14c>)
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	4413      	add	r3, r2
 8013dc8:	00db      	lsls	r3, r3, #3
 8013dca:	440b      	add	r3, r1
 8013dcc:	3314      	adds	r3, #20
 8013dce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d10e      	bne.n	8013df2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013dd4:	4932      	ldr	r1, [pc, #200]	; (8013ea0 <etharp_tmr+0x14c>)
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	4613      	mov	r3, r2
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4413      	add	r3, r2
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	440b      	add	r3, r1
 8013de2:	3312      	adds	r3, #18
 8013de4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013de6:	2b04      	cmp	r3, #4
 8013de8:	d903      	bls.n	8013df2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f7ff ff80 	bl	8013cf0 <etharp_free_entry>
 8013df0:	e04a      	b.n	8013e88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013df2:	492b      	ldr	r1, [pc, #172]	; (8013ea0 <etharp_tmr+0x14c>)
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	4613      	mov	r3, r2
 8013df8:	005b      	lsls	r3, r3, #1
 8013dfa:	4413      	add	r3, r2
 8013dfc:	00db      	lsls	r3, r3, #3
 8013dfe:	440b      	add	r3, r1
 8013e00:	3314      	adds	r3, #20
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	2b03      	cmp	r3, #3
 8013e06:	d10a      	bne.n	8013e1e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013e08:	4925      	ldr	r1, [pc, #148]	; (8013ea0 <etharp_tmr+0x14c>)
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	005b      	lsls	r3, r3, #1
 8013e10:	4413      	add	r3, r2
 8013e12:	00db      	lsls	r3, r3, #3
 8013e14:	440b      	add	r3, r1
 8013e16:	3314      	adds	r3, #20
 8013e18:	2204      	movs	r2, #4
 8013e1a:	701a      	strb	r2, [r3, #0]
 8013e1c:	e034      	b.n	8013e88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013e1e:	4920      	ldr	r1, [pc, #128]	; (8013ea0 <etharp_tmr+0x14c>)
 8013e20:	687a      	ldr	r2, [r7, #4]
 8013e22:	4613      	mov	r3, r2
 8013e24:	005b      	lsls	r3, r3, #1
 8013e26:	4413      	add	r3, r2
 8013e28:	00db      	lsls	r3, r3, #3
 8013e2a:	440b      	add	r3, r1
 8013e2c:	3314      	adds	r3, #20
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	2b04      	cmp	r3, #4
 8013e32:	d10a      	bne.n	8013e4a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013e34:	491a      	ldr	r1, [pc, #104]	; (8013ea0 <etharp_tmr+0x14c>)
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	005b      	lsls	r3, r3, #1
 8013e3c:	4413      	add	r3, r2
 8013e3e:	00db      	lsls	r3, r3, #3
 8013e40:	440b      	add	r3, r1
 8013e42:	3314      	adds	r3, #20
 8013e44:	2202      	movs	r2, #2
 8013e46:	701a      	strb	r2, [r3, #0]
 8013e48:	e01e      	b.n	8013e88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013e4a:	4915      	ldr	r1, [pc, #84]	; (8013ea0 <etharp_tmr+0x14c>)
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	4613      	mov	r3, r2
 8013e50:	005b      	lsls	r3, r3, #1
 8013e52:	4413      	add	r3, r2
 8013e54:	00db      	lsls	r3, r3, #3
 8013e56:	440b      	add	r3, r1
 8013e58:	3314      	adds	r3, #20
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	d113      	bne.n	8013e88 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e60:	490f      	ldr	r1, [pc, #60]	; (8013ea0 <etharp_tmr+0x14c>)
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	4613      	mov	r3, r2
 8013e66:	005b      	lsls	r3, r3, #1
 8013e68:	4413      	add	r3, r2
 8013e6a:	00db      	lsls	r3, r3, #3
 8013e6c:	440b      	add	r3, r1
 8013e6e:	3308      	adds	r3, #8
 8013e70:	6818      	ldr	r0, [r3, #0]
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	4613      	mov	r3, r2
 8013e76:	005b      	lsls	r3, r3, #1
 8013e78:	4413      	add	r3, r2
 8013e7a:	00db      	lsls	r3, r3, #3
 8013e7c:	4a08      	ldr	r2, [pc, #32]	; (8013ea0 <etharp_tmr+0x14c>)
 8013e7e:	4413      	add	r3, r2
 8013e80:	3304      	adds	r3, #4
 8013e82:	4619      	mov	r1, r3
 8013e84:	f000 fe6e 	bl	8014b64 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	607b      	str	r3, [r7, #4]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2b09      	cmp	r3, #9
 8013e92:	f77f af65 	ble.w	8013d60 <etharp_tmr+0xc>
      }
    }
  }
}
 8013e96:	bf00      	nop
 8013e98:	bf00      	nop
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20011ba4 	.word	0x20011ba4

08013ea4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b08a      	sub	sp, #40	; 0x28
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	460b      	mov	r3, r1
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013eb2:	230a      	movs	r3, #10
 8013eb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013eb6:	230a      	movs	r3, #10
 8013eb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013eba:	230a      	movs	r3, #10
 8013ebc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013ec2:	230a      	movs	r3, #10
 8013ec4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	83bb      	strh	r3, [r7, #28]
 8013eca:	2300      	movs	r3, #0
 8013ecc:	837b      	strh	r3, [r7, #26]
 8013ece:	2300      	movs	r3, #0
 8013ed0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	843b      	strh	r3, [r7, #32]
 8013ed6:	e0ae      	b.n	8014036 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013ed8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013edc:	49a6      	ldr	r1, [pc, #664]	; (8014178 <etharp_find_entry+0x2d4>)
 8013ede:	4613      	mov	r3, r2
 8013ee0:	005b      	lsls	r3, r3, #1
 8013ee2:	4413      	add	r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	440b      	add	r3, r1
 8013ee8:	3314      	adds	r3, #20
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013eee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013ef2:	2b0a      	cmp	r3, #10
 8013ef4:	d105      	bne.n	8013f02 <etharp_find_entry+0x5e>
 8013ef6:	7dfb      	ldrb	r3, [r7, #23]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d102      	bne.n	8013f02 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013efc:	8c3b      	ldrh	r3, [r7, #32]
 8013efe:	847b      	strh	r3, [r7, #34]	; 0x22
 8013f00:	e095      	b.n	801402e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013f02:	7dfb      	ldrb	r3, [r7, #23]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 8092 	beq.w	801402e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013f0a:	7dfb      	ldrb	r3, [r7, #23]
 8013f0c:	2b01      	cmp	r3, #1
 8013f0e:	d009      	beq.n	8013f24 <etharp_find_entry+0x80>
 8013f10:	7dfb      	ldrb	r3, [r7, #23]
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	d806      	bhi.n	8013f24 <etharp_find_entry+0x80>
 8013f16:	4b99      	ldr	r3, [pc, #612]	; (801417c <etharp_find_entry+0x2d8>)
 8013f18:	f240 1223 	movw	r2, #291	; 0x123
 8013f1c:	4998      	ldr	r1, [pc, #608]	; (8014180 <etharp_find_entry+0x2dc>)
 8013f1e:	4899      	ldr	r0, [pc, #612]	; (8014184 <etharp_find_entry+0x2e0>)
 8013f20:	f002 fd4e 	bl	80169c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d020      	beq.n	8013f6c <etharp_find_entry+0xc8>
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	6819      	ldr	r1, [r3, #0]
 8013f2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f32:	4891      	ldr	r0, [pc, #580]	; (8014178 <etharp_find_entry+0x2d4>)
 8013f34:	4613      	mov	r3, r2
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	4413      	add	r3, r2
 8013f3a:	00db      	lsls	r3, r3, #3
 8013f3c:	4403      	add	r3, r0
 8013f3e:	3304      	adds	r3, #4
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4299      	cmp	r1, r3
 8013f44:	d112      	bne.n	8013f6c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00c      	beq.n	8013f66 <etharp_find_entry+0xc2>
 8013f4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f50:	4989      	ldr	r1, [pc, #548]	; (8014178 <etharp_find_entry+0x2d4>)
 8013f52:	4613      	mov	r3, r2
 8013f54:	005b      	lsls	r3, r3, #1
 8013f56:	4413      	add	r3, r2
 8013f58:	00db      	lsls	r3, r3, #3
 8013f5a:	440b      	add	r3, r1
 8013f5c:	3308      	adds	r3, #8
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d102      	bne.n	8013f6c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013f66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f6a:	e100      	b.n	801416e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d140      	bne.n	8013ff4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013f72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f76:	4980      	ldr	r1, [pc, #512]	; (8014178 <etharp_find_entry+0x2d4>)
 8013f78:	4613      	mov	r3, r2
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	4413      	add	r3, r2
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	440b      	add	r3, r1
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d01a      	beq.n	8013fbe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013f88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f8c:	497a      	ldr	r1, [pc, #488]	; (8014178 <etharp_find_entry+0x2d4>)
 8013f8e:	4613      	mov	r3, r2
 8013f90:	005b      	lsls	r3, r3, #1
 8013f92:	4413      	add	r3, r2
 8013f94:	00db      	lsls	r3, r3, #3
 8013f96:	440b      	add	r3, r1
 8013f98:	3312      	adds	r3, #18
 8013f9a:	881b      	ldrh	r3, [r3, #0]
 8013f9c:	8bba      	ldrh	r2, [r7, #28]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d845      	bhi.n	801402e <etharp_find_entry+0x18a>
            old_queue = i;
 8013fa2:	8c3b      	ldrh	r3, [r7, #32]
 8013fa4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013fa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013faa:	4973      	ldr	r1, [pc, #460]	; (8014178 <etharp_find_entry+0x2d4>)
 8013fac:	4613      	mov	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	440b      	add	r3, r1
 8013fb6:	3312      	adds	r3, #18
 8013fb8:	881b      	ldrh	r3, [r3, #0]
 8013fba:	83bb      	strh	r3, [r7, #28]
 8013fbc:	e037      	b.n	801402e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013fbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fc2:	496d      	ldr	r1, [pc, #436]	; (8014178 <etharp_find_entry+0x2d4>)
 8013fc4:	4613      	mov	r3, r2
 8013fc6:	005b      	lsls	r3, r3, #1
 8013fc8:	4413      	add	r3, r2
 8013fca:	00db      	lsls	r3, r3, #3
 8013fcc:	440b      	add	r3, r1
 8013fce:	3312      	adds	r3, #18
 8013fd0:	881b      	ldrh	r3, [r3, #0]
 8013fd2:	8b7a      	ldrh	r2, [r7, #26]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d82a      	bhi.n	801402e <etharp_find_entry+0x18a>
            old_pending = i;
 8013fd8:	8c3b      	ldrh	r3, [r7, #32]
 8013fda:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013fdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fe0:	4965      	ldr	r1, [pc, #404]	; (8014178 <etharp_find_entry+0x2d4>)
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	005b      	lsls	r3, r3, #1
 8013fe6:	4413      	add	r3, r2
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	440b      	add	r3, r1
 8013fec:	3312      	adds	r3, #18
 8013fee:	881b      	ldrh	r3, [r3, #0]
 8013ff0:	837b      	strh	r3, [r7, #26]
 8013ff2:	e01c      	b.n	801402e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013ff4:	7dfb      	ldrb	r3, [r7, #23]
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d919      	bls.n	801402e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013ffa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ffe:	495e      	ldr	r1, [pc, #376]	; (8014178 <etharp_find_entry+0x2d4>)
 8014000:	4613      	mov	r3, r2
 8014002:	005b      	lsls	r3, r3, #1
 8014004:	4413      	add	r3, r2
 8014006:	00db      	lsls	r3, r3, #3
 8014008:	440b      	add	r3, r1
 801400a:	3312      	adds	r3, #18
 801400c:	881b      	ldrh	r3, [r3, #0]
 801400e:	8b3a      	ldrh	r2, [r7, #24]
 8014010:	429a      	cmp	r2, r3
 8014012:	d80c      	bhi.n	801402e <etharp_find_entry+0x18a>
            old_stable = i;
 8014014:	8c3b      	ldrh	r3, [r7, #32]
 8014016:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014018:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801401c:	4956      	ldr	r1, [pc, #344]	; (8014178 <etharp_find_entry+0x2d4>)
 801401e:	4613      	mov	r3, r2
 8014020:	005b      	lsls	r3, r3, #1
 8014022:	4413      	add	r3, r2
 8014024:	00db      	lsls	r3, r3, #3
 8014026:	440b      	add	r3, r1
 8014028:	3312      	adds	r3, #18
 801402a:	881b      	ldrh	r3, [r3, #0]
 801402c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801402e:	8c3b      	ldrh	r3, [r7, #32]
 8014030:	3301      	adds	r3, #1
 8014032:	b29b      	uxth	r3, r3
 8014034:	843b      	strh	r3, [r7, #32]
 8014036:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801403a:	2b09      	cmp	r3, #9
 801403c:	f77f af4c 	ble.w	8013ed8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014040:	7afb      	ldrb	r3, [r7, #11]
 8014042:	f003 0302 	and.w	r3, r3, #2
 8014046:	2b00      	cmp	r3, #0
 8014048:	d108      	bne.n	801405c <etharp_find_entry+0x1b8>
 801404a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801404e:	2b0a      	cmp	r3, #10
 8014050:	d107      	bne.n	8014062 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014052:	7afb      	ldrb	r3, [r7, #11]
 8014054:	f003 0301 	and.w	r3, r3, #1
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801405c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014060:	e085      	b.n	801416e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014062:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014066:	2b09      	cmp	r3, #9
 8014068:	dc02      	bgt.n	8014070 <etharp_find_entry+0x1cc>
    i = empty;
 801406a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801406c:	843b      	strh	r3, [r7, #32]
 801406e:	e039      	b.n	80140e4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014070:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014074:	2b09      	cmp	r3, #9
 8014076:	dc14      	bgt.n	80140a2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801407a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801407c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014080:	493d      	ldr	r1, [pc, #244]	; (8014178 <etharp_find_entry+0x2d4>)
 8014082:	4613      	mov	r3, r2
 8014084:	005b      	lsls	r3, r3, #1
 8014086:	4413      	add	r3, r2
 8014088:	00db      	lsls	r3, r3, #3
 801408a:	440b      	add	r3, r1
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d018      	beq.n	80140c4 <etharp_find_entry+0x220>
 8014092:	4b3a      	ldr	r3, [pc, #232]	; (801417c <etharp_find_entry+0x2d8>)
 8014094:	f240 126d 	movw	r2, #365	; 0x16d
 8014098:	493b      	ldr	r1, [pc, #236]	; (8014188 <etharp_find_entry+0x2e4>)
 801409a:	483a      	ldr	r0, [pc, #232]	; (8014184 <etharp_find_entry+0x2e0>)
 801409c:	f002 fc90 	bl	80169c0 <iprintf>
 80140a0:	e010      	b.n	80140c4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80140a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80140a6:	2b09      	cmp	r3, #9
 80140a8:	dc02      	bgt.n	80140b0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80140aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80140ac:	843b      	strh	r3, [r7, #32]
 80140ae:	e009      	b.n	80140c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80140b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80140b4:	2b09      	cmp	r3, #9
 80140b6:	dc02      	bgt.n	80140be <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80140b8:	8bfb      	ldrh	r3, [r7, #30]
 80140ba:	843b      	strh	r3, [r7, #32]
 80140bc:	e002      	b.n	80140c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80140be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140c2:	e054      	b.n	801416e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80140c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140c8:	2b09      	cmp	r3, #9
 80140ca:	dd06      	ble.n	80140da <etharp_find_entry+0x236>
 80140cc:	4b2b      	ldr	r3, [pc, #172]	; (801417c <etharp_find_entry+0x2d8>)
 80140ce:	f240 127f 	movw	r2, #383	; 0x17f
 80140d2:	492e      	ldr	r1, [pc, #184]	; (801418c <etharp_find_entry+0x2e8>)
 80140d4:	482b      	ldr	r0, [pc, #172]	; (8014184 <etharp_find_entry+0x2e0>)
 80140d6:	f002 fc73 	bl	80169c0 <iprintf>
    etharp_free_entry(i);
 80140da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140de:	4618      	mov	r0, r3
 80140e0:	f7ff fe06 	bl	8013cf0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80140e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140e8:	2b09      	cmp	r3, #9
 80140ea:	dd06      	ble.n	80140fa <etharp_find_entry+0x256>
 80140ec:	4b23      	ldr	r3, [pc, #140]	; (801417c <etharp_find_entry+0x2d8>)
 80140ee:	f240 1283 	movw	r2, #387	; 0x183
 80140f2:	4926      	ldr	r1, [pc, #152]	; (801418c <etharp_find_entry+0x2e8>)
 80140f4:	4823      	ldr	r0, [pc, #140]	; (8014184 <etharp_find_entry+0x2e0>)
 80140f6:	f002 fc63 	bl	80169c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80140fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140fe:	491e      	ldr	r1, [pc, #120]	; (8014178 <etharp_find_entry+0x2d4>)
 8014100:	4613      	mov	r3, r2
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	4413      	add	r3, r2
 8014106:	00db      	lsls	r3, r3, #3
 8014108:	440b      	add	r3, r1
 801410a:	3314      	adds	r3, #20
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d006      	beq.n	8014120 <etharp_find_entry+0x27c>
 8014112:	4b1a      	ldr	r3, [pc, #104]	; (801417c <etharp_find_entry+0x2d8>)
 8014114:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014118:	491d      	ldr	r1, [pc, #116]	; (8014190 <etharp_find_entry+0x2ec>)
 801411a:	481a      	ldr	r0, [pc, #104]	; (8014184 <etharp_find_entry+0x2e0>)
 801411c:	f002 fc50 	bl	80169c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d00b      	beq.n	801413e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6819      	ldr	r1, [r3, #0]
 801412e:	4812      	ldr	r0, [pc, #72]	; (8014178 <etharp_find_entry+0x2d4>)
 8014130:	4613      	mov	r3, r2
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	4413      	add	r3, r2
 8014136:	00db      	lsls	r3, r3, #3
 8014138:	4403      	add	r3, r0
 801413a:	3304      	adds	r3, #4
 801413c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801413e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014142:	490d      	ldr	r1, [pc, #52]	; (8014178 <etharp_find_entry+0x2d4>)
 8014144:	4613      	mov	r3, r2
 8014146:	005b      	lsls	r3, r3, #1
 8014148:	4413      	add	r3, r2
 801414a:	00db      	lsls	r3, r3, #3
 801414c:	440b      	add	r3, r1
 801414e:	3312      	adds	r3, #18
 8014150:	2200      	movs	r2, #0
 8014152:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014158:	4907      	ldr	r1, [pc, #28]	; (8014178 <etharp_find_entry+0x2d4>)
 801415a:	4613      	mov	r3, r2
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	4413      	add	r3, r2
 8014160:	00db      	lsls	r3, r3, #3
 8014162:	440b      	add	r3, r1
 8014164:	3308      	adds	r3, #8
 8014166:	687a      	ldr	r2, [r7, #4]
 8014168:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801416a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801416e:	4618      	mov	r0, r3
 8014170:	3728      	adds	r7, #40	; 0x28
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	bf00      	nop
 8014178:	20011ba4 	.word	0x20011ba4
 801417c:	0801c508 	.word	0x0801c508
 8014180:	0801c540 	.word	0x0801c540
 8014184:	0801c580 	.word	0x0801c580
 8014188:	0801c5a8 	.word	0x0801c5a8
 801418c:	0801c5c0 	.word	0x0801c5c0
 8014190:	0801c5d4 	.word	0x0801c5d4

08014194 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b088      	sub	sp, #32
 8014198:	af02      	add	r7, sp, #8
 801419a:	60f8      	str	r0, [r7, #12]
 801419c:	60b9      	str	r1, [r7, #8]
 801419e:	607a      	str	r2, [r7, #4]
 80141a0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80141a8:	2b06      	cmp	r3, #6
 80141aa:	d006      	beq.n	80141ba <etharp_update_arp_entry+0x26>
 80141ac:	4b48      	ldr	r3, [pc, #288]	; (80142d0 <etharp_update_arp_entry+0x13c>)
 80141ae:	f240 12a9 	movw	r2, #425	; 0x1a9
 80141b2:	4948      	ldr	r1, [pc, #288]	; (80142d4 <etharp_update_arp_entry+0x140>)
 80141b4:	4848      	ldr	r0, [pc, #288]	; (80142d8 <etharp_update_arp_entry+0x144>)
 80141b6:	f002 fc03 	bl	80169c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d012      	beq.n	80141e6 <etharp_update_arp_entry+0x52>
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d00e      	beq.n	80141e6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	68f9      	ldr	r1, [r7, #12]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f001 f8f4 	bl	80153bc <ip4_addr_isbroadcast_u32>
 80141d4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d105      	bne.n	80141e6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80141e2:	2be0      	cmp	r3, #224	; 0xe0
 80141e4:	d102      	bne.n	80141ec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80141e6:	f06f 030f 	mvn.w	r3, #15
 80141ea:	e06c      	b.n	80142c6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80141ec:	78fb      	ldrb	r3, [r7, #3]
 80141ee:	68fa      	ldr	r2, [r7, #12]
 80141f0:	4619      	mov	r1, r3
 80141f2:	68b8      	ldr	r0, [r7, #8]
 80141f4:	f7ff fe56 	bl	8013ea4 <etharp_find_entry>
 80141f8:	4603      	mov	r3, r0
 80141fa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80141fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014200:	2b00      	cmp	r3, #0
 8014202:	da02      	bge.n	801420a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014204:	8afb      	ldrh	r3, [r7, #22]
 8014206:	b25b      	sxtb	r3, r3
 8014208:	e05d      	b.n	80142c6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801420a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801420e:	4933      	ldr	r1, [pc, #204]	; (80142dc <etharp_update_arp_entry+0x148>)
 8014210:	4613      	mov	r3, r2
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	4413      	add	r3, r2
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	440b      	add	r3, r1
 801421a:	3314      	adds	r3, #20
 801421c:	2202      	movs	r2, #2
 801421e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014224:	492d      	ldr	r1, [pc, #180]	; (80142dc <etharp_update_arp_entry+0x148>)
 8014226:	4613      	mov	r3, r2
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	440b      	add	r3, r1
 8014230:	3308      	adds	r3, #8
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014236:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	3308      	adds	r3, #8
 8014244:	4a25      	ldr	r2, [pc, #148]	; (80142dc <etharp_update_arp_entry+0x148>)
 8014246:	4413      	add	r3, r2
 8014248:	3304      	adds	r3, #4
 801424a:	2206      	movs	r2, #6
 801424c:	6879      	ldr	r1, [r7, #4]
 801424e:	4618      	mov	r0, r3
 8014250:	f002 faf1 	bl	8016836 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014254:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014258:	4920      	ldr	r1, [pc, #128]	; (80142dc <etharp_update_arp_entry+0x148>)
 801425a:	4613      	mov	r3, r2
 801425c:	005b      	lsls	r3, r3, #1
 801425e:	4413      	add	r3, r2
 8014260:	00db      	lsls	r3, r3, #3
 8014262:	440b      	add	r3, r1
 8014264:	3312      	adds	r3, #18
 8014266:	2200      	movs	r2, #0
 8014268:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801426a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801426e:	491b      	ldr	r1, [pc, #108]	; (80142dc <etharp_update_arp_entry+0x148>)
 8014270:	4613      	mov	r3, r2
 8014272:	005b      	lsls	r3, r3, #1
 8014274:	4413      	add	r3, r2
 8014276:	00db      	lsls	r3, r3, #3
 8014278:	440b      	add	r3, r1
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d021      	beq.n	80142c4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014284:	4915      	ldr	r1, [pc, #84]	; (80142dc <etharp_update_arp_entry+0x148>)
 8014286:	4613      	mov	r3, r2
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
 801428e:	440b      	add	r3, r1
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014294:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014298:	4910      	ldr	r1, [pc, #64]	; (80142dc <etharp_update_arp_entry+0x148>)
 801429a:	4613      	mov	r3, r2
 801429c:	005b      	lsls	r3, r3, #1
 801429e:	4413      	add	r3, r2
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	440b      	add	r3, r1
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80142ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6939      	ldr	r1, [r7, #16]
 80142b8:	68f8      	ldr	r0, [r7, #12]
 80142ba:	f001 ff8d 	bl	80161d8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80142be:	6938      	ldr	r0, [r7, #16]
 80142c0:	f7f9 f80c 	bl	800d2dc <pbuf_free>
  }
  return ERR_OK;
 80142c4:	2300      	movs	r3, #0
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3718      	adds	r7, #24
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	0801c508 	.word	0x0801c508
 80142d4:	0801c600 	.word	0x0801c600
 80142d8:	0801c580 	.word	0x0801c580
 80142dc:	20011ba4 	.word	0x20011ba4

080142e0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142e8:	2300      	movs	r3, #0
 80142ea:	60fb      	str	r3, [r7, #12]
 80142ec:	e01e      	b.n	801432c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80142ee:	4913      	ldr	r1, [pc, #76]	; (801433c <etharp_cleanup_netif+0x5c>)
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	4613      	mov	r3, r2
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	4413      	add	r3, r2
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	440b      	add	r3, r1
 80142fc:	3314      	adds	r3, #20
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014302:	7afb      	ldrb	r3, [r7, #11]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00e      	beq.n	8014326 <etharp_cleanup_netif+0x46>
 8014308:	490c      	ldr	r1, [pc, #48]	; (801433c <etharp_cleanup_netif+0x5c>)
 801430a:	68fa      	ldr	r2, [r7, #12]
 801430c:	4613      	mov	r3, r2
 801430e:	005b      	lsls	r3, r3, #1
 8014310:	4413      	add	r3, r2
 8014312:	00db      	lsls	r3, r3, #3
 8014314:	440b      	add	r3, r1
 8014316:	3308      	adds	r3, #8
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	429a      	cmp	r2, r3
 801431e:	d102      	bne.n	8014326 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014320:	68f8      	ldr	r0, [r7, #12]
 8014322:	f7ff fce5 	bl	8013cf0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	3301      	adds	r3, #1
 801432a:	60fb      	str	r3, [r7, #12]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	2b09      	cmp	r3, #9
 8014330:	dddd      	ble.n	80142ee <etharp_cleanup_netif+0xe>
    }
  }
}
 8014332:	bf00      	nop
 8014334:	bf00      	nop
 8014336:	3710      	adds	r7, #16
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	20011ba4 	.word	0x20011ba4

08014340 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014340:	b5b0      	push	{r4, r5, r7, lr}
 8014342:	b08a      	sub	sp, #40	; 0x28
 8014344:	af04      	add	r7, sp, #16
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d107      	bne.n	8014360 <etharp_input+0x20>
 8014350:	4b3d      	ldr	r3, [pc, #244]	; (8014448 <etharp_input+0x108>)
 8014352:	f240 228a 	movw	r2, #650	; 0x28a
 8014356:	493d      	ldr	r1, [pc, #244]	; (801444c <etharp_input+0x10c>)
 8014358:	483d      	ldr	r0, [pc, #244]	; (8014450 <etharp_input+0x110>)
 801435a:	f002 fb31 	bl	80169c0 <iprintf>
 801435e:	e06f      	b.n	8014440 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	881b      	ldrh	r3, [r3, #0]
 801436a:	b29b      	uxth	r3, r3
 801436c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014370:	d10c      	bne.n	801438c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014376:	2b06      	cmp	r3, #6
 8014378:	d108      	bne.n	801438c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801437e:	2b04      	cmp	r3, #4
 8014380:	d104      	bne.n	801438c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	885b      	ldrh	r3, [r3, #2]
 8014386:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014388:	2b08      	cmp	r3, #8
 801438a:	d003      	beq.n	8014394 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f7f8 ffa5 	bl	800d2dc <pbuf_free>
    return;
 8014392:	e055      	b.n	8014440 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	330e      	adds	r3, #14
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	3318      	adds	r3, #24
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	3304      	adds	r3, #4
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d102      	bne.n	80143b4 <etharp_input+0x74>
    for_us = 0;
 80143ae:	2300      	movs	r3, #0
 80143b0:	75fb      	strb	r3, [r7, #23]
 80143b2:	e009      	b.n	80143c8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80143b4:	68ba      	ldr	r2, [r7, #8]
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	3304      	adds	r3, #4
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	429a      	cmp	r2, r3
 80143be:	bf0c      	ite	eq
 80143c0:	2301      	moveq	r3, #1
 80143c2:	2300      	movne	r3, #0
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	f103 0208 	add.w	r2, r3, #8
 80143ce:	7dfb      	ldrb	r3, [r7, #23]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d001      	beq.n	80143d8 <etharp_input+0x98>
 80143d4:	2301      	movs	r3, #1
 80143d6:	e000      	b.n	80143da <etharp_input+0x9a>
 80143d8:	2302      	movs	r3, #2
 80143da:	f107 010c 	add.w	r1, r7, #12
 80143de:	6838      	ldr	r0, [r7, #0]
 80143e0:	f7ff fed8 	bl	8014194 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	88db      	ldrh	r3, [r3, #6]
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143ee:	d003      	beq.n	80143f8 <etharp_input+0xb8>
 80143f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143f4:	d01e      	beq.n	8014434 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80143f6:	e020      	b.n	801443a <etharp_input+0xfa>
      if (for_us) {
 80143f8:	7dfb      	ldrb	r3, [r7, #23]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d01c      	beq.n	8014438 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014414:	693a      	ldr	r2, [r7, #16]
 8014416:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014418:	2102      	movs	r1, #2
 801441a:	9103      	str	r1, [sp, #12]
 801441c:	f107 010c 	add.w	r1, r7, #12
 8014420:	9102      	str	r1, [sp, #8]
 8014422:	9201      	str	r2, [sp, #4]
 8014424:	9300      	str	r3, [sp, #0]
 8014426:	462b      	mov	r3, r5
 8014428:	4622      	mov	r2, r4
 801442a:	4601      	mov	r1, r0
 801442c:	6838      	ldr	r0, [r7, #0]
 801442e:	f000 faeb 	bl	8014a08 <etharp_raw>
      break;
 8014432:	e001      	b.n	8014438 <etharp_input+0xf8>
      break;
 8014434:	bf00      	nop
 8014436:	e000      	b.n	801443a <etharp_input+0xfa>
      break;
 8014438:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7f8 ff4e 	bl	800d2dc <pbuf_free>
}
 8014440:	3718      	adds	r7, #24
 8014442:	46bd      	mov	sp, r7
 8014444:	bdb0      	pop	{r4, r5, r7, pc}
 8014446:	bf00      	nop
 8014448:	0801c508 	.word	0x0801c508
 801444c:	0801c658 	.word	0x0801c658
 8014450:	0801c580 	.word	0x0801c580

08014454 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b086      	sub	sp, #24
 8014458:	af02      	add	r7, sp, #8
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	4613      	mov	r3, r2
 8014460:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014462:	79fa      	ldrb	r2, [r7, #7]
 8014464:	4944      	ldr	r1, [pc, #272]	; (8014578 <etharp_output_to_arp_index+0x124>)
 8014466:	4613      	mov	r3, r2
 8014468:	005b      	lsls	r3, r3, #1
 801446a:	4413      	add	r3, r2
 801446c:	00db      	lsls	r3, r3, #3
 801446e:	440b      	add	r3, r1
 8014470:	3314      	adds	r3, #20
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	2b01      	cmp	r3, #1
 8014476:	d806      	bhi.n	8014486 <etharp_output_to_arp_index+0x32>
 8014478:	4b40      	ldr	r3, [pc, #256]	; (801457c <etharp_output_to_arp_index+0x128>)
 801447a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801447e:	4940      	ldr	r1, [pc, #256]	; (8014580 <etharp_output_to_arp_index+0x12c>)
 8014480:	4840      	ldr	r0, [pc, #256]	; (8014584 <etharp_output_to_arp_index+0x130>)
 8014482:	f002 fa9d 	bl	80169c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014486:	79fa      	ldrb	r2, [r7, #7]
 8014488:	493b      	ldr	r1, [pc, #236]	; (8014578 <etharp_output_to_arp_index+0x124>)
 801448a:	4613      	mov	r3, r2
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	4413      	add	r3, r2
 8014490:	00db      	lsls	r3, r3, #3
 8014492:	440b      	add	r3, r1
 8014494:	3314      	adds	r3, #20
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	2b02      	cmp	r3, #2
 801449a:	d153      	bne.n	8014544 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801449c:	79fa      	ldrb	r2, [r7, #7]
 801449e:	4936      	ldr	r1, [pc, #216]	; (8014578 <etharp_output_to_arp_index+0x124>)
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	3312      	adds	r3, #18
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80144b2:	d919      	bls.n	80144e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80144b4:	79fa      	ldrb	r2, [r7, #7]
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	4a2e      	ldr	r2, [pc, #184]	; (8014578 <etharp_output_to_arp_index+0x124>)
 80144c0:	4413      	add	r3, r2
 80144c2:	3304      	adds	r3, #4
 80144c4:	4619      	mov	r1, r3
 80144c6:	68f8      	ldr	r0, [r7, #12]
 80144c8:	f000 fb4c 	bl	8014b64 <etharp_request>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d138      	bne.n	8014544 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80144d2:	79fa      	ldrb	r2, [r7, #7]
 80144d4:	4928      	ldr	r1, [pc, #160]	; (8014578 <etharp_output_to_arp_index+0x124>)
 80144d6:	4613      	mov	r3, r2
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	4413      	add	r3, r2
 80144dc:	00db      	lsls	r3, r3, #3
 80144de:	440b      	add	r3, r1
 80144e0:	3314      	adds	r3, #20
 80144e2:	2203      	movs	r2, #3
 80144e4:	701a      	strb	r2, [r3, #0]
 80144e6:	e02d      	b.n	8014544 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80144e8:	79fa      	ldrb	r2, [r7, #7]
 80144ea:	4923      	ldr	r1, [pc, #140]	; (8014578 <etharp_output_to_arp_index+0x124>)
 80144ec:	4613      	mov	r3, r2
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	4413      	add	r3, r2
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	440b      	add	r3, r1
 80144f6:	3312      	adds	r3, #18
 80144f8:	881b      	ldrh	r3, [r3, #0]
 80144fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80144fe:	d321      	bcc.n	8014544 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014500:	79fa      	ldrb	r2, [r7, #7]
 8014502:	4613      	mov	r3, r2
 8014504:	005b      	lsls	r3, r3, #1
 8014506:	4413      	add	r3, r2
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	4a1b      	ldr	r2, [pc, #108]	; (8014578 <etharp_output_to_arp_index+0x124>)
 801450c:	4413      	add	r3, r2
 801450e:	1d19      	adds	r1, r3, #4
 8014510:	79fa      	ldrb	r2, [r7, #7]
 8014512:	4613      	mov	r3, r2
 8014514:	005b      	lsls	r3, r3, #1
 8014516:	4413      	add	r3, r2
 8014518:	00db      	lsls	r3, r3, #3
 801451a:	3308      	adds	r3, #8
 801451c:	4a16      	ldr	r2, [pc, #88]	; (8014578 <etharp_output_to_arp_index+0x124>)
 801451e:	4413      	add	r3, r2
 8014520:	3304      	adds	r3, #4
 8014522:	461a      	mov	r2, r3
 8014524:	68f8      	ldr	r0, [r7, #12]
 8014526:	f000 fafb 	bl	8014b20 <etharp_request_dst>
 801452a:	4603      	mov	r3, r0
 801452c:	2b00      	cmp	r3, #0
 801452e:	d109      	bne.n	8014544 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014530:	79fa      	ldrb	r2, [r7, #7]
 8014532:	4911      	ldr	r1, [pc, #68]	; (8014578 <etharp_output_to_arp_index+0x124>)
 8014534:	4613      	mov	r3, r2
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	4413      	add	r3, r2
 801453a:	00db      	lsls	r3, r3, #3
 801453c:	440b      	add	r3, r1
 801453e:	3314      	adds	r3, #20
 8014540:	2203      	movs	r2, #3
 8014542:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801454a:	79fa      	ldrb	r2, [r7, #7]
 801454c:	4613      	mov	r3, r2
 801454e:	005b      	lsls	r3, r3, #1
 8014550:	4413      	add	r3, r2
 8014552:	00db      	lsls	r3, r3, #3
 8014554:	3308      	adds	r3, #8
 8014556:	4a08      	ldr	r2, [pc, #32]	; (8014578 <etharp_output_to_arp_index+0x124>)
 8014558:	4413      	add	r3, r2
 801455a:	3304      	adds	r3, #4
 801455c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014560:	9200      	str	r2, [sp, #0]
 8014562:	460a      	mov	r2, r1
 8014564:	68b9      	ldr	r1, [r7, #8]
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f001 fe36 	bl	80161d8 <ethernet_output>
 801456c:	4603      	mov	r3, r0
}
 801456e:	4618      	mov	r0, r3
 8014570:	3710      	adds	r7, #16
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	20011ba4 	.word	0x20011ba4
 801457c:	0801c508 	.word	0x0801c508
 8014580:	0801c678 	.word	0x0801c678
 8014584:	0801c580 	.word	0x0801c580

08014588 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b08a      	sub	sp, #40	; 0x28
 801458c:	af02      	add	r7, sp, #8
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d106      	bne.n	80145ac <etharp_output+0x24>
 801459e:	4b73      	ldr	r3, [pc, #460]	; (801476c <etharp_output+0x1e4>)
 80145a0:	f240 321e 	movw	r2, #798	; 0x31e
 80145a4:	4972      	ldr	r1, [pc, #456]	; (8014770 <etharp_output+0x1e8>)
 80145a6:	4873      	ldr	r0, [pc, #460]	; (8014774 <etharp_output+0x1ec>)
 80145a8:	f002 fa0a 	bl	80169c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d106      	bne.n	80145c0 <etharp_output+0x38>
 80145b2:	4b6e      	ldr	r3, [pc, #440]	; (801476c <etharp_output+0x1e4>)
 80145b4:	f240 321f 	movw	r2, #799	; 0x31f
 80145b8:	496f      	ldr	r1, [pc, #444]	; (8014778 <etharp_output+0x1f0>)
 80145ba:	486e      	ldr	r0, [pc, #440]	; (8014774 <etharp_output+0x1ec>)
 80145bc:	f002 fa00 	bl	80169c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d106      	bne.n	80145d4 <etharp_output+0x4c>
 80145c6:	4b69      	ldr	r3, [pc, #420]	; (801476c <etharp_output+0x1e4>)
 80145c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80145cc:	496b      	ldr	r1, [pc, #428]	; (801477c <etharp_output+0x1f4>)
 80145ce:	4869      	ldr	r0, [pc, #420]	; (8014774 <etharp_output+0x1ec>)
 80145d0:	f002 f9f6 	bl	80169c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	68f9      	ldr	r1, [r7, #12]
 80145da:	4618      	mov	r0, r3
 80145dc:	f000 feee 	bl	80153bc <ip4_addr_isbroadcast_u32>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d002      	beq.n	80145ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80145e6:	4b66      	ldr	r3, [pc, #408]	; (8014780 <etharp_output+0x1f8>)
 80145e8:	61fb      	str	r3, [r7, #28]
 80145ea:	e0af      	b.n	801474c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145f4:	2be0      	cmp	r3, #224	; 0xe0
 80145f6:	d118      	bne.n	801462a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80145f8:	2301      	movs	r3, #1
 80145fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80145fc:	2300      	movs	r3, #0
 80145fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014600:	235e      	movs	r3, #94	; 0x5e
 8014602:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	3301      	adds	r3, #1
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801460e:	b2db      	uxtb	r3, r3
 8014610:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	3302      	adds	r3, #2
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	3303      	adds	r3, #3
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014622:	f107 0310 	add.w	r3, r7, #16
 8014626:	61fb      	str	r3, [r7, #28]
 8014628:	e090      	b.n	801474c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	3304      	adds	r3, #4
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	405a      	eors	r2, r3
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	3308      	adds	r3, #8
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4013      	ands	r3, r2
 801463e:	2b00      	cmp	r3, #0
 8014640:	d012      	beq.n	8014668 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014648:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801464c:	4293      	cmp	r3, r2
 801464e:	d00b      	beq.n	8014668 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	330c      	adds	r3, #12
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d003      	beq.n	8014662 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	330c      	adds	r3, #12
 801465e:	61bb      	str	r3, [r7, #24]
 8014660:	e002      	b.n	8014668 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014662:	f06f 0303 	mvn.w	r3, #3
 8014666:	e07d      	b.n	8014764 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014668:	4b46      	ldr	r3, [pc, #280]	; (8014784 <etharp_output+0x1fc>)
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	4619      	mov	r1, r3
 801466e:	4a46      	ldr	r2, [pc, #280]	; (8014788 <etharp_output+0x200>)
 8014670:	460b      	mov	r3, r1
 8014672:	005b      	lsls	r3, r3, #1
 8014674:	440b      	add	r3, r1
 8014676:	00db      	lsls	r3, r3, #3
 8014678:	4413      	add	r3, r2
 801467a:	3314      	adds	r3, #20
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	2b01      	cmp	r3, #1
 8014680:	d925      	bls.n	80146ce <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014682:	4b40      	ldr	r3, [pc, #256]	; (8014784 <etharp_output+0x1fc>)
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	4619      	mov	r1, r3
 8014688:	4a3f      	ldr	r2, [pc, #252]	; (8014788 <etharp_output+0x200>)
 801468a:	460b      	mov	r3, r1
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	440b      	add	r3, r1
 8014690:	00db      	lsls	r3, r3, #3
 8014692:	4413      	add	r3, r2
 8014694:	3308      	adds	r3, #8
 8014696:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	429a      	cmp	r2, r3
 801469c:	d117      	bne.n	80146ce <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801469e:	69bb      	ldr	r3, [r7, #24]
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	4b38      	ldr	r3, [pc, #224]	; (8014784 <etharp_output+0x1fc>)
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	4618      	mov	r0, r3
 80146a8:	4937      	ldr	r1, [pc, #220]	; (8014788 <etharp_output+0x200>)
 80146aa:	4603      	mov	r3, r0
 80146ac:	005b      	lsls	r3, r3, #1
 80146ae:	4403      	add	r3, r0
 80146b0:	00db      	lsls	r3, r3, #3
 80146b2:	440b      	add	r3, r1
 80146b4:	3304      	adds	r3, #4
 80146b6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d108      	bne.n	80146ce <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80146bc:	4b31      	ldr	r3, [pc, #196]	; (8014784 <etharp_output+0x1fc>)
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	461a      	mov	r2, r3
 80146c2:	68b9      	ldr	r1, [r7, #8]
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f7ff fec5 	bl	8014454 <etharp_output_to_arp_index>
 80146ca:	4603      	mov	r3, r0
 80146cc:	e04a      	b.n	8014764 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80146ce:	2300      	movs	r3, #0
 80146d0:	75fb      	strb	r3, [r7, #23]
 80146d2:	e031      	b.n	8014738 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146d4:	7dfa      	ldrb	r2, [r7, #23]
 80146d6:	492c      	ldr	r1, [pc, #176]	; (8014788 <etharp_output+0x200>)
 80146d8:	4613      	mov	r3, r2
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	4413      	add	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	440b      	add	r3, r1
 80146e2:	3314      	adds	r3, #20
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d923      	bls.n	8014732 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80146ea:	7dfa      	ldrb	r2, [r7, #23]
 80146ec:	4926      	ldr	r1, [pc, #152]	; (8014788 <etharp_output+0x200>)
 80146ee:	4613      	mov	r3, r2
 80146f0:	005b      	lsls	r3, r3, #1
 80146f2:	4413      	add	r3, r2
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	440b      	add	r3, r1
 80146f8:	3308      	adds	r3, #8
 80146fa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146fc:	68fa      	ldr	r2, [r7, #12]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d117      	bne.n	8014732 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014702:	69bb      	ldr	r3, [r7, #24]
 8014704:	6819      	ldr	r1, [r3, #0]
 8014706:	7dfa      	ldrb	r2, [r7, #23]
 8014708:	481f      	ldr	r0, [pc, #124]	; (8014788 <etharp_output+0x200>)
 801470a:	4613      	mov	r3, r2
 801470c:	005b      	lsls	r3, r3, #1
 801470e:	4413      	add	r3, r2
 8014710:	00db      	lsls	r3, r3, #3
 8014712:	4403      	add	r3, r0
 8014714:	3304      	adds	r3, #4
 8014716:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014718:	4299      	cmp	r1, r3
 801471a:	d10a      	bne.n	8014732 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801471c:	4a19      	ldr	r2, [pc, #100]	; (8014784 <etharp_output+0x1fc>)
 801471e:	7dfb      	ldrb	r3, [r7, #23]
 8014720:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014722:	7dfb      	ldrb	r3, [r7, #23]
 8014724:	461a      	mov	r2, r3
 8014726:	68b9      	ldr	r1, [r7, #8]
 8014728:	68f8      	ldr	r0, [r7, #12]
 801472a:	f7ff fe93 	bl	8014454 <etharp_output_to_arp_index>
 801472e:	4603      	mov	r3, r0
 8014730:	e018      	b.n	8014764 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014732:	7dfb      	ldrb	r3, [r7, #23]
 8014734:	3301      	adds	r3, #1
 8014736:	75fb      	strb	r3, [r7, #23]
 8014738:	7dfb      	ldrb	r3, [r7, #23]
 801473a:	2b09      	cmp	r3, #9
 801473c:	d9ca      	bls.n	80146d4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801473e:	68ba      	ldr	r2, [r7, #8]
 8014740:	69b9      	ldr	r1, [r7, #24]
 8014742:	68f8      	ldr	r0, [r7, #12]
 8014744:	f000 f822 	bl	801478c <etharp_query>
 8014748:	4603      	mov	r3, r0
 801474a:	e00b      	b.n	8014764 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	68b9      	ldr	r1, [r7, #8]
 801475c:	68f8      	ldr	r0, [r7, #12]
 801475e:	f001 fd3b 	bl	80161d8 <ethernet_output>
 8014762:	4603      	mov	r3, r0
}
 8014764:	4618      	mov	r0, r3
 8014766:	3720      	adds	r7, #32
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}
 801476c:	0801c508 	.word	0x0801c508
 8014770:	0801c658 	.word	0x0801c658
 8014774:	0801c580 	.word	0x0801c580
 8014778:	0801c6a8 	.word	0x0801c6a8
 801477c:	0801c648 	.word	0x0801c648
 8014780:	0801cd88 	.word	0x0801cd88
 8014784:	20011c94 	.word	0x20011c94
 8014788:	20011ba4 	.word	0x20011ba4

0801478c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b08c      	sub	sp, #48	; 0x30
 8014790:	af02      	add	r7, sp, #8
 8014792:	60f8      	str	r0, [r7, #12]
 8014794:	60b9      	str	r1, [r7, #8]
 8014796:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	3326      	adds	r3, #38	; 0x26
 801479c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801479e:	23ff      	movs	r3, #255	; 0xff
 80147a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80147a4:	2300      	movs	r3, #0
 80147a6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	68f9      	ldr	r1, [r7, #12]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f000 fe04 	bl	80153bc <ip4_addr_isbroadcast_u32>
 80147b4:	4603      	mov	r3, r0
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d10c      	bne.n	80147d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80147c2:	2be0      	cmp	r3, #224	; 0xe0
 80147c4:	d006      	beq.n	80147d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d003      	beq.n	80147d4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d102      	bne.n	80147da <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80147d4:	f06f 030f 	mvn.w	r3, #15
 80147d8:	e101      	b.n	80149de <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	2101      	movs	r1, #1
 80147de:	68b8      	ldr	r0, [r7, #8]
 80147e0:	f7ff fb60 	bl	8013ea4 <etharp_find_entry>
 80147e4:	4603      	mov	r3, r0
 80147e6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80147e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	da02      	bge.n	80147f6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80147f0:	8a7b      	ldrh	r3, [r7, #18]
 80147f2:	b25b      	sxtb	r3, r3
 80147f4:	e0f3      	b.n	80149de <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80147f6:	8a7b      	ldrh	r3, [r7, #18]
 80147f8:	2b7e      	cmp	r3, #126	; 0x7e
 80147fa:	d906      	bls.n	801480a <etharp_query+0x7e>
 80147fc:	4b7a      	ldr	r3, [pc, #488]	; (80149e8 <etharp_query+0x25c>)
 80147fe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014802:	497a      	ldr	r1, [pc, #488]	; (80149ec <etharp_query+0x260>)
 8014804:	487a      	ldr	r0, [pc, #488]	; (80149f0 <etharp_query+0x264>)
 8014806:	f002 f8db 	bl	80169c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801480a:	8a7b      	ldrh	r3, [r7, #18]
 801480c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801480e:	7c7a      	ldrb	r2, [r7, #17]
 8014810:	4978      	ldr	r1, [pc, #480]	; (80149f4 <etharp_query+0x268>)
 8014812:	4613      	mov	r3, r2
 8014814:	005b      	lsls	r3, r3, #1
 8014816:	4413      	add	r3, r2
 8014818:	00db      	lsls	r3, r3, #3
 801481a:	440b      	add	r3, r1
 801481c:	3314      	adds	r3, #20
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d115      	bne.n	8014850 <etharp_query+0xc4>
    is_new_entry = 1;
 8014824:	2301      	movs	r3, #1
 8014826:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014828:	7c7a      	ldrb	r2, [r7, #17]
 801482a:	4972      	ldr	r1, [pc, #456]	; (80149f4 <etharp_query+0x268>)
 801482c:	4613      	mov	r3, r2
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	4413      	add	r3, r2
 8014832:	00db      	lsls	r3, r3, #3
 8014834:	440b      	add	r3, r1
 8014836:	3314      	adds	r3, #20
 8014838:	2201      	movs	r2, #1
 801483a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801483c:	7c7a      	ldrb	r2, [r7, #17]
 801483e:	496d      	ldr	r1, [pc, #436]	; (80149f4 <etharp_query+0x268>)
 8014840:	4613      	mov	r3, r2
 8014842:	005b      	lsls	r3, r3, #1
 8014844:	4413      	add	r3, r2
 8014846:	00db      	lsls	r3, r3, #3
 8014848:	440b      	add	r3, r1
 801484a:	3308      	adds	r3, #8
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014850:	7c7a      	ldrb	r2, [r7, #17]
 8014852:	4968      	ldr	r1, [pc, #416]	; (80149f4 <etharp_query+0x268>)
 8014854:	4613      	mov	r3, r2
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	4413      	add	r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	440b      	add	r3, r1
 801485e:	3314      	adds	r3, #20
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	2b01      	cmp	r3, #1
 8014864:	d011      	beq.n	801488a <etharp_query+0xfe>
 8014866:	7c7a      	ldrb	r2, [r7, #17]
 8014868:	4962      	ldr	r1, [pc, #392]	; (80149f4 <etharp_query+0x268>)
 801486a:	4613      	mov	r3, r2
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	4413      	add	r3, r2
 8014870:	00db      	lsls	r3, r3, #3
 8014872:	440b      	add	r3, r1
 8014874:	3314      	adds	r3, #20
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	2b01      	cmp	r3, #1
 801487a:	d806      	bhi.n	801488a <etharp_query+0xfe>
 801487c:	4b5a      	ldr	r3, [pc, #360]	; (80149e8 <etharp_query+0x25c>)
 801487e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014882:	495d      	ldr	r1, [pc, #372]	; (80149f8 <etharp_query+0x26c>)
 8014884:	485a      	ldr	r0, [pc, #360]	; (80149f0 <etharp_query+0x264>)
 8014886:	f002 f89b 	bl	80169c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801488a:	6a3b      	ldr	r3, [r7, #32]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d102      	bne.n	8014896 <etharp_query+0x10a>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d10c      	bne.n	80148b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014896:	68b9      	ldr	r1, [r7, #8]
 8014898:	68f8      	ldr	r0, [r7, #12]
 801489a:	f000 f963 	bl	8014b64 <etharp_request>
 801489e:	4603      	mov	r3, r0
 80148a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d102      	bne.n	80148b0 <etharp_query+0x124>
      return result;
 80148aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80148ae:	e096      	b.n	80149de <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d106      	bne.n	80148c4 <etharp_query+0x138>
 80148b6:	4b4c      	ldr	r3, [pc, #304]	; (80149e8 <etharp_query+0x25c>)
 80148b8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80148bc:	494f      	ldr	r1, [pc, #316]	; (80149fc <etharp_query+0x270>)
 80148be:	484c      	ldr	r0, [pc, #304]	; (80149f0 <etharp_query+0x264>)
 80148c0:	f002 f87e 	bl	80169c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80148c4:	7c7a      	ldrb	r2, [r7, #17]
 80148c6:	494b      	ldr	r1, [pc, #300]	; (80149f4 <etharp_query+0x268>)
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	440b      	add	r3, r1
 80148d2:	3314      	adds	r3, #20
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d917      	bls.n	801490a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80148da:	4a49      	ldr	r2, [pc, #292]	; (8014a00 <etharp_query+0x274>)
 80148dc:	7c7b      	ldrb	r3, [r7, #17]
 80148de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80148e0:	7c7a      	ldrb	r2, [r7, #17]
 80148e2:	4613      	mov	r3, r2
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	4413      	add	r3, r2
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	3308      	adds	r3, #8
 80148ec:	4a41      	ldr	r2, [pc, #260]	; (80149f4 <etharp_query+0x268>)
 80148ee:	4413      	add	r3, r2
 80148f0:	3304      	adds	r3, #4
 80148f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148f6:	9200      	str	r2, [sp, #0]
 80148f8:	697a      	ldr	r2, [r7, #20]
 80148fa:	6879      	ldr	r1, [r7, #4]
 80148fc:	68f8      	ldr	r0, [r7, #12]
 80148fe:	f001 fc6b 	bl	80161d8 <ethernet_output>
 8014902:	4603      	mov	r3, r0
 8014904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014908:	e067      	b.n	80149da <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801490a:	7c7a      	ldrb	r2, [r7, #17]
 801490c:	4939      	ldr	r1, [pc, #228]	; (80149f4 <etharp_query+0x268>)
 801490e:	4613      	mov	r3, r2
 8014910:	005b      	lsls	r3, r3, #1
 8014912:	4413      	add	r3, r2
 8014914:	00db      	lsls	r3, r3, #3
 8014916:	440b      	add	r3, r1
 8014918:	3314      	adds	r3, #20
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	2b01      	cmp	r3, #1
 801491e:	d15c      	bne.n	80149da <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014920:	2300      	movs	r3, #0
 8014922:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014928:	e01c      	b.n	8014964 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	895a      	ldrh	r2, [r3, #10]
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	891b      	ldrh	r3, [r3, #8]
 8014932:	429a      	cmp	r2, r3
 8014934:	d10a      	bne.n	801494c <etharp_query+0x1c0>
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d006      	beq.n	801494c <etharp_query+0x1c0>
 801493e:	4b2a      	ldr	r3, [pc, #168]	; (80149e8 <etharp_query+0x25c>)
 8014940:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014944:	492f      	ldr	r1, [pc, #188]	; (8014a04 <etharp_query+0x278>)
 8014946:	482a      	ldr	r0, [pc, #168]	; (80149f0 <etharp_query+0x264>)
 8014948:	f002 f83a 	bl	80169c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	7b1b      	ldrb	r3, [r3, #12]
 8014950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014954:	2b00      	cmp	r3, #0
 8014956:	d002      	beq.n	801495e <etharp_query+0x1d2>
        copy_needed = 1;
 8014958:	2301      	movs	r3, #1
 801495a:	61bb      	str	r3, [r7, #24]
        break;
 801495c:	e005      	b.n	801496a <etharp_query+0x1de>
      }
      p = p->next;
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d1df      	bne.n	801492a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d007      	beq.n	8014980 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014970:	687a      	ldr	r2, [r7, #4]
 8014972:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014976:	200e      	movs	r0, #14
 8014978:	f7f8 ff18 	bl	800d7ac <pbuf_clone>
 801497c:	61f8      	str	r0, [r7, #28]
 801497e:	e004      	b.n	801498a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014984:	69f8      	ldr	r0, [r7, #28]
 8014986:	f7f8 fd4f 	bl	800d428 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d021      	beq.n	80149d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014990:	7c7a      	ldrb	r2, [r7, #17]
 8014992:	4918      	ldr	r1, [pc, #96]	; (80149f4 <etharp_query+0x268>)
 8014994:	4613      	mov	r3, r2
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	440b      	add	r3, r1
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d00a      	beq.n	80149ba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80149a4:	7c7a      	ldrb	r2, [r7, #17]
 80149a6:	4913      	ldr	r1, [pc, #76]	; (80149f4 <etharp_query+0x268>)
 80149a8:	4613      	mov	r3, r2
 80149aa:	005b      	lsls	r3, r3, #1
 80149ac:	4413      	add	r3, r2
 80149ae:	00db      	lsls	r3, r3, #3
 80149b0:	440b      	add	r3, r1
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7f8 fc91 	bl	800d2dc <pbuf_free>
      }
      arp_table[i].q = p;
 80149ba:	7c7a      	ldrb	r2, [r7, #17]
 80149bc:	490d      	ldr	r1, [pc, #52]	; (80149f4 <etharp_query+0x268>)
 80149be:	4613      	mov	r3, r2
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	4413      	add	r3, r2
 80149c4:	00db      	lsls	r3, r3, #3
 80149c6:	440b      	add	r3, r1
 80149c8:	69fa      	ldr	r2, [r7, #28]
 80149ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80149cc:	2300      	movs	r3, #0
 80149ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149d2:	e002      	b.n	80149da <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80149d4:	23ff      	movs	r3, #255	; 0xff
 80149d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80149da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3728      	adds	r7, #40	; 0x28
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	0801c508 	.word	0x0801c508
 80149ec:	0801c6b4 	.word	0x0801c6b4
 80149f0:	0801c580 	.word	0x0801c580
 80149f4:	20011ba4 	.word	0x20011ba4
 80149f8:	0801c6c4 	.word	0x0801c6c4
 80149fc:	0801c6a8 	.word	0x0801c6a8
 8014a00:	20011c94 	.word	0x20011c94
 8014a04:	0801c6ec 	.word	0x0801c6ec

08014a08 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b08a      	sub	sp, #40	; 0x28
 8014a0c:	af02      	add	r7, sp, #8
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
 8014a14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014a16:	2300      	movs	r3, #0
 8014a18:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d106      	bne.n	8014a2e <etharp_raw+0x26>
 8014a20:	4b3a      	ldr	r3, [pc, #232]	; (8014b0c <etharp_raw+0x104>)
 8014a22:	f240 4257 	movw	r2, #1111	; 0x457
 8014a26:	493a      	ldr	r1, [pc, #232]	; (8014b10 <etharp_raw+0x108>)
 8014a28:	483a      	ldr	r0, [pc, #232]	; (8014b14 <etharp_raw+0x10c>)
 8014a2a:	f001 ffc9 	bl	80169c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014a2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a32:	211c      	movs	r1, #28
 8014a34:	200e      	movs	r0, #14
 8014a36:	f7f8 f96d 	bl	800cd14 <pbuf_alloc>
 8014a3a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014a3c:	69bb      	ldr	r3, [r7, #24]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d102      	bne.n	8014a48 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a46:	e05d      	b.n	8014b04 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	895b      	ldrh	r3, [r3, #10]
 8014a4c:	2b1b      	cmp	r3, #27
 8014a4e:	d806      	bhi.n	8014a5e <etharp_raw+0x56>
 8014a50:	4b2e      	ldr	r3, [pc, #184]	; (8014b0c <etharp_raw+0x104>)
 8014a52:	f240 4262 	movw	r2, #1122	; 0x462
 8014a56:	4930      	ldr	r1, [pc, #192]	; (8014b18 <etharp_raw+0x110>)
 8014a58:	482e      	ldr	r0, [pc, #184]	; (8014b14 <etharp_raw+0x10c>)
 8014a5a:	f001 ffb1 	bl	80169c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014a5e:	69bb      	ldr	r3, [r7, #24]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014a64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7f6 ff32 	bl	800b8d0 <lwip_htons>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	461a      	mov	r2, r3
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a7a:	2b06      	cmp	r3, #6
 8014a7c:	d006      	beq.n	8014a8c <etharp_raw+0x84>
 8014a7e:	4b23      	ldr	r3, [pc, #140]	; (8014b0c <etharp_raw+0x104>)
 8014a80:	f240 4269 	movw	r2, #1129	; 0x469
 8014a84:	4925      	ldr	r1, [pc, #148]	; (8014b1c <etharp_raw+0x114>)
 8014a86:	4823      	ldr	r0, [pc, #140]	; (8014b14 <etharp_raw+0x10c>)
 8014a88:	f001 ff9a 	bl	80169c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	3308      	adds	r3, #8
 8014a90:	2206      	movs	r2, #6
 8014a92:	6839      	ldr	r1, [r7, #0]
 8014a94:	4618      	mov	r0, r3
 8014a96:	f001 fece 	bl	8016836 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	3312      	adds	r3, #18
 8014a9e:	2206      	movs	r2, #6
 8014aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f001 fec7 	bl	8016836 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	330e      	adds	r3, #14
 8014aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014aae:	6812      	ldr	r2, [r2, #0]
 8014ab0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	3318      	adds	r3, #24
 8014ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ab8:	6812      	ldr	r2, [r2, #0]
 8014aba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	701a      	strb	r2, [r3, #0]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f042 0201 	orr.w	r2, r2, #1
 8014ac8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	2200      	movs	r2, #0
 8014ace:	f042 0208 	orr.w	r2, r2, #8
 8014ad2:	709a      	strb	r2, [r3, #2]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	2206      	movs	r2, #6
 8014adc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	2204      	movs	r2, #4
 8014ae2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014ae4:	f640 0306 	movw	r3, #2054	; 0x806
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	68ba      	ldr	r2, [r7, #8]
 8014aee:	69b9      	ldr	r1, [r7, #24]
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f001 fb71 	bl	80161d8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014af6:	69b8      	ldr	r0, [r7, #24]
 8014af8:	f7f8 fbf0 	bl	800d2dc <pbuf_free>
  p = NULL;
 8014afc:	2300      	movs	r3, #0
 8014afe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014b00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3720      	adds	r7, #32
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	0801c508 	.word	0x0801c508
 8014b10:	0801c658 	.word	0x0801c658
 8014b14:	0801c580 	.word	0x0801c580
 8014b18:	0801c708 	.word	0x0801c708
 8014b1c:	0801c73c 	.word	0x0801c73c

08014b20 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b088      	sub	sp, #32
 8014b24:	af04      	add	r7, sp, #16
 8014b26:	60f8      	str	r0, [r7, #12]
 8014b28:	60b9      	str	r1, [r7, #8]
 8014b2a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	9203      	str	r2, [sp, #12]
 8014b40:	68ba      	ldr	r2, [r7, #8]
 8014b42:	9202      	str	r2, [sp, #8]
 8014b44:	4a06      	ldr	r2, [pc, #24]	; (8014b60 <etharp_request_dst+0x40>)
 8014b46:	9201      	str	r2, [sp, #4]
 8014b48:	9300      	str	r3, [sp, #0]
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	68f8      	ldr	r0, [r7, #12]
 8014b50:	f7ff ff5a 	bl	8014a08 <etharp_raw>
 8014b54:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3710      	adds	r7, #16
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	0801cd90 	.word	0x0801cd90

08014b64 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014b6e:	4a05      	ldr	r2, [pc, #20]	; (8014b84 <etharp_request+0x20>)
 8014b70:	6839      	ldr	r1, [r7, #0]
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f7ff ffd4 	bl	8014b20 <etharp_request_dst>
 8014b78:	4603      	mov	r3, r0
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	0801cd88 	.word	0x0801cd88

08014b88 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b08e      	sub	sp, #56	; 0x38
 8014b8c:	af04      	add	r7, sp, #16
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014b92:	4b79      	ldr	r3, [pc, #484]	; (8014d78 <icmp_input+0x1f0>)
 8014b94:	689b      	ldr	r3, [r3, #8]
 8014b96:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	f003 030f 	and.w	r3, r3, #15
 8014ba0:	b2db      	uxtb	r3, r3
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	b2db      	uxtb	r3, r3
 8014ba6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014baa:	2b13      	cmp	r3, #19
 8014bac:	f240 80cd 	bls.w	8014d4a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	895b      	ldrh	r3, [r3, #10]
 8014bb4:	2b03      	cmp	r3, #3
 8014bb6:	f240 80ca 	bls.w	8014d4e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014bc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f000 80b7 	beq.w	8014d3c <icmp_input+0x1b4>
 8014bce:	2b08      	cmp	r3, #8
 8014bd0:	f040 80b7 	bne.w	8014d42 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014bd4:	4b69      	ldr	r3, [pc, #420]	; (8014d7c <icmp_input+0x1f4>)
 8014bd6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014bd8:	4b67      	ldr	r3, [pc, #412]	; (8014d78 <icmp_input+0x1f0>)
 8014bda:	695b      	ldr	r3, [r3, #20]
 8014bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014be0:	2be0      	cmp	r3, #224	; 0xe0
 8014be2:	f000 80bb 	beq.w	8014d5c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014be6:	4b64      	ldr	r3, [pc, #400]	; (8014d78 <icmp_input+0x1f0>)
 8014be8:	695b      	ldr	r3, [r3, #20]
 8014bea:	4a63      	ldr	r2, [pc, #396]	; (8014d78 <icmp_input+0x1f0>)
 8014bec:	6812      	ldr	r2, [r2, #0]
 8014bee:	4611      	mov	r1, r2
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f000 fbe3 	bl	80153bc <ip4_addr_isbroadcast_u32>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f040 80b1 	bne.w	8014d60 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	891b      	ldrh	r3, [r3, #8]
 8014c02:	2b07      	cmp	r3, #7
 8014c04:	f240 80a5 	bls.w	8014d52 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c0a:	330e      	adds	r3, #14
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f7f8 face 	bl	800d1b0 <pbuf_add_header>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d04b      	beq.n	8014cb2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	891a      	ldrh	r2, [r3, #8]
 8014c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c20:	4413      	add	r3, r2
 8014c22:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	891b      	ldrh	r3, [r3, #8]
 8014c28:	8b7a      	ldrh	r2, [r7, #26]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	f0c0 809a 	bcc.w	8014d64 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014c30:	8b7b      	ldrh	r3, [r7, #26]
 8014c32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c36:	4619      	mov	r1, r3
 8014c38:	200e      	movs	r0, #14
 8014c3a:	f7f8 f86b 	bl	800cd14 <pbuf_alloc>
 8014c3e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	f000 8090 	beq.w	8014d68 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	895b      	ldrh	r3, [r3, #10]
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c50:	3308      	adds	r3, #8
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d203      	bcs.n	8014c5e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014c56:	6978      	ldr	r0, [r7, #20]
 8014c58:	f7f8 fb40 	bl	800d2dc <pbuf_free>
          goto icmperr;
 8014c5c:	e085      	b.n	8014d6a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c66:	4618      	mov	r0, r3
 8014c68:	f001 fde5 	bl	8016836 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c6e:	4619      	mov	r1, r3
 8014c70:	6978      	ldr	r0, [r7, #20]
 8014c72:	f7f8 faad 	bl	800d1d0 <pbuf_remove_header>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d009      	beq.n	8014c90 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014c7c:	4b40      	ldr	r3, [pc, #256]	; (8014d80 <icmp_input+0x1f8>)
 8014c7e:	22b6      	movs	r2, #182	; 0xb6
 8014c80:	4940      	ldr	r1, [pc, #256]	; (8014d84 <icmp_input+0x1fc>)
 8014c82:	4841      	ldr	r0, [pc, #260]	; (8014d88 <icmp_input+0x200>)
 8014c84:	f001 fe9c 	bl	80169c0 <iprintf>
          pbuf_free(r);
 8014c88:	6978      	ldr	r0, [r7, #20]
 8014c8a:	f7f8 fb27 	bl	800d2dc <pbuf_free>
          goto icmperr;
 8014c8e:	e06c      	b.n	8014d6a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014c90:	6879      	ldr	r1, [r7, #4]
 8014c92:	6978      	ldr	r0, [r7, #20]
 8014c94:	f7f8 fc46 	bl	800d524 <pbuf_copy>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d003      	beq.n	8014ca6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014c9e:	6978      	ldr	r0, [r7, #20]
 8014ca0:	f7f8 fb1c 	bl	800d2dc <pbuf_free>
          goto icmperr;
 8014ca4:	e061      	b.n	8014d6a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f7f8 fb18 	bl	800d2dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	607b      	str	r3, [r7, #4]
 8014cb0:	e00f      	b.n	8014cd2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cb4:	330e      	adds	r3, #14
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f7f8 fa89 	bl	800d1d0 <pbuf_remove_header>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d006      	beq.n	8014cd2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014cc4:	4b2e      	ldr	r3, [pc, #184]	; (8014d80 <icmp_input+0x1f8>)
 8014cc6:	22c7      	movs	r2, #199	; 0xc7
 8014cc8:	4930      	ldr	r1, [pc, #192]	; (8014d8c <icmp_input+0x204>)
 8014cca:	482f      	ldr	r0, [pc, #188]	; (8014d88 <icmp_input+0x200>)
 8014ccc:	f001 fe78 	bl	80169c0 <iprintf>
          goto icmperr;
 8014cd0:	e04b      	b.n	8014d6a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	685b      	ldr	r3, [r3, #4]
 8014cd6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cda:	4619      	mov	r1, r3
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f7f8 fa67 	bl	800d1b0 <pbuf_add_header>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d12b      	bne.n	8014d40 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	681a      	ldr	r2, [r3, #0]
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014cf6:	4b20      	ldr	r3, [pc, #128]	; (8014d78 <icmp_input+0x1f0>)
 8014cf8:	691a      	ldr	r2, [r3, #16]
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	2200      	movs	r2, #0
 8014d02:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	2200      	movs	r2, #0
 8014d08:	709a      	strb	r2, [r3, #2]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	22ff      	movs	r2, #255	; 0xff
 8014d12:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	2200      	movs	r2, #0
 8014d18:	729a      	strb	r2, [r3, #10]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	9302      	str	r3, [sp, #8]
 8014d22:	2301      	movs	r3, #1
 8014d24:	9301      	str	r3, [sp, #4]
 8014d26:	2300      	movs	r3, #0
 8014d28:	9300      	str	r3, [sp, #0]
 8014d2a:	23ff      	movs	r3, #255	; 0xff
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	69f9      	ldr	r1, [r7, #28]
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f000 fa6b 	bl	801520c <ip4_output_if>
 8014d36:	4603      	mov	r3, r0
 8014d38:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014d3a:	e001      	b.n	8014d40 <icmp_input+0x1b8>
      break;
 8014d3c:	bf00      	nop
 8014d3e:	e000      	b.n	8014d42 <icmp_input+0x1ba>
      break;
 8014d40:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f7f8 faca 	bl	800d2dc <pbuf_free>
  return;
 8014d48:	e013      	b.n	8014d72 <icmp_input+0x1ea>
    goto lenerr;
 8014d4a:	bf00      	nop
 8014d4c:	e002      	b.n	8014d54 <icmp_input+0x1cc>
    goto lenerr;
 8014d4e:	bf00      	nop
 8014d50:	e000      	b.n	8014d54 <icmp_input+0x1cc>
        goto lenerr;
 8014d52:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f7f8 fac1 	bl	800d2dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d5a:	e00a      	b.n	8014d72 <icmp_input+0x1ea>
        goto icmperr;
 8014d5c:	bf00      	nop
 8014d5e:	e004      	b.n	8014d6a <icmp_input+0x1e2>
        goto icmperr;
 8014d60:	bf00      	nop
 8014d62:	e002      	b.n	8014d6a <icmp_input+0x1e2>
          goto icmperr;
 8014d64:	bf00      	nop
 8014d66:	e000      	b.n	8014d6a <icmp_input+0x1e2>
          goto icmperr;
 8014d68:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7f8 fab6 	bl	800d2dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d70:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014d72:	3728      	adds	r7, #40	; 0x28
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	20009abc 	.word	0x20009abc
 8014d7c:	20009ad0 	.word	0x20009ad0
 8014d80:	0801c780 	.word	0x0801c780
 8014d84:	0801c7b8 	.word	0x0801c7b8
 8014d88:	0801c7f0 	.word	0x0801c7f0
 8014d8c:	0801c818 	.word	0x0801c818

08014d90 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	460b      	mov	r3, r1
 8014d9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014d9c:	78fb      	ldrb	r3, [r7, #3]
 8014d9e:	461a      	mov	r2, r3
 8014da0:	2103      	movs	r1, #3
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f000 f814 	bl	8014dd0 <icmp_send_response>
}
 8014da8:	bf00      	nop
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014dbc:	78fb      	ldrb	r3, [r7, #3]
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	210b      	movs	r1, #11
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 f804 	bl	8014dd0 <icmp_send_response>
}
 8014dc8:	bf00      	nop
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b08c      	sub	sp, #48	; 0x30
 8014dd4:	af04      	add	r7, sp, #16
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	460b      	mov	r3, r1
 8014dda:	70fb      	strb	r3, [r7, #3]
 8014ddc:	4613      	mov	r3, r2
 8014dde:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014de0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014de4:	2124      	movs	r1, #36	; 0x24
 8014de6:	2022      	movs	r0, #34	; 0x22
 8014de8:	f7f7 ff94 	bl	800cd14 <pbuf_alloc>
 8014dec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014dee:	69fb      	ldr	r3, [r7, #28]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d04c      	beq.n	8014e8e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	895b      	ldrh	r3, [r3, #10]
 8014df8:	2b23      	cmp	r3, #35	; 0x23
 8014dfa:	d806      	bhi.n	8014e0a <icmp_send_response+0x3a>
 8014dfc:	4b26      	ldr	r3, [pc, #152]	; (8014e98 <icmp_send_response+0xc8>)
 8014dfe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014e02:	4926      	ldr	r1, [pc, #152]	; (8014e9c <icmp_send_response+0xcc>)
 8014e04:	4826      	ldr	r0, [pc, #152]	; (8014ea0 <icmp_send_response+0xd0>)
 8014e06:	f001 fddb 	bl	80169c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014e10:	69fb      	ldr	r3, [r7, #28]
 8014e12:	685b      	ldr	r3, [r3, #4]
 8014e14:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	78fa      	ldrb	r2, [r7, #3]
 8014e1a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	78ba      	ldrb	r2, [r7, #2]
 8014e20:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	2200      	movs	r2, #0
 8014e26:	711a      	strb	r2, [r3, #4]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	719a      	strb	r2, [r3, #6]
 8014e32:	2200      	movs	r2, #0
 8014e34:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	f103 0008 	add.w	r0, r3, #8
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	221c      	movs	r2, #28
 8014e44:	4619      	mov	r1, r3
 8014e46:	f001 fcf6 	bl	8016836 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	68db      	ldr	r3, [r3, #12]
 8014e4e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014e50:	f107 030c 	add.w	r3, r7, #12
 8014e54:	4618      	mov	r0, r3
 8014e56:	f000 f825 	bl	8014ea4 <ip4_route>
 8014e5a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014e5c:	693b      	ldr	r3, [r7, #16]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d011      	beq.n	8014e86 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	2200      	movs	r2, #0
 8014e66:	709a      	strb	r2, [r3, #2]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014e6c:	f107 020c 	add.w	r2, r7, #12
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	9302      	str	r3, [sp, #8]
 8014e74:	2301      	movs	r3, #1
 8014e76:	9301      	str	r3, [sp, #4]
 8014e78:	2300      	movs	r3, #0
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	23ff      	movs	r3, #255	; 0xff
 8014e7e:	2100      	movs	r1, #0
 8014e80:	69f8      	ldr	r0, [r7, #28]
 8014e82:	f000 f9c3 	bl	801520c <ip4_output_if>
  }
  pbuf_free(q);
 8014e86:	69f8      	ldr	r0, [r7, #28]
 8014e88:	f7f8 fa28 	bl	800d2dc <pbuf_free>
 8014e8c:	e000      	b.n	8014e90 <icmp_send_response+0xc0>
    return;
 8014e8e:	bf00      	nop
}
 8014e90:	3720      	adds	r7, #32
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	0801c780 	.word	0x0801c780
 8014e9c:	0801c84c 	.word	0x0801c84c
 8014ea0:	0801c7f0 	.word	0x0801c7f0

08014ea4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014eac:	4b33      	ldr	r3, [pc, #204]	; (8014f7c <ip4_route+0xd8>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	60fb      	str	r3, [r7, #12]
 8014eb2:	e036      	b.n	8014f22 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014eba:	f003 0301 	and.w	r3, r3, #1
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d02b      	beq.n	8014f1c <ip4_route+0x78>
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014eca:	089b      	lsrs	r3, r3, #2
 8014ecc:	f003 0301 	and.w	r3, r3, #1
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d022      	beq.n	8014f1c <ip4_route+0x78>
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	3304      	adds	r3, #4
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d01d      	beq.n	8014f1c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	405a      	eors	r2, r3
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	3308      	adds	r3, #8
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	4013      	ands	r3, r2
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d101      	bne.n	8014efc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	e038      	b.n	8014f6e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f02:	f003 0302 	and.w	r3, r3, #2
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d108      	bne.n	8014f1c <ip4_route+0x78>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681a      	ldr	r2, [r3, #0]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	330c      	adds	r3, #12
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d101      	bne.n	8014f1c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	e028      	b.n	8014f6e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	60fb      	str	r3, [r7, #12]
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d1c5      	bne.n	8014eb4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f28:	4b15      	ldr	r3, [pc, #84]	; (8014f80 <ip4_route+0xdc>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d01a      	beq.n	8014f66 <ip4_route+0xc2>
 8014f30:	4b13      	ldr	r3, [pc, #76]	; (8014f80 <ip4_route+0xdc>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f38:	f003 0301 	and.w	r3, r3, #1
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d012      	beq.n	8014f66 <ip4_route+0xc2>
 8014f40:	4b0f      	ldr	r3, [pc, #60]	; (8014f80 <ip4_route+0xdc>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f48:	f003 0304 	and.w	r3, r3, #4
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d00a      	beq.n	8014f66 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f50:	4b0b      	ldr	r3, [pc, #44]	; (8014f80 <ip4_route+0xdc>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	3304      	adds	r3, #4
 8014f56:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d004      	beq.n	8014f66 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	b2db      	uxtb	r3, r3
 8014f62:	2b7f      	cmp	r3, #127	; 0x7f
 8014f64:	d101      	bne.n	8014f6a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014f66:	2300      	movs	r3, #0
 8014f68:	e001      	b.n	8014f6e <ip4_route+0xca>
  }

  return netif_default;
 8014f6a:	4b05      	ldr	r3, [pc, #20]	; (8014f80 <ip4_route+0xdc>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3714      	adds	r7, #20
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop
 8014f7c:	20011b3c 	.word	0x20011b3c
 8014f80:	20011b40 	.word	0x20011b40

08014f84 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b082      	sub	sp, #8
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f92:	f003 0301 	and.w	r3, r3, #1
 8014f96:	b2db      	uxtb	r3, r3
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d016      	beq.n	8014fca <ip4_input_accept+0x46>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	3304      	adds	r3, #4
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d011      	beq.n	8014fca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fa6:	4b0b      	ldr	r3, [pc, #44]	; (8014fd4 <ip4_input_accept+0x50>)
 8014fa8:	695a      	ldr	r2, [r3, #20]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	3304      	adds	r3, #4
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d008      	beq.n	8014fc6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014fb4:	4b07      	ldr	r3, [pc, #28]	; (8014fd4 <ip4_input_accept+0x50>)
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	6879      	ldr	r1, [r7, #4]
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f000 f9fe 	bl	80153bc <ip4_addr_isbroadcast_u32>
 8014fc0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d001      	beq.n	8014fca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	e000      	b.n	8014fcc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3708      	adds	r7, #8
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	20009abc 	.word	0x20009abc

08014fd8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b086      	sub	sp, #24
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	091b      	lsrs	r3, r3, #4
 8014fee:	b2db      	uxtb	r3, r3
 8014ff0:	2b04      	cmp	r3, #4
 8014ff2:	d004      	beq.n	8014ffe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7f8 f971 	bl	800d2dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	e0fd      	b.n	80151fa <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	f003 030f 	and.w	r3, r3, #15
 8015006:	b2db      	uxtb	r3, r3
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	b2db      	uxtb	r3, r3
 801500c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	885b      	ldrh	r3, [r3, #2]
 8015012:	b29b      	uxth	r3, r3
 8015014:	4618      	mov	r0, r3
 8015016:	f7f6 fc5b 	bl	800b8d0 <lwip_htons>
 801501a:	4603      	mov	r3, r0
 801501c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	891b      	ldrh	r3, [r3, #8]
 8015022:	89ba      	ldrh	r2, [r7, #12]
 8015024:	429a      	cmp	r2, r3
 8015026:	d204      	bcs.n	8015032 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015028:	89bb      	ldrh	r3, [r7, #12]
 801502a:	4619      	mov	r1, r3
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f7f7 ffcf 	bl	800cfd0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	895b      	ldrh	r3, [r3, #10]
 8015036:	89fa      	ldrh	r2, [r7, #14]
 8015038:	429a      	cmp	r2, r3
 801503a:	d807      	bhi.n	801504c <ip4_input+0x74>
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	891b      	ldrh	r3, [r3, #8]
 8015040:	89ba      	ldrh	r2, [r7, #12]
 8015042:	429a      	cmp	r2, r3
 8015044:	d802      	bhi.n	801504c <ip4_input+0x74>
 8015046:	89fb      	ldrh	r3, [r7, #14]
 8015048:	2b13      	cmp	r3, #19
 801504a:	d804      	bhi.n	8015056 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f7f8 f945 	bl	800d2dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015052:	2300      	movs	r3, #0
 8015054:	e0d1      	b.n	80151fa <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	691b      	ldr	r3, [r3, #16]
 801505a:	4a6a      	ldr	r2, [pc, #424]	; (8015204 <ip4_input+0x22c>)
 801505c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	4a68      	ldr	r2, [pc, #416]	; (8015204 <ip4_input+0x22c>)
 8015064:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015066:	4b67      	ldr	r3, [pc, #412]	; (8015204 <ip4_input+0x22c>)
 8015068:	695b      	ldr	r3, [r3, #20]
 801506a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801506e:	2be0      	cmp	r3, #224	; 0xe0
 8015070:	d112      	bne.n	8015098 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015078:	f003 0301 	and.w	r3, r3, #1
 801507c:	b2db      	uxtb	r3, r3
 801507e:	2b00      	cmp	r3, #0
 8015080:	d007      	beq.n	8015092 <ip4_input+0xba>
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	3304      	adds	r3, #4
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d002      	beq.n	8015092 <ip4_input+0xba>
      netif = inp;
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	613b      	str	r3, [r7, #16]
 8015090:	e02a      	b.n	80150e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015092:	2300      	movs	r3, #0
 8015094:	613b      	str	r3, [r7, #16]
 8015096:	e027      	b.n	80150e8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015098:	6838      	ldr	r0, [r7, #0]
 801509a:	f7ff ff73 	bl	8014f84 <ip4_input_accept>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d002      	beq.n	80150aa <ip4_input+0xd2>
      netif = inp;
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	613b      	str	r3, [r7, #16]
 80150a8:	e01e      	b.n	80150e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80150aa:	2300      	movs	r3, #0
 80150ac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80150ae:	4b55      	ldr	r3, [pc, #340]	; (8015204 <ip4_input+0x22c>)
 80150b0:	695b      	ldr	r3, [r3, #20]
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	2b7f      	cmp	r3, #127	; 0x7f
 80150b6:	d017      	beq.n	80150e8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80150b8:	4b53      	ldr	r3, [pc, #332]	; (8015208 <ip4_input+0x230>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	e00e      	b.n	80150de <ip4_input+0x106>
          if (netif == inp) {
 80150c0:	693a      	ldr	r2, [r7, #16]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d006      	beq.n	80150d6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80150c8:	6938      	ldr	r0, [r7, #16]
 80150ca:	f7ff ff5b 	bl	8014f84 <ip4_input_accept>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d108      	bne.n	80150e6 <ip4_input+0x10e>
 80150d4:	e000      	b.n	80150d8 <ip4_input+0x100>
            continue;
 80150d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	613b      	str	r3, [r7, #16]
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d1ed      	bne.n	80150c0 <ip4_input+0xe8>
 80150e4:	e000      	b.n	80150e8 <ip4_input+0x110>
            break;
 80150e6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80150e8:	4b46      	ldr	r3, [pc, #280]	; (8015204 <ip4_input+0x22c>)
 80150ea:	691b      	ldr	r3, [r3, #16]
 80150ec:	6839      	ldr	r1, [r7, #0]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f000 f964 	bl	80153bc <ip4_addr_isbroadcast_u32>
 80150f4:	4603      	mov	r3, r0
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d105      	bne.n	8015106 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80150fa:	4b42      	ldr	r3, [pc, #264]	; (8015204 <ip4_input+0x22c>)
 80150fc:	691b      	ldr	r3, [r3, #16]
 80150fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015102:	2be0      	cmp	r3, #224	; 0xe0
 8015104:	d104      	bne.n	8015110 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f7f8 f8e8 	bl	800d2dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801510c:	2300      	movs	r3, #0
 801510e:	e074      	b.n	80151fa <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d104      	bne.n	8015120 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f7f8 f8e0 	bl	800d2dc <pbuf_free>
    return ERR_OK;
 801511c:	2300      	movs	r3, #0
 801511e:	e06c      	b.n	80151fa <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	88db      	ldrh	r3, [r3, #6]
 8015124:	b29b      	uxth	r3, r3
 8015126:	461a      	mov	r2, r3
 8015128:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801512c:	4013      	ands	r3, r2
 801512e:	2b00      	cmp	r3, #0
 8015130:	d00b      	beq.n	801514a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 fc88 	bl	8015a48 <ip4_reass>
 8015138:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d101      	bne.n	8015144 <ip4_input+0x16c>
      return ERR_OK;
 8015140:	2300      	movs	r3, #0
 8015142:	e05a      	b.n	80151fa <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	685b      	ldr	r3, [r3, #4]
 8015148:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801514a:	4a2e      	ldr	r2, [pc, #184]	; (8015204 <ip4_input+0x22c>)
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015150:	4a2c      	ldr	r2, [pc, #176]	; (8015204 <ip4_input+0x22c>)
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015156:	4a2b      	ldr	r2, [pc, #172]	; (8015204 <ip4_input+0x22c>)
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	f003 030f 	and.w	r3, r3, #15
 8015164:	b2db      	uxtb	r3, r3
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	b2db      	uxtb	r3, r3
 801516a:	b29a      	uxth	r2, r3
 801516c:	4b25      	ldr	r3, [pc, #148]	; (8015204 <ip4_input+0x22c>)
 801516e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015170:	89fb      	ldrh	r3, [r7, #14]
 8015172:	4619      	mov	r1, r3
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f7f8 f82b 	bl	800d1d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	7a5b      	ldrb	r3, [r3, #9]
 801517e:	2b01      	cmp	r3, #1
 8015180:	d006      	beq.n	8015190 <ip4_input+0x1b8>
 8015182:	2b06      	cmp	r3, #6
 8015184:	d109      	bne.n	801519a <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015186:	6839      	ldr	r1, [r7, #0]
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7fa f9fb 	bl	800f584 <tcp_input>
        break;
 801518e:	e021      	b.n	80151d4 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015190:	6839      	ldr	r1, [r7, #0]
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f7ff fcf8 	bl	8014b88 <icmp_input>
        break;
 8015198:	e01c      	b.n	80151d4 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801519a:	4b1a      	ldr	r3, [pc, #104]	; (8015204 <ip4_input+0x22c>)
 801519c:	695b      	ldr	r3, [r3, #20]
 801519e:	6939      	ldr	r1, [r7, #16]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f000 f90b 	bl	80153bc <ip4_addr_isbroadcast_u32>
 80151a6:	4603      	mov	r3, r0
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d10f      	bne.n	80151cc <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151ac:	4b15      	ldr	r3, [pc, #84]	; (8015204 <ip4_input+0x22c>)
 80151ae:	695b      	ldr	r3, [r3, #20]
 80151b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151b4:	2be0      	cmp	r3, #224	; 0xe0
 80151b6:	d009      	beq.n	80151cc <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80151b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151bc:	4619      	mov	r1, r3
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f7f8 f879 	bl	800d2b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80151c4:	2102      	movs	r1, #2
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f7ff fde2 	bl	8014d90 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7f8 f885 	bl	800d2dc <pbuf_free>
        break;
 80151d2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80151d4:	4b0b      	ldr	r3, [pc, #44]	; (8015204 <ip4_input+0x22c>)
 80151d6:	2200      	movs	r2, #0
 80151d8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80151da:	4b0a      	ldr	r3, [pc, #40]	; (8015204 <ip4_input+0x22c>)
 80151dc:	2200      	movs	r2, #0
 80151de:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80151e0:	4b08      	ldr	r3, [pc, #32]	; (8015204 <ip4_input+0x22c>)
 80151e2:	2200      	movs	r2, #0
 80151e4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80151e6:	4b07      	ldr	r3, [pc, #28]	; (8015204 <ip4_input+0x22c>)
 80151e8:	2200      	movs	r2, #0
 80151ea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80151ec:	4b05      	ldr	r3, [pc, #20]	; (8015204 <ip4_input+0x22c>)
 80151ee:	2200      	movs	r2, #0
 80151f0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80151f2:	4b04      	ldr	r3, [pc, #16]	; (8015204 <ip4_input+0x22c>)
 80151f4:	2200      	movs	r2, #0
 80151f6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3718      	adds	r7, #24
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	20009abc 	.word	0x20009abc
 8015208:	20011b3c 	.word	0x20011b3c

0801520c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b08a      	sub	sp, #40	; 0x28
 8015210:	af04      	add	r7, sp, #16
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d009      	beq.n	8015238 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d003      	beq.n	8015232 <ip4_output_if+0x26>
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d102      	bne.n	8015238 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015234:	3304      	adds	r3, #4
 8015236:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015238:	78fa      	ldrb	r2, [r7, #3]
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	9302      	str	r3, [sp, #8]
 801523e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015242:	9301      	str	r3, [sp, #4]
 8015244:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015248:	9300      	str	r3, [sp, #0]
 801524a:	4613      	mov	r3, r2
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	6979      	ldr	r1, [r7, #20]
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f000 f805 	bl	8015260 <ip4_output_if_src>
 8015256:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015258:	4618      	mov	r0, r3
 801525a:	3718      	adds	r7, #24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b088      	sub	sp, #32
 8015264:	af00      	add	r7, sp, #0
 8015266:	60f8      	str	r0, [r7, #12]
 8015268:	60b9      	str	r1, [r7, #8]
 801526a:	607a      	str	r2, [r7, #4]
 801526c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	7b9b      	ldrb	r3, [r3, #14]
 8015272:	2b01      	cmp	r3, #1
 8015274:	d006      	beq.n	8015284 <ip4_output_if_src+0x24>
 8015276:	4b4b      	ldr	r3, [pc, #300]	; (80153a4 <ip4_output_if_src+0x144>)
 8015278:	f44f 7255 	mov.w	r2, #852	; 0x354
 801527c:	494a      	ldr	r1, [pc, #296]	; (80153a8 <ip4_output_if_src+0x148>)
 801527e:	484b      	ldr	r0, [pc, #300]	; (80153ac <ip4_output_if_src+0x14c>)
 8015280:	f001 fb9e 	bl	80169c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d060      	beq.n	801534c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801528a:	2314      	movs	r3, #20
 801528c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801528e:	2114      	movs	r1, #20
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f7f7 ff8d 	bl	800d1b0 <pbuf_add_header>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d002      	beq.n	80152a2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801529c:	f06f 0301 	mvn.w	r3, #1
 80152a0:	e07c      	b.n	801539c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	895b      	ldrh	r3, [r3, #10]
 80152ac:	2b13      	cmp	r3, #19
 80152ae:	d806      	bhi.n	80152be <ip4_output_if_src+0x5e>
 80152b0:	4b3c      	ldr	r3, [pc, #240]	; (80153a4 <ip4_output_if_src+0x144>)
 80152b2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80152b6:	493e      	ldr	r1, [pc, #248]	; (80153b0 <ip4_output_if_src+0x150>)
 80152b8:	483c      	ldr	r0, [pc, #240]	; (80153ac <ip4_output_if_src+0x14c>)
 80152ba:	f001 fb81 	bl	80169c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	78fa      	ldrb	r2, [r7, #3]
 80152c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80152ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	69fb      	ldr	r3, [r7, #28]
 80152d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80152d4:	8b7b      	ldrh	r3, [r7, #26]
 80152d6:	089b      	lsrs	r3, r3, #2
 80152d8:	b29b      	uxth	r3, r3
 80152da:	b2db      	uxtb	r3, r3
 80152dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152e0:	b2da      	uxtb	r2, r3
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80152e6:	69fb      	ldr	r3, [r7, #28]
 80152e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80152ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	891b      	ldrh	r3, [r3, #8]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7f6 faec 	bl	800b8d0 <lwip_htons>
 80152f8:	4603      	mov	r3, r0
 80152fa:	461a      	mov	r2, r3
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	2200      	movs	r2, #0
 8015304:	719a      	strb	r2, [r3, #6]
 8015306:	2200      	movs	r2, #0
 8015308:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801530a:	4b2a      	ldr	r3, [pc, #168]	; (80153b4 <ip4_output_if_src+0x154>)
 801530c:	881b      	ldrh	r3, [r3, #0]
 801530e:	4618      	mov	r0, r3
 8015310:	f7f6 fade 	bl	800b8d0 <lwip_htons>
 8015314:	4603      	mov	r3, r0
 8015316:	461a      	mov	r2, r3
 8015318:	69fb      	ldr	r3, [r7, #28]
 801531a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801531c:	4b25      	ldr	r3, [pc, #148]	; (80153b4 <ip4_output_if_src+0x154>)
 801531e:	881b      	ldrh	r3, [r3, #0]
 8015320:	3301      	adds	r3, #1
 8015322:	b29a      	uxth	r2, r3
 8015324:	4b23      	ldr	r3, [pc, #140]	; (80153b4 <ip4_output_if_src+0x154>)
 8015326:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d104      	bne.n	8015338 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801532e:	4b22      	ldr	r3, [pc, #136]	; (80153b8 <ip4_output_if_src+0x158>)
 8015330:	681a      	ldr	r2, [r3, #0]
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	60da      	str	r2, [r3, #12]
 8015336:	e003      	b.n	8015340 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	2200      	movs	r2, #0
 8015344:	729a      	strb	r2, [r3, #10]
 8015346:	2200      	movs	r2, #0
 8015348:	72da      	strb	r2, [r3, #11]
 801534a:	e00f      	b.n	801536c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	895b      	ldrh	r3, [r3, #10]
 8015350:	2b13      	cmp	r3, #19
 8015352:	d802      	bhi.n	801535a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015354:	f06f 0301 	mvn.w	r3, #1
 8015358:	e020      	b.n	801539c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	691b      	ldr	r3, [r3, #16]
 8015364:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015366:	f107 0314 	add.w	r3, r7, #20
 801536a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801536e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015370:	2b00      	cmp	r3, #0
 8015372:	d00c      	beq.n	801538e <ip4_output_if_src+0x12e>
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	891a      	ldrh	r2, [r3, #8]
 8015378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801537c:	429a      	cmp	r2, r3
 801537e:	d906      	bls.n	801538e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015380:	687a      	ldr	r2, [r7, #4]
 8015382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	f000 fd53 	bl	8015e30 <ip4_frag>
 801538a:	4603      	mov	r3, r0
 801538c:	e006      	b.n	801539c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015390:	695b      	ldr	r3, [r3, #20]
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	68f9      	ldr	r1, [r7, #12]
 8015396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015398:	4798      	blx	r3
 801539a:	4603      	mov	r3, r0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3720      	adds	r7, #32
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	0801c878 	.word	0x0801c878
 80153a8:	0801c8ac 	.word	0x0801c8ac
 80153ac:	0801c8b8 	.word	0x0801c8b8
 80153b0:	0801c8e0 	.word	0x0801c8e0
 80153b4:	20011c96 	.word	0x20011c96
 80153b8:	0801cd84 	.word	0x0801cd84

080153bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80153bc:	b480      	push	{r7}
 80153be:	b085      	sub	sp, #20
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153d0:	d002      	beq.n	80153d8 <ip4_addr_isbroadcast_u32+0x1c>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d101      	bne.n	80153dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80153d8:	2301      	movs	r3, #1
 80153da:	e02a      	b.n	8015432 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153e2:	f003 0302 	and.w	r3, r3, #2
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d101      	bne.n	80153ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80153ea:	2300      	movs	r3, #0
 80153ec:	e021      	b.n	8015432 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	3304      	adds	r3, #4
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d101      	bne.n	80153fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80153fa:	2300      	movs	r3, #0
 80153fc:	e019      	b.n	8015432 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80153fe:	68fa      	ldr	r2, [r7, #12]
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	3304      	adds	r3, #4
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	405a      	eors	r2, r3
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	3308      	adds	r3, #8
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4013      	ands	r3, r2
 8015410:	2b00      	cmp	r3, #0
 8015412:	d10d      	bne.n	8015430 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	3308      	adds	r3, #8
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	43da      	mvns	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	3308      	adds	r3, #8
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015428:	429a      	cmp	r2, r3
 801542a:	d101      	bne.n	8015430 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801542c:	2301      	movs	r3, #1
 801542e:	e000      	b.n	8015432 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015430:	2300      	movs	r3, #0
  }
}
 8015432:	4618      	mov	r0, r3
 8015434:	3714      	adds	r7, #20
 8015436:	46bd      	mov	sp, r7
 8015438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543c:	4770      	bx	lr
	...

08015440 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015446:	2300      	movs	r3, #0
 8015448:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801544a:	4b12      	ldr	r3, [pc, #72]	; (8015494 <ip_reass_tmr+0x54>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015450:	e018      	b.n	8015484 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	7fdb      	ldrb	r3, [r3, #31]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d00b      	beq.n	8015472 <ip_reass_tmr+0x32>
      r->timer--;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	7fdb      	ldrb	r3, [r3, #31]
 801545e:	3b01      	subs	r3, #1
 8015460:	b2da      	uxtb	r2, r3
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	60fb      	str	r3, [r7, #12]
 8015470:	e008      	b.n	8015484 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801547c:	68b9      	ldr	r1, [r7, #8]
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f000 f80a 	bl	8015498 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d1e3      	bne.n	8015452 <ip_reass_tmr+0x12>
    }
  }
}
 801548a:	bf00      	nop
 801548c:	bf00      	nop
 801548e:	3710      	adds	r7, #16
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	20011c98 	.word	0x20011c98

08015498 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b088      	sub	sp, #32
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80154a2:	2300      	movs	r3, #0
 80154a4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80154a6:	683a      	ldr	r2, [r7, #0]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d105      	bne.n	80154ba <ip_reass_free_complete_datagram+0x22>
 80154ae:	4b45      	ldr	r3, [pc, #276]	; (80155c4 <ip_reass_free_complete_datagram+0x12c>)
 80154b0:	22ab      	movs	r2, #171	; 0xab
 80154b2:	4945      	ldr	r1, [pc, #276]	; (80155c8 <ip_reass_free_complete_datagram+0x130>)
 80154b4:	4845      	ldr	r0, [pc, #276]	; (80155cc <ip_reass_free_complete_datagram+0x134>)
 80154b6:	f001 fa83 	bl	80169c0 <iprintf>
  if (prev != NULL) {
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d00a      	beq.n	80154d6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	687a      	ldr	r2, [r7, #4]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d005      	beq.n	80154d6 <ip_reass_free_complete_datagram+0x3e>
 80154ca:	4b3e      	ldr	r3, [pc, #248]	; (80155c4 <ip_reass_free_complete_datagram+0x12c>)
 80154cc:	22ad      	movs	r2, #173	; 0xad
 80154ce:	4940      	ldr	r1, [pc, #256]	; (80155d0 <ip_reass_free_complete_datagram+0x138>)
 80154d0:	483e      	ldr	r0, [pc, #248]	; (80155cc <ip_reass_free_complete_datagram+0x134>)
 80154d2:	f001 fa75 	bl	80169c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	685b      	ldr	r3, [r3, #4]
 80154dc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	889b      	ldrh	r3, [r3, #4]
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d12a      	bne.n	801553e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	685b      	ldr	r3, [r3, #4]
 80154ec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	681a      	ldr	r2, [r3, #0]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	6858      	ldr	r0, [r3, #4]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	3308      	adds	r3, #8
 80154fe:	2214      	movs	r2, #20
 8015500:	4619      	mov	r1, r3
 8015502:	f001 f998 	bl	8016836 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015506:	2101      	movs	r1, #1
 8015508:	69b8      	ldr	r0, [r7, #24]
 801550a:	f7ff fc51 	bl	8014db0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801550e:	69b8      	ldr	r0, [r7, #24]
 8015510:	f7f7 ff72 	bl	800d3f8 <pbuf_clen>
 8015514:	4603      	mov	r3, r0
 8015516:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015518:	8bfa      	ldrh	r2, [r7, #30]
 801551a:	8a7b      	ldrh	r3, [r7, #18]
 801551c:	4413      	add	r3, r2
 801551e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015522:	db05      	blt.n	8015530 <ip_reass_free_complete_datagram+0x98>
 8015524:	4b27      	ldr	r3, [pc, #156]	; (80155c4 <ip_reass_free_complete_datagram+0x12c>)
 8015526:	22bc      	movs	r2, #188	; 0xbc
 8015528:	492a      	ldr	r1, [pc, #168]	; (80155d4 <ip_reass_free_complete_datagram+0x13c>)
 801552a:	4828      	ldr	r0, [pc, #160]	; (80155cc <ip_reass_free_complete_datagram+0x134>)
 801552c:	f001 fa48 	bl	80169c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015530:	8bfa      	ldrh	r2, [r7, #30]
 8015532:	8a7b      	ldrh	r3, [r7, #18]
 8015534:	4413      	add	r3, r2
 8015536:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015538:	69b8      	ldr	r0, [r7, #24]
 801553a:	f7f7 fecf 	bl	800d2dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	685b      	ldr	r3, [r3, #4]
 8015542:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015544:	e01f      	b.n	8015586 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015546:	69bb      	ldr	r3, [r7, #24]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801554c:	69bb      	ldr	r3, [r7, #24]
 801554e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015556:	68f8      	ldr	r0, [r7, #12]
 8015558:	f7f7 ff4e 	bl	800d3f8 <pbuf_clen>
 801555c:	4603      	mov	r3, r0
 801555e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015560:	8bfa      	ldrh	r2, [r7, #30]
 8015562:	8a7b      	ldrh	r3, [r7, #18]
 8015564:	4413      	add	r3, r2
 8015566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801556a:	db05      	blt.n	8015578 <ip_reass_free_complete_datagram+0xe0>
 801556c:	4b15      	ldr	r3, [pc, #84]	; (80155c4 <ip_reass_free_complete_datagram+0x12c>)
 801556e:	22cc      	movs	r2, #204	; 0xcc
 8015570:	4918      	ldr	r1, [pc, #96]	; (80155d4 <ip_reass_free_complete_datagram+0x13c>)
 8015572:	4816      	ldr	r0, [pc, #88]	; (80155cc <ip_reass_free_complete_datagram+0x134>)
 8015574:	f001 fa24 	bl	80169c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015578:	8bfa      	ldrh	r2, [r7, #30]
 801557a:	8a7b      	ldrh	r3, [r7, #18]
 801557c:	4413      	add	r3, r2
 801557e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	f7f7 feab 	bl	800d2dc <pbuf_free>
  while (p != NULL) {
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d1dc      	bne.n	8015546 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801558c:	6839      	ldr	r1, [r7, #0]
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f000 f8c2 	bl	8015718 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015594:	4b10      	ldr	r3, [pc, #64]	; (80155d8 <ip_reass_free_complete_datagram+0x140>)
 8015596:	881b      	ldrh	r3, [r3, #0]
 8015598:	8bfa      	ldrh	r2, [r7, #30]
 801559a:	429a      	cmp	r2, r3
 801559c:	d905      	bls.n	80155aa <ip_reass_free_complete_datagram+0x112>
 801559e:	4b09      	ldr	r3, [pc, #36]	; (80155c4 <ip_reass_free_complete_datagram+0x12c>)
 80155a0:	22d2      	movs	r2, #210	; 0xd2
 80155a2:	490e      	ldr	r1, [pc, #56]	; (80155dc <ip_reass_free_complete_datagram+0x144>)
 80155a4:	4809      	ldr	r0, [pc, #36]	; (80155cc <ip_reass_free_complete_datagram+0x134>)
 80155a6:	f001 fa0b 	bl	80169c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80155aa:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <ip_reass_free_complete_datagram+0x140>)
 80155ac:	881a      	ldrh	r2, [r3, #0]
 80155ae:	8bfb      	ldrh	r3, [r7, #30]
 80155b0:	1ad3      	subs	r3, r2, r3
 80155b2:	b29a      	uxth	r2, r3
 80155b4:	4b08      	ldr	r3, [pc, #32]	; (80155d8 <ip_reass_free_complete_datagram+0x140>)
 80155b6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80155b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3720      	adds	r7, #32
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	0801c910 	.word	0x0801c910
 80155c8:	0801c94c 	.word	0x0801c94c
 80155cc:	0801c958 	.word	0x0801c958
 80155d0:	0801c980 	.word	0x0801c980
 80155d4:	0801c994 	.word	0x0801c994
 80155d8:	20011c9c 	.word	0x20011c9c
 80155dc:	0801c9b4 	.word	0x0801c9b4

080155e0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b08a      	sub	sp, #40	; 0x28
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80155ea:	2300      	movs	r3, #0
 80155ec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80155ee:	2300      	movs	r3, #0
 80155f0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80155f2:	2300      	movs	r3, #0
 80155f4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80155f6:	2300      	movs	r3, #0
 80155f8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80155fe:	4b28      	ldr	r3, [pc, #160]	; (80156a0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015604:	e030      	b.n	8015668 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	695a      	ldr	r2, [r3, #20]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	429a      	cmp	r2, r3
 8015610:	d10c      	bne.n	801562c <ip_reass_remove_oldest_datagram+0x4c>
 8015612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015614:	699a      	ldr	r2, [r3, #24]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	691b      	ldr	r3, [r3, #16]
 801561a:	429a      	cmp	r2, r3
 801561c:	d106      	bne.n	801562c <ip_reass_remove_oldest_datagram+0x4c>
 801561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015620:	899a      	ldrh	r2, [r3, #12]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	889b      	ldrh	r3, [r3, #4]
 8015626:	b29b      	uxth	r3, r3
 8015628:	429a      	cmp	r2, r3
 801562a:	d014      	beq.n	8015656 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801562c:	693b      	ldr	r3, [r7, #16]
 801562e:	3301      	adds	r3, #1
 8015630:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015632:	6a3b      	ldr	r3, [r7, #32]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d104      	bne.n	8015642 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	61bb      	str	r3, [r7, #24]
 8015640:	e009      	b.n	8015656 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015644:	7fda      	ldrb	r2, [r3, #31]
 8015646:	6a3b      	ldr	r3, [r7, #32]
 8015648:	7fdb      	ldrb	r3, [r3, #31]
 801564a:	429a      	cmp	r2, r3
 801564c:	d803      	bhi.n	8015656 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015650:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d001      	beq.n	8015662 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015660:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566a:	2b00      	cmp	r3, #0
 801566c:	d1cb      	bne.n	8015606 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801566e:	6a3b      	ldr	r3, [r7, #32]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d008      	beq.n	8015686 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015674:	69b9      	ldr	r1, [r7, #24]
 8015676:	6a38      	ldr	r0, [r7, #32]
 8015678:	f7ff ff0e 	bl	8015498 <ip_reass_free_complete_datagram>
 801567c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801567e:	697a      	ldr	r2, [r7, #20]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	4413      	add	r3, r2
 8015684:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015686:	697a      	ldr	r2, [r7, #20]
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	429a      	cmp	r2, r3
 801568c:	da02      	bge.n	8015694 <ip_reass_remove_oldest_datagram+0xb4>
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	2b01      	cmp	r3, #1
 8015692:	dcac      	bgt.n	80155ee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015694:	697b      	ldr	r3, [r7, #20]
}
 8015696:	4618      	mov	r0, r3
 8015698:	3728      	adds	r7, #40	; 0x28
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	20011c98 	.word	0x20011c98

080156a4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80156ae:	2003      	movs	r0, #3
 80156b0:	f7f6 fefe 	bl	800c4b0 <memp_malloc>
 80156b4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d110      	bne.n	80156de <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80156bc:	6839      	ldr	r1, [r7, #0]
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f7ff ff8e 	bl	80155e0 <ip_reass_remove_oldest_datagram>
 80156c4:	4602      	mov	r2, r0
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	4293      	cmp	r3, r2
 80156ca:	dc03      	bgt.n	80156d4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80156cc:	2003      	movs	r0, #3
 80156ce:	f7f6 feef 	bl	800c4b0 <memp_malloc>
 80156d2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d101      	bne.n	80156de <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80156da:	2300      	movs	r3, #0
 80156dc:	e016      	b.n	801570c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80156de:	2220      	movs	r2, #32
 80156e0:	2100      	movs	r1, #0
 80156e2:	68f8      	ldr	r0, [r7, #12]
 80156e4:	f001 f8cf 	bl	8016886 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	220f      	movs	r2, #15
 80156ec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80156ee:	4b09      	ldr	r3, [pc, #36]	; (8015714 <ip_reass_enqueue_new_datagram+0x70>)
 80156f0:	681a      	ldr	r2, [r3, #0]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80156f6:	4a07      	ldr	r2, [pc, #28]	; (8015714 <ip_reass_enqueue_new_datagram+0x70>)
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	3308      	adds	r3, #8
 8015700:	2214      	movs	r2, #20
 8015702:	6879      	ldr	r1, [r7, #4]
 8015704:	4618      	mov	r0, r3
 8015706:	f001 f896 	bl	8016836 <memcpy>
  return ipr;
 801570a:	68fb      	ldr	r3, [r7, #12]
}
 801570c:	4618      	mov	r0, r3
 801570e:	3710      	adds	r7, #16
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	20011c98 	.word	0x20011c98

08015718 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015722:	4b10      	ldr	r3, [pc, #64]	; (8015764 <ip_reass_dequeue_datagram+0x4c>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	687a      	ldr	r2, [r7, #4]
 8015728:	429a      	cmp	r2, r3
 801572a:	d104      	bne.n	8015736 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	4a0c      	ldr	r2, [pc, #48]	; (8015764 <ip_reass_dequeue_datagram+0x4c>)
 8015732:	6013      	str	r3, [r2, #0]
 8015734:	e00d      	b.n	8015752 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d106      	bne.n	801574a <ip_reass_dequeue_datagram+0x32>
 801573c:	4b0a      	ldr	r3, [pc, #40]	; (8015768 <ip_reass_dequeue_datagram+0x50>)
 801573e:	f240 1245 	movw	r2, #325	; 0x145
 8015742:	490a      	ldr	r1, [pc, #40]	; (801576c <ip_reass_dequeue_datagram+0x54>)
 8015744:	480a      	ldr	r0, [pc, #40]	; (8015770 <ip_reass_dequeue_datagram+0x58>)
 8015746:	f001 f93b 	bl	80169c0 <iprintf>
    prev->next = ipr->next;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681a      	ldr	r2, [r3, #0]
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015752:	6879      	ldr	r1, [r7, #4]
 8015754:	2003      	movs	r0, #3
 8015756:	f7f6 ff21 	bl	800c59c <memp_free>
}
 801575a:	bf00      	nop
 801575c:	3708      	adds	r7, #8
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}
 8015762:	bf00      	nop
 8015764:	20011c98 	.word	0x20011c98
 8015768:	0801c910 	.word	0x0801c910
 801576c:	0801c9d8 	.word	0x0801c9d8
 8015770:	0801c958 	.word	0x0801c958

08015774 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b08c      	sub	sp, #48	; 0x30
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015780:	2300      	movs	r3, #0
 8015782:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015784:	2301      	movs	r3, #1
 8015786:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801578e:	69fb      	ldr	r3, [r7, #28]
 8015790:	885b      	ldrh	r3, [r3, #2]
 8015792:	b29b      	uxth	r3, r3
 8015794:	4618      	mov	r0, r3
 8015796:	f7f6 f89b 	bl	800b8d0 <lwip_htons>
 801579a:	4603      	mov	r3, r0
 801579c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	f003 030f 	and.w	r3, r3, #15
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80157ac:	7e7b      	ldrb	r3, [r7, #25]
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	8b7a      	ldrh	r2, [r7, #26]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d202      	bcs.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157ba:	e135      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80157bc:	7e7b      	ldrb	r3, [r7, #25]
 80157be:	b29b      	uxth	r3, r3
 80157c0:	8b7a      	ldrh	r2, [r7, #26]
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	88db      	ldrh	r3, [r3, #6]
 80157ca:	b29b      	uxth	r3, r3
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7f6 f87f 	bl	800b8d0 <lwip_htons>
 80157d2:	4603      	mov	r3, r0
 80157d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157d8:	b29b      	uxth	r3, r3
 80157da:	00db      	lsls	r3, r3, #3
 80157dc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80157e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e6:	2200      	movs	r2, #0
 80157e8:	701a      	strb	r2, [r3, #0]
 80157ea:	2200      	movs	r2, #0
 80157ec:	705a      	strb	r2, [r3, #1]
 80157ee:	2200      	movs	r2, #0
 80157f0:	709a      	strb	r2, [r3, #2]
 80157f2:	2200      	movs	r2, #0
 80157f4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80157f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f8:	8afa      	ldrh	r2, [r7, #22]
 80157fa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80157fc:	8afa      	ldrh	r2, [r7, #22]
 80157fe:	8b7b      	ldrh	r3, [r7, #26]
 8015800:	4413      	add	r3, r2
 8015802:	b29a      	uxth	r2, r3
 8015804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015806:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580a:	88db      	ldrh	r3, [r3, #6]
 801580c:	b29b      	uxth	r3, r3
 801580e:	8afa      	ldrh	r2, [r7, #22]
 8015810:	429a      	cmp	r2, r3
 8015812:	d902      	bls.n	801581a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015818:	e106      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	627b      	str	r3, [r7, #36]	; 0x24
 8015820:	e068      	b.n	80158f4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582a:	889b      	ldrh	r3, [r3, #4]
 801582c:	b29a      	uxth	r2, r3
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	889b      	ldrh	r3, [r3, #4]
 8015832:	b29b      	uxth	r3, r3
 8015834:	429a      	cmp	r2, r3
 8015836:	d235      	bcs.n	80158a4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801583c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015840:	2b00      	cmp	r3, #0
 8015842:	d020      	beq.n	8015886 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015846:	889b      	ldrh	r3, [r3, #4]
 8015848:	b29a      	uxth	r2, r3
 801584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584c:	88db      	ldrh	r3, [r3, #6]
 801584e:	b29b      	uxth	r3, r3
 8015850:	429a      	cmp	r2, r3
 8015852:	d307      	bcc.n	8015864 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015856:	88db      	ldrh	r3, [r3, #6]
 8015858:	b29a      	uxth	r2, r3
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	889b      	ldrh	r3, [r3, #4]
 801585e:	b29b      	uxth	r3, r3
 8015860:	429a      	cmp	r2, r3
 8015862:	d902      	bls.n	801586a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015868:	e0de      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586c:	68ba      	ldr	r2, [r7, #8]
 801586e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	88db      	ldrh	r3, [r3, #6]
 8015874:	b29a      	uxth	r2, r3
 8015876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015878:	889b      	ldrh	r3, [r3, #4]
 801587a:	b29b      	uxth	r3, r3
 801587c:	429a      	cmp	r2, r3
 801587e:	d03d      	beq.n	80158fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015880:	2300      	movs	r3, #0
 8015882:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015884:	e03a      	b.n	80158fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015888:	88db      	ldrh	r3, [r3, #6]
 801588a:	b29a      	uxth	r2, r3
 801588c:	693b      	ldr	r3, [r7, #16]
 801588e:	889b      	ldrh	r3, [r3, #4]
 8015890:	b29b      	uxth	r3, r3
 8015892:	429a      	cmp	r2, r3
 8015894:	d902      	bls.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801589a:	e0c5      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	68ba      	ldr	r2, [r7, #8]
 80158a0:	605a      	str	r2, [r3, #4]
      break;
 80158a2:	e02b      	b.n	80158fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80158a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a6:	889b      	ldrh	r3, [r3, #4]
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	889b      	ldrh	r3, [r3, #4]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d102      	bne.n	80158ba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158b8:	e0b6      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80158ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158bc:	889b      	ldrh	r3, [r3, #4]
 80158be:	b29a      	uxth	r2, r3
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	88db      	ldrh	r3, [r3, #6]
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	429a      	cmp	r2, r3
 80158c8:	d202      	bcs.n	80158d0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158ce:	e0ab      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80158d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d009      	beq.n	80158ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80158d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d8:	88db      	ldrh	r3, [r3, #6]
 80158da:	b29a      	uxth	r2, r3
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	889b      	ldrh	r3, [r3, #4]
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d001      	beq.n	80158ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80158e6:	2300      	movs	r3, #0
 80158e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80158f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d193      	bne.n	8015822 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80158fa:	e000      	b.n	80158fe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80158fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80158fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015900:	2b00      	cmp	r3, #0
 8015902:	d12d      	bne.n	8015960 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015906:	2b00      	cmp	r3, #0
 8015908:	d01c      	beq.n	8015944 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590c:	88db      	ldrh	r3, [r3, #6]
 801590e:	b29a      	uxth	r2, r3
 8015910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015912:	889b      	ldrh	r3, [r3, #4]
 8015914:	b29b      	uxth	r3, r3
 8015916:	429a      	cmp	r2, r3
 8015918:	d906      	bls.n	8015928 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801591a:	4b45      	ldr	r3, [pc, #276]	; (8015a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801591c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015920:	4944      	ldr	r1, [pc, #272]	; (8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015922:	4845      	ldr	r0, [pc, #276]	; (8015a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015924:	f001 f84c 	bl	80169c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801592a:	68ba      	ldr	r2, [r7, #8]
 801592c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015930:	88db      	ldrh	r3, [r3, #6]
 8015932:	b29a      	uxth	r2, r3
 8015934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015936:	889b      	ldrh	r3, [r3, #4]
 8015938:	b29b      	uxth	r3, r3
 801593a:	429a      	cmp	r2, r3
 801593c:	d010      	beq.n	8015960 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801593e:	2300      	movs	r3, #0
 8015940:	623b      	str	r3, [r7, #32]
 8015942:	e00d      	b.n	8015960 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d006      	beq.n	801595a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801594c:	4b38      	ldr	r3, [pc, #224]	; (8015a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801594e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015952:	493a      	ldr	r1, [pc, #232]	; (8015a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015954:	4838      	ldr	r0, [pc, #224]	; (8015a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015956:	f001 f833 	bl	80169c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	68ba      	ldr	r2, [r7, #8]
 801595e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d105      	bne.n	8015972 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	7f9b      	ldrb	r3, [r3, #30]
 801596a:	f003 0301 	and.w	r3, r3, #1
 801596e:	2b00      	cmp	r3, #0
 8015970:	d059      	beq.n	8015a26 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015972:	6a3b      	ldr	r3, [r7, #32]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d04f      	beq.n	8015a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d006      	beq.n	801598e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	685b      	ldr	r3, [r3, #4]
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	889b      	ldrh	r3, [r3, #4]
 8015988:	b29b      	uxth	r3, r3
 801598a:	2b00      	cmp	r3, #0
 801598c:	d002      	beq.n	8015994 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801598e:	2300      	movs	r3, #0
 8015990:	623b      	str	r3, [r7, #32]
 8015992:	e041      	b.n	8015a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015996:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801599e:	e012      	b.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80159a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80159a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a8:	88db      	ldrh	r3, [r3, #6]
 80159aa:	b29a      	uxth	r2, r3
 80159ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ae:	889b      	ldrh	r3, [r3, #4]
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d002      	beq.n	80159bc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	623b      	str	r3, [r7, #32]
            break;
 80159ba:	e007      	b.n	80159cc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80159bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159be:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80159c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d1e9      	bne.n	80159a0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80159cc:	6a3b      	ldr	r3, [r7, #32]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d022      	beq.n	8015a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d106      	bne.n	80159e8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80159da:	4b15      	ldr	r3, [pc, #84]	; (8015a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159dc:	f240 12df 	movw	r2, #479	; 0x1df
 80159e0:	4917      	ldr	r1, [pc, #92]	; (8015a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80159e2:	4815      	ldr	r0, [pc, #84]	; (8015a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159e4:	f000 ffec 	bl	80169c0 <iprintf>
          LWIP_ASSERT("sanity check",
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d106      	bne.n	8015a02 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80159f4:	4b0e      	ldr	r3, [pc, #56]	; (8015a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80159fa:	4911      	ldr	r1, [pc, #68]	; (8015a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80159fc:	480e      	ldr	r0, [pc, #56]	; (8015a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159fe:	f000 ffdf 	bl	80169c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d006      	beq.n	8015a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015a0a:	4b09      	ldr	r3, [pc, #36]	; (8015a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a0c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015a10:	490c      	ldr	r1, [pc, #48]	; (8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a12:	4809      	ldr	r0, [pc, #36]	; (8015a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a14:	f000 ffd4 	bl	80169c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015a18:	6a3b      	ldr	r3, [r7, #32]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	bf14      	ite	ne
 8015a1e:	2301      	movne	r3, #1
 8015a20:	2300      	moveq	r3, #0
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	e000      	b.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015a26:	2300      	movs	r3, #0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3730      	adds	r7, #48	; 0x30
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	0801c910 	.word	0x0801c910
 8015a34:	0801c9f4 	.word	0x0801c9f4
 8015a38:	0801c958 	.word	0x0801c958
 8015a3c:	0801ca14 	.word	0x0801ca14
 8015a40:	0801ca4c 	.word	0x0801ca4c
 8015a44:	0801ca5c 	.word	0x0801ca5c

08015a48 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b08e      	sub	sp, #56	; 0x38
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	f003 030f 	and.w	r3, r3, #15
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	009b      	lsls	r3, r3, #2
 8015a62:	b2db      	uxtb	r3, r3
 8015a64:	2b14      	cmp	r3, #20
 8015a66:	f040 8171 	bne.w	8015d4c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a6c:	88db      	ldrh	r3, [r3, #6]
 8015a6e:	b29b      	uxth	r3, r3
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f5 ff2d 	bl	800b8d0 <lwip_htons>
 8015a76:	4603      	mov	r3, r0
 8015a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	00db      	lsls	r3, r3, #3
 8015a80:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	885b      	ldrh	r3, [r3, #2]
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7f5 ff21 	bl	800b8d0 <lwip_htons>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	f003 030f 	and.w	r3, r3, #15
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	009b      	lsls	r3, r3, #2
 8015a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	f0c0 8150 	bcc.w	8015d50 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ab8:	1ad3      	subs	r3, r2, r3
 8015aba:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f7f7 fc9b 	bl	800d3f8 <pbuf_clen>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015ac6:	4b8c      	ldr	r3, [pc, #560]	; (8015cf8 <ip4_reass+0x2b0>)
 8015ac8:	881b      	ldrh	r3, [r3, #0]
 8015aca:	461a      	mov	r2, r3
 8015acc:	8c3b      	ldrh	r3, [r7, #32]
 8015ace:	4413      	add	r3, r2
 8015ad0:	2b0a      	cmp	r3, #10
 8015ad2:	dd10      	ble.n	8015af6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ad4:	8c3b      	ldrh	r3, [r7, #32]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ada:	f7ff fd81 	bl	80155e0 <ip_reass_remove_oldest_datagram>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	f000 8137 	beq.w	8015d54 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015ae6:	4b84      	ldr	r3, [pc, #528]	; (8015cf8 <ip4_reass+0x2b0>)
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	461a      	mov	r2, r3
 8015aec:	8c3b      	ldrh	r3, [r7, #32]
 8015aee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015af0:	2b0a      	cmp	r3, #10
 8015af2:	f300 812f 	bgt.w	8015d54 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015af6:	4b81      	ldr	r3, [pc, #516]	; (8015cfc <ip4_reass+0x2b4>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	633b      	str	r3, [r7, #48]	; 0x30
 8015afc:	e015      	b.n	8015b2a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b00:	695a      	ldr	r2, [r3, #20]
 8015b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d10c      	bne.n	8015b24 <ip4_reass+0xdc>
 8015b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b0c:	699a      	ldr	r2, [r3, #24]
 8015b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b10:	691b      	ldr	r3, [r3, #16]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d106      	bne.n	8015b24 <ip4_reass+0xdc>
 8015b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b18:	899a      	ldrh	r2, [r3, #12]
 8015b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b1c:	889b      	ldrh	r3, [r3, #4]
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d006      	beq.n	8015b32 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	633b      	str	r3, [r7, #48]	; 0x30
 8015b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d1e6      	bne.n	8015afe <ip4_reass+0xb6>
 8015b30:	e000      	b.n	8015b34 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015b32:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d109      	bne.n	8015b4e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015b3a:	8c3b      	ldrh	r3, [r7, #32]
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b40:	f7ff fdb0 	bl	80156a4 <ip_reass_enqueue_new_datagram>
 8015b44:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d11c      	bne.n	8015b86 <ip4_reass+0x13e>
      goto nullreturn;
 8015b4c:	e105      	b.n	8015d5a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b50:	88db      	ldrh	r3, [r3, #6]
 8015b52:	b29b      	uxth	r3, r3
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7f5 febb 	bl	800b8d0 <lwip_htons>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d110      	bne.n	8015b86 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b66:	89db      	ldrh	r3, [r3, #14]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7f5 feb1 	bl	800b8d0 <lwip_htons>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d006      	beq.n	8015b86 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7a:	3308      	adds	r3, #8
 8015b7c:	2214      	movs	r2, #20
 8015b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b80:	4618      	mov	r0, r3
 8015b82:	f000 fe58 	bl	8016836 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b88:	88db      	ldrh	r3, [r3, #6]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	f003 0320 	and.w	r3, r3, #32
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	bf0c      	ite	eq
 8015b94:	2301      	moveq	r3, #1
 8015b96:	2300      	movne	r3, #0
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d00e      	beq.n	8015bc0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ba2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ba6:	4413      	add	r3, r2
 8015ba8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015baa:	8b7a      	ldrh	r2, [r7, #26]
 8015bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	f0c0 80a0 	bcc.w	8015cf4 <ip4_reass+0x2ac>
 8015bb4:	8b7b      	ldrh	r3, [r7, #26]
 8015bb6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015bba:	4293      	cmp	r3, r2
 8015bbc:	f200 809a 	bhi.w	8015cf4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015bc0:	69fa      	ldr	r2, [r7, #28]
 8015bc2:	6879      	ldr	r1, [r7, #4]
 8015bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bc6:	f7ff fdd5 	bl	8015774 <ip_reass_chain_frag_into_datagram_and_validate>
 8015bca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015bd2:	f000 809b 	beq.w	8015d0c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015bd6:	4b48      	ldr	r3, [pc, #288]	; (8015cf8 <ip4_reass+0x2b0>)
 8015bd8:	881a      	ldrh	r2, [r3, #0]
 8015bda:	8c3b      	ldrh	r3, [r7, #32]
 8015bdc:	4413      	add	r3, r2
 8015bde:	b29a      	uxth	r2, r3
 8015be0:	4b45      	ldr	r3, [pc, #276]	; (8015cf8 <ip4_reass+0x2b0>)
 8015be2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015be4:	69fb      	ldr	r3, [r7, #28]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d00d      	beq.n	8015c06 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015bea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bee:	4413      	add	r3, r2
 8015bf0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf4:	8a7a      	ldrh	r2, [r7, #18]
 8015bf6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfa:	7f9b      	ldrb	r3, [r3, #30]
 8015bfc:	f043 0301 	orr.w	r3, r3, #1
 8015c00:	b2da      	uxtb	r2, r3
 8015c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c04:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	2b01      	cmp	r3, #1
 8015c0a:	d171      	bne.n	8015cf0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c0e:	8b9b      	ldrh	r3, [r3, #28]
 8015c10:	3314      	adds	r3, #20
 8015c12:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c28:	3308      	adds	r3, #8
 8015c2a:	2214      	movs	r2, #20
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c30:	f000 fe01 	bl	8016836 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015c34:	8a3b      	ldrh	r3, [r7, #16]
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7f5 fe4a 	bl	800b8d0 <lwip_htons>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	461a      	mov	r2, r3
 8015c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c42:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c46:	2200      	movs	r2, #0
 8015c48:	719a      	strb	r2, [r3, #6]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c50:	2200      	movs	r2, #0
 8015c52:	729a      	strb	r2, [r3, #10]
 8015c54:	2200      	movs	r2, #0
 8015c56:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015c5e:	e00d      	b.n	8015c7c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c62:	685b      	ldr	r3, [r3, #4]
 8015c64:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015c66:	2114      	movs	r1, #20
 8015c68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015c6a:	f7f7 fab1 	bl	800d1d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015c6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7f7 fc01 	bl	800d478 <pbuf_cat>
      r = iprh->next_pbuf;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d1ee      	bne.n	8015c60 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015c82:	4b1e      	ldr	r3, [pc, #120]	; (8015cfc <ip4_reass+0x2b4>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d102      	bne.n	8015c92 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c90:	e010      	b.n	8015cb4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015c92:	4b1a      	ldr	r3, [pc, #104]	; (8015cfc <ip4_reass+0x2b4>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c98:	e007      	b.n	8015caa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d006      	beq.n	8015cb2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d1f4      	bne.n	8015c9a <ip4_reass+0x252>
 8015cb0:	e000      	b.n	8015cb4 <ip4_reass+0x26c>
          break;
 8015cb2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cb8:	f7ff fd2e 	bl	8015718 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f7f7 fb9b 	bl	800d3f8 <pbuf_clen>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015cc6:	4b0c      	ldr	r3, [pc, #48]	; (8015cf8 <ip4_reass+0x2b0>)
 8015cc8:	881b      	ldrh	r3, [r3, #0]
 8015cca:	8c3a      	ldrh	r2, [r7, #32]
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d906      	bls.n	8015cde <ip4_reass+0x296>
 8015cd0:	4b0b      	ldr	r3, [pc, #44]	; (8015d00 <ip4_reass+0x2b8>)
 8015cd2:	f240 229b 	movw	r2, #667	; 0x29b
 8015cd6:	490b      	ldr	r1, [pc, #44]	; (8015d04 <ip4_reass+0x2bc>)
 8015cd8:	480b      	ldr	r0, [pc, #44]	; (8015d08 <ip4_reass+0x2c0>)
 8015cda:	f000 fe71 	bl	80169c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015cde:	4b06      	ldr	r3, [pc, #24]	; (8015cf8 <ip4_reass+0x2b0>)
 8015ce0:	881a      	ldrh	r2, [r3, #0]
 8015ce2:	8c3b      	ldrh	r3, [r7, #32]
 8015ce4:	1ad3      	subs	r3, r2, r3
 8015ce6:	b29a      	uxth	r2, r3
 8015ce8:	4b03      	ldr	r3, [pc, #12]	; (8015cf8 <ip4_reass+0x2b0>)
 8015cea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	e038      	b.n	8015d62 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	e036      	b.n	8015d62 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015cf4:	bf00      	nop
 8015cf6:	e00a      	b.n	8015d0e <ip4_reass+0x2c6>
 8015cf8:	20011c9c 	.word	0x20011c9c
 8015cfc:	20011c98 	.word	0x20011c98
 8015d00:	0801c910 	.word	0x0801c910
 8015d04:	0801ca80 	.word	0x0801ca80
 8015d08:	0801c958 	.word	0x0801c958
    goto nullreturn_ipr;
 8015d0c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d106      	bne.n	8015d22 <ip4_reass+0x2da>
 8015d14:	4b15      	ldr	r3, [pc, #84]	; (8015d6c <ip4_reass+0x324>)
 8015d16:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015d1a:	4915      	ldr	r1, [pc, #84]	; (8015d70 <ip4_reass+0x328>)
 8015d1c:	4815      	ldr	r0, [pc, #84]	; (8015d74 <ip4_reass+0x32c>)
 8015d1e:	f000 fe4f 	bl	80169c0 <iprintf>
  if (ipr->p == NULL) {
 8015d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d116      	bne.n	8015d58 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015d2a:	4b13      	ldr	r3, [pc, #76]	; (8015d78 <ip4_reass+0x330>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d006      	beq.n	8015d42 <ip4_reass+0x2fa>
 8015d34:	4b0d      	ldr	r3, [pc, #52]	; (8015d6c <ip4_reass+0x324>)
 8015d36:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015d3a:	4910      	ldr	r1, [pc, #64]	; (8015d7c <ip4_reass+0x334>)
 8015d3c:	480d      	ldr	r0, [pc, #52]	; (8015d74 <ip4_reass+0x32c>)
 8015d3e:	f000 fe3f 	bl	80169c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015d42:	2100      	movs	r1, #0
 8015d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d46:	f7ff fce7 	bl	8015718 <ip_reass_dequeue_datagram>
 8015d4a:	e006      	b.n	8015d5a <ip4_reass+0x312>
    goto nullreturn;
 8015d4c:	bf00      	nop
 8015d4e:	e004      	b.n	8015d5a <ip4_reass+0x312>
    goto nullreturn;
 8015d50:	bf00      	nop
 8015d52:	e002      	b.n	8015d5a <ip4_reass+0x312>
      goto nullreturn;
 8015d54:	bf00      	nop
 8015d56:	e000      	b.n	8015d5a <ip4_reass+0x312>
  }

nullreturn:
 8015d58:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f7f7 fabe 	bl	800d2dc <pbuf_free>
  return NULL;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3738      	adds	r7, #56	; 0x38
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	0801c910 	.word	0x0801c910
 8015d70:	0801ca9c 	.word	0x0801ca9c
 8015d74:	0801c958 	.word	0x0801c958
 8015d78:	20011c98 	.word	0x20011c98
 8015d7c:	0801caa8 	.word	0x0801caa8

08015d80 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015d84:	2004      	movs	r0, #4
 8015d86:	f7f6 fb93 	bl	800c4b0 <memp_malloc>
 8015d8a:	4603      	mov	r3, r0
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d106      	bne.n	8015dac <ip_frag_free_pbuf_custom_ref+0x1c>
 8015d9e:	4b07      	ldr	r3, [pc, #28]	; (8015dbc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015da0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015da4:	4906      	ldr	r1, [pc, #24]	; (8015dc0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015da6:	4807      	ldr	r0, [pc, #28]	; (8015dc4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015da8:	f000 fe0a 	bl	80169c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015dac:	6879      	ldr	r1, [r7, #4]
 8015dae:	2004      	movs	r0, #4
 8015db0:	f7f6 fbf4 	bl	800c59c <memp_free>
}
 8015db4:	bf00      	nop
 8015db6:	3708      	adds	r7, #8
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}
 8015dbc:	0801c910 	.word	0x0801c910
 8015dc0:	0801cac8 	.word	0x0801cac8
 8015dc4:	0801c958 	.word	0x0801c958

08015dc8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d106      	bne.n	8015de8 <ipfrag_free_pbuf_custom+0x20>
 8015dda:	4b11      	ldr	r3, [pc, #68]	; (8015e20 <ipfrag_free_pbuf_custom+0x58>)
 8015ddc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015de0:	4910      	ldr	r1, [pc, #64]	; (8015e24 <ipfrag_free_pbuf_custom+0x5c>)
 8015de2:	4811      	ldr	r0, [pc, #68]	; (8015e28 <ipfrag_free_pbuf_custom+0x60>)
 8015de4:	f000 fdec 	bl	80169c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015de8:	68fa      	ldr	r2, [r7, #12]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d006      	beq.n	8015dfe <ipfrag_free_pbuf_custom+0x36>
 8015df0:	4b0b      	ldr	r3, [pc, #44]	; (8015e20 <ipfrag_free_pbuf_custom+0x58>)
 8015df2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015df6:	490d      	ldr	r1, [pc, #52]	; (8015e2c <ipfrag_free_pbuf_custom+0x64>)
 8015df8:	480b      	ldr	r0, [pc, #44]	; (8015e28 <ipfrag_free_pbuf_custom+0x60>)
 8015dfa:	f000 fde1 	bl	80169c0 <iprintf>
  if (pcr->original != NULL) {
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	695b      	ldr	r3, [r3, #20]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d004      	beq.n	8015e10 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	695b      	ldr	r3, [r3, #20]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7f7 fa66 	bl	800d2dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f7ff ffbd 	bl	8015d90 <ip_frag_free_pbuf_custom_ref>
}
 8015e16:	bf00      	nop
 8015e18:	3710      	adds	r7, #16
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop
 8015e20:	0801c910 	.word	0x0801c910
 8015e24:	0801cad4 	.word	0x0801cad4
 8015e28:	0801c958 	.word	0x0801c958
 8015e2c:	0801cae0 	.word	0x0801cae0

08015e30 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b094      	sub	sp, #80	; 0x50
 8015e34:	af02      	add	r7, sp, #8
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015e46:	3b14      	subs	r3, #20
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	da00      	bge.n	8015e4e <ip4_frag+0x1e>
 8015e4c:	3307      	adds	r3, #7
 8015e4e:	10db      	asrs	r3, r3, #3
 8015e50:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015e52:	2314      	movs	r3, #20
 8015e54:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e62:	781b      	ldrb	r3, [r3, #0]
 8015e64:	f003 030f 	and.w	r3, r3, #15
 8015e68:	b2db      	uxtb	r3, r3
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	2b14      	cmp	r3, #20
 8015e70:	d002      	beq.n	8015e78 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015e72:	f06f 0305 	mvn.w	r3, #5
 8015e76:	e110      	b.n	801609a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	895b      	ldrh	r3, [r3, #10]
 8015e7c:	2b13      	cmp	r3, #19
 8015e7e:	d809      	bhi.n	8015e94 <ip4_frag+0x64>
 8015e80:	4b88      	ldr	r3, [pc, #544]	; (80160a4 <ip4_frag+0x274>)
 8015e82:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015e86:	4988      	ldr	r1, [pc, #544]	; (80160a8 <ip4_frag+0x278>)
 8015e88:	4888      	ldr	r0, [pc, #544]	; (80160ac <ip4_frag+0x27c>)
 8015e8a:	f000 fd99 	bl	80169c0 <iprintf>
 8015e8e:	f06f 0305 	mvn.w	r3, #5
 8015e92:	e102      	b.n	801609a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e96:	88db      	ldrh	r3, [r3, #6]
 8015e98:	b29b      	uxth	r3, r3
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7f5 fd18 	bl	800b8d0 <lwip_htons>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015ea4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ea6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015eae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	891b      	ldrh	r3, [r3, #8]
 8015eba:	3b14      	subs	r3, #20
 8015ebc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015ec0:	e0e1      	b.n	8016086 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015ec2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ec4:	00db      	lsls	r3, r3, #3
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	bf28      	it	cs
 8015ed0:	4613      	movcs	r3, r2
 8015ed2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015ed4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ed8:	2114      	movs	r1, #20
 8015eda:	200e      	movs	r0, #14
 8015edc:	f7f6 ff1a 	bl	800cd14 <pbuf_alloc>
 8015ee0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f000 80d5 	beq.w	8016094 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eec:	895b      	ldrh	r3, [r3, #10]
 8015eee:	2b13      	cmp	r3, #19
 8015ef0:	d806      	bhi.n	8015f00 <ip4_frag+0xd0>
 8015ef2:	4b6c      	ldr	r3, [pc, #432]	; (80160a4 <ip4_frag+0x274>)
 8015ef4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015ef8:	496d      	ldr	r1, [pc, #436]	; (80160b0 <ip4_frag+0x280>)
 8015efa:	486c      	ldr	r0, [pc, #432]	; (80160ac <ip4_frag+0x27c>)
 8015efc:	f000 fd60 	bl	80169c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	2214      	movs	r2, #20
 8015f06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f000 fc94 	bl	8016836 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015f1a:	e064      	b.n	8015fe6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	895a      	ldrh	r2, [r3, #10]
 8015f20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f22:	1ad3      	subs	r3, r2, r3
 8015f24:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	895b      	ldrh	r3, [r3, #10]
 8015f2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d906      	bls.n	8015f3e <ip4_frag+0x10e>
 8015f30:	4b5c      	ldr	r3, [pc, #368]	; (80160a4 <ip4_frag+0x274>)
 8015f32:	f240 322d 	movw	r2, #813	; 0x32d
 8015f36:	495f      	ldr	r1, [pc, #380]	; (80160b4 <ip4_frag+0x284>)
 8015f38:	485c      	ldr	r0, [pc, #368]	; (80160ac <ip4_frag+0x27c>)
 8015f3a:	f000 fd41 	bl	80169c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015f3e:	8bfa      	ldrh	r2, [r7, #30]
 8015f40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f44:	4293      	cmp	r3, r2
 8015f46:	bf28      	it	cs
 8015f48:	4613      	movcs	r3, r2
 8015f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015f4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d105      	bne.n	8015f62 <ip4_frag+0x132>
        poff = 0;
 8015f56:	2300      	movs	r3, #0
 8015f58:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	60fb      	str	r3, [r7, #12]
        continue;
 8015f60:	e041      	b.n	8015fe6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015f62:	f7ff ff0d 	bl	8015d80 <ip_frag_alloc_pbuf_custom_ref>
 8015f66:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015f68:	69bb      	ldr	r3, [r7, #24]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d103      	bne.n	8015f76 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f70:	f7f7 f9b4 	bl	800d2dc <pbuf_free>
        goto memerr;
 8015f74:	e08f      	b.n	8016096 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f76:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f7e:	4413      	add	r3, r2
 8015f80:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015f84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015f88:	9201      	str	r2, [sp, #4]
 8015f8a:	9300      	str	r3, [sp, #0]
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2241      	movs	r2, #65	; 0x41
 8015f90:	2000      	movs	r0, #0
 8015f92:	f7f6 ffe9 	bl	800cf68 <pbuf_alloced_custom>
 8015f96:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015f98:	697b      	ldr	r3, [r7, #20]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d106      	bne.n	8015fac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015f9e:	69b8      	ldr	r0, [r7, #24]
 8015fa0:	f7ff fef6 	bl	8015d90 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fa6:	f7f7 f999 	bl	800d2dc <pbuf_free>
        goto memerr;
 8015faa:	e074      	b.n	8016096 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015fac:	68f8      	ldr	r0, [r7, #12]
 8015fae:	f7f7 fa3b 	bl	800d428 <pbuf_ref>
      pcr->original = p;
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	4a3f      	ldr	r2, [pc, #252]	; (80160b8 <ip4_frag+0x288>)
 8015fbc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015fbe:	6979      	ldr	r1, [r7, #20]
 8015fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fc2:	f7f7 fa59 	bl	800d478 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015fc6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015fca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015fce:	1ad3      	subs	r3, r2, r3
 8015fd0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d004      	beq.n	8015fe6 <ip4_frag+0x1b6>
        poff = 0;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015fe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d196      	bne.n	8015f1c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015fee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015ff0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015ff4:	4413      	add	r3, r2
 8015ff6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015ffc:	f1a3 0213 	sub.w	r2, r3, #19
 8016000:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016004:	429a      	cmp	r2, r3
 8016006:	bfcc      	ite	gt
 8016008:	2301      	movgt	r3, #1
 801600a:	2300      	movle	r3, #0
 801600c:	b2db      	uxtb	r3, r3
 801600e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016018:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801601a:	6a3b      	ldr	r3, [r7, #32]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d002      	beq.n	8016026 <ip4_frag+0x1f6>
 8016020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016022:	2b00      	cmp	r3, #0
 8016024:	d003      	beq.n	801602e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016026:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801602c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801602e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016030:	4618      	mov	r0, r3
 8016032:	f7f5 fc4d 	bl	800b8d0 <lwip_htons>
 8016036:	4603      	mov	r3, r0
 8016038:	461a      	mov	r2, r3
 801603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801603e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016040:	3314      	adds	r3, #20
 8016042:	b29b      	uxth	r3, r3
 8016044:	4618      	mov	r0, r3
 8016046:	f7f5 fc43 	bl	800b8d0 <lwip_htons>
 801604a:	4603      	mov	r3, r0
 801604c:	461a      	mov	r2, r3
 801604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016050:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016054:	2200      	movs	r2, #0
 8016056:	729a      	strb	r2, [r3, #10]
 8016058:	2200      	movs	r2, #0
 801605a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	695b      	ldr	r3, [r3, #20]
 8016060:	687a      	ldr	r2, [r7, #4]
 8016062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016064:	68b8      	ldr	r0, [r7, #8]
 8016066:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801606a:	f7f7 f937 	bl	800d2dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801606e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016074:	1ad3      	subs	r3, r2, r3
 8016076:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801607a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801607e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016080:	4413      	add	r3, r2
 8016082:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016086:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801608a:	2b00      	cmp	r3, #0
 801608c:	f47f af19 	bne.w	8015ec2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016090:	2300      	movs	r3, #0
 8016092:	e002      	b.n	801609a <ip4_frag+0x26a>
      goto memerr;
 8016094:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801609a:	4618      	mov	r0, r3
 801609c:	3748      	adds	r7, #72	; 0x48
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}
 80160a2:	bf00      	nop
 80160a4:	0801c910 	.word	0x0801c910
 80160a8:	0801caec 	.word	0x0801caec
 80160ac:	0801c958 	.word	0x0801c958
 80160b0:	0801cb08 	.word	0x0801cb08
 80160b4:	0801cb28 	.word	0x0801cb28
 80160b8:	08015dc9 	.word	0x08015dc9

080160bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b086      	sub	sp, #24
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80160c6:	230e      	movs	r3, #14
 80160c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	895b      	ldrh	r3, [r3, #10]
 80160ce:	2b0e      	cmp	r3, #14
 80160d0:	d96e      	bls.n	80161b0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	7bdb      	ldrb	r3, [r3, #15]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d106      	bne.n	80160e8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80160e0:	3301      	adds	r3, #1
 80160e2:	b2da      	uxtb	r2, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	7b1a      	ldrb	r2, [r3, #12]
 80160f2:	7b5b      	ldrb	r3, [r3, #13]
 80160f4:	021b      	lsls	r3, r3, #8
 80160f6:	4313      	orrs	r3, r2
 80160f8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	f003 0301 	and.w	r3, r3, #1
 8016102:	2b00      	cmp	r3, #0
 8016104:	d023      	beq.n	801614e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	2b01      	cmp	r3, #1
 801610c:	d10f      	bne.n	801612e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	785b      	ldrb	r3, [r3, #1]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d11b      	bne.n	801614e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801611a:	2b5e      	cmp	r3, #94	; 0x5e
 801611c:	d117      	bne.n	801614e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	7b5b      	ldrb	r3, [r3, #13]
 8016122:	f043 0310 	orr.w	r3, r3, #16
 8016126:	b2da      	uxtb	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	735a      	strb	r2, [r3, #13]
 801612c:	e00f      	b.n	801614e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801612e:	693b      	ldr	r3, [r7, #16]
 8016130:	2206      	movs	r2, #6
 8016132:	4928      	ldr	r1, [pc, #160]	; (80161d4 <ethernet_input+0x118>)
 8016134:	4618      	mov	r0, r3
 8016136:	f000 fb6e 	bl	8016816 <memcmp>
 801613a:	4603      	mov	r3, r0
 801613c:	2b00      	cmp	r3, #0
 801613e:	d106      	bne.n	801614e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	7b5b      	ldrb	r3, [r3, #13]
 8016144:	f043 0308 	orr.w	r3, r3, #8
 8016148:	b2da      	uxtb	r2, r3
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801614e:	89fb      	ldrh	r3, [r7, #14]
 8016150:	2b08      	cmp	r3, #8
 8016152:	d003      	beq.n	801615c <ethernet_input+0xa0>
 8016154:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016158:	d014      	beq.n	8016184 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801615a:	e032      	b.n	80161c2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016162:	f003 0308 	and.w	r3, r3, #8
 8016166:	2b00      	cmp	r3, #0
 8016168:	d024      	beq.n	80161b4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801616a:	8afb      	ldrh	r3, [r7, #22]
 801616c:	4619      	mov	r1, r3
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f7f7 f82e 	bl	800d1d0 <pbuf_remove_header>
 8016174:	4603      	mov	r3, r0
 8016176:	2b00      	cmp	r3, #0
 8016178:	d11e      	bne.n	80161b8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801617a:	6839      	ldr	r1, [r7, #0]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7fe ff2b 	bl	8014fd8 <ip4_input>
      break;
 8016182:	e013      	b.n	80161ac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801618a:	f003 0308 	and.w	r3, r3, #8
 801618e:	2b00      	cmp	r3, #0
 8016190:	d014      	beq.n	80161bc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016192:	8afb      	ldrh	r3, [r7, #22]
 8016194:	4619      	mov	r1, r3
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f7f7 f81a 	bl	800d1d0 <pbuf_remove_header>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d10e      	bne.n	80161c0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80161a2:	6839      	ldr	r1, [r7, #0]
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f7fe f8cb 	bl	8014340 <etharp_input>
      break;
 80161aa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80161ac:	2300      	movs	r3, #0
 80161ae:	e00c      	b.n	80161ca <ethernet_input+0x10e>
    goto free_and_return;
 80161b0:	bf00      	nop
 80161b2:	e006      	b.n	80161c2 <ethernet_input+0x106>
        goto free_and_return;
 80161b4:	bf00      	nop
 80161b6:	e004      	b.n	80161c2 <ethernet_input+0x106>
        goto free_and_return;
 80161b8:	bf00      	nop
 80161ba:	e002      	b.n	80161c2 <ethernet_input+0x106>
        goto free_and_return;
 80161bc:	bf00      	nop
 80161be:	e000      	b.n	80161c2 <ethernet_input+0x106>
        goto free_and_return;
 80161c0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f7f7 f88a 	bl	800d2dc <pbuf_free>
  return ERR_OK;
 80161c8:	2300      	movs	r3, #0
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3718      	adds	r7, #24
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}
 80161d2:	bf00      	nop
 80161d4:	0801cd88 	.word	0x0801cd88

080161d8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80161d8:	b580      	push	{r7, lr}
 80161da:	b086      	sub	sp, #24
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	607a      	str	r2, [r7, #4]
 80161e4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80161e6:	8c3b      	ldrh	r3, [r7, #32]
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7f5 fb71 	bl	800b8d0 <lwip_htons>
 80161ee:	4603      	mov	r3, r0
 80161f0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80161f2:	210e      	movs	r1, #14
 80161f4:	68b8      	ldr	r0, [r7, #8]
 80161f6:	f7f6 ffdb 	bl	800d1b0 <pbuf_add_header>
 80161fa:	4603      	mov	r3, r0
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d125      	bne.n	801624c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	8afa      	ldrh	r2, [r7, #22]
 801620a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	2206      	movs	r2, #6
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	4618      	mov	r0, r3
 8016214:	f000 fb0f 	bl	8016836 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	3306      	adds	r3, #6
 801621c:	2206      	movs	r2, #6
 801621e:	6879      	ldr	r1, [r7, #4]
 8016220:	4618      	mov	r0, r3
 8016222:	f000 fb08 	bl	8016836 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801622c:	2b06      	cmp	r3, #6
 801622e:	d006      	beq.n	801623e <ethernet_output+0x66>
 8016230:	4b0a      	ldr	r3, [pc, #40]	; (801625c <ethernet_output+0x84>)
 8016232:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016236:	490a      	ldr	r1, [pc, #40]	; (8016260 <ethernet_output+0x88>)
 8016238:	480a      	ldr	r0, [pc, #40]	; (8016264 <ethernet_output+0x8c>)
 801623a:	f000 fbc1 	bl	80169c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	699b      	ldr	r3, [r3, #24]
 8016242:	68b9      	ldr	r1, [r7, #8]
 8016244:	68f8      	ldr	r0, [r7, #12]
 8016246:	4798      	blx	r3
 8016248:	4603      	mov	r3, r0
 801624a:	e002      	b.n	8016252 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801624c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801624e:	f06f 0301 	mvn.w	r3, #1
}
 8016252:	4618      	mov	r0, r3
 8016254:	3718      	adds	r7, #24
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}
 801625a:	bf00      	nop
 801625c:	0801cb38 	.word	0x0801cb38
 8016260:	0801cb70 	.word	0x0801cb70
 8016264:	0801cba4 	.word	0x0801cba4

08016268 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	2200      	movs	r2, #0
 8016276:	2104      	movs	r1, #4
 8016278:	4618      	mov	r0, r3
 801627a:	f7ef fdf1 	bl	8005e60 <osMessageQueueNew>
 801627e:	4602      	mov	r2, r0
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d102      	bne.n	8016292 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801628c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016290:	e000      	b.n	8016294 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016292:	2300      	movs	r3, #0
}
 8016294:	4618      	mov	r0, r3
 8016296:	3708      	adds	r7, #8
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7ef ff45 	bl	8006138 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7ef ff72 	bl	800619c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80162b8:	bf00      	nop
 80162ba:	3708      	adds	r7, #8
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b084      	sub	sp, #16
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	6818      	ldr	r0, [r3, #0]
 80162ce:	4639      	mov	r1, r7
 80162d0:	2300      	movs	r3, #0
 80162d2:	2200      	movs	r2, #0
 80162d4:	f7ef fe4a 	bl	8005f6c <osMessageQueuePut>
 80162d8:	4603      	mov	r3, r0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d102      	bne.n	80162e4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80162de:	2300      	movs	r3, #0
 80162e0:	73fb      	strb	r3, [r7, #15]
 80162e2:	e001      	b.n	80162e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80162e4:	23ff      	movs	r3, #255	; 0xff
 80162e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80162e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3710      	adds	r7, #16
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b086      	sub	sp, #24
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016300:	f7ef f9da 	bl	80056b8 <osKernelGetTickCount>
 8016304:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d013      	beq.n	8016334 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	6818      	ldr	r0, [r3, #0]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2200      	movs	r2, #0
 8016314:	68b9      	ldr	r1, [r7, #8]
 8016316:	f7ef fe9d 	bl	8006054 <osMessageQueueGet>
 801631a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d105      	bne.n	801632e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016322:	f7ef f9c9 	bl	80056b8 <osKernelGetTickCount>
 8016326:	4602      	mov	r2, r0
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	1ad3      	subs	r3, r2, r3
 801632c:	e00f      	b.n	801634e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801632e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016332:	e00c      	b.n	801634e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	6818      	ldr	r0, [r3, #0]
 8016338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801633c:	2200      	movs	r2, #0
 801633e:	68b9      	ldr	r1, [r7, #8]
 8016340:	f7ef fe88 	bl	8006054 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016344:	f7ef f9b8 	bl	80056b8 <osKernelGetTickCount>
 8016348:	4602      	mov	r2, r0
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801634e:	4618      	mov	r0, r3
 8016350:	3718      	adds	r7, #24
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b082      	sub	sp, #8
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
 801635e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6818      	ldr	r0, [r3, #0]
 8016364:	2300      	movs	r3, #0
 8016366:	2200      	movs	r2, #0
 8016368:	6839      	ldr	r1, [r7, #0]
 801636a:	f7ef fe73 	bl	8006054 <osMessageQueueGet>
 801636e:	4603      	mov	r3, r0
 8016370:	2b00      	cmp	r3, #0
 8016372:	d101      	bne.n	8016378 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8016374:	2300      	movs	r3, #0
 8016376:	e001      	b.n	801637c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801637c:	4618      	mov	r0, r3
 801637e:	3708      	adds	r7, #8
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d101      	bne.n	8016398 <sys_mbox_valid+0x14>
    return 0;
 8016394:	2300      	movs	r3, #0
 8016396:	e000      	b.n	801639a <sys_mbox_valid+0x16>
  else
    return 1;
 8016398:	2301      	movs	r3, #1
}
 801639a:	4618      	mov	r0, r3
 801639c:	370c      	adds	r7, #12
 801639e:	46bd      	mov	sp, r7
 80163a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a4:	4770      	bx	lr

080163a6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80163a6:	b480      	push	{r7}
 80163a8:	b083      	sub	sp, #12
 80163aa:	af00      	add	r7, sp, #0
 80163ac:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2200      	movs	r2, #0
 80163b2:	601a      	str	r2, [r3, #0]
}
 80163b4:	bf00      	nop
 80163b6:	370c      	adds	r7, #12
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	460b      	mov	r3, r1
 80163ca:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80163cc:	78fb      	ldrb	r3, [r7, #3]
 80163ce:	2200      	movs	r2, #0
 80163d0:	4619      	mov	r1, r3
 80163d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80163d6:	f7ef fbb3 	bl	8005b40 <osSemaphoreNew>
 80163da:	4602      	mov	r2, r0
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d102      	bne.n	80163ee <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80163e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163ec:	e009      	b.n	8016402 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80163ee:	78fb      	ldrb	r3, [r7, #3]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d105      	bne.n	8016400 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2100      	movs	r1, #0
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7ef fc3c 	bl	8005c78 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016400:	2300      	movs	r3, #0
}
 8016402:	4618      	mov	r0, r3
 8016404:	3708      	adds	r7, #8
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801640a:	b580      	push	{r7, lr}
 801640c:	b084      	sub	sp, #16
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
 8016412:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8016414:	f7ef f950 	bl	80056b8 <osKernelGetTickCount>
 8016418:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d011      	beq.n	8016444 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	6839      	ldr	r1, [r7, #0]
 8016426:	4618      	mov	r0, r3
 8016428:	f7ef fc26 	bl	8005c78 <osSemaphoreAcquire>
 801642c:	4603      	mov	r3, r0
 801642e:	2b00      	cmp	r3, #0
 8016430:	d105      	bne.n	801643e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8016432:	f7ef f941 	bl	80056b8 <osKernelGetTickCount>
 8016436:	4602      	mov	r2, r0
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	1ad3      	subs	r3, r2, r3
 801643c:	e012      	b.n	8016464 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801643e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016442:	e00f      	b.n	8016464 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8016444:	bf00      	nop
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801644e:	4618      	mov	r0, r3
 8016450:	f7ef fc12 	bl	8005c78 <osSemaphoreAcquire>
 8016454:	4603      	mov	r3, r0
 8016456:	2b00      	cmp	r3, #0
 8016458:	d1f5      	bne.n	8016446 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801645a:	f7ef f92d 	bl	80056b8 <osKernelGetTickCount>
 801645e:	4602      	mov	r2, r0
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016464:	4618      	mov	r0, r3
 8016466:	3710      	adds	r7, #16
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4618      	mov	r0, r3
 801647a:	f7ef fc63 	bl	8005d44 <osSemaphoreRelease>
}
 801647e:	bf00      	nop
 8016480:	3708      	adds	r7, #8
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}

08016486 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	b082      	sub	sp, #8
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	4618      	mov	r0, r3
 8016494:	f7ef fcae 	bl	8005df4 <osSemaphoreDelete>
}
 8016498:	bf00      	nop
 801649a:	3708      	adds	r7, #8
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}

080164a0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80164a0:	b480      	push	{r7}
 80164a2:	b083      	sub	sp, #12
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d101      	bne.n	80164b4 <sys_sem_valid+0x14>
    return 0;
 80164b0:	2300      	movs	r3, #0
 80164b2:	e000      	b.n	80164b6 <sys_sem_valid+0x16>
  else
    return 1;
 80164b4:	2301      	movs	r3, #1
}
 80164b6:	4618      	mov	r0, r3
 80164b8:	370c      	adds	r7, #12
 80164ba:	46bd      	mov	sp, r7
 80164bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c0:	4770      	bx	lr

080164c2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80164c2:	b480      	push	{r7}
 80164c4:	b083      	sub	sp, #12
 80164c6:	af00      	add	r7, sp, #0
 80164c8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2200      	movs	r2, #0
 80164ce:	601a      	str	r2, [r3, #0]
}
 80164d0:	bf00      	nop
 80164d2:	370c      	adds	r7, #12
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr

080164dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80164e0:	2000      	movs	r0, #0
 80164e2:	f7ef f9e5 	bl	80058b0 <osMutexNew>
 80164e6:	4603      	mov	r3, r0
 80164e8:	4a01      	ldr	r2, [pc, #4]	; (80164f0 <sys_init+0x14>)
 80164ea:	6013      	str	r3, [r2, #0]
#endif
}
 80164ec:	bf00      	nop
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	20011ca0 	.word	0x20011ca0

080164f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80164fc:	2000      	movs	r0, #0
 80164fe:	f7ef f9d7 	bl	80058b0 <osMutexNew>
 8016502:	4602      	mov	r2, r0
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d102      	bne.n	8016516 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016514:	e000      	b.n	8016518 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016516:	2300      	movs	r3, #0
}
 8016518:	4618      	mov	r0, r3
 801651a:	3708      	adds	r7, #8
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016530:	4618      	mov	r0, r3
 8016532:	f7ef fa57 	bl	80059e4 <osMutexAcquire>
#endif
}
 8016536:	bf00      	nop
 8016538:	3708      	adds	r7, #8
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}

0801653e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b082      	sub	sp, #8
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4618      	mov	r0, r3
 801654c:	f7ef faa8 	bl	8005aa0 <osMutexRelease>
}
 8016550:	bf00      	nop
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b08e      	sub	sp, #56	; 0x38
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]
 8016564:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016566:	f107 0314 	add.w	r3, r7, #20
 801656a:	2224      	movs	r2, #36	; 0x24
 801656c:	2100      	movs	r1, #0
 801656e:	4618      	mov	r0, r3
 8016570:	f000 f989 	bl	8016886 <memset>
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	617b      	str	r3, [r7, #20]
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	62bb      	str	r3, [r7, #40]	; 0x28
 801657c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801657e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016580:	f107 0314 	add.w	r3, r7, #20
 8016584:	461a      	mov	r2, r3
 8016586:	6879      	ldr	r1, [r7, #4]
 8016588:	68b8      	ldr	r0, [r7, #8]
 801658a:	f7ef f8bd 	bl	8005708 <osThreadNew>
 801658e:	4603      	mov	r3, r0
#endif
}
 8016590:	4618      	mov	r0, r3
 8016592:	3738      	adds	r7, #56	; 0x38
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}

08016598 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801659c:	4b04      	ldr	r3, [pc, #16]	; (80165b0 <sys_arch_protect+0x18>)
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7ef fa1d 	bl	80059e4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80165aa:	2301      	movs	r3, #1
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	20011ca0 	.word	0x20011ca0

080165b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80165bc:	4b04      	ldr	r3, [pc, #16]	; (80165d0 <sys_arch_unprotect+0x1c>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7ef fa6d 	bl	8005aa0 <osMutexRelease>
}
 80165c6:	bf00      	nop
 80165c8:	3708      	adds	r7, #8
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	20011ca0 	.word	0x20011ca0

080165d4 <atof>:
 80165d4:	2100      	movs	r1, #0
 80165d6:	f001 b971 	b.w	80178bc <strtod>
	...

080165dc <std>:
 80165dc:	2300      	movs	r3, #0
 80165de:	b510      	push	{r4, lr}
 80165e0:	4604      	mov	r4, r0
 80165e2:	e9c0 3300 	strd	r3, r3, [r0]
 80165e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165ea:	6083      	str	r3, [r0, #8]
 80165ec:	8181      	strh	r1, [r0, #12]
 80165ee:	6643      	str	r3, [r0, #100]	; 0x64
 80165f0:	81c2      	strh	r2, [r0, #14]
 80165f2:	6183      	str	r3, [r0, #24]
 80165f4:	4619      	mov	r1, r3
 80165f6:	2208      	movs	r2, #8
 80165f8:	305c      	adds	r0, #92	; 0x5c
 80165fa:	f000 f944 	bl	8016886 <memset>
 80165fe:	4b05      	ldr	r3, [pc, #20]	; (8016614 <std+0x38>)
 8016600:	6263      	str	r3, [r4, #36]	; 0x24
 8016602:	4b05      	ldr	r3, [pc, #20]	; (8016618 <std+0x3c>)
 8016604:	62a3      	str	r3, [r4, #40]	; 0x28
 8016606:	4b05      	ldr	r3, [pc, #20]	; (801661c <std+0x40>)
 8016608:	62e3      	str	r3, [r4, #44]	; 0x2c
 801660a:	4b05      	ldr	r3, [pc, #20]	; (8016620 <std+0x44>)
 801660c:	6224      	str	r4, [r4, #32]
 801660e:	6323      	str	r3, [r4, #48]	; 0x30
 8016610:	bd10      	pop	{r4, pc}
 8016612:	bf00      	nop
 8016614:	08016ba1 	.word	0x08016ba1
 8016618:	08016bc3 	.word	0x08016bc3
 801661c:	08016bfb 	.word	0x08016bfb
 8016620:	08016c1f 	.word	0x08016c1f

08016624 <_cleanup_r>:
 8016624:	4901      	ldr	r1, [pc, #4]	; (801662c <_cleanup_r+0x8>)
 8016626:	f000 b8af 	b.w	8016788 <_fwalk_reent>
 801662a:	bf00      	nop
 801662c:	08017b19 	.word	0x08017b19

08016630 <__sfmoreglue>:
 8016630:	b570      	push	{r4, r5, r6, lr}
 8016632:	2268      	movs	r2, #104	; 0x68
 8016634:	1e4d      	subs	r5, r1, #1
 8016636:	4355      	muls	r5, r2
 8016638:	460e      	mov	r6, r1
 801663a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801663e:	f000 f94b 	bl	80168d8 <_malloc_r>
 8016642:	4604      	mov	r4, r0
 8016644:	b140      	cbz	r0, 8016658 <__sfmoreglue+0x28>
 8016646:	2100      	movs	r1, #0
 8016648:	e9c0 1600 	strd	r1, r6, [r0]
 801664c:	300c      	adds	r0, #12
 801664e:	60a0      	str	r0, [r4, #8]
 8016650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016654:	f000 f917 	bl	8016886 <memset>
 8016658:	4620      	mov	r0, r4
 801665a:	bd70      	pop	{r4, r5, r6, pc}

0801665c <__sfp_lock_acquire>:
 801665c:	4801      	ldr	r0, [pc, #4]	; (8016664 <__sfp_lock_acquire+0x8>)
 801665e:	f000 b8d8 	b.w	8016812 <__retarget_lock_acquire_recursive>
 8016662:	bf00      	nop
 8016664:	20011ca5 	.word	0x20011ca5

08016668 <__sfp_lock_release>:
 8016668:	4801      	ldr	r0, [pc, #4]	; (8016670 <__sfp_lock_release+0x8>)
 801666a:	f000 b8d3 	b.w	8016814 <__retarget_lock_release_recursive>
 801666e:	bf00      	nop
 8016670:	20011ca5 	.word	0x20011ca5

08016674 <__sinit_lock_acquire>:
 8016674:	4801      	ldr	r0, [pc, #4]	; (801667c <__sinit_lock_acquire+0x8>)
 8016676:	f000 b8cc 	b.w	8016812 <__retarget_lock_acquire_recursive>
 801667a:	bf00      	nop
 801667c:	20011ca6 	.word	0x20011ca6

08016680 <__sinit_lock_release>:
 8016680:	4801      	ldr	r0, [pc, #4]	; (8016688 <__sinit_lock_release+0x8>)
 8016682:	f000 b8c7 	b.w	8016814 <__retarget_lock_release_recursive>
 8016686:	bf00      	nop
 8016688:	20011ca6 	.word	0x20011ca6

0801668c <__sinit>:
 801668c:	b510      	push	{r4, lr}
 801668e:	4604      	mov	r4, r0
 8016690:	f7ff fff0 	bl	8016674 <__sinit_lock_acquire>
 8016694:	69a3      	ldr	r3, [r4, #24]
 8016696:	b11b      	cbz	r3, 80166a0 <__sinit+0x14>
 8016698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801669c:	f7ff bff0 	b.w	8016680 <__sinit_lock_release>
 80166a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80166a4:	6523      	str	r3, [r4, #80]	; 0x50
 80166a6:	4b13      	ldr	r3, [pc, #76]	; (80166f4 <__sinit+0x68>)
 80166a8:	4a13      	ldr	r2, [pc, #76]	; (80166f8 <__sinit+0x6c>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80166ae:	42a3      	cmp	r3, r4
 80166b0:	bf04      	itt	eq
 80166b2:	2301      	moveq	r3, #1
 80166b4:	61a3      	streq	r3, [r4, #24]
 80166b6:	4620      	mov	r0, r4
 80166b8:	f000 f820 	bl	80166fc <__sfp>
 80166bc:	6060      	str	r0, [r4, #4]
 80166be:	4620      	mov	r0, r4
 80166c0:	f000 f81c 	bl	80166fc <__sfp>
 80166c4:	60a0      	str	r0, [r4, #8]
 80166c6:	4620      	mov	r0, r4
 80166c8:	f000 f818 	bl	80166fc <__sfp>
 80166cc:	2200      	movs	r2, #0
 80166ce:	60e0      	str	r0, [r4, #12]
 80166d0:	2104      	movs	r1, #4
 80166d2:	6860      	ldr	r0, [r4, #4]
 80166d4:	f7ff ff82 	bl	80165dc <std>
 80166d8:	68a0      	ldr	r0, [r4, #8]
 80166da:	2201      	movs	r2, #1
 80166dc:	2109      	movs	r1, #9
 80166de:	f7ff ff7d 	bl	80165dc <std>
 80166e2:	68e0      	ldr	r0, [r4, #12]
 80166e4:	2202      	movs	r2, #2
 80166e6:	2112      	movs	r1, #18
 80166e8:	f7ff ff78 	bl	80165dc <std>
 80166ec:	2301      	movs	r3, #1
 80166ee:	61a3      	str	r3, [r4, #24]
 80166f0:	e7d2      	b.n	8016698 <__sinit+0xc>
 80166f2:	bf00      	nop
 80166f4:	0801cef8 	.word	0x0801cef8
 80166f8:	08016625 	.word	0x08016625

080166fc <__sfp>:
 80166fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166fe:	4607      	mov	r7, r0
 8016700:	f7ff ffac 	bl	801665c <__sfp_lock_acquire>
 8016704:	4b1e      	ldr	r3, [pc, #120]	; (8016780 <__sfp+0x84>)
 8016706:	681e      	ldr	r6, [r3, #0]
 8016708:	69b3      	ldr	r3, [r6, #24]
 801670a:	b913      	cbnz	r3, 8016712 <__sfp+0x16>
 801670c:	4630      	mov	r0, r6
 801670e:	f7ff ffbd 	bl	801668c <__sinit>
 8016712:	3648      	adds	r6, #72	; 0x48
 8016714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016718:	3b01      	subs	r3, #1
 801671a:	d503      	bpl.n	8016724 <__sfp+0x28>
 801671c:	6833      	ldr	r3, [r6, #0]
 801671e:	b30b      	cbz	r3, 8016764 <__sfp+0x68>
 8016720:	6836      	ldr	r6, [r6, #0]
 8016722:	e7f7      	b.n	8016714 <__sfp+0x18>
 8016724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016728:	b9d5      	cbnz	r5, 8016760 <__sfp+0x64>
 801672a:	4b16      	ldr	r3, [pc, #88]	; (8016784 <__sfp+0x88>)
 801672c:	60e3      	str	r3, [r4, #12]
 801672e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016732:	6665      	str	r5, [r4, #100]	; 0x64
 8016734:	f000 f86c 	bl	8016810 <__retarget_lock_init_recursive>
 8016738:	f7ff ff96 	bl	8016668 <__sfp_lock_release>
 801673c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016744:	6025      	str	r5, [r4, #0]
 8016746:	61a5      	str	r5, [r4, #24]
 8016748:	2208      	movs	r2, #8
 801674a:	4629      	mov	r1, r5
 801674c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016750:	f000 f899 	bl	8016886 <memset>
 8016754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801675c:	4620      	mov	r0, r4
 801675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016760:	3468      	adds	r4, #104	; 0x68
 8016762:	e7d9      	b.n	8016718 <__sfp+0x1c>
 8016764:	2104      	movs	r1, #4
 8016766:	4638      	mov	r0, r7
 8016768:	f7ff ff62 	bl	8016630 <__sfmoreglue>
 801676c:	4604      	mov	r4, r0
 801676e:	6030      	str	r0, [r6, #0]
 8016770:	2800      	cmp	r0, #0
 8016772:	d1d5      	bne.n	8016720 <__sfp+0x24>
 8016774:	f7ff ff78 	bl	8016668 <__sfp_lock_release>
 8016778:	230c      	movs	r3, #12
 801677a:	603b      	str	r3, [r7, #0]
 801677c:	e7ee      	b.n	801675c <__sfp+0x60>
 801677e:	bf00      	nop
 8016780:	0801cef8 	.word	0x0801cef8
 8016784:	ffff0001 	.word	0xffff0001

08016788 <_fwalk_reent>:
 8016788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801678c:	4606      	mov	r6, r0
 801678e:	4688      	mov	r8, r1
 8016790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016794:	2700      	movs	r7, #0
 8016796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801679a:	f1b9 0901 	subs.w	r9, r9, #1
 801679e:	d505      	bpl.n	80167ac <_fwalk_reent+0x24>
 80167a0:	6824      	ldr	r4, [r4, #0]
 80167a2:	2c00      	cmp	r4, #0
 80167a4:	d1f7      	bne.n	8016796 <_fwalk_reent+0xe>
 80167a6:	4638      	mov	r0, r7
 80167a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167ac:	89ab      	ldrh	r3, [r5, #12]
 80167ae:	2b01      	cmp	r3, #1
 80167b0:	d907      	bls.n	80167c2 <_fwalk_reent+0x3a>
 80167b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167b6:	3301      	adds	r3, #1
 80167b8:	d003      	beq.n	80167c2 <_fwalk_reent+0x3a>
 80167ba:	4629      	mov	r1, r5
 80167bc:	4630      	mov	r0, r6
 80167be:	47c0      	blx	r8
 80167c0:	4307      	orrs	r7, r0
 80167c2:	3568      	adds	r5, #104	; 0x68
 80167c4:	e7e9      	b.n	801679a <_fwalk_reent+0x12>
	...

080167c8 <__libc_init_array>:
 80167c8:	b570      	push	{r4, r5, r6, lr}
 80167ca:	4d0d      	ldr	r5, [pc, #52]	; (8016800 <__libc_init_array+0x38>)
 80167cc:	4c0d      	ldr	r4, [pc, #52]	; (8016804 <__libc_init_array+0x3c>)
 80167ce:	1b64      	subs	r4, r4, r5
 80167d0:	10a4      	asrs	r4, r4, #2
 80167d2:	2600      	movs	r6, #0
 80167d4:	42a6      	cmp	r6, r4
 80167d6:	d109      	bne.n	80167ec <__libc_init_array+0x24>
 80167d8:	4d0b      	ldr	r5, [pc, #44]	; (8016808 <__libc_init_array+0x40>)
 80167da:	4c0c      	ldr	r4, [pc, #48]	; (801680c <__libc_init_array+0x44>)
 80167dc:	f003 f8f4 	bl	80199c8 <_init>
 80167e0:	1b64      	subs	r4, r4, r5
 80167e2:	10a4      	asrs	r4, r4, #2
 80167e4:	2600      	movs	r6, #0
 80167e6:	42a6      	cmp	r6, r4
 80167e8:	d105      	bne.n	80167f6 <__libc_init_array+0x2e>
 80167ea:	bd70      	pop	{r4, r5, r6, pc}
 80167ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80167f0:	4798      	blx	r3
 80167f2:	3601      	adds	r6, #1
 80167f4:	e7ee      	b.n	80167d4 <__libc_init_array+0xc>
 80167f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80167fa:	4798      	blx	r3
 80167fc:	3601      	adds	r6, #1
 80167fe:	e7f2      	b.n	80167e6 <__libc_init_array+0x1e>
 8016800:	0801d288 	.word	0x0801d288
 8016804:	0801d288 	.word	0x0801d288
 8016808:	0801d288 	.word	0x0801d288
 801680c:	0801d28c 	.word	0x0801d28c

08016810 <__retarget_lock_init_recursive>:
 8016810:	4770      	bx	lr

08016812 <__retarget_lock_acquire_recursive>:
 8016812:	4770      	bx	lr

08016814 <__retarget_lock_release_recursive>:
 8016814:	4770      	bx	lr

08016816 <memcmp>:
 8016816:	b510      	push	{r4, lr}
 8016818:	3901      	subs	r1, #1
 801681a:	4402      	add	r2, r0
 801681c:	4290      	cmp	r0, r2
 801681e:	d101      	bne.n	8016824 <memcmp+0xe>
 8016820:	2000      	movs	r0, #0
 8016822:	e005      	b.n	8016830 <memcmp+0x1a>
 8016824:	7803      	ldrb	r3, [r0, #0]
 8016826:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801682a:	42a3      	cmp	r3, r4
 801682c:	d001      	beq.n	8016832 <memcmp+0x1c>
 801682e:	1b18      	subs	r0, r3, r4
 8016830:	bd10      	pop	{r4, pc}
 8016832:	3001      	adds	r0, #1
 8016834:	e7f2      	b.n	801681c <memcmp+0x6>

08016836 <memcpy>:
 8016836:	440a      	add	r2, r1
 8016838:	4291      	cmp	r1, r2
 801683a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801683e:	d100      	bne.n	8016842 <memcpy+0xc>
 8016840:	4770      	bx	lr
 8016842:	b510      	push	{r4, lr}
 8016844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016848:	f803 4f01 	strb.w	r4, [r3, #1]!
 801684c:	4291      	cmp	r1, r2
 801684e:	d1f9      	bne.n	8016844 <memcpy+0xe>
 8016850:	bd10      	pop	{r4, pc}

08016852 <memmove>:
 8016852:	4288      	cmp	r0, r1
 8016854:	b510      	push	{r4, lr}
 8016856:	eb01 0402 	add.w	r4, r1, r2
 801685a:	d902      	bls.n	8016862 <memmove+0x10>
 801685c:	4284      	cmp	r4, r0
 801685e:	4623      	mov	r3, r4
 8016860:	d807      	bhi.n	8016872 <memmove+0x20>
 8016862:	1e43      	subs	r3, r0, #1
 8016864:	42a1      	cmp	r1, r4
 8016866:	d008      	beq.n	801687a <memmove+0x28>
 8016868:	f811 2b01 	ldrb.w	r2, [r1], #1
 801686c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016870:	e7f8      	b.n	8016864 <memmove+0x12>
 8016872:	4402      	add	r2, r0
 8016874:	4601      	mov	r1, r0
 8016876:	428a      	cmp	r2, r1
 8016878:	d100      	bne.n	801687c <memmove+0x2a>
 801687a:	bd10      	pop	{r4, pc}
 801687c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016880:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016884:	e7f7      	b.n	8016876 <memmove+0x24>

08016886 <memset>:
 8016886:	4402      	add	r2, r0
 8016888:	4603      	mov	r3, r0
 801688a:	4293      	cmp	r3, r2
 801688c:	d100      	bne.n	8016890 <memset+0xa>
 801688e:	4770      	bx	lr
 8016890:	f803 1b01 	strb.w	r1, [r3], #1
 8016894:	e7f9      	b.n	801688a <memset+0x4>
	...

08016898 <sbrk_aligned>:
 8016898:	b570      	push	{r4, r5, r6, lr}
 801689a:	4e0e      	ldr	r6, [pc, #56]	; (80168d4 <sbrk_aligned+0x3c>)
 801689c:	460c      	mov	r4, r1
 801689e:	6831      	ldr	r1, [r6, #0]
 80168a0:	4605      	mov	r5, r0
 80168a2:	b911      	cbnz	r1, 80168aa <sbrk_aligned+0x12>
 80168a4:	f000 f94c 	bl	8016b40 <_sbrk_r>
 80168a8:	6030      	str	r0, [r6, #0]
 80168aa:	4621      	mov	r1, r4
 80168ac:	4628      	mov	r0, r5
 80168ae:	f000 f947 	bl	8016b40 <_sbrk_r>
 80168b2:	1c43      	adds	r3, r0, #1
 80168b4:	d00a      	beq.n	80168cc <sbrk_aligned+0x34>
 80168b6:	1cc4      	adds	r4, r0, #3
 80168b8:	f024 0403 	bic.w	r4, r4, #3
 80168bc:	42a0      	cmp	r0, r4
 80168be:	d007      	beq.n	80168d0 <sbrk_aligned+0x38>
 80168c0:	1a21      	subs	r1, r4, r0
 80168c2:	4628      	mov	r0, r5
 80168c4:	f000 f93c 	bl	8016b40 <_sbrk_r>
 80168c8:	3001      	adds	r0, #1
 80168ca:	d101      	bne.n	80168d0 <sbrk_aligned+0x38>
 80168cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80168d0:	4620      	mov	r0, r4
 80168d2:	bd70      	pop	{r4, r5, r6, pc}
 80168d4:	20011cac 	.word	0x20011cac

080168d8 <_malloc_r>:
 80168d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168dc:	1ccd      	adds	r5, r1, #3
 80168de:	f025 0503 	bic.w	r5, r5, #3
 80168e2:	3508      	adds	r5, #8
 80168e4:	2d0c      	cmp	r5, #12
 80168e6:	bf38      	it	cc
 80168e8:	250c      	movcc	r5, #12
 80168ea:	2d00      	cmp	r5, #0
 80168ec:	4607      	mov	r7, r0
 80168ee:	db01      	blt.n	80168f4 <_malloc_r+0x1c>
 80168f0:	42a9      	cmp	r1, r5
 80168f2:	d905      	bls.n	8016900 <_malloc_r+0x28>
 80168f4:	230c      	movs	r3, #12
 80168f6:	603b      	str	r3, [r7, #0]
 80168f8:	2600      	movs	r6, #0
 80168fa:	4630      	mov	r0, r6
 80168fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016900:	4e2e      	ldr	r6, [pc, #184]	; (80169bc <_malloc_r+0xe4>)
 8016902:	f001 fcf3 	bl	80182ec <__malloc_lock>
 8016906:	6833      	ldr	r3, [r6, #0]
 8016908:	461c      	mov	r4, r3
 801690a:	bb34      	cbnz	r4, 801695a <_malloc_r+0x82>
 801690c:	4629      	mov	r1, r5
 801690e:	4638      	mov	r0, r7
 8016910:	f7ff ffc2 	bl	8016898 <sbrk_aligned>
 8016914:	1c43      	adds	r3, r0, #1
 8016916:	4604      	mov	r4, r0
 8016918:	d14d      	bne.n	80169b6 <_malloc_r+0xde>
 801691a:	6834      	ldr	r4, [r6, #0]
 801691c:	4626      	mov	r6, r4
 801691e:	2e00      	cmp	r6, #0
 8016920:	d140      	bne.n	80169a4 <_malloc_r+0xcc>
 8016922:	6823      	ldr	r3, [r4, #0]
 8016924:	4631      	mov	r1, r6
 8016926:	4638      	mov	r0, r7
 8016928:	eb04 0803 	add.w	r8, r4, r3
 801692c:	f000 f908 	bl	8016b40 <_sbrk_r>
 8016930:	4580      	cmp	r8, r0
 8016932:	d13a      	bne.n	80169aa <_malloc_r+0xd2>
 8016934:	6821      	ldr	r1, [r4, #0]
 8016936:	3503      	adds	r5, #3
 8016938:	1a6d      	subs	r5, r5, r1
 801693a:	f025 0503 	bic.w	r5, r5, #3
 801693e:	3508      	adds	r5, #8
 8016940:	2d0c      	cmp	r5, #12
 8016942:	bf38      	it	cc
 8016944:	250c      	movcc	r5, #12
 8016946:	4629      	mov	r1, r5
 8016948:	4638      	mov	r0, r7
 801694a:	f7ff ffa5 	bl	8016898 <sbrk_aligned>
 801694e:	3001      	adds	r0, #1
 8016950:	d02b      	beq.n	80169aa <_malloc_r+0xd2>
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	442b      	add	r3, r5
 8016956:	6023      	str	r3, [r4, #0]
 8016958:	e00e      	b.n	8016978 <_malloc_r+0xa0>
 801695a:	6822      	ldr	r2, [r4, #0]
 801695c:	1b52      	subs	r2, r2, r5
 801695e:	d41e      	bmi.n	801699e <_malloc_r+0xc6>
 8016960:	2a0b      	cmp	r2, #11
 8016962:	d916      	bls.n	8016992 <_malloc_r+0xba>
 8016964:	1961      	adds	r1, r4, r5
 8016966:	42a3      	cmp	r3, r4
 8016968:	6025      	str	r5, [r4, #0]
 801696a:	bf18      	it	ne
 801696c:	6059      	strne	r1, [r3, #4]
 801696e:	6863      	ldr	r3, [r4, #4]
 8016970:	bf08      	it	eq
 8016972:	6031      	streq	r1, [r6, #0]
 8016974:	5162      	str	r2, [r4, r5]
 8016976:	604b      	str	r3, [r1, #4]
 8016978:	4638      	mov	r0, r7
 801697a:	f104 060b 	add.w	r6, r4, #11
 801697e:	f001 fcbb 	bl	80182f8 <__malloc_unlock>
 8016982:	f026 0607 	bic.w	r6, r6, #7
 8016986:	1d23      	adds	r3, r4, #4
 8016988:	1af2      	subs	r2, r6, r3
 801698a:	d0b6      	beq.n	80168fa <_malloc_r+0x22>
 801698c:	1b9b      	subs	r3, r3, r6
 801698e:	50a3      	str	r3, [r4, r2]
 8016990:	e7b3      	b.n	80168fa <_malloc_r+0x22>
 8016992:	6862      	ldr	r2, [r4, #4]
 8016994:	42a3      	cmp	r3, r4
 8016996:	bf0c      	ite	eq
 8016998:	6032      	streq	r2, [r6, #0]
 801699a:	605a      	strne	r2, [r3, #4]
 801699c:	e7ec      	b.n	8016978 <_malloc_r+0xa0>
 801699e:	4623      	mov	r3, r4
 80169a0:	6864      	ldr	r4, [r4, #4]
 80169a2:	e7b2      	b.n	801690a <_malloc_r+0x32>
 80169a4:	4634      	mov	r4, r6
 80169a6:	6876      	ldr	r6, [r6, #4]
 80169a8:	e7b9      	b.n	801691e <_malloc_r+0x46>
 80169aa:	230c      	movs	r3, #12
 80169ac:	603b      	str	r3, [r7, #0]
 80169ae:	4638      	mov	r0, r7
 80169b0:	f001 fca2 	bl	80182f8 <__malloc_unlock>
 80169b4:	e7a1      	b.n	80168fa <_malloc_r+0x22>
 80169b6:	6025      	str	r5, [r4, #0]
 80169b8:	e7de      	b.n	8016978 <_malloc_r+0xa0>
 80169ba:	bf00      	nop
 80169bc:	20011ca8 	.word	0x20011ca8

080169c0 <iprintf>:
 80169c0:	b40f      	push	{r0, r1, r2, r3}
 80169c2:	4b0a      	ldr	r3, [pc, #40]	; (80169ec <iprintf+0x2c>)
 80169c4:	b513      	push	{r0, r1, r4, lr}
 80169c6:	681c      	ldr	r4, [r3, #0]
 80169c8:	b124      	cbz	r4, 80169d4 <iprintf+0x14>
 80169ca:	69a3      	ldr	r3, [r4, #24]
 80169cc:	b913      	cbnz	r3, 80169d4 <iprintf+0x14>
 80169ce:	4620      	mov	r0, r4
 80169d0:	f7ff fe5c 	bl	801668c <__sinit>
 80169d4:	ab05      	add	r3, sp, #20
 80169d6:	9a04      	ldr	r2, [sp, #16]
 80169d8:	68a1      	ldr	r1, [r4, #8]
 80169da:	9301      	str	r3, [sp, #4]
 80169dc:	4620      	mov	r0, r4
 80169de:	f002 fb3b 	bl	8019058 <_vfiprintf_r>
 80169e2:	b002      	add	sp, #8
 80169e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169e8:	b004      	add	sp, #16
 80169ea:	4770      	bx	lr
 80169ec:	2000002c 	.word	0x2000002c

080169f0 <rand>:
 80169f0:	4b16      	ldr	r3, [pc, #88]	; (8016a4c <rand+0x5c>)
 80169f2:	b510      	push	{r4, lr}
 80169f4:	681c      	ldr	r4, [r3, #0]
 80169f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80169f8:	b9b3      	cbnz	r3, 8016a28 <rand+0x38>
 80169fa:	2018      	movs	r0, #24
 80169fc:	f001 fc5c 	bl	80182b8 <malloc>
 8016a00:	63a0      	str	r0, [r4, #56]	; 0x38
 8016a02:	b928      	cbnz	r0, 8016a10 <rand+0x20>
 8016a04:	4602      	mov	r2, r0
 8016a06:	4b12      	ldr	r3, [pc, #72]	; (8016a50 <rand+0x60>)
 8016a08:	4812      	ldr	r0, [pc, #72]	; (8016a54 <rand+0x64>)
 8016a0a:	214e      	movs	r1, #78	; 0x4e
 8016a0c:	f000 ffd0 	bl	80179b0 <__assert_func>
 8016a10:	4a11      	ldr	r2, [pc, #68]	; (8016a58 <rand+0x68>)
 8016a12:	4b12      	ldr	r3, [pc, #72]	; (8016a5c <rand+0x6c>)
 8016a14:	e9c0 2300 	strd	r2, r3, [r0]
 8016a18:	4b11      	ldr	r3, [pc, #68]	; (8016a60 <rand+0x70>)
 8016a1a:	6083      	str	r3, [r0, #8]
 8016a1c:	230b      	movs	r3, #11
 8016a1e:	8183      	strh	r3, [r0, #12]
 8016a20:	2201      	movs	r2, #1
 8016a22:	2300      	movs	r3, #0
 8016a24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016a28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016a2a:	4a0e      	ldr	r2, [pc, #56]	; (8016a64 <rand+0x74>)
 8016a2c:	6920      	ldr	r0, [r4, #16]
 8016a2e:	6963      	ldr	r3, [r4, #20]
 8016a30:	490d      	ldr	r1, [pc, #52]	; (8016a68 <rand+0x78>)
 8016a32:	4342      	muls	r2, r0
 8016a34:	fb01 2203 	mla	r2, r1, r3, r2
 8016a38:	fba0 0101 	umull	r0, r1, r0, r1
 8016a3c:	1c43      	adds	r3, r0, #1
 8016a3e:	eb42 0001 	adc.w	r0, r2, r1
 8016a42:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016a46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016a4a:	bd10      	pop	{r4, pc}
 8016a4c:	2000002c 	.word	0x2000002c
 8016a50:	0801cefc 	.word	0x0801cefc
 8016a54:	0801cf13 	.word	0x0801cf13
 8016a58:	abcd330e 	.word	0xabcd330e
 8016a5c:	e66d1234 	.word	0xe66d1234
 8016a60:	0005deec 	.word	0x0005deec
 8016a64:	5851f42d 	.word	0x5851f42d
 8016a68:	4c957f2d 	.word	0x4c957f2d

08016a6c <cleanup_glue>:
 8016a6c:	b538      	push	{r3, r4, r5, lr}
 8016a6e:	460c      	mov	r4, r1
 8016a70:	6809      	ldr	r1, [r1, #0]
 8016a72:	4605      	mov	r5, r0
 8016a74:	b109      	cbz	r1, 8016a7a <cleanup_glue+0xe>
 8016a76:	f7ff fff9 	bl	8016a6c <cleanup_glue>
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a82:	f002 b917 	b.w	8018cb4 <_free_r>
	...

08016a88 <_reclaim_reent>:
 8016a88:	4b2c      	ldr	r3, [pc, #176]	; (8016b3c <_reclaim_reent+0xb4>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	4283      	cmp	r3, r0
 8016a8e:	b570      	push	{r4, r5, r6, lr}
 8016a90:	4604      	mov	r4, r0
 8016a92:	d051      	beq.n	8016b38 <_reclaim_reent+0xb0>
 8016a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016a96:	b143      	cbz	r3, 8016aaa <_reclaim_reent+0x22>
 8016a98:	68db      	ldr	r3, [r3, #12]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d14a      	bne.n	8016b34 <_reclaim_reent+0xac>
 8016a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016aa0:	6819      	ldr	r1, [r3, #0]
 8016aa2:	b111      	cbz	r1, 8016aaa <_reclaim_reent+0x22>
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	f002 f905 	bl	8018cb4 <_free_r>
 8016aaa:	6961      	ldr	r1, [r4, #20]
 8016aac:	b111      	cbz	r1, 8016ab4 <_reclaim_reent+0x2c>
 8016aae:	4620      	mov	r0, r4
 8016ab0:	f002 f900 	bl	8018cb4 <_free_r>
 8016ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016ab6:	b111      	cbz	r1, 8016abe <_reclaim_reent+0x36>
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f002 f8fb 	bl	8018cb4 <_free_r>
 8016abe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ac0:	b111      	cbz	r1, 8016ac8 <_reclaim_reent+0x40>
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f002 f8f6 	bl	8018cb4 <_free_r>
 8016ac8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016aca:	b111      	cbz	r1, 8016ad2 <_reclaim_reent+0x4a>
 8016acc:	4620      	mov	r0, r4
 8016ace:	f002 f8f1 	bl	8018cb4 <_free_r>
 8016ad2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016ad4:	b111      	cbz	r1, 8016adc <_reclaim_reent+0x54>
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	f002 f8ec 	bl	8018cb4 <_free_r>
 8016adc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016ade:	b111      	cbz	r1, 8016ae6 <_reclaim_reent+0x5e>
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f002 f8e7 	bl	8018cb4 <_free_r>
 8016ae6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016ae8:	b111      	cbz	r1, 8016af0 <_reclaim_reent+0x68>
 8016aea:	4620      	mov	r0, r4
 8016aec:	f002 f8e2 	bl	8018cb4 <_free_r>
 8016af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016af2:	b111      	cbz	r1, 8016afa <_reclaim_reent+0x72>
 8016af4:	4620      	mov	r0, r4
 8016af6:	f002 f8dd 	bl	8018cb4 <_free_r>
 8016afa:	69a3      	ldr	r3, [r4, #24]
 8016afc:	b1e3      	cbz	r3, 8016b38 <_reclaim_reent+0xb0>
 8016afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b00:	4620      	mov	r0, r4
 8016b02:	4798      	blx	r3
 8016b04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016b06:	b1b9      	cbz	r1, 8016b38 <_reclaim_reent+0xb0>
 8016b08:	4620      	mov	r0, r4
 8016b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b0e:	f7ff bfad 	b.w	8016a6c <cleanup_glue>
 8016b12:	5949      	ldr	r1, [r1, r5]
 8016b14:	b941      	cbnz	r1, 8016b28 <_reclaim_reent+0xa0>
 8016b16:	3504      	adds	r5, #4
 8016b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b1a:	2d80      	cmp	r5, #128	; 0x80
 8016b1c:	68d9      	ldr	r1, [r3, #12]
 8016b1e:	d1f8      	bne.n	8016b12 <_reclaim_reent+0x8a>
 8016b20:	4620      	mov	r0, r4
 8016b22:	f002 f8c7 	bl	8018cb4 <_free_r>
 8016b26:	e7ba      	b.n	8016a9e <_reclaim_reent+0x16>
 8016b28:	680e      	ldr	r6, [r1, #0]
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	f002 f8c2 	bl	8018cb4 <_free_r>
 8016b30:	4631      	mov	r1, r6
 8016b32:	e7ef      	b.n	8016b14 <_reclaim_reent+0x8c>
 8016b34:	2500      	movs	r5, #0
 8016b36:	e7ef      	b.n	8016b18 <_reclaim_reent+0x90>
 8016b38:	bd70      	pop	{r4, r5, r6, pc}
 8016b3a:	bf00      	nop
 8016b3c:	2000002c 	.word	0x2000002c

08016b40 <_sbrk_r>:
 8016b40:	b538      	push	{r3, r4, r5, lr}
 8016b42:	4d06      	ldr	r5, [pc, #24]	; (8016b5c <_sbrk_r+0x1c>)
 8016b44:	2300      	movs	r3, #0
 8016b46:	4604      	mov	r4, r0
 8016b48:	4608      	mov	r0, r1
 8016b4a:	602b      	str	r3, [r5, #0]
 8016b4c:	f7ea fdc4 	bl	80016d8 <_sbrk>
 8016b50:	1c43      	adds	r3, r0, #1
 8016b52:	d102      	bne.n	8016b5a <_sbrk_r+0x1a>
 8016b54:	682b      	ldr	r3, [r5, #0]
 8016b56:	b103      	cbz	r3, 8016b5a <_sbrk_r+0x1a>
 8016b58:	6023      	str	r3, [r4, #0]
 8016b5a:	bd38      	pop	{r3, r4, r5, pc}
 8016b5c:	20011cb0 	.word	0x20011cb0

08016b60 <siprintf>:
 8016b60:	b40e      	push	{r1, r2, r3}
 8016b62:	b500      	push	{lr}
 8016b64:	b09c      	sub	sp, #112	; 0x70
 8016b66:	ab1d      	add	r3, sp, #116	; 0x74
 8016b68:	9002      	str	r0, [sp, #8]
 8016b6a:	9006      	str	r0, [sp, #24]
 8016b6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b70:	4809      	ldr	r0, [pc, #36]	; (8016b98 <siprintf+0x38>)
 8016b72:	9107      	str	r1, [sp, #28]
 8016b74:	9104      	str	r1, [sp, #16]
 8016b76:	4909      	ldr	r1, [pc, #36]	; (8016b9c <siprintf+0x3c>)
 8016b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b7c:	9105      	str	r1, [sp, #20]
 8016b7e:	6800      	ldr	r0, [r0, #0]
 8016b80:	9301      	str	r3, [sp, #4]
 8016b82:	a902      	add	r1, sp, #8
 8016b84:	f002 f93e 	bl	8018e04 <_svfiprintf_r>
 8016b88:	9b02      	ldr	r3, [sp, #8]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	701a      	strb	r2, [r3, #0]
 8016b8e:	b01c      	add	sp, #112	; 0x70
 8016b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b94:	b003      	add	sp, #12
 8016b96:	4770      	bx	lr
 8016b98:	2000002c 	.word	0x2000002c
 8016b9c:	ffff0208 	.word	0xffff0208

08016ba0 <__sread>:
 8016ba0:	b510      	push	{r4, lr}
 8016ba2:	460c      	mov	r4, r1
 8016ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ba8:	f002 fd1a 	bl	80195e0 <_read_r>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	bfab      	itete	ge
 8016bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8016bb4:	181b      	addge	r3, r3, r0
 8016bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bba:	bfac      	ite	ge
 8016bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bbe:	81a3      	strhlt	r3, [r4, #12]
 8016bc0:	bd10      	pop	{r4, pc}

08016bc2 <__swrite>:
 8016bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc6:	461f      	mov	r7, r3
 8016bc8:	898b      	ldrh	r3, [r1, #12]
 8016bca:	05db      	lsls	r3, r3, #23
 8016bcc:	4605      	mov	r5, r0
 8016bce:	460c      	mov	r4, r1
 8016bd0:	4616      	mov	r6, r2
 8016bd2:	d505      	bpl.n	8016be0 <__swrite+0x1e>
 8016bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd8:	2302      	movs	r3, #2
 8016bda:	2200      	movs	r2, #0
 8016bdc:	f001 fb5a 	bl	8018294 <_lseek_r>
 8016be0:	89a3      	ldrh	r3, [r4, #12]
 8016be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016bea:	81a3      	strh	r3, [r4, #12]
 8016bec:	4632      	mov	r2, r6
 8016bee:	463b      	mov	r3, r7
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf6:	f000 bec9 	b.w	801798c <_write_r>

08016bfa <__sseek>:
 8016bfa:	b510      	push	{r4, lr}
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c02:	f001 fb47 	bl	8018294 <_lseek_r>
 8016c06:	1c43      	adds	r3, r0, #1
 8016c08:	89a3      	ldrh	r3, [r4, #12]
 8016c0a:	bf15      	itete	ne
 8016c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c16:	81a3      	strheq	r3, [r4, #12]
 8016c18:	bf18      	it	ne
 8016c1a:	81a3      	strhne	r3, [r4, #12]
 8016c1c:	bd10      	pop	{r4, pc}

08016c1e <__sclose>:
 8016c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c22:	f000 bee3 	b.w	80179ec <_close_r>

08016c26 <strncmp>:
 8016c26:	b510      	push	{r4, lr}
 8016c28:	b17a      	cbz	r2, 8016c4a <strncmp+0x24>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	3901      	subs	r1, #1
 8016c2e:	1884      	adds	r4, r0, r2
 8016c30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016c34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016c38:	4290      	cmp	r0, r2
 8016c3a:	d101      	bne.n	8016c40 <strncmp+0x1a>
 8016c3c:	42a3      	cmp	r3, r4
 8016c3e:	d101      	bne.n	8016c44 <strncmp+0x1e>
 8016c40:	1a80      	subs	r0, r0, r2
 8016c42:	bd10      	pop	{r4, pc}
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d1f3      	bne.n	8016c30 <strncmp+0xa>
 8016c48:	e7fa      	b.n	8016c40 <strncmp+0x1a>
 8016c4a:	4610      	mov	r0, r2
 8016c4c:	e7f9      	b.n	8016c42 <strncmp+0x1c>

08016c4e <strncpy>:
 8016c4e:	b510      	push	{r4, lr}
 8016c50:	3901      	subs	r1, #1
 8016c52:	4603      	mov	r3, r0
 8016c54:	b132      	cbz	r2, 8016c64 <strncpy+0x16>
 8016c56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c5a:	f803 4b01 	strb.w	r4, [r3], #1
 8016c5e:	3a01      	subs	r2, #1
 8016c60:	2c00      	cmp	r4, #0
 8016c62:	d1f7      	bne.n	8016c54 <strncpy+0x6>
 8016c64:	441a      	add	r2, r3
 8016c66:	2100      	movs	r1, #0
 8016c68:	4293      	cmp	r3, r2
 8016c6a:	d100      	bne.n	8016c6e <strncpy+0x20>
 8016c6c:	bd10      	pop	{r4, pc}
 8016c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8016c72:	e7f9      	b.n	8016c68 <strncpy+0x1a>

08016c74 <sulp>:
 8016c74:	b570      	push	{r4, r5, r6, lr}
 8016c76:	4604      	mov	r4, r0
 8016c78:	460d      	mov	r5, r1
 8016c7a:	ec45 4b10 	vmov	d0, r4, r5
 8016c7e:	4616      	mov	r6, r2
 8016c80:	f001 feb2 	bl	80189e8 <__ulp>
 8016c84:	ec51 0b10 	vmov	r0, r1, d0
 8016c88:	b17e      	cbz	r6, 8016caa <sulp+0x36>
 8016c8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	dd09      	ble.n	8016caa <sulp+0x36>
 8016c96:	051b      	lsls	r3, r3, #20
 8016c98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c9c:	2400      	movs	r4, #0
 8016c9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016ca2:	4622      	mov	r2, r4
 8016ca4:	462b      	mov	r3, r5
 8016ca6:	f7e9 fcc7 	bl	8000638 <__aeabi_dmul>
 8016caa:	bd70      	pop	{r4, r5, r6, pc}
 8016cac:	0000      	movs	r0, r0
	...

08016cb0 <_strtod_l>:
 8016cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb4:	ed2d 8b02 	vpush	{d8}
 8016cb8:	b09d      	sub	sp, #116	; 0x74
 8016cba:	461f      	mov	r7, r3
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	9318      	str	r3, [sp, #96]	; 0x60
 8016cc0:	4ba2      	ldr	r3, [pc, #648]	; (8016f4c <_strtod_l+0x29c>)
 8016cc2:	9213      	str	r2, [sp, #76]	; 0x4c
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	9305      	str	r3, [sp, #20]
 8016cc8:	4604      	mov	r4, r0
 8016cca:	4618      	mov	r0, r3
 8016ccc:	4688      	mov	r8, r1
 8016cce:	f7e9 fa9f 	bl	8000210 <strlen>
 8016cd2:	f04f 0a00 	mov.w	sl, #0
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	f04f 0b00 	mov.w	fp, #0
 8016cdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ce2:	781a      	ldrb	r2, [r3, #0]
 8016ce4:	2a2b      	cmp	r2, #43	; 0x2b
 8016ce6:	d04e      	beq.n	8016d86 <_strtod_l+0xd6>
 8016ce8:	d83b      	bhi.n	8016d62 <_strtod_l+0xb2>
 8016cea:	2a0d      	cmp	r2, #13
 8016cec:	d834      	bhi.n	8016d58 <_strtod_l+0xa8>
 8016cee:	2a08      	cmp	r2, #8
 8016cf0:	d834      	bhi.n	8016d5c <_strtod_l+0xac>
 8016cf2:	2a00      	cmp	r2, #0
 8016cf4:	d03e      	beq.n	8016d74 <_strtod_l+0xc4>
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8016cfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016cfc:	7833      	ldrb	r3, [r6, #0]
 8016cfe:	2b30      	cmp	r3, #48	; 0x30
 8016d00:	f040 80b0 	bne.w	8016e64 <_strtod_l+0x1b4>
 8016d04:	7873      	ldrb	r3, [r6, #1]
 8016d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016d0a:	2b58      	cmp	r3, #88	; 0x58
 8016d0c:	d168      	bne.n	8016de0 <_strtod_l+0x130>
 8016d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d10:	9301      	str	r3, [sp, #4]
 8016d12:	ab18      	add	r3, sp, #96	; 0x60
 8016d14:	9702      	str	r7, [sp, #8]
 8016d16:	9300      	str	r3, [sp, #0]
 8016d18:	4a8d      	ldr	r2, [pc, #564]	; (8016f50 <_strtod_l+0x2a0>)
 8016d1a:	ab19      	add	r3, sp, #100	; 0x64
 8016d1c:	a917      	add	r1, sp, #92	; 0x5c
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f000 ffb0 	bl	8017c84 <__gethex>
 8016d24:	f010 0707 	ands.w	r7, r0, #7
 8016d28:	4605      	mov	r5, r0
 8016d2a:	d005      	beq.n	8016d38 <_strtod_l+0x88>
 8016d2c:	2f06      	cmp	r7, #6
 8016d2e:	d12c      	bne.n	8016d8a <_strtod_l+0xda>
 8016d30:	3601      	adds	r6, #1
 8016d32:	2300      	movs	r3, #0
 8016d34:	9617      	str	r6, [sp, #92]	; 0x5c
 8016d36:	930a      	str	r3, [sp, #40]	; 0x28
 8016d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	f040 8590 	bne.w	8017860 <_strtod_l+0xbb0>
 8016d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d42:	b1eb      	cbz	r3, 8016d80 <_strtod_l+0xd0>
 8016d44:	4652      	mov	r2, sl
 8016d46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016d4a:	ec43 2b10 	vmov	d0, r2, r3
 8016d4e:	b01d      	add	sp, #116	; 0x74
 8016d50:	ecbd 8b02 	vpop	{d8}
 8016d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d58:	2a20      	cmp	r2, #32
 8016d5a:	d1cc      	bne.n	8016cf6 <_strtod_l+0x46>
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d60:	e7be      	b.n	8016ce0 <_strtod_l+0x30>
 8016d62:	2a2d      	cmp	r2, #45	; 0x2d
 8016d64:	d1c7      	bne.n	8016cf6 <_strtod_l+0x46>
 8016d66:	2201      	movs	r2, #1
 8016d68:	920a      	str	r2, [sp, #40]	; 0x28
 8016d6a:	1c5a      	adds	r2, r3, #1
 8016d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d6e:	785b      	ldrb	r3, [r3, #1]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d1c2      	bne.n	8016cfa <_strtod_l+0x4a>
 8016d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f040 856e 	bne.w	801785c <_strtod_l+0xbac>
 8016d80:	4652      	mov	r2, sl
 8016d82:	465b      	mov	r3, fp
 8016d84:	e7e1      	b.n	8016d4a <_strtod_l+0x9a>
 8016d86:	2200      	movs	r2, #0
 8016d88:	e7ee      	b.n	8016d68 <_strtod_l+0xb8>
 8016d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016d8c:	b13a      	cbz	r2, 8016d9e <_strtod_l+0xee>
 8016d8e:	2135      	movs	r1, #53	; 0x35
 8016d90:	a81a      	add	r0, sp, #104	; 0x68
 8016d92:	f001 ff34 	bl	8018bfe <__copybits>
 8016d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f001 faf3 	bl	8018384 <_Bfree>
 8016d9e:	3f01      	subs	r7, #1
 8016da0:	2f04      	cmp	r7, #4
 8016da2:	d806      	bhi.n	8016db2 <_strtod_l+0x102>
 8016da4:	e8df f007 	tbb	[pc, r7]
 8016da8:	1714030a 	.word	0x1714030a
 8016dac:	0a          	.byte	0x0a
 8016dad:	00          	.byte	0x00
 8016dae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8016db2:	0728      	lsls	r0, r5, #28
 8016db4:	d5c0      	bpl.n	8016d38 <_strtod_l+0x88>
 8016db6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016dba:	e7bd      	b.n	8016d38 <_strtod_l+0x88>
 8016dbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8016dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016dc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016dca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016dce:	e7f0      	b.n	8016db2 <_strtod_l+0x102>
 8016dd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8016f54 <_strtod_l+0x2a4>
 8016dd4:	e7ed      	b.n	8016db2 <_strtod_l+0x102>
 8016dd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016dda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016dde:	e7e8      	b.n	8016db2 <_strtod_l+0x102>
 8016de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016de2:	1c5a      	adds	r2, r3, #1
 8016de4:	9217      	str	r2, [sp, #92]	; 0x5c
 8016de6:	785b      	ldrb	r3, [r3, #1]
 8016de8:	2b30      	cmp	r3, #48	; 0x30
 8016dea:	d0f9      	beq.n	8016de0 <_strtod_l+0x130>
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d0a3      	beq.n	8016d38 <_strtod_l+0x88>
 8016df0:	2301      	movs	r3, #1
 8016df2:	f04f 0900 	mov.w	r9, #0
 8016df6:	9304      	str	r3, [sp, #16]
 8016df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016dfa:	9308      	str	r3, [sp, #32]
 8016dfc:	f8cd 901c 	str.w	r9, [sp, #28]
 8016e00:	464f      	mov	r7, r9
 8016e02:	220a      	movs	r2, #10
 8016e04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016e06:	7806      	ldrb	r6, [r0, #0]
 8016e08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016e0c:	b2d9      	uxtb	r1, r3
 8016e0e:	2909      	cmp	r1, #9
 8016e10:	d92a      	bls.n	8016e68 <_strtod_l+0x1b8>
 8016e12:	9905      	ldr	r1, [sp, #20]
 8016e14:	462a      	mov	r2, r5
 8016e16:	f7ff ff06 	bl	8016c26 <strncmp>
 8016e1a:	b398      	cbz	r0, 8016e84 <_strtod_l+0x1d4>
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	4632      	mov	r2, r6
 8016e20:	463d      	mov	r5, r7
 8016e22:	9005      	str	r0, [sp, #20]
 8016e24:	4603      	mov	r3, r0
 8016e26:	2a65      	cmp	r2, #101	; 0x65
 8016e28:	d001      	beq.n	8016e2e <_strtod_l+0x17e>
 8016e2a:	2a45      	cmp	r2, #69	; 0x45
 8016e2c:	d118      	bne.n	8016e60 <_strtod_l+0x1b0>
 8016e2e:	b91d      	cbnz	r5, 8016e38 <_strtod_l+0x188>
 8016e30:	9a04      	ldr	r2, [sp, #16]
 8016e32:	4302      	orrs	r2, r0
 8016e34:	d09e      	beq.n	8016d74 <_strtod_l+0xc4>
 8016e36:	2500      	movs	r5, #0
 8016e38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016e3c:	f108 0201 	add.w	r2, r8, #1
 8016e40:	9217      	str	r2, [sp, #92]	; 0x5c
 8016e42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016e46:	2a2b      	cmp	r2, #43	; 0x2b
 8016e48:	d075      	beq.n	8016f36 <_strtod_l+0x286>
 8016e4a:	2a2d      	cmp	r2, #45	; 0x2d
 8016e4c:	d07b      	beq.n	8016f46 <_strtod_l+0x296>
 8016e4e:	f04f 0c00 	mov.w	ip, #0
 8016e52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016e56:	2909      	cmp	r1, #9
 8016e58:	f240 8082 	bls.w	8016f60 <_strtod_l+0x2b0>
 8016e5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016e60:	2600      	movs	r6, #0
 8016e62:	e09d      	b.n	8016fa0 <_strtod_l+0x2f0>
 8016e64:	2300      	movs	r3, #0
 8016e66:	e7c4      	b.n	8016df2 <_strtod_l+0x142>
 8016e68:	2f08      	cmp	r7, #8
 8016e6a:	bfd8      	it	le
 8016e6c:	9907      	ldrle	r1, [sp, #28]
 8016e6e:	f100 0001 	add.w	r0, r0, #1
 8016e72:	bfda      	itte	le
 8016e74:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e78:	9307      	strle	r3, [sp, #28]
 8016e7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016e7e:	3701      	adds	r7, #1
 8016e80:	9017      	str	r0, [sp, #92]	; 0x5c
 8016e82:	e7bf      	b.n	8016e04 <_strtod_l+0x154>
 8016e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e86:	195a      	adds	r2, r3, r5
 8016e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8016e8a:	5d5a      	ldrb	r2, [r3, r5]
 8016e8c:	2f00      	cmp	r7, #0
 8016e8e:	d037      	beq.n	8016f00 <_strtod_l+0x250>
 8016e90:	9005      	str	r0, [sp, #20]
 8016e92:	463d      	mov	r5, r7
 8016e94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016e98:	2b09      	cmp	r3, #9
 8016e9a:	d912      	bls.n	8016ec2 <_strtod_l+0x212>
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	e7c2      	b.n	8016e26 <_strtod_l+0x176>
 8016ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ea2:	1c5a      	adds	r2, r3, #1
 8016ea4:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ea6:	785a      	ldrb	r2, [r3, #1]
 8016ea8:	3001      	adds	r0, #1
 8016eaa:	2a30      	cmp	r2, #48	; 0x30
 8016eac:	d0f8      	beq.n	8016ea0 <_strtod_l+0x1f0>
 8016eae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016eb2:	2b08      	cmp	r3, #8
 8016eb4:	f200 84d9 	bhi.w	801786a <_strtod_l+0xbba>
 8016eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016eba:	9005      	str	r0, [sp, #20]
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	9308      	str	r3, [sp, #32]
 8016ec0:	4605      	mov	r5, r0
 8016ec2:	3a30      	subs	r2, #48	; 0x30
 8016ec4:	f100 0301 	add.w	r3, r0, #1
 8016ec8:	d014      	beq.n	8016ef4 <_strtod_l+0x244>
 8016eca:	9905      	ldr	r1, [sp, #20]
 8016ecc:	4419      	add	r1, r3
 8016ece:	9105      	str	r1, [sp, #20]
 8016ed0:	462b      	mov	r3, r5
 8016ed2:	eb00 0e05 	add.w	lr, r0, r5
 8016ed6:	210a      	movs	r1, #10
 8016ed8:	4573      	cmp	r3, lr
 8016eda:	d113      	bne.n	8016f04 <_strtod_l+0x254>
 8016edc:	182b      	adds	r3, r5, r0
 8016ede:	2b08      	cmp	r3, #8
 8016ee0:	f105 0501 	add.w	r5, r5, #1
 8016ee4:	4405      	add	r5, r0
 8016ee6:	dc1c      	bgt.n	8016f22 <_strtod_l+0x272>
 8016ee8:	9907      	ldr	r1, [sp, #28]
 8016eea:	230a      	movs	r3, #10
 8016eec:	fb03 2301 	mla	r3, r3, r1, r2
 8016ef0:	9307      	str	r3, [sp, #28]
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ef6:	1c51      	adds	r1, r2, #1
 8016ef8:	9117      	str	r1, [sp, #92]	; 0x5c
 8016efa:	7852      	ldrb	r2, [r2, #1]
 8016efc:	4618      	mov	r0, r3
 8016efe:	e7c9      	b.n	8016e94 <_strtod_l+0x1e4>
 8016f00:	4638      	mov	r0, r7
 8016f02:	e7d2      	b.n	8016eaa <_strtod_l+0x1fa>
 8016f04:	2b08      	cmp	r3, #8
 8016f06:	dc04      	bgt.n	8016f12 <_strtod_l+0x262>
 8016f08:	9e07      	ldr	r6, [sp, #28]
 8016f0a:	434e      	muls	r6, r1
 8016f0c:	9607      	str	r6, [sp, #28]
 8016f0e:	3301      	adds	r3, #1
 8016f10:	e7e2      	b.n	8016ed8 <_strtod_l+0x228>
 8016f12:	f103 0c01 	add.w	ip, r3, #1
 8016f16:	f1bc 0f10 	cmp.w	ip, #16
 8016f1a:	bfd8      	it	le
 8016f1c:	fb01 f909 	mulle.w	r9, r1, r9
 8016f20:	e7f5      	b.n	8016f0e <_strtod_l+0x25e>
 8016f22:	2d10      	cmp	r5, #16
 8016f24:	bfdc      	itt	le
 8016f26:	230a      	movle	r3, #10
 8016f28:	fb03 2909 	mlale	r9, r3, r9, r2
 8016f2c:	e7e1      	b.n	8016ef2 <_strtod_l+0x242>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	9305      	str	r3, [sp, #20]
 8016f32:	2301      	movs	r3, #1
 8016f34:	e77c      	b.n	8016e30 <_strtod_l+0x180>
 8016f36:	f04f 0c00 	mov.w	ip, #0
 8016f3a:	f108 0202 	add.w	r2, r8, #2
 8016f3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8016f40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016f44:	e785      	b.n	8016e52 <_strtod_l+0x1a2>
 8016f46:	f04f 0c01 	mov.w	ip, #1
 8016f4a:	e7f6      	b.n	8016f3a <_strtod_l+0x28a>
 8016f4c:	0801d0e0 	.word	0x0801d0e0
 8016f50:	0801cf7c 	.word	0x0801cf7c
 8016f54:	7ff00000 	.word	0x7ff00000
 8016f58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f5a:	1c51      	adds	r1, r2, #1
 8016f5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8016f5e:	7852      	ldrb	r2, [r2, #1]
 8016f60:	2a30      	cmp	r2, #48	; 0x30
 8016f62:	d0f9      	beq.n	8016f58 <_strtod_l+0x2a8>
 8016f64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016f68:	2908      	cmp	r1, #8
 8016f6a:	f63f af79 	bhi.w	8016e60 <_strtod_l+0x1b0>
 8016f6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016f72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f74:	9206      	str	r2, [sp, #24]
 8016f76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f78:	1c51      	adds	r1, r2, #1
 8016f7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8016f7c:	7852      	ldrb	r2, [r2, #1]
 8016f7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016f82:	2e09      	cmp	r6, #9
 8016f84:	d937      	bls.n	8016ff6 <_strtod_l+0x346>
 8016f86:	9e06      	ldr	r6, [sp, #24]
 8016f88:	1b89      	subs	r1, r1, r6
 8016f8a:	2908      	cmp	r1, #8
 8016f8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016f90:	dc02      	bgt.n	8016f98 <_strtod_l+0x2e8>
 8016f92:	4576      	cmp	r6, lr
 8016f94:	bfa8      	it	ge
 8016f96:	4676      	movge	r6, lr
 8016f98:	f1bc 0f00 	cmp.w	ip, #0
 8016f9c:	d000      	beq.n	8016fa0 <_strtod_l+0x2f0>
 8016f9e:	4276      	negs	r6, r6
 8016fa0:	2d00      	cmp	r5, #0
 8016fa2:	d14d      	bne.n	8017040 <_strtod_l+0x390>
 8016fa4:	9904      	ldr	r1, [sp, #16]
 8016fa6:	4301      	orrs	r1, r0
 8016fa8:	f47f aec6 	bne.w	8016d38 <_strtod_l+0x88>
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	f47f aee1 	bne.w	8016d74 <_strtod_l+0xc4>
 8016fb2:	2a69      	cmp	r2, #105	; 0x69
 8016fb4:	d027      	beq.n	8017006 <_strtod_l+0x356>
 8016fb6:	dc24      	bgt.n	8017002 <_strtod_l+0x352>
 8016fb8:	2a49      	cmp	r2, #73	; 0x49
 8016fba:	d024      	beq.n	8017006 <_strtod_l+0x356>
 8016fbc:	2a4e      	cmp	r2, #78	; 0x4e
 8016fbe:	f47f aed9 	bne.w	8016d74 <_strtod_l+0xc4>
 8016fc2:	499f      	ldr	r1, [pc, #636]	; (8017240 <_strtod_l+0x590>)
 8016fc4:	a817      	add	r0, sp, #92	; 0x5c
 8016fc6:	f001 f8b5 	bl	8018134 <__match>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	f43f aed2 	beq.w	8016d74 <_strtod_l+0xc4>
 8016fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	2b28      	cmp	r3, #40	; 0x28
 8016fd6:	d12d      	bne.n	8017034 <_strtod_l+0x384>
 8016fd8:	499a      	ldr	r1, [pc, #616]	; (8017244 <_strtod_l+0x594>)
 8016fda:	aa1a      	add	r2, sp, #104	; 0x68
 8016fdc:	a817      	add	r0, sp, #92	; 0x5c
 8016fde:	f001 f8bd 	bl	801815c <__hexnan>
 8016fe2:	2805      	cmp	r0, #5
 8016fe4:	d126      	bne.n	8017034 <_strtod_l+0x384>
 8016fe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fe8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8016fec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016ff0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016ff4:	e6a0      	b.n	8016d38 <_strtod_l+0x88>
 8016ff6:	210a      	movs	r1, #10
 8016ff8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8016ffc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017000:	e7b9      	b.n	8016f76 <_strtod_l+0x2c6>
 8017002:	2a6e      	cmp	r2, #110	; 0x6e
 8017004:	e7db      	b.n	8016fbe <_strtod_l+0x30e>
 8017006:	4990      	ldr	r1, [pc, #576]	; (8017248 <_strtod_l+0x598>)
 8017008:	a817      	add	r0, sp, #92	; 0x5c
 801700a:	f001 f893 	bl	8018134 <__match>
 801700e:	2800      	cmp	r0, #0
 8017010:	f43f aeb0 	beq.w	8016d74 <_strtod_l+0xc4>
 8017014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017016:	498d      	ldr	r1, [pc, #564]	; (801724c <_strtod_l+0x59c>)
 8017018:	3b01      	subs	r3, #1
 801701a:	a817      	add	r0, sp, #92	; 0x5c
 801701c:	9317      	str	r3, [sp, #92]	; 0x5c
 801701e:	f001 f889 	bl	8018134 <__match>
 8017022:	b910      	cbnz	r0, 801702a <_strtod_l+0x37a>
 8017024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017026:	3301      	adds	r3, #1
 8017028:	9317      	str	r3, [sp, #92]	; 0x5c
 801702a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801725c <_strtod_l+0x5ac>
 801702e:	f04f 0a00 	mov.w	sl, #0
 8017032:	e681      	b.n	8016d38 <_strtod_l+0x88>
 8017034:	4886      	ldr	r0, [pc, #536]	; (8017250 <_strtod_l+0x5a0>)
 8017036:	f002 fae7 	bl	8019608 <nan>
 801703a:	ec5b ab10 	vmov	sl, fp, d0
 801703e:	e67b      	b.n	8016d38 <_strtod_l+0x88>
 8017040:	9b05      	ldr	r3, [sp, #20]
 8017042:	9807      	ldr	r0, [sp, #28]
 8017044:	1af3      	subs	r3, r6, r3
 8017046:	2f00      	cmp	r7, #0
 8017048:	bf08      	it	eq
 801704a:	462f      	moveq	r7, r5
 801704c:	2d10      	cmp	r5, #16
 801704e:	9306      	str	r3, [sp, #24]
 8017050:	46a8      	mov	r8, r5
 8017052:	bfa8      	it	ge
 8017054:	f04f 0810 	movge.w	r8, #16
 8017058:	f7e9 fa74 	bl	8000544 <__aeabi_ui2d>
 801705c:	2d09      	cmp	r5, #9
 801705e:	4682      	mov	sl, r0
 8017060:	468b      	mov	fp, r1
 8017062:	dd13      	ble.n	801708c <_strtod_l+0x3dc>
 8017064:	4b7b      	ldr	r3, [pc, #492]	; (8017254 <_strtod_l+0x5a4>)
 8017066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801706a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801706e:	f7e9 fae3 	bl	8000638 <__aeabi_dmul>
 8017072:	4682      	mov	sl, r0
 8017074:	4648      	mov	r0, r9
 8017076:	468b      	mov	fp, r1
 8017078:	f7e9 fa64 	bl	8000544 <__aeabi_ui2d>
 801707c:	4602      	mov	r2, r0
 801707e:	460b      	mov	r3, r1
 8017080:	4650      	mov	r0, sl
 8017082:	4659      	mov	r1, fp
 8017084:	f7e9 f922 	bl	80002cc <__adddf3>
 8017088:	4682      	mov	sl, r0
 801708a:	468b      	mov	fp, r1
 801708c:	2d0f      	cmp	r5, #15
 801708e:	dc38      	bgt.n	8017102 <_strtod_l+0x452>
 8017090:	9b06      	ldr	r3, [sp, #24]
 8017092:	2b00      	cmp	r3, #0
 8017094:	f43f ae50 	beq.w	8016d38 <_strtod_l+0x88>
 8017098:	dd24      	ble.n	80170e4 <_strtod_l+0x434>
 801709a:	2b16      	cmp	r3, #22
 801709c:	dc0b      	bgt.n	80170b6 <_strtod_l+0x406>
 801709e:	496d      	ldr	r1, [pc, #436]	; (8017254 <_strtod_l+0x5a4>)
 80170a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80170a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170a8:	4652      	mov	r2, sl
 80170aa:	465b      	mov	r3, fp
 80170ac:	f7e9 fac4 	bl	8000638 <__aeabi_dmul>
 80170b0:	4682      	mov	sl, r0
 80170b2:	468b      	mov	fp, r1
 80170b4:	e640      	b.n	8016d38 <_strtod_l+0x88>
 80170b6:	9a06      	ldr	r2, [sp, #24]
 80170b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80170bc:	4293      	cmp	r3, r2
 80170be:	db20      	blt.n	8017102 <_strtod_l+0x452>
 80170c0:	4c64      	ldr	r4, [pc, #400]	; (8017254 <_strtod_l+0x5a4>)
 80170c2:	f1c5 050f 	rsb	r5, r5, #15
 80170c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80170ca:	4652      	mov	r2, sl
 80170cc:	465b      	mov	r3, fp
 80170ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170d2:	f7e9 fab1 	bl	8000638 <__aeabi_dmul>
 80170d6:	9b06      	ldr	r3, [sp, #24]
 80170d8:	1b5d      	subs	r5, r3, r5
 80170da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80170de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170e2:	e7e3      	b.n	80170ac <_strtod_l+0x3fc>
 80170e4:	9b06      	ldr	r3, [sp, #24]
 80170e6:	3316      	adds	r3, #22
 80170e8:	db0b      	blt.n	8017102 <_strtod_l+0x452>
 80170ea:	9b05      	ldr	r3, [sp, #20]
 80170ec:	1b9e      	subs	r6, r3, r6
 80170ee:	4b59      	ldr	r3, [pc, #356]	; (8017254 <_strtod_l+0x5a4>)
 80170f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80170f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80170f8:	4650      	mov	r0, sl
 80170fa:	4659      	mov	r1, fp
 80170fc:	f7e9 fbc6 	bl	800088c <__aeabi_ddiv>
 8017100:	e7d6      	b.n	80170b0 <_strtod_l+0x400>
 8017102:	9b06      	ldr	r3, [sp, #24]
 8017104:	eba5 0808 	sub.w	r8, r5, r8
 8017108:	4498      	add	r8, r3
 801710a:	f1b8 0f00 	cmp.w	r8, #0
 801710e:	dd74      	ble.n	80171fa <_strtod_l+0x54a>
 8017110:	f018 030f 	ands.w	r3, r8, #15
 8017114:	d00a      	beq.n	801712c <_strtod_l+0x47c>
 8017116:	494f      	ldr	r1, [pc, #316]	; (8017254 <_strtod_l+0x5a4>)
 8017118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801711c:	4652      	mov	r2, sl
 801711e:	465b      	mov	r3, fp
 8017120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017124:	f7e9 fa88 	bl	8000638 <__aeabi_dmul>
 8017128:	4682      	mov	sl, r0
 801712a:	468b      	mov	fp, r1
 801712c:	f038 080f 	bics.w	r8, r8, #15
 8017130:	d04f      	beq.n	80171d2 <_strtod_l+0x522>
 8017132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017136:	dd22      	ble.n	801717e <_strtod_l+0x4ce>
 8017138:	2500      	movs	r5, #0
 801713a:	462e      	mov	r6, r5
 801713c:	9507      	str	r5, [sp, #28]
 801713e:	9505      	str	r5, [sp, #20]
 8017140:	2322      	movs	r3, #34	; 0x22
 8017142:	f8df b118 	ldr.w	fp, [pc, #280]	; 801725c <_strtod_l+0x5ac>
 8017146:	6023      	str	r3, [r4, #0]
 8017148:	f04f 0a00 	mov.w	sl, #0
 801714c:	9b07      	ldr	r3, [sp, #28]
 801714e:	2b00      	cmp	r3, #0
 8017150:	f43f adf2 	beq.w	8016d38 <_strtod_l+0x88>
 8017154:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017156:	4620      	mov	r0, r4
 8017158:	f001 f914 	bl	8018384 <_Bfree>
 801715c:	9905      	ldr	r1, [sp, #20]
 801715e:	4620      	mov	r0, r4
 8017160:	f001 f910 	bl	8018384 <_Bfree>
 8017164:	4631      	mov	r1, r6
 8017166:	4620      	mov	r0, r4
 8017168:	f001 f90c 	bl	8018384 <_Bfree>
 801716c:	9907      	ldr	r1, [sp, #28]
 801716e:	4620      	mov	r0, r4
 8017170:	f001 f908 	bl	8018384 <_Bfree>
 8017174:	4629      	mov	r1, r5
 8017176:	4620      	mov	r0, r4
 8017178:	f001 f904 	bl	8018384 <_Bfree>
 801717c:	e5dc      	b.n	8016d38 <_strtod_l+0x88>
 801717e:	4b36      	ldr	r3, [pc, #216]	; (8017258 <_strtod_l+0x5a8>)
 8017180:	9304      	str	r3, [sp, #16]
 8017182:	2300      	movs	r3, #0
 8017184:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017188:	4650      	mov	r0, sl
 801718a:	4659      	mov	r1, fp
 801718c:	4699      	mov	r9, r3
 801718e:	f1b8 0f01 	cmp.w	r8, #1
 8017192:	dc21      	bgt.n	80171d8 <_strtod_l+0x528>
 8017194:	b10b      	cbz	r3, 801719a <_strtod_l+0x4ea>
 8017196:	4682      	mov	sl, r0
 8017198:	468b      	mov	fp, r1
 801719a:	4b2f      	ldr	r3, [pc, #188]	; (8017258 <_strtod_l+0x5a8>)
 801719c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80171a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80171a4:	4652      	mov	r2, sl
 80171a6:	465b      	mov	r3, fp
 80171a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80171ac:	f7e9 fa44 	bl	8000638 <__aeabi_dmul>
 80171b0:	4b2a      	ldr	r3, [pc, #168]	; (801725c <_strtod_l+0x5ac>)
 80171b2:	460a      	mov	r2, r1
 80171b4:	400b      	ands	r3, r1
 80171b6:	492a      	ldr	r1, [pc, #168]	; (8017260 <_strtod_l+0x5b0>)
 80171b8:	428b      	cmp	r3, r1
 80171ba:	4682      	mov	sl, r0
 80171bc:	d8bc      	bhi.n	8017138 <_strtod_l+0x488>
 80171be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80171c2:	428b      	cmp	r3, r1
 80171c4:	bf86      	itte	hi
 80171c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8017264 <_strtod_l+0x5b4>
 80171ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80171ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80171d2:	2300      	movs	r3, #0
 80171d4:	9304      	str	r3, [sp, #16]
 80171d6:	e084      	b.n	80172e2 <_strtod_l+0x632>
 80171d8:	f018 0f01 	tst.w	r8, #1
 80171dc:	d005      	beq.n	80171ea <_strtod_l+0x53a>
 80171de:	9b04      	ldr	r3, [sp, #16]
 80171e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e4:	f7e9 fa28 	bl	8000638 <__aeabi_dmul>
 80171e8:	2301      	movs	r3, #1
 80171ea:	9a04      	ldr	r2, [sp, #16]
 80171ec:	3208      	adds	r2, #8
 80171ee:	f109 0901 	add.w	r9, r9, #1
 80171f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80171f6:	9204      	str	r2, [sp, #16]
 80171f8:	e7c9      	b.n	801718e <_strtod_l+0x4de>
 80171fa:	d0ea      	beq.n	80171d2 <_strtod_l+0x522>
 80171fc:	f1c8 0800 	rsb	r8, r8, #0
 8017200:	f018 020f 	ands.w	r2, r8, #15
 8017204:	d00a      	beq.n	801721c <_strtod_l+0x56c>
 8017206:	4b13      	ldr	r3, [pc, #76]	; (8017254 <_strtod_l+0x5a4>)
 8017208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801720c:	4650      	mov	r0, sl
 801720e:	4659      	mov	r1, fp
 8017210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017214:	f7e9 fb3a 	bl	800088c <__aeabi_ddiv>
 8017218:	4682      	mov	sl, r0
 801721a:	468b      	mov	fp, r1
 801721c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017220:	d0d7      	beq.n	80171d2 <_strtod_l+0x522>
 8017222:	f1b8 0f1f 	cmp.w	r8, #31
 8017226:	dd1f      	ble.n	8017268 <_strtod_l+0x5b8>
 8017228:	2500      	movs	r5, #0
 801722a:	462e      	mov	r6, r5
 801722c:	9507      	str	r5, [sp, #28]
 801722e:	9505      	str	r5, [sp, #20]
 8017230:	2322      	movs	r3, #34	; 0x22
 8017232:	f04f 0a00 	mov.w	sl, #0
 8017236:	f04f 0b00 	mov.w	fp, #0
 801723a:	6023      	str	r3, [r4, #0]
 801723c:	e786      	b.n	801714c <_strtod_l+0x49c>
 801723e:	bf00      	nop
 8017240:	0801cf77 	.word	0x0801cf77
 8017244:	0801cf90 	.word	0x0801cf90
 8017248:	0801cf6e 	.word	0x0801cf6e
 801724c:	0801cf71 	.word	0x0801cf71
 8017250:	0801d068 	.word	0x0801d068
 8017254:	0801d178 	.word	0x0801d178
 8017258:	0801d150 	.word	0x0801d150
 801725c:	7ff00000 	.word	0x7ff00000
 8017260:	7ca00000 	.word	0x7ca00000
 8017264:	7fefffff 	.word	0x7fefffff
 8017268:	f018 0310 	ands.w	r3, r8, #16
 801726c:	bf18      	it	ne
 801726e:	236a      	movne	r3, #106	; 0x6a
 8017270:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8017620 <_strtod_l+0x970>
 8017274:	9304      	str	r3, [sp, #16]
 8017276:	4650      	mov	r0, sl
 8017278:	4659      	mov	r1, fp
 801727a:	2300      	movs	r3, #0
 801727c:	f018 0f01 	tst.w	r8, #1
 8017280:	d004      	beq.n	801728c <_strtod_l+0x5dc>
 8017282:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017286:	f7e9 f9d7 	bl	8000638 <__aeabi_dmul>
 801728a:	2301      	movs	r3, #1
 801728c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017290:	f109 0908 	add.w	r9, r9, #8
 8017294:	d1f2      	bne.n	801727c <_strtod_l+0x5cc>
 8017296:	b10b      	cbz	r3, 801729c <_strtod_l+0x5ec>
 8017298:	4682      	mov	sl, r0
 801729a:	468b      	mov	fp, r1
 801729c:	9b04      	ldr	r3, [sp, #16]
 801729e:	b1c3      	cbz	r3, 80172d2 <_strtod_l+0x622>
 80172a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80172a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	4659      	mov	r1, fp
 80172ac:	dd11      	ble.n	80172d2 <_strtod_l+0x622>
 80172ae:	2b1f      	cmp	r3, #31
 80172b0:	f340 8124 	ble.w	80174fc <_strtod_l+0x84c>
 80172b4:	2b34      	cmp	r3, #52	; 0x34
 80172b6:	bfde      	ittt	le
 80172b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80172bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80172c0:	fa03 f202 	lslle.w	r2, r3, r2
 80172c4:	f04f 0a00 	mov.w	sl, #0
 80172c8:	bfcc      	ite	gt
 80172ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80172ce:	ea02 0b01 	andle.w	fp, r2, r1
 80172d2:	2200      	movs	r2, #0
 80172d4:	2300      	movs	r3, #0
 80172d6:	4650      	mov	r0, sl
 80172d8:	4659      	mov	r1, fp
 80172da:	f7e9 fc15 	bl	8000b08 <__aeabi_dcmpeq>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d1a2      	bne.n	8017228 <_strtod_l+0x578>
 80172e2:	9b07      	ldr	r3, [sp, #28]
 80172e4:	9300      	str	r3, [sp, #0]
 80172e6:	9908      	ldr	r1, [sp, #32]
 80172e8:	462b      	mov	r3, r5
 80172ea:	463a      	mov	r2, r7
 80172ec:	4620      	mov	r0, r4
 80172ee:	f001 f8b1 	bl	8018454 <__s2b>
 80172f2:	9007      	str	r0, [sp, #28]
 80172f4:	2800      	cmp	r0, #0
 80172f6:	f43f af1f 	beq.w	8017138 <_strtod_l+0x488>
 80172fa:	9b05      	ldr	r3, [sp, #20]
 80172fc:	1b9e      	subs	r6, r3, r6
 80172fe:	9b06      	ldr	r3, [sp, #24]
 8017300:	2b00      	cmp	r3, #0
 8017302:	bfb4      	ite	lt
 8017304:	4633      	movlt	r3, r6
 8017306:	2300      	movge	r3, #0
 8017308:	930c      	str	r3, [sp, #48]	; 0x30
 801730a:	9b06      	ldr	r3, [sp, #24]
 801730c:	2500      	movs	r5, #0
 801730e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017312:	9312      	str	r3, [sp, #72]	; 0x48
 8017314:	462e      	mov	r6, r5
 8017316:	9b07      	ldr	r3, [sp, #28]
 8017318:	4620      	mov	r0, r4
 801731a:	6859      	ldr	r1, [r3, #4]
 801731c:	f000 fff2 	bl	8018304 <_Balloc>
 8017320:	9005      	str	r0, [sp, #20]
 8017322:	2800      	cmp	r0, #0
 8017324:	f43f af0c 	beq.w	8017140 <_strtod_l+0x490>
 8017328:	9b07      	ldr	r3, [sp, #28]
 801732a:	691a      	ldr	r2, [r3, #16]
 801732c:	3202      	adds	r2, #2
 801732e:	f103 010c 	add.w	r1, r3, #12
 8017332:	0092      	lsls	r2, r2, #2
 8017334:	300c      	adds	r0, #12
 8017336:	f7ff fa7e 	bl	8016836 <memcpy>
 801733a:	ec4b ab10 	vmov	d0, sl, fp
 801733e:	aa1a      	add	r2, sp, #104	; 0x68
 8017340:	a919      	add	r1, sp, #100	; 0x64
 8017342:	4620      	mov	r0, r4
 8017344:	f001 fbcc 	bl	8018ae0 <__d2b>
 8017348:	ec4b ab18 	vmov	d8, sl, fp
 801734c:	9018      	str	r0, [sp, #96]	; 0x60
 801734e:	2800      	cmp	r0, #0
 8017350:	f43f aef6 	beq.w	8017140 <_strtod_l+0x490>
 8017354:	2101      	movs	r1, #1
 8017356:	4620      	mov	r0, r4
 8017358:	f001 f916 	bl	8018588 <__i2b>
 801735c:	4606      	mov	r6, r0
 801735e:	2800      	cmp	r0, #0
 8017360:	f43f aeee 	beq.w	8017140 <_strtod_l+0x490>
 8017364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017366:	9904      	ldr	r1, [sp, #16]
 8017368:	2b00      	cmp	r3, #0
 801736a:	bfab      	itete	ge
 801736c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801736e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017370:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017372:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8017376:	bfac      	ite	ge
 8017378:	eb03 0902 	addge.w	r9, r3, r2
 801737c:	1ad7      	sublt	r7, r2, r3
 801737e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017380:	eba3 0801 	sub.w	r8, r3, r1
 8017384:	4490      	add	r8, r2
 8017386:	4ba1      	ldr	r3, [pc, #644]	; (801760c <_strtod_l+0x95c>)
 8017388:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801738c:	4598      	cmp	r8, r3
 801738e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017392:	f280 80c7 	bge.w	8017524 <_strtod_l+0x874>
 8017396:	eba3 0308 	sub.w	r3, r3, r8
 801739a:	2b1f      	cmp	r3, #31
 801739c:	eba2 0203 	sub.w	r2, r2, r3
 80173a0:	f04f 0101 	mov.w	r1, #1
 80173a4:	f300 80b1 	bgt.w	801750a <_strtod_l+0x85a>
 80173a8:	fa01 f303 	lsl.w	r3, r1, r3
 80173ac:	930d      	str	r3, [sp, #52]	; 0x34
 80173ae:	2300      	movs	r3, #0
 80173b0:	9308      	str	r3, [sp, #32]
 80173b2:	eb09 0802 	add.w	r8, r9, r2
 80173b6:	9b04      	ldr	r3, [sp, #16]
 80173b8:	45c1      	cmp	r9, r8
 80173ba:	4417      	add	r7, r2
 80173bc:	441f      	add	r7, r3
 80173be:	464b      	mov	r3, r9
 80173c0:	bfa8      	it	ge
 80173c2:	4643      	movge	r3, r8
 80173c4:	42bb      	cmp	r3, r7
 80173c6:	bfa8      	it	ge
 80173c8:	463b      	movge	r3, r7
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	bfc2      	ittt	gt
 80173ce:	eba8 0803 	subgt.w	r8, r8, r3
 80173d2:	1aff      	subgt	r7, r7, r3
 80173d4:	eba9 0903 	subgt.w	r9, r9, r3
 80173d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173da:	2b00      	cmp	r3, #0
 80173dc:	dd17      	ble.n	801740e <_strtod_l+0x75e>
 80173de:	4631      	mov	r1, r6
 80173e0:	461a      	mov	r2, r3
 80173e2:	4620      	mov	r0, r4
 80173e4:	f001 f990 	bl	8018708 <__pow5mult>
 80173e8:	4606      	mov	r6, r0
 80173ea:	2800      	cmp	r0, #0
 80173ec:	f43f aea8 	beq.w	8017140 <_strtod_l+0x490>
 80173f0:	4601      	mov	r1, r0
 80173f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80173f4:	4620      	mov	r0, r4
 80173f6:	f001 f8dd 	bl	80185b4 <__multiply>
 80173fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80173fc:	2800      	cmp	r0, #0
 80173fe:	f43f ae9f 	beq.w	8017140 <_strtod_l+0x490>
 8017402:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017404:	4620      	mov	r0, r4
 8017406:	f000 ffbd 	bl	8018384 <_Bfree>
 801740a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801740c:	9318      	str	r3, [sp, #96]	; 0x60
 801740e:	f1b8 0f00 	cmp.w	r8, #0
 8017412:	f300 808c 	bgt.w	801752e <_strtod_l+0x87e>
 8017416:	9b06      	ldr	r3, [sp, #24]
 8017418:	2b00      	cmp	r3, #0
 801741a:	dd08      	ble.n	801742e <_strtod_l+0x77e>
 801741c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801741e:	9905      	ldr	r1, [sp, #20]
 8017420:	4620      	mov	r0, r4
 8017422:	f001 f971 	bl	8018708 <__pow5mult>
 8017426:	9005      	str	r0, [sp, #20]
 8017428:	2800      	cmp	r0, #0
 801742a:	f43f ae89 	beq.w	8017140 <_strtod_l+0x490>
 801742e:	2f00      	cmp	r7, #0
 8017430:	dd08      	ble.n	8017444 <_strtod_l+0x794>
 8017432:	9905      	ldr	r1, [sp, #20]
 8017434:	463a      	mov	r2, r7
 8017436:	4620      	mov	r0, r4
 8017438:	f001 f9c0 	bl	80187bc <__lshift>
 801743c:	9005      	str	r0, [sp, #20]
 801743e:	2800      	cmp	r0, #0
 8017440:	f43f ae7e 	beq.w	8017140 <_strtod_l+0x490>
 8017444:	f1b9 0f00 	cmp.w	r9, #0
 8017448:	dd08      	ble.n	801745c <_strtod_l+0x7ac>
 801744a:	4631      	mov	r1, r6
 801744c:	464a      	mov	r2, r9
 801744e:	4620      	mov	r0, r4
 8017450:	f001 f9b4 	bl	80187bc <__lshift>
 8017454:	4606      	mov	r6, r0
 8017456:	2800      	cmp	r0, #0
 8017458:	f43f ae72 	beq.w	8017140 <_strtod_l+0x490>
 801745c:	9a05      	ldr	r2, [sp, #20]
 801745e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017460:	4620      	mov	r0, r4
 8017462:	f001 fa37 	bl	80188d4 <__mdiff>
 8017466:	4605      	mov	r5, r0
 8017468:	2800      	cmp	r0, #0
 801746a:	f43f ae69 	beq.w	8017140 <_strtod_l+0x490>
 801746e:	68c3      	ldr	r3, [r0, #12]
 8017470:	930b      	str	r3, [sp, #44]	; 0x2c
 8017472:	2300      	movs	r3, #0
 8017474:	60c3      	str	r3, [r0, #12]
 8017476:	4631      	mov	r1, r6
 8017478:	f001 fa10 	bl	801889c <__mcmp>
 801747c:	2800      	cmp	r0, #0
 801747e:	da60      	bge.n	8017542 <_strtod_l+0x892>
 8017480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017482:	ea53 030a 	orrs.w	r3, r3, sl
 8017486:	f040 8082 	bne.w	801758e <_strtod_l+0x8de>
 801748a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801748e:	2b00      	cmp	r3, #0
 8017490:	d17d      	bne.n	801758e <_strtod_l+0x8de>
 8017492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017496:	0d1b      	lsrs	r3, r3, #20
 8017498:	051b      	lsls	r3, r3, #20
 801749a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801749e:	d976      	bls.n	801758e <_strtod_l+0x8de>
 80174a0:	696b      	ldr	r3, [r5, #20]
 80174a2:	b913      	cbnz	r3, 80174aa <_strtod_l+0x7fa>
 80174a4:	692b      	ldr	r3, [r5, #16]
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	dd71      	ble.n	801758e <_strtod_l+0x8de>
 80174aa:	4629      	mov	r1, r5
 80174ac:	2201      	movs	r2, #1
 80174ae:	4620      	mov	r0, r4
 80174b0:	f001 f984 	bl	80187bc <__lshift>
 80174b4:	4631      	mov	r1, r6
 80174b6:	4605      	mov	r5, r0
 80174b8:	f001 f9f0 	bl	801889c <__mcmp>
 80174bc:	2800      	cmp	r0, #0
 80174be:	dd66      	ble.n	801758e <_strtod_l+0x8de>
 80174c0:	9904      	ldr	r1, [sp, #16]
 80174c2:	4a53      	ldr	r2, [pc, #332]	; (8017610 <_strtod_l+0x960>)
 80174c4:	465b      	mov	r3, fp
 80174c6:	2900      	cmp	r1, #0
 80174c8:	f000 8081 	beq.w	80175ce <_strtod_l+0x91e>
 80174cc:	ea02 010b 	and.w	r1, r2, fp
 80174d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80174d4:	dc7b      	bgt.n	80175ce <_strtod_l+0x91e>
 80174d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80174da:	f77f aea9 	ble.w	8017230 <_strtod_l+0x580>
 80174de:	4b4d      	ldr	r3, [pc, #308]	; (8017614 <_strtod_l+0x964>)
 80174e0:	4650      	mov	r0, sl
 80174e2:	4659      	mov	r1, fp
 80174e4:	2200      	movs	r2, #0
 80174e6:	f7e9 f8a7 	bl	8000638 <__aeabi_dmul>
 80174ea:	460b      	mov	r3, r1
 80174ec:	4303      	orrs	r3, r0
 80174ee:	bf08      	it	eq
 80174f0:	2322      	moveq	r3, #34	; 0x22
 80174f2:	4682      	mov	sl, r0
 80174f4:	468b      	mov	fp, r1
 80174f6:	bf08      	it	eq
 80174f8:	6023      	streq	r3, [r4, #0]
 80174fa:	e62b      	b.n	8017154 <_strtod_l+0x4a4>
 80174fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017500:	fa02 f303 	lsl.w	r3, r2, r3
 8017504:	ea03 0a0a 	and.w	sl, r3, sl
 8017508:	e6e3      	b.n	80172d2 <_strtod_l+0x622>
 801750a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801750e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801751a:	fa01 f308 	lsl.w	r3, r1, r8
 801751e:	9308      	str	r3, [sp, #32]
 8017520:	910d      	str	r1, [sp, #52]	; 0x34
 8017522:	e746      	b.n	80173b2 <_strtod_l+0x702>
 8017524:	2300      	movs	r3, #0
 8017526:	9308      	str	r3, [sp, #32]
 8017528:	2301      	movs	r3, #1
 801752a:	930d      	str	r3, [sp, #52]	; 0x34
 801752c:	e741      	b.n	80173b2 <_strtod_l+0x702>
 801752e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017530:	4642      	mov	r2, r8
 8017532:	4620      	mov	r0, r4
 8017534:	f001 f942 	bl	80187bc <__lshift>
 8017538:	9018      	str	r0, [sp, #96]	; 0x60
 801753a:	2800      	cmp	r0, #0
 801753c:	f47f af6b 	bne.w	8017416 <_strtod_l+0x766>
 8017540:	e5fe      	b.n	8017140 <_strtod_l+0x490>
 8017542:	465f      	mov	r7, fp
 8017544:	d16e      	bne.n	8017624 <_strtod_l+0x974>
 8017546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801754c:	b342      	cbz	r2, 80175a0 <_strtod_l+0x8f0>
 801754e:	4a32      	ldr	r2, [pc, #200]	; (8017618 <_strtod_l+0x968>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d128      	bne.n	80175a6 <_strtod_l+0x8f6>
 8017554:	9b04      	ldr	r3, [sp, #16]
 8017556:	4651      	mov	r1, sl
 8017558:	b1eb      	cbz	r3, 8017596 <_strtod_l+0x8e6>
 801755a:	4b2d      	ldr	r3, [pc, #180]	; (8017610 <_strtod_l+0x960>)
 801755c:	403b      	ands	r3, r7
 801755e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017566:	d819      	bhi.n	801759c <_strtod_l+0x8ec>
 8017568:	0d1b      	lsrs	r3, r3, #20
 801756a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801756e:	fa02 f303 	lsl.w	r3, r2, r3
 8017572:	4299      	cmp	r1, r3
 8017574:	d117      	bne.n	80175a6 <_strtod_l+0x8f6>
 8017576:	4b29      	ldr	r3, [pc, #164]	; (801761c <_strtod_l+0x96c>)
 8017578:	429f      	cmp	r7, r3
 801757a:	d102      	bne.n	8017582 <_strtod_l+0x8d2>
 801757c:	3101      	adds	r1, #1
 801757e:	f43f addf 	beq.w	8017140 <_strtod_l+0x490>
 8017582:	4b23      	ldr	r3, [pc, #140]	; (8017610 <_strtod_l+0x960>)
 8017584:	403b      	ands	r3, r7
 8017586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801758a:	f04f 0a00 	mov.w	sl, #0
 801758e:	9b04      	ldr	r3, [sp, #16]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d1a4      	bne.n	80174de <_strtod_l+0x82e>
 8017594:	e5de      	b.n	8017154 <_strtod_l+0x4a4>
 8017596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801759a:	e7ea      	b.n	8017572 <_strtod_l+0x8c2>
 801759c:	4613      	mov	r3, r2
 801759e:	e7e8      	b.n	8017572 <_strtod_l+0x8c2>
 80175a0:	ea53 030a 	orrs.w	r3, r3, sl
 80175a4:	d08c      	beq.n	80174c0 <_strtod_l+0x810>
 80175a6:	9b08      	ldr	r3, [sp, #32]
 80175a8:	b1db      	cbz	r3, 80175e2 <_strtod_l+0x932>
 80175aa:	423b      	tst	r3, r7
 80175ac:	d0ef      	beq.n	801758e <_strtod_l+0x8de>
 80175ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175b0:	9a04      	ldr	r2, [sp, #16]
 80175b2:	4650      	mov	r0, sl
 80175b4:	4659      	mov	r1, fp
 80175b6:	b1c3      	cbz	r3, 80175ea <_strtod_l+0x93a>
 80175b8:	f7ff fb5c 	bl	8016c74 <sulp>
 80175bc:	4602      	mov	r2, r0
 80175be:	460b      	mov	r3, r1
 80175c0:	ec51 0b18 	vmov	r0, r1, d8
 80175c4:	f7e8 fe82 	bl	80002cc <__adddf3>
 80175c8:	4682      	mov	sl, r0
 80175ca:	468b      	mov	fp, r1
 80175cc:	e7df      	b.n	801758e <_strtod_l+0x8de>
 80175ce:	4013      	ands	r3, r2
 80175d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80175d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80175d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80175dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80175e0:	e7d5      	b.n	801758e <_strtod_l+0x8de>
 80175e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175e4:	ea13 0f0a 	tst.w	r3, sl
 80175e8:	e7e0      	b.n	80175ac <_strtod_l+0x8fc>
 80175ea:	f7ff fb43 	bl	8016c74 <sulp>
 80175ee:	4602      	mov	r2, r0
 80175f0:	460b      	mov	r3, r1
 80175f2:	ec51 0b18 	vmov	r0, r1, d8
 80175f6:	f7e8 fe67 	bl	80002c8 <__aeabi_dsub>
 80175fa:	2200      	movs	r2, #0
 80175fc:	2300      	movs	r3, #0
 80175fe:	4682      	mov	sl, r0
 8017600:	468b      	mov	fp, r1
 8017602:	f7e9 fa81 	bl	8000b08 <__aeabi_dcmpeq>
 8017606:	2800      	cmp	r0, #0
 8017608:	d0c1      	beq.n	801758e <_strtod_l+0x8de>
 801760a:	e611      	b.n	8017230 <_strtod_l+0x580>
 801760c:	fffffc02 	.word	0xfffffc02
 8017610:	7ff00000 	.word	0x7ff00000
 8017614:	39500000 	.word	0x39500000
 8017618:	000fffff 	.word	0x000fffff
 801761c:	7fefffff 	.word	0x7fefffff
 8017620:	0801cfa8 	.word	0x0801cfa8
 8017624:	4631      	mov	r1, r6
 8017626:	4628      	mov	r0, r5
 8017628:	f001 fab6 	bl	8018b98 <__ratio>
 801762c:	ec59 8b10 	vmov	r8, r9, d0
 8017630:	ee10 0a10 	vmov	r0, s0
 8017634:	2200      	movs	r2, #0
 8017636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801763a:	4649      	mov	r1, r9
 801763c:	f7e9 fa78 	bl	8000b30 <__aeabi_dcmple>
 8017640:	2800      	cmp	r0, #0
 8017642:	d07a      	beq.n	801773a <_strtod_l+0xa8a>
 8017644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017646:	2b00      	cmp	r3, #0
 8017648:	d04a      	beq.n	80176e0 <_strtod_l+0xa30>
 801764a:	4b95      	ldr	r3, [pc, #596]	; (80178a0 <_strtod_l+0xbf0>)
 801764c:	2200      	movs	r2, #0
 801764e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80178a0 <_strtod_l+0xbf0>
 8017656:	f04f 0800 	mov.w	r8, #0
 801765a:	4b92      	ldr	r3, [pc, #584]	; (80178a4 <_strtod_l+0xbf4>)
 801765c:	403b      	ands	r3, r7
 801765e:	930d      	str	r3, [sp, #52]	; 0x34
 8017660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017662:	4b91      	ldr	r3, [pc, #580]	; (80178a8 <_strtod_l+0xbf8>)
 8017664:	429a      	cmp	r2, r3
 8017666:	f040 80b0 	bne.w	80177ca <_strtod_l+0xb1a>
 801766a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801766e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017672:	ec4b ab10 	vmov	d0, sl, fp
 8017676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801767a:	f001 f9b5 	bl	80189e8 <__ulp>
 801767e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017682:	ec53 2b10 	vmov	r2, r3, d0
 8017686:	f7e8 ffd7 	bl	8000638 <__aeabi_dmul>
 801768a:	4652      	mov	r2, sl
 801768c:	465b      	mov	r3, fp
 801768e:	f7e8 fe1d 	bl	80002cc <__adddf3>
 8017692:	460b      	mov	r3, r1
 8017694:	4983      	ldr	r1, [pc, #524]	; (80178a4 <_strtod_l+0xbf4>)
 8017696:	4a85      	ldr	r2, [pc, #532]	; (80178ac <_strtod_l+0xbfc>)
 8017698:	4019      	ands	r1, r3
 801769a:	4291      	cmp	r1, r2
 801769c:	4682      	mov	sl, r0
 801769e:	d960      	bls.n	8017762 <_strtod_l+0xab2>
 80176a0:	ee18 3a90 	vmov	r3, s17
 80176a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80176a8:	4293      	cmp	r3, r2
 80176aa:	d104      	bne.n	80176b6 <_strtod_l+0xa06>
 80176ac:	ee18 3a10 	vmov	r3, s16
 80176b0:	3301      	adds	r3, #1
 80176b2:	f43f ad45 	beq.w	8017140 <_strtod_l+0x490>
 80176b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80178b8 <_strtod_l+0xc08>
 80176ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80176be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80176c0:	4620      	mov	r0, r4
 80176c2:	f000 fe5f 	bl	8018384 <_Bfree>
 80176c6:	9905      	ldr	r1, [sp, #20]
 80176c8:	4620      	mov	r0, r4
 80176ca:	f000 fe5b 	bl	8018384 <_Bfree>
 80176ce:	4631      	mov	r1, r6
 80176d0:	4620      	mov	r0, r4
 80176d2:	f000 fe57 	bl	8018384 <_Bfree>
 80176d6:	4629      	mov	r1, r5
 80176d8:	4620      	mov	r0, r4
 80176da:	f000 fe53 	bl	8018384 <_Bfree>
 80176de:	e61a      	b.n	8017316 <_strtod_l+0x666>
 80176e0:	f1ba 0f00 	cmp.w	sl, #0
 80176e4:	d11b      	bne.n	801771e <_strtod_l+0xa6e>
 80176e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176ea:	b9f3      	cbnz	r3, 801772a <_strtod_l+0xa7a>
 80176ec:	4b6c      	ldr	r3, [pc, #432]	; (80178a0 <_strtod_l+0xbf0>)
 80176ee:	2200      	movs	r2, #0
 80176f0:	4640      	mov	r0, r8
 80176f2:	4649      	mov	r1, r9
 80176f4:	f7e9 fa12 	bl	8000b1c <__aeabi_dcmplt>
 80176f8:	b9d0      	cbnz	r0, 8017730 <_strtod_l+0xa80>
 80176fa:	4640      	mov	r0, r8
 80176fc:	4649      	mov	r1, r9
 80176fe:	4b6c      	ldr	r3, [pc, #432]	; (80178b0 <_strtod_l+0xc00>)
 8017700:	2200      	movs	r2, #0
 8017702:	f7e8 ff99 	bl	8000638 <__aeabi_dmul>
 8017706:	4680      	mov	r8, r0
 8017708:	4689      	mov	r9, r1
 801770a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801770e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8017712:	9315      	str	r3, [sp, #84]	; 0x54
 8017714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801771c:	e79d      	b.n	801765a <_strtod_l+0x9aa>
 801771e:	f1ba 0f01 	cmp.w	sl, #1
 8017722:	d102      	bne.n	801772a <_strtod_l+0xa7a>
 8017724:	2f00      	cmp	r7, #0
 8017726:	f43f ad83 	beq.w	8017230 <_strtod_l+0x580>
 801772a:	4b62      	ldr	r3, [pc, #392]	; (80178b4 <_strtod_l+0xc04>)
 801772c:	2200      	movs	r2, #0
 801772e:	e78e      	b.n	801764e <_strtod_l+0x99e>
 8017730:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80178b0 <_strtod_l+0xc00>
 8017734:	f04f 0800 	mov.w	r8, #0
 8017738:	e7e7      	b.n	801770a <_strtod_l+0xa5a>
 801773a:	4b5d      	ldr	r3, [pc, #372]	; (80178b0 <_strtod_l+0xc00>)
 801773c:	4640      	mov	r0, r8
 801773e:	4649      	mov	r1, r9
 8017740:	2200      	movs	r2, #0
 8017742:	f7e8 ff79 	bl	8000638 <__aeabi_dmul>
 8017746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017748:	4680      	mov	r8, r0
 801774a:	4689      	mov	r9, r1
 801774c:	b933      	cbnz	r3, 801775c <_strtod_l+0xaac>
 801774e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017752:	900e      	str	r0, [sp, #56]	; 0x38
 8017754:	930f      	str	r3, [sp, #60]	; 0x3c
 8017756:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801775a:	e7dd      	b.n	8017718 <_strtod_l+0xa68>
 801775c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8017760:	e7f9      	b.n	8017756 <_strtod_l+0xaa6>
 8017762:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017766:	9b04      	ldr	r3, [sp, #16]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d1a8      	bne.n	80176be <_strtod_l+0xa0e>
 801776c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017772:	0d1b      	lsrs	r3, r3, #20
 8017774:	051b      	lsls	r3, r3, #20
 8017776:	429a      	cmp	r2, r3
 8017778:	d1a1      	bne.n	80176be <_strtod_l+0xa0e>
 801777a:	4640      	mov	r0, r8
 801777c:	4649      	mov	r1, r9
 801777e:	f7e9 fa7d 	bl	8000c7c <__aeabi_d2lz>
 8017782:	f7e8 ff2b 	bl	80005dc <__aeabi_l2d>
 8017786:	4602      	mov	r2, r0
 8017788:	460b      	mov	r3, r1
 801778a:	4640      	mov	r0, r8
 801778c:	4649      	mov	r1, r9
 801778e:	f7e8 fd9b 	bl	80002c8 <__aeabi_dsub>
 8017792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017798:	ea43 030a 	orr.w	r3, r3, sl
 801779c:	4313      	orrs	r3, r2
 801779e:	4680      	mov	r8, r0
 80177a0:	4689      	mov	r9, r1
 80177a2:	d055      	beq.n	8017850 <_strtod_l+0xba0>
 80177a4:	a336      	add	r3, pc, #216	; (adr r3, 8017880 <_strtod_l+0xbd0>)
 80177a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177aa:	f7e9 f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80177ae:	2800      	cmp	r0, #0
 80177b0:	f47f acd0 	bne.w	8017154 <_strtod_l+0x4a4>
 80177b4:	a334      	add	r3, pc, #208	; (adr r3, 8017888 <_strtod_l+0xbd8>)
 80177b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ba:	4640      	mov	r0, r8
 80177bc:	4649      	mov	r1, r9
 80177be:	f7e9 f9cb 	bl	8000b58 <__aeabi_dcmpgt>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	f43f af7b 	beq.w	80176be <_strtod_l+0xa0e>
 80177c8:	e4c4      	b.n	8017154 <_strtod_l+0x4a4>
 80177ca:	9b04      	ldr	r3, [sp, #16]
 80177cc:	b333      	cbz	r3, 801781c <_strtod_l+0xb6c>
 80177ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177d4:	d822      	bhi.n	801781c <_strtod_l+0xb6c>
 80177d6:	a32e      	add	r3, pc, #184	; (adr r3, 8017890 <_strtod_l+0xbe0>)
 80177d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177dc:	4640      	mov	r0, r8
 80177de:	4649      	mov	r1, r9
 80177e0:	f7e9 f9a6 	bl	8000b30 <__aeabi_dcmple>
 80177e4:	b1a0      	cbz	r0, 8017810 <_strtod_l+0xb60>
 80177e6:	4649      	mov	r1, r9
 80177e8:	4640      	mov	r0, r8
 80177ea:	f7e9 f9bf 	bl	8000b6c <__aeabi_d2uiz>
 80177ee:	2801      	cmp	r0, #1
 80177f0:	bf38      	it	cc
 80177f2:	2001      	movcc	r0, #1
 80177f4:	f7e8 fea6 	bl	8000544 <__aeabi_ui2d>
 80177f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177fa:	4680      	mov	r8, r0
 80177fc:	4689      	mov	r9, r1
 80177fe:	bb23      	cbnz	r3, 801784a <_strtod_l+0xb9a>
 8017800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017804:	9010      	str	r0, [sp, #64]	; 0x40
 8017806:	9311      	str	r3, [sp, #68]	; 0x44
 8017808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801780c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017814:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017818:	1a9b      	subs	r3, r3, r2
 801781a:	9309      	str	r3, [sp, #36]	; 0x24
 801781c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017820:	eeb0 0a48 	vmov.f32	s0, s16
 8017824:	eef0 0a68 	vmov.f32	s1, s17
 8017828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801782c:	f001 f8dc 	bl	80189e8 <__ulp>
 8017830:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017834:	ec53 2b10 	vmov	r2, r3, d0
 8017838:	f7e8 fefe 	bl	8000638 <__aeabi_dmul>
 801783c:	ec53 2b18 	vmov	r2, r3, d8
 8017840:	f7e8 fd44 	bl	80002cc <__adddf3>
 8017844:	4682      	mov	sl, r0
 8017846:	468b      	mov	fp, r1
 8017848:	e78d      	b.n	8017766 <_strtod_l+0xab6>
 801784a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801784e:	e7db      	b.n	8017808 <_strtod_l+0xb58>
 8017850:	a311      	add	r3, pc, #68	; (adr r3, 8017898 <_strtod_l+0xbe8>)
 8017852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017856:	f7e9 f961 	bl	8000b1c <__aeabi_dcmplt>
 801785a:	e7b2      	b.n	80177c2 <_strtod_l+0xb12>
 801785c:	2300      	movs	r3, #0
 801785e:	930a      	str	r3, [sp, #40]	; 0x28
 8017860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017864:	6013      	str	r3, [r2, #0]
 8017866:	f7ff ba6b 	b.w	8016d40 <_strtod_l+0x90>
 801786a:	2a65      	cmp	r2, #101	; 0x65
 801786c:	f43f ab5f 	beq.w	8016f2e <_strtod_l+0x27e>
 8017870:	2a45      	cmp	r2, #69	; 0x45
 8017872:	f43f ab5c 	beq.w	8016f2e <_strtod_l+0x27e>
 8017876:	2301      	movs	r3, #1
 8017878:	f7ff bb94 	b.w	8016fa4 <_strtod_l+0x2f4>
 801787c:	f3af 8000 	nop.w
 8017880:	94a03595 	.word	0x94a03595
 8017884:	3fdfffff 	.word	0x3fdfffff
 8017888:	35afe535 	.word	0x35afe535
 801788c:	3fe00000 	.word	0x3fe00000
 8017890:	ffc00000 	.word	0xffc00000
 8017894:	41dfffff 	.word	0x41dfffff
 8017898:	94a03595 	.word	0x94a03595
 801789c:	3fcfffff 	.word	0x3fcfffff
 80178a0:	3ff00000 	.word	0x3ff00000
 80178a4:	7ff00000 	.word	0x7ff00000
 80178a8:	7fe00000 	.word	0x7fe00000
 80178ac:	7c9fffff 	.word	0x7c9fffff
 80178b0:	3fe00000 	.word	0x3fe00000
 80178b4:	bff00000 	.word	0xbff00000
 80178b8:	7fefffff 	.word	0x7fefffff

080178bc <strtod>:
 80178bc:	460a      	mov	r2, r1
 80178be:	4601      	mov	r1, r0
 80178c0:	4802      	ldr	r0, [pc, #8]	; (80178cc <strtod+0x10>)
 80178c2:	4b03      	ldr	r3, [pc, #12]	; (80178d0 <strtod+0x14>)
 80178c4:	6800      	ldr	r0, [r0, #0]
 80178c6:	f7ff b9f3 	b.w	8016cb0 <_strtod_l>
 80178ca:	bf00      	nop
 80178cc:	2000002c 	.word	0x2000002c
 80178d0:	20000094 	.word	0x20000094

080178d4 <strtok>:
 80178d4:	4b16      	ldr	r3, [pc, #88]	; (8017930 <strtok+0x5c>)
 80178d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178d8:	681e      	ldr	r6, [r3, #0]
 80178da:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80178dc:	4605      	mov	r5, r0
 80178de:	b9fc      	cbnz	r4, 8017920 <strtok+0x4c>
 80178e0:	2050      	movs	r0, #80	; 0x50
 80178e2:	9101      	str	r1, [sp, #4]
 80178e4:	f000 fce8 	bl	80182b8 <malloc>
 80178e8:	9901      	ldr	r1, [sp, #4]
 80178ea:	65b0      	str	r0, [r6, #88]	; 0x58
 80178ec:	4602      	mov	r2, r0
 80178ee:	b920      	cbnz	r0, 80178fa <strtok+0x26>
 80178f0:	4b10      	ldr	r3, [pc, #64]	; (8017934 <strtok+0x60>)
 80178f2:	4811      	ldr	r0, [pc, #68]	; (8017938 <strtok+0x64>)
 80178f4:	2157      	movs	r1, #87	; 0x57
 80178f6:	f000 f85b 	bl	80179b0 <__assert_func>
 80178fa:	e9c0 4400 	strd	r4, r4, [r0]
 80178fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8017902:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017906:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801790a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801790e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8017912:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8017916:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801791a:	6184      	str	r4, [r0, #24]
 801791c:	7704      	strb	r4, [r0, #28]
 801791e:	6244      	str	r4, [r0, #36]	; 0x24
 8017920:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8017922:	2301      	movs	r3, #1
 8017924:	4628      	mov	r0, r5
 8017926:	b002      	add	sp, #8
 8017928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801792c:	f000 b806 	b.w	801793c <__strtok_r>
 8017930:	2000002c 	.word	0x2000002c
 8017934:	0801cefc 	.word	0x0801cefc
 8017938:	0801cfd0 	.word	0x0801cfd0

0801793c <__strtok_r>:
 801793c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801793e:	b908      	cbnz	r0, 8017944 <__strtok_r+0x8>
 8017940:	6810      	ldr	r0, [r2, #0]
 8017942:	b188      	cbz	r0, 8017968 <__strtok_r+0x2c>
 8017944:	4604      	mov	r4, r0
 8017946:	4620      	mov	r0, r4
 8017948:	f814 5b01 	ldrb.w	r5, [r4], #1
 801794c:	460f      	mov	r7, r1
 801794e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017952:	b91e      	cbnz	r6, 801795c <__strtok_r+0x20>
 8017954:	b965      	cbnz	r5, 8017970 <__strtok_r+0x34>
 8017956:	6015      	str	r5, [r2, #0]
 8017958:	4628      	mov	r0, r5
 801795a:	e005      	b.n	8017968 <__strtok_r+0x2c>
 801795c:	42b5      	cmp	r5, r6
 801795e:	d1f6      	bne.n	801794e <__strtok_r+0x12>
 8017960:	2b00      	cmp	r3, #0
 8017962:	d1f0      	bne.n	8017946 <__strtok_r+0xa>
 8017964:	6014      	str	r4, [r2, #0]
 8017966:	7003      	strb	r3, [r0, #0]
 8017968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801796a:	461c      	mov	r4, r3
 801796c:	e00c      	b.n	8017988 <__strtok_r+0x4c>
 801796e:	b915      	cbnz	r5, 8017976 <__strtok_r+0x3a>
 8017970:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017974:	460e      	mov	r6, r1
 8017976:	f816 5b01 	ldrb.w	r5, [r6], #1
 801797a:	42ab      	cmp	r3, r5
 801797c:	d1f7      	bne.n	801796e <__strtok_r+0x32>
 801797e:	2b00      	cmp	r3, #0
 8017980:	d0f3      	beq.n	801796a <__strtok_r+0x2e>
 8017982:	2300      	movs	r3, #0
 8017984:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017988:	6014      	str	r4, [r2, #0]
 801798a:	e7ed      	b.n	8017968 <__strtok_r+0x2c>

0801798c <_write_r>:
 801798c:	b538      	push	{r3, r4, r5, lr}
 801798e:	4d07      	ldr	r5, [pc, #28]	; (80179ac <_write_r+0x20>)
 8017990:	4604      	mov	r4, r0
 8017992:	4608      	mov	r0, r1
 8017994:	4611      	mov	r1, r2
 8017996:	2200      	movs	r2, #0
 8017998:	602a      	str	r2, [r5, #0]
 801799a:	461a      	mov	r2, r3
 801799c:	f7e9 fe4b 	bl	8001636 <_write>
 80179a0:	1c43      	adds	r3, r0, #1
 80179a2:	d102      	bne.n	80179aa <_write_r+0x1e>
 80179a4:	682b      	ldr	r3, [r5, #0]
 80179a6:	b103      	cbz	r3, 80179aa <_write_r+0x1e>
 80179a8:	6023      	str	r3, [r4, #0]
 80179aa:	bd38      	pop	{r3, r4, r5, pc}
 80179ac:	20011cb0 	.word	0x20011cb0

080179b0 <__assert_func>:
 80179b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179b2:	4614      	mov	r4, r2
 80179b4:	461a      	mov	r2, r3
 80179b6:	4b09      	ldr	r3, [pc, #36]	; (80179dc <__assert_func+0x2c>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	4605      	mov	r5, r0
 80179bc:	68d8      	ldr	r0, [r3, #12]
 80179be:	b14c      	cbz	r4, 80179d4 <__assert_func+0x24>
 80179c0:	4b07      	ldr	r3, [pc, #28]	; (80179e0 <__assert_func+0x30>)
 80179c2:	9100      	str	r1, [sp, #0]
 80179c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179c8:	4906      	ldr	r1, [pc, #24]	; (80179e4 <__assert_func+0x34>)
 80179ca:	462b      	mov	r3, r5
 80179cc:	f000 f8e0 	bl	8017b90 <fiprintf>
 80179d0:	f001 fef0 	bl	80197b4 <abort>
 80179d4:	4b04      	ldr	r3, [pc, #16]	; (80179e8 <__assert_func+0x38>)
 80179d6:	461c      	mov	r4, r3
 80179d8:	e7f3      	b.n	80179c2 <__assert_func+0x12>
 80179da:	bf00      	nop
 80179dc:	2000002c 	.word	0x2000002c
 80179e0:	0801d02d 	.word	0x0801d02d
 80179e4:	0801d03a 	.word	0x0801d03a
 80179e8:	0801d068 	.word	0x0801d068

080179ec <_close_r>:
 80179ec:	b538      	push	{r3, r4, r5, lr}
 80179ee:	4d06      	ldr	r5, [pc, #24]	; (8017a08 <_close_r+0x1c>)
 80179f0:	2300      	movs	r3, #0
 80179f2:	4604      	mov	r4, r0
 80179f4:	4608      	mov	r0, r1
 80179f6:	602b      	str	r3, [r5, #0]
 80179f8:	f7e9 fe39 	bl	800166e <_close>
 80179fc:	1c43      	adds	r3, r0, #1
 80179fe:	d102      	bne.n	8017a06 <_close_r+0x1a>
 8017a00:	682b      	ldr	r3, [r5, #0]
 8017a02:	b103      	cbz	r3, 8017a06 <_close_r+0x1a>
 8017a04:	6023      	str	r3, [r4, #0]
 8017a06:	bd38      	pop	{r3, r4, r5, pc}
 8017a08:	20011cb0 	.word	0x20011cb0

08017a0c <__sflush_r>:
 8017a0c:	898a      	ldrh	r2, [r1, #12]
 8017a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a12:	4605      	mov	r5, r0
 8017a14:	0710      	lsls	r0, r2, #28
 8017a16:	460c      	mov	r4, r1
 8017a18:	d458      	bmi.n	8017acc <__sflush_r+0xc0>
 8017a1a:	684b      	ldr	r3, [r1, #4]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	dc05      	bgt.n	8017a2c <__sflush_r+0x20>
 8017a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	dc02      	bgt.n	8017a2c <__sflush_r+0x20>
 8017a26:	2000      	movs	r0, #0
 8017a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a2e:	2e00      	cmp	r6, #0
 8017a30:	d0f9      	beq.n	8017a26 <__sflush_r+0x1a>
 8017a32:	2300      	movs	r3, #0
 8017a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a38:	682f      	ldr	r7, [r5, #0]
 8017a3a:	602b      	str	r3, [r5, #0]
 8017a3c:	d032      	beq.n	8017aa4 <__sflush_r+0x98>
 8017a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a40:	89a3      	ldrh	r3, [r4, #12]
 8017a42:	075a      	lsls	r2, r3, #29
 8017a44:	d505      	bpl.n	8017a52 <__sflush_r+0x46>
 8017a46:	6863      	ldr	r3, [r4, #4]
 8017a48:	1ac0      	subs	r0, r0, r3
 8017a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a4c:	b10b      	cbz	r3, 8017a52 <__sflush_r+0x46>
 8017a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a50:	1ac0      	subs	r0, r0, r3
 8017a52:	2300      	movs	r3, #0
 8017a54:	4602      	mov	r2, r0
 8017a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a58:	6a21      	ldr	r1, [r4, #32]
 8017a5a:	4628      	mov	r0, r5
 8017a5c:	47b0      	blx	r6
 8017a5e:	1c43      	adds	r3, r0, #1
 8017a60:	89a3      	ldrh	r3, [r4, #12]
 8017a62:	d106      	bne.n	8017a72 <__sflush_r+0x66>
 8017a64:	6829      	ldr	r1, [r5, #0]
 8017a66:	291d      	cmp	r1, #29
 8017a68:	d82c      	bhi.n	8017ac4 <__sflush_r+0xb8>
 8017a6a:	4a2a      	ldr	r2, [pc, #168]	; (8017b14 <__sflush_r+0x108>)
 8017a6c:	40ca      	lsrs	r2, r1
 8017a6e:	07d6      	lsls	r6, r2, #31
 8017a70:	d528      	bpl.n	8017ac4 <__sflush_r+0xb8>
 8017a72:	2200      	movs	r2, #0
 8017a74:	6062      	str	r2, [r4, #4]
 8017a76:	04d9      	lsls	r1, r3, #19
 8017a78:	6922      	ldr	r2, [r4, #16]
 8017a7a:	6022      	str	r2, [r4, #0]
 8017a7c:	d504      	bpl.n	8017a88 <__sflush_r+0x7c>
 8017a7e:	1c42      	adds	r2, r0, #1
 8017a80:	d101      	bne.n	8017a86 <__sflush_r+0x7a>
 8017a82:	682b      	ldr	r3, [r5, #0]
 8017a84:	b903      	cbnz	r3, 8017a88 <__sflush_r+0x7c>
 8017a86:	6560      	str	r0, [r4, #84]	; 0x54
 8017a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a8a:	602f      	str	r7, [r5, #0]
 8017a8c:	2900      	cmp	r1, #0
 8017a8e:	d0ca      	beq.n	8017a26 <__sflush_r+0x1a>
 8017a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a94:	4299      	cmp	r1, r3
 8017a96:	d002      	beq.n	8017a9e <__sflush_r+0x92>
 8017a98:	4628      	mov	r0, r5
 8017a9a:	f001 f90b 	bl	8018cb4 <_free_r>
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8017aa2:	e7c1      	b.n	8017a28 <__sflush_r+0x1c>
 8017aa4:	6a21      	ldr	r1, [r4, #32]
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	47b0      	blx	r6
 8017aac:	1c41      	adds	r1, r0, #1
 8017aae:	d1c7      	bne.n	8017a40 <__sflush_r+0x34>
 8017ab0:	682b      	ldr	r3, [r5, #0]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d0c4      	beq.n	8017a40 <__sflush_r+0x34>
 8017ab6:	2b1d      	cmp	r3, #29
 8017ab8:	d001      	beq.n	8017abe <__sflush_r+0xb2>
 8017aba:	2b16      	cmp	r3, #22
 8017abc:	d101      	bne.n	8017ac2 <__sflush_r+0xb6>
 8017abe:	602f      	str	r7, [r5, #0]
 8017ac0:	e7b1      	b.n	8017a26 <__sflush_r+0x1a>
 8017ac2:	89a3      	ldrh	r3, [r4, #12]
 8017ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ac8:	81a3      	strh	r3, [r4, #12]
 8017aca:	e7ad      	b.n	8017a28 <__sflush_r+0x1c>
 8017acc:	690f      	ldr	r7, [r1, #16]
 8017ace:	2f00      	cmp	r7, #0
 8017ad0:	d0a9      	beq.n	8017a26 <__sflush_r+0x1a>
 8017ad2:	0793      	lsls	r3, r2, #30
 8017ad4:	680e      	ldr	r6, [r1, #0]
 8017ad6:	bf08      	it	eq
 8017ad8:	694b      	ldreq	r3, [r1, #20]
 8017ada:	600f      	str	r7, [r1, #0]
 8017adc:	bf18      	it	ne
 8017ade:	2300      	movne	r3, #0
 8017ae0:	eba6 0807 	sub.w	r8, r6, r7
 8017ae4:	608b      	str	r3, [r1, #8]
 8017ae6:	f1b8 0f00 	cmp.w	r8, #0
 8017aea:	dd9c      	ble.n	8017a26 <__sflush_r+0x1a>
 8017aec:	6a21      	ldr	r1, [r4, #32]
 8017aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017af0:	4643      	mov	r3, r8
 8017af2:	463a      	mov	r2, r7
 8017af4:	4628      	mov	r0, r5
 8017af6:	47b0      	blx	r6
 8017af8:	2800      	cmp	r0, #0
 8017afa:	dc06      	bgt.n	8017b0a <__sflush_r+0xfe>
 8017afc:	89a3      	ldrh	r3, [r4, #12]
 8017afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b02:	81a3      	strh	r3, [r4, #12]
 8017b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b08:	e78e      	b.n	8017a28 <__sflush_r+0x1c>
 8017b0a:	4407      	add	r7, r0
 8017b0c:	eba8 0800 	sub.w	r8, r8, r0
 8017b10:	e7e9      	b.n	8017ae6 <__sflush_r+0xda>
 8017b12:	bf00      	nop
 8017b14:	20400001 	.word	0x20400001

08017b18 <_fflush_r>:
 8017b18:	b538      	push	{r3, r4, r5, lr}
 8017b1a:	690b      	ldr	r3, [r1, #16]
 8017b1c:	4605      	mov	r5, r0
 8017b1e:	460c      	mov	r4, r1
 8017b20:	b913      	cbnz	r3, 8017b28 <_fflush_r+0x10>
 8017b22:	2500      	movs	r5, #0
 8017b24:	4628      	mov	r0, r5
 8017b26:	bd38      	pop	{r3, r4, r5, pc}
 8017b28:	b118      	cbz	r0, 8017b32 <_fflush_r+0x1a>
 8017b2a:	6983      	ldr	r3, [r0, #24]
 8017b2c:	b90b      	cbnz	r3, 8017b32 <_fflush_r+0x1a>
 8017b2e:	f7fe fdad 	bl	801668c <__sinit>
 8017b32:	4b14      	ldr	r3, [pc, #80]	; (8017b84 <_fflush_r+0x6c>)
 8017b34:	429c      	cmp	r4, r3
 8017b36:	d11b      	bne.n	8017b70 <_fflush_r+0x58>
 8017b38:	686c      	ldr	r4, [r5, #4]
 8017b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d0ef      	beq.n	8017b22 <_fflush_r+0xa>
 8017b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b44:	07d0      	lsls	r0, r2, #31
 8017b46:	d404      	bmi.n	8017b52 <_fflush_r+0x3a>
 8017b48:	0599      	lsls	r1, r3, #22
 8017b4a:	d402      	bmi.n	8017b52 <_fflush_r+0x3a>
 8017b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b4e:	f7fe fe60 	bl	8016812 <__retarget_lock_acquire_recursive>
 8017b52:	4628      	mov	r0, r5
 8017b54:	4621      	mov	r1, r4
 8017b56:	f7ff ff59 	bl	8017a0c <__sflush_r>
 8017b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b5c:	07da      	lsls	r2, r3, #31
 8017b5e:	4605      	mov	r5, r0
 8017b60:	d4e0      	bmi.n	8017b24 <_fflush_r+0xc>
 8017b62:	89a3      	ldrh	r3, [r4, #12]
 8017b64:	059b      	lsls	r3, r3, #22
 8017b66:	d4dd      	bmi.n	8017b24 <_fflush_r+0xc>
 8017b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b6a:	f7fe fe53 	bl	8016814 <__retarget_lock_release_recursive>
 8017b6e:	e7d9      	b.n	8017b24 <_fflush_r+0xc>
 8017b70:	4b05      	ldr	r3, [pc, #20]	; (8017b88 <_fflush_r+0x70>)
 8017b72:	429c      	cmp	r4, r3
 8017b74:	d101      	bne.n	8017b7a <_fflush_r+0x62>
 8017b76:	68ac      	ldr	r4, [r5, #8]
 8017b78:	e7df      	b.n	8017b3a <_fflush_r+0x22>
 8017b7a:	4b04      	ldr	r3, [pc, #16]	; (8017b8c <_fflush_r+0x74>)
 8017b7c:	429c      	cmp	r4, r3
 8017b7e:	bf08      	it	eq
 8017b80:	68ec      	ldreq	r4, [r5, #12]
 8017b82:	e7da      	b.n	8017b3a <_fflush_r+0x22>
 8017b84:	0801ceb8 	.word	0x0801ceb8
 8017b88:	0801ced8 	.word	0x0801ced8
 8017b8c:	0801ce98 	.word	0x0801ce98

08017b90 <fiprintf>:
 8017b90:	b40e      	push	{r1, r2, r3}
 8017b92:	b503      	push	{r0, r1, lr}
 8017b94:	4601      	mov	r1, r0
 8017b96:	ab03      	add	r3, sp, #12
 8017b98:	4805      	ldr	r0, [pc, #20]	; (8017bb0 <fiprintf+0x20>)
 8017b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b9e:	6800      	ldr	r0, [r0, #0]
 8017ba0:	9301      	str	r3, [sp, #4]
 8017ba2:	f001 fa59 	bl	8019058 <_vfiprintf_r>
 8017ba6:	b002      	add	sp, #8
 8017ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bac:	b003      	add	sp, #12
 8017bae:	4770      	bx	lr
 8017bb0:	2000002c 	.word	0x2000002c

08017bb4 <rshift>:
 8017bb4:	6903      	ldr	r3, [r0, #16]
 8017bb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017bba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017bc2:	f100 0414 	add.w	r4, r0, #20
 8017bc6:	dd45      	ble.n	8017c54 <rshift+0xa0>
 8017bc8:	f011 011f 	ands.w	r1, r1, #31
 8017bcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017bd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017bd4:	d10c      	bne.n	8017bf0 <rshift+0x3c>
 8017bd6:	f100 0710 	add.w	r7, r0, #16
 8017bda:	4629      	mov	r1, r5
 8017bdc:	42b1      	cmp	r1, r6
 8017bde:	d334      	bcc.n	8017c4a <rshift+0x96>
 8017be0:	1a9b      	subs	r3, r3, r2
 8017be2:	009b      	lsls	r3, r3, #2
 8017be4:	1eea      	subs	r2, r5, #3
 8017be6:	4296      	cmp	r6, r2
 8017be8:	bf38      	it	cc
 8017bea:	2300      	movcc	r3, #0
 8017bec:	4423      	add	r3, r4
 8017bee:	e015      	b.n	8017c1c <rshift+0x68>
 8017bf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017bf4:	f1c1 0820 	rsb	r8, r1, #32
 8017bf8:	40cf      	lsrs	r7, r1
 8017bfa:	f105 0e04 	add.w	lr, r5, #4
 8017bfe:	46a1      	mov	r9, r4
 8017c00:	4576      	cmp	r6, lr
 8017c02:	46f4      	mov	ip, lr
 8017c04:	d815      	bhi.n	8017c32 <rshift+0x7e>
 8017c06:	1a9a      	subs	r2, r3, r2
 8017c08:	0092      	lsls	r2, r2, #2
 8017c0a:	3a04      	subs	r2, #4
 8017c0c:	3501      	adds	r5, #1
 8017c0e:	42ae      	cmp	r6, r5
 8017c10:	bf38      	it	cc
 8017c12:	2200      	movcc	r2, #0
 8017c14:	18a3      	adds	r3, r4, r2
 8017c16:	50a7      	str	r7, [r4, r2]
 8017c18:	b107      	cbz	r7, 8017c1c <rshift+0x68>
 8017c1a:	3304      	adds	r3, #4
 8017c1c:	1b1a      	subs	r2, r3, r4
 8017c1e:	42a3      	cmp	r3, r4
 8017c20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017c24:	bf08      	it	eq
 8017c26:	2300      	moveq	r3, #0
 8017c28:	6102      	str	r2, [r0, #16]
 8017c2a:	bf08      	it	eq
 8017c2c:	6143      	streq	r3, [r0, #20]
 8017c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c32:	f8dc c000 	ldr.w	ip, [ip]
 8017c36:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c3a:	ea4c 0707 	orr.w	r7, ip, r7
 8017c3e:	f849 7b04 	str.w	r7, [r9], #4
 8017c42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c46:	40cf      	lsrs	r7, r1
 8017c48:	e7da      	b.n	8017c00 <rshift+0x4c>
 8017c4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c52:	e7c3      	b.n	8017bdc <rshift+0x28>
 8017c54:	4623      	mov	r3, r4
 8017c56:	e7e1      	b.n	8017c1c <rshift+0x68>

08017c58 <__hexdig_fun>:
 8017c58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017c5c:	2b09      	cmp	r3, #9
 8017c5e:	d802      	bhi.n	8017c66 <__hexdig_fun+0xe>
 8017c60:	3820      	subs	r0, #32
 8017c62:	b2c0      	uxtb	r0, r0
 8017c64:	4770      	bx	lr
 8017c66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017c6a:	2b05      	cmp	r3, #5
 8017c6c:	d801      	bhi.n	8017c72 <__hexdig_fun+0x1a>
 8017c6e:	3847      	subs	r0, #71	; 0x47
 8017c70:	e7f7      	b.n	8017c62 <__hexdig_fun+0xa>
 8017c72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017c76:	2b05      	cmp	r3, #5
 8017c78:	d801      	bhi.n	8017c7e <__hexdig_fun+0x26>
 8017c7a:	3827      	subs	r0, #39	; 0x27
 8017c7c:	e7f1      	b.n	8017c62 <__hexdig_fun+0xa>
 8017c7e:	2000      	movs	r0, #0
 8017c80:	4770      	bx	lr
	...

08017c84 <__gethex>:
 8017c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c88:	ed2d 8b02 	vpush	{d8}
 8017c8c:	b089      	sub	sp, #36	; 0x24
 8017c8e:	ee08 0a10 	vmov	s16, r0
 8017c92:	9304      	str	r3, [sp, #16]
 8017c94:	4bb4      	ldr	r3, [pc, #720]	; (8017f68 <__gethex+0x2e4>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	9301      	str	r3, [sp, #4]
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	468b      	mov	fp, r1
 8017c9e:	4690      	mov	r8, r2
 8017ca0:	f7e8 fab6 	bl	8000210 <strlen>
 8017ca4:	9b01      	ldr	r3, [sp, #4]
 8017ca6:	f8db 2000 	ldr.w	r2, [fp]
 8017caa:	4403      	add	r3, r0
 8017cac:	4682      	mov	sl, r0
 8017cae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017cb2:	9305      	str	r3, [sp, #20]
 8017cb4:	1c93      	adds	r3, r2, #2
 8017cb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017cba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017cbe:	32fe      	adds	r2, #254	; 0xfe
 8017cc0:	18d1      	adds	r1, r2, r3
 8017cc2:	461f      	mov	r7, r3
 8017cc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017cc8:	9100      	str	r1, [sp, #0]
 8017cca:	2830      	cmp	r0, #48	; 0x30
 8017ccc:	d0f8      	beq.n	8017cc0 <__gethex+0x3c>
 8017cce:	f7ff ffc3 	bl	8017c58 <__hexdig_fun>
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	2800      	cmp	r0, #0
 8017cd6:	d13a      	bne.n	8017d4e <__gethex+0xca>
 8017cd8:	9901      	ldr	r1, [sp, #4]
 8017cda:	4652      	mov	r2, sl
 8017cdc:	4638      	mov	r0, r7
 8017cde:	f7fe ffa2 	bl	8016c26 <strncmp>
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	d168      	bne.n	8017dba <__gethex+0x136>
 8017ce8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017cec:	eb07 060a 	add.w	r6, r7, sl
 8017cf0:	f7ff ffb2 	bl	8017c58 <__hexdig_fun>
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	d062      	beq.n	8017dbe <__gethex+0x13a>
 8017cf8:	4633      	mov	r3, r6
 8017cfa:	7818      	ldrb	r0, [r3, #0]
 8017cfc:	2830      	cmp	r0, #48	; 0x30
 8017cfe:	461f      	mov	r7, r3
 8017d00:	f103 0301 	add.w	r3, r3, #1
 8017d04:	d0f9      	beq.n	8017cfa <__gethex+0x76>
 8017d06:	f7ff ffa7 	bl	8017c58 <__hexdig_fun>
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	fab0 f480 	clz	r4, r0
 8017d10:	0964      	lsrs	r4, r4, #5
 8017d12:	4635      	mov	r5, r6
 8017d14:	9300      	str	r3, [sp, #0]
 8017d16:	463a      	mov	r2, r7
 8017d18:	4616      	mov	r6, r2
 8017d1a:	3201      	adds	r2, #1
 8017d1c:	7830      	ldrb	r0, [r6, #0]
 8017d1e:	f7ff ff9b 	bl	8017c58 <__hexdig_fun>
 8017d22:	2800      	cmp	r0, #0
 8017d24:	d1f8      	bne.n	8017d18 <__gethex+0x94>
 8017d26:	9901      	ldr	r1, [sp, #4]
 8017d28:	4652      	mov	r2, sl
 8017d2a:	4630      	mov	r0, r6
 8017d2c:	f7fe ff7b 	bl	8016c26 <strncmp>
 8017d30:	b980      	cbnz	r0, 8017d54 <__gethex+0xd0>
 8017d32:	b94d      	cbnz	r5, 8017d48 <__gethex+0xc4>
 8017d34:	eb06 050a 	add.w	r5, r6, sl
 8017d38:	462a      	mov	r2, r5
 8017d3a:	4616      	mov	r6, r2
 8017d3c:	3201      	adds	r2, #1
 8017d3e:	7830      	ldrb	r0, [r6, #0]
 8017d40:	f7ff ff8a 	bl	8017c58 <__hexdig_fun>
 8017d44:	2800      	cmp	r0, #0
 8017d46:	d1f8      	bne.n	8017d3a <__gethex+0xb6>
 8017d48:	1bad      	subs	r5, r5, r6
 8017d4a:	00ad      	lsls	r5, r5, #2
 8017d4c:	e004      	b.n	8017d58 <__gethex+0xd4>
 8017d4e:	2400      	movs	r4, #0
 8017d50:	4625      	mov	r5, r4
 8017d52:	e7e0      	b.n	8017d16 <__gethex+0x92>
 8017d54:	2d00      	cmp	r5, #0
 8017d56:	d1f7      	bne.n	8017d48 <__gethex+0xc4>
 8017d58:	7833      	ldrb	r3, [r6, #0]
 8017d5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017d5e:	2b50      	cmp	r3, #80	; 0x50
 8017d60:	d13b      	bne.n	8017dda <__gethex+0x156>
 8017d62:	7873      	ldrb	r3, [r6, #1]
 8017d64:	2b2b      	cmp	r3, #43	; 0x2b
 8017d66:	d02c      	beq.n	8017dc2 <__gethex+0x13e>
 8017d68:	2b2d      	cmp	r3, #45	; 0x2d
 8017d6a:	d02e      	beq.n	8017dca <__gethex+0x146>
 8017d6c:	1c71      	adds	r1, r6, #1
 8017d6e:	f04f 0900 	mov.w	r9, #0
 8017d72:	7808      	ldrb	r0, [r1, #0]
 8017d74:	f7ff ff70 	bl	8017c58 <__hexdig_fun>
 8017d78:	1e43      	subs	r3, r0, #1
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	2b18      	cmp	r3, #24
 8017d7e:	d82c      	bhi.n	8017dda <__gethex+0x156>
 8017d80:	f1a0 0210 	sub.w	r2, r0, #16
 8017d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017d88:	f7ff ff66 	bl	8017c58 <__hexdig_fun>
 8017d8c:	1e43      	subs	r3, r0, #1
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	2b18      	cmp	r3, #24
 8017d92:	d91d      	bls.n	8017dd0 <__gethex+0x14c>
 8017d94:	f1b9 0f00 	cmp.w	r9, #0
 8017d98:	d000      	beq.n	8017d9c <__gethex+0x118>
 8017d9a:	4252      	negs	r2, r2
 8017d9c:	4415      	add	r5, r2
 8017d9e:	f8cb 1000 	str.w	r1, [fp]
 8017da2:	b1e4      	cbz	r4, 8017dde <__gethex+0x15a>
 8017da4:	9b00      	ldr	r3, [sp, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	bf14      	ite	ne
 8017daa:	2700      	movne	r7, #0
 8017dac:	2706      	moveq	r7, #6
 8017dae:	4638      	mov	r0, r7
 8017db0:	b009      	add	sp, #36	; 0x24
 8017db2:	ecbd 8b02 	vpop	{d8}
 8017db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dba:	463e      	mov	r6, r7
 8017dbc:	4625      	mov	r5, r4
 8017dbe:	2401      	movs	r4, #1
 8017dc0:	e7ca      	b.n	8017d58 <__gethex+0xd4>
 8017dc2:	f04f 0900 	mov.w	r9, #0
 8017dc6:	1cb1      	adds	r1, r6, #2
 8017dc8:	e7d3      	b.n	8017d72 <__gethex+0xee>
 8017dca:	f04f 0901 	mov.w	r9, #1
 8017dce:	e7fa      	b.n	8017dc6 <__gethex+0x142>
 8017dd0:	230a      	movs	r3, #10
 8017dd2:	fb03 0202 	mla	r2, r3, r2, r0
 8017dd6:	3a10      	subs	r2, #16
 8017dd8:	e7d4      	b.n	8017d84 <__gethex+0x100>
 8017dda:	4631      	mov	r1, r6
 8017ddc:	e7df      	b.n	8017d9e <__gethex+0x11a>
 8017dde:	1bf3      	subs	r3, r6, r7
 8017de0:	3b01      	subs	r3, #1
 8017de2:	4621      	mov	r1, r4
 8017de4:	2b07      	cmp	r3, #7
 8017de6:	dc0b      	bgt.n	8017e00 <__gethex+0x17c>
 8017de8:	ee18 0a10 	vmov	r0, s16
 8017dec:	f000 fa8a 	bl	8018304 <_Balloc>
 8017df0:	4604      	mov	r4, r0
 8017df2:	b940      	cbnz	r0, 8017e06 <__gethex+0x182>
 8017df4:	4b5d      	ldr	r3, [pc, #372]	; (8017f6c <__gethex+0x2e8>)
 8017df6:	4602      	mov	r2, r0
 8017df8:	21de      	movs	r1, #222	; 0xde
 8017dfa:	485d      	ldr	r0, [pc, #372]	; (8017f70 <__gethex+0x2ec>)
 8017dfc:	f7ff fdd8 	bl	80179b0 <__assert_func>
 8017e00:	3101      	adds	r1, #1
 8017e02:	105b      	asrs	r3, r3, #1
 8017e04:	e7ee      	b.n	8017de4 <__gethex+0x160>
 8017e06:	f100 0914 	add.w	r9, r0, #20
 8017e0a:	f04f 0b00 	mov.w	fp, #0
 8017e0e:	f1ca 0301 	rsb	r3, sl, #1
 8017e12:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e16:	f8cd b000 	str.w	fp, [sp]
 8017e1a:	9306      	str	r3, [sp, #24]
 8017e1c:	42b7      	cmp	r7, r6
 8017e1e:	d340      	bcc.n	8017ea2 <__gethex+0x21e>
 8017e20:	9802      	ldr	r0, [sp, #8]
 8017e22:	9b00      	ldr	r3, [sp, #0]
 8017e24:	f840 3b04 	str.w	r3, [r0], #4
 8017e28:	eba0 0009 	sub.w	r0, r0, r9
 8017e2c:	1080      	asrs	r0, r0, #2
 8017e2e:	0146      	lsls	r6, r0, #5
 8017e30:	6120      	str	r0, [r4, #16]
 8017e32:	4618      	mov	r0, r3
 8017e34:	f000 fb58 	bl	80184e8 <__hi0bits>
 8017e38:	1a30      	subs	r0, r6, r0
 8017e3a:	f8d8 6000 	ldr.w	r6, [r8]
 8017e3e:	42b0      	cmp	r0, r6
 8017e40:	dd63      	ble.n	8017f0a <__gethex+0x286>
 8017e42:	1b87      	subs	r7, r0, r6
 8017e44:	4639      	mov	r1, r7
 8017e46:	4620      	mov	r0, r4
 8017e48:	f000 fefc 	bl	8018c44 <__any_on>
 8017e4c:	4682      	mov	sl, r0
 8017e4e:	b1a8      	cbz	r0, 8017e7c <__gethex+0x1f8>
 8017e50:	1e7b      	subs	r3, r7, #1
 8017e52:	1159      	asrs	r1, r3, #5
 8017e54:	f003 021f 	and.w	r2, r3, #31
 8017e58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017e5c:	f04f 0a01 	mov.w	sl, #1
 8017e60:	fa0a f202 	lsl.w	r2, sl, r2
 8017e64:	420a      	tst	r2, r1
 8017e66:	d009      	beq.n	8017e7c <__gethex+0x1f8>
 8017e68:	4553      	cmp	r3, sl
 8017e6a:	dd05      	ble.n	8017e78 <__gethex+0x1f4>
 8017e6c:	1eb9      	subs	r1, r7, #2
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f000 fee8 	bl	8018c44 <__any_on>
 8017e74:	2800      	cmp	r0, #0
 8017e76:	d145      	bne.n	8017f04 <__gethex+0x280>
 8017e78:	f04f 0a02 	mov.w	sl, #2
 8017e7c:	4639      	mov	r1, r7
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f7ff fe98 	bl	8017bb4 <rshift>
 8017e84:	443d      	add	r5, r7
 8017e86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e8a:	42ab      	cmp	r3, r5
 8017e8c:	da4c      	bge.n	8017f28 <__gethex+0x2a4>
 8017e8e:	ee18 0a10 	vmov	r0, s16
 8017e92:	4621      	mov	r1, r4
 8017e94:	f000 fa76 	bl	8018384 <_Bfree>
 8017e98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	6013      	str	r3, [r2, #0]
 8017e9e:	27a3      	movs	r7, #163	; 0xa3
 8017ea0:	e785      	b.n	8017dae <__gethex+0x12a>
 8017ea2:	1e73      	subs	r3, r6, #1
 8017ea4:	9a05      	ldr	r2, [sp, #20]
 8017ea6:	9303      	str	r3, [sp, #12]
 8017ea8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017eac:	4293      	cmp	r3, r2
 8017eae:	d019      	beq.n	8017ee4 <__gethex+0x260>
 8017eb0:	f1bb 0f20 	cmp.w	fp, #32
 8017eb4:	d107      	bne.n	8017ec6 <__gethex+0x242>
 8017eb6:	9b02      	ldr	r3, [sp, #8]
 8017eb8:	9a00      	ldr	r2, [sp, #0]
 8017eba:	f843 2b04 	str.w	r2, [r3], #4
 8017ebe:	9302      	str	r3, [sp, #8]
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	9300      	str	r3, [sp, #0]
 8017ec4:	469b      	mov	fp, r3
 8017ec6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017eca:	f7ff fec5 	bl	8017c58 <__hexdig_fun>
 8017ece:	9b00      	ldr	r3, [sp, #0]
 8017ed0:	f000 000f 	and.w	r0, r0, #15
 8017ed4:	fa00 f00b 	lsl.w	r0, r0, fp
 8017ed8:	4303      	orrs	r3, r0
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	f10b 0b04 	add.w	fp, fp, #4
 8017ee0:	9b03      	ldr	r3, [sp, #12]
 8017ee2:	e00d      	b.n	8017f00 <__gethex+0x27c>
 8017ee4:	9b03      	ldr	r3, [sp, #12]
 8017ee6:	9a06      	ldr	r2, [sp, #24]
 8017ee8:	4413      	add	r3, r2
 8017eea:	42bb      	cmp	r3, r7
 8017eec:	d3e0      	bcc.n	8017eb0 <__gethex+0x22c>
 8017eee:	4618      	mov	r0, r3
 8017ef0:	9901      	ldr	r1, [sp, #4]
 8017ef2:	9307      	str	r3, [sp, #28]
 8017ef4:	4652      	mov	r2, sl
 8017ef6:	f7fe fe96 	bl	8016c26 <strncmp>
 8017efa:	9b07      	ldr	r3, [sp, #28]
 8017efc:	2800      	cmp	r0, #0
 8017efe:	d1d7      	bne.n	8017eb0 <__gethex+0x22c>
 8017f00:	461e      	mov	r6, r3
 8017f02:	e78b      	b.n	8017e1c <__gethex+0x198>
 8017f04:	f04f 0a03 	mov.w	sl, #3
 8017f08:	e7b8      	b.n	8017e7c <__gethex+0x1f8>
 8017f0a:	da0a      	bge.n	8017f22 <__gethex+0x29e>
 8017f0c:	1a37      	subs	r7, r6, r0
 8017f0e:	4621      	mov	r1, r4
 8017f10:	ee18 0a10 	vmov	r0, s16
 8017f14:	463a      	mov	r2, r7
 8017f16:	f000 fc51 	bl	80187bc <__lshift>
 8017f1a:	1bed      	subs	r5, r5, r7
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	f100 0914 	add.w	r9, r0, #20
 8017f22:	f04f 0a00 	mov.w	sl, #0
 8017f26:	e7ae      	b.n	8017e86 <__gethex+0x202>
 8017f28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017f2c:	42a8      	cmp	r0, r5
 8017f2e:	dd72      	ble.n	8018016 <__gethex+0x392>
 8017f30:	1b45      	subs	r5, r0, r5
 8017f32:	42ae      	cmp	r6, r5
 8017f34:	dc36      	bgt.n	8017fa4 <__gethex+0x320>
 8017f36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f3a:	2b02      	cmp	r3, #2
 8017f3c:	d02a      	beq.n	8017f94 <__gethex+0x310>
 8017f3e:	2b03      	cmp	r3, #3
 8017f40:	d02c      	beq.n	8017f9c <__gethex+0x318>
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d11c      	bne.n	8017f80 <__gethex+0x2fc>
 8017f46:	42ae      	cmp	r6, r5
 8017f48:	d11a      	bne.n	8017f80 <__gethex+0x2fc>
 8017f4a:	2e01      	cmp	r6, #1
 8017f4c:	d112      	bne.n	8017f74 <__gethex+0x2f0>
 8017f4e:	9a04      	ldr	r2, [sp, #16]
 8017f50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017f54:	6013      	str	r3, [r2, #0]
 8017f56:	2301      	movs	r3, #1
 8017f58:	6123      	str	r3, [r4, #16]
 8017f5a:	f8c9 3000 	str.w	r3, [r9]
 8017f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f60:	2762      	movs	r7, #98	; 0x62
 8017f62:	601c      	str	r4, [r3, #0]
 8017f64:	e723      	b.n	8017dae <__gethex+0x12a>
 8017f66:	bf00      	nop
 8017f68:	0801d0e0 	.word	0x0801d0e0
 8017f6c:	0801d069 	.word	0x0801d069
 8017f70:	0801d07a 	.word	0x0801d07a
 8017f74:	1e71      	subs	r1, r6, #1
 8017f76:	4620      	mov	r0, r4
 8017f78:	f000 fe64 	bl	8018c44 <__any_on>
 8017f7c:	2800      	cmp	r0, #0
 8017f7e:	d1e6      	bne.n	8017f4e <__gethex+0x2ca>
 8017f80:	ee18 0a10 	vmov	r0, s16
 8017f84:	4621      	mov	r1, r4
 8017f86:	f000 f9fd 	bl	8018384 <_Bfree>
 8017f8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	6013      	str	r3, [r2, #0]
 8017f90:	2750      	movs	r7, #80	; 0x50
 8017f92:	e70c      	b.n	8017dae <__gethex+0x12a>
 8017f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d1f2      	bne.n	8017f80 <__gethex+0x2fc>
 8017f9a:	e7d8      	b.n	8017f4e <__gethex+0x2ca>
 8017f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d1d5      	bne.n	8017f4e <__gethex+0x2ca>
 8017fa2:	e7ed      	b.n	8017f80 <__gethex+0x2fc>
 8017fa4:	1e6f      	subs	r7, r5, #1
 8017fa6:	f1ba 0f00 	cmp.w	sl, #0
 8017faa:	d131      	bne.n	8018010 <__gethex+0x38c>
 8017fac:	b127      	cbz	r7, 8017fb8 <__gethex+0x334>
 8017fae:	4639      	mov	r1, r7
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fe47 	bl	8018c44 <__any_on>
 8017fb6:	4682      	mov	sl, r0
 8017fb8:	117b      	asrs	r3, r7, #5
 8017fba:	2101      	movs	r1, #1
 8017fbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017fc0:	f007 071f 	and.w	r7, r7, #31
 8017fc4:	fa01 f707 	lsl.w	r7, r1, r7
 8017fc8:	421f      	tst	r7, r3
 8017fca:	4629      	mov	r1, r5
 8017fcc:	4620      	mov	r0, r4
 8017fce:	bf18      	it	ne
 8017fd0:	f04a 0a02 	orrne.w	sl, sl, #2
 8017fd4:	1b76      	subs	r6, r6, r5
 8017fd6:	f7ff fded 	bl	8017bb4 <rshift>
 8017fda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017fde:	2702      	movs	r7, #2
 8017fe0:	f1ba 0f00 	cmp.w	sl, #0
 8017fe4:	d048      	beq.n	8018078 <__gethex+0x3f4>
 8017fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fea:	2b02      	cmp	r3, #2
 8017fec:	d015      	beq.n	801801a <__gethex+0x396>
 8017fee:	2b03      	cmp	r3, #3
 8017ff0:	d017      	beq.n	8018022 <__gethex+0x39e>
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	d109      	bne.n	801800a <__gethex+0x386>
 8017ff6:	f01a 0f02 	tst.w	sl, #2
 8017ffa:	d006      	beq.n	801800a <__gethex+0x386>
 8017ffc:	f8d9 0000 	ldr.w	r0, [r9]
 8018000:	ea4a 0a00 	orr.w	sl, sl, r0
 8018004:	f01a 0f01 	tst.w	sl, #1
 8018008:	d10e      	bne.n	8018028 <__gethex+0x3a4>
 801800a:	f047 0710 	orr.w	r7, r7, #16
 801800e:	e033      	b.n	8018078 <__gethex+0x3f4>
 8018010:	f04f 0a01 	mov.w	sl, #1
 8018014:	e7d0      	b.n	8017fb8 <__gethex+0x334>
 8018016:	2701      	movs	r7, #1
 8018018:	e7e2      	b.n	8017fe0 <__gethex+0x35c>
 801801a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801801c:	f1c3 0301 	rsb	r3, r3, #1
 8018020:	9315      	str	r3, [sp, #84]	; 0x54
 8018022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018024:	2b00      	cmp	r3, #0
 8018026:	d0f0      	beq.n	801800a <__gethex+0x386>
 8018028:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801802c:	f104 0314 	add.w	r3, r4, #20
 8018030:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018034:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018038:	f04f 0c00 	mov.w	ip, #0
 801803c:	4618      	mov	r0, r3
 801803e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018042:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8018046:	d01c      	beq.n	8018082 <__gethex+0x3fe>
 8018048:	3201      	adds	r2, #1
 801804a:	6002      	str	r2, [r0, #0]
 801804c:	2f02      	cmp	r7, #2
 801804e:	f104 0314 	add.w	r3, r4, #20
 8018052:	d13f      	bne.n	80180d4 <__gethex+0x450>
 8018054:	f8d8 2000 	ldr.w	r2, [r8]
 8018058:	3a01      	subs	r2, #1
 801805a:	42b2      	cmp	r2, r6
 801805c:	d10a      	bne.n	8018074 <__gethex+0x3f0>
 801805e:	1171      	asrs	r1, r6, #5
 8018060:	2201      	movs	r2, #1
 8018062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018066:	f006 061f 	and.w	r6, r6, #31
 801806a:	fa02 f606 	lsl.w	r6, r2, r6
 801806e:	421e      	tst	r6, r3
 8018070:	bf18      	it	ne
 8018072:	4617      	movne	r7, r2
 8018074:	f047 0720 	orr.w	r7, r7, #32
 8018078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801807a:	601c      	str	r4, [r3, #0]
 801807c:	9b04      	ldr	r3, [sp, #16]
 801807e:	601d      	str	r5, [r3, #0]
 8018080:	e695      	b.n	8017dae <__gethex+0x12a>
 8018082:	4299      	cmp	r1, r3
 8018084:	f843 cc04 	str.w	ip, [r3, #-4]
 8018088:	d8d8      	bhi.n	801803c <__gethex+0x3b8>
 801808a:	68a3      	ldr	r3, [r4, #8]
 801808c:	459b      	cmp	fp, r3
 801808e:	db19      	blt.n	80180c4 <__gethex+0x440>
 8018090:	6861      	ldr	r1, [r4, #4]
 8018092:	ee18 0a10 	vmov	r0, s16
 8018096:	3101      	adds	r1, #1
 8018098:	f000 f934 	bl	8018304 <_Balloc>
 801809c:	4681      	mov	r9, r0
 801809e:	b918      	cbnz	r0, 80180a8 <__gethex+0x424>
 80180a0:	4b1a      	ldr	r3, [pc, #104]	; (801810c <__gethex+0x488>)
 80180a2:	4602      	mov	r2, r0
 80180a4:	2184      	movs	r1, #132	; 0x84
 80180a6:	e6a8      	b.n	8017dfa <__gethex+0x176>
 80180a8:	6922      	ldr	r2, [r4, #16]
 80180aa:	3202      	adds	r2, #2
 80180ac:	f104 010c 	add.w	r1, r4, #12
 80180b0:	0092      	lsls	r2, r2, #2
 80180b2:	300c      	adds	r0, #12
 80180b4:	f7fe fbbf 	bl	8016836 <memcpy>
 80180b8:	4621      	mov	r1, r4
 80180ba:	ee18 0a10 	vmov	r0, s16
 80180be:	f000 f961 	bl	8018384 <_Bfree>
 80180c2:	464c      	mov	r4, r9
 80180c4:	6923      	ldr	r3, [r4, #16]
 80180c6:	1c5a      	adds	r2, r3, #1
 80180c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80180cc:	6122      	str	r2, [r4, #16]
 80180ce:	2201      	movs	r2, #1
 80180d0:	615a      	str	r2, [r3, #20]
 80180d2:	e7bb      	b.n	801804c <__gethex+0x3c8>
 80180d4:	6922      	ldr	r2, [r4, #16]
 80180d6:	455a      	cmp	r2, fp
 80180d8:	dd0b      	ble.n	80180f2 <__gethex+0x46e>
 80180da:	2101      	movs	r1, #1
 80180dc:	4620      	mov	r0, r4
 80180de:	f7ff fd69 	bl	8017bb4 <rshift>
 80180e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180e6:	3501      	adds	r5, #1
 80180e8:	42ab      	cmp	r3, r5
 80180ea:	f6ff aed0 	blt.w	8017e8e <__gethex+0x20a>
 80180ee:	2701      	movs	r7, #1
 80180f0:	e7c0      	b.n	8018074 <__gethex+0x3f0>
 80180f2:	f016 061f 	ands.w	r6, r6, #31
 80180f6:	d0fa      	beq.n	80180ee <__gethex+0x46a>
 80180f8:	4453      	add	r3, sl
 80180fa:	f1c6 0620 	rsb	r6, r6, #32
 80180fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018102:	f000 f9f1 	bl	80184e8 <__hi0bits>
 8018106:	42b0      	cmp	r0, r6
 8018108:	dbe7      	blt.n	80180da <__gethex+0x456>
 801810a:	e7f0      	b.n	80180ee <__gethex+0x46a>
 801810c:	0801d069 	.word	0x0801d069

08018110 <L_shift>:
 8018110:	f1c2 0208 	rsb	r2, r2, #8
 8018114:	0092      	lsls	r2, r2, #2
 8018116:	b570      	push	{r4, r5, r6, lr}
 8018118:	f1c2 0620 	rsb	r6, r2, #32
 801811c:	6843      	ldr	r3, [r0, #4]
 801811e:	6804      	ldr	r4, [r0, #0]
 8018120:	fa03 f506 	lsl.w	r5, r3, r6
 8018124:	432c      	orrs	r4, r5
 8018126:	40d3      	lsrs	r3, r2
 8018128:	6004      	str	r4, [r0, #0]
 801812a:	f840 3f04 	str.w	r3, [r0, #4]!
 801812e:	4288      	cmp	r0, r1
 8018130:	d3f4      	bcc.n	801811c <L_shift+0xc>
 8018132:	bd70      	pop	{r4, r5, r6, pc}

08018134 <__match>:
 8018134:	b530      	push	{r4, r5, lr}
 8018136:	6803      	ldr	r3, [r0, #0]
 8018138:	3301      	adds	r3, #1
 801813a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801813e:	b914      	cbnz	r4, 8018146 <__match+0x12>
 8018140:	6003      	str	r3, [r0, #0]
 8018142:	2001      	movs	r0, #1
 8018144:	bd30      	pop	{r4, r5, pc}
 8018146:	f813 2b01 	ldrb.w	r2, [r3], #1
 801814a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801814e:	2d19      	cmp	r5, #25
 8018150:	bf98      	it	ls
 8018152:	3220      	addls	r2, #32
 8018154:	42a2      	cmp	r2, r4
 8018156:	d0f0      	beq.n	801813a <__match+0x6>
 8018158:	2000      	movs	r0, #0
 801815a:	e7f3      	b.n	8018144 <__match+0x10>

0801815c <__hexnan>:
 801815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018160:	680b      	ldr	r3, [r1, #0]
 8018162:	115e      	asrs	r6, r3, #5
 8018164:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018168:	f013 031f 	ands.w	r3, r3, #31
 801816c:	b087      	sub	sp, #28
 801816e:	bf18      	it	ne
 8018170:	3604      	addne	r6, #4
 8018172:	2500      	movs	r5, #0
 8018174:	1f37      	subs	r7, r6, #4
 8018176:	4690      	mov	r8, r2
 8018178:	6802      	ldr	r2, [r0, #0]
 801817a:	9301      	str	r3, [sp, #4]
 801817c:	4682      	mov	sl, r0
 801817e:	f846 5c04 	str.w	r5, [r6, #-4]
 8018182:	46b9      	mov	r9, r7
 8018184:	463c      	mov	r4, r7
 8018186:	9502      	str	r5, [sp, #8]
 8018188:	46ab      	mov	fp, r5
 801818a:	7851      	ldrb	r1, [r2, #1]
 801818c:	1c53      	adds	r3, r2, #1
 801818e:	9303      	str	r3, [sp, #12]
 8018190:	b341      	cbz	r1, 80181e4 <__hexnan+0x88>
 8018192:	4608      	mov	r0, r1
 8018194:	9205      	str	r2, [sp, #20]
 8018196:	9104      	str	r1, [sp, #16]
 8018198:	f7ff fd5e 	bl	8017c58 <__hexdig_fun>
 801819c:	2800      	cmp	r0, #0
 801819e:	d14f      	bne.n	8018240 <__hexnan+0xe4>
 80181a0:	9904      	ldr	r1, [sp, #16]
 80181a2:	9a05      	ldr	r2, [sp, #20]
 80181a4:	2920      	cmp	r1, #32
 80181a6:	d818      	bhi.n	80181da <__hexnan+0x7e>
 80181a8:	9b02      	ldr	r3, [sp, #8]
 80181aa:	459b      	cmp	fp, r3
 80181ac:	dd13      	ble.n	80181d6 <__hexnan+0x7a>
 80181ae:	454c      	cmp	r4, r9
 80181b0:	d206      	bcs.n	80181c0 <__hexnan+0x64>
 80181b2:	2d07      	cmp	r5, #7
 80181b4:	dc04      	bgt.n	80181c0 <__hexnan+0x64>
 80181b6:	462a      	mov	r2, r5
 80181b8:	4649      	mov	r1, r9
 80181ba:	4620      	mov	r0, r4
 80181bc:	f7ff ffa8 	bl	8018110 <L_shift>
 80181c0:	4544      	cmp	r4, r8
 80181c2:	d950      	bls.n	8018266 <__hexnan+0x10a>
 80181c4:	2300      	movs	r3, #0
 80181c6:	f1a4 0904 	sub.w	r9, r4, #4
 80181ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80181ce:	f8cd b008 	str.w	fp, [sp, #8]
 80181d2:	464c      	mov	r4, r9
 80181d4:	461d      	mov	r5, r3
 80181d6:	9a03      	ldr	r2, [sp, #12]
 80181d8:	e7d7      	b.n	801818a <__hexnan+0x2e>
 80181da:	2929      	cmp	r1, #41	; 0x29
 80181dc:	d156      	bne.n	801828c <__hexnan+0x130>
 80181de:	3202      	adds	r2, #2
 80181e0:	f8ca 2000 	str.w	r2, [sl]
 80181e4:	f1bb 0f00 	cmp.w	fp, #0
 80181e8:	d050      	beq.n	801828c <__hexnan+0x130>
 80181ea:	454c      	cmp	r4, r9
 80181ec:	d206      	bcs.n	80181fc <__hexnan+0xa0>
 80181ee:	2d07      	cmp	r5, #7
 80181f0:	dc04      	bgt.n	80181fc <__hexnan+0xa0>
 80181f2:	462a      	mov	r2, r5
 80181f4:	4649      	mov	r1, r9
 80181f6:	4620      	mov	r0, r4
 80181f8:	f7ff ff8a 	bl	8018110 <L_shift>
 80181fc:	4544      	cmp	r4, r8
 80181fe:	d934      	bls.n	801826a <__hexnan+0x10e>
 8018200:	f1a8 0204 	sub.w	r2, r8, #4
 8018204:	4623      	mov	r3, r4
 8018206:	f853 1b04 	ldr.w	r1, [r3], #4
 801820a:	f842 1f04 	str.w	r1, [r2, #4]!
 801820e:	429f      	cmp	r7, r3
 8018210:	d2f9      	bcs.n	8018206 <__hexnan+0xaa>
 8018212:	1b3b      	subs	r3, r7, r4
 8018214:	f023 0303 	bic.w	r3, r3, #3
 8018218:	3304      	adds	r3, #4
 801821a:	3401      	adds	r4, #1
 801821c:	3e03      	subs	r6, #3
 801821e:	42b4      	cmp	r4, r6
 8018220:	bf88      	it	hi
 8018222:	2304      	movhi	r3, #4
 8018224:	4443      	add	r3, r8
 8018226:	2200      	movs	r2, #0
 8018228:	f843 2b04 	str.w	r2, [r3], #4
 801822c:	429f      	cmp	r7, r3
 801822e:	d2fb      	bcs.n	8018228 <__hexnan+0xcc>
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	b91b      	cbnz	r3, 801823c <__hexnan+0xe0>
 8018234:	4547      	cmp	r7, r8
 8018236:	d127      	bne.n	8018288 <__hexnan+0x12c>
 8018238:	2301      	movs	r3, #1
 801823a:	603b      	str	r3, [r7, #0]
 801823c:	2005      	movs	r0, #5
 801823e:	e026      	b.n	801828e <__hexnan+0x132>
 8018240:	3501      	adds	r5, #1
 8018242:	2d08      	cmp	r5, #8
 8018244:	f10b 0b01 	add.w	fp, fp, #1
 8018248:	dd06      	ble.n	8018258 <__hexnan+0xfc>
 801824a:	4544      	cmp	r4, r8
 801824c:	d9c3      	bls.n	80181d6 <__hexnan+0x7a>
 801824e:	2300      	movs	r3, #0
 8018250:	f844 3c04 	str.w	r3, [r4, #-4]
 8018254:	2501      	movs	r5, #1
 8018256:	3c04      	subs	r4, #4
 8018258:	6822      	ldr	r2, [r4, #0]
 801825a:	f000 000f 	and.w	r0, r0, #15
 801825e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018262:	6022      	str	r2, [r4, #0]
 8018264:	e7b7      	b.n	80181d6 <__hexnan+0x7a>
 8018266:	2508      	movs	r5, #8
 8018268:	e7b5      	b.n	80181d6 <__hexnan+0x7a>
 801826a:	9b01      	ldr	r3, [sp, #4]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d0df      	beq.n	8018230 <__hexnan+0xd4>
 8018270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018274:	f1c3 0320 	rsb	r3, r3, #32
 8018278:	fa22 f303 	lsr.w	r3, r2, r3
 801827c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018280:	401a      	ands	r2, r3
 8018282:	f846 2c04 	str.w	r2, [r6, #-4]
 8018286:	e7d3      	b.n	8018230 <__hexnan+0xd4>
 8018288:	3f04      	subs	r7, #4
 801828a:	e7d1      	b.n	8018230 <__hexnan+0xd4>
 801828c:	2004      	movs	r0, #4
 801828e:	b007      	add	sp, #28
 8018290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018294 <_lseek_r>:
 8018294:	b538      	push	{r3, r4, r5, lr}
 8018296:	4d07      	ldr	r5, [pc, #28]	; (80182b4 <_lseek_r+0x20>)
 8018298:	4604      	mov	r4, r0
 801829a:	4608      	mov	r0, r1
 801829c:	4611      	mov	r1, r2
 801829e:	2200      	movs	r2, #0
 80182a0:	602a      	str	r2, [r5, #0]
 80182a2:	461a      	mov	r2, r3
 80182a4:	f7e9 fa0a 	bl	80016bc <_lseek>
 80182a8:	1c43      	adds	r3, r0, #1
 80182aa:	d102      	bne.n	80182b2 <_lseek_r+0x1e>
 80182ac:	682b      	ldr	r3, [r5, #0]
 80182ae:	b103      	cbz	r3, 80182b2 <_lseek_r+0x1e>
 80182b0:	6023      	str	r3, [r4, #0]
 80182b2:	bd38      	pop	{r3, r4, r5, pc}
 80182b4:	20011cb0 	.word	0x20011cb0

080182b8 <malloc>:
 80182b8:	4b02      	ldr	r3, [pc, #8]	; (80182c4 <malloc+0xc>)
 80182ba:	4601      	mov	r1, r0
 80182bc:	6818      	ldr	r0, [r3, #0]
 80182be:	f7fe bb0b 	b.w	80168d8 <_malloc_r>
 80182c2:	bf00      	nop
 80182c4:	2000002c 	.word	0x2000002c

080182c8 <__ascii_mbtowc>:
 80182c8:	b082      	sub	sp, #8
 80182ca:	b901      	cbnz	r1, 80182ce <__ascii_mbtowc+0x6>
 80182cc:	a901      	add	r1, sp, #4
 80182ce:	b142      	cbz	r2, 80182e2 <__ascii_mbtowc+0x1a>
 80182d0:	b14b      	cbz	r3, 80182e6 <__ascii_mbtowc+0x1e>
 80182d2:	7813      	ldrb	r3, [r2, #0]
 80182d4:	600b      	str	r3, [r1, #0]
 80182d6:	7812      	ldrb	r2, [r2, #0]
 80182d8:	1e10      	subs	r0, r2, #0
 80182da:	bf18      	it	ne
 80182dc:	2001      	movne	r0, #1
 80182de:	b002      	add	sp, #8
 80182e0:	4770      	bx	lr
 80182e2:	4610      	mov	r0, r2
 80182e4:	e7fb      	b.n	80182de <__ascii_mbtowc+0x16>
 80182e6:	f06f 0001 	mvn.w	r0, #1
 80182ea:	e7f8      	b.n	80182de <__ascii_mbtowc+0x16>

080182ec <__malloc_lock>:
 80182ec:	4801      	ldr	r0, [pc, #4]	; (80182f4 <__malloc_lock+0x8>)
 80182ee:	f7fe ba90 	b.w	8016812 <__retarget_lock_acquire_recursive>
 80182f2:	bf00      	nop
 80182f4:	20011ca4 	.word	0x20011ca4

080182f8 <__malloc_unlock>:
 80182f8:	4801      	ldr	r0, [pc, #4]	; (8018300 <__malloc_unlock+0x8>)
 80182fa:	f7fe ba8b 	b.w	8016814 <__retarget_lock_release_recursive>
 80182fe:	bf00      	nop
 8018300:	20011ca4 	.word	0x20011ca4

08018304 <_Balloc>:
 8018304:	b570      	push	{r4, r5, r6, lr}
 8018306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018308:	4604      	mov	r4, r0
 801830a:	460d      	mov	r5, r1
 801830c:	b976      	cbnz	r6, 801832c <_Balloc+0x28>
 801830e:	2010      	movs	r0, #16
 8018310:	f7ff ffd2 	bl	80182b8 <malloc>
 8018314:	4602      	mov	r2, r0
 8018316:	6260      	str	r0, [r4, #36]	; 0x24
 8018318:	b920      	cbnz	r0, 8018324 <_Balloc+0x20>
 801831a:	4b18      	ldr	r3, [pc, #96]	; (801837c <_Balloc+0x78>)
 801831c:	4818      	ldr	r0, [pc, #96]	; (8018380 <_Balloc+0x7c>)
 801831e:	2166      	movs	r1, #102	; 0x66
 8018320:	f7ff fb46 	bl	80179b0 <__assert_func>
 8018324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018328:	6006      	str	r6, [r0, #0]
 801832a:	60c6      	str	r6, [r0, #12]
 801832c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801832e:	68f3      	ldr	r3, [r6, #12]
 8018330:	b183      	cbz	r3, 8018354 <_Balloc+0x50>
 8018332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018334:	68db      	ldr	r3, [r3, #12]
 8018336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801833a:	b9b8      	cbnz	r0, 801836c <_Balloc+0x68>
 801833c:	2101      	movs	r1, #1
 801833e:	fa01 f605 	lsl.w	r6, r1, r5
 8018342:	1d72      	adds	r2, r6, #5
 8018344:	0092      	lsls	r2, r2, #2
 8018346:	4620      	mov	r0, r4
 8018348:	f000 fc9d 	bl	8018c86 <_calloc_r>
 801834c:	b160      	cbz	r0, 8018368 <_Balloc+0x64>
 801834e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018352:	e00e      	b.n	8018372 <_Balloc+0x6e>
 8018354:	2221      	movs	r2, #33	; 0x21
 8018356:	2104      	movs	r1, #4
 8018358:	4620      	mov	r0, r4
 801835a:	f000 fc94 	bl	8018c86 <_calloc_r>
 801835e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018360:	60f0      	str	r0, [r6, #12]
 8018362:	68db      	ldr	r3, [r3, #12]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d1e4      	bne.n	8018332 <_Balloc+0x2e>
 8018368:	2000      	movs	r0, #0
 801836a:	bd70      	pop	{r4, r5, r6, pc}
 801836c:	6802      	ldr	r2, [r0, #0]
 801836e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018372:	2300      	movs	r3, #0
 8018374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018378:	e7f7      	b.n	801836a <_Balloc+0x66>
 801837a:	bf00      	nop
 801837c:	0801cefc 	.word	0x0801cefc
 8018380:	0801d0f4 	.word	0x0801d0f4

08018384 <_Bfree>:
 8018384:	b570      	push	{r4, r5, r6, lr}
 8018386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018388:	4605      	mov	r5, r0
 801838a:	460c      	mov	r4, r1
 801838c:	b976      	cbnz	r6, 80183ac <_Bfree+0x28>
 801838e:	2010      	movs	r0, #16
 8018390:	f7ff ff92 	bl	80182b8 <malloc>
 8018394:	4602      	mov	r2, r0
 8018396:	6268      	str	r0, [r5, #36]	; 0x24
 8018398:	b920      	cbnz	r0, 80183a4 <_Bfree+0x20>
 801839a:	4b09      	ldr	r3, [pc, #36]	; (80183c0 <_Bfree+0x3c>)
 801839c:	4809      	ldr	r0, [pc, #36]	; (80183c4 <_Bfree+0x40>)
 801839e:	218a      	movs	r1, #138	; 0x8a
 80183a0:	f7ff fb06 	bl	80179b0 <__assert_func>
 80183a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183a8:	6006      	str	r6, [r0, #0]
 80183aa:	60c6      	str	r6, [r0, #12]
 80183ac:	b13c      	cbz	r4, 80183be <_Bfree+0x3a>
 80183ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183b0:	6862      	ldr	r2, [r4, #4]
 80183b2:	68db      	ldr	r3, [r3, #12]
 80183b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183b8:	6021      	str	r1, [r4, #0]
 80183ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183be:	bd70      	pop	{r4, r5, r6, pc}
 80183c0:	0801cefc 	.word	0x0801cefc
 80183c4:	0801d0f4 	.word	0x0801d0f4

080183c8 <__multadd>:
 80183c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183cc:	690d      	ldr	r5, [r1, #16]
 80183ce:	4607      	mov	r7, r0
 80183d0:	460c      	mov	r4, r1
 80183d2:	461e      	mov	r6, r3
 80183d4:	f101 0c14 	add.w	ip, r1, #20
 80183d8:	2000      	movs	r0, #0
 80183da:	f8dc 3000 	ldr.w	r3, [ip]
 80183de:	b299      	uxth	r1, r3
 80183e0:	fb02 6101 	mla	r1, r2, r1, r6
 80183e4:	0c1e      	lsrs	r6, r3, #16
 80183e6:	0c0b      	lsrs	r3, r1, #16
 80183e8:	fb02 3306 	mla	r3, r2, r6, r3
 80183ec:	b289      	uxth	r1, r1
 80183ee:	3001      	adds	r0, #1
 80183f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80183f4:	4285      	cmp	r5, r0
 80183f6:	f84c 1b04 	str.w	r1, [ip], #4
 80183fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80183fe:	dcec      	bgt.n	80183da <__multadd+0x12>
 8018400:	b30e      	cbz	r6, 8018446 <__multadd+0x7e>
 8018402:	68a3      	ldr	r3, [r4, #8]
 8018404:	42ab      	cmp	r3, r5
 8018406:	dc19      	bgt.n	801843c <__multadd+0x74>
 8018408:	6861      	ldr	r1, [r4, #4]
 801840a:	4638      	mov	r0, r7
 801840c:	3101      	adds	r1, #1
 801840e:	f7ff ff79 	bl	8018304 <_Balloc>
 8018412:	4680      	mov	r8, r0
 8018414:	b928      	cbnz	r0, 8018422 <__multadd+0x5a>
 8018416:	4602      	mov	r2, r0
 8018418:	4b0c      	ldr	r3, [pc, #48]	; (801844c <__multadd+0x84>)
 801841a:	480d      	ldr	r0, [pc, #52]	; (8018450 <__multadd+0x88>)
 801841c:	21b5      	movs	r1, #181	; 0xb5
 801841e:	f7ff fac7 	bl	80179b0 <__assert_func>
 8018422:	6922      	ldr	r2, [r4, #16]
 8018424:	3202      	adds	r2, #2
 8018426:	f104 010c 	add.w	r1, r4, #12
 801842a:	0092      	lsls	r2, r2, #2
 801842c:	300c      	adds	r0, #12
 801842e:	f7fe fa02 	bl	8016836 <memcpy>
 8018432:	4621      	mov	r1, r4
 8018434:	4638      	mov	r0, r7
 8018436:	f7ff ffa5 	bl	8018384 <_Bfree>
 801843a:	4644      	mov	r4, r8
 801843c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018440:	3501      	adds	r5, #1
 8018442:	615e      	str	r6, [r3, #20]
 8018444:	6125      	str	r5, [r4, #16]
 8018446:	4620      	mov	r0, r4
 8018448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801844c:	0801d069 	.word	0x0801d069
 8018450:	0801d0f4 	.word	0x0801d0f4

08018454 <__s2b>:
 8018454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018458:	460c      	mov	r4, r1
 801845a:	4615      	mov	r5, r2
 801845c:	461f      	mov	r7, r3
 801845e:	2209      	movs	r2, #9
 8018460:	3308      	adds	r3, #8
 8018462:	4606      	mov	r6, r0
 8018464:	fb93 f3f2 	sdiv	r3, r3, r2
 8018468:	2100      	movs	r1, #0
 801846a:	2201      	movs	r2, #1
 801846c:	429a      	cmp	r2, r3
 801846e:	db09      	blt.n	8018484 <__s2b+0x30>
 8018470:	4630      	mov	r0, r6
 8018472:	f7ff ff47 	bl	8018304 <_Balloc>
 8018476:	b940      	cbnz	r0, 801848a <__s2b+0x36>
 8018478:	4602      	mov	r2, r0
 801847a:	4b19      	ldr	r3, [pc, #100]	; (80184e0 <__s2b+0x8c>)
 801847c:	4819      	ldr	r0, [pc, #100]	; (80184e4 <__s2b+0x90>)
 801847e:	21ce      	movs	r1, #206	; 0xce
 8018480:	f7ff fa96 	bl	80179b0 <__assert_func>
 8018484:	0052      	lsls	r2, r2, #1
 8018486:	3101      	adds	r1, #1
 8018488:	e7f0      	b.n	801846c <__s2b+0x18>
 801848a:	9b08      	ldr	r3, [sp, #32]
 801848c:	6143      	str	r3, [r0, #20]
 801848e:	2d09      	cmp	r5, #9
 8018490:	f04f 0301 	mov.w	r3, #1
 8018494:	6103      	str	r3, [r0, #16]
 8018496:	dd16      	ble.n	80184c6 <__s2b+0x72>
 8018498:	f104 0909 	add.w	r9, r4, #9
 801849c:	46c8      	mov	r8, r9
 801849e:	442c      	add	r4, r5
 80184a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80184a4:	4601      	mov	r1, r0
 80184a6:	3b30      	subs	r3, #48	; 0x30
 80184a8:	220a      	movs	r2, #10
 80184aa:	4630      	mov	r0, r6
 80184ac:	f7ff ff8c 	bl	80183c8 <__multadd>
 80184b0:	45a0      	cmp	r8, r4
 80184b2:	d1f5      	bne.n	80184a0 <__s2b+0x4c>
 80184b4:	f1a5 0408 	sub.w	r4, r5, #8
 80184b8:	444c      	add	r4, r9
 80184ba:	1b2d      	subs	r5, r5, r4
 80184bc:	1963      	adds	r3, r4, r5
 80184be:	42bb      	cmp	r3, r7
 80184c0:	db04      	blt.n	80184cc <__s2b+0x78>
 80184c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184c6:	340a      	adds	r4, #10
 80184c8:	2509      	movs	r5, #9
 80184ca:	e7f6      	b.n	80184ba <__s2b+0x66>
 80184cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184d0:	4601      	mov	r1, r0
 80184d2:	3b30      	subs	r3, #48	; 0x30
 80184d4:	220a      	movs	r2, #10
 80184d6:	4630      	mov	r0, r6
 80184d8:	f7ff ff76 	bl	80183c8 <__multadd>
 80184dc:	e7ee      	b.n	80184bc <__s2b+0x68>
 80184de:	bf00      	nop
 80184e0:	0801d069 	.word	0x0801d069
 80184e4:	0801d0f4 	.word	0x0801d0f4

080184e8 <__hi0bits>:
 80184e8:	0c03      	lsrs	r3, r0, #16
 80184ea:	041b      	lsls	r3, r3, #16
 80184ec:	b9d3      	cbnz	r3, 8018524 <__hi0bits+0x3c>
 80184ee:	0400      	lsls	r0, r0, #16
 80184f0:	2310      	movs	r3, #16
 80184f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80184f6:	bf04      	itt	eq
 80184f8:	0200      	lsleq	r0, r0, #8
 80184fa:	3308      	addeq	r3, #8
 80184fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018500:	bf04      	itt	eq
 8018502:	0100      	lsleq	r0, r0, #4
 8018504:	3304      	addeq	r3, #4
 8018506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801850a:	bf04      	itt	eq
 801850c:	0080      	lsleq	r0, r0, #2
 801850e:	3302      	addeq	r3, #2
 8018510:	2800      	cmp	r0, #0
 8018512:	db05      	blt.n	8018520 <__hi0bits+0x38>
 8018514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018518:	f103 0301 	add.w	r3, r3, #1
 801851c:	bf08      	it	eq
 801851e:	2320      	moveq	r3, #32
 8018520:	4618      	mov	r0, r3
 8018522:	4770      	bx	lr
 8018524:	2300      	movs	r3, #0
 8018526:	e7e4      	b.n	80184f2 <__hi0bits+0xa>

08018528 <__lo0bits>:
 8018528:	6803      	ldr	r3, [r0, #0]
 801852a:	f013 0207 	ands.w	r2, r3, #7
 801852e:	4601      	mov	r1, r0
 8018530:	d00b      	beq.n	801854a <__lo0bits+0x22>
 8018532:	07da      	lsls	r2, r3, #31
 8018534:	d423      	bmi.n	801857e <__lo0bits+0x56>
 8018536:	0798      	lsls	r0, r3, #30
 8018538:	bf49      	itett	mi
 801853a:	085b      	lsrmi	r3, r3, #1
 801853c:	089b      	lsrpl	r3, r3, #2
 801853e:	2001      	movmi	r0, #1
 8018540:	600b      	strmi	r3, [r1, #0]
 8018542:	bf5c      	itt	pl
 8018544:	600b      	strpl	r3, [r1, #0]
 8018546:	2002      	movpl	r0, #2
 8018548:	4770      	bx	lr
 801854a:	b298      	uxth	r0, r3
 801854c:	b9a8      	cbnz	r0, 801857a <__lo0bits+0x52>
 801854e:	0c1b      	lsrs	r3, r3, #16
 8018550:	2010      	movs	r0, #16
 8018552:	b2da      	uxtb	r2, r3
 8018554:	b90a      	cbnz	r2, 801855a <__lo0bits+0x32>
 8018556:	3008      	adds	r0, #8
 8018558:	0a1b      	lsrs	r3, r3, #8
 801855a:	071a      	lsls	r2, r3, #28
 801855c:	bf04      	itt	eq
 801855e:	091b      	lsreq	r3, r3, #4
 8018560:	3004      	addeq	r0, #4
 8018562:	079a      	lsls	r2, r3, #30
 8018564:	bf04      	itt	eq
 8018566:	089b      	lsreq	r3, r3, #2
 8018568:	3002      	addeq	r0, #2
 801856a:	07da      	lsls	r2, r3, #31
 801856c:	d403      	bmi.n	8018576 <__lo0bits+0x4e>
 801856e:	085b      	lsrs	r3, r3, #1
 8018570:	f100 0001 	add.w	r0, r0, #1
 8018574:	d005      	beq.n	8018582 <__lo0bits+0x5a>
 8018576:	600b      	str	r3, [r1, #0]
 8018578:	4770      	bx	lr
 801857a:	4610      	mov	r0, r2
 801857c:	e7e9      	b.n	8018552 <__lo0bits+0x2a>
 801857e:	2000      	movs	r0, #0
 8018580:	4770      	bx	lr
 8018582:	2020      	movs	r0, #32
 8018584:	4770      	bx	lr
	...

08018588 <__i2b>:
 8018588:	b510      	push	{r4, lr}
 801858a:	460c      	mov	r4, r1
 801858c:	2101      	movs	r1, #1
 801858e:	f7ff feb9 	bl	8018304 <_Balloc>
 8018592:	4602      	mov	r2, r0
 8018594:	b928      	cbnz	r0, 80185a2 <__i2b+0x1a>
 8018596:	4b05      	ldr	r3, [pc, #20]	; (80185ac <__i2b+0x24>)
 8018598:	4805      	ldr	r0, [pc, #20]	; (80185b0 <__i2b+0x28>)
 801859a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801859e:	f7ff fa07 	bl	80179b0 <__assert_func>
 80185a2:	2301      	movs	r3, #1
 80185a4:	6144      	str	r4, [r0, #20]
 80185a6:	6103      	str	r3, [r0, #16]
 80185a8:	bd10      	pop	{r4, pc}
 80185aa:	bf00      	nop
 80185ac:	0801d069 	.word	0x0801d069
 80185b0:	0801d0f4 	.word	0x0801d0f4

080185b4 <__multiply>:
 80185b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b8:	4691      	mov	r9, r2
 80185ba:	690a      	ldr	r2, [r1, #16]
 80185bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80185c0:	429a      	cmp	r2, r3
 80185c2:	bfb8      	it	lt
 80185c4:	460b      	movlt	r3, r1
 80185c6:	460c      	mov	r4, r1
 80185c8:	bfbc      	itt	lt
 80185ca:	464c      	movlt	r4, r9
 80185cc:	4699      	movlt	r9, r3
 80185ce:	6927      	ldr	r7, [r4, #16]
 80185d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80185d4:	68a3      	ldr	r3, [r4, #8]
 80185d6:	6861      	ldr	r1, [r4, #4]
 80185d8:	eb07 060a 	add.w	r6, r7, sl
 80185dc:	42b3      	cmp	r3, r6
 80185de:	b085      	sub	sp, #20
 80185e0:	bfb8      	it	lt
 80185e2:	3101      	addlt	r1, #1
 80185e4:	f7ff fe8e 	bl	8018304 <_Balloc>
 80185e8:	b930      	cbnz	r0, 80185f8 <__multiply+0x44>
 80185ea:	4602      	mov	r2, r0
 80185ec:	4b44      	ldr	r3, [pc, #272]	; (8018700 <__multiply+0x14c>)
 80185ee:	4845      	ldr	r0, [pc, #276]	; (8018704 <__multiply+0x150>)
 80185f0:	f240 115d 	movw	r1, #349	; 0x15d
 80185f4:	f7ff f9dc 	bl	80179b0 <__assert_func>
 80185f8:	f100 0514 	add.w	r5, r0, #20
 80185fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018600:	462b      	mov	r3, r5
 8018602:	2200      	movs	r2, #0
 8018604:	4543      	cmp	r3, r8
 8018606:	d321      	bcc.n	801864c <__multiply+0x98>
 8018608:	f104 0314 	add.w	r3, r4, #20
 801860c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018610:	f109 0314 	add.w	r3, r9, #20
 8018614:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018618:	9202      	str	r2, [sp, #8]
 801861a:	1b3a      	subs	r2, r7, r4
 801861c:	3a15      	subs	r2, #21
 801861e:	f022 0203 	bic.w	r2, r2, #3
 8018622:	3204      	adds	r2, #4
 8018624:	f104 0115 	add.w	r1, r4, #21
 8018628:	428f      	cmp	r7, r1
 801862a:	bf38      	it	cc
 801862c:	2204      	movcc	r2, #4
 801862e:	9201      	str	r2, [sp, #4]
 8018630:	9a02      	ldr	r2, [sp, #8]
 8018632:	9303      	str	r3, [sp, #12]
 8018634:	429a      	cmp	r2, r3
 8018636:	d80c      	bhi.n	8018652 <__multiply+0x9e>
 8018638:	2e00      	cmp	r6, #0
 801863a:	dd03      	ble.n	8018644 <__multiply+0x90>
 801863c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018640:	2b00      	cmp	r3, #0
 8018642:	d05a      	beq.n	80186fa <__multiply+0x146>
 8018644:	6106      	str	r6, [r0, #16]
 8018646:	b005      	add	sp, #20
 8018648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801864c:	f843 2b04 	str.w	r2, [r3], #4
 8018650:	e7d8      	b.n	8018604 <__multiply+0x50>
 8018652:	f8b3 a000 	ldrh.w	sl, [r3]
 8018656:	f1ba 0f00 	cmp.w	sl, #0
 801865a:	d024      	beq.n	80186a6 <__multiply+0xf2>
 801865c:	f104 0e14 	add.w	lr, r4, #20
 8018660:	46a9      	mov	r9, r5
 8018662:	f04f 0c00 	mov.w	ip, #0
 8018666:	f85e 2b04 	ldr.w	r2, [lr], #4
 801866a:	f8d9 1000 	ldr.w	r1, [r9]
 801866e:	fa1f fb82 	uxth.w	fp, r2
 8018672:	b289      	uxth	r1, r1
 8018674:	fb0a 110b 	mla	r1, sl, fp, r1
 8018678:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801867c:	f8d9 2000 	ldr.w	r2, [r9]
 8018680:	4461      	add	r1, ip
 8018682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018686:	fb0a c20b 	mla	r2, sl, fp, ip
 801868a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801868e:	b289      	uxth	r1, r1
 8018690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018694:	4577      	cmp	r7, lr
 8018696:	f849 1b04 	str.w	r1, [r9], #4
 801869a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801869e:	d8e2      	bhi.n	8018666 <__multiply+0xb2>
 80186a0:	9a01      	ldr	r2, [sp, #4]
 80186a2:	f845 c002 	str.w	ip, [r5, r2]
 80186a6:	9a03      	ldr	r2, [sp, #12]
 80186a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80186ac:	3304      	adds	r3, #4
 80186ae:	f1b9 0f00 	cmp.w	r9, #0
 80186b2:	d020      	beq.n	80186f6 <__multiply+0x142>
 80186b4:	6829      	ldr	r1, [r5, #0]
 80186b6:	f104 0c14 	add.w	ip, r4, #20
 80186ba:	46ae      	mov	lr, r5
 80186bc:	f04f 0a00 	mov.w	sl, #0
 80186c0:	f8bc b000 	ldrh.w	fp, [ip]
 80186c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80186c8:	fb09 220b 	mla	r2, r9, fp, r2
 80186cc:	4492      	add	sl, r2
 80186ce:	b289      	uxth	r1, r1
 80186d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80186d4:	f84e 1b04 	str.w	r1, [lr], #4
 80186d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80186dc:	f8be 1000 	ldrh.w	r1, [lr]
 80186e0:	0c12      	lsrs	r2, r2, #16
 80186e2:	fb09 1102 	mla	r1, r9, r2, r1
 80186e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80186ea:	4567      	cmp	r7, ip
 80186ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80186f0:	d8e6      	bhi.n	80186c0 <__multiply+0x10c>
 80186f2:	9a01      	ldr	r2, [sp, #4]
 80186f4:	50a9      	str	r1, [r5, r2]
 80186f6:	3504      	adds	r5, #4
 80186f8:	e79a      	b.n	8018630 <__multiply+0x7c>
 80186fa:	3e01      	subs	r6, #1
 80186fc:	e79c      	b.n	8018638 <__multiply+0x84>
 80186fe:	bf00      	nop
 8018700:	0801d069 	.word	0x0801d069
 8018704:	0801d0f4 	.word	0x0801d0f4

08018708 <__pow5mult>:
 8018708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801870c:	4615      	mov	r5, r2
 801870e:	f012 0203 	ands.w	r2, r2, #3
 8018712:	4606      	mov	r6, r0
 8018714:	460f      	mov	r7, r1
 8018716:	d007      	beq.n	8018728 <__pow5mult+0x20>
 8018718:	4c25      	ldr	r4, [pc, #148]	; (80187b0 <__pow5mult+0xa8>)
 801871a:	3a01      	subs	r2, #1
 801871c:	2300      	movs	r3, #0
 801871e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018722:	f7ff fe51 	bl	80183c8 <__multadd>
 8018726:	4607      	mov	r7, r0
 8018728:	10ad      	asrs	r5, r5, #2
 801872a:	d03d      	beq.n	80187a8 <__pow5mult+0xa0>
 801872c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801872e:	b97c      	cbnz	r4, 8018750 <__pow5mult+0x48>
 8018730:	2010      	movs	r0, #16
 8018732:	f7ff fdc1 	bl	80182b8 <malloc>
 8018736:	4602      	mov	r2, r0
 8018738:	6270      	str	r0, [r6, #36]	; 0x24
 801873a:	b928      	cbnz	r0, 8018748 <__pow5mult+0x40>
 801873c:	4b1d      	ldr	r3, [pc, #116]	; (80187b4 <__pow5mult+0xac>)
 801873e:	481e      	ldr	r0, [pc, #120]	; (80187b8 <__pow5mult+0xb0>)
 8018740:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018744:	f7ff f934 	bl	80179b0 <__assert_func>
 8018748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801874c:	6004      	str	r4, [r0, #0]
 801874e:	60c4      	str	r4, [r0, #12]
 8018750:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018758:	b94c      	cbnz	r4, 801876e <__pow5mult+0x66>
 801875a:	f240 2171 	movw	r1, #625	; 0x271
 801875e:	4630      	mov	r0, r6
 8018760:	f7ff ff12 	bl	8018588 <__i2b>
 8018764:	2300      	movs	r3, #0
 8018766:	f8c8 0008 	str.w	r0, [r8, #8]
 801876a:	4604      	mov	r4, r0
 801876c:	6003      	str	r3, [r0, #0]
 801876e:	f04f 0900 	mov.w	r9, #0
 8018772:	07eb      	lsls	r3, r5, #31
 8018774:	d50a      	bpl.n	801878c <__pow5mult+0x84>
 8018776:	4639      	mov	r1, r7
 8018778:	4622      	mov	r2, r4
 801877a:	4630      	mov	r0, r6
 801877c:	f7ff ff1a 	bl	80185b4 <__multiply>
 8018780:	4639      	mov	r1, r7
 8018782:	4680      	mov	r8, r0
 8018784:	4630      	mov	r0, r6
 8018786:	f7ff fdfd 	bl	8018384 <_Bfree>
 801878a:	4647      	mov	r7, r8
 801878c:	106d      	asrs	r5, r5, #1
 801878e:	d00b      	beq.n	80187a8 <__pow5mult+0xa0>
 8018790:	6820      	ldr	r0, [r4, #0]
 8018792:	b938      	cbnz	r0, 80187a4 <__pow5mult+0x9c>
 8018794:	4622      	mov	r2, r4
 8018796:	4621      	mov	r1, r4
 8018798:	4630      	mov	r0, r6
 801879a:	f7ff ff0b 	bl	80185b4 <__multiply>
 801879e:	6020      	str	r0, [r4, #0]
 80187a0:	f8c0 9000 	str.w	r9, [r0]
 80187a4:	4604      	mov	r4, r0
 80187a6:	e7e4      	b.n	8018772 <__pow5mult+0x6a>
 80187a8:	4638      	mov	r0, r7
 80187aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187ae:	bf00      	nop
 80187b0:	0801d240 	.word	0x0801d240
 80187b4:	0801cefc 	.word	0x0801cefc
 80187b8:	0801d0f4 	.word	0x0801d0f4

080187bc <__lshift>:
 80187bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187c0:	460c      	mov	r4, r1
 80187c2:	6849      	ldr	r1, [r1, #4]
 80187c4:	6923      	ldr	r3, [r4, #16]
 80187c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80187ca:	68a3      	ldr	r3, [r4, #8]
 80187cc:	4607      	mov	r7, r0
 80187ce:	4691      	mov	r9, r2
 80187d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80187d4:	f108 0601 	add.w	r6, r8, #1
 80187d8:	42b3      	cmp	r3, r6
 80187da:	db0b      	blt.n	80187f4 <__lshift+0x38>
 80187dc:	4638      	mov	r0, r7
 80187de:	f7ff fd91 	bl	8018304 <_Balloc>
 80187e2:	4605      	mov	r5, r0
 80187e4:	b948      	cbnz	r0, 80187fa <__lshift+0x3e>
 80187e6:	4602      	mov	r2, r0
 80187e8:	4b2a      	ldr	r3, [pc, #168]	; (8018894 <__lshift+0xd8>)
 80187ea:	482b      	ldr	r0, [pc, #172]	; (8018898 <__lshift+0xdc>)
 80187ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80187f0:	f7ff f8de 	bl	80179b0 <__assert_func>
 80187f4:	3101      	adds	r1, #1
 80187f6:	005b      	lsls	r3, r3, #1
 80187f8:	e7ee      	b.n	80187d8 <__lshift+0x1c>
 80187fa:	2300      	movs	r3, #0
 80187fc:	f100 0114 	add.w	r1, r0, #20
 8018800:	f100 0210 	add.w	r2, r0, #16
 8018804:	4618      	mov	r0, r3
 8018806:	4553      	cmp	r3, sl
 8018808:	db37      	blt.n	801887a <__lshift+0xbe>
 801880a:	6920      	ldr	r0, [r4, #16]
 801880c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018810:	f104 0314 	add.w	r3, r4, #20
 8018814:	f019 091f 	ands.w	r9, r9, #31
 8018818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801881c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018820:	d02f      	beq.n	8018882 <__lshift+0xc6>
 8018822:	f1c9 0e20 	rsb	lr, r9, #32
 8018826:	468a      	mov	sl, r1
 8018828:	f04f 0c00 	mov.w	ip, #0
 801882c:	681a      	ldr	r2, [r3, #0]
 801882e:	fa02 f209 	lsl.w	r2, r2, r9
 8018832:	ea42 020c 	orr.w	r2, r2, ip
 8018836:	f84a 2b04 	str.w	r2, [sl], #4
 801883a:	f853 2b04 	ldr.w	r2, [r3], #4
 801883e:	4298      	cmp	r0, r3
 8018840:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018844:	d8f2      	bhi.n	801882c <__lshift+0x70>
 8018846:	1b03      	subs	r3, r0, r4
 8018848:	3b15      	subs	r3, #21
 801884a:	f023 0303 	bic.w	r3, r3, #3
 801884e:	3304      	adds	r3, #4
 8018850:	f104 0215 	add.w	r2, r4, #21
 8018854:	4290      	cmp	r0, r2
 8018856:	bf38      	it	cc
 8018858:	2304      	movcc	r3, #4
 801885a:	f841 c003 	str.w	ip, [r1, r3]
 801885e:	f1bc 0f00 	cmp.w	ip, #0
 8018862:	d001      	beq.n	8018868 <__lshift+0xac>
 8018864:	f108 0602 	add.w	r6, r8, #2
 8018868:	3e01      	subs	r6, #1
 801886a:	4638      	mov	r0, r7
 801886c:	612e      	str	r6, [r5, #16]
 801886e:	4621      	mov	r1, r4
 8018870:	f7ff fd88 	bl	8018384 <_Bfree>
 8018874:	4628      	mov	r0, r5
 8018876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801887a:	f842 0f04 	str.w	r0, [r2, #4]!
 801887e:	3301      	adds	r3, #1
 8018880:	e7c1      	b.n	8018806 <__lshift+0x4a>
 8018882:	3904      	subs	r1, #4
 8018884:	f853 2b04 	ldr.w	r2, [r3], #4
 8018888:	f841 2f04 	str.w	r2, [r1, #4]!
 801888c:	4298      	cmp	r0, r3
 801888e:	d8f9      	bhi.n	8018884 <__lshift+0xc8>
 8018890:	e7ea      	b.n	8018868 <__lshift+0xac>
 8018892:	bf00      	nop
 8018894:	0801d069 	.word	0x0801d069
 8018898:	0801d0f4 	.word	0x0801d0f4

0801889c <__mcmp>:
 801889c:	b530      	push	{r4, r5, lr}
 801889e:	6902      	ldr	r2, [r0, #16]
 80188a0:	690c      	ldr	r4, [r1, #16]
 80188a2:	1b12      	subs	r2, r2, r4
 80188a4:	d10e      	bne.n	80188c4 <__mcmp+0x28>
 80188a6:	f100 0314 	add.w	r3, r0, #20
 80188aa:	3114      	adds	r1, #20
 80188ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80188b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80188b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80188b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80188bc:	42a5      	cmp	r5, r4
 80188be:	d003      	beq.n	80188c8 <__mcmp+0x2c>
 80188c0:	d305      	bcc.n	80188ce <__mcmp+0x32>
 80188c2:	2201      	movs	r2, #1
 80188c4:	4610      	mov	r0, r2
 80188c6:	bd30      	pop	{r4, r5, pc}
 80188c8:	4283      	cmp	r3, r0
 80188ca:	d3f3      	bcc.n	80188b4 <__mcmp+0x18>
 80188cc:	e7fa      	b.n	80188c4 <__mcmp+0x28>
 80188ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188d2:	e7f7      	b.n	80188c4 <__mcmp+0x28>

080188d4 <__mdiff>:
 80188d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d8:	460c      	mov	r4, r1
 80188da:	4606      	mov	r6, r0
 80188dc:	4611      	mov	r1, r2
 80188de:	4620      	mov	r0, r4
 80188e0:	4690      	mov	r8, r2
 80188e2:	f7ff ffdb 	bl	801889c <__mcmp>
 80188e6:	1e05      	subs	r5, r0, #0
 80188e8:	d110      	bne.n	801890c <__mdiff+0x38>
 80188ea:	4629      	mov	r1, r5
 80188ec:	4630      	mov	r0, r6
 80188ee:	f7ff fd09 	bl	8018304 <_Balloc>
 80188f2:	b930      	cbnz	r0, 8018902 <__mdiff+0x2e>
 80188f4:	4b3a      	ldr	r3, [pc, #232]	; (80189e0 <__mdiff+0x10c>)
 80188f6:	4602      	mov	r2, r0
 80188f8:	f240 2132 	movw	r1, #562	; 0x232
 80188fc:	4839      	ldr	r0, [pc, #228]	; (80189e4 <__mdiff+0x110>)
 80188fe:	f7ff f857 	bl	80179b0 <__assert_func>
 8018902:	2301      	movs	r3, #1
 8018904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801890c:	bfa4      	itt	ge
 801890e:	4643      	movge	r3, r8
 8018910:	46a0      	movge	r8, r4
 8018912:	4630      	mov	r0, r6
 8018914:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018918:	bfa6      	itte	ge
 801891a:	461c      	movge	r4, r3
 801891c:	2500      	movge	r5, #0
 801891e:	2501      	movlt	r5, #1
 8018920:	f7ff fcf0 	bl	8018304 <_Balloc>
 8018924:	b920      	cbnz	r0, 8018930 <__mdiff+0x5c>
 8018926:	4b2e      	ldr	r3, [pc, #184]	; (80189e0 <__mdiff+0x10c>)
 8018928:	4602      	mov	r2, r0
 801892a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801892e:	e7e5      	b.n	80188fc <__mdiff+0x28>
 8018930:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018934:	6926      	ldr	r6, [r4, #16]
 8018936:	60c5      	str	r5, [r0, #12]
 8018938:	f104 0914 	add.w	r9, r4, #20
 801893c:	f108 0514 	add.w	r5, r8, #20
 8018940:	f100 0e14 	add.w	lr, r0, #20
 8018944:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018948:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801894c:	f108 0210 	add.w	r2, r8, #16
 8018950:	46f2      	mov	sl, lr
 8018952:	2100      	movs	r1, #0
 8018954:	f859 3b04 	ldr.w	r3, [r9], #4
 8018958:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801895c:	fa1f f883 	uxth.w	r8, r3
 8018960:	fa11 f18b 	uxtah	r1, r1, fp
 8018964:	0c1b      	lsrs	r3, r3, #16
 8018966:	eba1 0808 	sub.w	r8, r1, r8
 801896a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801896e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018972:	fa1f f888 	uxth.w	r8, r8
 8018976:	1419      	asrs	r1, r3, #16
 8018978:	454e      	cmp	r6, r9
 801897a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801897e:	f84a 3b04 	str.w	r3, [sl], #4
 8018982:	d8e7      	bhi.n	8018954 <__mdiff+0x80>
 8018984:	1b33      	subs	r3, r6, r4
 8018986:	3b15      	subs	r3, #21
 8018988:	f023 0303 	bic.w	r3, r3, #3
 801898c:	3304      	adds	r3, #4
 801898e:	3415      	adds	r4, #21
 8018990:	42a6      	cmp	r6, r4
 8018992:	bf38      	it	cc
 8018994:	2304      	movcc	r3, #4
 8018996:	441d      	add	r5, r3
 8018998:	4473      	add	r3, lr
 801899a:	469e      	mov	lr, r3
 801899c:	462e      	mov	r6, r5
 801899e:	4566      	cmp	r6, ip
 80189a0:	d30e      	bcc.n	80189c0 <__mdiff+0xec>
 80189a2:	f10c 0203 	add.w	r2, ip, #3
 80189a6:	1b52      	subs	r2, r2, r5
 80189a8:	f022 0203 	bic.w	r2, r2, #3
 80189ac:	3d03      	subs	r5, #3
 80189ae:	45ac      	cmp	ip, r5
 80189b0:	bf38      	it	cc
 80189b2:	2200      	movcc	r2, #0
 80189b4:	441a      	add	r2, r3
 80189b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80189ba:	b17b      	cbz	r3, 80189dc <__mdiff+0x108>
 80189bc:	6107      	str	r7, [r0, #16]
 80189be:	e7a3      	b.n	8018908 <__mdiff+0x34>
 80189c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80189c4:	fa11 f288 	uxtah	r2, r1, r8
 80189c8:	1414      	asrs	r4, r2, #16
 80189ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80189ce:	b292      	uxth	r2, r2
 80189d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80189d4:	f84e 2b04 	str.w	r2, [lr], #4
 80189d8:	1421      	asrs	r1, r4, #16
 80189da:	e7e0      	b.n	801899e <__mdiff+0xca>
 80189dc:	3f01      	subs	r7, #1
 80189de:	e7ea      	b.n	80189b6 <__mdiff+0xe2>
 80189e0:	0801d069 	.word	0x0801d069
 80189e4:	0801d0f4 	.word	0x0801d0f4

080189e8 <__ulp>:
 80189e8:	b082      	sub	sp, #8
 80189ea:	ed8d 0b00 	vstr	d0, [sp]
 80189ee:	9b01      	ldr	r3, [sp, #4]
 80189f0:	4912      	ldr	r1, [pc, #72]	; (8018a3c <__ulp+0x54>)
 80189f2:	4019      	ands	r1, r3
 80189f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80189f8:	2900      	cmp	r1, #0
 80189fa:	dd05      	ble.n	8018a08 <__ulp+0x20>
 80189fc:	2200      	movs	r2, #0
 80189fe:	460b      	mov	r3, r1
 8018a00:	ec43 2b10 	vmov	d0, r2, r3
 8018a04:	b002      	add	sp, #8
 8018a06:	4770      	bx	lr
 8018a08:	4249      	negs	r1, r1
 8018a0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018a0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018a12:	f04f 0200 	mov.w	r2, #0
 8018a16:	f04f 0300 	mov.w	r3, #0
 8018a1a:	da04      	bge.n	8018a26 <__ulp+0x3e>
 8018a1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018a20:	fa41 f300 	asr.w	r3, r1, r0
 8018a24:	e7ec      	b.n	8018a00 <__ulp+0x18>
 8018a26:	f1a0 0114 	sub.w	r1, r0, #20
 8018a2a:	291e      	cmp	r1, #30
 8018a2c:	bfda      	itte	le
 8018a2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018a32:	fa20 f101 	lsrle.w	r1, r0, r1
 8018a36:	2101      	movgt	r1, #1
 8018a38:	460a      	mov	r2, r1
 8018a3a:	e7e1      	b.n	8018a00 <__ulp+0x18>
 8018a3c:	7ff00000 	.word	0x7ff00000

08018a40 <__b2d>:
 8018a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a42:	6905      	ldr	r5, [r0, #16]
 8018a44:	f100 0714 	add.w	r7, r0, #20
 8018a48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018a4c:	1f2e      	subs	r6, r5, #4
 8018a4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018a52:	4620      	mov	r0, r4
 8018a54:	f7ff fd48 	bl	80184e8 <__hi0bits>
 8018a58:	f1c0 0320 	rsb	r3, r0, #32
 8018a5c:	280a      	cmp	r0, #10
 8018a5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018adc <__b2d+0x9c>
 8018a62:	600b      	str	r3, [r1, #0]
 8018a64:	dc14      	bgt.n	8018a90 <__b2d+0x50>
 8018a66:	f1c0 0e0b 	rsb	lr, r0, #11
 8018a6a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018a6e:	42b7      	cmp	r7, r6
 8018a70:	ea41 030c 	orr.w	r3, r1, ip
 8018a74:	bf34      	ite	cc
 8018a76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a7a:	2100      	movcs	r1, #0
 8018a7c:	3015      	adds	r0, #21
 8018a7e:	fa04 f000 	lsl.w	r0, r4, r0
 8018a82:	fa21 f10e 	lsr.w	r1, r1, lr
 8018a86:	ea40 0201 	orr.w	r2, r0, r1
 8018a8a:	ec43 2b10 	vmov	d0, r2, r3
 8018a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a90:	42b7      	cmp	r7, r6
 8018a92:	bf3a      	itte	cc
 8018a94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a98:	f1a5 0608 	subcc.w	r6, r5, #8
 8018a9c:	2100      	movcs	r1, #0
 8018a9e:	380b      	subs	r0, #11
 8018aa0:	d017      	beq.n	8018ad2 <__b2d+0x92>
 8018aa2:	f1c0 0c20 	rsb	ip, r0, #32
 8018aa6:	fa04 f500 	lsl.w	r5, r4, r0
 8018aaa:	42be      	cmp	r6, r7
 8018aac:	fa21 f40c 	lsr.w	r4, r1, ip
 8018ab0:	ea45 0504 	orr.w	r5, r5, r4
 8018ab4:	bf8c      	ite	hi
 8018ab6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018aba:	2400      	movls	r4, #0
 8018abc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018ac0:	fa01 f000 	lsl.w	r0, r1, r0
 8018ac4:	fa24 f40c 	lsr.w	r4, r4, ip
 8018ac8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018acc:	ea40 0204 	orr.w	r2, r0, r4
 8018ad0:	e7db      	b.n	8018a8a <__b2d+0x4a>
 8018ad2:	ea44 030c 	orr.w	r3, r4, ip
 8018ad6:	460a      	mov	r2, r1
 8018ad8:	e7d7      	b.n	8018a8a <__b2d+0x4a>
 8018ada:	bf00      	nop
 8018adc:	3ff00000 	.word	0x3ff00000

08018ae0 <__d2b>:
 8018ae0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ae4:	4689      	mov	r9, r1
 8018ae6:	2101      	movs	r1, #1
 8018ae8:	ec57 6b10 	vmov	r6, r7, d0
 8018aec:	4690      	mov	r8, r2
 8018aee:	f7ff fc09 	bl	8018304 <_Balloc>
 8018af2:	4604      	mov	r4, r0
 8018af4:	b930      	cbnz	r0, 8018b04 <__d2b+0x24>
 8018af6:	4602      	mov	r2, r0
 8018af8:	4b25      	ldr	r3, [pc, #148]	; (8018b90 <__d2b+0xb0>)
 8018afa:	4826      	ldr	r0, [pc, #152]	; (8018b94 <__d2b+0xb4>)
 8018afc:	f240 310a 	movw	r1, #778	; 0x30a
 8018b00:	f7fe ff56 	bl	80179b0 <__assert_func>
 8018b04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018b08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018b0c:	bb35      	cbnz	r5, 8018b5c <__d2b+0x7c>
 8018b0e:	2e00      	cmp	r6, #0
 8018b10:	9301      	str	r3, [sp, #4]
 8018b12:	d028      	beq.n	8018b66 <__d2b+0x86>
 8018b14:	4668      	mov	r0, sp
 8018b16:	9600      	str	r6, [sp, #0]
 8018b18:	f7ff fd06 	bl	8018528 <__lo0bits>
 8018b1c:	9900      	ldr	r1, [sp, #0]
 8018b1e:	b300      	cbz	r0, 8018b62 <__d2b+0x82>
 8018b20:	9a01      	ldr	r2, [sp, #4]
 8018b22:	f1c0 0320 	rsb	r3, r0, #32
 8018b26:	fa02 f303 	lsl.w	r3, r2, r3
 8018b2a:	430b      	orrs	r3, r1
 8018b2c:	40c2      	lsrs	r2, r0
 8018b2e:	6163      	str	r3, [r4, #20]
 8018b30:	9201      	str	r2, [sp, #4]
 8018b32:	9b01      	ldr	r3, [sp, #4]
 8018b34:	61a3      	str	r3, [r4, #24]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	bf14      	ite	ne
 8018b3a:	2202      	movne	r2, #2
 8018b3c:	2201      	moveq	r2, #1
 8018b3e:	6122      	str	r2, [r4, #16]
 8018b40:	b1d5      	cbz	r5, 8018b78 <__d2b+0x98>
 8018b42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018b46:	4405      	add	r5, r0
 8018b48:	f8c9 5000 	str.w	r5, [r9]
 8018b4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b50:	f8c8 0000 	str.w	r0, [r8]
 8018b54:	4620      	mov	r0, r4
 8018b56:	b003      	add	sp, #12
 8018b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b60:	e7d5      	b.n	8018b0e <__d2b+0x2e>
 8018b62:	6161      	str	r1, [r4, #20]
 8018b64:	e7e5      	b.n	8018b32 <__d2b+0x52>
 8018b66:	a801      	add	r0, sp, #4
 8018b68:	f7ff fcde 	bl	8018528 <__lo0bits>
 8018b6c:	9b01      	ldr	r3, [sp, #4]
 8018b6e:	6163      	str	r3, [r4, #20]
 8018b70:	2201      	movs	r2, #1
 8018b72:	6122      	str	r2, [r4, #16]
 8018b74:	3020      	adds	r0, #32
 8018b76:	e7e3      	b.n	8018b40 <__d2b+0x60>
 8018b78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018b7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b80:	f8c9 0000 	str.w	r0, [r9]
 8018b84:	6918      	ldr	r0, [r3, #16]
 8018b86:	f7ff fcaf 	bl	80184e8 <__hi0bits>
 8018b8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018b8e:	e7df      	b.n	8018b50 <__d2b+0x70>
 8018b90:	0801d069 	.word	0x0801d069
 8018b94:	0801d0f4 	.word	0x0801d0f4

08018b98 <__ratio>:
 8018b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9c:	4688      	mov	r8, r1
 8018b9e:	4669      	mov	r1, sp
 8018ba0:	4681      	mov	r9, r0
 8018ba2:	f7ff ff4d 	bl	8018a40 <__b2d>
 8018ba6:	a901      	add	r1, sp, #4
 8018ba8:	4640      	mov	r0, r8
 8018baa:	ec55 4b10 	vmov	r4, r5, d0
 8018bae:	f7ff ff47 	bl	8018a40 <__b2d>
 8018bb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018bb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018bba:	eba3 0c02 	sub.w	ip, r3, r2
 8018bbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018bc2:	1a9b      	subs	r3, r3, r2
 8018bc4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018bc8:	ec51 0b10 	vmov	r0, r1, d0
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	bfd6      	itet	le
 8018bd0:	460a      	movle	r2, r1
 8018bd2:	462a      	movgt	r2, r5
 8018bd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018bd8:	468b      	mov	fp, r1
 8018bda:	462f      	mov	r7, r5
 8018bdc:	bfd4      	ite	le
 8018bde:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018be2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018be6:	4620      	mov	r0, r4
 8018be8:	ee10 2a10 	vmov	r2, s0
 8018bec:	465b      	mov	r3, fp
 8018bee:	4639      	mov	r1, r7
 8018bf0:	f7e7 fe4c 	bl	800088c <__aeabi_ddiv>
 8018bf4:	ec41 0b10 	vmov	d0, r0, r1
 8018bf8:	b003      	add	sp, #12
 8018bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bfe <__copybits>:
 8018bfe:	3901      	subs	r1, #1
 8018c00:	b570      	push	{r4, r5, r6, lr}
 8018c02:	1149      	asrs	r1, r1, #5
 8018c04:	6914      	ldr	r4, [r2, #16]
 8018c06:	3101      	adds	r1, #1
 8018c08:	f102 0314 	add.w	r3, r2, #20
 8018c0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018c10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018c14:	1f05      	subs	r5, r0, #4
 8018c16:	42a3      	cmp	r3, r4
 8018c18:	d30c      	bcc.n	8018c34 <__copybits+0x36>
 8018c1a:	1aa3      	subs	r3, r4, r2
 8018c1c:	3b11      	subs	r3, #17
 8018c1e:	f023 0303 	bic.w	r3, r3, #3
 8018c22:	3211      	adds	r2, #17
 8018c24:	42a2      	cmp	r2, r4
 8018c26:	bf88      	it	hi
 8018c28:	2300      	movhi	r3, #0
 8018c2a:	4418      	add	r0, r3
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	4288      	cmp	r0, r1
 8018c30:	d305      	bcc.n	8018c3e <__copybits+0x40>
 8018c32:	bd70      	pop	{r4, r5, r6, pc}
 8018c34:	f853 6b04 	ldr.w	r6, [r3], #4
 8018c38:	f845 6f04 	str.w	r6, [r5, #4]!
 8018c3c:	e7eb      	b.n	8018c16 <__copybits+0x18>
 8018c3e:	f840 3b04 	str.w	r3, [r0], #4
 8018c42:	e7f4      	b.n	8018c2e <__copybits+0x30>

08018c44 <__any_on>:
 8018c44:	f100 0214 	add.w	r2, r0, #20
 8018c48:	6900      	ldr	r0, [r0, #16]
 8018c4a:	114b      	asrs	r3, r1, #5
 8018c4c:	4298      	cmp	r0, r3
 8018c4e:	b510      	push	{r4, lr}
 8018c50:	db11      	blt.n	8018c76 <__any_on+0x32>
 8018c52:	dd0a      	ble.n	8018c6a <__any_on+0x26>
 8018c54:	f011 011f 	ands.w	r1, r1, #31
 8018c58:	d007      	beq.n	8018c6a <__any_on+0x26>
 8018c5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c5e:	fa24 f001 	lsr.w	r0, r4, r1
 8018c62:	fa00 f101 	lsl.w	r1, r0, r1
 8018c66:	428c      	cmp	r4, r1
 8018c68:	d10b      	bne.n	8018c82 <__any_on+0x3e>
 8018c6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d803      	bhi.n	8018c7a <__any_on+0x36>
 8018c72:	2000      	movs	r0, #0
 8018c74:	bd10      	pop	{r4, pc}
 8018c76:	4603      	mov	r3, r0
 8018c78:	e7f7      	b.n	8018c6a <__any_on+0x26>
 8018c7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c7e:	2900      	cmp	r1, #0
 8018c80:	d0f5      	beq.n	8018c6e <__any_on+0x2a>
 8018c82:	2001      	movs	r0, #1
 8018c84:	e7f6      	b.n	8018c74 <__any_on+0x30>

08018c86 <_calloc_r>:
 8018c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c88:	fba1 2402 	umull	r2, r4, r1, r2
 8018c8c:	b94c      	cbnz	r4, 8018ca2 <_calloc_r+0x1c>
 8018c8e:	4611      	mov	r1, r2
 8018c90:	9201      	str	r2, [sp, #4]
 8018c92:	f7fd fe21 	bl	80168d8 <_malloc_r>
 8018c96:	9a01      	ldr	r2, [sp, #4]
 8018c98:	4605      	mov	r5, r0
 8018c9a:	b930      	cbnz	r0, 8018caa <_calloc_r+0x24>
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	b003      	add	sp, #12
 8018ca0:	bd30      	pop	{r4, r5, pc}
 8018ca2:	220c      	movs	r2, #12
 8018ca4:	6002      	str	r2, [r0, #0]
 8018ca6:	2500      	movs	r5, #0
 8018ca8:	e7f8      	b.n	8018c9c <_calloc_r+0x16>
 8018caa:	4621      	mov	r1, r4
 8018cac:	f7fd fdeb 	bl	8016886 <memset>
 8018cb0:	e7f4      	b.n	8018c9c <_calloc_r+0x16>
	...

08018cb4 <_free_r>:
 8018cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018cb6:	2900      	cmp	r1, #0
 8018cb8:	d044      	beq.n	8018d44 <_free_r+0x90>
 8018cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cbe:	9001      	str	r0, [sp, #4]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f1a1 0404 	sub.w	r4, r1, #4
 8018cc6:	bfb8      	it	lt
 8018cc8:	18e4      	addlt	r4, r4, r3
 8018cca:	f7ff fb0f 	bl	80182ec <__malloc_lock>
 8018cce:	4a1e      	ldr	r2, [pc, #120]	; (8018d48 <_free_r+0x94>)
 8018cd0:	9801      	ldr	r0, [sp, #4]
 8018cd2:	6813      	ldr	r3, [r2, #0]
 8018cd4:	b933      	cbnz	r3, 8018ce4 <_free_r+0x30>
 8018cd6:	6063      	str	r3, [r4, #4]
 8018cd8:	6014      	str	r4, [r2, #0]
 8018cda:	b003      	add	sp, #12
 8018cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ce0:	f7ff bb0a 	b.w	80182f8 <__malloc_unlock>
 8018ce4:	42a3      	cmp	r3, r4
 8018ce6:	d908      	bls.n	8018cfa <_free_r+0x46>
 8018ce8:	6825      	ldr	r5, [r4, #0]
 8018cea:	1961      	adds	r1, r4, r5
 8018cec:	428b      	cmp	r3, r1
 8018cee:	bf01      	itttt	eq
 8018cf0:	6819      	ldreq	r1, [r3, #0]
 8018cf2:	685b      	ldreq	r3, [r3, #4]
 8018cf4:	1949      	addeq	r1, r1, r5
 8018cf6:	6021      	streq	r1, [r4, #0]
 8018cf8:	e7ed      	b.n	8018cd6 <_free_r+0x22>
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	685b      	ldr	r3, [r3, #4]
 8018cfe:	b10b      	cbz	r3, 8018d04 <_free_r+0x50>
 8018d00:	42a3      	cmp	r3, r4
 8018d02:	d9fa      	bls.n	8018cfa <_free_r+0x46>
 8018d04:	6811      	ldr	r1, [r2, #0]
 8018d06:	1855      	adds	r5, r2, r1
 8018d08:	42a5      	cmp	r5, r4
 8018d0a:	d10b      	bne.n	8018d24 <_free_r+0x70>
 8018d0c:	6824      	ldr	r4, [r4, #0]
 8018d0e:	4421      	add	r1, r4
 8018d10:	1854      	adds	r4, r2, r1
 8018d12:	42a3      	cmp	r3, r4
 8018d14:	6011      	str	r1, [r2, #0]
 8018d16:	d1e0      	bne.n	8018cda <_free_r+0x26>
 8018d18:	681c      	ldr	r4, [r3, #0]
 8018d1a:	685b      	ldr	r3, [r3, #4]
 8018d1c:	6053      	str	r3, [r2, #4]
 8018d1e:	4421      	add	r1, r4
 8018d20:	6011      	str	r1, [r2, #0]
 8018d22:	e7da      	b.n	8018cda <_free_r+0x26>
 8018d24:	d902      	bls.n	8018d2c <_free_r+0x78>
 8018d26:	230c      	movs	r3, #12
 8018d28:	6003      	str	r3, [r0, #0]
 8018d2a:	e7d6      	b.n	8018cda <_free_r+0x26>
 8018d2c:	6825      	ldr	r5, [r4, #0]
 8018d2e:	1961      	adds	r1, r4, r5
 8018d30:	428b      	cmp	r3, r1
 8018d32:	bf04      	itt	eq
 8018d34:	6819      	ldreq	r1, [r3, #0]
 8018d36:	685b      	ldreq	r3, [r3, #4]
 8018d38:	6063      	str	r3, [r4, #4]
 8018d3a:	bf04      	itt	eq
 8018d3c:	1949      	addeq	r1, r1, r5
 8018d3e:	6021      	streq	r1, [r4, #0]
 8018d40:	6054      	str	r4, [r2, #4]
 8018d42:	e7ca      	b.n	8018cda <_free_r+0x26>
 8018d44:	b003      	add	sp, #12
 8018d46:	bd30      	pop	{r4, r5, pc}
 8018d48:	20011ca8 	.word	0x20011ca8

08018d4c <__ssputs_r>:
 8018d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d50:	688e      	ldr	r6, [r1, #8]
 8018d52:	429e      	cmp	r6, r3
 8018d54:	4682      	mov	sl, r0
 8018d56:	460c      	mov	r4, r1
 8018d58:	4690      	mov	r8, r2
 8018d5a:	461f      	mov	r7, r3
 8018d5c:	d838      	bhi.n	8018dd0 <__ssputs_r+0x84>
 8018d5e:	898a      	ldrh	r2, [r1, #12]
 8018d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018d64:	d032      	beq.n	8018dcc <__ssputs_r+0x80>
 8018d66:	6825      	ldr	r5, [r4, #0]
 8018d68:	6909      	ldr	r1, [r1, #16]
 8018d6a:	eba5 0901 	sub.w	r9, r5, r1
 8018d6e:	6965      	ldr	r5, [r4, #20]
 8018d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018d78:	3301      	adds	r3, #1
 8018d7a:	444b      	add	r3, r9
 8018d7c:	106d      	asrs	r5, r5, #1
 8018d7e:	429d      	cmp	r5, r3
 8018d80:	bf38      	it	cc
 8018d82:	461d      	movcc	r5, r3
 8018d84:	0553      	lsls	r3, r2, #21
 8018d86:	d531      	bpl.n	8018dec <__ssputs_r+0xa0>
 8018d88:	4629      	mov	r1, r5
 8018d8a:	f7fd fda5 	bl	80168d8 <_malloc_r>
 8018d8e:	4606      	mov	r6, r0
 8018d90:	b950      	cbnz	r0, 8018da8 <__ssputs_r+0x5c>
 8018d92:	230c      	movs	r3, #12
 8018d94:	f8ca 3000 	str.w	r3, [sl]
 8018d98:	89a3      	ldrh	r3, [r4, #12]
 8018d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d9e:	81a3      	strh	r3, [r4, #12]
 8018da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018da8:	6921      	ldr	r1, [r4, #16]
 8018daa:	464a      	mov	r2, r9
 8018dac:	f7fd fd43 	bl	8016836 <memcpy>
 8018db0:	89a3      	ldrh	r3, [r4, #12]
 8018db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018dba:	81a3      	strh	r3, [r4, #12]
 8018dbc:	6126      	str	r6, [r4, #16]
 8018dbe:	6165      	str	r5, [r4, #20]
 8018dc0:	444e      	add	r6, r9
 8018dc2:	eba5 0509 	sub.w	r5, r5, r9
 8018dc6:	6026      	str	r6, [r4, #0]
 8018dc8:	60a5      	str	r5, [r4, #8]
 8018dca:	463e      	mov	r6, r7
 8018dcc:	42be      	cmp	r6, r7
 8018dce:	d900      	bls.n	8018dd2 <__ssputs_r+0x86>
 8018dd0:	463e      	mov	r6, r7
 8018dd2:	6820      	ldr	r0, [r4, #0]
 8018dd4:	4632      	mov	r2, r6
 8018dd6:	4641      	mov	r1, r8
 8018dd8:	f7fd fd3b 	bl	8016852 <memmove>
 8018ddc:	68a3      	ldr	r3, [r4, #8]
 8018dde:	1b9b      	subs	r3, r3, r6
 8018de0:	60a3      	str	r3, [r4, #8]
 8018de2:	6823      	ldr	r3, [r4, #0]
 8018de4:	4433      	add	r3, r6
 8018de6:	6023      	str	r3, [r4, #0]
 8018de8:	2000      	movs	r0, #0
 8018dea:	e7db      	b.n	8018da4 <__ssputs_r+0x58>
 8018dec:	462a      	mov	r2, r5
 8018dee:	f000 fd4d 	bl	801988c <_realloc_r>
 8018df2:	4606      	mov	r6, r0
 8018df4:	2800      	cmp	r0, #0
 8018df6:	d1e1      	bne.n	8018dbc <__ssputs_r+0x70>
 8018df8:	6921      	ldr	r1, [r4, #16]
 8018dfa:	4650      	mov	r0, sl
 8018dfc:	f7ff ff5a 	bl	8018cb4 <_free_r>
 8018e00:	e7c7      	b.n	8018d92 <__ssputs_r+0x46>
	...

08018e04 <_svfiprintf_r>:
 8018e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e08:	4698      	mov	r8, r3
 8018e0a:	898b      	ldrh	r3, [r1, #12]
 8018e0c:	061b      	lsls	r3, r3, #24
 8018e0e:	b09d      	sub	sp, #116	; 0x74
 8018e10:	4607      	mov	r7, r0
 8018e12:	460d      	mov	r5, r1
 8018e14:	4614      	mov	r4, r2
 8018e16:	d50e      	bpl.n	8018e36 <_svfiprintf_r+0x32>
 8018e18:	690b      	ldr	r3, [r1, #16]
 8018e1a:	b963      	cbnz	r3, 8018e36 <_svfiprintf_r+0x32>
 8018e1c:	2140      	movs	r1, #64	; 0x40
 8018e1e:	f7fd fd5b 	bl	80168d8 <_malloc_r>
 8018e22:	6028      	str	r0, [r5, #0]
 8018e24:	6128      	str	r0, [r5, #16]
 8018e26:	b920      	cbnz	r0, 8018e32 <_svfiprintf_r+0x2e>
 8018e28:	230c      	movs	r3, #12
 8018e2a:	603b      	str	r3, [r7, #0]
 8018e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e30:	e0d1      	b.n	8018fd6 <_svfiprintf_r+0x1d2>
 8018e32:	2340      	movs	r3, #64	; 0x40
 8018e34:	616b      	str	r3, [r5, #20]
 8018e36:	2300      	movs	r3, #0
 8018e38:	9309      	str	r3, [sp, #36]	; 0x24
 8018e3a:	2320      	movs	r3, #32
 8018e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e44:	2330      	movs	r3, #48	; 0x30
 8018e46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018ff0 <_svfiprintf_r+0x1ec>
 8018e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e4e:	f04f 0901 	mov.w	r9, #1
 8018e52:	4623      	mov	r3, r4
 8018e54:	469a      	mov	sl, r3
 8018e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e5a:	b10a      	cbz	r2, 8018e60 <_svfiprintf_r+0x5c>
 8018e5c:	2a25      	cmp	r2, #37	; 0x25
 8018e5e:	d1f9      	bne.n	8018e54 <_svfiprintf_r+0x50>
 8018e60:	ebba 0b04 	subs.w	fp, sl, r4
 8018e64:	d00b      	beq.n	8018e7e <_svfiprintf_r+0x7a>
 8018e66:	465b      	mov	r3, fp
 8018e68:	4622      	mov	r2, r4
 8018e6a:	4629      	mov	r1, r5
 8018e6c:	4638      	mov	r0, r7
 8018e6e:	f7ff ff6d 	bl	8018d4c <__ssputs_r>
 8018e72:	3001      	adds	r0, #1
 8018e74:	f000 80aa 	beq.w	8018fcc <_svfiprintf_r+0x1c8>
 8018e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e7a:	445a      	add	r2, fp
 8018e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8018e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	f000 80a2 	beq.w	8018fcc <_svfiprintf_r+0x1c8>
 8018e88:	2300      	movs	r3, #0
 8018e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e92:	f10a 0a01 	add.w	sl, sl, #1
 8018e96:	9304      	str	r3, [sp, #16]
 8018e98:	9307      	str	r3, [sp, #28]
 8018e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8018ea0:	4654      	mov	r4, sl
 8018ea2:	2205      	movs	r2, #5
 8018ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ea8:	4851      	ldr	r0, [pc, #324]	; (8018ff0 <_svfiprintf_r+0x1ec>)
 8018eaa:	f7e7 f9b9 	bl	8000220 <memchr>
 8018eae:	9a04      	ldr	r2, [sp, #16]
 8018eb0:	b9d8      	cbnz	r0, 8018eea <_svfiprintf_r+0xe6>
 8018eb2:	06d0      	lsls	r0, r2, #27
 8018eb4:	bf44      	itt	mi
 8018eb6:	2320      	movmi	r3, #32
 8018eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ebc:	0711      	lsls	r1, r2, #28
 8018ebe:	bf44      	itt	mi
 8018ec0:	232b      	movmi	r3, #43	; 0x2b
 8018ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8018eca:	2b2a      	cmp	r3, #42	; 0x2a
 8018ecc:	d015      	beq.n	8018efa <_svfiprintf_r+0xf6>
 8018ece:	9a07      	ldr	r2, [sp, #28]
 8018ed0:	4654      	mov	r4, sl
 8018ed2:	2000      	movs	r0, #0
 8018ed4:	f04f 0c0a 	mov.w	ip, #10
 8018ed8:	4621      	mov	r1, r4
 8018eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ede:	3b30      	subs	r3, #48	; 0x30
 8018ee0:	2b09      	cmp	r3, #9
 8018ee2:	d94e      	bls.n	8018f82 <_svfiprintf_r+0x17e>
 8018ee4:	b1b0      	cbz	r0, 8018f14 <_svfiprintf_r+0x110>
 8018ee6:	9207      	str	r2, [sp, #28]
 8018ee8:	e014      	b.n	8018f14 <_svfiprintf_r+0x110>
 8018eea:	eba0 0308 	sub.w	r3, r0, r8
 8018eee:	fa09 f303 	lsl.w	r3, r9, r3
 8018ef2:	4313      	orrs	r3, r2
 8018ef4:	9304      	str	r3, [sp, #16]
 8018ef6:	46a2      	mov	sl, r4
 8018ef8:	e7d2      	b.n	8018ea0 <_svfiprintf_r+0x9c>
 8018efa:	9b03      	ldr	r3, [sp, #12]
 8018efc:	1d19      	adds	r1, r3, #4
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	9103      	str	r1, [sp, #12]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	bfbb      	ittet	lt
 8018f06:	425b      	neglt	r3, r3
 8018f08:	f042 0202 	orrlt.w	r2, r2, #2
 8018f0c:	9307      	strge	r3, [sp, #28]
 8018f0e:	9307      	strlt	r3, [sp, #28]
 8018f10:	bfb8      	it	lt
 8018f12:	9204      	strlt	r2, [sp, #16]
 8018f14:	7823      	ldrb	r3, [r4, #0]
 8018f16:	2b2e      	cmp	r3, #46	; 0x2e
 8018f18:	d10c      	bne.n	8018f34 <_svfiprintf_r+0x130>
 8018f1a:	7863      	ldrb	r3, [r4, #1]
 8018f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8018f1e:	d135      	bne.n	8018f8c <_svfiprintf_r+0x188>
 8018f20:	9b03      	ldr	r3, [sp, #12]
 8018f22:	1d1a      	adds	r2, r3, #4
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	9203      	str	r2, [sp, #12]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	bfb8      	it	lt
 8018f2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018f30:	3402      	adds	r4, #2
 8018f32:	9305      	str	r3, [sp, #20]
 8018f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019000 <_svfiprintf_r+0x1fc>
 8018f38:	7821      	ldrb	r1, [r4, #0]
 8018f3a:	2203      	movs	r2, #3
 8018f3c:	4650      	mov	r0, sl
 8018f3e:	f7e7 f96f 	bl	8000220 <memchr>
 8018f42:	b140      	cbz	r0, 8018f56 <_svfiprintf_r+0x152>
 8018f44:	2340      	movs	r3, #64	; 0x40
 8018f46:	eba0 000a 	sub.w	r0, r0, sl
 8018f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8018f4e:	9b04      	ldr	r3, [sp, #16]
 8018f50:	4303      	orrs	r3, r0
 8018f52:	3401      	adds	r4, #1
 8018f54:	9304      	str	r3, [sp, #16]
 8018f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5a:	4826      	ldr	r0, [pc, #152]	; (8018ff4 <_svfiprintf_r+0x1f0>)
 8018f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f60:	2206      	movs	r2, #6
 8018f62:	f7e7 f95d 	bl	8000220 <memchr>
 8018f66:	2800      	cmp	r0, #0
 8018f68:	d038      	beq.n	8018fdc <_svfiprintf_r+0x1d8>
 8018f6a:	4b23      	ldr	r3, [pc, #140]	; (8018ff8 <_svfiprintf_r+0x1f4>)
 8018f6c:	bb1b      	cbnz	r3, 8018fb6 <_svfiprintf_r+0x1b2>
 8018f6e:	9b03      	ldr	r3, [sp, #12]
 8018f70:	3307      	adds	r3, #7
 8018f72:	f023 0307 	bic.w	r3, r3, #7
 8018f76:	3308      	adds	r3, #8
 8018f78:	9303      	str	r3, [sp, #12]
 8018f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f7c:	4433      	add	r3, r6
 8018f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f80:	e767      	b.n	8018e52 <_svfiprintf_r+0x4e>
 8018f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f86:	460c      	mov	r4, r1
 8018f88:	2001      	movs	r0, #1
 8018f8a:	e7a5      	b.n	8018ed8 <_svfiprintf_r+0xd4>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	3401      	adds	r4, #1
 8018f90:	9305      	str	r3, [sp, #20]
 8018f92:	4619      	mov	r1, r3
 8018f94:	f04f 0c0a 	mov.w	ip, #10
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f9e:	3a30      	subs	r2, #48	; 0x30
 8018fa0:	2a09      	cmp	r2, #9
 8018fa2:	d903      	bls.n	8018fac <_svfiprintf_r+0x1a8>
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d0c5      	beq.n	8018f34 <_svfiprintf_r+0x130>
 8018fa8:	9105      	str	r1, [sp, #20]
 8018faa:	e7c3      	b.n	8018f34 <_svfiprintf_r+0x130>
 8018fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8018fb0:	4604      	mov	r4, r0
 8018fb2:	2301      	movs	r3, #1
 8018fb4:	e7f0      	b.n	8018f98 <_svfiprintf_r+0x194>
 8018fb6:	ab03      	add	r3, sp, #12
 8018fb8:	9300      	str	r3, [sp, #0]
 8018fba:	462a      	mov	r2, r5
 8018fbc:	4b0f      	ldr	r3, [pc, #60]	; (8018ffc <_svfiprintf_r+0x1f8>)
 8018fbe:	a904      	add	r1, sp, #16
 8018fc0:	4638      	mov	r0, r7
 8018fc2:	f3af 8000 	nop.w
 8018fc6:	1c42      	adds	r2, r0, #1
 8018fc8:	4606      	mov	r6, r0
 8018fca:	d1d6      	bne.n	8018f7a <_svfiprintf_r+0x176>
 8018fcc:	89ab      	ldrh	r3, [r5, #12]
 8018fce:	065b      	lsls	r3, r3, #25
 8018fd0:	f53f af2c 	bmi.w	8018e2c <_svfiprintf_r+0x28>
 8018fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018fd6:	b01d      	add	sp, #116	; 0x74
 8018fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fdc:	ab03      	add	r3, sp, #12
 8018fde:	9300      	str	r3, [sp, #0]
 8018fe0:	462a      	mov	r2, r5
 8018fe2:	4b06      	ldr	r3, [pc, #24]	; (8018ffc <_svfiprintf_r+0x1f8>)
 8018fe4:	a904      	add	r1, sp, #16
 8018fe6:	4638      	mov	r0, r7
 8018fe8:	f000 f9d4 	bl	8019394 <_printf_i>
 8018fec:	e7eb      	b.n	8018fc6 <_svfiprintf_r+0x1c2>
 8018fee:	bf00      	nop
 8018ff0:	0801d24c 	.word	0x0801d24c
 8018ff4:	0801d256 	.word	0x0801d256
 8018ff8:	00000000 	.word	0x00000000
 8018ffc:	08018d4d 	.word	0x08018d4d
 8019000:	0801d252 	.word	0x0801d252

08019004 <__sfputc_r>:
 8019004:	6893      	ldr	r3, [r2, #8]
 8019006:	3b01      	subs	r3, #1
 8019008:	2b00      	cmp	r3, #0
 801900a:	b410      	push	{r4}
 801900c:	6093      	str	r3, [r2, #8]
 801900e:	da08      	bge.n	8019022 <__sfputc_r+0x1e>
 8019010:	6994      	ldr	r4, [r2, #24]
 8019012:	42a3      	cmp	r3, r4
 8019014:	db01      	blt.n	801901a <__sfputc_r+0x16>
 8019016:	290a      	cmp	r1, #10
 8019018:	d103      	bne.n	8019022 <__sfputc_r+0x1e>
 801901a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801901e:	f000 bafb 	b.w	8019618 <__swbuf_r>
 8019022:	6813      	ldr	r3, [r2, #0]
 8019024:	1c58      	adds	r0, r3, #1
 8019026:	6010      	str	r0, [r2, #0]
 8019028:	7019      	strb	r1, [r3, #0]
 801902a:	4608      	mov	r0, r1
 801902c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019030:	4770      	bx	lr

08019032 <__sfputs_r>:
 8019032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019034:	4606      	mov	r6, r0
 8019036:	460f      	mov	r7, r1
 8019038:	4614      	mov	r4, r2
 801903a:	18d5      	adds	r5, r2, r3
 801903c:	42ac      	cmp	r4, r5
 801903e:	d101      	bne.n	8019044 <__sfputs_r+0x12>
 8019040:	2000      	movs	r0, #0
 8019042:	e007      	b.n	8019054 <__sfputs_r+0x22>
 8019044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019048:	463a      	mov	r2, r7
 801904a:	4630      	mov	r0, r6
 801904c:	f7ff ffda 	bl	8019004 <__sfputc_r>
 8019050:	1c43      	adds	r3, r0, #1
 8019052:	d1f3      	bne.n	801903c <__sfputs_r+0xa>
 8019054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019058 <_vfiprintf_r>:
 8019058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801905c:	460d      	mov	r5, r1
 801905e:	b09d      	sub	sp, #116	; 0x74
 8019060:	4614      	mov	r4, r2
 8019062:	4698      	mov	r8, r3
 8019064:	4606      	mov	r6, r0
 8019066:	b118      	cbz	r0, 8019070 <_vfiprintf_r+0x18>
 8019068:	6983      	ldr	r3, [r0, #24]
 801906a:	b90b      	cbnz	r3, 8019070 <_vfiprintf_r+0x18>
 801906c:	f7fd fb0e 	bl	801668c <__sinit>
 8019070:	4b89      	ldr	r3, [pc, #548]	; (8019298 <_vfiprintf_r+0x240>)
 8019072:	429d      	cmp	r5, r3
 8019074:	d11b      	bne.n	80190ae <_vfiprintf_r+0x56>
 8019076:	6875      	ldr	r5, [r6, #4]
 8019078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801907a:	07d9      	lsls	r1, r3, #31
 801907c:	d405      	bmi.n	801908a <_vfiprintf_r+0x32>
 801907e:	89ab      	ldrh	r3, [r5, #12]
 8019080:	059a      	lsls	r2, r3, #22
 8019082:	d402      	bmi.n	801908a <_vfiprintf_r+0x32>
 8019084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019086:	f7fd fbc4 	bl	8016812 <__retarget_lock_acquire_recursive>
 801908a:	89ab      	ldrh	r3, [r5, #12]
 801908c:	071b      	lsls	r3, r3, #28
 801908e:	d501      	bpl.n	8019094 <_vfiprintf_r+0x3c>
 8019090:	692b      	ldr	r3, [r5, #16]
 8019092:	b9eb      	cbnz	r3, 80190d0 <_vfiprintf_r+0x78>
 8019094:	4629      	mov	r1, r5
 8019096:	4630      	mov	r0, r6
 8019098:	f000 fb1e 	bl	80196d8 <__swsetup_r>
 801909c:	b1c0      	cbz	r0, 80190d0 <_vfiprintf_r+0x78>
 801909e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190a0:	07dc      	lsls	r4, r3, #31
 80190a2:	d50e      	bpl.n	80190c2 <_vfiprintf_r+0x6a>
 80190a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190a8:	b01d      	add	sp, #116	; 0x74
 80190aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ae:	4b7b      	ldr	r3, [pc, #492]	; (801929c <_vfiprintf_r+0x244>)
 80190b0:	429d      	cmp	r5, r3
 80190b2:	d101      	bne.n	80190b8 <_vfiprintf_r+0x60>
 80190b4:	68b5      	ldr	r5, [r6, #8]
 80190b6:	e7df      	b.n	8019078 <_vfiprintf_r+0x20>
 80190b8:	4b79      	ldr	r3, [pc, #484]	; (80192a0 <_vfiprintf_r+0x248>)
 80190ba:	429d      	cmp	r5, r3
 80190bc:	bf08      	it	eq
 80190be:	68f5      	ldreq	r5, [r6, #12]
 80190c0:	e7da      	b.n	8019078 <_vfiprintf_r+0x20>
 80190c2:	89ab      	ldrh	r3, [r5, #12]
 80190c4:	0598      	lsls	r0, r3, #22
 80190c6:	d4ed      	bmi.n	80190a4 <_vfiprintf_r+0x4c>
 80190c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190ca:	f7fd fba3 	bl	8016814 <__retarget_lock_release_recursive>
 80190ce:	e7e9      	b.n	80190a4 <_vfiprintf_r+0x4c>
 80190d0:	2300      	movs	r3, #0
 80190d2:	9309      	str	r3, [sp, #36]	; 0x24
 80190d4:	2320      	movs	r3, #32
 80190d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190da:	f8cd 800c 	str.w	r8, [sp, #12]
 80190de:	2330      	movs	r3, #48	; 0x30
 80190e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80192a4 <_vfiprintf_r+0x24c>
 80190e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190e8:	f04f 0901 	mov.w	r9, #1
 80190ec:	4623      	mov	r3, r4
 80190ee:	469a      	mov	sl, r3
 80190f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190f4:	b10a      	cbz	r2, 80190fa <_vfiprintf_r+0xa2>
 80190f6:	2a25      	cmp	r2, #37	; 0x25
 80190f8:	d1f9      	bne.n	80190ee <_vfiprintf_r+0x96>
 80190fa:	ebba 0b04 	subs.w	fp, sl, r4
 80190fe:	d00b      	beq.n	8019118 <_vfiprintf_r+0xc0>
 8019100:	465b      	mov	r3, fp
 8019102:	4622      	mov	r2, r4
 8019104:	4629      	mov	r1, r5
 8019106:	4630      	mov	r0, r6
 8019108:	f7ff ff93 	bl	8019032 <__sfputs_r>
 801910c:	3001      	adds	r0, #1
 801910e:	f000 80aa 	beq.w	8019266 <_vfiprintf_r+0x20e>
 8019112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019114:	445a      	add	r2, fp
 8019116:	9209      	str	r2, [sp, #36]	; 0x24
 8019118:	f89a 3000 	ldrb.w	r3, [sl]
 801911c:	2b00      	cmp	r3, #0
 801911e:	f000 80a2 	beq.w	8019266 <_vfiprintf_r+0x20e>
 8019122:	2300      	movs	r3, #0
 8019124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801912c:	f10a 0a01 	add.w	sl, sl, #1
 8019130:	9304      	str	r3, [sp, #16]
 8019132:	9307      	str	r3, [sp, #28]
 8019134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019138:	931a      	str	r3, [sp, #104]	; 0x68
 801913a:	4654      	mov	r4, sl
 801913c:	2205      	movs	r2, #5
 801913e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019142:	4858      	ldr	r0, [pc, #352]	; (80192a4 <_vfiprintf_r+0x24c>)
 8019144:	f7e7 f86c 	bl	8000220 <memchr>
 8019148:	9a04      	ldr	r2, [sp, #16]
 801914a:	b9d8      	cbnz	r0, 8019184 <_vfiprintf_r+0x12c>
 801914c:	06d1      	lsls	r1, r2, #27
 801914e:	bf44      	itt	mi
 8019150:	2320      	movmi	r3, #32
 8019152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019156:	0713      	lsls	r3, r2, #28
 8019158:	bf44      	itt	mi
 801915a:	232b      	movmi	r3, #43	; 0x2b
 801915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019160:	f89a 3000 	ldrb.w	r3, [sl]
 8019164:	2b2a      	cmp	r3, #42	; 0x2a
 8019166:	d015      	beq.n	8019194 <_vfiprintf_r+0x13c>
 8019168:	9a07      	ldr	r2, [sp, #28]
 801916a:	4654      	mov	r4, sl
 801916c:	2000      	movs	r0, #0
 801916e:	f04f 0c0a 	mov.w	ip, #10
 8019172:	4621      	mov	r1, r4
 8019174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019178:	3b30      	subs	r3, #48	; 0x30
 801917a:	2b09      	cmp	r3, #9
 801917c:	d94e      	bls.n	801921c <_vfiprintf_r+0x1c4>
 801917e:	b1b0      	cbz	r0, 80191ae <_vfiprintf_r+0x156>
 8019180:	9207      	str	r2, [sp, #28]
 8019182:	e014      	b.n	80191ae <_vfiprintf_r+0x156>
 8019184:	eba0 0308 	sub.w	r3, r0, r8
 8019188:	fa09 f303 	lsl.w	r3, r9, r3
 801918c:	4313      	orrs	r3, r2
 801918e:	9304      	str	r3, [sp, #16]
 8019190:	46a2      	mov	sl, r4
 8019192:	e7d2      	b.n	801913a <_vfiprintf_r+0xe2>
 8019194:	9b03      	ldr	r3, [sp, #12]
 8019196:	1d19      	adds	r1, r3, #4
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	9103      	str	r1, [sp, #12]
 801919c:	2b00      	cmp	r3, #0
 801919e:	bfbb      	ittet	lt
 80191a0:	425b      	neglt	r3, r3
 80191a2:	f042 0202 	orrlt.w	r2, r2, #2
 80191a6:	9307      	strge	r3, [sp, #28]
 80191a8:	9307      	strlt	r3, [sp, #28]
 80191aa:	bfb8      	it	lt
 80191ac:	9204      	strlt	r2, [sp, #16]
 80191ae:	7823      	ldrb	r3, [r4, #0]
 80191b0:	2b2e      	cmp	r3, #46	; 0x2e
 80191b2:	d10c      	bne.n	80191ce <_vfiprintf_r+0x176>
 80191b4:	7863      	ldrb	r3, [r4, #1]
 80191b6:	2b2a      	cmp	r3, #42	; 0x2a
 80191b8:	d135      	bne.n	8019226 <_vfiprintf_r+0x1ce>
 80191ba:	9b03      	ldr	r3, [sp, #12]
 80191bc:	1d1a      	adds	r2, r3, #4
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	9203      	str	r2, [sp, #12]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	bfb8      	it	lt
 80191c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80191ca:	3402      	adds	r4, #2
 80191cc:	9305      	str	r3, [sp, #20]
 80191ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80192b4 <_vfiprintf_r+0x25c>
 80191d2:	7821      	ldrb	r1, [r4, #0]
 80191d4:	2203      	movs	r2, #3
 80191d6:	4650      	mov	r0, sl
 80191d8:	f7e7 f822 	bl	8000220 <memchr>
 80191dc:	b140      	cbz	r0, 80191f0 <_vfiprintf_r+0x198>
 80191de:	2340      	movs	r3, #64	; 0x40
 80191e0:	eba0 000a 	sub.w	r0, r0, sl
 80191e4:	fa03 f000 	lsl.w	r0, r3, r0
 80191e8:	9b04      	ldr	r3, [sp, #16]
 80191ea:	4303      	orrs	r3, r0
 80191ec:	3401      	adds	r4, #1
 80191ee:	9304      	str	r3, [sp, #16]
 80191f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191f4:	482c      	ldr	r0, [pc, #176]	; (80192a8 <_vfiprintf_r+0x250>)
 80191f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191fa:	2206      	movs	r2, #6
 80191fc:	f7e7 f810 	bl	8000220 <memchr>
 8019200:	2800      	cmp	r0, #0
 8019202:	d03f      	beq.n	8019284 <_vfiprintf_r+0x22c>
 8019204:	4b29      	ldr	r3, [pc, #164]	; (80192ac <_vfiprintf_r+0x254>)
 8019206:	bb1b      	cbnz	r3, 8019250 <_vfiprintf_r+0x1f8>
 8019208:	9b03      	ldr	r3, [sp, #12]
 801920a:	3307      	adds	r3, #7
 801920c:	f023 0307 	bic.w	r3, r3, #7
 8019210:	3308      	adds	r3, #8
 8019212:	9303      	str	r3, [sp, #12]
 8019214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019216:	443b      	add	r3, r7
 8019218:	9309      	str	r3, [sp, #36]	; 0x24
 801921a:	e767      	b.n	80190ec <_vfiprintf_r+0x94>
 801921c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019220:	460c      	mov	r4, r1
 8019222:	2001      	movs	r0, #1
 8019224:	e7a5      	b.n	8019172 <_vfiprintf_r+0x11a>
 8019226:	2300      	movs	r3, #0
 8019228:	3401      	adds	r4, #1
 801922a:	9305      	str	r3, [sp, #20]
 801922c:	4619      	mov	r1, r3
 801922e:	f04f 0c0a 	mov.w	ip, #10
 8019232:	4620      	mov	r0, r4
 8019234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019238:	3a30      	subs	r2, #48	; 0x30
 801923a:	2a09      	cmp	r2, #9
 801923c:	d903      	bls.n	8019246 <_vfiprintf_r+0x1ee>
 801923e:	2b00      	cmp	r3, #0
 8019240:	d0c5      	beq.n	80191ce <_vfiprintf_r+0x176>
 8019242:	9105      	str	r1, [sp, #20]
 8019244:	e7c3      	b.n	80191ce <_vfiprintf_r+0x176>
 8019246:	fb0c 2101 	mla	r1, ip, r1, r2
 801924a:	4604      	mov	r4, r0
 801924c:	2301      	movs	r3, #1
 801924e:	e7f0      	b.n	8019232 <_vfiprintf_r+0x1da>
 8019250:	ab03      	add	r3, sp, #12
 8019252:	9300      	str	r3, [sp, #0]
 8019254:	462a      	mov	r2, r5
 8019256:	4b16      	ldr	r3, [pc, #88]	; (80192b0 <_vfiprintf_r+0x258>)
 8019258:	a904      	add	r1, sp, #16
 801925a:	4630      	mov	r0, r6
 801925c:	f3af 8000 	nop.w
 8019260:	4607      	mov	r7, r0
 8019262:	1c78      	adds	r0, r7, #1
 8019264:	d1d6      	bne.n	8019214 <_vfiprintf_r+0x1bc>
 8019266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019268:	07d9      	lsls	r1, r3, #31
 801926a:	d405      	bmi.n	8019278 <_vfiprintf_r+0x220>
 801926c:	89ab      	ldrh	r3, [r5, #12]
 801926e:	059a      	lsls	r2, r3, #22
 8019270:	d402      	bmi.n	8019278 <_vfiprintf_r+0x220>
 8019272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019274:	f7fd face 	bl	8016814 <__retarget_lock_release_recursive>
 8019278:	89ab      	ldrh	r3, [r5, #12]
 801927a:	065b      	lsls	r3, r3, #25
 801927c:	f53f af12 	bmi.w	80190a4 <_vfiprintf_r+0x4c>
 8019280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019282:	e711      	b.n	80190a8 <_vfiprintf_r+0x50>
 8019284:	ab03      	add	r3, sp, #12
 8019286:	9300      	str	r3, [sp, #0]
 8019288:	462a      	mov	r2, r5
 801928a:	4b09      	ldr	r3, [pc, #36]	; (80192b0 <_vfiprintf_r+0x258>)
 801928c:	a904      	add	r1, sp, #16
 801928e:	4630      	mov	r0, r6
 8019290:	f000 f880 	bl	8019394 <_printf_i>
 8019294:	e7e4      	b.n	8019260 <_vfiprintf_r+0x208>
 8019296:	bf00      	nop
 8019298:	0801ceb8 	.word	0x0801ceb8
 801929c:	0801ced8 	.word	0x0801ced8
 80192a0:	0801ce98 	.word	0x0801ce98
 80192a4:	0801d24c 	.word	0x0801d24c
 80192a8:	0801d256 	.word	0x0801d256
 80192ac:	00000000 	.word	0x00000000
 80192b0:	08019033 	.word	0x08019033
 80192b4:	0801d252 	.word	0x0801d252

080192b8 <_printf_common>:
 80192b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192bc:	4616      	mov	r6, r2
 80192be:	4699      	mov	r9, r3
 80192c0:	688a      	ldr	r2, [r1, #8]
 80192c2:	690b      	ldr	r3, [r1, #16]
 80192c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80192c8:	4293      	cmp	r3, r2
 80192ca:	bfb8      	it	lt
 80192cc:	4613      	movlt	r3, r2
 80192ce:	6033      	str	r3, [r6, #0]
 80192d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80192d4:	4607      	mov	r7, r0
 80192d6:	460c      	mov	r4, r1
 80192d8:	b10a      	cbz	r2, 80192de <_printf_common+0x26>
 80192da:	3301      	adds	r3, #1
 80192dc:	6033      	str	r3, [r6, #0]
 80192de:	6823      	ldr	r3, [r4, #0]
 80192e0:	0699      	lsls	r1, r3, #26
 80192e2:	bf42      	ittt	mi
 80192e4:	6833      	ldrmi	r3, [r6, #0]
 80192e6:	3302      	addmi	r3, #2
 80192e8:	6033      	strmi	r3, [r6, #0]
 80192ea:	6825      	ldr	r5, [r4, #0]
 80192ec:	f015 0506 	ands.w	r5, r5, #6
 80192f0:	d106      	bne.n	8019300 <_printf_common+0x48>
 80192f2:	f104 0a19 	add.w	sl, r4, #25
 80192f6:	68e3      	ldr	r3, [r4, #12]
 80192f8:	6832      	ldr	r2, [r6, #0]
 80192fa:	1a9b      	subs	r3, r3, r2
 80192fc:	42ab      	cmp	r3, r5
 80192fe:	dc26      	bgt.n	801934e <_printf_common+0x96>
 8019300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019304:	1e13      	subs	r3, r2, #0
 8019306:	6822      	ldr	r2, [r4, #0]
 8019308:	bf18      	it	ne
 801930a:	2301      	movne	r3, #1
 801930c:	0692      	lsls	r2, r2, #26
 801930e:	d42b      	bmi.n	8019368 <_printf_common+0xb0>
 8019310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019314:	4649      	mov	r1, r9
 8019316:	4638      	mov	r0, r7
 8019318:	47c0      	blx	r8
 801931a:	3001      	adds	r0, #1
 801931c:	d01e      	beq.n	801935c <_printf_common+0xa4>
 801931e:	6823      	ldr	r3, [r4, #0]
 8019320:	68e5      	ldr	r5, [r4, #12]
 8019322:	6832      	ldr	r2, [r6, #0]
 8019324:	f003 0306 	and.w	r3, r3, #6
 8019328:	2b04      	cmp	r3, #4
 801932a:	bf08      	it	eq
 801932c:	1aad      	subeq	r5, r5, r2
 801932e:	68a3      	ldr	r3, [r4, #8]
 8019330:	6922      	ldr	r2, [r4, #16]
 8019332:	bf0c      	ite	eq
 8019334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019338:	2500      	movne	r5, #0
 801933a:	4293      	cmp	r3, r2
 801933c:	bfc4      	itt	gt
 801933e:	1a9b      	subgt	r3, r3, r2
 8019340:	18ed      	addgt	r5, r5, r3
 8019342:	2600      	movs	r6, #0
 8019344:	341a      	adds	r4, #26
 8019346:	42b5      	cmp	r5, r6
 8019348:	d11a      	bne.n	8019380 <_printf_common+0xc8>
 801934a:	2000      	movs	r0, #0
 801934c:	e008      	b.n	8019360 <_printf_common+0xa8>
 801934e:	2301      	movs	r3, #1
 8019350:	4652      	mov	r2, sl
 8019352:	4649      	mov	r1, r9
 8019354:	4638      	mov	r0, r7
 8019356:	47c0      	blx	r8
 8019358:	3001      	adds	r0, #1
 801935a:	d103      	bne.n	8019364 <_printf_common+0xac>
 801935c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019364:	3501      	adds	r5, #1
 8019366:	e7c6      	b.n	80192f6 <_printf_common+0x3e>
 8019368:	18e1      	adds	r1, r4, r3
 801936a:	1c5a      	adds	r2, r3, #1
 801936c:	2030      	movs	r0, #48	; 0x30
 801936e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019372:	4422      	add	r2, r4
 8019374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801937c:	3302      	adds	r3, #2
 801937e:	e7c7      	b.n	8019310 <_printf_common+0x58>
 8019380:	2301      	movs	r3, #1
 8019382:	4622      	mov	r2, r4
 8019384:	4649      	mov	r1, r9
 8019386:	4638      	mov	r0, r7
 8019388:	47c0      	blx	r8
 801938a:	3001      	adds	r0, #1
 801938c:	d0e6      	beq.n	801935c <_printf_common+0xa4>
 801938e:	3601      	adds	r6, #1
 8019390:	e7d9      	b.n	8019346 <_printf_common+0x8e>
	...

08019394 <_printf_i>:
 8019394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019398:	7e0f      	ldrb	r7, [r1, #24]
 801939a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801939c:	2f78      	cmp	r7, #120	; 0x78
 801939e:	4691      	mov	r9, r2
 80193a0:	4680      	mov	r8, r0
 80193a2:	460c      	mov	r4, r1
 80193a4:	469a      	mov	sl, r3
 80193a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80193aa:	d807      	bhi.n	80193bc <_printf_i+0x28>
 80193ac:	2f62      	cmp	r7, #98	; 0x62
 80193ae:	d80a      	bhi.n	80193c6 <_printf_i+0x32>
 80193b0:	2f00      	cmp	r7, #0
 80193b2:	f000 80d8 	beq.w	8019566 <_printf_i+0x1d2>
 80193b6:	2f58      	cmp	r7, #88	; 0x58
 80193b8:	f000 80a3 	beq.w	8019502 <_printf_i+0x16e>
 80193bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80193c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80193c4:	e03a      	b.n	801943c <_printf_i+0xa8>
 80193c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80193ca:	2b15      	cmp	r3, #21
 80193cc:	d8f6      	bhi.n	80193bc <_printf_i+0x28>
 80193ce:	a101      	add	r1, pc, #4	; (adr r1, 80193d4 <_printf_i+0x40>)
 80193d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80193d4:	0801942d 	.word	0x0801942d
 80193d8:	08019441 	.word	0x08019441
 80193dc:	080193bd 	.word	0x080193bd
 80193e0:	080193bd 	.word	0x080193bd
 80193e4:	080193bd 	.word	0x080193bd
 80193e8:	080193bd 	.word	0x080193bd
 80193ec:	08019441 	.word	0x08019441
 80193f0:	080193bd 	.word	0x080193bd
 80193f4:	080193bd 	.word	0x080193bd
 80193f8:	080193bd 	.word	0x080193bd
 80193fc:	080193bd 	.word	0x080193bd
 8019400:	0801954d 	.word	0x0801954d
 8019404:	08019471 	.word	0x08019471
 8019408:	0801952f 	.word	0x0801952f
 801940c:	080193bd 	.word	0x080193bd
 8019410:	080193bd 	.word	0x080193bd
 8019414:	0801956f 	.word	0x0801956f
 8019418:	080193bd 	.word	0x080193bd
 801941c:	08019471 	.word	0x08019471
 8019420:	080193bd 	.word	0x080193bd
 8019424:	080193bd 	.word	0x080193bd
 8019428:	08019537 	.word	0x08019537
 801942c:	682b      	ldr	r3, [r5, #0]
 801942e:	1d1a      	adds	r2, r3, #4
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	602a      	str	r2, [r5, #0]
 8019434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801943c:	2301      	movs	r3, #1
 801943e:	e0a3      	b.n	8019588 <_printf_i+0x1f4>
 8019440:	6820      	ldr	r0, [r4, #0]
 8019442:	6829      	ldr	r1, [r5, #0]
 8019444:	0606      	lsls	r6, r0, #24
 8019446:	f101 0304 	add.w	r3, r1, #4
 801944a:	d50a      	bpl.n	8019462 <_printf_i+0xce>
 801944c:	680e      	ldr	r6, [r1, #0]
 801944e:	602b      	str	r3, [r5, #0]
 8019450:	2e00      	cmp	r6, #0
 8019452:	da03      	bge.n	801945c <_printf_i+0xc8>
 8019454:	232d      	movs	r3, #45	; 0x2d
 8019456:	4276      	negs	r6, r6
 8019458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801945c:	485e      	ldr	r0, [pc, #376]	; (80195d8 <_printf_i+0x244>)
 801945e:	230a      	movs	r3, #10
 8019460:	e019      	b.n	8019496 <_printf_i+0x102>
 8019462:	680e      	ldr	r6, [r1, #0]
 8019464:	602b      	str	r3, [r5, #0]
 8019466:	f010 0f40 	tst.w	r0, #64	; 0x40
 801946a:	bf18      	it	ne
 801946c:	b236      	sxthne	r6, r6
 801946e:	e7ef      	b.n	8019450 <_printf_i+0xbc>
 8019470:	682b      	ldr	r3, [r5, #0]
 8019472:	6820      	ldr	r0, [r4, #0]
 8019474:	1d19      	adds	r1, r3, #4
 8019476:	6029      	str	r1, [r5, #0]
 8019478:	0601      	lsls	r1, r0, #24
 801947a:	d501      	bpl.n	8019480 <_printf_i+0xec>
 801947c:	681e      	ldr	r6, [r3, #0]
 801947e:	e002      	b.n	8019486 <_printf_i+0xf2>
 8019480:	0646      	lsls	r6, r0, #25
 8019482:	d5fb      	bpl.n	801947c <_printf_i+0xe8>
 8019484:	881e      	ldrh	r6, [r3, #0]
 8019486:	4854      	ldr	r0, [pc, #336]	; (80195d8 <_printf_i+0x244>)
 8019488:	2f6f      	cmp	r7, #111	; 0x6f
 801948a:	bf0c      	ite	eq
 801948c:	2308      	moveq	r3, #8
 801948e:	230a      	movne	r3, #10
 8019490:	2100      	movs	r1, #0
 8019492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019496:	6865      	ldr	r5, [r4, #4]
 8019498:	60a5      	str	r5, [r4, #8]
 801949a:	2d00      	cmp	r5, #0
 801949c:	bfa2      	ittt	ge
 801949e:	6821      	ldrge	r1, [r4, #0]
 80194a0:	f021 0104 	bicge.w	r1, r1, #4
 80194a4:	6021      	strge	r1, [r4, #0]
 80194a6:	b90e      	cbnz	r6, 80194ac <_printf_i+0x118>
 80194a8:	2d00      	cmp	r5, #0
 80194aa:	d04d      	beq.n	8019548 <_printf_i+0x1b4>
 80194ac:	4615      	mov	r5, r2
 80194ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80194b2:	fb03 6711 	mls	r7, r3, r1, r6
 80194b6:	5dc7      	ldrb	r7, [r0, r7]
 80194b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80194bc:	4637      	mov	r7, r6
 80194be:	42bb      	cmp	r3, r7
 80194c0:	460e      	mov	r6, r1
 80194c2:	d9f4      	bls.n	80194ae <_printf_i+0x11a>
 80194c4:	2b08      	cmp	r3, #8
 80194c6:	d10b      	bne.n	80194e0 <_printf_i+0x14c>
 80194c8:	6823      	ldr	r3, [r4, #0]
 80194ca:	07de      	lsls	r6, r3, #31
 80194cc:	d508      	bpl.n	80194e0 <_printf_i+0x14c>
 80194ce:	6923      	ldr	r3, [r4, #16]
 80194d0:	6861      	ldr	r1, [r4, #4]
 80194d2:	4299      	cmp	r1, r3
 80194d4:	bfde      	ittt	le
 80194d6:	2330      	movle	r3, #48	; 0x30
 80194d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80194dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80194e0:	1b52      	subs	r2, r2, r5
 80194e2:	6122      	str	r2, [r4, #16]
 80194e4:	f8cd a000 	str.w	sl, [sp]
 80194e8:	464b      	mov	r3, r9
 80194ea:	aa03      	add	r2, sp, #12
 80194ec:	4621      	mov	r1, r4
 80194ee:	4640      	mov	r0, r8
 80194f0:	f7ff fee2 	bl	80192b8 <_printf_common>
 80194f4:	3001      	adds	r0, #1
 80194f6:	d14c      	bne.n	8019592 <_printf_i+0x1fe>
 80194f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194fc:	b004      	add	sp, #16
 80194fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019502:	4835      	ldr	r0, [pc, #212]	; (80195d8 <_printf_i+0x244>)
 8019504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019508:	6829      	ldr	r1, [r5, #0]
 801950a:	6823      	ldr	r3, [r4, #0]
 801950c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019510:	6029      	str	r1, [r5, #0]
 8019512:	061d      	lsls	r5, r3, #24
 8019514:	d514      	bpl.n	8019540 <_printf_i+0x1ac>
 8019516:	07df      	lsls	r7, r3, #31
 8019518:	bf44      	itt	mi
 801951a:	f043 0320 	orrmi.w	r3, r3, #32
 801951e:	6023      	strmi	r3, [r4, #0]
 8019520:	b91e      	cbnz	r6, 801952a <_printf_i+0x196>
 8019522:	6823      	ldr	r3, [r4, #0]
 8019524:	f023 0320 	bic.w	r3, r3, #32
 8019528:	6023      	str	r3, [r4, #0]
 801952a:	2310      	movs	r3, #16
 801952c:	e7b0      	b.n	8019490 <_printf_i+0xfc>
 801952e:	6823      	ldr	r3, [r4, #0]
 8019530:	f043 0320 	orr.w	r3, r3, #32
 8019534:	6023      	str	r3, [r4, #0]
 8019536:	2378      	movs	r3, #120	; 0x78
 8019538:	4828      	ldr	r0, [pc, #160]	; (80195dc <_printf_i+0x248>)
 801953a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801953e:	e7e3      	b.n	8019508 <_printf_i+0x174>
 8019540:	0659      	lsls	r1, r3, #25
 8019542:	bf48      	it	mi
 8019544:	b2b6      	uxthmi	r6, r6
 8019546:	e7e6      	b.n	8019516 <_printf_i+0x182>
 8019548:	4615      	mov	r5, r2
 801954a:	e7bb      	b.n	80194c4 <_printf_i+0x130>
 801954c:	682b      	ldr	r3, [r5, #0]
 801954e:	6826      	ldr	r6, [r4, #0]
 8019550:	6961      	ldr	r1, [r4, #20]
 8019552:	1d18      	adds	r0, r3, #4
 8019554:	6028      	str	r0, [r5, #0]
 8019556:	0635      	lsls	r5, r6, #24
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	d501      	bpl.n	8019560 <_printf_i+0x1cc>
 801955c:	6019      	str	r1, [r3, #0]
 801955e:	e002      	b.n	8019566 <_printf_i+0x1d2>
 8019560:	0670      	lsls	r0, r6, #25
 8019562:	d5fb      	bpl.n	801955c <_printf_i+0x1c8>
 8019564:	8019      	strh	r1, [r3, #0]
 8019566:	2300      	movs	r3, #0
 8019568:	6123      	str	r3, [r4, #16]
 801956a:	4615      	mov	r5, r2
 801956c:	e7ba      	b.n	80194e4 <_printf_i+0x150>
 801956e:	682b      	ldr	r3, [r5, #0]
 8019570:	1d1a      	adds	r2, r3, #4
 8019572:	602a      	str	r2, [r5, #0]
 8019574:	681d      	ldr	r5, [r3, #0]
 8019576:	6862      	ldr	r2, [r4, #4]
 8019578:	2100      	movs	r1, #0
 801957a:	4628      	mov	r0, r5
 801957c:	f7e6 fe50 	bl	8000220 <memchr>
 8019580:	b108      	cbz	r0, 8019586 <_printf_i+0x1f2>
 8019582:	1b40      	subs	r0, r0, r5
 8019584:	6060      	str	r0, [r4, #4]
 8019586:	6863      	ldr	r3, [r4, #4]
 8019588:	6123      	str	r3, [r4, #16]
 801958a:	2300      	movs	r3, #0
 801958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019590:	e7a8      	b.n	80194e4 <_printf_i+0x150>
 8019592:	6923      	ldr	r3, [r4, #16]
 8019594:	462a      	mov	r2, r5
 8019596:	4649      	mov	r1, r9
 8019598:	4640      	mov	r0, r8
 801959a:	47d0      	blx	sl
 801959c:	3001      	adds	r0, #1
 801959e:	d0ab      	beq.n	80194f8 <_printf_i+0x164>
 80195a0:	6823      	ldr	r3, [r4, #0]
 80195a2:	079b      	lsls	r3, r3, #30
 80195a4:	d413      	bmi.n	80195ce <_printf_i+0x23a>
 80195a6:	68e0      	ldr	r0, [r4, #12]
 80195a8:	9b03      	ldr	r3, [sp, #12]
 80195aa:	4298      	cmp	r0, r3
 80195ac:	bfb8      	it	lt
 80195ae:	4618      	movlt	r0, r3
 80195b0:	e7a4      	b.n	80194fc <_printf_i+0x168>
 80195b2:	2301      	movs	r3, #1
 80195b4:	4632      	mov	r2, r6
 80195b6:	4649      	mov	r1, r9
 80195b8:	4640      	mov	r0, r8
 80195ba:	47d0      	blx	sl
 80195bc:	3001      	adds	r0, #1
 80195be:	d09b      	beq.n	80194f8 <_printf_i+0x164>
 80195c0:	3501      	adds	r5, #1
 80195c2:	68e3      	ldr	r3, [r4, #12]
 80195c4:	9903      	ldr	r1, [sp, #12]
 80195c6:	1a5b      	subs	r3, r3, r1
 80195c8:	42ab      	cmp	r3, r5
 80195ca:	dcf2      	bgt.n	80195b2 <_printf_i+0x21e>
 80195cc:	e7eb      	b.n	80195a6 <_printf_i+0x212>
 80195ce:	2500      	movs	r5, #0
 80195d0:	f104 0619 	add.w	r6, r4, #25
 80195d4:	e7f5      	b.n	80195c2 <_printf_i+0x22e>
 80195d6:	bf00      	nop
 80195d8:	0801d25d 	.word	0x0801d25d
 80195dc:	0801d26e 	.word	0x0801d26e

080195e0 <_read_r>:
 80195e0:	b538      	push	{r3, r4, r5, lr}
 80195e2:	4d07      	ldr	r5, [pc, #28]	; (8019600 <_read_r+0x20>)
 80195e4:	4604      	mov	r4, r0
 80195e6:	4608      	mov	r0, r1
 80195e8:	4611      	mov	r1, r2
 80195ea:	2200      	movs	r2, #0
 80195ec:	602a      	str	r2, [r5, #0]
 80195ee:	461a      	mov	r2, r3
 80195f0:	f7e8 f804 	bl	80015fc <_read>
 80195f4:	1c43      	adds	r3, r0, #1
 80195f6:	d102      	bne.n	80195fe <_read_r+0x1e>
 80195f8:	682b      	ldr	r3, [r5, #0]
 80195fa:	b103      	cbz	r3, 80195fe <_read_r+0x1e>
 80195fc:	6023      	str	r3, [r4, #0]
 80195fe:	bd38      	pop	{r3, r4, r5, pc}
 8019600:	20011cb0 	.word	0x20011cb0
 8019604:	00000000 	.word	0x00000000

08019608 <nan>:
 8019608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019610 <nan+0x8>
 801960c:	4770      	bx	lr
 801960e:	bf00      	nop
 8019610:	00000000 	.word	0x00000000
 8019614:	7ff80000 	.word	0x7ff80000

08019618 <__swbuf_r>:
 8019618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801961a:	460e      	mov	r6, r1
 801961c:	4614      	mov	r4, r2
 801961e:	4605      	mov	r5, r0
 8019620:	b118      	cbz	r0, 801962a <__swbuf_r+0x12>
 8019622:	6983      	ldr	r3, [r0, #24]
 8019624:	b90b      	cbnz	r3, 801962a <__swbuf_r+0x12>
 8019626:	f7fd f831 	bl	801668c <__sinit>
 801962a:	4b21      	ldr	r3, [pc, #132]	; (80196b0 <__swbuf_r+0x98>)
 801962c:	429c      	cmp	r4, r3
 801962e:	d12b      	bne.n	8019688 <__swbuf_r+0x70>
 8019630:	686c      	ldr	r4, [r5, #4]
 8019632:	69a3      	ldr	r3, [r4, #24]
 8019634:	60a3      	str	r3, [r4, #8]
 8019636:	89a3      	ldrh	r3, [r4, #12]
 8019638:	071a      	lsls	r2, r3, #28
 801963a:	d52f      	bpl.n	801969c <__swbuf_r+0x84>
 801963c:	6923      	ldr	r3, [r4, #16]
 801963e:	b36b      	cbz	r3, 801969c <__swbuf_r+0x84>
 8019640:	6923      	ldr	r3, [r4, #16]
 8019642:	6820      	ldr	r0, [r4, #0]
 8019644:	1ac0      	subs	r0, r0, r3
 8019646:	6963      	ldr	r3, [r4, #20]
 8019648:	b2f6      	uxtb	r6, r6
 801964a:	4283      	cmp	r3, r0
 801964c:	4637      	mov	r7, r6
 801964e:	dc04      	bgt.n	801965a <__swbuf_r+0x42>
 8019650:	4621      	mov	r1, r4
 8019652:	4628      	mov	r0, r5
 8019654:	f7fe fa60 	bl	8017b18 <_fflush_r>
 8019658:	bb30      	cbnz	r0, 80196a8 <__swbuf_r+0x90>
 801965a:	68a3      	ldr	r3, [r4, #8]
 801965c:	3b01      	subs	r3, #1
 801965e:	60a3      	str	r3, [r4, #8]
 8019660:	6823      	ldr	r3, [r4, #0]
 8019662:	1c5a      	adds	r2, r3, #1
 8019664:	6022      	str	r2, [r4, #0]
 8019666:	701e      	strb	r6, [r3, #0]
 8019668:	6963      	ldr	r3, [r4, #20]
 801966a:	3001      	adds	r0, #1
 801966c:	4283      	cmp	r3, r0
 801966e:	d004      	beq.n	801967a <__swbuf_r+0x62>
 8019670:	89a3      	ldrh	r3, [r4, #12]
 8019672:	07db      	lsls	r3, r3, #31
 8019674:	d506      	bpl.n	8019684 <__swbuf_r+0x6c>
 8019676:	2e0a      	cmp	r6, #10
 8019678:	d104      	bne.n	8019684 <__swbuf_r+0x6c>
 801967a:	4621      	mov	r1, r4
 801967c:	4628      	mov	r0, r5
 801967e:	f7fe fa4b 	bl	8017b18 <_fflush_r>
 8019682:	b988      	cbnz	r0, 80196a8 <__swbuf_r+0x90>
 8019684:	4638      	mov	r0, r7
 8019686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019688:	4b0a      	ldr	r3, [pc, #40]	; (80196b4 <__swbuf_r+0x9c>)
 801968a:	429c      	cmp	r4, r3
 801968c:	d101      	bne.n	8019692 <__swbuf_r+0x7a>
 801968e:	68ac      	ldr	r4, [r5, #8]
 8019690:	e7cf      	b.n	8019632 <__swbuf_r+0x1a>
 8019692:	4b09      	ldr	r3, [pc, #36]	; (80196b8 <__swbuf_r+0xa0>)
 8019694:	429c      	cmp	r4, r3
 8019696:	bf08      	it	eq
 8019698:	68ec      	ldreq	r4, [r5, #12]
 801969a:	e7ca      	b.n	8019632 <__swbuf_r+0x1a>
 801969c:	4621      	mov	r1, r4
 801969e:	4628      	mov	r0, r5
 80196a0:	f000 f81a 	bl	80196d8 <__swsetup_r>
 80196a4:	2800      	cmp	r0, #0
 80196a6:	d0cb      	beq.n	8019640 <__swbuf_r+0x28>
 80196a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80196ac:	e7ea      	b.n	8019684 <__swbuf_r+0x6c>
 80196ae:	bf00      	nop
 80196b0:	0801ceb8 	.word	0x0801ceb8
 80196b4:	0801ced8 	.word	0x0801ced8
 80196b8:	0801ce98 	.word	0x0801ce98

080196bc <__ascii_wctomb>:
 80196bc:	b149      	cbz	r1, 80196d2 <__ascii_wctomb+0x16>
 80196be:	2aff      	cmp	r2, #255	; 0xff
 80196c0:	bf85      	ittet	hi
 80196c2:	238a      	movhi	r3, #138	; 0x8a
 80196c4:	6003      	strhi	r3, [r0, #0]
 80196c6:	700a      	strbls	r2, [r1, #0]
 80196c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80196cc:	bf98      	it	ls
 80196ce:	2001      	movls	r0, #1
 80196d0:	4770      	bx	lr
 80196d2:	4608      	mov	r0, r1
 80196d4:	4770      	bx	lr
	...

080196d8 <__swsetup_r>:
 80196d8:	4b32      	ldr	r3, [pc, #200]	; (80197a4 <__swsetup_r+0xcc>)
 80196da:	b570      	push	{r4, r5, r6, lr}
 80196dc:	681d      	ldr	r5, [r3, #0]
 80196de:	4606      	mov	r6, r0
 80196e0:	460c      	mov	r4, r1
 80196e2:	b125      	cbz	r5, 80196ee <__swsetup_r+0x16>
 80196e4:	69ab      	ldr	r3, [r5, #24]
 80196e6:	b913      	cbnz	r3, 80196ee <__swsetup_r+0x16>
 80196e8:	4628      	mov	r0, r5
 80196ea:	f7fc ffcf 	bl	801668c <__sinit>
 80196ee:	4b2e      	ldr	r3, [pc, #184]	; (80197a8 <__swsetup_r+0xd0>)
 80196f0:	429c      	cmp	r4, r3
 80196f2:	d10f      	bne.n	8019714 <__swsetup_r+0x3c>
 80196f4:	686c      	ldr	r4, [r5, #4]
 80196f6:	89a3      	ldrh	r3, [r4, #12]
 80196f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80196fc:	0719      	lsls	r1, r3, #28
 80196fe:	d42c      	bmi.n	801975a <__swsetup_r+0x82>
 8019700:	06dd      	lsls	r5, r3, #27
 8019702:	d411      	bmi.n	8019728 <__swsetup_r+0x50>
 8019704:	2309      	movs	r3, #9
 8019706:	6033      	str	r3, [r6, #0]
 8019708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801970c:	81a3      	strh	r3, [r4, #12]
 801970e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019712:	e03e      	b.n	8019792 <__swsetup_r+0xba>
 8019714:	4b25      	ldr	r3, [pc, #148]	; (80197ac <__swsetup_r+0xd4>)
 8019716:	429c      	cmp	r4, r3
 8019718:	d101      	bne.n	801971e <__swsetup_r+0x46>
 801971a:	68ac      	ldr	r4, [r5, #8]
 801971c:	e7eb      	b.n	80196f6 <__swsetup_r+0x1e>
 801971e:	4b24      	ldr	r3, [pc, #144]	; (80197b0 <__swsetup_r+0xd8>)
 8019720:	429c      	cmp	r4, r3
 8019722:	bf08      	it	eq
 8019724:	68ec      	ldreq	r4, [r5, #12]
 8019726:	e7e6      	b.n	80196f6 <__swsetup_r+0x1e>
 8019728:	0758      	lsls	r0, r3, #29
 801972a:	d512      	bpl.n	8019752 <__swsetup_r+0x7a>
 801972c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801972e:	b141      	cbz	r1, 8019742 <__swsetup_r+0x6a>
 8019730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019734:	4299      	cmp	r1, r3
 8019736:	d002      	beq.n	801973e <__swsetup_r+0x66>
 8019738:	4630      	mov	r0, r6
 801973a:	f7ff fabb 	bl	8018cb4 <_free_r>
 801973e:	2300      	movs	r3, #0
 8019740:	6363      	str	r3, [r4, #52]	; 0x34
 8019742:	89a3      	ldrh	r3, [r4, #12]
 8019744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019748:	81a3      	strh	r3, [r4, #12]
 801974a:	2300      	movs	r3, #0
 801974c:	6063      	str	r3, [r4, #4]
 801974e:	6923      	ldr	r3, [r4, #16]
 8019750:	6023      	str	r3, [r4, #0]
 8019752:	89a3      	ldrh	r3, [r4, #12]
 8019754:	f043 0308 	orr.w	r3, r3, #8
 8019758:	81a3      	strh	r3, [r4, #12]
 801975a:	6923      	ldr	r3, [r4, #16]
 801975c:	b94b      	cbnz	r3, 8019772 <__swsetup_r+0x9a>
 801975e:	89a3      	ldrh	r3, [r4, #12]
 8019760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019768:	d003      	beq.n	8019772 <__swsetup_r+0x9a>
 801976a:	4621      	mov	r1, r4
 801976c:	4630      	mov	r0, r6
 801976e:	f000 f84d 	bl	801980c <__smakebuf_r>
 8019772:	89a0      	ldrh	r0, [r4, #12]
 8019774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019778:	f010 0301 	ands.w	r3, r0, #1
 801977c:	d00a      	beq.n	8019794 <__swsetup_r+0xbc>
 801977e:	2300      	movs	r3, #0
 8019780:	60a3      	str	r3, [r4, #8]
 8019782:	6963      	ldr	r3, [r4, #20]
 8019784:	425b      	negs	r3, r3
 8019786:	61a3      	str	r3, [r4, #24]
 8019788:	6923      	ldr	r3, [r4, #16]
 801978a:	b943      	cbnz	r3, 801979e <__swsetup_r+0xc6>
 801978c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019790:	d1ba      	bne.n	8019708 <__swsetup_r+0x30>
 8019792:	bd70      	pop	{r4, r5, r6, pc}
 8019794:	0781      	lsls	r1, r0, #30
 8019796:	bf58      	it	pl
 8019798:	6963      	ldrpl	r3, [r4, #20]
 801979a:	60a3      	str	r3, [r4, #8]
 801979c:	e7f4      	b.n	8019788 <__swsetup_r+0xb0>
 801979e:	2000      	movs	r0, #0
 80197a0:	e7f7      	b.n	8019792 <__swsetup_r+0xba>
 80197a2:	bf00      	nop
 80197a4:	2000002c 	.word	0x2000002c
 80197a8:	0801ceb8 	.word	0x0801ceb8
 80197ac:	0801ced8 	.word	0x0801ced8
 80197b0:	0801ce98 	.word	0x0801ce98

080197b4 <abort>:
 80197b4:	b508      	push	{r3, lr}
 80197b6:	2006      	movs	r0, #6
 80197b8:	f000 f8c0 	bl	801993c <raise>
 80197bc:	2001      	movs	r0, #1
 80197be:	f7e7 ff13 	bl	80015e8 <_exit>

080197c2 <__swhatbuf_r>:
 80197c2:	b570      	push	{r4, r5, r6, lr}
 80197c4:	460e      	mov	r6, r1
 80197c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197ca:	2900      	cmp	r1, #0
 80197cc:	b096      	sub	sp, #88	; 0x58
 80197ce:	4614      	mov	r4, r2
 80197d0:	461d      	mov	r5, r3
 80197d2:	da08      	bge.n	80197e6 <__swhatbuf_r+0x24>
 80197d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80197d8:	2200      	movs	r2, #0
 80197da:	602a      	str	r2, [r5, #0]
 80197dc:	061a      	lsls	r2, r3, #24
 80197de:	d410      	bmi.n	8019802 <__swhatbuf_r+0x40>
 80197e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80197e4:	e00e      	b.n	8019804 <__swhatbuf_r+0x42>
 80197e6:	466a      	mov	r2, sp
 80197e8:	f000 f8c4 	bl	8019974 <_fstat_r>
 80197ec:	2800      	cmp	r0, #0
 80197ee:	dbf1      	blt.n	80197d4 <__swhatbuf_r+0x12>
 80197f0:	9a01      	ldr	r2, [sp, #4]
 80197f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80197f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80197fa:	425a      	negs	r2, r3
 80197fc:	415a      	adcs	r2, r3
 80197fe:	602a      	str	r2, [r5, #0]
 8019800:	e7ee      	b.n	80197e0 <__swhatbuf_r+0x1e>
 8019802:	2340      	movs	r3, #64	; 0x40
 8019804:	2000      	movs	r0, #0
 8019806:	6023      	str	r3, [r4, #0]
 8019808:	b016      	add	sp, #88	; 0x58
 801980a:	bd70      	pop	{r4, r5, r6, pc}

0801980c <__smakebuf_r>:
 801980c:	898b      	ldrh	r3, [r1, #12]
 801980e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019810:	079d      	lsls	r5, r3, #30
 8019812:	4606      	mov	r6, r0
 8019814:	460c      	mov	r4, r1
 8019816:	d507      	bpl.n	8019828 <__smakebuf_r+0x1c>
 8019818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801981c:	6023      	str	r3, [r4, #0]
 801981e:	6123      	str	r3, [r4, #16]
 8019820:	2301      	movs	r3, #1
 8019822:	6163      	str	r3, [r4, #20]
 8019824:	b002      	add	sp, #8
 8019826:	bd70      	pop	{r4, r5, r6, pc}
 8019828:	ab01      	add	r3, sp, #4
 801982a:	466a      	mov	r2, sp
 801982c:	f7ff ffc9 	bl	80197c2 <__swhatbuf_r>
 8019830:	9900      	ldr	r1, [sp, #0]
 8019832:	4605      	mov	r5, r0
 8019834:	4630      	mov	r0, r6
 8019836:	f7fd f84f 	bl	80168d8 <_malloc_r>
 801983a:	b948      	cbnz	r0, 8019850 <__smakebuf_r+0x44>
 801983c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019840:	059a      	lsls	r2, r3, #22
 8019842:	d4ef      	bmi.n	8019824 <__smakebuf_r+0x18>
 8019844:	f023 0303 	bic.w	r3, r3, #3
 8019848:	f043 0302 	orr.w	r3, r3, #2
 801984c:	81a3      	strh	r3, [r4, #12]
 801984e:	e7e3      	b.n	8019818 <__smakebuf_r+0xc>
 8019850:	4b0d      	ldr	r3, [pc, #52]	; (8019888 <__smakebuf_r+0x7c>)
 8019852:	62b3      	str	r3, [r6, #40]	; 0x28
 8019854:	89a3      	ldrh	r3, [r4, #12]
 8019856:	6020      	str	r0, [r4, #0]
 8019858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801985c:	81a3      	strh	r3, [r4, #12]
 801985e:	9b00      	ldr	r3, [sp, #0]
 8019860:	6163      	str	r3, [r4, #20]
 8019862:	9b01      	ldr	r3, [sp, #4]
 8019864:	6120      	str	r0, [r4, #16]
 8019866:	b15b      	cbz	r3, 8019880 <__smakebuf_r+0x74>
 8019868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801986c:	4630      	mov	r0, r6
 801986e:	f000 f893 	bl	8019998 <_isatty_r>
 8019872:	b128      	cbz	r0, 8019880 <__smakebuf_r+0x74>
 8019874:	89a3      	ldrh	r3, [r4, #12]
 8019876:	f023 0303 	bic.w	r3, r3, #3
 801987a:	f043 0301 	orr.w	r3, r3, #1
 801987e:	81a3      	strh	r3, [r4, #12]
 8019880:	89a0      	ldrh	r0, [r4, #12]
 8019882:	4305      	orrs	r5, r0
 8019884:	81a5      	strh	r5, [r4, #12]
 8019886:	e7cd      	b.n	8019824 <__smakebuf_r+0x18>
 8019888:	08016625 	.word	0x08016625

0801988c <_realloc_r>:
 801988c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019890:	4680      	mov	r8, r0
 8019892:	4614      	mov	r4, r2
 8019894:	460e      	mov	r6, r1
 8019896:	b921      	cbnz	r1, 80198a2 <_realloc_r+0x16>
 8019898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801989c:	4611      	mov	r1, r2
 801989e:	f7fd b81b 	b.w	80168d8 <_malloc_r>
 80198a2:	b92a      	cbnz	r2, 80198b0 <_realloc_r+0x24>
 80198a4:	f7ff fa06 	bl	8018cb4 <_free_r>
 80198a8:	4625      	mov	r5, r4
 80198aa:	4628      	mov	r0, r5
 80198ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198b0:	f000 f882 	bl	80199b8 <_malloc_usable_size_r>
 80198b4:	4284      	cmp	r4, r0
 80198b6:	4607      	mov	r7, r0
 80198b8:	d802      	bhi.n	80198c0 <_realloc_r+0x34>
 80198ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80198be:	d812      	bhi.n	80198e6 <_realloc_r+0x5a>
 80198c0:	4621      	mov	r1, r4
 80198c2:	4640      	mov	r0, r8
 80198c4:	f7fd f808 	bl	80168d8 <_malloc_r>
 80198c8:	4605      	mov	r5, r0
 80198ca:	2800      	cmp	r0, #0
 80198cc:	d0ed      	beq.n	80198aa <_realloc_r+0x1e>
 80198ce:	42bc      	cmp	r4, r7
 80198d0:	4622      	mov	r2, r4
 80198d2:	4631      	mov	r1, r6
 80198d4:	bf28      	it	cs
 80198d6:	463a      	movcs	r2, r7
 80198d8:	f7fc ffad 	bl	8016836 <memcpy>
 80198dc:	4631      	mov	r1, r6
 80198de:	4640      	mov	r0, r8
 80198e0:	f7ff f9e8 	bl	8018cb4 <_free_r>
 80198e4:	e7e1      	b.n	80198aa <_realloc_r+0x1e>
 80198e6:	4635      	mov	r5, r6
 80198e8:	e7df      	b.n	80198aa <_realloc_r+0x1e>

080198ea <_raise_r>:
 80198ea:	291f      	cmp	r1, #31
 80198ec:	b538      	push	{r3, r4, r5, lr}
 80198ee:	4604      	mov	r4, r0
 80198f0:	460d      	mov	r5, r1
 80198f2:	d904      	bls.n	80198fe <_raise_r+0x14>
 80198f4:	2316      	movs	r3, #22
 80198f6:	6003      	str	r3, [r0, #0]
 80198f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80198fc:	bd38      	pop	{r3, r4, r5, pc}
 80198fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019900:	b112      	cbz	r2, 8019908 <_raise_r+0x1e>
 8019902:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019906:	b94b      	cbnz	r3, 801991c <_raise_r+0x32>
 8019908:	4620      	mov	r0, r4
 801990a:	f000 f831 	bl	8019970 <_getpid_r>
 801990e:	462a      	mov	r2, r5
 8019910:	4601      	mov	r1, r0
 8019912:	4620      	mov	r0, r4
 8019914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019918:	f000 b818 	b.w	801994c <_kill_r>
 801991c:	2b01      	cmp	r3, #1
 801991e:	d00a      	beq.n	8019936 <_raise_r+0x4c>
 8019920:	1c59      	adds	r1, r3, #1
 8019922:	d103      	bne.n	801992c <_raise_r+0x42>
 8019924:	2316      	movs	r3, #22
 8019926:	6003      	str	r3, [r0, #0]
 8019928:	2001      	movs	r0, #1
 801992a:	e7e7      	b.n	80198fc <_raise_r+0x12>
 801992c:	2400      	movs	r4, #0
 801992e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019932:	4628      	mov	r0, r5
 8019934:	4798      	blx	r3
 8019936:	2000      	movs	r0, #0
 8019938:	e7e0      	b.n	80198fc <_raise_r+0x12>
	...

0801993c <raise>:
 801993c:	4b02      	ldr	r3, [pc, #8]	; (8019948 <raise+0xc>)
 801993e:	4601      	mov	r1, r0
 8019940:	6818      	ldr	r0, [r3, #0]
 8019942:	f7ff bfd2 	b.w	80198ea <_raise_r>
 8019946:	bf00      	nop
 8019948:	2000002c 	.word	0x2000002c

0801994c <_kill_r>:
 801994c:	b538      	push	{r3, r4, r5, lr}
 801994e:	4d07      	ldr	r5, [pc, #28]	; (801996c <_kill_r+0x20>)
 8019950:	2300      	movs	r3, #0
 8019952:	4604      	mov	r4, r0
 8019954:	4608      	mov	r0, r1
 8019956:	4611      	mov	r1, r2
 8019958:	602b      	str	r3, [r5, #0]
 801995a:	f7e7 fe33 	bl	80015c4 <_kill>
 801995e:	1c43      	adds	r3, r0, #1
 8019960:	d102      	bne.n	8019968 <_kill_r+0x1c>
 8019962:	682b      	ldr	r3, [r5, #0]
 8019964:	b103      	cbz	r3, 8019968 <_kill_r+0x1c>
 8019966:	6023      	str	r3, [r4, #0]
 8019968:	bd38      	pop	{r3, r4, r5, pc}
 801996a:	bf00      	nop
 801996c:	20011cb0 	.word	0x20011cb0

08019970 <_getpid_r>:
 8019970:	f7e7 be20 	b.w	80015b4 <_getpid>

08019974 <_fstat_r>:
 8019974:	b538      	push	{r3, r4, r5, lr}
 8019976:	4d07      	ldr	r5, [pc, #28]	; (8019994 <_fstat_r+0x20>)
 8019978:	2300      	movs	r3, #0
 801997a:	4604      	mov	r4, r0
 801997c:	4608      	mov	r0, r1
 801997e:	4611      	mov	r1, r2
 8019980:	602b      	str	r3, [r5, #0]
 8019982:	f7e7 fe80 	bl	8001686 <_fstat>
 8019986:	1c43      	adds	r3, r0, #1
 8019988:	d102      	bne.n	8019990 <_fstat_r+0x1c>
 801998a:	682b      	ldr	r3, [r5, #0]
 801998c:	b103      	cbz	r3, 8019990 <_fstat_r+0x1c>
 801998e:	6023      	str	r3, [r4, #0]
 8019990:	bd38      	pop	{r3, r4, r5, pc}
 8019992:	bf00      	nop
 8019994:	20011cb0 	.word	0x20011cb0

08019998 <_isatty_r>:
 8019998:	b538      	push	{r3, r4, r5, lr}
 801999a:	4d06      	ldr	r5, [pc, #24]	; (80199b4 <_isatty_r+0x1c>)
 801999c:	2300      	movs	r3, #0
 801999e:	4604      	mov	r4, r0
 80199a0:	4608      	mov	r0, r1
 80199a2:	602b      	str	r3, [r5, #0]
 80199a4:	f7e7 fe7f 	bl	80016a6 <_isatty>
 80199a8:	1c43      	adds	r3, r0, #1
 80199aa:	d102      	bne.n	80199b2 <_isatty_r+0x1a>
 80199ac:	682b      	ldr	r3, [r5, #0]
 80199ae:	b103      	cbz	r3, 80199b2 <_isatty_r+0x1a>
 80199b0:	6023      	str	r3, [r4, #0]
 80199b2:	bd38      	pop	{r3, r4, r5, pc}
 80199b4:	20011cb0 	.word	0x20011cb0

080199b8 <_malloc_usable_size_r>:
 80199b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199bc:	1f18      	subs	r0, r3, #4
 80199be:	2b00      	cmp	r3, #0
 80199c0:	bfbc      	itt	lt
 80199c2:	580b      	ldrlt	r3, [r1, r0]
 80199c4:	18c0      	addlt	r0, r0, r3
 80199c6:	4770      	bx	lr

080199c8 <_init>:
 80199c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ca:	bf00      	nop
 80199cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199ce:	bc08      	pop	{r3}
 80199d0:	469e      	mov	lr, r3
 80199d2:	4770      	bx	lr

080199d4 <_fini>:
 80199d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199d6:	bf00      	nop
 80199d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199da:	bc08      	pop	{r3}
 80199dc:	469e      	mov	lr, r3
 80199de:	4770      	bx	lr
