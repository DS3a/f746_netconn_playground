
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003878  08019980  08019980  00029980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1f8  0801d1f8  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  0801d1f8  0801d1f8  0002d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d200  0801d200  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d200  0801d200  0002d200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d204  0801d204  0002d204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801d208  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  0801d408  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  0801d4a8  000302a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011974  20000340  0801d548  00030340  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011cb4  0801d548  00031cb4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   00031b16  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007636  00000000  00000000  00061e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022f0  00000000  00000000  000694c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002170  00000000  00000000  0006b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001233f  00000000  00000000  0006d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034f04  00000000  00000000  0007fc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00111460  00000000  00000000  000b4b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c5fc3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a2ec  00000000  00000000  001c6014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000340 	.word	0x20000340
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019968 	.word	0x08019968

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000344 	.word	0x20000344
 800020c:	08019968 	.word	0x08019968

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
}
 8000fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
}
 8000fca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SCB_EnableICache+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
}
 8000ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SCB_EnableDCache+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SCB_EnableDCache+0x84>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001040:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <SCB_EnableDCache+0x84>)
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ef      	bne.n	8001038 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableDCache+0x84>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableDCache+0x84>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001094:	f000 f952 	bl	800133c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001098:	f7ff ff90 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800109c:	f7ff ffb4 	bl	8001008 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fe06 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f832 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f89e 	bl	80011e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ac:	f004 fa6a 	bl	8005584 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <main+0x58>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <main+0x5c>)
 80010b6:	f004 faf7 	bl	80056a8 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <main+0x60>)
 80010be:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <main+0x64>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <main+0x68>)
 80010c6:	f004 faef 	bl	80056a8 <osThreadNew>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <main+0x6c>)
 80010ce:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <main+0x70>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <main+0x74>)
 80010d6:	f004 fae7 	bl	80056a8 <osThreadNew>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <main+0x78>)
 80010de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e0:	f004 fa84 	bl	80055ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x54>
 80010e6:	bf00      	nop
 80010e8:	0801cb68 	.word	0x0801cb68
 80010ec:	080012e1 	.word	0x080012e1
 80010f0:	2000035c 	.word	0x2000035c
 80010f4:	0801cb8c 	.word	0x0801cb8c
 80010f8:	080012f9 	.word	0x080012f9
 80010fc:	20000360 	.word	0x20000360
 8001100:	0801cbb0 	.word	0x0801cbb0
 8001104:	08001319 	.word	0x08001319
 8001108:	20000364 	.word	0x20000364

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f015 fb83 	bl	8016826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <SystemClock_Config+0xd4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <SystemClock_Config+0xd4>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <SystemClock_Config+0xd4>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <SystemClock_Config+0xd8>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemClock_Config+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001174:	2319      	movs	r3, #25
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001178:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117e:	2302      	movs	r3, #2
 8001180:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fc26 	bl	80039dc <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001196:	f000 f911 	bl	80013bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800119a:	f002 fbcf 	bl	800393c <HAL_PWREx_EnableOverDrive>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011a4:	f000 f90a 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2107      	movs	r1, #7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 feac 	bl	8003f24 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011d2:	f000 f8f3 	bl	80013bc <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3750      	adds	r7, #80	; 0x50
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a34      	ldr	r2, [pc, #208]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MX_GPIO_Init+0xec>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <MX_GPIO_Init+0xec>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <MX_GPIO_Init+0xec>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xec>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <MX_GPIO_Init+0xec>)
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_GPIO_Init+0xec>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_GPIO_Init+0xf0>)
 800127e:	f002 fb29 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_GPIO_Init+0xf4>)
 800128a:	f002 fb23 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800128e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0xf0>)
 80012a8:	f002 f968 	bl	800357c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0xf4>)
 80012c6:	f002 f959 	bl	800357c <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800

080012e0 <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80012e8:	f003 fb0a 	bl	8004900 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 80012ec:	f000 fb2e 	bl	800194c <tcpclient_init>
  for (;;) {
    osDelay(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f004 fa7f 	bl	80057f4 <osDelay>
 80012f6:	e7fb      	b.n	80012f0 <start_conn_handler+0x10>

080012f8 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    (*del)*=100;
    int dela = (int)(*del);
    if (dela == 0) {
    	dela = 10;
    }*/
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <start_motor_control+0x1c>)
 8001306:	f002 fafe 	bl	8003906 <HAL_GPIO_TogglePin>
    osDelay(100);
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f004 fa72 	bl	80057f4 <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001310:	e7f6      	b.n	8001300 <start_motor_control+0x8>
 8001312:	bf00      	nop
 8001314:	40020400 	.word	0x40020400

08001318 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 8001320:	f003 fae4 	bl	80048ec <get_static_netif>
 8001324:	4603      	mov	r3, r0
 8001326:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f003 fe8b 	bl	8005044 <ethernetif_input>
  sys_check_timeouts();
 800132e:	f012 fc3d 	bl	8013bac <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f004 fa5e 	bl	80057f4 <osDelay>
 8001338:	e7fb      	b.n	8001332 <start_tcp_thread+0x1a>
	...

0800133c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800134e:	f000 fdeb 	bl	8001f28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001352:	2301      	movs	r3, #1
 8001354:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001356:	2300      	movs	r3, #0
 8001358:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MPU_Config+0x58>)
 800135c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800135e:	230e      	movs	r3, #14
 8001360:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001362:	2300      	movs	r3, #0
 8001364:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001366:	2301      	movs	r3, #1
 8001368:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800136a:	2303      	movs	r3, #3
 800136c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800136e:	2301      	movs	r3, #1
 8001370:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001372:	2301      	movs	r3, #1
 8001374:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800137e:	463b      	mov	r3, r7
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fe09 	bl	8001f98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001386:	2004      	movs	r0, #4
 8001388:	f000 fde6 	bl	8001f58 <HAL_MPU_Enable>

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20010000 	.word	0x20010000

08001398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013aa:	f000 fc97 	bl	8001cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_MspInit+0x4c>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	210f      	movs	r1, #15
 8001402:	f06f 0001 	mvn.w	r0, #1
 8001406:	f000 fd65 	bl	8001ed4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HAL_InitTick+0xd0>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	4a2e      	ldr	r2, [pc, #184]	; (80014e8 <HAL_InitTick+0xd0>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6453      	str	r3, [r2, #68]	; 0x44
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_InitTick+0xd0>)
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001440:	f107 020c 	add.w	r2, r7, #12
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ff3c 	bl	80042c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001450:	f002 ff26 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8001454:	4603      	mov	r3, r0
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_InitTick+0xd4>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	3b01      	subs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_InitTick+0xd8>)
 800146a:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_InitTick+0xdc>)
 800146c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_InitTick+0xd8>)
 8001470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_InitTick+0xd8>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_InitTick+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_InitTick+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_InitTick+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800148e:	4818      	ldr	r0, [pc, #96]	; (80014f0 <HAL_InitTick+0xd8>)
 8001490:	f002 ff4c 	bl	800432c <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800149a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11b      	bne.n	80014da <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <HAL_InitTick+0xd8>)
 80014a4:	f002 ffa4 	bl	80043f0 <HAL_TIM_Base_Start_IT>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d111      	bne.n	80014da <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014b6:	2019      	movs	r0, #25
 80014b8:	f000 fd28 	bl	8001f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	d808      	bhi.n	80014d4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80014c2:	2200      	movs	r2, #0
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	2019      	movs	r0, #25
 80014c8:	f000 fd04 	bl	8001ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_InitTick+0xe0>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e002      	b.n	80014da <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3730      	adds	r7, #48	; 0x30
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	20000368 	.word	0x20000368
 80014f4:	40010000 	.word	0x40010000
 80014f8:	20000004 	.word	0x20000004

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800152e:	f002 ffd7 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000368 	.word	0x20000368

0800153c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <ETH_IRQHandler+0x10>)
 8001542:	f001 f947 	bl	80027d4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20004f9c 	.word	0x20004f9c

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <_kill+0x20>)
 800156c:	2216      	movs	r2, #22
 800156e:	601a      	str	r2, [r3, #0]
	return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20011cb0 	.word	0x20011cb0

08001584 <_exit>:

void _exit (int status)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800158c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ffe5 	bl	8001560 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001596:	e7fe      	b.n	8001596 <_exit+0x12>

08001598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
	}

return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e009      	b.n	80015f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf1      	blt.n	80015e4 <_write+0x12>
	}
	return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001632:	605a      	str	r2, [r3, #4]
	return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_isatty>:

int _isatty(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return 1;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d205      	bcs.n	80016b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <_sbrk+0x6c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	20050000 	.word	0x20050000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	200003b4 	.word	0x200003b4
 80016dc:	20011cb8 	.word	0x20011cb8
 80016e0:	20011cb0 	.word	0x20011cb0

080016e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <SystemInit+0x24>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <SystemInit+0x24>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <SystemInit+0x28>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	40023800 	.word	0x40023800

08001710 <fun>:
int indx = 0;
float linear_x=0, angular_z=0;


float *fun(char string[])
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    static float res[10];
    char *token;
    int count=0;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
    token = strtok(string,",");
 800171c:	4913      	ldr	r1, [pc, #76]	; (800176c <fun+0x5c>)
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f016 f8a8 	bl	8017874 <strtok>
 8001724:	6178      	str	r0, [r7, #20]
    float x;
    // res[0] = atof(token);
    while (token)
 8001726:	e018      	b.n	800175a <fun+0x4a>
    {
        x = atof(token);
 8001728:	6978      	ldr	r0, [r7, #20]
 800172a:	f014 ff23 	bl	8016574 <atof>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa39 	bl	8000bac <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	60fb      	str	r3, [r7, #12]
        res[count] = x;
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <fun+0x60>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]
        // printf("%f ",x);
        count+=1;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3301      	adds	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
        token = strtok(NULL,",");
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <fun+0x5c>)
 8001752:	2000      	movs	r0, #0
 8001754:	f016 f88e 	bl	8017874 <strtok>
 8001758:	6178      	str	r0, [r7, #20]
    while (token)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e3      	bne.n	8001728 <fun+0x18>
    }
    return res;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <fun+0x60>)
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	080199ac 	.word	0x080199ac
 8001770:	2000056c 	.word	0x2000056c

08001774 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2010      	movs	r0, #16
 8001782:	f007 ff51 	bl	8009628 <netconn_new_with_proto_and_callback>
 8001786:	4603      	mov	r3, r0
 8001788:	4a44      	ldr	r2, [pc, #272]	; (800189c <tcpinit_thread+0x128>)
 800178a:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <tcpinit_thread+0x128>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d07e      	beq.n	8001892 <tcpinit_thread+0x11e>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <tcpinit_thread+0x128>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	220a      	movs	r2, #10
 800179a:	4941      	ldr	r1, [pc, #260]	; (80018a0 <tcpinit_thread+0x12c>)
 800179c:	4618      	mov	r0, r3
 800179e:	f007 fffd 	bl	800979c <netconn_bind>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d16c      	bne.n	8001888 <tcpinit_thread+0x114>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <tcpinit_thread+0x130>)
 80017b0:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <tcpinit_thread+0x134>)
 80017b2:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <tcpinit_thread+0x138>)
 80017b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017ba:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <tcpinit_thread+0x128>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <tcpinit_thread+0x138>)
 80017c2:	8812      	ldrh	r2, [r2, #0]
 80017c4:	4937      	ldr	r1, [pc, #220]	; (80018a4 <tcpinit_thread+0x130>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f008 f820 	bl	800980c <netconn_connect>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 80017d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d14c      	bne.n	8001872 <tcpinit_thread+0xfe>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 80017d8:	4835      	ldr	r0, [pc, #212]	; (80018b0 <tcpinit_thread+0x13c>)
 80017da:	f014 fe17 	bl	801640c <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <tcpinit_thread+0x128>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <tcpinit_thread+0x140>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f008 f9ad 	bl	8009b44 <netconn_recv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f6      	bne.n	80017de <tcpinit_thread+0x6a>
					{
						/* Extract the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <tcpinit_thread+0x140>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3308      	adds	r3, #8
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <tcpinit_thread+0x144>)
 80017f8:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <tcpinit_thread+0x140>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	899a      	ldrh	r2, [r3, #12]
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <tcpinit_thread+0x148>)
 8001802:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <tcpinit_thread+0x140>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <tcpinit_thread+0x140>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	895b      	ldrh	r3, [r3, #10]
 8001814:	461a      	mov	r2, r3
 8001816:	482a      	ldr	r0, [pc, #168]	; (80018c0 <tcpinit_thread+0x14c>)
 8001818:	f015 f9e9 	bl	8016bee <strncpy>

							float *linx = fun(msgc);
 800181c:	4828      	ldr	r0, [pc, #160]	; (80018c0 <tcpinit_thread+0x14c>)
 800181e:	f7ff ff77 	bl	8001710 <fun>
 8001822:	60b8      	str	r0, [r7, #8]
							linear_x = *(linx);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <tcpinit_thread+0x150>)
 800182a:	6013      	str	r3, [r2, #0]
							angular_z = *(linx+1);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <tcpinit_thread+0x154>)
 8001832:	6013      	str	r3, [r2, #0]
							// Or modify the message received, so that we can send it back to the server
							sprintf (smsgc, "Server: ", msgc);
 8001834:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <tcpinit_thread+0x14c>)
 8001836:	4925      	ldr	r1, [pc, #148]	; (80018cc <tcpinit_thread+0x158>)
 8001838:	4825      	ldr	r0, [pc, #148]	; (80018d0 <tcpinit_thread+0x15c>)
 800183a:	f015 f961 	bl	8016b00 <siprintf>

							// semaphore must be taken before accessing the tcpsend function
							sys_arch_sem_wait(&tcpsem, 5);
 800183e:	2105      	movs	r1, #5
 8001840:	481b      	ldr	r0, [pc, #108]	; (80018b0 <tcpinit_thread+0x13c>)
 8001842:	f014 fdb2 	bl	80163aa <sys_arch_sem_wait>

							// send the data to the TCP Server
							tcpsend (smsgc);
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <tcpinit_thread+0x15c>)
 8001848:	f000 f844 	bl	80018d4 <tcpsend>

							memset (msgc, '\0', 100);  // clear the buffer
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	2100      	movs	r1, #0
 8001850:	481b      	ldr	r0, [pc, #108]	; (80018c0 <tcpinit_thread+0x14c>)
 8001852:	f014 ffe8 	bl	8016826 <memset>
						}
						while (netbuf_next(buf) > 0);
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <tcpinit_thread+0x140>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f009 fe20 	bl	800b4a0 <netbuf_next>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	dcce      	bgt.n	8001804 <tcpinit_thread+0x90>

						netbuf_delete(buf);
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <tcpinit_thread+0x140>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f009 fdf8 	bl	800b460 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001870:	e7b5      	b.n	80017de <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <tcpinit_thread+0x128>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f008 fad2 	bl	8009e20 <netconn_close>
				netconn_delete(conn);
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <tcpinit_thread+0x128>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f007 ff6f 	bl	8009764 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001886:	e004      	b.n	8001892 <tcpinit_thread+0x11e>
			netconn_delete(conn);
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <tcpinit_thread+0x128>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f007 ff69 	bl	8009764 <netconn_delete>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003b8 	.word	0x200003b8
 80018a0:	0801ccfc 	.word	0x0801ccfc
 80018a4:	200003c4 	.word	0x200003c4
 80018a8:	01002a0a 	.word	0x01002a0a
 80018ac:	200003ca 	.word	0x200003ca
 80018b0:	20000568 	.word	0x20000568
 80018b4:	200003bc 	.word	0x200003bc
 80018b8:	200003c0 	.word	0x200003c0
 80018bc:	200003c8 	.word	0x200003c8
 80018c0:	200003cc 	.word	0x200003cc
 80018c4:	20000560 	.word	0x20000560
 80018c8:	20000564 	.word	0x20000564
 80018cc:	080199b0 	.word	0x080199b0
 80018d0:	20000494 	.word	0x20000494

080018d4 <tcpsend>:

void tcpsend (char *data)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <tcpsend+0x30>)
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7fe fc95 	bl	8000210 <strlen>
 80018e6:	4602      	mov	r2, r0
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4620      	mov	r0, r4
 80018f2:	f008 f993 	bl	8009c1c <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <tcpsend+0x34>)
 80018f8:	f014 fd88 	bl	801640c <sys_sem_signal>
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	200003b8 	.word	0x200003b8
 8001908:	20000568 	.word	0x20000568

0800190c <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx);
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <tcpsend_thread+0x30>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4909      	ldr	r1, [pc, #36]	; (8001940 <tcpsend_thread+0x34>)
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <tcpsend_thread+0x38>)
 800191e:	f015 f8ef 	bl	8016b00 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
		sys_arch_sem_wait(&tcpsem, 50);
 8001922:	2132      	movs	r1, #50	; 0x32
 8001924:	4808      	ldr	r0, [pc, #32]	; (8001948 <tcpsend_thread+0x3c>)
 8001926:	f014 fd40 	bl	80163aa <sys_arch_sem_wait>
		// send the data to the server
		tcpsend(smsgc);
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <tcpsend_thread+0x38>)
 800192c:	f7ff ffd2 	bl	80018d4 <tcpsend>
		osDelay(500);
 8001930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001934:	f003 ff5e 	bl	80057f4 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx);
 8001938:	e7ec      	b.n	8001914 <tcpsend_thread+0x8>
 800193a:	bf00      	nop
 800193c:	2000055c 	.word	0x2000055c
 8001940:	080199bc 	.word	0x080199bc
 8001944:	20000494 	.word	0x20000494
 8001948:	20000568 	.word	0x20000568

0800194c <tcpclient_init>:




void tcpclient_init (void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <tcpclient_init+0x3c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f014 fd01 	bl	8016360 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 800195e:	2318      	movs	r3, #24
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001966:	2200      	movs	r2, #0
 8001968:	4908      	ldr	r1, [pc, #32]	; (800198c <tcpclient_init+0x40>)
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <tcpclient_init+0x44>)
 800196c:	f014 fdc4 	bl	80164f8 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001970:	2318      	movs	r3, #24
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001978:	2200      	movs	r2, #0
 800197a:	4906      	ldr	r1, [pc, #24]	; (8001994 <tcpclient_init+0x48>)
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <tcpclient_init+0x4c>)
 800197e:	f014 fdbb 	bl	80164f8 <sys_thread_new>
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000568 	.word	0x20000568
 800198c:	08001775 	.word	0x08001775
 8001990:	080199d0 	.word	0x080199d0
 8001994:	0800190d 	.word	0x0800190d
 8001998:	080199e0 	.word	0x080199e0

0800199c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019a2:	490e      	ldr	r1, [pc, #56]	; (80019dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a4:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b8:	4c0b      	ldr	r4, [pc, #44]	; (80019e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c6:	f7ff fe8d 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f014 fecd 	bl	8016768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff fb5f 	bl	8001090 <main>
  bx  lr    
 80019d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80019e0:	0801d208 	.word	0x0801d208
  ldr r2, =_sbss
 80019e4:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 80019e8:	20011cb4 	.word	0x20011cb4

080019ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC_IRQHandler>

080019ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <LAN8742_RegisterBusIO+0x28>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <LAN8742_RegisterBusIO+0x28>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <LAN8742_RegisterBusIO+0x28>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1a:	e014      	b.n	8001a46 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d17c      	bne.n	8001b6c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e01c      	b.n	8001ac6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f107 0208 	add.w	r2, r7, #8
 8001a94:	2112      	movs	r1, #18
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	4798      	blx	r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da03      	bge.n	8001aa8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001aa0:	f06f 0304 	mvn.w	r3, #4
 8001aa4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001aa6:	e00b      	b.n	8001ac0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d105      	bne.n	8001ac0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
         break;
 8001abe:	e005      	b.n	8001acc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b1f      	cmp	r3, #31
 8001aca:	d9df      	bls.n	8001a8c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b1f      	cmp	r3, #31
 8001ad2:	d902      	bls.n	8001ada <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ad4:	f06f 0302 	mvn.w	r3, #2
 8001ad8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d145      	bne.n	8001b6c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6810      	ldr	r0, [r2, #0]
 8001ae8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aec:	2100      	movs	r1, #0
 8001aee:	4798      	blx	r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db37      	blt.n	8001b66 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6810      	ldr	r0, [r2, #0]
 8001afe:	f107 0208 	add.w	r2, r7, #8
 8001b02:	2100      	movs	r1, #0
 8001b04:	4798      	blx	r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db28      	blt.n	8001b5e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4798      	blx	r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b16:	e01c      	b.n	8001b52 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4798      	blx	r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b2a:	d80e      	bhi.n	8001b4a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6810      	ldr	r0, [r2, #0]
 8001b34:	f107 0208 	add.w	r2, r7, #8
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4798      	blx	r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da07      	bge.n	8001b52 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001b42:	f06f 0304 	mvn.w	r3, #4
 8001b46:	613b      	str	r3, [r7, #16]
                 break;
 8001b48:	e010      	b.n	8001b6c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001b4a:	f06f 0301 	mvn.w	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
               break;
 8001b50:	e00c      	b.n	8001b6c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1dd      	bne.n	8001b18 <LAN8742_Init+0xc6>
 8001b5c:	e006      	b.n	8001b6c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001b5e:	f06f 0304 	mvn.w	r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	e002      	b.n	8001b6c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001b66:	f06f 0303 	mvn.w	r3, #3
 8001b6a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d112      	bne.n	8001b98 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	4798      	blx	r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001b7c:	bf00      	nop
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4798      	blx	r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b90:	d9f5      	bls.n	8001b7e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001b98:	693b      	ldr	r3, [r7, #16]
 }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6810      	ldr	r0, [r2, #0]
 8001bb6:	f107 020c 	add.w	r2, r7, #12
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da02      	bge.n	8001bca <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bc4:	f06f 0304 	mvn.w	r3, #4
 8001bc8:	e06e      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6810      	ldr	r0, [r2, #0]
 8001bd2:	f107 020c 	add.w	r2, r7, #12
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4798      	blx	r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da02      	bge.n	8001be6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001be0:	f06f 0304 	mvn.w	r3, #4
 8001be4:	e060      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e059      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6810      	ldr	r0, [r2, #0]
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	2100      	movs	r1, #0
 8001c02:	4798      	blx	r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da02      	bge.n	8001c10 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c0a:	f06f 0304 	mvn.w	r3, #4
 8001c0e:	e04b      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11b      	bne.n	8001c52 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <LAN8742_GetLinkState+0x90>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e03a      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e033      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e02c      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e02a      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6810      	ldr	r0, [r2, #0]
 8001c5a:	f107 020c 	add.w	r2, r7, #12
 8001c5e:	211f      	movs	r1, #31
 8001c60:	4798      	blx	r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da02      	bge.n	8001c6e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001c68:	f06f 0304 	mvn.w	r3, #4
 8001c6c:	e01c      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c78:	2306      	movs	r3, #6
 8001c7a:	e015      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 031c 	and.w	r3, r3, #28
 8001c82:	2b18      	cmp	r3, #24
 8001c84:	d101      	bne.n	8001c8a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c86:	2302      	movs	r3, #2
 8001c88:	e00e      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 031c 	and.w	r3, r3, #28
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d101      	bne.n	8001c98 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e007      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 031c 	and.w	r3, r3, #28
 8001c9e:	2b14      	cmp	r3, #20
 8001ca0:	d101      	bne.n	8001ca6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e000      	b.n	8001ca8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ca6:	2305      	movs	r3, #5
    }				
  }
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_Init+0x28>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_Init+0x28>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f8fc 	bl	8001ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f7ff fba6 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fb7c 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	20000594 	.word	0x20000594

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000594 	.word	0x20000594

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008

08001d64 <__NVIC_SetPriorityGrouping>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	05fa0000 	.word	0x05fa0000

08001dac <__NVIC_GetPriorityGrouping>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ff4c 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee6:	f7ff ff61 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	6978      	ldr	r0, [r7, #20]
 8001ef2:	f7ff ffb1 	bl	8001e58 <NVIC_EncodePriority>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff80 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff54 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f2c:	f3bf 8f5f 	dmb	sy
}
 8001f30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_MPU_Disable+0x28>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_MPU_Disable+0x28>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_MPU_Disable+0x2c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	e000ed90 	.word	0xe000ed90

08001f58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_MPU_Enable+0x38>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_MPU_Enable+0x3c>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_MPU_Enable+0x3c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f76:	f3bf 8f4f 	dsb	sy
}
 8001f7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f7c:	f3bf 8f6f 	isb	sy
}
 8001f80:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed90 	.word	0xe000ed90
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	785a      	ldrb	r2, [r3, #1]
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_MPU_ConfigRegion+0x84>)
 8001fa6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d029      	beq.n	8002004 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001fb0:	4a1a      	ldr	r2, [pc, #104]	; (800201c <HAL_MPU_ConfigRegion+0x84>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7adb      	ldrb	r3, [r3, #11]
 8001fc2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7a9b      	ldrb	r3, [r3, #10]
 8001fca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7b5b      	ldrb	r3, [r3, #13]
 8001fd2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7b9b      	ldrb	r3, [r3, #14]
 8001fda:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7bdb      	ldrb	r3, [r3, #15]
 8001fe2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fe4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7a5b      	ldrb	r3, [r3, #9]
 8001fea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7a1b      	ldrb	r3, [r3, #8]
 8001ff2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ff4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ffe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002000:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002002:	e005      	b.n	8002010 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_MPU_ConfigRegion+0x84>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_MPU_ConfigRegion+0x84>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed90 	.word	0xe000ed90

08002020 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06a      	b.n	8002108 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2223      	movs	r2, #35	; 0x23
 8002040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f003 f87d 	bl	8005144 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_ETH_Init+0xf0>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a30      	ldr	r2, [pc, #192]	; (8002110 <HAL_ETH_Init+0xf0>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_ETH_Init+0xf0>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_ETH_Init+0xf4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a2b      	ldr	r2, [pc, #172]	; (8002114 <HAL_ETH_Init+0xf4>)
 8002068:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800206c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_ETH_Init+0xf4>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <HAL_ETH_Init+0xf4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_ETH_Init+0xf4>)
 800207e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002098:	f7ff fe34 	bl	8001d04 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800209e:	e011      	b.n	80020c4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020a0:	f7ff fe30 	bl	8001d04 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ae:	d909      	bls.n	80020c4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	22e0      	movs	r2, #224	; 0xe0
 80020bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e021      	b.n	8002108 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e4      	bne.n	80020a0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 ffac 	bl	8003034 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f001 f853 	bl	8003188 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f001 f8a9 	bl	800323a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	461a      	mov	r2, r3
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f001 f811 	bl	8003118 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2210      	movs	r2, #16
 8002102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800

08002118 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002126:	2b10      	cmp	r3, #16
 8002128:	d150      	bne.n	80021cc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2223      	movs	r2, #35	; 0x23
 800212e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2204      	movs	r2, #4
 8002136:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fa7b 	bl	8002634 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0208 	orr.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff fde0 	bl	8001d1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0204 	orr.w	r2, r2, #4
 8002172:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff fdcd 	bl	8001d1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fdf3 	bl	8002d76 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021a6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021be:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2223      	movs	r2, #35	; 0x23
 80021c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d17b      	bne.n	80022e2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2223      	movs	r2, #35	; 0x23
 80021ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_ETH_Start_IT+0x114>)
 8002216:	430b      	orrs	r3, r1
 8002218:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800222c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2204      	movs	r2, #4
 8002234:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9fc 	bl	8002634 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fd61 	bl	8001d1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0204 	orr.w	r2, r2, #4
 8002270:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800227a:	2001      	movs	r0, #1
 800227c:	f7ff fd4e 	bl	8001d1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fd74 	bl	8002d76 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022a4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022bc:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	69d9      	ldr	r1, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_ETH_Start_IT+0x118>)
 80022ce:	430b      	orrs	r3, r1
 80022d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022d4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2223      	movs	r2, #35	; 0x23
 80022da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	00020060 	.word	0x00020060
 80022f0:	0001a0c1 	.word	0x0001a0c1

080022f4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002302:	2b23      	cmp	r3, #35	; 0x23
 8002304:	d16e      	bne.n	80023e4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2223      	movs	r2, #35	; 0x23
 800230a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	69d9      	ldr	r1, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_ETH_Stop_IT+0xfc>)
 800231e:	400b      	ands	r3, r1
 8002320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002324:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002338:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800233c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	f023 0302 	bic.w	r3, r3, #2
 8002350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002354:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0204 	bic.w	r2, r2, #4
 8002364:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800236e:	2001      	movs	r0, #1
 8002370:	f7ff fcd4 	bl	8001d1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fcfa 	bl	8002d76 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0208 	bic.w	r2, r2, #8
 8002390:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800239a:	2001      	movs	r0, #1
 800239c:	f7ff fcbe 	bl	8001d1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e00e      	b.n	80023cc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	3212      	adds	r2, #18
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d9ed      	bls.n	80023ae <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2210      	movs	r2, #16
 80023dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	fffe5f3e 	.word	0xfffe5f3e

080023f4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e045      	b.n	80024a4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800241e:	2b23      	cmp	r3, #35	; 0x23
 8002420:	d13f      	bne.n	80024a2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800242a:	2201      	movs	r2, #1
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 ff70 	bl	8003314 <ETH_Prepare_Tx_Descriptors>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e02a      	b.n	80024a4 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800244e:	f3bf 8f4f 	dsb	sy
}
 8002452:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	2b03      	cmp	r3, #3
 8002464:	d904      	bls.n	8002470 <HAL_ETH_Transmit_IT+0x7c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	1f1a      	subs	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248a:	461a      	mov	r2, r3
 800248c:	2304      	movs	r3, #4
 800248e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	461a      	mov	r2, r3
 800249a:	2300      	movs	r3, #0
 800249c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0a8      	b.n	800262a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	2b23      	cmp	r3, #35	; 0x23
 80024e0:	d001      	beq.n	80024e6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0a1      	b.n	800262a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	3212      	adds	r2, #18
 80024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	f1c3 0304 	rsb	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002502:	e06a      	b.n	80025da <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_ETH_ReadData+0x88>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d040      	beq.n	80025b6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002568:	3b04      	subs	r3, #4
 800256a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002590:	461a      	mov	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f002 ffa1 	bl	80054dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	441a      	add	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d902      	bls.n	80025c8 <HAL_ETH_ReadData+0x11c>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b04      	subs	r3, #4
 80025c6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	3212      	adds	r2, #18
 80025ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db06      	blt.n	80025f0 <HAL_ETH_ReadData+0x144>
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d202      	bcs.n	80025f0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d089      	beq.n	8002504 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f815 	bl	8002634 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002640:	2301      	movs	r3, #1
 8002642:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002648:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	3212      	adds	r2, #18
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800265c:	e040      	b.n	80026e0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d112      	bne.n	800268c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	4618      	mov	r0, r3
 800266c:	f002 ff06 	bl	800547c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	74fb      	strb	r3, [r7, #19]
 800267a:	e007      	b.n	800268c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	461a      	mov	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	461a      	mov	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d026      	beq.n	80026e0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <ETH_UpdateDescriptor+0xe4>)
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	e003      	b.n	80026aa <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80026a8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80026aa:	f3bf 8f5f 	dmb	sy
}
 80026ae:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d902      	bls.n	80026ce <ETH_UpdateDescriptor+0x9a>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3b04      	subs	r3, #4
 80026cc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	3212      	adds	r2, #18
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	617b      	str	r3, [r7, #20]
      desccount--;
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	3b01      	subs	r3, #1
 80026de:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <ETH_UpdateDescriptor+0xb8>
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1b8      	bne.n	800265e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d00c      	beq.n	8002710 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fe:	461a      	mov	r2, r3
 8002700:	2300      	movs	r3, #0
 8002702:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	800045f8 	.word	0x800045f8

0800271c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3318      	adds	r3, #24
 8002728:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800273a:	e03f      	b.n	80027bc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800273c:	2301      	movs	r3, #1
 800273e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3b01      	subs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3304      	adds	r3, #4
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	3301      	adds	r3, #1
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002764:	7bbb      	ldrb	r3, [r7, #14]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d028      	beq.n	80027bc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db1b      	blt.n	80027b8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3304      	adds	r3, #4
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fee7 	bl	8005560 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	3304      	adds	r3, #4
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027b6:	e001      	b.n	80027bc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_ETH_ReleaseTxPacket+0xac>
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1b9      	bne.n	800273c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d112      	bne.n	8002814 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d109      	bne.n	8002814 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002808:	461a      	mov	r2, r3
 800280a:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_ETH_IRQHandler+0x178>)
 800280c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f002 f9fa 	bl	8004c08 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d113      	bne.n	800284e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10a      	bne.n	800284e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002840:	461a      	mov	r2, r3
 8002842:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002846:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f002 f9ed 	bl	8004c28 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002860:	d14c      	bne.n	80028fc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002874:	d142      	bne.n	80028fc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f043 0208 	orr.w	r2, r3, #8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	d11a      	bne.n	80028d0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_ETH_IRQHandler+0x17c>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80028c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	22e0      	movs	r2, #224	; 0xe0
 80028ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80028ce:	e012      	b.n	80028f6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	f248 6380 	movw	r3, #34432	; 0x8680
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	461a      	mov	r2, r3
 80028f0:	f248 6380 	movw	r3, #34432	; 0x8680
 80028f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f002 f9a6 	bl	8004c48 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10e      	bne.n	8002928 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f81c 	bl	8002958 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_ETH_IRQHandler+0x180>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_ETH_IRQHandler+0x180>)
 8002936:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800293a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f815 	bl	800296c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	00010040 	.word	0x00010040
 8002950:	007e2000 	.word	0x007e2000
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 031c 	and.w	r3, r3, #28
 800299c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	02db      	lsls	r3, r3, #11
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0302 	bic.w	r3, r3, #2
 80029be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80029d0:	f7ff f998 	bl	8001d04 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029d6:	e00d      	b.n	80029f4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80029d8:	f7ff f994 	bl	8001d04 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d301      	bcc.n	80029ec <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e010      	b.n	8002a0e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ec      	bne.n	80029d8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 031c 	and.w	r3, r3, #28
 8002a32:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	02db      	lsls	r3, r3, #11
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	019b      	lsls	r3, r3, #6
 8002a44:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a70:	f7ff f948 	bl	8001d04 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a76:	e00d      	b.n	8002a94 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002a78:	f7ff f944 	bl	8001d04 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a86:	d301      	bcc.n	8002a8c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e009      	b.n	8002aa0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1ec      	bne.n	8002a78 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0d9      	b.n	8002c70 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e00b      	b.n	8002ca8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d105      	bne.n	8002ca6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f88f 	bl	8002dc0 <ETH_SetMACConfig>

    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
  }
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 031c 	bic.w	r3, r3, #28
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002cc8:	f001 fade 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 8002ccc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d908      	bls.n	8002ce8 <HAL_ETH_SetMDIOClockRange+0x38>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d804      	bhi.n	8002ce8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e027      	b.n	8002d38 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d908      	bls.n	8002d02 <HAL_ETH_SetMDIOClockRange+0x52>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d204      	bcs.n	8002d02 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f043 030c 	orr.w	r3, r3, #12
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e01a      	b.n	8002d38 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d303      	bcc.n	8002d12 <HAL_ETH_SetMDIOClockRange+0x62>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d911      	bls.n	8002d36 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d908      	bls.n	8002d2c <HAL_ETH_SetMDIOClockRange+0x7c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d804      	bhi.n	8002d2c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e005      	b.n	8002d38 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f043 0310 	orr.w	r3, r3, #16
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e000      	b.n	8002d38 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002d36:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	01312cff 	.word	0x01312cff
 8002d4c:	02160ebf 	.word	0x02160ebf
 8002d50:	03938700 	.word	0x03938700
 8002d54:	05f5e0ff 	.word	0x05f5e0ff
 8002d58:	08f0d17f 	.word	0x08f0d17f

08002d5c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d98:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fe ffb8 	bl	8001d1c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002db6:	6193      	str	r3, [r2, #24]
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <ETH_SetMACConfig+0x15c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7c1b      	ldrb	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <ETH_SetMACConfig+0x28>
 8002de2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002de6:	e000      	b.n	8002dea <ETH_SetMACConfig+0x2a>
 8002de8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	7c5b      	ldrb	r3, [r3, #17]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <ETH_SetMACConfig+0x38>
 8002df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002df6:	e000      	b.n	8002dfa <ETH_SetMACConfig+0x3a>
 8002df8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dfa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7fdb      	ldrb	r3, [r3, #31]
 8002e06:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e08:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	7f92      	ldrb	r2, [r2, #30]
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	d102      	bne.n	8002e1e <ETH_SetMACConfig+0x5e>
 8002e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e1c:	e000      	b.n	8002e20 <ETH_SetMACConfig+0x60>
 8002e1e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	7f1b      	ldrb	r3, [r3, #28]
 8002e26:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e28:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	791b      	ldrb	r3, [r3, #4]
 8002e34:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	d102      	bne.n	8002e48 <ETH_SetMACConfig+0x88>
 8002e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e46:	e000      	b.n	8002e4a <ETH_SetMACConfig+0x8a>
 8002e48:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	7bdb      	ldrb	r3, [r3, #15]
 8002e50:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e52:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e60:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e62:	4313      	orrs	r3, r2
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7fe ff4e 	bl	8001d1c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d101      	bne.n	8002eae <ETH_SetMACConfig+0xee>
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	e000      	b.n	8002eb0 <ETH_SetMACConfig+0xf0>
 8002eae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eb0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002eb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002ebe:	2a01      	cmp	r2, #1
 8002ec0:	d101      	bne.n	8002ec6 <ETH_SetMACConfig+0x106>
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	e000      	b.n	8002ec8 <ETH_SetMACConfig+0x108>
 8002ec6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ec8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ed0:	2a01      	cmp	r2, #1
 8002ed2:	d101      	bne.n	8002ed8 <ETH_SetMACConfig+0x118>
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	e000      	b.n	8002eda <ETH_SetMACConfig+0x11a>
 8002ed8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002ee2:	2a01      	cmp	r2, #1
 8002ee4:	d101      	bne.n	8002eea <ETH_SetMACConfig+0x12a>
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0x12c>
 8002eea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eec:	4313      	orrs	r3, r2
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f04:	2001      	movs	r0, #1
 8002f06:	f7fe ff09 	bl	8001d1c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	619a      	str	r2, [r3, #24]
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	ff20810f 	.word	0xff20810f

08002f20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <ETH_SetDMAConfig+0x110>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	7b1b      	ldrb	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <ETH_SetDMAConfig+0x2c>
 8002f46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f4a:	e000      	b.n	8002f4e <ETH_SetDMAConfig+0x2e>
 8002f4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	7b5b      	ldrb	r3, [r3, #13]
 8002f52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	7f52      	ldrb	r2, [r2, #29]
 8002f5a:	2a00      	cmp	r2, #0
 8002f5c:	d102      	bne.n	8002f64 <ETH_SetDMAConfig+0x44>
 8002f5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f62:	e000      	b.n	8002f66 <ETH_SetDMAConfig+0x46>
 8002f64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	7b9b      	ldrb	r3, [r3, #14]
 8002f6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
 8002f7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7f9b      	ldrb	r3, [r3, #30]
 8002f82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f94:	4313      	orrs	r3, r2
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fe feb0 	bl	8001d1c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	791b      	ldrb	r3, [r3, #4]
 8002fce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fd4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002fda:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fe0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fe8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ff2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ff8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003006:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003014:	2001      	movs	r0, #1
 8003016:	f7fe fe81 	bl	8001d1c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	f8de3f23 	.word	0xf8de3f23

08003034 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0a6      	sub	sp, #152	; 0x98
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003048:	2300      	movs	r3, #0
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003070:	2300      	movs	r3, #0
 8003072:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800307a:	2300      	movs	r3, #0
 800307c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800309c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fe86 	bl	8002dc0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ff08 	bl	8002f20 <ETH_SetDMAConfig>
}
 8003110:	bf00      	nop
 8003112:	3798      	adds	r7, #152	; 0x98
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3305      	adds	r3, #5
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	3204      	adds	r2, #4
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <ETH_MACAddressConfig+0x68>)
 800313a:	4413      	add	r3, r2
 800313c:	461a      	mov	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3303      	adds	r3, #3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	061a      	lsls	r2, r3, #24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3302      	adds	r3, #2
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	4313      	orrs	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <ETH_MACAddressConfig+0x6c>)
 800316a:	4413      	add	r3, r2
 800316c:	461a      	mov	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6013      	str	r3, [r2, #0]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40028040 	.word	0x40028040
 8003184:	40028044 	.word	0x40028044

08003188 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e03e      	b.n	8003214 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68d9      	ldr	r1, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2200      	movs	r2, #0
 80031b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	3206      	adds	r2, #6
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d80c      	bhi.n	80031f8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68d9      	ldr	r1, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	461a      	mov	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e004      	b.n	8003202 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d9bd      	bls.n	8003196 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322c:	611a      	str	r2, [r3, #16]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e046      	b.n	80032d6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6919      	ldr	r1, [r3, #16]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003284:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800328c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	3212      	adds	r2, #18
 80032a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d80c      	bhi.n	80032c6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6919      	ldr	r1, [r3, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	461a      	mov	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e004      	b.n	80032d0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d9b5      	bls.n	8003248 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003306:	60da      	str	r2, [r3, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003314:	b480      	push	{r7}
 8003316:	b08d      	sub	sp, #52	; 0x34
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3318      	adds	r3, #24
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003356:	d007      	beq.n	8003368 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	3304      	adds	r3, #4
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	e0ff      	b.n	800356c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	3301      	adds	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003382:	4013      	ands	r3, r2
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	6852      	ldr	r2, [r2, #4]
 8003388:	431a      	orrs	r2, r3
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80033ee:	f3bf 8f5f 	dmb	sy
}
 80033f2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003400:	e082      	b.n	8003508 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e005      	b.n	800342e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	3301      	adds	r3, #1
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	2b03      	cmp	r3, #3
 8003438:	d902      	bls.n	8003440 <ETH_Prepare_Tx_Descriptors+0x12c>
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	3b04      	subs	r3, #4
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003448:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003462:	d007      	beq.n	8003474 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	3304      	adds	r3, #4
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d029      	beq.n	80034c8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003482:	2300      	movs	r3, #0
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 8003486:	e019      	b.n	80034bc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003488:	f3bf 8f5f 	dmb	sy
}
 800348c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	3301      	adds	r3, #1
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d902      	bls.n	80034ac <ETH_Prepare_Tx_Descriptors+0x198>
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	3b04      	subs	r3, #4
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	3301      	adds	r3, #1
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80034bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3e1      	bcc.n	8003488 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80034c4:	2302      	movs	r3, #2
 80034c6:	e051      	b.n	800356c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	3301      	adds	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <ETH_Prepare_Tx_Descriptors+0x264>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	6852      	ldr	r2, [r2, #4]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80034f6:	f3bf 8f5f 	dmb	sy
}
 80034fa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f47f af78 	bne.w	8003402 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e005      	b.n	8003532 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	3304      	adds	r3, #4
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003552:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
}
 8003556:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003566:	b662      	cpsie	i
}
 8003568:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3734      	adds	r7, #52	; 0x34
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	ffffe000 	.word	0xffffe000

0800357c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e175      	b.n	8003888 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f040 8164 	bne.w	8003882 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d005      	beq.n	80035d2 <HAL_GPIO_Init+0x56>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d130      	bne.n	8003634 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0201 	and.w	r2, r3, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b03      	cmp	r3, #3
 800363e:	d017      	beq.n	8003670 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d123      	bne.n	80036c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220f      	movs	r2, #15
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	69b9      	ldr	r1, [r7, #24]
 80036c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80be 	beq.w	8003882 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_GPIO_Init+0x324>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_GPIO_Init+0x324>)
 800370c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_GPIO_Init+0x324>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800371e:	4a61      	ldr	r2, [pc, #388]	; (80038a4 <HAL_GPIO_Init+0x328>)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_GPIO_Init+0x32c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d037      	beq.n	80037ba <HAL_GPIO_Init+0x23e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a57      	ldr	r2, [pc, #348]	; (80038ac <HAL_GPIO_Init+0x330>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_GPIO_Init+0x23a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a56      	ldr	r2, [pc, #344]	; (80038b0 <HAL_GPIO_Init+0x334>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <HAL_GPIO_Init+0x236>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a55      	ldr	r2, [pc, #340]	; (80038b4 <HAL_GPIO_Init+0x338>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x232>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_GPIO_Init+0x33c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x22e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a53      	ldr	r2, [pc, #332]	; (80038bc <HAL_GPIO_Init+0x340>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x22a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_GPIO_Init+0x344>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x226>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a51      	ldr	r2, [pc, #324]	; (80038c4 <HAL_GPIO_Init+0x348>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x222>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a50      	ldr	r2, [pc, #320]	; (80038c8 <HAL_GPIO_Init+0x34c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x21e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4f      	ldr	r2, [pc, #316]	; (80038cc <HAL_GPIO_Init+0x350>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x21a>
 8003792:	2309      	movs	r3, #9
 8003794:	e012      	b.n	80037bc <HAL_GPIO_Init+0x240>
 8003796:	230a      	movs	r3, #10
 8003798:	e010      	b.n	80037bc <HAL_GPIO_Init+0x240>
 800379a:	2308      	movs	r3, #8
 800379c:	e00e      	b.n	80037bc <HAL_GPIO_Init+0x240>
 800379e:	2307      	movs	r3, #7
 80037a0:	e00c      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037a2:	2306      	movs	r3, #6
 80037a4:	e00a      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e008      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x240>
 80037ba:	2300      	movs	r3, #0
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	4093      	lsls	r3, r2
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037cc:	4935      	ldr	r1, [pc, #212]	; (80038a4 <HAL_GPIO_Init+0x328>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037da:	4b3d      	ldr	r3, [pc, #244]	; (80038d0 <HAL_GPIO_Init+0x354>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fe:	4a34      	ldr	r2, [pc, #208]	; (80038d0 <HAL_GPIO_Init+0x354>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <HAL_GPIO_Init+0x354>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003828:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <HAL_GPIO_Init+0x354>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800382e:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_GPIO_Init+0x354>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003852:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_GPIO_Init+0x354>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_GPIO_Init+0x354>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <HAL_GPIO_Init+0x354>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	f67f ae86 	bls.w	800359c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40021400 	.word	0x40021400
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40021c00 	.word	0x40021c00
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40022400 	.word	0x40022400
 80038d0:	40013c00 	.word	0x40013c00

080038d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
 80038e0:	4613      	mov	r3, r2
 80038e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e4:	787b      	ldrb	r3, [r7, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038f0:	e003      	b.n	80038fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	041a      	lsls	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	619a      	str	r2, [r3, #24]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003918:	887a      	ldrh	r2, [r7, #2]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	041a      	lsls	r2, r3, #16
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	43d9      	mvns	r1, r3
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	400b      	ands	r3, r1
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	619a      	str	r2, [r3, #24]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800396a:	f7fe f9cb 	bl	8001d04 <HAL_GetTick>
 800396e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003970:	e009      	b.n	8003986 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003972:	f7fe f9c7 	bl	8001d04 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003980:	d901      	bls.n	8003986 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e022      	b.n	80039cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d1ee      	bne.n	8003972 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a0:	f7fe f9b0 	bl	8001d04 <HAL_GetTick>
 80039a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039a6:	e009      	b.n	80039bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039a8:	f7fe f9ac 	bl	8001d04 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b6:	d901      	bls.n	80039bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e007      	b.n	80039cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c8:	d1ee      	bne.n	80039a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e291      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8087 	beq.w	8003b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a00:	4b96      	ldr	r3, [pc, #600]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00c      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0c:	4b93      	ldr	r3, [pc, #588]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d112      	bne.n	8003a3e <HAL_RCC_OscConfig+0x62>
 8003a18:	4b90      	ldr	r3, [pc, #576]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a24:	d10b      	bne.n	8003a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a26:	4b8d      	ldr	r3, [pc, #564]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d06c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x130>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d168      	bne.n	8003b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e26b      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x7a>
 8003a48:	4b84      	ldr	r3, [pc, #528]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a83      	ldr	r2, [pc, #524]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e02e      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x9c>
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7e      	ldr	r2, [pc, #504]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b7c      	ldr	r3, [pc, #496]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7b      	ldr	r2, [pc, #492]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e01d      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0xc0>
 8003a82:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a75      	ldr	r2, [pc, #468]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b73      	ldr	r3, [pc, #460]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a72      	ldr	r2, [pc, #456]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd8>
 8003a9c:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6e      	ldr	r2, [pc, #440]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6b      	ldr	r2, [pc, #428]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe f922 	bl	8001d04 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f91e 	bl	8001d04 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e21f      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe8>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f90e 	bl	8001d04 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe f90a 	bl	8001d04 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e20b      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	4b57      	ldr	r3, [pc, #348]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x110>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d069      	beq.n	8003bee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b1a:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b4d      	ldr	r3, [pc, #308]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d11c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x190>
 8003b32:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x17a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e1df      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	493d      	ldr	r1, [pc, #244]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	e040      	b.n	8003bee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe f8c0 	bl	8001d04 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b88:	f7fe f8bc 	bl	8001d04 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e1bd      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4929      	ldr	r1, [pc, #164]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
 8003bba:	e018      	b.n	8003bee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe f89c 	bl	8001d04 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe f898 	bl	8001d04 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e199      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d038      	beq.n	8003c6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d019      	beq.n	8003c36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c06:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f879 	bl	8001d04 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c16:	f7fe f875 	bl	8001d04 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e176      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x23a>
 8003c34:	e01a      	b.n	8003c6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <HAL_RCC_OscConfig+0x280>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fe f85f 	bl	8001d04 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4a:	f7fe f85b 	bl	8001d04 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d903      	bls.n	8003c60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e15c      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
 8003c5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	4b91      	ldr	r3, [pc, #580]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a4 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a87      	ldr	r2, [pc, #540]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b85      	ldr	r3, [pc, #532]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca2:	4b82      	ldr	r3, [pc, #520]	; (8003eac <HAL_RCC_OscConfig+0x4d0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d118      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cae:	4b7f      	ldr	r3, [pc, #508]	; (8003eac <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7e      	ldr	r2, [pc, #504]	; (8003eac <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cba:	f7fe f823 	bl	8001d04 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc2:	f7fe f81f 	bl	8001d04 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b64      	cmp	r3, #100	; 0x64
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e120      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd4:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCC_OscConfig+0x4d0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x31a>
 8003ce8:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	e02d      	b.n	8003d52 <HAL_RCC_OscConfig+0x376>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x33c>
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a69      	ldr	r2, [pc, #420]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a66      	ldr	r2, [pc, #408]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	e01c      	b.n	8003d52 <HAL_RCC_OscConfig+0x376>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCC_OscConfig+0x35e>
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a60      	ldr	r2, [pc, #384]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	f043 0304 	orr.w	r3, r3, #4
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a5d      	ldr	r2, [pc, #372]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	e00b      	b.n	8003d52 <HAL_RCC_OscConfig+0x376>
 8003d3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	4a5a      	ldr	r2, [pc, #360]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
 8003d46:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a57      	ldr	r2, [pc, #348]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d015      	beq.n	8003d86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fd ffd3 	bl	8001d04 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd ffcf 	bl	8001d04 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0ce      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ee      	beq.n	8003d62 <HAL_RCC_OscConfig+0x386>
 8003d84:	e014      	b.n	8003db0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd ffbd 	bl	8001d04 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fd ffb9 	bl	8001d04 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ee      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d105      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b3c      	ldr	r3, [pc, #240]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a3b      	ldr	r2, [pc, #236]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80a4 	beq.w	8003f14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d06b      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d149      	bne.n	8003e74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd ff8a 	bl	8001d04 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd ff86 	bl	8001d04 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e087      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	4313      	orrs	r3, r2
 8003e38:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd ff5a 	bl	8001d04 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd ff56 	bl	8001d04 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e057      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x478>
 8003e72:	e04f      	b.n	8003f14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd ff40 	bl	8001d04 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd ff3c 	bl	8001d04 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e03d      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCC_OscConfig+0x4cc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4ac>
 8003ea6:	e035      	b.n	8003f14 <HAL_RCC_OscConfig+0x538>
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x544>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d121      	bne.n	8003f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11a      	bne.n	8003f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800

08003f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0d0      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d910      	bls.n	8003f6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 020f 	bic.w	r2, r3, #15
 8003f52:	4965      	ldr	r1, [pc, #404]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b63      	ldr	r3, [pc, #396]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0b8      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a58      	ldr	r2, [pc, #352]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f9c:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa8:	4b50      	ldr	r3, [pc, #320]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	494d      	ldr	r1, [pc, #308]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d040      	beq.n	8004048 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d115      	bne.n	8004006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e07f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e073      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06b      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f023 0203 	bic.w	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4936      	ldr	r1, [pc, #216]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	4313      	orrs	r3, r2
 8004016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fd fe74 	bl	8001d04 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	e00a      	b.n	8004036 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004020:	f7fd fe70 	bl	8001d04 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e053      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 020c 	and.w	r2, r3, #12
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	429a      	cmp	r2, r3
 8004046:	d1eb      	bne.n	8004020 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d210      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 020f 	bic.w	r2, r3, #15
 800405e:	4922      	ldr	r1, [pc, #136]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e032      	b.n	80040de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4916      	ldr	r1, [pc, #88]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	490e      	ldr	r1, [pc, #56]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040b6:	f000 f821 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	490a      	ldr	r1, [pc, #40]	; (80040f0 <HAL_RCC_ClockConfig+0x1cc>)
 80040c8:	5ccb      	ldrb	r3, [r1, r3]
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_RCC_ClockConfig+0x1d0>)
 80040d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_ClockConfig+0x1d4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd f99e 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023c00 	.word	0x40023c00
 80040ec:	40023800 	.word	0x40023800
 80040f0:	0801cbd4 	.word	0x0801cbd4
 80040f4:	20000000 	.word	0x20000000
 80040f8:	20000004 	.word	0x20000004

080040fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004100:	b090      	sub	sp, #64	; 0x40
 8004102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
 8004108:	2300      	movs	r3, #0
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800410c:	2300      	movs	r3, #0
 800410e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_GetSysClockFreq+0x180>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d00d      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x40>
 8004120:	2b08      	cmp	r3, #8
 8004122:	f200 80a1 	bhi.w	8004268 <HAL_RCC_GetSysClockFreq+0x16c>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x34>
 800412a:	2b04      	cmp	r3, #4
 800412c:	d003      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x3a>
 800412e:	e09b      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_GetSysClockFreq+0x184>)
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004134:	e09b      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004136:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_GetSysClockFreq+0x188>)
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800413a:	e098      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800413c:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_RCC_GetSysClockFreq+0x180>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_RCC_GetSysClockFreq+0x180>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_GetSysClockFreq+0x180>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	099b      	lsrs	r3, r3, #6
 8004158:	2200      	movs	r2, #0
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	627a      	str	r2, [r7, #36]	; 0x24
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004164:	2100      	movs	r1, #0
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_GetSysClockFreq+0x188>)
 8004168:	fb03 f201 	mul.w	r2, r3, r1
 800416c:	2300      	movs	r3, #0
 800416e:	fb00 f303 	mul.w	r3, r0, r3
 8004172:	4413      	add	r3, r2
 8004174:	4a43      	ldr	r2, [pc, #268]	; (8004284 <HAL_RCC_GetSysClockFreq+0x188>)
 8004176:	fba0 1202 	umull	r1, r2, r0, r2
 800417a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417c:	460a      	mov	r2, r1
 800417e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004182:	4413      	add	r3, r2
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2200      	movs	r2, #0
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004196:	f7fc fd59 	bl	8000c4c <__aeabi_uldivmod>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4613      	mov	r3, r2
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a2:	e053      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a4:	4b35      	ldr	r3, [pc, #212]	; (800427c <HAL_RCC_GetSysClockFreq+0x180>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	2200      	movs	r2, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	617a      	str	r2, [r7, #20]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041b6:	f04f 0b00 	mov.w	fp, #0
 80041ba:	4652      	mov	r2, sl
 80041bc:	465b      	mov	r3, fp
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	0159      	lsls	r1, r3, #5
 80041c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041cc:	0150      	lsls	r0, r2, #5
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	ebb2 080a 	subs.w	r8, r2, sl
 80041d6:	eb63 090b 	sbc.w	r9, r3, fp
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041ee:	ebb2 0408 	subs.w	r4, r2, r8
 80041f2:	eb63 0509 	sbc.w	r5, r3, r9
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	00eb      	lsls	r3, r5, #3
 8004200:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004204:	00e2      	lsls	r2, r4, #3
 8004206:	4614      	mov	r4, r2
 8004208:	461d      	mov	r5, r3
 800420a:	eb14 030a 	adds.w	r3, r4, sl
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	eb45 030b 	adc.w	r3, r5, fp
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004222:	4629      	mov	r1, r5
 8004224:	028b      	lsls	r3, r1, #10
 8004226:	4621      	mov	r1, r4
 8004228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800422c:	4621      	mov	r1, r4
 800422e:	028a      	lsls	r2, r1, #10
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	2200      	movs	r2, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	60fa      	str	r2, [r7, #12]
 800423c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004240:	f7fc fd04 	bl	8000c4c <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_GetSysClockFreq+0x180>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	3301      	adds	r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800425c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004266:	e002      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_GetSysClockFreq+0x184>)
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800426c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004270:	4618      	mov	r0, r3
 8004272:	3740      	adds	r7, #64	; 0x40
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427a:	bf00      	nop
 800427c:	40023800 	.word	0x40023800
 8004280:	00f42400 	.word	0x00f42400
 8004284:	017d7840 	.word	0x017d7840

08004288 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_RCC_GetHCLKFreq+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000000 	.word	0x20000000

080042a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a4:	f7ff fff0 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	0b5b      	lsrs	r3, r3, #13
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40023800 	.word	0x40023800
 80042c4:	0801cbe4 	.word	0x0801cbe4

080042c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	220f      	movs	r2, #15
 80042d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCC_GetClockConfig+0x5c>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0203 	and.w	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCC_GetClockConfig+0x5c>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_RCC_GetClockConfig+0x5c>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_RCC_GetClockConfig+0x5c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	08db      	lsrs	r3, r3, #3
 8004302:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_RCC_GetClockConfig+0x60>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	601a      	str	r2, [r3, #0]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800
 8004328:	40023c00 	.word	0x40023c00

0800432c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e049      	b.n	80043d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f841 	bl	80043da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f000 fa00 	bl	8004770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d001      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e054      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d022      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d01d      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIM_Base_Start_IT+0xdc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d115      	bne.n	800449c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <HAL_TIM_Base_Start_IT+0xec>)
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b06      	cmp	r3, #6
 8004480:	d015      	beq.n	80044ae <HAL_TIM_Base_Start_IT+0xbe>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d011      	beq.n	80044ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449a:	e008      	b.n	80044ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800
 80044dc:	00010007 	.word	0x00010007

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f905 	bl	8004732 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8f7 	bl	800471e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f908 	bl	8004746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8db 	bl	8004732 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f8cd 	bl	800471e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8de 	bl	8004746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8b1 	bl	8004732 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8a3 	bl	800471e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8b4 	bl	8004746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f887 	bl	8004732 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f879 	bl	800471e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f88a 	bl	8004746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fe9a 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f91a 	bl	80048c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f90d 	bl	80048d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f838 	bl	800475a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0220 	mvn.w	r2, #32
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8cd 	bl	80048b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a40      	ldr	r2, [pc, #256]	; (8004884 <TIM_Base_SetConfig+0x114>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478e:	d00f      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3d      	ldr	r2, [pc, #244]	; (8004888 <TIM_Base_SetConfig+0x118>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00b      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3c      	ldr	r2, [pc, #240]	; (800488c <TIM_Base_SetConfig+0x11c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3b      	ldr	r2, [pc, #236]	; (8004890 <TIM_Base_SetConfig+0x120>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3a      	ldr	r2, [pc, #232]	; (8004894 <TIM_Base_SetConfig+0x124>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d108      	bne.n	80047c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2f      	ldr	r2, [pc, #188]	; (8004884 <TIM_Base_SetConfig+0x114>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d02b      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d027      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <TIM_Base_SetConfig+0x118>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d023      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2b      	ldr	r2, [pc, #172]	; (800488c <TIM_Base_SetConfig+0x11c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01f      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <TIM_Base_SetConfig+0x120>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01b      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a29      	ldr	r2, [pc, #164]	; (8004894 <TIM_Base_SetConfig+0x124>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d017      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a28      	ldr	r2, [pc, #160]	; (8004898 <TIM_Base_SetConfig+0x128>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a27      	ldr	r2, [pc, #156]	; (800489c <TIM_Base_SetConfig+0x12c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <TIM_Base_SetConfig+0x130>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a25      	ldr	r2, [pc, #148]	; (80048a4 <TIM_Base_SetConfig+0x134>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <TIM_Base_SetConfig+0x138>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a23      	ldr	r2, [pc, #140]	; (80048ac <TIM_Base_SetConfig+0x13c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <TIM_Base_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0xf8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <TIM_Base_SetConfig+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d103      	bne.n	8004870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	615a      	str	r2, [r3, #20]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40010400 	.word	0x40010400
 8004898:	40014000 	.word	0x40014000
 800489c:	40014400 	.word	0x40014400
 80048a0:	40014800 	.word	0x40014800
 80048a4:	40001800 	.word	0x40001800
 80048a8:	40001c00 	.word	0x40001c00
 80048ac:	40002000 	.word	0x40002000

080048b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return &gnetif;
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <get_static_netif+0x10>)
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000598 	.word	0x20000598

08004900 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004906:	4b98      	ldr	r3, [pc, #608]	; (8004b68 <MX_LWIP_Init+0x268>)
 8004908:	220a      	movs	r2, #10
 800490a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 800490c:	4b96      	ldr	r3, [pc, #600]	; (8004b68 <MX_LWIP_Init+0x268>)
 800490e:	222a      	movs	r2, #42	; 0x2a
 8004910:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004912:	4b95      	ldr	r3, [pc, #596]	; (8004b68 <MX_LWIP_Init+0x268>)
 8004914:	2200      	movs	r2, #0
 8004916:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8004918:	4b93      	ldr	r3, [pc, #588]	; (8004b68 <MX_LWIP_Init+0x268>)
 800491a:	2220      	movs	r2, #32
 800491c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800491e:	4b93      	ldr	r3, [pc, #588]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004920:	22ff      	movs	r2, #255	; 0xff
 8004922:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004924:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004926:	22ff      	movs	r2, #255	; 0xff
 8004928:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800492a:	4b90      	ldr	r3, [pc, #576]	; (8004b6c <MX_LWIP_Init+0x26c>)
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004930:	4b8e      	ldr	r3, [pc, #568]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004932:	2200      	movs	r2, #0
 8004934:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004936:	4b8e      	ldr	r3, [pc, #568]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004938:	220a      	movs	r2, #10
 800493a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 800493c:	4b8c      	ldr	r3, [pc, #560]	; (8004b70 <MX_LWIP_Init+0x270>)
 800493e:	222a      	movs	r2, #42	; 0x2a
 8004940:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004942:	4b8b      	ldr	r3, [pc, #556]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004944:	2200      	movs	r2, #0
 8004946:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004948:	4b89      	ldr	r3, [pc, #548]	; (8004b70 <MX_LWIP_Init+0x270>)
 800494a:	2201      	movs	r2, #1
 800494c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800494e:	2100      	movs	r1, #0
 8004950:	2000      	movs	r0, #0
 8004952:	f006 ff43 	bl	800b7dc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004956:	4b84      	ldr	r3, [pc, #528]	; (8004b68 <MX_LWIP_Init+0x268>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	061a      	lsls	r2, r3, #24
 800495c:	4b82      	ldr	r3, [pc, #520]	; (8004b68 <MX_LWIP_Init+0x268>)
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	431a      	orrs	r2, r3
 8004964:	4b80      	ldr	r3, [pc, #512]	; (8004b68 <MX_LWIP_Init+0x268>)
 8004966:	789b      	ldrb	r3, [r3, #2]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	4313      	orrs	r3, r2
 800496c:	4a7e      	ldr	r2, [pc, #504]	; (8004b68 <MX_LWIP_Init+0x268>)
 800496e:	78d2      	ldrb	r2, [r2, #3]
 8004970:	4313      	orrs	r3, r2
 8004972:	061a      	lsls	r2, r3, #24
 8004974:	4b7c      	ldr	r3, [pc, #496]	; (8004b68 <MX_LWIP_Init+0x268>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	0619      	lsls	r1, r3, #24
 800497a:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <MX_LWIP_Init+0x268>)
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	4319      	orrs	r1, r3
 8004982:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <MX_LWIP_Init+0x268>)
 8004984:	789b      	ldrb	r3, [r3, #2]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	430b      	orrs	r3, r1
 800498a:	4977      	ldr	r1, [pc, #476]	; (8004b68 <MX_LWIP_Init+0x268>)
 800498c:	78c9      	ldrb	r1, [r1, #3]
 800498e:	430b      	orrs	r3, r1
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004996:	431a      	orrs	r2, r3
 8004998:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <MX_LWIP_Init+0x268>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	0619      	lsls	r1, r3, #24
 800499e:	4b72      	ldr	r3, [pc, #456]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	4319      	orrs	r1, r3
 80049a6:	4b70      	ldr	r3, [pc, #448]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049a8:	789b      	ldrb	r3, [r3, #2]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	430b      	orrs	r3, r1
 80049ae:	496e      	ldr	r1, [pc, #440]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049b0:	78c9      	ldrb	r1, [r1, #3]
 80049b2:	430b      	orrs	r3, r1
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049ba:	431a      	orrs	r2, r3
 80049bc:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	0619      	lsls	r1, r3, #24
 80049c2:	4b69      	ldr	r3, [pc, #420]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	4319      	orrs	r1, r3
 80049ca:	4b67      	ldr	r3, [pc, #412]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	430b      	orrs	r3, r1
 80049d2:	4965      	ldr	r1, [pc, #404]	; (8004b68 <MX_LWIP_Init+0x268>)
 80049d4:	78c9      	ldrb	r1, [r1, #3]
 80049d6:	430b      	orrs	r3, r1
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	4313      	orrs	r3, r2
 80049dc:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <MX_LWIP_Init+0x274>)
 80049de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80049e0:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <MX_LWIP_Init+0x26c>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	061a      	lsls	r2, r3, #24
 80049e6:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <MX_LWIP_Init+0x26c>)
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <MX_LWIP_Init+0x26c>)
 80049f0:	789b      	ldrb	r3, [r3, #2]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	4313      	orrs	r3, r2
 80049f6:	4a5d      	ldr	r2, [pc, #372]	; (8004b6c <MX_LWIP_Init+0x26c>)
 80049f8:	78d2      	ldrb	r2, [r2, #3]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	061a      	lsls	r2, r3, #24
 80049fe:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	0619      	lsls	r1, r3, #24
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	4319      	orrs	r1, r3
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a0e:	789b      	ldrb	r3, [r3, #2]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	430b      	orrs	r3, r1
 8004a14:	4955      	ldr	r1, [pc, #340]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a16:	78c9      	ldrb	r1, [r1, #3]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a20:	431a      	orrs	r2, r3
 8004a22:	4b52      	ldr	r3, [pc, #328]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	0619      	lsls	r1, r3, #24
 8004a28:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	4319      	orrs	r1, r3
 8004a30:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a32:	789b      	ldrb	r3, [r3, #2]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	430b      	orrs	r3, r1
 8004a38:	494c      	ldr	r1, [pc, #304]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a3a:	78c9      	ldrb	r1, [r1, #3]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a44:	431a      	orrs	r2, r3
 8004a46:	4b49      	ldr	r3, [pc, #292]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	0619      	lsls	r1, r3, #24
 8004a4c:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	4319      	orrs	r1, r3
 8004a54:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a56:	789b      	ldrb	r3, [r3, #2]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	4943      	ldr	r1, [pc, #268]	; (8004b6c <MX_LWIP_Init+0x26c>)
 8004a5e:	78c9      	ldrb	r1, [r1, #3]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	0e1b      	lsrs	r3, r3, #24
 8004a64:	4313      	orrs	r3, r2
 8004a66:	4a44      	ldr	r2, [pc, #272]	; (8004b78 <MX_LWIP_Init+0x278>)
 8004a68:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a6a:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	061a      	lsls	r2, r3, #24
 8004a70:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
 8004a78:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a7a:	789b      	ldrb	r3, [r3, #2]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a82:	78d2      	ldrb	r2, [r2, #3]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	061a      	lsls	r2, r3, #24
 8004a88:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	0619      	lsls	r1, r3, #24
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	4319      	orrs	r1, r3
 8004a96:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004a98:	789b      	ldrb	r3, [r3, #2]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	4934      	ldr	r1, [pc, #208]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004aa0:	78c9      	ldrb	r1, [r1, #3]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	0619      	lsls	r1, r3, #24
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	4319      	orrs	r1, r3
 8004aba:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004abc:	789b      	ldrb	r3, [r3, #2]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	492b      	ldr	r1, [pc, #172]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004ac4:	78c9      	ldrb	r1, [r1, #3]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	0619      	lsls	r1, r3, #24
 8004ad6:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	4319      	orrs	r1, r3
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004ae0:	789b      	ldrb	r3, [r3, #2]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	4922      	ldr	r1, [pc, #136]	; (8004b70 <MX_LWIP_Init+0x270>)
 8004ae8:	78c9      	ldrb	r1, [r1, #3]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	0e1b      	lsrs	r3, r3, #24
 8004aee:	4313      	orrs	r3, r2
 8004af0:	4a22      	ldr	r2, [pc, #136]	; (8004b7c <MX_LWIP_Init+0x27c>)
 8004af2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004af4:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <MX_LWIP_Init+0x280>)
 8004af6:	9302      	str	r3, [sp, #8]
 8004af8:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <MX_LWIP_Init+0x284>)
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <MX_LWIP_Init+0x27c>)
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <MX_LWIP_Init+0x278>)
 8004b04:	491b      	ldr	r1, [pc, #108]	; (8004b74 <MX_LWIP_Init+0x274>)
 8004b06:	4820      	ldr	r0, [pc, #128]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b08:	f007 fd4a 	bl	800c5a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b0c:	481e      	ldr	r0, [pc, #120]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b0e:	f007 fef5 	bl	800c8fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b12:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b24:	4818      	ldr	r0, [pc, #96]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b26:	f007 fef9 	bl	800c91c <netif_set_up>
 8004b2a:	e002      	b.n	8004b32 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004b2c:	4816      	ldr	r0, [pc, #88]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b2e:	f007 ff61 	bl	800c9f4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004b32:	4916      	ldr	r1, [pc, #88]	; (8004b8c <MX_LWIP_Init+0x28c>)
 8004b34:	4814      	ldr	r0, [pc, #80]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b36:	f007 fff3 	bl	800cb20 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b3a:	2224      	movs	r2, #36	; 0x24
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4814      	ldr	r0, [pc, #80]	; (8004b90 <MX_LWIP_Init+0x290>)
 8004b40:	f011 fe71 	bl	8016826 <memset>
  attributes.name = "EthLink";
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <MX_LWIP_Init+0x290>)
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <MX_LWIP_Init+0x294>)
 8004b48:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <MX_LWIP_Init+0x290>)
 8004b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b50:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004b52:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <MX_LWIP_Init+0x290>)
 8004b54:	2210      	movs	r2, #16
 8004b56:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004b58:	4a0d      	ldr	r2, [pc, #52]	; (8004b90 <MX_LWIP_Init+0x290>)
 8004b5a:	490b      	ldr	r1, [pc, #44]	; (8004b88 <MX_LWIP_Init+0x288>)
 8004b5c:	480e      	ldr	r0, [pc, #56]	; (8004b98 <MX_LWIP_Init+0x298>)
 8004b5e:	f000 fda3 	bl	80056a8 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	200005d8 	.word	0x200005d8
 8004b6c:	200005dc 	.word	0x200005dc
 8004b70:	200005e0 	.word	0x200005e0
 8004b74:	200005cc 	.word	0x200005cc
 8004b78:	200005d0 	.word	0x200005d0
 8004b7c:	200005d4 	.word	0x200005d4
 8004b80:	0800b6ed 	.word	0x0800b6ed
 8004b84:	08005099 	.word	0x08005099
 8004b88:	20000598 	.word	0x20000598
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	200005e4 	.word	0x200005e4
 8004b94:	080199f0 	.word	0x080199f0
 8004b98:	08005361 	.word	0x08005361

08004b9c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bc6:	f3bf 8f4f 	dsb	sy
}
 8004bca:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8004bcc:	e00b      	b.n	8004be6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004bce:	4a0d      	ldr	r2, [pc, #52]	; (8004c04 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dcf0      	bgt.n	8004bce <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004bec:	f3bf 8f4f 	dsb	sy
}
 8004bf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bf2:	f3bf 8f6f 	isb	sy
}
 8004bf6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <HAL_ETH_RxCpltCallback+0x1c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 f865 	bl	8005ce4 <osSemaphoreRelease>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20004f94 	.word	0x20004f94

08004c28 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <HAL_ETH_TxCpltCallback+0x1c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 f855 	bl	8005ce4 <osSemaphoreRelease>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20004f98 	.word	0x20004f98

08004c48 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fe f883 	bl	8002d5c <HAL_ETH_GetDMAError>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d104      	bne.n	8004c6a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <HAL_ETH_ErrorCallback+0x2c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f83d 	bl	8005ce4 <osSemaphoreRelease>
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20004f94 	.word	0x20004f94

08004c78 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b0aa      	sub	sp, #168	; 0xa8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	2264      	movs	r2, #100	; 0x64
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f011 fdc3 	bl	8016826 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ca0:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <low_level_init+0x240>)
 8004ca2:	4a86      	ldr	r2, [pc, #536]	; (8004ebc <low_level_init+0x244>)
 8004ca4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004cae:	23e1      	movs	r3, #225	; 0xe1
 8004cb0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	; (8004eb8 <low_level_init+0x240>)
 8004cc0:	f107 0308 	add.w	r3, r7, #8
 8004cc4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <low_level_init+0x240>)
 8004cc8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ccc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004cce:	4b7a      	ldr	r3, [pc, #488]	; (8004eb8 <low_level_init+0x240>)
 8004cd0:	4a7b      	ldr	r2, [pc, #492]	; (8004ec0 <low_level_init+0x248>)
 8004cd2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004cd4:	4b78      	ldr	r3, [pc, #480]	; (8004eb8 <low_level_init+0x240>)
 8004cd6:	4a7b      	ldr	r2, [pc, #492]	; (8004ec4 <low_level_init+0x24c>)
 8004cd8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004cda:	4b77      	ldr	r3, [pc, #476]	; (8004eb8 <low_level_init+0x240>)
 8004cdc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ce0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ce2:	4875      	ldr	r0, [pc, #468]	; (8004eb8 <low_level_init+0x240>)
 8004ce4:	f7fd f99c 	bl	8002020 <HAL_ETH_Init>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004cee:	2238      	movs	r2, #56	; 0x38
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4875      	ldr	r0, [pc, #468]	; (8004ec8 <low_level_init+0x250>)
 8004cf4:	f011 fd97 	bl	8016826 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004cf8:	4b73      	ldr	r3, [pc, #460]	; (8004ec8 <low_level_init+0x250>)
 8004cfa:	2221      	movs	r2, #33	; 0x21
 8004cfc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004cfe:	4b72      	ldr	r3, [pc, #456]	; (8004ec8 <low_level_init+0x250>)
 8004d00:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004d04:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004d06:	4b70      	ldr	r3, [pc, #448]	; (8004ec8 <low_level_init+0x250>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004d0c:	486f      	ldr	r0, [pc, #444]	; (8004ecc <low_level_init+0x254>)
 8004d0e:	f007 fb01 	bl	800c314 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2206      	movs	r2, #6
 8004d16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004d1a:	4b67      	ldr	r3, [pc, #412]	; (8004eb8 <low_level_init+0x240>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d26:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <low_level_init+0x240>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	785a      	ldrb	r2, [r3, #1]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004d32:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <low_level_init+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	789a      	ldrb	r2, [r3, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004d3e:	4b5e      	ldr	r3, [pc, #376]	; (8004eb8 <low_level_init+0x240>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	78da      	ldrb	r2, [r3, #3]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004d4a:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <low_level_init+0x240>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	791a      	ldrb	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004d56:	4b58      	ldr	r3, [pc, #352]	; (8004eb8 <low_level_init+0x240>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	795a      	ldrb	r2, [r3, #5]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d68:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d70:	f043 030a 	orr.w	r3, r3, #10
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2101      	movs	r1, #1
 8004d80:	2001      	movs	r0, #1
 8004d82:	f000 fead 	bl	8005ae0 <osSemaphoreNew>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <low_level_init+0x258>)
 8004d8a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2101      	movs	r1, #1
 8004d90:	2001      	movs	r0, #1
 8004d92:	f000 fea5 	bl	8005ae0 <osSemaphoreNew>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4a4e      	ldr	r2, [pc, #312]	; (8004ed4 <low_level_init+0x25c>)
 8004d9a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004d9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004da0:	2224      	movs	r2, #36	; 0x24
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f011 fd3e 	bl	8016826 <memset>
  attributes.name = "EthIf";
 8004daa:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <low_level_init+0x260>)
 8004dac:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004dae:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004db6:	2330      	movs	r3, #48	; 0x30
 8004db8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004dbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4845      	ldr	r0, [pc, #276]	; (8004edc <low_level_init+0x264>)
 8004dc6:	f000 fc6f 	bl	80056a8 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004dca:	4945      	ldr	r1, [pc, #276]	; (8004ee0 <low_level_init+0x268>)
 8004dcc:	4845      	ldr	r0, [pc, #276]	; (8004ee4 <low_level_init+0x26c>)
 8004dce:	f7fc fe0e 	bl	80019ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004dd2:	4844      	ldr	r0, [pc, #272]	; (8004ee4 <low_level_init+0x26c>)
 8004dd4:	f7fc fe3d 	bl	8001a52 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004dd8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d164      	bne.n	8004eaa <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004de0:	4840      	ldr	r0, [pc, #256]	; (8004ee4 <low_level_init+0x26c>)
 8004de2:	f7fc fede 	bl	8001ba2 <LAN8742_GetLinkState>
 8004de6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	dc06      	bgt.n	8004e00 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f007 fe64 	bl	800cac0 <netif_set_link_down>
      netif_set_down(netif);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f007 fdfb 	bl	800c9f4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004dfe:	e056      	b.n	8004eae <low_level_init+0x236>
      switch (PHYLinkState)
 8004e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e04:	3b02      	subs	r3, #2
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d82a      	bhi.n	8004e60 <low_level_init+0x1e8>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <low_level_init+0x198>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e33 	.word	0x08004e33
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e53 	.word	0x08004e53
        duplex = ETH_FULLDUPLEX_MODE;
 8004e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004e30:	e01f      	b.n	8004e72 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004e40:	e017      	b.n	8004e72 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004e50:	e00f      	b.n	8004e72 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004e5e:	e008      	b.n	8004e72 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004e70:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004e72:	f107 0310 	add.w	r3, r7, #16
 8004e76:	4619      	mov	r1, r3
 8004e78:	480f      	ldr	r0, [pc, #60]	; (8004eb8 <low_level_init+0x240>)
 8004e7a:	f7fd fe15 	bl	8002aa8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004e84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004e8a:	f107 0310 	add.w	r3, r7, #16
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <low_level_init+0x240>)
 8004e92:	f7fd fef3 	bl	8002c7c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004e96:	4808      	ldr	r0, [pc, #32]	; (8004eb8 <low_level_init+0x240>)
 8004e98:	f7fd f99e 	bl	80021d8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f007 fd3d 	bl	800c91c <netif_set_up>
    netif_set_link_up(netif);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f007 fdd8 	bl	800ca58 <netif_set_link_up>
}
 8004ea8:	e001      	b.n	8004eae <low_level_init+0x236>
    Error_Handler();
 8004eaa:	f7fc fa87 	bl	80013bc <Error_Handler>
}
 8004eae:	bf00      	nop
 8004eb0:	37a8      	adds	r7, #168	; 0xa8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20004f9c 	.word	0x20004f9c
 8004ebc:	40028000 	.word	0x40028000
 8004ec0:	200002a0 	.word	0x200002a0
 8004ec4:	20000200 	.word	0x20000200
 8004ec8:	2000504c 	.word	0x2000504c
 8004ecc:	0801cbec 	.word	0x0801cbec
 8004ed0:	20004f94 	.word	0x20004f94
 8004ed4:	20004f98 	.word	0x20004f98
 8004ed8:	080199f8 	.word	0x080199f8
 8004edc:	08005045 	.word	0x08005045
 8004ee0:	2000000c 	.word	0x2000000c
 8004ee4:	20005084 	.word	0x20005084

08004ee8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b092      	sub	sp, #72	; 0x48
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	2230      	movs	r2, #48	; 0x30
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f011 fc8c 	bl	8016826 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	2230      	movs	r2, #48	; 0x30
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f011 fc85 	bl	8016826 <memset>

  for(q = p; q != NULL; q = q->next)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f20:	e045      	b.n	8004fae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d902      	bls.n	8004f2e <low_level_output+0x46>
      return ERR_IF;
 8004f28:	f06f 030b 	mvn.w	r3, #11
 8004f2c:	e065      	b.n	8004ffa <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	3348      	adds	r3, #72	; 0x48
 8004f3e:	443b      	add	r3, r7
 8004f40:	3b3c      	subs	r3, #60	; 0x3c
 8004f42:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f46:	895b      	ldrh	r3, [r3, #10]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	3348      	adds	r3, #72	; 0x48
 8004f56:	443b      	add	r3, r7
 8004f58:	3b38      	subs	r3, #56	; 0x38
 8004f5a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f64:	1e5a      	subs	r2, r3, #1
 8004f66:	f107 000c 	add.w	r0, r7, #12
 8004f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	440b      	add	r3, r1
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	18c1      	adds	r1, r0, r3
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	3348      	adds	r3, #72	; 0x48
 8004f80:	443b      	add	r3, r7
 8004f82:	3b34      	subs	r3, #52	; 0x34
 8004f84:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f90:	4613      	mov	r3, r2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	3348      	adds	r3, #72	; 0x48
 8004f9a:	443b      	add	r3, r7
 8004f9c:	3b34      	subs	r3, #52	; 0x34
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	643b      	str	r3, [r7, #64]	; 0x40
 8004fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1b6      	bne.n	8004f22 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	891b      	ldrh	r3, [r3, #8]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <low_level_output+0x11c>)
 8004fbc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004fbe:	4a11      	ldr	r2, [pc, #68]	; (8005004 <low_level_output+0x11c>)
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004fc6:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <low_level_output+0x11c>)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004fcc:	6838      	ldr	r0, [r7, #0]
 8004fce:	f008 f9fb 	bl	800d3c8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004fd2:	490c      	ldr	r1, [pc, #48]	; (8005004 <low_level_output+0x11c>)
 8004fd4:	480c      	ldr	r0, [pc, #48]	; (8005008 <low_level_output+0x120>)
 8004fd6:	f7fd fa0d 	bl	80023f4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004fda:	bf00      	nop
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <low_level_output+0x124>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fe17 	bl	8005c18 <osSemaphoreAcquire>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f5      	bne.n	8004fdc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004ff0:	4805      	ldr	r0, [pc, #20]	; (8005008 <low_level_output+0x120>)
 8004ff2:	f7fd fb93 	bl	800271c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004ff6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3748      	adds	r7, #72	; 0x48
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2000504c 	.word	0x2000504c
 8005008:	20004f9c 	.word	0x20004f9c
 800500c:	20004f98 	.word	0x20004f98

08005010 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <low_level_input+0x2c>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005024:	f107 030c 	add.w	r3, r7, #12
 8005028:	4619      	mov	r1, r3
 800502a:	4805      	ldr	r0, [pc, #20]	; (8005040 <low_level_input+0x30>)
 800502c:	f7fd fa3e 	bl	80024ac <HAL_ETH_ReadData>
  }

  return p;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20004f90 	.word	0x20004f90
 8005040:	20004f9c 	.word	0x20004f9c

08005044 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <ethernetif_input+0x50>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fddb 	bl	8005c18 <osSemaphoreAcquire>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f5      	bne.n	8005054 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005068:	68b8      	ldr	r0, [r7, #8]
 800506a:	f7ff ffd1 	bl	8005010 <low_level_input>
 800506e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	4798      	blx	r3
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f008 f8f8 	bl	800d27c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ea      	bne.n	8005068 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005092:	e7df      	b.n	8005054 <ethernetif_input+0x10>
 8005094:	20004f94 	.word	0x20004f94

08005098 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <ethernetif_init+0x1c>
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <ethernetif_init+0x48>)
 80050a8:	f44f 720d 	mov.w	r2, #564	; 0x234
 80050ac:	490d      	ldr	r1, [pc, #52]	; (80050e4 <ethernetif_init+0x4c>)
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <ethernetif_init+0x50>)
 80050b0:	f011 fc56 	bl	8016960 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2273      	movs	r2, #115	; 0x73
 80050b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2274      	movs	r2, #116	; 0x74
 80050c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <ethernetif_init+0x54>)
 80050c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <ethernetif_init+0x58>)
 80050ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fdd1 	bl	8004c78 <low_level_init>

  return ERR_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	08019a00 	.word	0x08019a00
 80050e4:	08019a1c 	.word	0x08019a1c
 80050e8:	08019a2c 	.word	0x08019a2c
 80050ec:	08014529 	.word	0x08014529
 80050f0:	08004ee9 	.word	0x08004ee9

080050f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	4809      	ldr	r0, [pc, #36]	; (8005128 <pbuf_free_custom+0x34>)
 8005104:	f007 f9f6 	bl	800c4f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005108:	4b08      	ldr	r3, [pc, #32]	; (800512c <pbuf_free_custom+0x38>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <pbuf_free_custom+0x38>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <pbuf_free_custom+0x3c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fde2 	bl	8005ce4 <osSemaphoreRelease>
  }
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	0801cbec 	.word	0x0801cbec
 800512c:	20004f90 	.word	0x20004f90
 8005130:	20004f94 	.word	0x20004f94

08005134 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005138:	f7fc fde4 	bl	8001d04 <HAL_GetTick>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08e      	sub	sp, #56	; 0x38
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800514c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a52      	ldr	r2, [pc, #328]	; (80052ac <HAL_ETH_MspInit+0x168>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f040 809e 	bne.w	80052a4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005168:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	4a50      	ldr	r2, [pc, #320]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 800516e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005172:	6313      	str	r3, [r2, #48]	; 0x30
 8005174:	4b4e      	ldr	r3, [pc, #312]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517c:	623b      	str	r3, [r7, #32]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 8005186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800518a:	6313      	str	r3, [r2, #48]	; 0x30
 800518c:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	4a44      	ldr	r2, [pc, #272]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 800519e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051a2:	6313      	str	r3, [r2, #48]	; 0x30
 80051a4:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051b0:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	6313      	str	r3, [r2, #48]	; 0x30
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	4a38      	ldr	r2, [pc, #224]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6313      	str	r3, [r2, #48]	; 0x30
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e0:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	4a32      	ldr	r2, [pc, #200]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051e6:	f043 0302 	orr.w	r3, r3, #2
 80051ea:	6313      	str	r3, [r2, #48]	; 0x30
 80051ec:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 80051fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005202:	6313      	str	r3, [r2, #48]	; 0x30
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_ETH_MspInit+0x16c>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005210:	2332      	movs	r3, #50	; 0x32
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005214:	2302      	movs	r3, #2
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521c:	2303      	movs	r3, #3
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005220:	230b      	movs	r3, #11
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005228:	4619      	mov	r1, r3
 800522a:	4822      	ldr	r0, [pc, #136]	; (80052b4 <HAL_ETH_MspInit+0x170>)
 800522c:	f7fe f9a6 	bl	800357c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005230:	2386      	movs	r3, #134	; 0x86
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005234:	2302      	movs	r3, #2
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005240:	230b      	movs	r3, #11
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005248:	4619      	mov	r1, r3
 800524a:	481b      	ldr	r0, [pc, #108]	; (80052b8 <HAL_ETH_MspInit+0x174>)
 800524c:	f7fe f996 	bl	800357c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005256:	2302      	movs	r3, #2
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525a:	2300      	movs	r3, #0
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800525e:	2303      	movs	r3, #3
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005262:	230b      	movs	r3, #11
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800526a:	4619      	mov	r1, r3
 800526c:	4813      	ldr	r0, [pc, #76]	; (80052bc <HAL_ETH_MspInit+0x178>)
 800526e:	f7fe f985 	bl	800357c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005272:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005278:	2302      	movs	r3, #2
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005280:	2303      	movs	r3, #3
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005284:	230b      	movs	r3, #11
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800528c:	4619      	mov	r1, r3
 800528e:	480c      	ldr	r0, [pc, #48]	; (80052c0 <HAL_ETH_MspInit+0x17c>)
 8005290:	f7fe f974 	bl	800357c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005294:	2200      	movs	r2, #0
 8005296:	2105      	movs	r1, #5
 8005298:	203d      	movs	r0, #61	; 0x3d
 800529a:	f7fc fe1b 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800529e:	203d      	movs	r0, #61	; 0x3d
 80052a0:	f7fc fe34 	bl	8001f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80052a4:	bf00      	nop
 80052a6:	3738      	adds	r7, #56	; 0x38
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40028000 	.word	0x40028000
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40020800 	.word	0x40020800
 80052b8:	40020000 	.word	0x40020000
 80052bc:	40020400 	.word	0x40020400
 80052c0:	40021800 	.word	0x40021800

080052c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80052c8:	4802      	ldr	r0, [pc, #8]	; (80052d4 <ETH_PHY_IO_Init+0x10>)
 80052ca:	f7fd fcf1 	bl	8002cb0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20004f9c 	.word	0x20004f9c

080052d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return 0;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	4807      	ldr	r0, [pc, #28]	; (8005318 <ETH_PHY_IO_ReadReg+0x30>)
 80052fc:	f7fd fb40 	bl	8002980 <HAL_ETH_ReadPHYRegister>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530a:	e000      	b.n	800530e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20004f9c 	.word	0x20004f9c

0800531c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	4807      	ldr	r0, [pc, #28]	; (800534c <ETH_PHY_IO_WriteReg+0x30>)
 8005330:	f7fd fb71 	bl	8002a16 <HAL_ETH_WritePHYRegister>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800533e:	e000      	b.n	8005342 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20004f9c 	.word	0x20004f9c

08005350 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005354:	f7fc fcd6 	bl	8001d04 <HAL_GetTick>
 8005358:	4603      	mov	r3, r0
}
 800535a:	4618      	mov	r0, r3
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b0a0      	sub	sp, #128	; 0x80
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	2264      	movs	r2, #100	; 0x64
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f011 fa58 	bl	8016826 <memset>
  int32_t PHYLinkState = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800537e:	2300      	movs	r3, #0
 8005380:	67bb      	str	r3, [r7, #120]	; 0x78
 8005382:	2300      	movs	r3, #0
 8005384:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800538a:	483a      	ldr	r0, [pc, #232]	; (8005474 <ethernet_link_thread+0x114>)
 800538c:	f7fc fc09 	bl	8001ba2 <LAN8742_GetLinkState>
 8005390:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00c      	beq.n	80053be <ethernet_link_thread+0x5e>
 80053a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	dc09      	bgt.n	80053be <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80053aa:	4833      	ldr	r0, [pc, #204]	; (8005478 <ethernet_link_thread+0x118>)
 80053ac:	f7fc ffa2 	bl	80022f4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80053b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053b2:	f007 fb1f 	bl	800c9f4 <netif_set_down>
    netif_set_link_down(netif);
 80053b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053b8:	f007 fb82 	bl	800cac0 <netif_set_link_down>
 80053bc:	e055      	b.n	800546a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d14e      	bne.n	800546a <ethernet_link_thread+0x10a>
 80053cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	dd4b      	ble.n	800546a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80053d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d4:	3b02      	subs	r3, #2
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d82a      	bhi.n	8005430 <ethernet_link_thread+0xd0>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <ethernet_link_thread+0x80>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	08005403 	.word	0x08005403
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005423 	.word	0x08005423
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80053f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80053f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005400:	e017      	b.n	8005432 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005402:	2300      	movs	r3, #0
 8005404:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800540a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800540c:	2301      	movs	r3, #1
 800540e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005410:	e00f      	b.n	8005432 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005416:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005418:	2300      	movs	r3, #0
 800541a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800541c:	2301      	movs	r3, #1
 800541e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005420:	e007      	b.n	8005432 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005422:	2300      	movs	r3, #0
 8005424:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005426:	2300      	movs	r3, #0
 8005428:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800542a:	2301      	movs	r3, #1
 800542c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800542e:	e000      	b.n	8005432 <ethernet_link_thread+0xd2>
    default:
      break;
 8005430:	bf00      	nop
    }

    if(linkchanged)
 8005432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d018      	beq.n	800546a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005438:	f107 0308 	add.w	r3, r7, #8
 800543c:	4619      	mov	r1, r3
 800543e:	480e      	ldr	r0, [pc, #56]	; (8005478 <ethernet_link_thread+0x118>)
 8005440:	f7fd fb32 	bl	8002aa8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005446:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	4619      	mov	r1, r3
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <ethernet_link_thread+0x118>)
 8005454:	f7fd fc12 	bl	8002c7c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005458:	4807      	ldr	r0, [pc, #28]	; (8005478 <ethernet_link_thread+0x118>)
 800545a:	f7fc fe5d 	bl	8002118 <HAL_ETH_Start>
      netif_set_up(netif);
 800545e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005460:	f007 fa5c 	bl	800c91c <netif_set_up>
      netif_set_link_up(netif);
 8005464:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005466:	f007 faf7 	bl	800ca58 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800546a:	2064      	movs	r0, #100	; 0x64
 800546c:	f000 f9c2 	bl	80057f4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005470:	e78b      	b.n	800538a <ethernet_link_thread+0x2a>
 8005472:	bf00      	nop
 8005474:	20005084 	.word	0x20005084
 8005478:	20004f9c 	.word	0x20004f9c

0800547c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005484:	4812      	ldr	r0, [pc, #72]	; (80054d0 <HAL_ETH_RxAllocateCallback+0x54>)
 8005486:	f006 ffc1 	bl	800c40c <memp_malloc_pool>
 800548a:	60f8      	str	r0, [r7, #12]
  if (p)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d014      	beq.n	80054bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f103 0220 	add.w	r2, r3, #32
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <HAL_ETH_RxAllocateCallback+0x58>)
 80054a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80054aa:	9201      	str	r2, [sp, #4]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2241      	movs	r2, #65	; 0x41
 80054b2:	2100      	movs	r1, #0
 80054b4:	2000      	movs	r0, #0
 80054b6:	f007 fd27 	bl	800cf08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80054ba:	e005      	b.n	80054c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
}
 80054c8:	bf00      	nop
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	0801cbec 	.word	0x0801cbec
 80054d4:	080050f5 	.word	0x080050f5
 80054d8:	20004f90 	.word	0x20004f90

080054dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3b20      	subs	r3, #32
 80054fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2200      	movs	r2, #0
 8005506:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	887a      	ldrh	r2, [r7, #2]
 800550c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e003      	b.n	8005526 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e009      	b.n	8005548 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	891a      	ldrh	r2, [r3, #8]
 8005538:	887b      	ldrh	r3, [r7, #2]
 800553a:	4413      	add	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f2      	bne.n	8005534 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800554e:	887b      	ldrh	r3, [r7, #2]
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fb2c 	bl	8004bb0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005558:	bf00      	nop
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f007 fe87 	bl	800d27c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558a:	f3ef 8305 	mrs	r3, IPSR
 800558e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005590:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005596:	f3ef 8310 	mrs	r3, PRIMASK
 800559a:	607b      	str	r3, [r7, #4]
  return(result);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	603b      	str	r3, [r7, #0]
  return(result);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <osKernelInitialize+0x3a>
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <osKernelInitialize+0x64>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d103      	bne.n	80055be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80055b6:	f06f 0305 	mvn.w	r3, #5
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e00c      	b.n	80055d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <osKernelInitialize+0x64>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d105      	bne.n	80055d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <osKernelInitialize+0x64>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e002      	b.n	80055d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055d8:	68fb      	ldr	r3, [r7, #12]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	200050a4 	.word	0x200050a4

080055ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f2:	f3ef 8305 	mrs	r3, IPSR
 80055f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80055f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005602:	607b      	str	r3, [r7, #4]
  return(result);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800560a:	f3ef 8311 	mrs	r3, BASEPRI
 800560e:	603b      	str	r3, [r7, #0]
  return(result);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <osKernelStart+0x3a>
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <osKernelStart+0x68>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d103      	bne.n	8005626 <osKernelStart+0x3a>
    stat = osErrorISR;
 800561e:	f06f 0305 	mvn.w	r3, #5
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e010      	b.n	8005648 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <osKernelStart+0x68>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d109      	bne.n	8005642 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800562e:	f7ff ffa2 	bl	8005576 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <osKernelStart+0x68>)
 8005634:	2202      	movs	r2, #2
 8005636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005638:	f002 f9e4 	bl	8007a04 <vTaskStartScheduler>
      stat = osOK;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e002      	b.n	8005648 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	200050a4 	.word	0x200050a4

08005658 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565e:	f3ef 8305 	mrs	r3, IPSR
 8005662:	60bb      	str	r3, [r7, #8]
  return(result);
 8005664:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10f      	bne.n	800568a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566a:	f3ef 8310 	mrs	r3, PRIMASK
 800566e:	607b      	str	r3, [r7, #4]
  return(result);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d105      	bne.n	8005682 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005676:	f3ef 8311 	mrs	r3, BASEPRI
 800567a:	603b      	str	r3, [r7, #0]
  return(result);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <osKernelGetTickCount+0x3a>
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <osKernelGetTickCount+0x4c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d103      	bne.n	8005692 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800568a:	f002 faed 	bl	8007c68 <xTaskGetTickCountFromISR>
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	e002      	b.n	8005698 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005692:	f002 fad9 	bl	8007c48 <xTaskGetTickCount>
 8005696:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005698:	68fb      	ldr	r3, [r7, #12]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200050a4 	.word	0x200050a4

080056a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b090      	sub	sp, #64	; 0x40
 80056ac:	af04      	add	r7, sp, #16
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b8:	f3ef 8305 	mrs	r3, IPSR
 80056bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80056be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 808f 	bne.w	80057e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056d2:	f3ef 8311 	mrs	r3, BASEPRI
 80056d6:	617b      	str	r3, [r7, #20]
  return(result);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <osThreadNew+0x3e>
 80056de:	4b44      	ldr	r3, [pc, #272]	; (80057f0 <osThreadNew+0x148>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d07e      	beq.n	80057e4 <osThreadNew+0x13c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d07b      	beq.n	80057e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80056f0:	2318      	movs	r3, #24
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d045      	beq.n	8005790 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <osThreadNew+0x6a>
        name = attr->name;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <osThreadNew+0x90>
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	2b38      	cmp	r3, #56	; 0x38
 800572a:	d805      	bhi.n	8005738 <osThreadNew+0x90>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <osThreadNew+0x94>
        return (NULL);
 8005738:	2300      	movs	r3, #0
 800573a:	e054      	b.n	80057e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	089b      	lsrs	r3, r3, #2
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <osThreadNew+0xca>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2bbb      	cmp	r3, #187	; 0xbb
 800575a:	d90a      	bls.n	8005772 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <osThreadNew+0xca>
        mem = 1;
 800576c:	2301      	movs	r3, #1
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	e010      	b.n	8005794 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10c      	bne.n	8005794 <osThreadNew+0xec>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <osThreadNew+0xec>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <osThreadNew+0xec>
          mem = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	623b      	str	r3, [r7, #32]
 800578e:	e001      	b.n	8005794 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d110      	bne.n	80057bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057a2:	9202      	str	r2, [sp, #8]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f001 ff31 	bl	8007618 <xTaskCreateStatic>
 80057b6:	4603      	mov	r3, r0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	e013      	b.n	80057e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d110      	bne.n	80057e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f107 0310 	add.w	r3, r7, #16
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f001 ff82 	bl	80076de <xTaskCreate>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d001      	beq.n	80057e4 <osThreadNew+0x13c>
          hTask = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057e4:	693b      	ldr	r3, [r7, #16]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3730      	adds	r7, #48	; 0x30
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200050a4 	.word	0x200050a4

080057f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fc:	f3ef 8305 	mrs	r3, IPSR
 8005800:	613b      	str	r3, [r7, #16]
  return(result);
 8005802:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10f      	bne.n	8005828 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	60fb      	str	r3, [r7, #12]
  return(result);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005814:	f3ef 8311 	mrs	r3, BASEPRI
 8005818:	60bb      	str	r3, [r7, #8]
  return(result);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <osDelay+0x3c>
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <osDelay+0x58>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d103      	bne.n	8005830 <osDelay+0x3c>
    stat = osErrorISR;
 8005828:	f06f 0305 	mvn.w	r3, #5
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e007      	b.n	8005840 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <osDelay+0x4c>
      vTaskDelay(ticks);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f002 f8ac 	bl	8007998 <vTaskDelay>
    }
  }

  return (stat);
 8005840:	697b      	ldr	r3, [r7, #20]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	200050a4 	.word	0x200050a4

08005850 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	613b      	str	r3, [r7, #16]
  return(result);
 8005862:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 8085 	bne.w	8005974 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005876:	f3ef 8311 	mrs	r3, BASEPRI
 800587a:	60bb      	str	r3, [r7, #8]
  return(result);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <osMutexNew+0x3a>
 8005882:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <osMutexNew+0x130>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d074      	beq.n	8005974 <osMutexNew+0x124>
    if (attr != NULL) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	e001      	b.n	800589c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <osMutexNew+0x5c>
      rmtx = 1U;
 80058a6:	2301      	movs	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	e001      	b.n	80058b0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d15c      	bne.n	8005974 <osMutexNew+0x124>
      mem = -1;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058be:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d015      	beq.n	80058f2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d006      	beq.n	80058dc <osMutexNew+0x8c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b4f      	cmp	r3, #79	; 0x4f
 80058d4:	d902      	bls.n	80058dc <osMutexNew+0x8c>
          mem = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	e00c      	b.n	80058f6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <osMutexNew+0xa6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <osMutexNew+0xa6>
            mem = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e001      	b.n	80058f6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d112      	bne.n	8005922 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	4619      	mov	r1, r3
 8005908:	2004      	movs	r0, #4
 800590a:	f000 feb8 	bl	800667e <xQueueCreateMutexStatic>
 800590e:	6278      	str	r0, [r7, #36]	; 0x24
 8005910:	e016      	b.n	8005940 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	4619      	mov	r1, r3
 8005918:	2001      	movs	r0, #1
 800591a:	f000 feb0 	bl	800667e <xQueueCreateMutexStatic>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24
 8005920:	e00e      	b.n	8005940 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800592e:	2004      	movs	r0, #4
 8005930:	f000 fe8d 	bl	800664e <xQueueCreateMutex>
 8005934:	6278      	str	r0, [r7, #36]	; 0x24
 8005936:	e003      	b.n	8005940 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005938:	2001      	movs	r0, #1
 800593a:	f000 fe88 	bl	800664e <xQueueCreateMutex>
 800593e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <osMutexNew+0x110>
        if (attr != NULL) {
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <osMutexNew+0x104>
          name = attr->name;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e001      	b.n	8005958 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800595c:	f001 fdd4 	bl	8007508 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <osMutexNew+0x124>
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	; 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200050a4 	.word	0x200050a4

08005984 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a2:	f3ef 8305 	mrs	r3, IPSR
 80059a6:	613b      	str	r3, [r7, #16]
  return(result);
 80059a8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059ba:	f3ef 8311 	mrs	r3, BASEPRI
 80059be:	60bb      	str	r3, [r7, #8]
  return(result);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <osMutexAcquire+0x52>
 80059c6:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <osMutexAcquire+0xb8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d103      	bne.n	80059d6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80059ce:	f06f 0305 	mvn.w	r3, #5
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	e02c      	b.n	8005a30 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80059dc:	f06f 0303 	mvn.w	r3, #3
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e025      	b.n	8005a30 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d011      	beq.n	8005a0e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	69b8      	ldr	r0, [r7, #24]
 80059ee:	f000 fe97 	bl	8006720 <xQueueTakeMutexRecursive>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d01b      	beq.n	8005a30 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80059fe:	f06f 0301 	mvn.w	r3, #1
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	e014      	b.n	8005a30 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005a06:	f06f 0302 	mvn.w	r3, #2
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e010      	b.n	8005a30 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f001 fa51 	bl	8006eb8 <xQueueSemaphoreTake>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d009      	beq.n	8005a30 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005a22:	f06f 0301 	mvn.w	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e002      	b.n	8005a30 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005a2a:	f06f 0302 	mvn.w	r3, #2
 8005a2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005a30:	69fb      	ldr	r3, [r7, #28]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3720      	adds	r7, #32
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200050a4 	.word	0x200050a4

08005a40 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a5c:	f3ef 8305 	mrs	r3, IPSR
 8005a60:	613b      	str	r3, [r7, #16]
  return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a68:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a74:	f3ef 8311 	mrs	r3, BASEPRI
 8005a78:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <osMutexRelease+0x50>
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <osMutexRelease+0x9c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d103      	bne.n	8005a90 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005a88:	f06f 0305 	mvn.w	r3, #5
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	e01f      	b.n	8005ad0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005a96:	f06f 0303 	mvn.w	r3, #3
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e018      	b.n	8005ad0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005aa4:	69b8      	ldr	r0, [r7, #24]
 8005aa6:	f000 fe05 	bl	80066b4 <xQueueGiveMutexRecursive>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d00f      	beq.n	8005ad0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005ab0:	f06f 0302 	mvn.w	r3, #2
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e00b      	b.n	8005ad0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2200      	movs	r2, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	f000 fed8 	bl	8006874 <xQueueGenericSend>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d002      	beq.n	8005ad0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005aca:	f06f 0302 	mvn.w	r3, #2
 8005ace:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200050a4 	.word	0x200050a4

08005ae0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08c      	sub	sp, #48	; 0x30
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af0:	f3ef 8305 	mrs	r3, IPSR
 8005af4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005af6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f040 8086 	bne.w	8005c0a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afe:	f3ef 8310 	mrs	r3, PRIMASK
 8005b02:	617b      	str	r3, [r7, #20]
  return(result);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <osSemaphoreNew+0x3e>
 8005b16:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <osSemaphoreNew+0x134>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d075      	beq.n	8005c0a <osSemaphoreNew+0x12a>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d072      	beq.n	8005c0a <osSemaphoreNew+0x12a>
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d86e      	bhi.n	8005c0a <osSemaphoreNew+0x12a>
    mem = -1;
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <osSemaphoreNew+0x6e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b4f      	cmp	r3, #79	; 0x4f
 8005b46:	d902      	bls.n	8005b4e <osSemaphoreNew+0x6e>
        mem = 1;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	e00c      	b.n	8005b68 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <osSemaphoreNew+0x88>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <osSemaphoreNew+0x88>
          mem = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	e001      	b.n	8005b68 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b6e:	d04c      	beq.n	8005c0a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d128      	bne.n	8005bc8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10a      	bne.n	8005b92 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2203      	movs	r2, #3
 8005b82:	9200      	str	r2, [sp, #0]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2100      	movs	r1, #0
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f000 fc5f 	bl	800644c <xQueueGenericCreateStatic>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8005b90:	e005      	b.n	8005b9e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005b92:	2203      	movs	r2, #3
 8005b94:	2100      	movs	r1, #0
 8005b96:	2001      	movs	r0, #1
 8005b98:	f000 fcda 	bl	8006550 <xQueueGenericCreate>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d022      	beq.n	8005bea <osSemaphoreNew+0x10a>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01f      	beq.n	8005bea <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005baa:	2300      	movs	r3, #0
 8005bac:	2200      	movs	r2, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb2:	f000 fe5f 	bl	8006874 <xQueueGenericSend>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d016      	beq.n	8005bea <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bbe:	f001 fb55 	bl	800726c <vQueueDelete>
            hSemaphore = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc6:	e010      	b.n	8005bea <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d108      	bne.n	8005be0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fdda 	bl	8006790 <xQueueCreateCountingSemaphoreStatic>
 8005bdc:	6278      	str	r0, [r7, #36]	; 0x24
 8005bde:	e004      	b.n	8005bea <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fe0f 	bl	8006806 <xQueueCreateCountingSemaphore>
 8005be8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <osSemaphoreNew+0x11e>
          name = attr->name;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e001      	b.n	8005c02 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c02:	69f9      	ldr	r1, [r7, #28]
 8005c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c06:	f001 fc7f 	bl	8007508 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3728      	adds	r7, #40	; 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200050a4 	.word	0x200050a4

08005c18 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c30:	f06f 0303 	mvn.w	r3, #3
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	e04b      	b.n	8005cd0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c38:	f3ef 8305 	mrs	r3, IPSR
 8005c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c3e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10f      	bne.n	8005c64 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c44:	f3ef 8310 	mrs	r3, PRIMASK
 8005c48:	613b      	str	r3, [r7, #16]
  return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d105      	bne.n	8005c5c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c50:	f3ef 8311 	mrs	r3, BASEPRI
 8005c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d026      	beq.n	8005caa <osSemaphoreAcquire+0x92>
 8005c5c:	4b1f      	ldr	r3, [pc, #124]	; (8005cdc <osSemaphoreAcquire+0xc4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d122      	bne.n	8005caa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005c6a:	f06f 0303 	mvn.w	r3, #3
 8005c6e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005c70:	e02d      	b.n	8005cce <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005c76:	f107 0308 	add.w	r3, r7, #8
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	69b8      	ldr	r0, [r7, #24]
 8005c80:	f001 fa2e 	bl	80070e0 <xQueueReceiveFromISR>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d003      	beq.n	8005c92 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005c8a:	f06f 0302 	mvn.w	r3, #2
 8005c8e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005c90:	e01d      	b.n	8005cce <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01a      	beq.n	8005cce <osSemaphoreAcquire+0xb6>
 8005c98:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <osSemaphoreAcquire+0xc8>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005ca8:	e011      	b.n	8005cce <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	69b8      	ldr	r0, [r7, #24]
 8005cae:	f001 f903 	bl	8006eb8 <xQueueSemaphoreTake>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d00b      	beq.n	8005cd0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005cbe:	f06f 0301 	mvn.w	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	e004      	b.n	8005cd0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005cc6:	f06f 0302 	mvn.w	r3, #2
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e000      	b.n	8005cd0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005cce:	bf00      	nop
      }
    }
  }

  return (stat);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200050a4 	.word	0x200050a4
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005cfa:	f06f 0303 	mvn.w	r3, #3
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	e03e      	b.n	8005d80 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d02:	f3ef 8305 	mrs	r3, IPSR
 8005d06:	617b      	str	r3, [r7, #20]
  return(result);
 8005d08:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10f      	bne.n	8005d2e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d12:	613b      	str	r3, [r7, #16]
  return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01e      	beq.n	8005d64 <osSemaphoreRelease+0x80>
 8005d26:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <osSemaphoreRelease+0xa8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d11a      	bne.n	8005d64 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4619      	mov	r1, r3
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f000 ff41 	bl	8006bc0 <xQueueGiveFromISR>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d003      	beq.n	8005d4c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005d44:	f06f 0302 	mvn.w	r3, #2
 8005d48:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d4a:	e018      	b.n	8005d7e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d015      	beq.n	8005d7e <osSemaphoreRelease+0x9a>
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <osSemaphoreRelease+0xac>)
 8005d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d62:	e00c      	b.n	8005d7e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d64:	2300      	movs	r3, #0
 8005d66:	2200      	movs	r2, #0
 8005d68:	2100      	movs	r1, #0
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f000 fd82 	bl	8006874 <xQueueGenericSend>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d004      	beq.n	8005d80 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005d76:	f06f 0302 	mvn.w	r3, #2
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e000      	b.n	8005d80 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d7e:	bf00      	nop
    }
  }

  return (stat);
 8005d80:	69fb      	ldr	r3, [r7, #28]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200050a4 	.word	0x200050a4
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da0:	f3ef 8305 	mrs	r3, IPSR
 8005da4:	617b      	str	r3, [r7, #20]
  return(result);
 8005da6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10f      	bne.n	8005dcc <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dac:	f3ef 8310 	mrs	r3, PRIMASK
 8005db0:	613b      	str	r3, [r7, #16]
  return(result);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005db8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <osSemaphoreDelete+0x40>
 8005dc4:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <osSemaphoreDelete+0x68>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d103      	bne.n	8005dd4 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8005dcc:	f06f 0305 	mvn.w	r3, #5
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	e00e      	b.n	8005df2 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8005dda:	f06f 0303 	mvn.w	r3, #3
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e007      	b.n	8005df2 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005de2:	69b8      	ldr	r0, [r7, #24]
 8005de4:	f001 fbba 	bl	800755c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8005dec:	69b8      	ldr	r0, [r7, #24]
 8005dee:	f001 fa3d 	bl	800726c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005df2:	69fb      	ldr	r3, [r7, #28]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200050a4 	.word	0x200050a4

08005e00 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e10:	f3ef 8305 	mrs	r3, IPSR
 8005e14:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e16:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d16f      	bne.n	8005efc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e20:	617b      	str	r3, [r7, #20]
  return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e28:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <osMessageQueueNew+0x3c>
 8005e34:	4b34      	ldr	r3, [pc, #208]	; (8005f08 <osMessageQueueNew+0x108>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d05f      	beq.n	8005efc <osMessageQueueNew+0xfc>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d05c      	beq.n	8005efc <osMessageQueueNew+0xfc>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d059      	beq.n	8005efc <osMessageQueueNew+0xfc>
    mem = -1;
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e4c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d029      	beq.n	8005ea8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d012      	beq.n	8005e82 <osMessageQueueNew+0x82>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b4f      	cmp	r3, #79	; 0x4f
 8005e62:	d90e      	bls.n	8005e82 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d302      	bcc.n	8005e82 <osMessageQueueNew+0x82>
        mem = 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	623b      	str	r3, [r7, #32]
 8005e80:	e014      	b.n	8005eac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d110      	bne.n	8005eac <osMessageQueueNew+0xac>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10c      	bne.n	8005eac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d108      	bne.n	8005eac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <osMessageQueueNew+0xac>
          mem = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e001      	b.n	8005eac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10b      	bne.n	8005eca <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2100      	movs	r1, #0
 8005ebc:	9100      	str	r1, [sp, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fac3 	bl	800644c <xQueueGenericCreateStatic>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ec8:	e008      	b.n	8005edc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fb3b 	bl	8006550 <xQueueGenericCreate>
 8005eda:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00c      	beq.n	8005efc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	e001      	b.n	8005ef4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ef4:	69f9      	ldr	r1, [r7, #28]
 8005ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef8:	f001 fb06 	bl	8007508 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200050a4 	.word	0x200050a4

08005f0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f24:	f3ef 8305 	mrs	r3, IPSR
 8005f28:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f2a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10f      	bne.n	8005f50 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f30:	f3ef 8310 	mrs	r3, PRIMASK
 8005f34:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f40:	617b      	str	r3, [r7, #20]
  return(result);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02c      	beq.n	8005fa2 <osMessageQueuePut+0x96>
 8005f48:	4b28      	ldr	r3, [pc, #160]	; (8005fec <osMessageQueuePut+0xe0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d128      	bne.n	8005fa2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <osMessageQueuePut+0x56>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <osMessageQueuePut+0x56>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005f62:	f06f 0303 	mvn.w	r3, #3
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f68:	e039      	b.n	8005fde <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f6e:	f107 0210 	add.w	r2, r7, #16
 8005f72:	2300      	movs	r3, #0
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	6a38      	ldr	r0, [r7, #32]
 8005f78:	f000 fd82 	bl	8006a80 <xQueueGenericSendFromISR>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d003      	beq.n	8005f8a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005f82:	f06f 0302 	mvn.w	r3, #2
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f88:	e029      	b.n	8005fde <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d026      	beq.n	8005fde <osMessageQueuePut+0xd2>
 8005f90:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <osMessageQueuePut+0xe4>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fa0:	e01d      	b.n	8005fde <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <osMessageQueuePut+0xa2>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005fae:	f06f 0303 	mvn.w	r3, #3
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb4:	e014      	b.n	8005fe0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	6a38      	ldr	r0, [r7, #32]
 8005fbe:	f000 fc59 	bl	8006874 <xQueueGenericSend>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d00b      	beq.n	8005fe0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005fce:	f06f 0301 	mvn.w	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd4:	e004      	b.n	8005fe0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005fd6:	f06f 0302 	mvn.w	r3, #2
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
 8005fdc:	e000      	b.n	8005fe0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fde:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3728      	adds	r7, #40	; 0x28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	200050a4 	.word	0x200050a4
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08a      	sub	sp, #40	; 0x28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800600a:	f3ef 8305 	mrs	r3, IPSR
 800600e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006010:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10f      	bne.n	8006036 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006016:	f3ef 8310 	mrs	r3, PRIMASK
 800601a:	61bb      	str	r3, [r7, #24]
  return(result);
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006022:	f3ef 8311 	mrs	r3, BASEPRI
 8006026:	617b      	str	r3, [r7, #20]
  return(result);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d02c      	beq.n	8006088 <osMessageQueueGet+0x94>
 800602e:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <osMessageQueueGet+0xdc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d128      	bne.n	8006088 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <osMessageQueueGet+0x54>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <osMessageQueueGet+0x54>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006048:	f06f 0303 	mvn.w	r3, #3
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800604e:	e038      	b.n	80060c2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	461a      	mov	r2, r3
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	6a38      	ldr	r0, [r7, #32]
 800605e:	f001 f83f 	bl	80070e0 <xQueueReceiveFromISR>
 8006062:	4603      	mov	r3, r0
 8006064:	2b01      	cmp	r3, #1
 8006066:	d003      	beq.n	8006070 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006068:	f06f 0302 	mvn.w	r3, #2
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800606e:	e028      	b.n	80060c2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d025      	beq.n	80060c2 <osMessageQueueGet+0xce>
 8006076:	4b17      	ldr	r3, [pc, #92]	; (80060d4 <osMessageQueueGet+0xe0>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006086:	e01c      	b.n	80060c2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <osMessageQueueGet+0xa0>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006094:	f06f 0303 	mvn.w	r3, #3
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	e013      	b.n	80060c4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	6a38      	ldr	r0, [r7, #32]
 80060a2:	f000 fe23 	bl	8006cec <xQueueReceive>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d00b      	beq.n	80060c4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80060b2:	f06f 0301 	mvn.w	r3, #1
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
 80060b8:	e004      	b.n	80060c4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80060ba:	f06f 0302 	mvn.w	r3, #2
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
 80060c0:	e000      	b.n	80060c4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3728      	adds	r7, #40	; 0x28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200050a4 	.word	0x200050a4
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	e01e      	b.n	800612e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f0:	f3ef 8305 	mrs	r3, IPSR
 80060f4:	617b      	str	r3, [r7, #20]
  return(result);
 80060f6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006100:	613b      	str	r3, [r7, #16]
  return(result);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006108:	f3ef 8311 	mrs	r3, BASEPRI
 800610c:	60fb      	str	r3, [r7, #12]
  return(result);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <osMessageQueueGetCount+0x4e>
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <osMessageQueueGetCount+0x60>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d104      	bne.n	8006126 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800611c:	69b8      	ldr	r0, [r7, #24]
 800611e:	f001 f885 	bl	800722c <uxQueueMessagesWaitingFromISR>
 8006122:	61f8      	str	r0, [r7, #28]
 8006124:	e003      	b.n	800612e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006126:	69b8      	ldr	r0, [r7, #24]
 8006128:	f001 f860 	bl	80071ec <uxQueueMessagesWaiting>
 800612c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800612e:	69fb      	ldr	r3, [r7, #28]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	200050a4 	.word	0x200050a4

0800613c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006148:	f3ef 8305 	mrs	r3, IPSR
 800614c:	617b      	str	r3, [r7, #20]
  return(result);
 800614e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10f      	bne.n	8006174 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006154:	f3ef 8310 	mrs	r3, PRIMASK
 8006158:	613b      	str	r3, [r7, #16]
  return(result);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006160:	f3ef 8311 	mrs	r3, BASEPRI
 8006164:	60fb      	str	r3, [r7, #12]
  return(result);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <osMessageQueueDelete+0x40>
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <osMessageQueueDelete+0x68>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d103      	bne.n	800617c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006174:	f06f 0305 	mvn.w	r3, #5
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	e00e      	b.n	800619a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006182:	f06f 0303 	mvn.w	r3, #3
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e007      	b.n	800619a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800618a:	69b8      	ldr	r0, [r7, #24]
 800618c:	f001 f9e6 	bl	800755c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006194:	69b8      	ldr	r0, [r7, #24]
 8006196:	f001 f869 	bl	800726c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800619a:	69fb      	ldr	r3, [r7, #28]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	200050a4 	.word	0x200050a4

080061a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a07      	ldr	r2, [pc, #28]	; (80061d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80061b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4a06      	ldr	r2, [pc, #24]	; (80061d8 <vApplicationGetIdleTaskMemory+0x30>)
 80061be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2280      	movs	r2, #128	; 0x80
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	200050a8 	.word	0x200050a8
 80061d8:	20005164 	.word	0x20005164

080061dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4a07      	ldr	r2, [pc, #28]	; (8006208 <vApplicationGetTimerTaskMemory+0x2c>)
 80061ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4a06      	ldr	r2, [pc, #24]	; (800620c <vApplicationGetTimerTaskMemory+0x30>)
 80061f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061fa:	601a      	str	r2, [r3, #0]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	20005364 	.word	0x20005364
 800620c:	20005420 	.word	0x20005420

08006210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f103 0208 	add.w	r2, r3, #8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f103 0208 	add.w	r2, r3, #8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f103 0208 	add.w	r2, r3, #8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c8:	d103      	bne.n	80062d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e00c      	b.n	80062ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3308      	adds	r3, #8
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e002      	b.n	80062e0 <vListInsert+0x2e>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d2f6      	bcs.n	80062da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6892      	ldr	r2, [r2, #8]
 800633a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6852      	ldr	r2, [r2, #4]
 8006344:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d103      	bne.n	8006358 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	1e5a      	subs	r2, r3, #1
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	b672      	cpsid	i
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	b662      	cpsie	i
 80063a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80063a6:	f002 fe11 	bl	8008fcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	441a      	add	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	3b01      	subs	r3, #1
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	441a      	add	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	22ff      	movs	r2, #255	; 0xff
 80063ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d114      	bne.n	8006426 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01a      	beq.n	800643a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3310      	adds	r3, #16
 8006408:	4618      	mov	r0, r3
 800640a:	f001 fdb5 	bl	8007f78 <xTaskRemoveFromEventList>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <xQueueGenericReset+0xd0>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	e009      	b.n	800643a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3310      	adds	r3, #16
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fef0 	bl	8006210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3324      	adds	r3, #36	; 0x24
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff feeb 	bl	8006210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800643a:	f002 fdfb 	bl	8009034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800643e:	2301      	movs	r3, #1
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08e      	sub	sp, #56	; 0x38
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10c      	bne.n	800647a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10c      	bne.n	800649a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <xQueueGenericCreateStatic+0x5a>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <xQueueGenericCreateStatic+0x5e>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <xQueueGenericCreateStatic+0x60>
 80064aa:	2300      	movs	r3, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10c      	bne.n	80064ca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	b672      	cpsid	i
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	b662      	cpsie	i
 80064c4:	623b      	str	r3, [r7, #32]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <xQueueGenericCreateStatic+0x8a>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueGenericCreateStatic+0x8e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericCreateStatic+0x90>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10c      	bne.n	80064fa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	b672      	cpsid	i
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	b662      	cpsie	i
 80064f4:	61fb      	str	r3, [r7, #28]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064fa:	2350      	movs	r3, #80	; 0x50
 80064fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b50      	cmp	r3, #80	; 0x50
 8006502:	d00c      	beq.n	800651e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	b672      	cpsid	i
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	b662      	cpsie	i
 8006518:	61bb      	str	r3, [r7, #24]
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800651e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4613      	mov	r3, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f847 	bl	80065d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006548:	4618      	mov	r0, r3
 800654a:	3730      	adds	r7, #48	; 0x30
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10c      	bne.n	800657e <xQueueGenericCreate+0x2e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	b672      	cpsid	i
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	b662      	cpsie	i
 8006578:	613b      	str	r3, [r7, #16]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e004      	b.n	8006594 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3350      	adds	r3, #80	; 0x50
 8006598:	4618      	mov	r0, r3
 800659a:	f002 fe43 	bl	8009224 <pvPortMalloc>
 800659e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	3350      	adds	r3, #80	; 0x50
 80065ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065b8:	79fa      	ldrb	r2, [r7, #7]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f805 	bl	80065d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065ca:	69bb      	ldr	r3, [r7, #24]
	}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006602:	2101      	movs	r1, #1
 8006604:	69b8      	ldr	r0, [r7, #24]
 8006606:	f7ff feb7 	bl	8006378 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800663a:	2300      	movs	r3, #0
 800663c:	2200      	movs	r2, #0
 800663e:	2100      	movs	r1, #0
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f917 	bl	8006874 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	4603      	mov	r3, r0
 8006656:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	461a      	mov	r2, r3
 8006664:	6939      	ldr	r1, [r7, #16]
 8006666:	6978      	ldr	r0, [r7, #20]
 8006668:	f7ff ff72 	bl	8006550 <xQueueGenericCreate>
 800666c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff ffd3 	bl	800661a <prvInitialiseMutex>

		return xNewQueue;
 8006674:	68fb      	ldr	r3, [r7, #12]
	}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800667e:	b580      	push	{r7, lr}
 8006680:	b088      	sub	sp, #32
 8006682:	af02      	add	r7, sp, #8
 8006684:	4603      	mov	r3, r0
 8006686:	6039      	str	r1, [r7, #0]
 8006688:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800668a:	2301      	movs	r3, #1
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	6939      	ldr	r1, [r7, #16]
 800669c:	6978      	ldr	r0, [r7, #20]
 800669e:	f7ff fed5 	bl	800644c <xQueueGenericCreateStatic>
 80066a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff ffb8 	bl	800661a <prvInitialiseMutex>

		return xNewQueue;
 80066aa:	68fb      	ldr	r3, [r7, #12]
	}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80066b4:	b590      	push	{r4, r7, lr}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10c      	bne.n	80066e0 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	689c      	ldr	r4, [r3, #8]
 80066e4:	f001 fe12 	bl	800830c <xTaskGetCurrentTaskHandle>
 80066e8:	4603      	mov	r3, r0
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d111      	bne.n	8006712 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	1e5a      	subs	r2, r3, #1
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006700:	2300      	movs	r3, #0
 8006702:	2200      	movs	r2, #0
 8006704:	2100      	movs	r1, #0
 8006706:	6938      	ldr	r0, [r7, #16]
 8006708:	f000 f8b4 	bl	8006874 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e001      	b.n	8006716 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006716:	697b      	ldr	r3, [r7, #20]
	}
 8006718:	4618      	mov	r0, r3
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}

08006720 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10c      	bne.n	800674e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	b672      	cpsid	i
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	b662      	cpsie	i
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	689c      	ldr	r4, [r3, #8]
 8006752:	f001 fddb 	bl	800830c <xTaskGetCurrentTaskHandle>
 8006756:	4603      	mov	r3, r0
 8006758:	429c      	cmp	r4, r3
 800675a:	d107      	bne.n	800676c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006766:	2301      	movs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e00c      	b.n	8006786 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6938      	ldr	r0, [r7, #16]
 8006770:	f000 fba2 	bl	8006eb8 <xQueueSemaphoreTake>
 8006774:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006786:	697b      	ldr	r3, [r7, #20]
	}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd90      	pop	{r4, r7, pc}

08006790 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	b672      	cpsid	i
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	b662      	cpsie	i
 80067b6:	61bb      	str	r3, [r7, #24]
}
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90c      	bls.n	80067de <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	b672      	cpsid	i
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	b662      	cpsie	i
 80067d8:	617b      	str	r3, [r7, #20]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80067de:	2302      	movs	r3, #2
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	2100      	movs	r1, #0
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fe2f 	bl	800644c <xQueueGenericCreateStatic>
 80067ee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80067fc:	69fb      	ldr	r3, [r7, #28]
	}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10c      	bne.n	8006830 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	b672      	cpsid	i
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	b662      	cpsie	i
 800682a:	613b      	str	r3, [r7, #16]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d90c      	bls.n	8006852 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	b672      	cpsid	i
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	b662      	cpsie	i
 800684c:	60fb      	str	r3, [r7, #12]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006852:	2202      	movs	r2, #2
 8006854:	2100      	movs	r1, #0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fe7a 	bl	8006550 <xQueueGenericCreate>
 800685c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800686a:	697b      	ldr	r3, [r7, #20]
	}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08e      	sub	sp, #56	; 0x38
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006882:	2300      	movs	r3, #0
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <xQueueGenericSend+0x36>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	b672      	cpsid	i
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	b662      	cpsie	i
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <xQueueGenericSend+0x44>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <xQueueGenericSend+0x48>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <xQueueGenericSend+0x4a>
 80068bc:	2300      	movs	r3, #0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10c      	bne.n	80068dc <xQueueGenericSend+0x68>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	b672      	cpsid	i
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	b662      	cpsie	i
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068d8:	bf00      	nop
 80068da:	e7fe      	b.n	80068da <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d103      	bne.n	80068ea <xQueueGenericSend+0x76>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <xQueueGenericSend+0x7a>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <xQueueGenericSend+0x7c>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10c      	bne.n	800690e <xQueueGenericSend+0x9a>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	b672      	cpsid	i
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	b662      	cpsie	i
 8006908:	623b      	str	r3, [r7, #32]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800690e:	f001 fd0d 	bl	800832c <xTaskGetSchedulerState>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <xQueueGenericSend+0xaa>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <xQueueGenericSend+0xae>
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <xQueueGenericSend+0xb0>
 8006922:	2300      	movs	r3, #0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10c      	bne.n	8006942 <xQueueGenericSend+0xce>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	b672      	cpsid	i
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	b662      	cpsie	i
 800693c:	61fb      	str	r3, [r7, #28]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006942:	f002 fb43 	bl	8008fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <xQueueGenericSend+0xe4>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d129      	bne.n	80069ac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695e:	f000 fcc2 	bl	80072e6 <prvCopyDataToQueue>
 8006962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d010      	beq.n	800698e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	4618      	mov	r0, r3
 8006972:	f001 fb01 	bl	8007f78 <xTaskRemoveFromEventList>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800697c:	4b3f      	ldr	r3, [pc, #252]	; (8006a7c <xQueueGenericSend+0x208>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	e00a      	b.n	80069a4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006994:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <xQueueGenericSend+0x208>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069a4:	f002 fb46 	bl	8009034 <vPortExitCritical>
				return pdPASS;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e063      	b.n	8006a74 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069b2:	f002 fb3f 	bl	8009034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e05c      	b.n	8006a74 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fb3d 	bl	8008044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ca:	2301      	movs	r3, #1
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069ce:	f002 fb31 	bl	8009034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069d2:	f001 f88b 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069d6:	f002 faf9 	bl	8008fcc <vPortEnterCritical>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e6:	d103      	bne.n	80069f0 <xQueueGenericSend+0x17c>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fc:	d103      	bne.n	8006a06 <xQueueGenericSend+0x192>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a06:	f002 fb15 	bl	8009034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a0a:	1d3a      	adds	r2, r7, #4
 8006a0c:	f107 0314 	add.w	r3, r7, #20
 8006a10:	4611      	mov	r1, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f001 fb2c 	bl	8008070 <xTaskCheckForTimeOut>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d124      	bne.n	8006a68 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a20:	f000 fd59 	bl	80074d6 <prvIsQueueFull>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d018      	beq.n	8006a5c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fa4c 	bl	8007ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3a:	f000 fce4 	bl	8007406 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a3e:	f001 f863 	bl	8007b08 <xTaskResumeAll>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f af7c 	bne.w	8006942 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <xQueueGenericSend+0x208>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	e772      	b.n	8006942 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5e:	f000 fcd2 	bl	8007406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a62:	f001 f851 	bl	8007b08 <xTaskResumeAll>
 8006a66:	e76c      	b.n	8006942 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a6a:	f000 fccc 	bl	8007406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a6e:	f001 f84b 	bl	8007b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3738      	adds	r7, #56	; 0x38
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10c      	bne.n	8006ab2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	b672      	cpsid	i
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	b662      	cpsie	i
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <xQueueGenericSendFromISR+0x40>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <xQueueGenericSendFromISR+0x44>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <xQueueGenericSendFromISR+0x46>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	b672      	cpsid	i
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	b662      	cpsie	i
 8006ade:	623b      	str	r3, [r7, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d103      	bne.n	8006af2 <xQueueGenericSendFromISR+0x72>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <xQueueGenericSendFromISR+0x76>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <xQueueGenericSendFromISR+0x78>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10c      	bne.n	8006b16 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	b672      	cpsid	i
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	b662      	cpsie	i
 8006b10:	61fb      	str	r3, [r7, #28]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b16:	f002 fb41 	bl	800919c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	61ba      	str	r2, [r7, #24]
 8006b34:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b36:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d302      	bcc.n	8006b4c <xQueueGenericSendFromISR+0xcc>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d12c      	bne.n	8006ba6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5c:	f000 fbc3 	bl	80072e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b60:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b68:	d112      	bne.n	8006b90 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f9fe 	bl	8007f78 <xTaskRemoveFromEventList>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e007      	b.n	8006ba0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b94:	3301      	adds	r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	b25a      	sxtb	r2, r3
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ba4:	e001      	b.n	8006baa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3738      	adds	r7, #56	; 0x38
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	; 0x38
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10c      	bne.n	8006bee <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	b672      	cpsid	i
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	b662      	cpsie	i
 8006be8:	623b      	str	r3, [r7, #32]
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	b672      	cpsid	i
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	b662      	cpsie	i
 8006c0a:	61fb      	str	r3, [r7, #28]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <xQueueGiveFromISR+0x60>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <xQueueGiveFromISR+0x64>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <xQueueGiveFromISR+0x66>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10c      	bne.n	8006c44 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	b672      	cpsid	i
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	b662      	cpsie	i
 8006c3e:	61bb      	str	r3, [r7, #24]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c44:	f002 faaa 	bl	800919c <vPortValidateInterruptPriority>
	__asm volatile
 8006c48:	f3ef 8211 	mrs	r2, BASEPRI
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	b672      	cpsid	i
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	b662      	cpsie	i
 8006c60:	617a      	str	r2, [r7, #20]
 8006c62:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c64:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d22b      	bcs.n	8006cd0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c92:	d112      	bne.n	8006cba <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d016      	beq.n	8006cca <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	3324      	adds	r3, #36	; 0x24
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f969 	bl	8007f78 <xTaskRemoveFromEventList>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00e      	beq.n	8006cca <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e007      	b.n	8006cca <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	b25a      	sxtb	r2, r3
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cce:	e001      	b.n	8006cd4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3738      	adds	r7, #56	; 0x38
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08c      	sub	sp, #48	; 0x30
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10c      	bne.n	8006d20 <xQueueReceive+0x34>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	b672      	cpsid	i
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	b662      	cpsie	i
 8006d1a:	623b      	str	r3, [r7, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <xQueueReceive+0x42>
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <xQueueReceive+0x46>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <xQueueReceive+0x48>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <xQueueReceive+0x66>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	b672      	cpsid	i
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	b662      	cpsie	i
 8006d4c:	61fb      	str	r3, [r7, #28]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d52:	f001 faeb 	bl	800832c <xTaskGetSchedulerState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <xQueueReceive+0x76>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <xQueueReceive+0x7a>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueReceive+0x7c>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10c      	bne.n	8006d86 <xQueueReceive+0x9a>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	b672      	cpsid	i
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	b662      	cpsie	i
 8006d80:	61bb      	str	r3, [r7, #24]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d86:	f002 f921 	bl	8008fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01f      	beq.n	8006dd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9a:	f000 fb0e 	bl	80073ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00f      	beq.n	8006dce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	3310      	adds	r3, #16
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 f8e0 	bl	8007f78 <xTaskRemoveFromEventList>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dbe:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <xQueueReceive+0x1c8>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dce:	f002 f931 	bl	8009034 <vPortExitCritical>
				return pdPASS;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e069      	b.n	8006eaa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ddc:	f002 f92a 	bl	8009034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e062      	b.n	8006eaa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dea:	f107 0310 	add.w	r3, r7, #16
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 f928 	bl	8008044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df8:	f002 f91c 	bl	8009034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dfc:	f000 fe76 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e00:	f002 f8e4 	bl	8008fcc <vPortEnterCritical>
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0a:	b25b      	sxtb	r3, r3
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e10:	d103      	bne.n	8006e1a <xQueueReceive+0x12e>
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e20:	b25b      	sxtb	r3, r3
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e26:	d103      	bne.n	8006e30 <xQueueReceive+0x144>
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e30:	f002 f900 	bl	8009034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e34:	1d3a      	adds	r2, r7, #4
 8006e36:	f107 0310 	add.w	r3, r7, #16
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 f917 	bl	8008070 <xTaskCheckForTimeOut>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d123      	bne.n	8006e90 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4a:	f000 fb2e 	bl	80074aa <prvIsQueueEmpty>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d017      	beq.n	8006e84 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f837 	bl	8007ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e64:	f000 facf 	bl	8007406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e68:	f000 fe4e 	bl	8007b08 <xTaskResumeAll>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d189      	bne.n	8006d86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <xQueueReceive+0x1c8>)
 8006e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	e780      	b.n	8006d86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e86:	f000 fabe 	bl	8007406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8a:	f000 fe3d 	bl	8007b08 <xTaskResumeAll>
 8006e8e:	e77a      	b.n	8006d86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e92:	f000 fab8 	bl	8007406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e96:	f000 fe37 	bl	8007b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9c:	f000 fb05 	bl	80074aa <prvIsQueueEmpty>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f43f af6f 	beq.w	8006d86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3730      	adds	r7, #48	; 0x30
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08e      	sub	sp, #56	; 0x38
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10c      	bne.n	8006eee <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	b672      	cpsid	i
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	b662      	cpsie	i
 8006ee8:	623b      	str	r3, [r7, #32]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	b672      	cpsid	i
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	b662      	cpsie	i
 8006f0a:	61fb      	str	r3, [r7, #28]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f10:	f001 fa0c 	bl	800832c <xTaskGetSchedulerState>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <xQueueSemaphoreTake+0x68>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <xQueueSemaphoreTake+0x6c>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <xQueueSemaphoreTake+0x6e>
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	b672      	cpsid	i
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	b662      	cpsie	i
 8006f3e:	61bb      	str	r3, [r7, #24]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f44:	f002 f842 	bl	8008fcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d024      	beq.n	8006f9e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	1e5a      	subs	r2, r3, #1
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f64:	f001 fb60 	bl	8008628 <pvTaskIncrementMutexHeldCount>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	3310      	adds	r3, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fffc 	bl	8007f78 <xTaskRemoveFromEventList>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f86:	4b55      	ldr	r3, [pc, #340]	; (80070dc <xQueueSemaphoreTake+0x224>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f96:	f002 f84d 	bl	8009034 <vPortExitCritical>
				return pdPASS;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e099      	b.n	80070d2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d113      	bne.n	8006fcc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00c      	beq.n	8006fc4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	b672      	cpsid	i
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	b662      	cpsie	i
 8006fbe:	617b      	str	r3, [r7, #20]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fc4:	f002 f836 	bl	8009034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e082      	b.n	80070d2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f834 	bl	8008044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe0:	f002 f828 	bl	8009034 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe4:	f000 fd82 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe8:	f001 fff0 	bl	8008fcc <vPortEnterCritical>
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff8:	d103      	bne.n	8007002 <xQueueSemaphoreTake+0x14a>
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007008:	b25b      	sxtb	r3, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800700e:	d103      	bne.n	8007018 <xQueueSemaphoreTake+0x160>
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007018:	f002 f80c 	bl	8009034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800701c:	463a      	mov	r2, r7
 800701e:	f107 030c 	add.w	r3, r7, #12
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f001 f823 	bl	8008070 <xTaskCheckForTimeOut>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d132      	bne.n	8007096 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007032:	f000 fa3a 	bl	80074aa <prvIsQueueEmpty>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d026      	beq.n	800708a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d109      	bne.n	8007058 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007044:	f001 ffc2 	bl	8008fcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f98b 	bl	8008368 <xTaskPriorityInherit>
 8007052:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007054:	f001 ffee 	bl	8009034 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	3324      	adds	r3, #36	; 0x24
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f000 ff35 	bl	8007ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007068:	f000 f9cd 	bl	8007406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800706c:	f000 fd4c 	bl	8007b08 <xTaskResumeAll>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	f47f af66 	bne.w	8006f44 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007078:	4b18      	ldr	r3, [pc, #96]	; (80070dc <xQueueSemaphoreTake+0x224>)
 800707a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	e75c      	b.n	8006f44 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800708a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800708c:	f000 f9bb 	bl	8007406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007090:	f000 fd3a 	bl	8007b08 <xTaskResumeAll>
 8007094:	e756      	b.n	8006f44 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007098:	f000 f9b5 	bl	8007406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800709c:	f000 fd34 	bl	8007b08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a2:	f000 fa02 	bl	80074aa <prvIsQueueEmpty>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f43f af4b 	beq.w	8006f44 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00d      	beq.n	80070d0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80070b4:	f001 ff8a 	bl	8008fcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ba:	f000 f8fc 	bl	80072b6 <prvGetDisinheritPriorityAfterTimeout>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fa28 	bl	800851c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070cc:	f001 ffb2 	bl	8009034 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3738      	adds	r7, #56	; 0x38
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	e000ed04 	.word	0xe000ed04

080070e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08e      	sub	sp, #56	; 0x38
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10c      	bne.n	8007110 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	b672      	cpsid	i
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	b662      	cpsie	i
 800710a:	623b      	str	r3, [r7, #32]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <xQueueReceiveFromISR+0x3e>
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <xQueueReceiveFromISR+0x42>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <xQueueReceiveFromISR+0x44>
 8007122:	2300      	movs	r3, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10c      	bne.n	8007142 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	b672      	cpsid	i
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	b662      	cpsie	i
 800713c:	61fb      	str	r3, [r7, #28]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007142:	f002 f82b 	bl	800919c <vPortValidateInterruptPriority>
	__asm volatile
 8007146:	f3ef 8211 	mrs	r2, BASEPRI
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	b672      	cpsid	i
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	b662      	cpsie	i
 800715e:	61ba      	str	r2, [r7, #24]
 8007160:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007162:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d02f      	beq.n	80071d2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007180:	f000 f91b 	bl	80073ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	1e5a      	subs	r2, r3, #1
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800718c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007194:	d112      	bne.n	80071bc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d016      	beq.n	80071cc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	3310      	adds	r3, #16
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fee8 	bl	8007f78 <xTaskRemoveFromEventList>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00e      	beq.n	80071cc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e007      	b.n	80071cc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c0:	3301      	adds	r3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	b25a      	sxtb	r2, r3
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071cc:	2301      	movs	r3, #1
 80071ce:	637b      	str	r3, [r7, #52]	; 0x34
 80071d0:	e001      	b.n	80071d6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f383 8811 	msr	BASEPRI, r3
}
 80071e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3738      	adds	r7, #56	; 0x38
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10c      	bne.n	8007214 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	b672      	cpsid	i
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	b662      	cpsie	i
 800720e:	60bb      	str	r3, [r7, #8]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007214:	f001 feda 	bl	8008fcc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800721e:	f001 ff09 	bl	8009034 <vPortExitCritical>

	return uxReturn;
 8007222:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10c      	bne.n	8007258 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	b672      	cpsid	i
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	b662      	cpsie	i
 8007252:	60fb      	str	r3, [r7, #12]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800725e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007260:	4618      	mov	r0, r3
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10c      	bne.n	8007298 <vQueueDelete+0x2c>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	b672      	cpsid	i
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	b662      	cpsie	i
 8007292:	60bb      	str	r3, [r7, #8]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f95f 	bl	800755c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f002 f885 	bl	80093b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e001      	b.n	80072d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072d8:	68fb      	ldr	r3, [r7, #12]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10d      	bne.n	8007320 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d14d      	bne.n	80073a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f891 	bl	8008438 <xTaskPriorityDisinherit>
 8007316:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
 800731e:	e043      	b.n	80073a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d119      	bne.n	800735a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6858      	ldr	r0, [r3, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	461a      	mov	r2, r3
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	f00f fa50 	bl	80167d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	441a      	add	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	d32b      	bcc.n	80073a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]
 8007358:	e026      	b.n	80073a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68d8      	ldr	r0, [r3, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	461a      	mov	r2, r3
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	f00f fa36 	bl	80167d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	425b      	negs	r3, r3
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d207      	bcs.n	8007396 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	425b      	negs	r3, r3
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d105      	bne.n	80073a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d018      	beq.n	80073fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d303      	bcc.n	80073ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68d9      	ldr	r1, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	461a      	mov	r2, r3
 80073f8:	6838      	ldr	r0, [r7, #0]
 80073fa:	f00f f9ec 	bl	80167d6 <memcpy>
	}
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800740e:	f001 fddd 	bl	8008fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007418:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800741a:	e011      	b.n	8007440 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d012      	beq.n	800744a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3324      	adds	r3, #36	; 0x24
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fda5 	bl	8007f78 <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007434:	f000 fe82 	bl	800813c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	3b01      	subs	r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dce9      	bgt.n	800741c <prvUnlockQueue+0x16>
 8007448:	e000      	b.n	800744c <prvUnlockQueue+0x46>
					break;
 800744a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	22ff      	movs	r2, #255	; 0xff
 8007450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007454:	f001 fdee 	bl	8009034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007458:	f001 fdb8 	bl	8008fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007462:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007464:	e011      	b.n	800748a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d012      	beq.n	8007494 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3310      	adds	r3, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fd80 	bl	8007f78 <xTaskRemoveFromEventList>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800747e:	f000 fe5d 	bl	800813c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	3b01      	subs	r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dce9      	bgt.n	8007466 <prvUnlockQueue+0x60>
 8007492:	e000      	b.n	8007496 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007494:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	22ff      	movs	r2, #255	; 0xff
 800749a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800749e:	f001 fdc9 	bl	8009034 <vPortExitCritical>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074b2:	f001 fd8b 	bl	8008fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074be:	2301      	movs	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e001      	b.n	80074c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074c8:	f001 fdb4 	bl	8009034 <vPortExitCritical>

	return xReturn;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074de:	f001 fd75 	bl	8008fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d102      	bne.n	80074f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e001      	b.n	80074f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074f8:	f001 fd9c 	bl	8009034 <vPortExitCritical>

	return xReturn;
 80074fc:	68fb      	ldr	r3, [r7, #12]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e014      	b.n	8007542 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007518:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <vQueueAddToRegistry+0x50>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007524:	490c      	ldr	r1, [pc, #48]	; (8007558 <vQueueAddToRegistry+0x50>)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <vQueueAddToRegistry+0x50>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4413      	add	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800753a:	e006      	b.n	800754a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b07      	cmp	r3, #7
 8007546:	d9e7      	bls.n	8007518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20005820 	.word	0x20005820

0800755c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e016      	b.n	8007598 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800756a:	4a10      	ldr	r2, [pc, #64]	; (80075ac <vQueueUnregisterQueue+0x50>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d10b      	bne.n	8007592 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800757a:	4a0c      	ldr	r2, [pc, #48]	; (80075ac <vQueueUnregisterQueue+0x50>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2100      	movs	r1, #0
 8007580:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007584:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vQueueUnregisterQueue+0x50>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4413      	add	r3, r2
 800758c:	2200      	movs	r2, #0
 800758e:	605a      	str	r2, [r3, #4]
				break;
 8007590:	e006      	b.n	80075a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b07      	cmp	r3, #7
 800759c:	d9e5      	bls.n	800756a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20005820 	.word	0x20005820

080075b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075c0:	f001 fd04 	bl	8008fcc <vPortEnterCritical>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075d0:	d103      	bne.n	80075da <vQueueWaitForMessageRestricted+0x2a>
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075e0:	b25b      	sxtb	r3, r3
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e6:	d103      	bne.n	80075f0 <vQueueWaitForMessageRestricted+0x40>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075f0:	f001 fd20 	bl	8009034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3324      	adds	r3, #36	; 0x24
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fc89 	bl	8007f1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800760a:	6978      	ldr	r0, [r7, #20]
 800760c:	f7ff fefb 	bl	8007406 <prvUnlockQueue>
	}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	; 0x38
 800761c:	af04      	add	r7, sp, #16
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10c      	bne.n	8007646 <xTaskCreateStatic+0x2e>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	b672      	cpsid	i
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	b662      	cpsie	i
 8007640:	623b      	str	r3, [r7, #32]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10c      	bne.n	8007666 <xTaskCreateStatic+0x4e>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	b672      	cpsid	i
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	b662      	cpsie	i
 8007660:	61fb      	str	r3, [r7, #28]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007666:	23bc      	movs	r3, #188	; 0xbc
 8007668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2bbc      	cmp	r3, #188	; 0xbc
 800766e:	d00c      	beq.n	800768a <xTaskCreateStatic+0x72>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	b672      	cpsid	i
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	b662      	cpsie	i
 8007684:	61bb      	str	r3, [r7, #24]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800768a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01e      	beq.n	80076d0 <xTaskCreateStatic+0xb8>
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01b      	beq.n	80076d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076aa:	2300      	movs	r3, #0
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	f107 0314 	add.w	r3, r7, #20
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f850 	bl	8007768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ca:	f000 f8f5 	bl	80078b8 <prvAddNewTaskToReadyList>
 80076ce:	e001      	b.n	80076d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076d4:	697b      	ldr	r3, [r7, #20]
	}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3728      	adds	r7, #40	; 0x28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b08c      	sub	sp, #48	; 0x30
 80076e2:	af04      	add	r7, sp, #16
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076ee:	88fb      	ldrh	r3, [r7, #6]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fd96 	bl	8009224 <pvPortMalloc>
 80076f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007700:	20bc      	movs	r0, #188	; 0xbc
 8007702:	f001 fd8f 	bl	8009224 <pvPortMalloc>
 8007706:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
 8007714:	e005      	b.n	8007722 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007716:	6978      	ldr	r0, [r7, #20]
 8007718:	f001 fe4e 	bl	80093b8 <vPortFree>
 800771c:	e001      	b.n	8007722 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d017      	beq.n	8007758 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	2300      	movs	r3, #0
 8007734:	9303      	str	r3, [sp, #12]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	9302      	str	r3, [sp, #8]
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f80e 	bl	8007768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800774c:	69f8      	ldr	r0, [r7, #28]
 800774e:	f000 f8b3 	bl	80078b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007752:	2301      	movs	r3, #1
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	e002      	b.n	800775e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800775c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800775e:	69bb      	ldr	r3, [r7, #24]
	}
 8007760:	4618      	mov	r0, r3
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	461a      	mov	r2, r3
 8007780:	21a5      	movs	r1, #165	; 0xa5
 8007782:	f00f f850 	bl	8016826 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007790:	440b      	add	r3, r1
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	f023 0307 	bic.w	r3, r3, #7
 800779e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	b672      	cpsid	i
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	b662      	cpsie	i
 80077be:	617b      	str	r3, [r7, #20]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01f      	beq.n	800780a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e012      	b.n	80077f6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	7819      	ldrb	r1, [r3, #0]
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	3334      	adds	r3, #52	; 0x34
 80077e0:	460a      	mov	r2, r1
 80077e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	3301      	adds	r3, #1
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b0f      	cmp	r3, #15
 80077fa:	d9e9      	bls.n	80077d0 <prvInitialiseNewTask+0x68>
 80077fc:	e000      	b.n	8007800 <prvInitialiseNewTask+0x98>
			{
				break;
 80077fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007808:	e003      	b.n	8007812 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	2b37      	cmp	r3, #55	; 0x37
 8007816:	d901      	bls.n	800781c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007818:	2337      	movs	r3, #55	; 0x37
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2200      	movs	r2, #0
 800782c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	3304      	adds	r3, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fd0c 	bl	8006250 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	3318      	adds	r3, #24
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fd07 	bl	8006250 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2200      	movs	r2, #0
 8007864:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	3354      	adds	r3, #84	; 0x54
 800786c:	2260      	movs	r2, #96	; 0x60
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f00e ffd8 	bl	8016826 <memset>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <prvInitialiseNewTask+0x144>)
 800787a:	659a      	str	r2, [r3, #88]	; 0x58
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <prvInitialiseNewTask+0x148>)
 8007880:	65da      	str	r2, [r3, #92]	; 0x5c
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	4a0b      	ldr	r2, [pc, #44]	; (80078b4 <prvInitialiseNewTask+0x14c>)
 8007886:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	69b8      	ldr	r0, [r7, #24]
 800788e:	f001 fa8f 	bl	8008db0 <pxPortInitialiseStack>
 8007892:	4602      	mov	r2, r0
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a4:	bf00      	nop
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	0801ce30 	.word	0x0801ce30
 80078b0:	0801ce50 	.word	0x0801ce50
 80078b4:	0801ce10 	.word	0x0801ce10

080078b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078c0:	f001 fb84 	bl	8008fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078c4:	4b2d      	ldr	r3, [pc, #180]	; (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	4a2c      	ldr	r2, [pc, #176]	; (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ce:	4b2c      	ldr	r3, [pc, #176]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078d6:	4a2a      	ldr	r2, [pc, #168]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078dc:	4b27      	ldr	r3, [pc, #156]	; (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d110      	bne.n	8007906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078e4:	f000 fc4e 	bl	8008184 <prvInitialiseTaskLists>
 80078e8:	e00d      	b.n	8007906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ea:	4b26      	ldr	r3, [pc, #152]	; (8007984 <prvAddNewTaskToReadyList+0xcc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078f2:	4b23      	ldr	r3, [pc, #140]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d802      	bhi.n	8007906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007900:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <prvAddNewTaskToReadyList+0xd0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <prvAddNewTaskToReadyList+0xd0>)
 800790e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007910:	4b1d      	ldr	r3, [pc, #116]	; (8007988 <prvAddNewTaskToReadyList+0xd0>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	4b1b      	ldr	r3, [pc, #108]	; (800798c <prvAddNewTaskToReadyList+0xd4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <prvAddNewTaskToReadyList+0x74>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	4a18      	ldr	r2, [pc, #96]	; (800798c <prvAddNewTaskToReadyList+0xd4>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4a15      	ldr	r2, [pc, #84]	; (8007990 <prvAddNewTaskToReadyList+0xd8>)
 800793a:	441a      	add	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fc91 	bl	800626a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007948:	f001 fb74 	bl	8009034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <prvAddNewTaskToReadyList+0xcc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007954:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	429a      	cmp	r2, r3
 8007960:	d207      	bcs.n	8007972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007962:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <prvAddNewTaskToReadyList+0xdc>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20005d34 	.word	0x20005d34
 8007980:	20005860 	.word	0x20005860
 8007984:	20005d40 	.word	0x20005d40
 8007988:	20005d50 	.word	0x20005d50
 800798c:	20005d3c 	.word	0x20005d3c
 8007990:	20005864 	.word	0x20005864
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d019      	beq.n	80079de <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <vTaskDelay+0x64>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <vTaskDelay+0x34>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 80079cc:	f000 f88e 	bl	8007aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fe3c 	bl	8008650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079d8:	f000 f896 	bl	8007b08 <xTaskResumeAll>
 80079dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d107      	bne.n	80079f4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <vTaskDelay+0x68>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20005d5c 	.word	0x20005d5c
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08a      	sub	sp, #40	; 0x28
 8007a08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a12:	463a      	mov	r2, r7
 8007a14:	1d39      	adds	r1, r7, #4
 8007a16:	f107 0308 	add.w	r3, r7, #8
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fbc4 	bl	80061a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	9202      	str	r2, [sp, #8]
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	460a      	mov	r2, r1
 8007a32:	4926      	ldr	r1, [pc, #152]	; (8007acc <vTaskStartScheduler+0xc8>)
 8007a34:	4826      	ldr	r0, [pc, #152]	; (8007ad0 <vTaskStartScheduler+0xcc>)
 8007a36:	f7ff fdef 	bl	8007618 <xTaskCreateStatic>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4a25      	ldr	r2, [pc, #148]	; (8007ad4 <vTaskStartScheduler+0xd0>)
 8007a3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a40:	4b24      	ldr	r3, [pc, #144]	; (8007ad4 <vTaskStartScheduler+0xd0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e001      	b.n	8007a52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d102      	bne.n	8007a5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a58:	f000 fe4e 	bl	80086f8 <xTimerCreateTimerTask>
 8007a5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d11d      	bne.n	8007aa0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	b672      	cpsid	i
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	b662      	cpsie	i
 8007a78:	613b      	str	r3, [r7, #16]
}
 8007a7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <vTaskStartScheduler+0xd4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3354      	adds	r3, #84	; 0x54
 8007a82:	4a16      	ldr	r2, [pc, #88]	; (8007adc <vTaskStartScheduler+0xd8>)
 8007a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a86:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <vTaskStartScheduler+0xdc>)
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <vTaskStartScheduler+0xe0>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a94:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <vTaskStartScheduler+0xe4>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a9a:	f001 fa19 	bl	8008ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a9e:	e010      	b.n	8007ac2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa6:	d10c      	bne.n	8007ac2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	b672      	cpsid	i
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	b662      	cpsie	i
 8007abc:	60fb      	str	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <vTaskStartScheduler+0xbc>
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	08019a54 	.word	0x08019a54
 8007ad0:	08008155 	.word	0x08008155
 8007ad4:	20005d58 	.word	0x20005d58
 8007ad8:	20005860 	.word	0x20005860
 8007adc:	2000002c 	.word	0x2000002c
 8007ae0:	20005d54 	.word	0x20005d54
 8007ae4:	20005d40 	.word	0x20005d40
 8007ae8:	20005d38 	.word	0x20005d38

08007aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <vTaskSuspendAll+0x18>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a03      	ldr	r2, [pc, #12]	; (8007b04 <vTaskSuspendAll+0x18>)
 8007af8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007afa:	bf00      	nop
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	20005d5c 	.word	0x20005d5c

08007b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b16:	4b43      	ldr	r3, [pc, #268]	; (8007c24 <xTaskResumeAll+0x11c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10c      	bne.n	8007b38 <xTaskResumeAll+0x30>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	b672      	cpsid	i
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	b662      	cpsie	i
 8007b32:	603b      	str	r3, [r7, #0]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b38:	f001 fa48 	bl	8008fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b3c:	4b39      	ldr	r3, [pc, #228]	; (8007c24 <xTaskResumeAll+0x11c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	4a38      	ldr	r2, [pc, #224]	; (8007c24 <xTaskResumeAll+0x11c>)
 8007b44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b46:	4b37      	ldr	r3, [pc, #220]	; (8007c24 <xTaskResumeAll+0x11c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d162      	bne.n	8007c14 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b4e:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <xTaskResumeAll+0x120>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d05e      	beq.n	8007c14 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b56:	e02f      	b.n	8007bb8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b58:	4b34      	ldr	r3, [pc, #208]	; (8007c2c <xTaskResumeAll+0x124>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3318      	adds	r3, #24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe fbdd 	bl	8006324 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fbd8 	bl	8006324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <xTaskResumeAll+0x128>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d903      	bls.n	8007b88 <xTaskResumeAll+0x80>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a2a      	ldr	r2, [pc, #168]	; (8007c30 <xTaskResumeAll+0x128>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4a27      	ldr	r2, [pc, #156]	; (8007c34 <xTaskResumeAll+0x12c>)
 8007b96:	441a      	add	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe fb63 	bl	800626a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4b23      	ldr	r3, [pc, #140]	; (8007c38 <xTaskResumeAll+0x130>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007bb2:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <xTaskResumeAll+0x134>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bb8:	4b1c      	ldr	r3, [pc, #112]	; (8007c2c <xTaskResumeAll+0x124>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1cb      	bne.n	8007b58 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bc6:	f000 fb81 	bl	80082cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007bca:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <xTaskResumeAll+0x138>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d010      	beq.n	8007bf8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bd6:	f000 f859 	bl	8007c8c <xTaskIncrementTick>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007be0:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <xTaskResumeAll+0x134>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f1      	bne.n	8007bd6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007bf2:	4b13      	ldr	r3, [pc, #76]	; (8007c40 <xTaskResumeAll+0x138>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bf8:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <xTaskResumeAll+0x134>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c04:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <xTaskResumeAll+0x13c>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c14:	f001 fa0e 	bl	8009034 <vPortExitCritical>

	return xAlreadyYielded;
 8007c18:	68bb      	ldr	r3, [r7, #8]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20005d5c 	.word	0x20005d5c
 8007c28:	20005d34 	.word	0x20005d34
 8007c2c:	20005cf4 	.word	0x20005cf4
 8007c30:	20005d3c 	.word	0x20005d3c
 8007c34:	20005864 	.word	0x20005864
 8007c38:	20005860 	.word	0x20005860
 8007c3c:	20005d48 	.word	0x20005d48
 8007c40:	20005d44 	.word	0x20005d44
 8007c44:	e000ed04 	.word	0xe000ed04

08007c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <xTaskGetTickCount+0x1c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c54:	687b      	ldr	r3, [r7, #4]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20005d38 	.word	0x20005d38

08007c68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c6e:	f001 fa95 	bl	800919c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007c76:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <xTaskGetTickCountFromISR+0x20>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c7c:	683b      	ldr	r3, [r7, #0]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20005d38 	.word	0x20005d38

08007c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c96:	4b50      	ldr	r3, [pc, #320]	; (8007dd8 <xTaskIncrementTick+0x14c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 808b 	bne.w	8007db6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ca0:	4b4e      	ldr	r3, [pc, #312]	; (8007ddc <xTaskIncrementTick+0x150>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ca8:	4a4c      	ldr	r2, [pc, #304]	; (8007ddc <xTaskIncrementTick+0x150>)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d122      	bne.n	8007cfa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cb4:	4b4a      	ldr	r3, [pc, #296]	; (8007de0 <xTaskIncrementTick+0x154>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	b672      	cpsid	i
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	b662      	cpsie	i
 8007cd2:	603b      	str	r3, [r7, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xTaskIncrementTick+0x4a>
 8007cd8:	4b41      	ldr	r3, [pc, #260]	; (8007de0 <xTaskIncrementTick+0x154>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <xTaskIncrementTick+0x158>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a3f      	ldr	r2, [pc, #252]	; (8007de0 <xTaskIncrementTick+0x154>)
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4a3f      	ldr	r2, [pc, #252]	; (8007de4 <xTaskIncrementTick+0x158>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4b3e      	ldr	r3, [pc, #248]	; (8007de8 <xTaskIncrementTick+0x15c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	4a3d      	ldr	r2, [pc, #244]	; (8007de8 <xTaskIncrementTick+0x15c>)
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f000 fae9 	bl	80082cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cfa:	4b3c      	ldr	r3, [pc, #240]	; (8007dec <xTaskIncrementTick+0x160>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d349      	bcc.n	8007d98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d04:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <xTaskIncrementTick+0x154>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0e:	4b37      	ldr	r3, [pc, #220]	; (8007dec <xTaskIncrementTick+0x160>)
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d14:	601a      	str	r2, [r3, #0]
					break;
 8007d16:	e03f      	b.n	8007d98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b31      	ldr	r3, [pc, #196]	; (8007de0 <xTaskIncrementTick+0x154>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d203      	bcs.n	8007d38 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d30:	4a2e      	ldr	r2, [pc, #184]	; (8007dec <xTaskIncrementTick+0x160>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d36:	e02f      	b.n	8007d98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe faf1 	bl	8006324 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	3318      	adds	r3, #24
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fae8 	bl	8006324 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	4b25      	ldr	r3, [pc, #148]	; (8007df0 <xTaskIncrementTick+0x164>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d903      	bls.n	8007d68 <xTaskIncrementTick+0xdc>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <xTaskIncrementTick+0x164>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a1f      	ldr	r2, [pc, #124]	; (8007df4 <xTaskIncrementTick+0x168>)
 8007d76:	441a      	add	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7fe fa73 	bl	800626a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <xTaskIncrementTick+0x16c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d3b8      	bcc.n	8007d04 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d96:	e7b5      	b.n	8007d04 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <xTaskIncrementTick+0x16c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9e:	4915      	ldr	r1, [pc, #84]	; (8007df4 <xTaskIncrementTick+0x168>)
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d907      	bls.n	8007dc0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007db0:	2301      	movs	r3, #1
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	e004      	b.n	8007dc0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <xTaskIncrementTick+0x170>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	4a0f      	ldr	r2, [pc, #60]	; (8007dfc <xTaskIncrementTick+0x170>)
 8007dbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <xTaskIncrementTick+0x174>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20005d5c 	.word	0x20005d5c
 8007ddc:	20005d38 	.word	0x20005d38
 8007de0:	20005cec 	.word	0x20005cec
 8007de4:	20005cf0 	.word	0x20005cf0
 8007de8:	20005d4c 	.word	0x20005d4c
 8007dec:	20005d54 	.word	0x20005d54
 8007df0:	20005d3c 	.word	0x20005d3c
 8007df4:	20005864 	.word	0x20005864
 8007df8:	20005860 	.word	0x20005860
 8007dfc:	20005d44 	.word	0x20005d44
 8007e00:	20005d48 	.word	0x20005d48

08007e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e0a:	4b2b      	ldr	r3, [pc, #172]	; (8007eb8 <vTaskSwitchContext+0xb4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e12:	4b2a      	ldr	r3, [pc, #168]	; (8007ebc <vTaskSwitchContext+0xb8>)
 8007e14:	2201      	movs	r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e18:	e048      	b.n	8007eac <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007e1a:	4b28      	ldr	r3, [pc, #160]	; (8007ebc <vTaskSwitchContext+0xb8>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <vTaskSwitchContext+0xbc>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	e012      	b.n	8007e4e <vTaskSwitchContext+0x4a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10c      	bne.n	8007e48 <vTaskSwitchContext+0x44>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	b672      	cpsid	i
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	b662      	cpsie	i
 8007e42:	607b      	str	r3, [r7, #4]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <vTaskSwitchContext+0x42>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	491d      	ldr	r1, [pc, #116]	; (8007ec4 <vTaskSwitchContext+0xc0>)
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0e2      	beq.n	8007e28 <vTaskSwitchContext+0x24>
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <vTaskSwitchContext+0xc0>)
 8007e6e:	4413      	add	r3, r2
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3308      	adds	r3, #8
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d104      	bne.n	8007e92 <vTaskSwitchContext+0x8e>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	4a0b      	ldr	r2, [pc, #44]	; (8007ec8 <vTaskSwitchContext+0xc4>)
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	4a08      	ldr	r2, [pc, #32]	; (8007ec0 <vTaskSwitchContext+0xbc>)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <vTaskSwitchContext+0xc4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3354      	adds	r3, #84	; 0x54
 8007ea8:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <vTaskSwitchContext+0xc8>)
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20005d5c 	.word	0x20005d5c
 8007ebc:	20005d48 	.word	0x20005d48
 8007ec0:	20005d3c 	.word	0x20005d3c
 8007ec4:	20005864 	.word	0x20005864
 8007ec8:	20005860 	.word	0x20005860
 8007ecc:	2000002c 	.word	0x2000002c

08007ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10c      	bne.n	8007efa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	b672      	cpsid	i
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	b662      	cpsie	i
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007efa:	4b07      	ldr	r3, [pc, #28]	; (8007f18 <vTaskPlaceOnEventList+0x48>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3318      	adds	r3, #24
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fe f9d5 	bl	80062b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f08:	2101      	movs	r1, #1
 8007f0a:	6838      	ldr	r0, [r7, #0]
 8007f0c:	f000 fba0 	bl	8008650 <prvAddCurrentTaskToDelayedList>
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20005860 	.word	0x20005860

08007f1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10c      	bne.n	8007f48 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
 8007f42:	617b      	str	r3, [r7, #20]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <vTaskPlaceOnEventListRestricted+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3318      	adds	r3, #24
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7fe f98a 	bl	800626a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	68b8      	ldr	r0, [r7, #8]
 8007f66:	f000 fb73 	bl	8008650 <prvAddCurrentTaskToDelayedList>
	}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20005860 	.word	0x20005860

08007f78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10c      	bne.n	8007fa8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	60fb      	str	r3, [r7, #12]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	3318      	adds	r3, #24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe f9b9 	bl	8006324 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb2:	4b1e      	ldr	r3, [pc, #120]	; (800802c <xTaskRemoveFromEventList+0xb4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11d      	bne.n	8007ff6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe f9b0 	bl	8006324 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <xTaskRemoveFromEventList+0xb8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d903      	bls.n	8007fd8 <xTaskRemoveFromEventList+0x60>
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a16      	ldr	r2, [pc, #88]	; (8008030 <xTaskRemoveFromEventList+0xb8>)
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <xTaskRemoveFromEventList+0xbc>)
 8007fe6:	441a      	add	r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7fe f93b 	bl	800626a <vListInsertEnd>
 8007ff4:	e005      	b.n	8008002 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	3318      	adds	r3, #24
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	480e      	ldr	r0, [pc, #56]	; (8008038 <xTaskRemoveFromEventList+0xc0>)
 8007ffe:	f7fe f934 	bl	800626a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <xTaskRemoveFromEventList+0xc4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d905      	bls.n	800801c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008010:	2301      	movs	r3, #1
 8008012:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <xTaskRemoveFromEventList+0xc8>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	e001      	b.n	8008020 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008020:	697b      	ldr	r3, [r7, #20]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20005d5c 	.word	0x20005d5c
 8008030:	20005d3c 	.word	0x20005d3c
 8008034:	20005864 	.word	0x20005864
 8008038:	20005cf4 	.word	0x20005cf4
 800803c:	20005860 	.word	0x20005860
 8008040:	20005d48 	.word	0x20005d48

08008044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <vTaskInternalSetTimeOutState+0x24>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <vTaskInternalSetTimeOutState+0x28>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	605a      	str	r2, [r3, #4]
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20005d4c 	.word	0x20005d4c
 800806c:	20005d38 	.word	0x20005d38

08008070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10c      	bne.n	800809a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	b672      	cpsid	i
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	b662      	cpsie	i
 8008094:	613b      	str	r3, [r7, #16]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10c      	bne.n	80080ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	60fb      	str	r3, [r7, #12]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80080ba:	f000 ff87 	bl	8008fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080be:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <xTaskCheckForTimeOut+0xc4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d6:	d102      	bne.n	80080de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	e023      	b.n	8008126 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <xTaskCheckForTimeOut+0xc8>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d007      	beq.n	80080fa <xTaskCheckForTimeOut+0x8a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e015      	b.n	8008126 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	429a      	cmp	r2, r3
 8008102:	d20b      	bcs.n	800811c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff ff97 	bl	8008044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	61fb      	str	r3, [r7, #28]
 800811a:	e004      	b.n	8008126 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008122:	2301      	movs	r3, #1
 8008124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008126:	f000 ff85 	bl	8009034 <vPortExitCritical>

	return xReturn;
 800812a:	69fb      	ldr	r3, [r7, #28]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20005d38 	.word	0x20005d38
 8008138:	20005d4c 	.word	0x20005d4c

0800813c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008140:	4b03      	ldr	r3, [pc, #12]	; (8008150 <vTaskMissedYield+0x14>)
 8008142:	2201      	movs	r2, #1
 8008144:	601a      	str	r2, [r3, #0]
}
 8008146:	bf00      	nop
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	20005d48 	.word	0x20005d48

08008154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800815c:	f000 f852 	bl	8008204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008160:	4b06      	ldr	r3, [pc, #24]	; (800817c <prvIdleTask+0x28>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d9f9      	bls.n	800815c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <prvIdleTask+0x2c>)
 800816a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008178:	e7f0      	b.n	800815c <prvIdleTask+0x8>
 800817a:	bf00      	nop
 800817c:	20005864 	.word	0x20005864
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]
 800818e:	e00c      	b.n	80081aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <prvInitialiseTaskLists+0x60>)
 800819c:	4413      	add	r3, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe f836 	bl	8006210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b37      	cmp	r3, #55	; 0x37
 80081ae:	d9ef      	bls.n	8008190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081b0:	480d      	ldr	r0, [pc, #52]	; (80081e8 <prvInitialiseTaskLists+0x64>)
 80081b2:	f7fe f82d 	bl	8006210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081b6:	480d      	ldr	r0, [pc, #52]	; (80081ec <prvInitialiseTaskLists+0x68>)
 80081b8:	f7fe f82a 	bl	8006210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081bc:	480c      	ldr	r0, [pc, #48]	; (80081f0 <prvInitialiseTaskLists+0x6c>)
 80081be:	f7fe f827 	bl	8006210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081c2:	480c      	ldr	r0, [pc, #48]	; (80081f4 <prvInitialiseTaskLists+0x70>)
 80081c4:	f7fe f824 	bl	8006210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081c8:	480b      	ldr	r0, [pc, #44]	; (80081f8 <prvInitialiseTaskLists+0x74>)
 80081ca:	f7fe f821 	bl	8006210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ce:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <prvInitialiseTaskLists+0x78>)
 80081d0:	4a05      	ldr	r2, [pc, #20]	; (80081e8 <prvInitialiseTaskLists+0x64>)
 80081d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081d4:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <prvInitialiseTaskLists+0x7c>)
 80081d6:	4a05      	ldr	r2, [pc, #20]	; (80081ec <prvInitialiseTaskLists+0x68>)
 80081d8:	601a      	str	r2, [r3, #0]
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20005864 	.word	0x20005864
 80081e8:	20005cc4 	.word	0x20005cc4
 80081ec:	20005cd8 	.word	0x20005cd8
 80081f0:	20005cf4 	.word	0x20005cf4
 80081f4:	20005d08 	.word	0x20005d08
 80081f8:	20005d20 	.word	0x20005d20
 80081fc:	20005cec 	.word	0x20005cec
 8008200:	20005cf0 	.word	0x20005cf0

08008204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800820a:	e019      	b.n	8008240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800820c:	f000 fede 	bl	8008fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008210:	4b10      	ldr	r3, [pc, #64]	; (8008254 <prvCheckTasksWaitingTermination+0x50>)
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe f881 	bl	8006324 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008222:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <prvCheckTasksWaitingTermination+0x54>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3b01      	subs	r3, #1
 8008228:	4a0b      	ldr	r2, [pc, #44]	; (8008258 <prvCheckTasksWaitingTermination+0x54>)
 800822a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800822c:	4b0b      	ldr	r3, [pc, #44]	; (800825c <prvCheckTasksWaitingTermination+0x58>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	4a0a      	ldr	r2, [pc, #40]	; (800825c <prvCheckTasksWaitingTermination+0x58>)
 8008234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008236:	f000 fefd 	bl	8009034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f810 	bl	8008260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008240:	4b06      	ldr	r3, [pc, #24]	; (800825c <prvCheckTasksWaitingTermination+0x58>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e1      	bne.n	800820c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20005d08 	.word	0x20005d08
 8008258:	20005d34 	.word	0x20005d34
 800825c:	20005d1c 	.word	0x20005d1c

08008260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3354      	adds	r3, #84	; 0x54
 800826c:	4618      	mov	r0, r3
 800826e:	f00e fbdb 	bl	8016a28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008278:	2b00      	cmp	r3, #0
 800827a:	d108      	bne.n	800828e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	4618      	mov	r0, r3
 8008282:	f001 f899 	bl	80093b8 <vPortFree>
				vPortFree( pxTCB );
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f896 	bl	80093b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800828c:	e01a      	b.n	80082c4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008294:	2b01      	cmp	r3, #1
 8008296:	d103      	bne.n	80082a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f88d 	bl	80093b8 <vPortFree>
	}
 800829e:	e011      	b.n	80082c4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d00c      	beq.n	80082c4 <prvDeleteTCB+0x64>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	b672      	cpsid	i
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	b662      	cpsie	i
 80082be:	60fb      	str	r3, [r7, #12]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <prvDeleteTCB+0x62>
	}
 80082c4:	bf00      	nop
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d2:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <prvResetNextTaskUnblockTime+0x38>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <prvResetNextTaskUnblockTime+0x3c>)
 80082de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082e4:	e008      	b.n	80082f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e6:	4b07      	ldr	r3, [pc, #28]	; (8008304 <prvResetNextTaskUnblockTime+0x38>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	4a04      	ldr	r2, [pc, #16]	; (8008308 <prvResetNextTaskUnblockTime+0x3c>)
 80082f6:	6013      	str	r3, [r2, #0]
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	20005cec 	.word	0x20005cec
 8008308:	20005d54 	.word	0x20005d54

0800830c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <xTaskGetCurrentTaskHandle+0x1c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008318:	687b      	ldr	r3, [r7, #4]
	}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	20005860 	.word	0x20005860

0800832c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008332:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <xTaskGetSchedulerState+0x34>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800833a:	2301      	movs	r3, #1
 800833c:	607b      	str	r3, [r7, #4]
 800833e:	e008      	b.n	8008352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008340:	4b08      	ldr	r3, [pc, #32]	; (8008364 <xTaskGetSchedulerState+0x38>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008348:	2302      	movs	r3, #2
 800834a:	607b      	str	r3, [r7, #4]
 800834c:	e001      	b.n	8008352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008352:	687b      	ldr	r3, [r7, #4]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	20005d40 	.word	0x20005d40
 8008364:	20005d5c 	.word	0x20005d5c

08008368 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d051      	beq.n	8008422 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008382:	4b2a      	ldr	r3, [pc, #168]	; (800842c <xTaskPriorityInherit+0xc4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	429a      	cmp	r2, r3
 800838a:	d241      	bcs.n	8008410 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	db06      	blt.n	80083a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008394:	4b25      	ldr	r3, [pc, #148]	; (800842c <xTaskPriorityInherit+0xc4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6959      	ldr	r1, [r3, #20]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <xTaskPriorityInherit+0xc8>)
 80083b4:	4413      	add	r3, r2
 80083b6:	4299      	cmp	r1, r3
 80083b8:	d122      	bne.n	8008400 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	3304      	adds	r3, #4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd ffb0 	bl	8006324 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <xTaskPriorityInherit+0xc4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4b18      	ldr	r3, [pc, #96]	; (8008434 <xTaskPriorityInherit+0xcc>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <xTaskPriorityInherit+0x7a>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	4a15      	ldr	r2, [pc, #84]	; (8008434 <xTaskPriorityInherit+0xcc>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a10      	ldr	r2, [pc, #64]	; (8008430 <xTaskPriorityInherit+0xc8>)
 80083f0:	441a      	add	r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fd ff36 	bl	800626a <vListInsertEnd>
 80083fe:	e004      	b.n	800840a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008400:	4b0a      	ldr	r3, [pc, #40]	; (800842c <xTaskPriorityInherit+0xc4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e008      	b.n	8008422 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <xTaskPriorityInherit+0xc4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d201      	bcs.n	8008422 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008422:	68fb      	ldr	r3, [r7, #12]
	}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20005860 	.word	0x20005860
 8008430:	20005864 	.word	0x20005864
 8008434:	20005d3c 	.word	0x20005d3c

08008438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d05a      	beq.n	8008504 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800844e:	4b30      	ldr	r3, [pc, #192]	; (8008510 <xTaskPriorityDisinherit+0xd8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	429a      	cmp	r2, r3
 8008456:	d00c      	beq.n	8008472 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10c      	bne.n	8008494 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	b672      	cpsid	i
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	b662      	cpsie	i
 800848e:	60bb      	str	r3, [r7, #8]
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d02c      	beq.n	8008504 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d128      	bne.n	8008504 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd ff34 	bl	8006324 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <xTaskPriorityDisinherit+0xdc>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d903      	bls.n	80084e4 <xTaskPriorityDisinherit+0xac>
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	4a0c      	ldr	r2, [pc, #48]	; (8008514 <xTaskPriorityDisinherit+0xdc>)
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4a09      	ldr	r2, [pc, #36]	; (8008518 <xTaskPriorityDisinherit+0xe0>)
 80084f2:	441a      	add	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4619      	mov	r1, r3
 80084fa:	4610      	mov	r0, r2
 80084fc:	f7fd feb5 	bl	800626a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008504:	697b      	ldr	r3, [r7, #20]
	}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20005860 	.word	0x20005860
 8008514:	20005d3c 	.word	0x20005d3c
 8008518:	20005864 	.word	0x20005864

0800851c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800852a:	2301      	movs	r3, #1
 800852c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d06e      	beq.n	8008612 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10c      	bne.n	8008556 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	60fb      	str	r3, [r7, #12]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d902      	bls.n	8008566 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	e002      	b.n	800856c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	429a      	cmp	r2, r3
 8008574:	d04d      	beq.n	8008612 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	429a      	cmp	r2, r3
 800857e:	d148      	bne.n	8008612 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008580:	4b26      	ldr	r3, [pc, #152]	; (800861c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	429a      	cmp	r2, r3
 8008588:	d10c      	bne.n	80085a4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	b672      	cpsid	i
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	b662      	cpsie	i
 800859e:	60bb      	str	r3, [r7, #8]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	db04      	blt.n	80085c2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	6959      	ldr	r1, [r3, #20]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4613      	mov	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4a13      	ldr	r2, [pc, #76]	; (8008620 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80085d2:	4413      	add	r3, r2
 80085d4:	4299      	cmp	r1, r3
 80085d6:	d11c      	bne.n	8008612 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	3304      	adds	r3, #4
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fd fea1 	bl	8006324 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e6:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d903      	bls.n	80085f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	4a0c      	ldr	r2, [pc, #48]	; (8008624 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4a07      	ldr	r2, [pc, #28]	; (8008620 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008604:	441a      	add	r2, r3
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f7fd fe2c 	bl	800626a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008612:	bf00      	nop
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20005860 	.word	0x20005860
 8008620:	20005864 	.word	0x20005864
 8008624:	20005d3c 	.word	0x20005d3c

08008628 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800862c:	4b07      	ldr	r3, [pc, #28]	; (800864c <pvTaskIncrementMutexHeldCount+0x24>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <pvTaskIncrementMutexHeldCount+0x24>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800863a:	3201      	adds	r2, #1
 800863c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800863e:	4b03      	ldr	r3, [pc, #12]	; (800864c <pvTaskIncrementMutexHeldCount+0x24>)
 8008640:	681b      	ldr	r3, [r3, #0]
	}
 8008642:	4618      	mov	r0, r3
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	20005860 	.word	0x20005860

08008650 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008660:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd fe5c 	bl	8006324 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008672:	d10a      	bne.n	800868a <prvAddCurrentTaskToDelayedList+0x3a>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800867a:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4819      	ldr	r0, [pc, #100]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008684:	f7fd fdf1 	bl	800626a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008688:	e026      	b.n	80086d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4413      	add	r3, r2
 8008690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008692:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d209      	bcs.n	80086b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	4610      	mov	r0, r2
 80086b0:	f7fd fdff 	bl	80062b2 <vListInsert>
}
 80086b4:	e010      	b.n	80086d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f7fd fdf5 	bl	80062b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d202      	bcs.n	80086d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086d2:	4a08      	ldr	r2, [pc, #32]	; (80086f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6013      	str	r3, [r2, #0]
}
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20005d38 	.word	0x20005d38
 80086e4:	20005860 	.word	0x20005860
 80086e8:	20005d20 	.word	0x20005d20
 80086ec:	20005cf0 	.word	0x20005cf0
 80086f0:	20005cec 	.word	0x20005cec
 80086f4:	20005d54 	.word	0x20005d54

080086f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008702:	f000 fb15 	bl	8008d30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008706:	4b1d      	ldr	r3, [pc, #116]	; (800877c <xTimerCreateTimerTask+0x84>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d021      	beq.n	8008752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008716:	1d3a      	adds	r2, r7, #4
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd fd5b 	bl	80061dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	9202      	str	r2, [sp, #8]
 800872e:	9301      	str	r3, [sp, #4]
 8008730:	2302      	movs	r3, #2
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	460a      	mov	r2, r1
 8008738:	4911      	ldr	r1, [pc, #68]	; (8008780 <xTimerCreateTimerTask+0x88>)
 800873a:	4812      	ldr	r0, [pc, #72]	; (8008784 <xTimerCreateTimerTask+0x8c>)
 800873c:	f7fe ff6c 	bl	8007618 <xTaskCreateStatic>
 8008740:	4603      	mov	r3, r0
 8008742:	4a11      	ldr	r2, [pc, #68]	; (8008788 <xTimerCreateTimerTask+0x90>)
 8008744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008746:	4b10      	ldr	r3, [pc, #64]	; (8008788 <xTimerCreateTimerTask+0x90>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800874e:	2301      	movs	r3, #1
 8008750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	613b      	str	r3, [r7, #16]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008772:	697b      	ldr	r3, [r7, #20]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20005d90 	.word	0x20005d90
 8008780:	08019a5c 	.word	0x08019a5c
 8008784:	080088c9 	.word	0x080088c9
 8008788:	20005d94 	.word	0x20005d94

0800878c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	; 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800879a:	2300      	movs	r3, #0
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10c      	bne.n	80087be <xTimerGenericCommand+0x32>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	b672      	cpsid	i
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	b662      	cpsie	i
 80087b8:	623b      	str	r3, [r7, #32]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087be:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <xTimerGenericCommand+0x9c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d02a      	beq.n	800881c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b05      	cmp	r3, #5
 80087d6:	dc18      	bgt.n	800880a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087d8:	f7ff fda8 	bl	800832c <xTaskGetSchedulerState>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d109      	bne.n	80087f6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087e2:	4b11      	ldr	r3, [pc, #68]	; (8008828 <xTimerGenericCommand+0x9c>)
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f107 0110 	add.w	r1, r7, #16
 80087ea:	2300      	movs	r3, #0
 80087ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ee:	f7fe f841 	bl	8006874 <xQueueGenericSend>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24
 80087f4:	e012      	b.n	800881c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <xTimerGenericCommand+0x9c>)
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f107 0110 	add.w	r1, r7, #16
 80087fe:	2300      	movs	r3, #0
 8008800:	2200      	movs	r2, #0
 8008802:	f7fe f837 	bl	8006874 <xQueueGenericSend>
 8008806:	6278      	str	r0, [r7, #36]	; 0x24
 8008808:	e008      	b.n	800881c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800880a:	4b07      	ldr	r3, [pc, #28]	; (8008828 <xTimerGenericCommand+0x9c>)
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	f107 0110 	add.w	r1, r7, #16
 8008812:	2300      	movs	r3, #0
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	f7fe f933 	bl	8006a80 <xQueueGenericSendFromISR>
 800881a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800881e:	4618      	mov	r0, r3
 8008820:	3728      	adds	r7, #40	; 0x28
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20005d90 	.word	0x20005d90

0800882c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008836:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <prvProcessExpiredTimer+0x98>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fd fd6d 	bl	8006324 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d024      	beq.n	80088a2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	18d1      	adds	r1, r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	6978      	ldr	r0, [r7, #20]
 8008866:	f000 f8d3 	bl	8008a10 <prvInsertTimerInActiveList>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d021      	beq.n	80088b4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008870:	2300      	movs	r3, #0
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	2100      	movs	r1, #0
 800887a:	6978      	ldr	r0, [r7, #20]
 800887c:	f7ff ff86 	bl	800878c <xTimerGenericCommand>
 8008880:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d115      	bne.n	80088b4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	b672      	cpsid	i
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	b662      	cpsie	i
 800889c:	60fb      	str	r3, [r7, #12]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	4798      	blx	r3
}
 80088bc:	bf00      	nop
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20005d88 	.word	0x20005d88

080088c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f857 	bl	8008988 <prvGetNextExpireTime>
 80088da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f803 	bl	80088ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088e6:	f000 f8d5 	bl	8008a94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088ea:	e7f1      	b.n	80088d0 <prvTimerTask+0x8>

080088ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088f6:	f7ff f8f9 	bl	8007aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f866 	bl	80089d0 <prvSampleTimeNow>
 8008904:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d130      	bne.n	800896e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <prvProcessTimerOrBlockTask+0x3c>
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	429a      	cmp	r2, r3
 8008918:	d806      	bhi.n	8008928 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800891a:	f7ff f8f5 	bl	8007b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff ff83 	bl	800882c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008926:	e024      	b.n	8008972 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d008      	beq.n	8008940 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <prvProcessTimerOrBlockTask+0x90>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <prvProcessTimerOrBlockTask+0x50>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <prvProcessTimerOrBlockTask+0x52>
 800893c:	2300      	movs	r3, #0
 800893e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <prvProcessTimerOrBlockTask+0x94>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	f7fe fe2f 	bl	80075b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008952:	f7ff f8d9 	bl	8007b08 <xTaskResumeAll>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvProcessTimerOrBlockTask+0x98>)
 800895e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
}
 800896c:	e001      	b.n	8008972 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800896e:	f7ff f8cb 	bl	8007b08 <xTaskResumeAll>
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20005d8c 	.word	0x20005d8c
 8008980:	20005d90 	.word	0x20005d90
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <prvGetNextExpireTime+0x44>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <prvGetNextExpireTime+0x16>
 800899a:	2201      	movs	r2, #1
 800899c:	e000      	b.n	80089a0 <prvGetNextExpireTime+0x18>
 800899e:	2200      	movs	r2, #0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ac:	4b07      	ldr	r3, [pc, #28]	; (80089cc <prvGetNextExpireTime+0x44>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e001      	b.n	80089bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20005d88 	.word	0x20005d88

080089d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089d8:	f7ff f936 	bl	8007c48 <xTaskGetTickCount>
 80089dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <prvSampleTimeNow+0x3c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d205      	bcs.n	80089f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089e8:	f000 f93c 	bl	8008c64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e002      	b.n	80089fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <prvSampleTimeNow+0x3c>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a00:	68fb      	ldr	r3, [r7, #12]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20005d98 	.word	0x20005d98

08008a10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d812      	bhi.n	8008a5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d302      	bcc.n	8008a4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e01b      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <prvInsertTimerInActiveList+0x7c>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7fd fc2c 	bl	80062b2 <vListInsert>
 8008a5a:	e012      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d206      	bcs.n	8008a72 <prvInsertTimerInActiveList+0x62>
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d302      	bcc.n	8008a72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e007      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <prvInsertTimerInActiveList+0x80>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fd fc18 	bl	80062b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a82:	697b      	ldr	r3, [r7, #20]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20005d8c 	.word	0x20005d8c
 8008a90:	20005d88 	.word	0x20005d88

08008a94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08e      	sub	sp, #56	; 0x38
 8008a98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a9a:	e0d0      	b.n	8008c3e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da1a      	bge.n	8008ad8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10c      	bne.n	8008ac8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	b672      	cpsid	i
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	b662      	cpsie	i
 8008ac2:	61fb      	str	r3, [r7, #28]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ace:	6850      	ldr	r0, [r2, #4]
 8008ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad2:	6892      	ldr	r2, [r2, #8]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f2c0 80ae 	blt.w	8008c3c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	3304      	adds	r3, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fd fc17 	bl	8006324 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af6:	463b      	mov	r3, r7
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff ff69 	bl	80089d0 <prvSampleTimeNow>
 8008afe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	f200 809b 	bhi.w	8008c3e <prvProcessReceivedCommands+0x1aa>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <prvProcessReceivedCommands+0x7c>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b39 	.word	0x08008b39
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	08008bb1 	.word	0x08008bb1
 8008b20:	08008bc5 	.word	0x08008bc5
 8008b24:	08008c13 	.word	0x08008c13
 8008b28:	08008b39 	.word	0x08008b39
 8008b2c:	08008b39 	.word	0x08008b39
 8008b30:	08008bb1 	.word	0x08008bb1
 8008b34:	08008bc5 	.word	0x08008bc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b3e:	f043 0301 	orr.w	r3, r3, #1
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	18d1      	adds	r1, r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b58:	f7ff ff5a 	bl	8008a10 <prvInsertTimerInActiveList>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d06d      	beq.n	8008c3e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d062      	beq.n	8008c3e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	441a      	add	r2, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b8a:	f7ff fdff 	bl	800878c <xTimerGenericCommand>
 8008b8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d153      	bne.n	8008c3e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	61bb      	str	r3, [r7, #24]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bc2:	e03c      	b.n	8008c3e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10c      	bne.n	8008bfe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	b672      	cpsid	i
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	b662      	cpsie	i
 8008bf8:	617b      	str	r3, [r7, #20]
}
 8008bfa:	bf00      	nop
 8008bfc:	e7fe      	b.n	8008bfc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	18d1      	adds	r1, r2, r3
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0c:	f7ff ff00 	bl	8008a10 <prvInsertTimerInActiveList>
					break;
 8008c10:	e015      	b.n	8008c3e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c22:	f000 fbc9 	bl	80093b8 <vPortFree>
 8008c26:	e00a      	b.n	8008c3e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c2e:	f023 0301 	bic.w	r3, r3, #1
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c3a:	e000      	b.n	8008c3e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c3e:	4b08      	ldr	r3, [pc, #32]	; (8008c60 <prvProcessReceivedCommands+0x1cc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	1d39      	adds	r1, r7, #4
 8008c44:	2200      	movs	r2, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe f850 	bl	8006cec <xQueueReceive>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f47f af24 	bne.w	8008a9c <prvProcessReceivedCommands+0x8>
	}
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	3730      	adds	r7, #48	; 0x30
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20005d90 	.word	0x20005d90

08008c64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c6a:	e04a      	b.n	8008d02 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c6c:	4b2e      	ldr	r3, [pc, #184]	; (8008d28 <prvSwitchTimerLists+0xc4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c76:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <prvSwitchTimerLists+0xc4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fd fb4d 	bl	8006324 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d030      	beq.n	8008d02 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d90e      	bls.n	8008cd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cbe:	4b1a      	ldr	r3, [pc, #104]	; (8008d28 <prvSwitchTimerLists+0xc4>)
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4610      	mov	r0, r2
 8008cca:	f7fd faf2 	bl	80062b2 <vListInsert>
 8008cce:	e018      	b.n	8008d02 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	2100      	movs	r1, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7ff fd56 	bl	800878c <xTimerGenericCommand>
 8008ce0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	b672      	cpsid	i
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	b662      	cpsie	i
 8008cfc:	603b      	str	r3, [r7, #0]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d02:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <prvSwitchTimerLists+0xc4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1af      	bne.n	8008c6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <prvSwitchTimerLists+0xc4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d12:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <prvSwitchTimerLists+0xc8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a04      	ldr	r2, [pc, #16]	; (8008d28 <prvSwitchTimerLists+0xc4>)
 8008d18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d1a:	4a04      	ldr	r2, [pc, #16]	; (8008d2c <prvSwitchTimerLists+0xc8>)
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	6013      	str	r3, [r2, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20005d88 	.word	0x20005d88
 8008d2c:	20005d8c 	.word	0x20005d8c

08008d30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d36:	f000 f949 	bl	8008fcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d3a:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <prvCheckForValidListAndQueue+0x60>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d120      	bne.n	8008d84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d42:	4814      	ldr	r0, [pc, #80]	; (8008d94 <prvCheckForValidListAndQueue+0x64>)
 8008d44:	f7fd fa64 	bl	8006210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d48:	4813      	ldr	r0, [pc, #76]	; (8008d98 <prvCheckForValidListAndQueue+0x68>)
 8008d4a:	f7fd fa61 	bl	8006210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <prvCheckForValidListAndQueue+0x6c>)
 8008d50:	4a10      	ldr	r2, [pc, #64]	; (8008d94 <prvCheckForValidListAndQueue+0x64>)
 8008d52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d54:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <prvCheckForValidListAndQueue+0x70>)
 8008d56:	4a10      	ldr	r2, [pc, #64]	; (8008d98 <prvCheckForValidListAndQueue+0x68>)
 8008d58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <prvCheckForValidListAndQueue+0x74>)
 8008d60:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <prvCheckForValidListAndQueue+0x78>)
 8008d62:	2110      	movs	r1, #16
 8008d64:	200a      	movs	r0, #10
 8008d66:	f7fd fb71 	bl	800644c <xQueueGenericCreateStatic>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <prvCheckForValidListAndQueue+0x60>)
 8008d6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <prvCheckForValidListAndQueue+0x60>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <prvCheckForValidListAndQueue+0x60>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	490b      	ldr	r1, [pc, #44]	; (8008dac <prvCheckForValidListAndQueue+0x7c>)
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fbc2 	bl	8007508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d84:	f000 f956 	bl	8009034 <vPortExitCritical>
}
 8008d88:	bf00      	nop
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20005d90 	.word	0x20005d90
 8008d94:	20005d60 	.word	0x20005d60
 8008d98:	20005d74 	.word	0x20005d74
 8008d9c:	20005d88 	.word	0x20005d88
 8008da0:	20005d8c 	.word	0x20005d8c
 8008da4:	20005e3c 	.word	0x20005e3c
 8008da8:	20005d9c 	.word	0x20005d9c
 8008dac:	08019a64 	.word	0x08019a64

08008db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3b04      	subs	r3, #4
 8008dc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f023 0201 	bic.w	r2, r3, #1
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008de0:	4a0c      	ldr	r2, [pc, #48]	; (8008e14 <pxPortInitialiseStack+0x64>)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3b14      	subs	r3, #20
 8008dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3b04      	subs	r3, #4
 8008df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f06f 0202 	mvn.w	r2, #2
 8008dfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3b20      	subs	r3, #32
 8008e04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e06:	68fb      	ldr	r3, [r7, #12]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	08008e19 	.word	0x08008e19

08008e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e22:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <prvTaskExitError+0x5c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e2a:	d00c      	beq.n	8008e46 <prvTaskExitError+0x2e>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	b672      	cpsid	i
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	b662      	cpsie	i
 8008e40:	60fb      	str	r3, [r7, #12]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <prvTaskExitError+0x2c>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	b672      	cpsid	i
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	b662      	cpsie	i
 8008e5a:	60bb      	str	r3, [r7, #8]
}
 8008e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e5e:	bf00      	nop
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0fc      	beq.n	8008e60 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e66:	bf00      	nop
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000020 	.word	0x20000020
	...

08008e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <pxCurrentTCBConst2>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	6808      	ldr	r0, [r1, #0]
 8008e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	f380 8809 	msr	PSP, r0
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8811 	msr	BASEPRI, r0
 8008e9a:	4770      	bx	lr
 8008e9c:	f3af 8000 	nop.w

08008ea0 <pxCurrentTCBConst2>:
 8008ea0:	20005860 	.word	0x20005860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <prvPortStartFirstTask+0x24>)
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f380 8808 	msr	MSP, r0
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8814 	msr	CONTROL, r0
 8008eba:	b662      	cpsie	i
 8008ebc:	b661      	cpsie	f
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	df00      	svc	0
 8008ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eca:	bf00      	nop
 8008ecc:	e000ed08 	.word	0xe000ed08

08008ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ed6:	4b37      	ldr	r3, [pc, #220]	; (8008fb4 <xPortStartScheduler+0xe4>)
 8008ed8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	22ff      	movs	r2, #255	; 0xff
 8008ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4b2f      	ldr	r3, [pc, #188]	; (8008fb8 <xPortStartScheduler+0xe8>)
 8008efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008efe:	4b2f      	ldr	r3, [pc, #188]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f00:	2207      	movs	r2, #7
 8008f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f04:	e009      	b.n	8008f1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f06:	4b2d      	ldr	r3, [pc, #180]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	4a2b      	ldr	r2, [pc, #172]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f22:	2b80      	cmp	r3, #128	; 0x80
 8008f24:	d0ef      	beq.n	8008f06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f26:	4b25      	ldr	r3, [pc, #148]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f1c3 0307 	rsb	r3, r3, #7
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d00c      	beq.n	8008f4c <xPortStartScheduler+0x7c>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	b672      	cpsid	i
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	b662      	cpsie	i
 8008f46:	60bb      	str	r3, [r7, #8]
}
 8008f48:	bf00      	nop
 8008f4a:	e7fe      	b.n	8008f4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	4a1a      	ldr	r2, [pc, #104]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f56:	4b19      	ldr	r3, [pc, #100]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f5e:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <xPortStartScheduler+0xec>)
 8008f60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f6a:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <xPortStartScheduler+0xf0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a14      	ldr	r2, [pc, #80]	; (8008fc0 <xPortStartScheduler+0xf0>)
 8008f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <xPortStartScheduler+0xf0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a11      	ldr	r2, [pc, #68]	; (8008fc0 <xPortStartScheduler+0xf0>)
 8008f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f82:	f000 f8dd 	bl	8009140 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f86:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <xPortStartScheduler+0xf4>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f8c:	f000 f8fc 	bl	8009188 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f90:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <xPortStartScheduler+0xf8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a0c      	ldr	r2, [pc, #48]	; (8008fc8 <xPortStartScheduler+0xf8>)
 8008f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f9c:	f7ff ff84 	bl	8008ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fa0:	f7fe ff30 	bl	8007e04 <vTaskSwitchContext>
	prvTaskExitError();
 8008fa4:	f7ff ff38 	bl	8008e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	e000e400 	.word	0xe000e400
 8008fb8:	20005e8c 	.word	0x20005e8c
 8008fbc:	20005e90 	.word	0x20005e90
 8008fc0:	e000ed20 	.word	0xe000ed20
 8008fc4:	20000020 	.word	0x20000020
 8008fc8:	e000ef34 	.word	0xe000ef34

08008fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	b672      	cpsid	i
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	b662      	cpsie	i
 8008fe6:	607b      	str	r3, [r7, #4]
}
 8008fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fea:	4b10      	ldr	r3, [pc, #64]	; (800902c <vPortEnterCritical+0x60>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	4a0e      	ldr	r2, [pc, #56]	; (800902c <vPortEnterCritical+0x60>)
 8008ff2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <vPortEnterCritical+0x60>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d111      	bne.n	8009020 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ffc:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <vPortEnterCritical+0x64>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00c      	beq.n	8009020 <vPortEnterCritical+0x54>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	b672      	cpsid	i
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	b662      	cpsie	i
 800901a:	603b      	str	r3, [r7, #0]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <vPortEnterCritical+0x52>
	}
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20000020 	.word	0x20000020
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800903a:	4b13      	ldr	r3, [pc, #76]	; (8009088 <vPortExitCritical+0x54>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10c      	bne.n	800905c <vPortExitCritical+0x28>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	b672      	cpsid	i
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	b662      	cpsie	i
 8009056:	607b      	str	r3, [r7, #4]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800905c:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <vPortExitCritical+0x54>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3b01      	subs	r3, #1
 8009062:	4a09      	ldr	r2, [pc, #36]	; (8009088 <vPortExitCritical+0x54>)
 8009064:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009066:	4b08      	ldr	r3, [pc, #32]	; (8009088 <vPortExitCritical+0x54>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d105      	bne.n	800907a <vPortExitCritical+0x46>
 800906e:	2300      	movs	r3, #0
 8009070:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	f383 8811 	msr	BASEPRI, r3
}
 8009078:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000020 	.word	0x20000020
 800908c:	00000000 	.word	0x00000000

08009090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009090:	f3ef 8009 	mrs	r0, PSP
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <pxCurrentTCBConst>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	f01e 0f10 	tst.w	lr, #16
 80090a0:	bf08      	it	eq
 80090a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090aa:	6010      	str	r0, [r2, #0]
 80090ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090b4:	b672      	cpsid	i
 80090b6:	f380 8811 	msr	BASEPRI, r0
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	b662      	cpsie	i
 80090c4:	f7fe fe9e 	bl	8007e04 <vTaskSwitchContext>
 80090c8:	f04f 0000 	mov.w	r0, #0
 80090cc:	f380 8811 	msr	BASEPRI, r0
 80090d0:	bc09      	pop	{r0, r3}
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	6808      	ldr	r0, [r1, #0]
 80090d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090da:	f01e 0f10 	tst.w	lr, #16
 80090de:	bf08      	it	eq
 80090e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090e4:	f380 8809 	msr	PSP, r0
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop

080090f0 <pxCurrentTCBConst>:
 80090f0:	20005860 	.word	0x20005860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	b672      	cpsid	i
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	b662      	cpsie	i
 8009112:	607b      	str	r3, [r7, #4]
}
 8009114:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009116:	f7fe fdb9 	bl	8007c8c <xTaskIncrementTick>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <SysTick_Handler+0x44>)
 8009122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	2300      	movs	r3, #0
 800912a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	f383 8811 	msr	BASEPRI, r3
}
 8009132:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <vPortSetupTimerInterrupt+0x34>)
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <vPortSetupTimerInterrupt+0x38>)
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <vPortSetupTimerInterrupt+0x3c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <vPortSetupTimerInterrupt+0x40>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	099b      	lsrs	r3, r3, #6
 800915c:	4a09      	ldr	r2, [pc, #36]	; (8009184 <vPortSetupTimerInterrupt+0x44>)
 800915e:	3b01      	subs	r3, #1
 8009160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009162:	4b04      	ldr	r3, [pc, #16]	; (8009174 <vPortSetupTimerInterrupt+0x34>)
 8009164:	2207      	movs	r2, #7
 8009166:	601a      	str	r2, [r3, #0]
}
 8009168:	bf00      	nop
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	e000e010 	.word	0xe000e010
 8009178:	e000e018 	.word	0xe000e018
 800917c:	20000000 	.word	0x20000000
 8009180:	10624dd3 	.word	0x10624dd3
 8009184:	e000e014 	.word	0xe000e014

08009188 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009188:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009198 <vPortEnableVFP+0x10>
 800918c:	6801      	ldr	r1, [r0, #0]
 800918e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009192:	6001      	str	r1, [r0, #0]
 8009194:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009196:	bf00      	nop
 8009198:	e000ed88 	.word	0xe000ed88

0800919c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091a2:	f3ef 8305 	mrs	r3, IPSR
 80091a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b0f      	cmp	r3, #15
 80091ac:	d916      	bls.n	80091dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ae:	4a19      	ldr	r2, [pc, #100]	; (8009214 <vPortValidateInterruptPriority+0x78>)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4413      	add	r3, r2
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091b8:	4b17      	ldr	r3, [pc, #92]	; (8009218 <vPortValidateInterruptPriority+0x7c>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	7afa      	ldrb	r2, [r7, #11]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d20c      	bcs.n	80091dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	b672      	cpsid	i
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	b662      	cpsie	i
 80091d6:	607b      	str	r3, [r7, #4]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091dc:	4b0f      	ldr	r3, [pc, #60]	; (800921c <vPortValidateInterruptPriority+0x80>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <vPortValidateInterruptPriority+0x84>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d90c      	bls.n	8009206 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	b672      	cpsid	i
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	b662      	cpsie	i
 8009200:	603b      	str	r3, [r7, #0]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <vPortValidateInterruptPriority+0x68>
	}
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	e000e3f0 	.word	0xe000e3f0
 8009218:	20005e8c 	.word	0x20005e8c
 800921c:	e000ed0c 	.word	0xe000ed0c
 8009220:	20005e90 	.word	0x20005e90

08009224 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08a      	sub	sp, #40	; 0x28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009230:	f7fe fc5c 	bl	8007aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009234:	4b5b      	ldr	r3, [pc, #364]	; (80093a4 <pvPortMalloc+0x180>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800923c:	f000 f91a 	bl	8009474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009240:	4b59      	ldr	r3, [pc, #356]	; (80093a8 <pvPortMalloc+0x184>)
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4013      	ands	r3, r2
 8009248:	2b00      	cmp	r3, #0
 800924a:	f040 8092 	bne.w	8009372 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d01f      	beq.n	8009294 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009254:	2208      	movs	r2, #8
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f003 0307 	and.w	r3, r3, #7
 8009262:	2b00      	cmp	r3, #0
 8009264:	d016      	beq.n	8009294 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f023 0307 	bic.w	r3, r3, #7
 800926c:	3308      	adds	r3, #8
 800926e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <pvPortMalloc+0x70>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	b672      	cpsid	i
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	b662      	cpsie	i
 800928e:	617b      	str	r3, [r7, #20]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d06b      	beq.n	8009372 <pvPortMalloc+0x14e>
 800929a:	4b44      	ldr	r3, [pc, #272]	; (80093ac <pvPortMalloc+0x188>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d866      	bhi.n	8009372 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092a4:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <pvPortMalloc+0x18c>)
 80092a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092a8:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <pvPortMalloc+0x18c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ae:	e004      	b.n	80092ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d903      	bls.n	80092cc <pvPortMalloc+0xa8>
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1f1      	bne.n	80092b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092cc:	4b35      	ldr	r3, [pc, #212]	; (80093a4 <pvPortMalloc+0x180>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d04d      	beq.n	8009372 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2208      	movs	r2, #8
 80092dc:	4413      	add	r3, r2
 80092de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	1ad2      	subs	r2, r2, r3
 80092f0:	2308      	movs	r3, #8
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d921      	bls.n	800933c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4413      	add	r3, r2
 80092fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00c      	beq.n	8009324 <pvPortMalloc+0x100>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	b672      	cpsid	i
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	b662      	cpsie	i
 800931e:	613b      	str	r3, [r7, #16]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	1ad2      	subs	r2, r2, r3
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009336:	69b8      	ldr	r0, [r7, #24]
 8009338:	f000 f8fe 	bl	8009538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800933c:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <pvPortMalloc+0x188>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	4a19      	ldr	r2, [pc, #100]	; (80093ac <pvPortMalloc+0x188>)
 8009348:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800934a:	4b18      	ldr	r3, [pc, #96]	; (80093ac <pvPortMalloc+0x188>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b19      	ldr	r3, [pc, #100]	; (80093b4 <pvPortMalloc+0x190>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d203      	bcs.n	800935e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009356:	4b15      	ldr	r3, [pc, #84]	; (80093ac <pvPortMalloc+0x188>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a16      	ldr	r2, [pc, #88]	; (80093b4 <pvPortMalloc+0x190>)
 800935c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <pvPortMalloc+0x184>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	431a      	orrs	r2, r3
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009372:	f7fe fbc9 	bl	8007b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00c      	beq.n	800939a <pvPortMalloc+0x176>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	b672      	cpsid	i
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	b662      	cpsie	i
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <pvPortMalloc+0x174>
	return pvReturn;
 800939a:	69fb      	ldr	r3, [r7, #28]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3728      	adds	r7, #40	; 0x28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20009a9c 	.word	0x20009a9c
 80093a8:	20009aa8 	.word	0x20009aa8
 80093ac:	20009aa0 	.word	0x20009aa0
 80093b0:	20009a94 	.word	0x20009a94
 80093b4:	20009aa4 	.word	0x20009aa4

080093b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d04c      	beq.n	8009464 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093ca:	2308      	movs	r3, #8
 80093cc:	425b      	negs	r3, r3
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	4413      	add	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	4b23      	ldr	r3, [pc, #140]	; (800946c <vPortFree+0xb4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4013      	ands	r3, r2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10c      	bne.n	8009400 <vPortFree+0x48>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	b672      	cpsid	i
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	b662      	cpsie	i
 80093fa:	60fb      	str	r3, [r7, #12]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00c      	beq.n	8009422 <vPortFree+0x6a>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	60bb      	str	r3, [r7, #8]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <vPortFree+0xb4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4013      	ands	r3, r2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d019      	beq.n	8009464 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d115      	bne.n	8009464 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	4b0b      	ldr	r3, [pc, #44]	; (800946c <vPortFree+0xb4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	43db      	mvns	r3, r3
 8009442:	401a      	ands	r2, r3
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009448:	f7fe fb50 	bl	8007aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <vPortFree+0xb8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4413      	add	r3, r2
 8009456:	4a06      	ldr	r2, [pc, #24]	; (8009470 <vPortFree+0xb8>)
 8009458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800945a:	6938      	ldr	r0, [r7, #16]
 800945c:	f000 f86c 	bl	8009538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009460:	f7fe fb52 	bl	8007b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009464:	bf00      	nop
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20009aa8 	.word	0x20009aa8
 8009470:	20009aa0 	.word	0x20009aa0

08009474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800947a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800947e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009480:	4b27      	ldr	r3, [pc, #156]	; (8009520 <prvHeapInit+0xac>)
 8009482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00c      	beq.n	80094a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3307      	adds	r3, #7
 8009492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0307 	bic.w	r3, r3, #7
 800949a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	4a1f      	ldr	r2, [pc, #124]	; (8009520 <prvHeapInit+0xac>)
 80094a4:	4413      	add	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094ac:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <prvHeapInit+0xb0>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <prvHeapInit+0xb0>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094c0:	2208      	movs	r2, #8
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0307 	bic.w	r3, r3, #7
 80094ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4a15      	ldr	r2, [pc, #84]	; (8009528 <prvHeapInit+0xb4>)
 80094d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <prvHeapInit+0xb4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094de:	4b12      	ldr	r3, [pc, #72]	; (8009528 <prvHeapInit+0xb4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094f4:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <prvHeapInit+0xb4>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <prvHeapInit+0xb8>)
 8009502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <prvHeapInit+0xbc>)
 800950a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800950c:	4b09      	ldr	r3, [pc, #36]	; (8009534 <prvHeapInit+0xc0>)
 800950e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20005e94 	.word	0x20005e94
 8009524:	20009a94 	.word	0x20009a94
 8009528:	20009a9c 	.word	0x20009a9c
 800952c:	20009aa4 	.word	0x20009aa4
 8009530:	20009aa0 	.word	0x20009aa0
 8009534:	20009aa8 	.word	0x20009aa8

08009538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009540:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <prvInsertBlockIntoFreeList+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e002      	b.n	800954c <prvInsertBlockIntoFreeList+0x14>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d8f7      	bhi.n	8009546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	4413      	add	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d108      	bne.n	800957a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	441a      	add	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d118      	bne.n	80095c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b15      	ldr	r3, [pc, #84]	; (80095e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d00d      	beq.n	80095b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e008      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvInsertBlockIntoFreeList+0xb0>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e003      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d002      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20009a94 	.word	0x20009a94
 80095e8:	20009a9c 	.word	0x20009a9c

080095ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	330c      	adds	r3, #12
 80095fc:	461a      	mov	r2, r3
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f002 f8d5 	bl	800b7b0 <tcpip_send_msg_wait_sem>
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800960a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d103      	bne.n	800961a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009618:	e001      	b.n	800961e <netconn_apimsg+0x32>
  }
  return err;
 800961a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08c      	sub	sp, #48	; 0x30
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	603a      	str	r2, [r7, #0]
 8009632:	71fb      	strb	r3, [r7, #7]
 8009634:	460b      	mov	r3, r1
 8009636:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f000 ff1b 	bl	800a478 <netconn_alloc>
 8009642:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d054      	beq.n	80096f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800964a:	79bb      	ldrb	r3, [r7, #6]
 800964c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009652:	f107 0308 	add.w	r3, r7, #8
 8009656:	4619      	mov	r1, r3
 8009658:	4829      	ldr	r0, [pc, #164]	; (8009700 <netconn_new_with_proto_and_callback+0xd8>)
 800965a:	f7ff ffc7 	bl	80095ec <netconn_apimsg>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009664:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009668:	2b00      	cmp	r3, #0
 800966a:	d043      	beq.n	80096f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <netconn_new_with_proto_and_callback+0x58>
 8009674:	4b23      	ldr	r3, [pc, #140]	; (8009704 <netconn_new_with_proto_and_callback+0xdc>)
 8009676:	22a3      	movs	r2, #163	; 0xa3
 8009678:	4923      	ldr	r1, [pc, #140]	; (8009708 <netconn_new_with_proto_and_callback+0xe0>)
 800967a:	4824      	ldr	r0, [pc, #144]	; (800970c <netconn_new_with_proto_and_callback+0xe4>)
 800967c:	f00d f970 	bl	8016960 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	3310      	adds	r3, #16
 8009684:	4618      	mov	r0, r3
 8009686:	f00c fe4d 	bl	8016324 <sys_mbox_valid>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <netconn_new_with_proto_and_callback+0x74>
 8009690:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <netconn_new_with_proto_and_callback+0xdc>)
 8009692:	22a4      	movs	r2, #164	; 0xa4
 8009694:	491e      	ldr	r1, [pc, #120]	; (8009710 <netconn_new_with_proto_and_callback+0xe8>)
 8009696:	481d      	ldr	r0, [pc, #116]	; (800970c <netconn_new_with_proto_and_callback+0xe4>)
 8009698:	f00d f962 	bl	8016960 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	3314      	adds	r3, #20
 80096a0:	4618      	mov	r0, r3
 80096a2:	f00c fe3f 	bl	8016324 <sys_mbox_valid>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <netconn_new_with_proto_and_callback+0x90>
 80096ac:	4b15      	ldr	r3, [pc, #84]	; (8009704 <netconn_new_with_proto_and_callback+0xdc>)
 80096ae:	22a6      	movs	r2, #166	; 0xa6
 80096b0:	4918      	ldr	r1, [pc, #96]	; (8009714 <netconn_new_with_proto_and_callback+0xec>)
 80096b2:	4816      	ldr	r0, [pc, #88]	; (800970c <netconn_new_with_proto_and_callback+0xe4>)
 80096b4:	f00d f954 	bl	8016960 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	330c      	adds	r3, #12
 80096bc:	4618      	mov	r0, r3
 80096be:	f00c febf 	bl	8016440 <sys_sem_valid>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d105      	bne.n	80096d4 <netconn_new_with_proto_and_callback+0xac>
 80096c8:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <netconn_new_with_proto_and_callback+0xdc>)
 80096ca:	22a9      	movs	r2, #169	; 0xa9
 80096cc:	4912      	ldr	r1, [pc, #72]	; (8009718 <netconn_new_with_proto_and_callback+0xf0>)
 80096ce:	480f      	ldr	r0, [pc, #60]	; (800970c <netconn_new_with_proto_and_callback+0xe4>)
 80096d0:	f00d f946 	bl	8016960 <iprintf>
      sys_sem_free(&conn->op_completed);
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	330c      	adds	r3, #12
 80096d8:	4618      	mov	r0, r3
 80096da:	f00c fea4 	bl	8016426 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	3310      	adds	r3, #16
 80096e2:	4618      	mov	r0, r3
 80096e4:	f00c fdaa 	bl	801623c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80096e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ea:	2006      	movs	r0, #6
 80096ec:	f002 ff26 	bl	800c53c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	e000      	b.n	80096f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3730      	adds	r7, #48	; 0x30
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	0800a44d 	.word	0x0800a44d
 8009704:	08019a6c 	.word	0x08019a6c
 8009708:	08019aa0 	.word	0x08019aa0
 800970c:	08019ac4 	.word	0x08019ac4
 8009710:	08019aec 	.word	0x08019aec
 8009714:	08019b04 	.word	0x08019b04
 8009718:	08019b28 	.word	0x08019b28

0800971c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08c      	sub	sp, #48	; 0x30
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	e014      	b.n	8009758 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009732:	2329      	movs	r3, #41	; 0x29
 8009734:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	4619      	mov	r1, r3
 800973c:	4808      	ldr	r0, [pc, #32]	; (8009760 <netconn_prepare_delete+0x44>)
 800973e:	f7ff ff55 	bl	80095ec <netconn_apimsg>
 8009742:	4603      	mov	r3, r0
 8009744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009748:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <netconn_prepare_delete+0x3a>
    return err;
 8009750:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009754:	e000      	b.n	8009758 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3730      	adds	r7, #48	; 0x30
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	0800a9b1 	.word	0x0800a9b1

08009764 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <netconn_delete+0x12>
    return ERR_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	e00d      	b.n	8009792 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7ff ffd0 	bl	800971c <netconn_prepare_delete>
 800977c:	4603      	mov	r3, r0
 800977e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <netconn_delete+0x2a>
    netconn_free(conn);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fedf 	bl	800a54c <netconn_free>
  }
  return err;
 800978e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08e      	sub	sp, #56	; 0x38
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d109      	bne.n	80097c4 <netconn_bind+0x28>
 80097b0:	4b11      	ldr	r3, [pc, #68]	; (80097f8 <netconn_bind+0x5c>)
 80097b2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80097b6:	4911      	ldr	r1, [pc, #68]	; (80097fc <netconn_bind+0x60>)
 80097b8:	4811      	ldr	r0, [pc, #68]	; (8009800 <netconn_bind+0x64>)
 80097ba:	f00d f8d1 	bl	8016960 <iprintf>
 80097be:	f06f 030f 	mvn.w	r3, #15
 80097c2:	e015      	b.n	80097f0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80097ca:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <netconn_bind+0x68>)
 80097cc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80097d6:	88fb      	ldrh	r3, [r7, #6]
 80097d8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80097da:	f107 0314 	add.w	r3, r7, #20
 80097de:	4619      	mov	r1, r3
 80097e0:	4809      	ldr	r0, [pc, #36]	; (8009808 <netconn_bind+0x6c>)
 80097e2:	f7ff ff03 	bl	80095ec <netconn_apimsg>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80097ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3738      	adds	r7, #56	; 0x38
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	08019a6c 	.word	0x08019a6c
 80097fc:	08019ba4 	.word	0x08019ba4
 8009800:	08019ac4 	.word	0x08019ac4
 8009804:	0801ccfc 	.word	0x0801ccfc
 8009808:	0800ab5d 	.word	0x0800ab5d

0800980c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08e      	sub	sp, #56	; 0x38
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <netconn_connect+0x28>
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <netconn_connect+0x5c>)
 8009822:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009826:	4911      	ldr	r1, [pc, #68]	; (800986c <netconn_connect+0x60>)
 8009828:	4811      	ldr	r0, [pc, #68]	; (8009870 <netconn_connect+0x64>)
 800982a:	f00d f899 	bl	8016960 <iprintf>
 800982e:	f06f 030f 	mvn.w	r3, #15
 8009832:	e015      	b.n	8009860 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800983a:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <netconn_connect+0x68>)
 800983c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009846:	88fb      	ldrh	r3, [r7, #6]
 8009848:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800984a:	f107 0314 	add.w	r3, r7, #20
 800984e:	4619      	mov	r1, r3
 8009850:	4809      	ldr	r0, [pc, #36]	; (8009878 <netconn_connect+0x6c>)
 8009852:	f7ff fecb 	bl	80095ec <netconn_apimsg>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800985c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009860:	4618      	mov	r0, r3
 8009862:	3738      	adds	r7, #56	; 0x38
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	08019a6c 	.word	0x08019a6c
 800986c:	08019be0 	.word	0x08019be0
 8009870:	08019ac4 	.word	0x08019ac4
 8009874:	0801ccfc 	.word	0x0801ccfc
 8009878:	0800acd5 	.word	0x0800acd5

0800987c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <netconn_recv_data+0x2c>
 8009894:	4b4d      	ldr	r3, [pc, #308]	; (80099cc <netconn_recv_data+0x150>)
 8009896:	f44f 7212 	mov.w	r2, #584	; 0x248
 800989a:	494d      	ldr	r1, [pc, #308]	; (80099d0 <netconn_recv_data+0x154>)
 800989c:	484d      	ldr	r0, [pc, #308]	; (80099d4 <netconn_recv_data+0x158>)
 800989e:	f00d f85f 	bl	8016960 <iprintf>
 80098a2:	f06f 030f 	mvn.w	r3, #15
 80098a6:	e08d      	b.n	80099c4 <netconn_recv_data+0x148>
  *new_buf = NULL;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d109      	bne.n	80098c8 <netconn_recv_data+0x4c>
 80098b4:	4b45      	ldr	r3, [pc, #276]	; (80099cc <netconn_recv_data+0x150>)
 80098b6:	f240 224a 	movw	r2, #586	; 0x24a
 80098ba:	4947      	ldr	r1, [pc, #284]	; (80099d8 <netconn_recv_data+0x15c>)
 80098bc:	4845      	ldr	r0, [pc, #276]	; (80099d4 <netconn_recv_data+0x158>)
 80098be:	f00d f84f 	bl	8016960 <iprintf>
 80098c2:	f06f 030f 	mvn.w	r3, #15
 80098c6:	e07d      	b.n	80099c4 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3310      	adds	r3, #16
 80098cc:	4618      	mov	r0, r3
 80098ce:	f00c fd29 	bl	8016324 <sys_mbox_valid>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10e      	bne.n	80098f6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 faae 	bl	8009e3a <netconn_err>
 80098de:	4603      	mov	r3, r0
 80098e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80098e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80098ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80098ee:	e069      	b.n	80099c4 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 80098f0:	f06f 030a 	mvn.w	r3, #10
 80098f4:	e066      	b.n	80099c4 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	7f1b      	ldrb	r3, [r3, #28]
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10f      	bne.n	8009922 <netconn_recv_data+0xa6>
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	7f1b      	ldrb	r3, [r3, #28]
 8009910:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009914:	2b00      	cmp	r3, #0
 8009916:	d104      	bne.n	8009922 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d023      	beq.n	800996a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3310      	adds	r3, #16
 8009926:	f107 0214 	add.w	r2, r7, #20
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f00c fce2 	bl	80162f6 <sys_arch_mbox_tryfetch>
 8009932:	4603      	mov	r3, r0
 8009934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009938:	d11f      	bne.n	800997a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fa7d 	bl	8009e3a <netconn_err>
 8009940:	4603      	mov	r3, r0
 8009942:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 8009944:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800994c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009950:	e038      	b.n	80099c4 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	7f1b      	ldrb	r3, [r3, #28]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800995e:	f06f 030a 	mvn.w	r3, #10
 8009962:	e02f      	b.n	80099c4 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 8009964:	f06f 0306 	mvn.w	r3, #6
 8009968:	e02c      	b.n	80099c4 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3310      	adds	r3, #16
 800996e:	f107 0114 	add.w	r1, r7, #20
 8009972:	2200      	movs	r2, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f00c fc8d 	bl	8016294 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f107 0213 	add.w	r2, r7, #19
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f000 faaa 	bl	8009edc <lwip_netconn_is_err_msg>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800998e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009992:	f113 0f0f 	cmn.w	r3, #15
 8009996:	d101      	bne.n	800999c <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	e013      	b.n	80099c4 <netconn_recv_data+0x148>
      }
      return err;
 800999c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099a0:	e010      	b.n	80099c4 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	891b      	ldrh	r3, [r3, #8]
 80099a6:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <netconn_recv_data+0x140>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	8bba      	ldrh	r2, [r7, #28]
 80099b6:	2101      	movs	r1, #1
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	08019a6c 	.word	0x08019a6c
 80099d0:	08019c84 	.word	0x08019c84
 80099d4:	08019ac4 	.word	0x08019ac4
 80099d8:	08019ca4 	.word	0x08019ca4

080099dc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d005      	beq.n	80099fa <netconn_tcp_recvd_msg+0x1e>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099f6:	2b10      	cmp	r3, #16
 80099f8:	d009      	beq.n	8009a0e <netconn_tcp_recvd_msg+0x32>
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <netconn_tcp_recvd_msg+0x50>)
 80099fc:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009a00:	490b      	ldr	r1, [pc, #44]	; (8009a30 <netconn_tcp_recvd_msg+0x54>)
 8009a02:	480c      	ldr	r0, [pc, #48]	; (8009a34 <netconn_tcp_recvd_msg+0x58>)
 8009a04:	f00c ffac 	bl	8016960 <iprintf>
 8009a08:	f06f 030f 	mvn.w	r3, #15
 8009a0c:	e00a      	b.n	8009a24 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4806      	ldr	r0, [pc, #24]	; (8009a38 <netconn_tcp_recvd_msg+0x5c>)
 8009a1e:	f7ff fde5 	bl	80095ec <netconn_apimsg>
 8009a22:	4603      	mov	r3, r0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	08019a6c 	.word	0x08019a6c
 8009a30:	08019cc0 	.word	0x08019cc0
 8009a34:	08019ac4 	.word	0x08019ac4
 8009a38:	0800ae31 	.word	0x0800ae31

08009a3c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b090      	sub	sp, #64	; 0x40
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	4613      	mov	r3, r2
 8009a48:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3310      	adds	r3, #16
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f00c fc68 	bl	8016324 <sys_mbox_valid>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009a5a:	f06f 030a 	mvn.w	r3, #10
 8009a5e:	e06d      	b.n	8009b3c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	7f1b      	ldrb	r3, [r3, #28]
 8009a64:	b25b      	sxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da07      	bge.n	8009a7a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	7f1b      	ldrb	r3, [r3, #28]
 8009a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009a78:	e039      	b.n	8009aee <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff fefb 	bl	800987c <netconn_recv_data>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009a8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009a94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a98:	e050      	b.n	8009b3c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	f003 0308 	and.w	r3, r3, #8
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10e      	bne.n	8009ac8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <netconn_recv_data_tcp+0x7a>
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	891b      	ldrh	r3, [r3, #8]
 8009ab4:	e000      	b.n	8009ab8 <netconn_recv_data_tcp+0x7c>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009aba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009abc:	f107 0214 	add.w	r2, r7, #20
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff ff8a 	bl	80099dc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d134      	bne.n	8009b38 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	f003 0310 	and.w	r3, r3, #16
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d009      	beq.n	8009aec <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	7f1b      	ldrb	r3, [r3, #28]
 8009adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009ae6:	f06f 0306 	mvn.w	r3, #6
 8009aea:	e027      	b.n	8009b3c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009aec:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d005      	beq.n	8009b02 <netconn_recv_data_tcp+0xc6>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2200      	movs	r2, #0
 8009afc:	2101      	movs	r1, #1
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10f      	bne.n	8009b2a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 f995 	bl	8009e3a <netconn_err>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009b16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <netconn_recv_data_tcp+0xe8>
          return err;
 8009b1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b22:	e00b      	b.n	8009b3c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009b24:	f06f 030d 	mvn.w	r3, #13
 8009b28:	e008      	b.n	8009b3c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 f947 	bl	8009dc0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009b32:	f06f 030e 	mvn.w	r3, #14
 8009b36:	e001      	b.n	8009b3c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009b38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3740      	adds	r7, #64	; 0x40
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d109      	bne.n	8009b6c <netconn_recv+0x28>
 8009b58:	4b2b      	ldr	r3, [pc, #172]	; (8009c08 <netconn_recv+0xc4>)
 8009b5a:	f240 3263 	movw	r2, #867	; 0x363
 8009b5e:	492b      	ldr	r1, [pc, #172]	; (8009c0c <netconn_recv+0xc8>)
 8009b60:	482b      	ldr	r0, [pc, #172]	; (8009c10 <netconn_recv+0xcc>)
 8009b62:	f00c fefd 	bl	8016960 <iprintf>
 8009b66:	f06f 030f 	mvn.w	r3, #15
 8009b6a:	e049      	b.n	8009c00 <netconn_recv+0xbc>
  *new_buf = NULL;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <netconn_recv+0x48>
 8009b78:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <netconn_recv+0xc4>)
 8009b7a:	f240 3265 	movw	r2, #869	; 0x365
 8009b7e:	4925      	ldr	r1, [pc, #148]	; (8009c14 <netconn_recv+0xd0>)
 8009b80:	4823      	ldr	r0, [pc, #140]	; (8009c10 <netconn_recv+0xcc>)
 8009b82:	f00c feed 	bl	8016960 <iprintf>
 8009b86:	f06f 030f 	mvn.w	r3, #15
 8009b8a:	e039      	b.n	8009c00 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009b90:	2005      	movs	r0, #5
 8009b92:	f002 fc5d 	bl	800c450 <memp_malloc>
 8009b96:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d102      	bne.n	8009ba4 <netconn_recv+0x60>
      return ERR_MEM;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ba2:	e02d      	b.n	8009c00 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009ba4:	f107 030c 	add.w	r3, r7, #12
 8009ba8:	2200      	movs	r2, #0
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ff45 	bl	8009a3c <netconn_recv_data_tcp>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009bb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d006      	beq.n	8009bcc <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 8009bbe:	6979      	ldr	r1, [r7, #20]
 8009bc0:	2005      	movs	r0, #5
 8009bc2:	f002 fcbb 	bl	800c53c <memp_free>
      return err;
 8009bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bca:	e019      	b.n	8009c00 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <netconn_recv+0x9c>
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <netconn_recv+0xc4>)
 8009bd4:	f240 3279 	movw	r2, #889	; 0x379
 8009bd8:	490f      	ldr	r1, [pc, #60]	; (8009c18 <netconn_recv+0xd4>)
 8009bda:	480d      	ldr	r0, [pc, #52]	; (8009c10 <netconn_recv+0xcc>)
 8009bdc:	f00c fec0 	bl	8016960 <iprintf>

    buf->p = p;
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009bfe:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	08019a6c 	.word	0x08019a6c
 8009c0c:	08019c84 	.word	0x08019c84
 8009c10:	08019ac4 	.word	0x08019ac4
 8009c14:	08019ca4 	.word	0x08019ca4
 8009c18:	08019d10 	.word	0x08019d10

08009c1c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af02      	add	r7, sp, #8
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	f107 0110 	add.w	r1, r7, #16
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	2201      	movs	r2, #1
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 f805 	bl	8009c50 <netconn_write_vectors_partly>
 8009c46:	4603      	mov	r3, r0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b092      	sub	sp, #72	; 0x48
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	460b      	mov	r3, r1
 8009c60:	80fb      	strh	r3, [r7, #6]
 8009c62:	4613      	mov	r3, r2
 8009c64:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <netconn_write_vectors_partly+0x30>
 8009c6c:	4b4e      	ldr	r3, [pc, #312]	; (8009da8 <netconn_write_vectors_partly+0x158>)
 8009c6e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009c72:	494e      	ldr	r1, [pc, #312]	; (8009dac <netconn_write_vectors_partly+0x15c>)
 8009c74:	484e      	ldr	r0, [pc, #312]	; (8009db0 <netconn_write_vectors_partly+0x160>)
 8009c76:	f00c fe73 	bl	8016960 <iprintf>
 8009c7a:	f06f 030f 	mvn.w	r3, #15
 8009c7e:	e08e      	b.n	8009d9e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c88:	2b10      	cmp	r3, #16
 8009c8a:	d009      	beq.n	8009ca0 <netconn_write_vectors_partly+0x50>
 8009c8c:	4b46      	ldr	r3, [pc, #280]	; (8009da8 <netconn_write_vectors_partly+0x158>)
 8009c8e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009c92:	4948      	ldr	r1, [pc, #288]	; (8009db4 <netconn_write_vectors_partly+0x164>)
 8009c94:	4846      	ldr	r0, [pc, #280]	; (8009db0 <netconn_write_vectors_partly+0x160>)
 8009c96:	f00c fe63 	bl	8016960 <iprintf>
 8009c9a:	f06f 0305 	mvn.w	r3, #5
 8009c9e:	e07e      	b.n	8009d9e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	7f1b      	ldrb	r3, [r3, #28]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <netconn_write_vectors_partly+0x66>
 8009cac:	797b      	ldrb	r3, [r7, #5]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <netconn_write_vectors_partly+0x6a>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <netconn_write_vectors_partly+0x6c>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d005      	beq.n	8009cd4 <netconn_write_vectors_partly+0x84>
 8009cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009cce:	f06f 0305 	mvn.w	r3, #5
 8009cd2:	e064      	b.n	8009d9e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009cd8:	2300      	movs	r3, #0
 8009cda:	643b      	str	r3, [r7, #64]	; 0x40
 8009cdc:	e015      	b.n	8009d0a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cea:	4413      	add	r3, r2
 8009cec:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d202      	bcs.n	8009d04 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009cfe:	f06f 0305 	mvn.w	r3, #5
 8009d02:	e04c      	b.n	8009d9e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d06:	3301      	adds	r3, #1
 8009d08:	643b      	str	r3, [r7, #64]	; 0x40
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	dbe5      	blt.n	8009cde <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e040      	b.n	8009d9e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	da0a      	bge.n	8009d38 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009d28:	f06f 0305 	mvn.w	r3, #5
 8009d2c:	e037      	b.n	8009d9e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009d2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d32:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009d48:	797b      	ldrb	r3, [r7, #5]
 8009d4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009d56:	f107 0314 	add.w	r3, r7, #20
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4816      	ldr	r0, [pc, #88]	; (8009db8 <netconn_write_vectors_partly+0x168>)
 8009d5e:	f7ff fc45 	bl	80095ec <netconn_apimsg>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009d68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d114      	bne.n	8009d9a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d7a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d006      	beq.n	8009d9a <netconn_write_vectors_partly+0x14a>
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <netconn_write_vectors_partly+0x158>)
 8009d8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009d92:	490a      	ldr	r1, [pc, #40]	; (8009dbc <netconn_write_vectors_partly+0x16c>)
 8009d94:	4806      	ldr	r0, [pc, #24]	; (8009db0 <netconn_write_vectors_partly+0x160>)
 8009d96:	f00c fde3 	bl	8016960 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009d9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3748      	adds	r7, #72	; 0x48
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	08019a6c 	.word	0x08019a6c
 8009dac:	08019d38 	.word	0x08019d38
 8009db0:	08019ac4 	.word	0x08019ac4
 8009db4:	08019d54 	.word	0x08019d54
 8009db8:	0800b235 	.word	0x0800b235
 8009dbc:	08019d78 	.word	0x08019d78

08009dc0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08c      	sub	sp, #48	; 0x30
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d109      	bne.n	8009de6 <netconn_close_shutdown+0x26>
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <netconn_close_shutdown+0x50>)
 8009dd4:	f240 4247 	movw	r2, #1095	; 0x447
 8009dd8:	490e      	ldr	r1, [pc, #56]	; (8009e14 <netconn_close_shutdown+0x54>)
 8009dda:	480f      	ldr	r0, [pc, #60]	; (8009e18 <netconn_close_shutdown+0x58>)
 8009ddc:	f00c fdc0 	bl	8016960 <iprintf>
 8009de0:	f06f 030f 	mvn.w	r3, #15
 8009de4:	e010      	b.n	8009e08 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009dee:	2329      	movs	r3, #41	; 0x29
 8009df0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4619      	mov	r1, r3
 8009df8:	4808      	ldr	r0, [pc, #32]	; (8009e1c <netconn_close_shutdown+0x5c>)
 8009dfa:	f7ff fbf7 	bl	80095ec <netconn_apimsg>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009e04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3730      	adds	r7, #48	; 0x30
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	08019a6c 	.word	0x08019a6c
 8009e14:	08019d9c 	.word	0x08019d9c
 8009e18:	08019ac4 	.word	0x08019ac4
 8009e1c:	0800b349 	.word	0x0800b349

08009e20 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009e28:	2103      	movs	r1, #3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff ffc8 	bl	8009dc0 <netconn_close_shutdown>
 8009e30:	4603      	mov	r3, r0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <netconn_err+0x12>
    return ERR_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e00d      	b.n	8009e68 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009e4c:	f00c fb74 	bl	8016538 <sys_arch_protect>
 8009e50:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	7a1b      	ldrb	r3, [r3, #8]
 8009e56:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f00c fb78 	bl	8016554 <sys_arch_unprotect>
  return err;
 8009e64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7e:	f113 0f0d 	cmn.w	r3, #13
 8009e82:	d009      	beq.n	8009e98 <lwip_netconn_err_to_msg+0x28>
 8009e84:	f113 0f0d 	cmn.w	r3, #13
 8009e88:	dc0c      	bgt.n	8009ea4 <lwip_netconn_err_to_msg+0x34>
 8009e8a:	f113 0f0f 	cmn.w	r3, #15
 8009e8e:	d007      	beq.n	8009ea0 <lwip_netconn_err_to_msg+0x30>
 8009e90:	f113 0f0e 	cmn.w	r3, #14
 8009e94:	d002      	beq.n	8009e9c <lwip_netconn_err_to_msg+0x2c>
 8009e96:	e005      	b.n	8009ea4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <lwip_netconn_err_to_msg+0x54>)
 8009e9a:	e00e      	b.n	8009eba <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <lwip_netconn_err_to_msg+0x58>)
 8009e9e:	e00c      	b.n	8009eba <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <lwip_netconn_err_to_msg+0x5c>)
 8009ea2:	e00a      	b.n	8009eba <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <lwip_netconn_err_to_msg+0x48>
 8009eac:	4b08      	ldr	r3, [pc, #32]	; (8009ed0 <lwip_netconn_err_to_msg+0x60>)
 8009eae:	227d      	movs	r2, #125	; 0x7d
 8009eb0:	4908      	ldr	r1, [pc, #32]	; (8009ed4 <lwip_netconn_err_to_msg+0x64>)
 8009eb2:	4809      	ldr	r0, [pc, #36]	; (8009ed8 <lwip_netconn_err_to_msg+0x68>)
 8009eb4:	f00c fd54 	bl	8016960 <iprintf>
      return NULL;
 8009eb8:	2300      	movs	r3, #0
  }
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0801cbf8 	.word	0x0801cbf8
 8009ec8:	0801cbf9 	.word	0x0801cbf9
 8009ecc:	0801cbfa 	.word	0x0801cbfa
 8009ed0:	08019db8 	.word	0x08019db8
 8009ed4:	08019dec 	.word	0x08019dec
 8009ed8:	08019dfc 	.word	0x08019dfc

08009edc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d105      	bne.n	8009ef8 <lwip_netconn_is_err_msg+0x1c>
 8009eec:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <lwip_netconn_is_err_msg+0x5c>)
 8009eee:	2285      	movs	r2, #133	; 0x85
 8009ef0:	4912      	ldr	r1, [pc, #72]	; (8009f3c <lwip_netconn_is_err_msg+0x60>)
 8009ef2:	4813      	ldr	r0, [pc, #76]	; (8009f40 <lwip_netconn_is_err_msg+0x64>)
 8009ef4:	f00c fd34 	bl	8016960 <iprintf>

  if (msg == &netconn_aborted) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a12      	ldr	r2, [pc, #72]	; (8009f44 <lwip_netconn_is_err_msg+0x68>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d104      	bne.n	8009f0a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	22f3      	movs	r2, #243	; 0xf3
 8009f04:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e012      	b.n	8009f30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a0e      	ldr	r2, [pc, #56]	; (8009f48 <lwip_netconn_is_err_msg+0x6c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d104      	bne.n	8009f1c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	22f2      	movs	r2, #242	; 0xf2
 8009f16:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e009      	b.n	8009f30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a0b      	ldr	r2, [pc, #44]	; (8009f4c <lwip_netconn_is_err_msg+0x70>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d104      	bne.n	8009f2e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	22f1      	movs	r2, #241	; 0xf1
 8009f28:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	08019db8 	.word	0x08019db8
 8009f3c:	08019e24 	.word	0x08019e24
 8009f40:	08019dfc 	.word	0x08019dfc
 8009f44:	0801cbf8 	.word	0x0801cbf8
 8009f48:	0801cbf9 	.word	0x0801cbf9
 8009f4c:	0801cbfa 	.word	0x0801cbfa

08009f50 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <recv_tcp+0x22>
 8009f64:	4b36      	ldr	r3, [pc, #216]	; (800a040 <recv_tcp+0xf0>)
 8009f66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f6a:	4936      	ldr	r1, [pc, #216]	; (800a044 <recv_tcp+0xf4>)
 8009f6c:	4836      	ldr	r0, [pc, #216]	; (800a048 <recv_tcp+0xf8>)
 8009f6e:	f00c fcf7 	bl	8016960 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <recv_tcp+0x36>
 8009f78:	4b31      	ldr	r3, [pc, #196]	; (800a040 <recv_tcp+0xf0>)
 8009f7a:	f240 122d 	movw	r2, #301	; 0x12d
 8009f7e:	4933      	ldr	r1, [pc, #204]	; (800a04c <recv_tcp+0xfc>)
 8009f80:	4831      	ldr	r0, [pc, #196]	; (800a048 <recv_tcp+0xf8>)
 8009f82:	f00c fced 	bl	8016960 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d006      	beq.n	8009f9c <recv_tcp+0x4c>
 8009f8e:	4b2c      	ldr	r3, [pc, #176]	; (800a040 <recv_tcp+0xf0>)
 8009f90:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009f94:	492e      	ldr	r1, [pc, #184]	; (800a050 <recv_tcp+0x100>)
 8009f96:	482c      	ldr	r0, [pc, #176]	; (800a048 <recv_tcp+0xf8>)
 8009f98:	f00c fce2 	bl	8016960 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <recv_tcp+0x5c>
    return ERR_VAL;
 8009fa6:	f06f 0305 	mvn.w	r3, #5
 8009faa:	e045      	b.n	800a038 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d006      	beq.n	8009fc4 <recv_tcp+0x74>
 8009fb6:	4b22      	ldr	r3, [pc, #136]	; (800a040 <recv_tcp+0xf0>)
 8009fb8:	f240 1235 	movw	r2, #309	; 0x135
 8009fbc:	4925      	ldr	r1, [pc, #148]	; (800a054 <recv_tcp+0x104>)
 8009fbe:	4822      	ldr	r0, [pc, #136]	; (800a048 <recv_tcp+0xf8>)
 8009fc0:	f00c fcce 	bl	8016960 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	3310      	adds	r3, #16
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f00c f9ab 	bl	8016324 <sys_mbox_valid>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10d      	bne.n	8009ff0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d008      	beq.n	8009fec <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	891b      	ldrh	r3, [r3, #8]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	68b8      	ldr	r0, [r7, #8]
 8009fe2:	f004 f839 	bl	800e058 <tcp_recved>
      pbuf_free(p);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f003 f948 	bl	800d27c <pbuf_free>
    }
    return ERR_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e023      	b.n	800a038 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <recv_tcp+0xb2>
    msg = p;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	891b      	ldrh	r3, [r3, #8]
 8009ffe:	83fb      	strh	r3, [r7, #30]
 800a000:	e003      	b.n	800a00a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <recv_tcp+0x108>)
 800a004:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	3310      	adds	r3, #16
 800a00e:	69b9      	ldr	r1, [r7, #24]
 800a010:	4618      	mov	r0, r3
 800a012:	f00c f925 	bl	8016260 <sys_mbox_trypost>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a020:	e00a      	b.n	800a038 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	2b00      	cmp	r3, #0
 800a028:	d005      	beq.n	800a036 <recv_tcp+0xe6>
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	8bfa      	ldrh	r2, [r7, #30]
 800a030:	2100      	movs	r1, #0
 800a032:	6978      	ldr	r0, [r7, #20]
 800a034:	4798      	blx	r3
  }

  return ERR_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	08019db8 	.word	0x08019db8
 800a044:	08019e30 	.word	0x08019e30
 800a048:	08019dfc 	.word	0x08019dfc
 800a04c:	08019e54 	.word	0x08019e54
 800a050:	08019e74 	.word	0x08019e74
 800a054:	08019e8c 	.word	0x08019e8c
 800a058:	0801cbfa 	.word	0x0801cbfa

0800a05c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d106      	bne.n	800a07e <poll_tcp+0x22>
 800a070:	4b29      	ldr	r3, [pc, #164]	; (800a118 <poll_tcp+0xbc>)
 800a072:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a076:	4929      	ldr	r1, [pc, #164]	; (800a11c <poll_tcp+0xc0>)
 800a078:	4829      	ldr	r0, [pc, #164]	; (800a120 <poll_tcp+0xc4>)
 800a07a:	f00c fc71 	bl	8016960 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d104      	bne.n	800a090 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a086:	2101      	movs	r1, #1
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 ff07 	bl	800ae9c <lwip_netconn_do_writemore>
 800a08e:	e016      	b.n	800a0be <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	785b      	ldrb	r3, [r3, #1]
 800a094:	2b04      	cmp	r3, #4
 800a096:	d112      	bne.n	800a0be <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00a      	beq.n	800a0b6 <poll_tcp+0x5a>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	7a5b      	ldrb	r3, [r3, #9]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	7a5a      	ldrb	r2, [r3, #9]
 800a0b0:	3a01      	subs	r2, #1
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 fb0f 	bl	800a6dc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	7f1b      	ldrb	r3, [r3, #28]
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d021      	beq.n	800a10e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d01d      	beq.n	800a10e <poll_tcp+0xb2>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0de:	d316      	bcc.n	800a10e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d810      	bhi.n	800a10e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	7f1b      	ldrb	r3, [r3, #28]
 800a0f0:	f023 0310 	bic.w	r3, r3, #16
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <poll_tcp+0xb2>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2200      	movs	r2, #0
 800a108:	2102      	movs	r1, #2
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	08019db8 	.word	0x08019db8
 800a11c:	08019eac 	.word	0x08019eac
 800a120:	08019dfc 	.word	0x08019dfc

0800a124 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <sent_tcp+0x26>
 800a13c:	4b20      	ldr	r3, [pc, #128]	; (800a1c0 <sent_tcp+0x9c>)
 800a13e:	f240 1293 	movw	r2, #403	; 0x193
 800a142:	4920      	ldr	r1, [pc, #128]	; (800a1c4 <sent_tcp+0xa0>)
 800a144:	4820      	ldr	r0, [pc, #128]	; (800a1c8 <sent_tcp+0xa4>)
 800a146:	f00c fc0b 	bl	8016960 <iprintf>

  if (conn) {
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d032      	beq.n	800a1b6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	785b      	ldrb	r3, [r3, #1]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d104      	bne.n	800a162 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a158:	2101      	movs	r1, #1
 800a15a:	6978      	ldr	r0, [r7, #20]
 800a15c:	f000 fe9e 	bl	800ae9c <lwip_netconn_do_writemore>
 800a160:	e007      	b.n	800a172 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	2b04      	cmp	r3, #4
 800a168:	d103      	bne.n	800a172 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a16a:	2101      	movs	r1, #1
 800a16c:	6978      	ldr	r0, [r7, #20]
 800a16e:	f000 fab5 	bl	800a6dc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01d      	beq.n	800a1b6 <sent_tcp+0x92>
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a182:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a186:	d316      	bcc.n	800a1b6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a190:	2b04      	cmp	r3, #4
 800a192:	d810      	bhi.n	800a1b6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	7f1b      	ldrb	r3, [r3, #28]
 800a198:	f023 0310 	bic.w	r3, r3, #16
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <sent_tcp+0x92>
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	88fa      	ldrh	r2, [r7, #6]
 800a1b0:	2102      	movs	r1, #2
 800a1b2:	6978      	ldr	r0, [r7, #20]
 800a1b4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	08019db8 	.word	0x08019db8
 800a1c4:	08019eac 	.word	0x08019eac
 800a1c8:	08019dfc 	.word	0x08019dfc

0800a1cc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <err_tcp+0x24>
 800a1e2:	4b5f      	ldr	r3, [pc, #380]	; (800a360 <err_tcp+0x194>)
 800a1e4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a1e8:	495e      	ldr	r1, [pc, #376]	; (800a364 <err_tcp+0x198>)
 800a1ea:	485f      	ldr	r0, [pc, #380]	; (800a368 <err_tcp+0x19c>)
 800a1ec:	f00c fbb8 	bl	8016960 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a1f0:	f00c f9a2 	bl	8016538 <sys_arch_protect>
 800a1f4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	78fa      	ldrb	r2, [r7, #3]
 800a200:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	7f1b      	ldrb	r3, [r3, #28]
 800a206:	f043 0301 	orr.w	r3, r3, #1
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	785b      	ldrb	r3, [r3, #1]
 800a214:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	2200      	movs	r2, #0
 800a21a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a21c:	69b8      	ldr	r0, [r7, #24]
 800a21e:	f00c f999 	bl	8016554 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d005      	beq.n	800a236 <err_tcp+0x6a>
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	2200      	movs	r2, #0
 800a230:	2104      	movs	r1, #4
 800a232:	69f8      	ldr	r0, [r7, #28]
 800a234:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d005      	beq.n	800a24a <err_tcp+0x7e>
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2200      	movs	r2, #0
 800a244:	2100      	movs	r1, #0
 800a246:	69f8      	ldr	r0, [r7, #28]
 800a248:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d005      	beq.n	800a25e <err_tcp+0x92>
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2200      	movs	r2, #0
 800a258:	2102      	movs	r1, #2
 800a25a:	69f8      	ldr	r0, [r7, #28]
 800a25c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a25e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fe04 	bl	8009e70 <lwip_netconn_err_to_msg>
 800a268:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	3310      	adds	r3, #16
 800a26e:	4618      	mov	r0, r3
 800a270:	f00c f858 	bl	8016324 <sys_mbox_valid>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	3310      	adds	r3, #16
 800a27e:	6939      	ldr	r1, [r7, #16]
 800a280:	4618      	mov	r0, r3
 800a282:	f00b ffed 	bl	8016260 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3314      	adds	r3, #20
 800a28a:	4618      	mov	r0, r3
 800a28c:	f00c f84a 	bl	8016324 <sys_mbox_valid>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	3314      	adds	r3, #20
 800a29a:	6939      	ldr	r1, [r7, #16]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f00b ffdf 	bl	8016260 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d005      	beq.n	800a2b4 <err_tcp+0xe8>
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d002      	beq.n	800a2b4 <err_tcp+0xe8>
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d143      	bne.n	800a33c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	7f1b      	ldrb	r3, [r3, #28]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bf14      	ite	ne
 800a2c0:	2301      	movne	r3, #1
 800a2c2:	2300      	moveq	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	7f1b      	ldrb	r3, [r3, #28]
 800a2cc:	f023 0304 	bic.w	r3, r3, #4
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d13b      	bne.n	800a354 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <err_tcp+0x126>
 800a2e4:	4b1e      	ldr	r3, [pc, #120]	; (800a360 <err_tcp+0x194>)
 800a2e6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a2ea:	4920      	ldr	r1, [pc, #128]	; (800a36c <err_tcp+0x1a0>)
 800a2ec:	481e      	ldr	r0, [pc, #120]	; (800a368 <err_tcp+0x19c>)
 800a2ee:	f00c fb37 	bl	8016960 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d104      	bne.n	800a302 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	711a      	strb	r2, [r3, #4]
 800a300:	e003      	b.n	800a30a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	78fa      	ldrb	r2, [r7, #3]
 800a308:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	330c      	adds	r3, #12
 800a312:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a314:	68b8      	ldr	r0, [r7, #8]
 800a316:	f00c f893 	bl	8016440 <sys_sem_valid>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d106      	bne.n	800a32e <err_tcp+0x162>
 800a320:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <err_tcp+0x194>)
 800a322:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a326:	4912      	ldr	r1, [pc, #72]	; (800a370 <err_tcp+0x1a4>)
 800a328:	480f      	ldr	r0, [pc, #60]	; (800a368 <err_tcp+0x19c>)
 800a32a:	f00c fb19 	bl	8016960 <iprintf>
      conn->current_msg = NULL;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2200      	movs	r2, #0
 800a332:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a334:	68b8      	ldr	r0, [r7, #8]
 800a336:	f00c f869 	bl	801640c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a33a:	e00b      	b.n	800a354 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d008      	beq.n	800a356 <err_tcp+0x18a>
 800a344:	4b06      	ldr	r3, [pc, #24]	; (800a360 <err_tcp+0x194>)
 800a346:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a34a:	490a      	ldr	r1, [pc, #40]	; (800a374 <err_tcp+0x1a8>)
 800a34c:	4806      	ldr	r0, [pc, #24]	; (800a368 <err_tcp+0x19c>)
 800a34e:	f00c fb07 	bl	8016960 <iprintf>
  }
}
 800a352:	e000      	b.n	800a356 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a354:	bf00      	nop
}
 800a356:	bf00      	nop
 800a358:	3720      	adds	r7, #32
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	08019db8 	.word	0x08019db8
 800a364:	08019eac 	.word	0x08019eac
 800a368:	08019dfc 	.word	0x08019dfc
 800a36c:	08019ebc 	.word	0x08019ebc
 800a370:	08019ed8 	.word	0x08019ed8
 800a374:	08019ef4 	.word	0x08019ef4

0800a378 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f004 fe43 	bl	800f014 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a38e:	490a      	ldr	r1, [pc, #40]	; (800a3b8 <setup_tcp+0x40>)
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f004 fe51 	bl	800f038 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a396:	4909      	ldr	r1, [pc, #36]	; (800a3bc <setup_tcp+0x44>)
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f004 fe6f 	bl	800f07c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a39e:	2202      	movs	r2, #2
 800a3a0:	4907      	ldr	r1, [pc, #28]	; (800a3c0 <setup_tcp+0x48>)
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f004 fec6 	bl	800f134 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a3a8:	4906      	ldr	r1, [pc, #24]	; (800a3c4 <setup_tcp+0x4c>)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f004 fe88 	bl	800f0c0 <tcp_err>
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	08009f51 	.word	0x08009f51
 800a3bc:	0800a125 	.word	0x0800a125
 800a3c0:	0800a05d 	.word	0x0800a05d
 800a3c4:	0800a1cd 	.word	0x0800a1cd

0800a3c8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d006      	beq.n	800a3ec <pcb_new+0x24>
 800a3de:	4b18      	ldr	r3, [pc, #96]	; (800a440 <pcb_new+0x78>)
 800a3e0:	f240 2265 	movw	r2, #613	; 0x265
 800a3e4:	4917      	ldr	r1, [pc, #92]	; (800a444 <pcb_new+0x7c>)
 800a3e6:	4818      	ldr	r0, [pc, #96]	; (800a448 <pcb_new+0x80>)
 800a3e8:	f00c faba 	bl	8016960 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3f6:	2b10      	cmp	r3, #16
 800a3f8:	d112      	bne.n	800a420 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681c      	ldr	r4, [r3, #0]
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	4618      	mov	r0, r3
 800a402:	f004 fdf9 	bl	800eff8 <tcp_new_ip_type>
 800a406:	4603      	mov	r3, r0
 800a408:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d009      	beq.n	800a428 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff ffad 	bl	800a378 <setup_tcp>
      }
      break;
 800a41e:	e003      	b.n	800a428 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	22fa      	movs	r2, #250	; 0xfa
 800a424:	711a      	strb	r2, [r3, #4]
      return;
 800a426:	e008      	b.n	800a43a <pcb_new+0x72>
      break;
 800a428:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <pcb_new+0x72>
    msg->err = ERR_MEM;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	22ff      	movs	r2, #255	; 0xff
 800a438:	711a      	strb	r2, [r3, #4]
  }
}
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd90      	pop	{r4, r7, pc}
 800a440:	08019db8 	.word	0x08019db8
 800a444:	08019f38 	.word	0x08019f38
 800a448:	08019dfc 	.word	0x08019dfc

0800a44c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d102      	bne.n	800a46e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff ffad 	bl	800a3c8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	6039      	str	r1, [r7, #0]
 800a482:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a488:	2006      	movs	r0, #6
 800a48a:	f001 ffe1 	bl	800c450 <memp_malloc>
 800a48e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <netconn_alloc+0x22>
    return NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	e04d      	b.n	800a536 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2200      	movs	r2, #0
 800a49e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	79fa      	ldrb	r2, [r7, #7]
 800a4a4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d10c      	bne.n	800a4d0 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a4b6:	2306      	movs	r3, #6
 800a4b8:	60fb      	str	r3, [r7, #12]
      break;
 800a4ba:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	3310      	adds	r3, #16
 800a4c0:	68f9      	ldr	r1, [r7, #12]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f00b fea0 	bl	8016208 <sys_mbox_new>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d008      	beq.n	800a4e0 <netconn_alloc+0x68>
    goto free_and_return;
 800a4ce:	e02d      	b.n	800a52c <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	; (800a540 <netconn_alloc+0xc8>)
 800a4d2:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a4d6:	491b      	ldr	r1, [pc, #108]	; (800a544 <netconn_alloc+0xcc>)
 800a4d8:	481b      	ldr	r0, [pc, #108]	; (800a548 <netconn_alloc+0xd0>)
 800a4da:	f00c fa41 	bl	8016960 <iprintf>
      goto free_and_return;
 800a4de:	e025      	b.n	800a52c <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f00b ff3a 	bl	8016360 <sys_sem_new>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	3310      	adds	r3, #16
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f00b fea0 	bl	801623c <sys_mbox_free>
    goto free_and_return;
 800a4fc:	e016      	b.n	800a52c <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	3314      	adds	r3, #20
 800a502:	4618      	mov	r0, r3
 800a504:	f00b ff1f 	bl	8016346 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	2200      	movs	r2, #0
 800a50c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a514:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2200      	movs	r2, #0
 800a520:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	7dfa      	ldrb	r2, [r7, #23]
 800a526:	771a      	strb	r2, [r3, #28]
  return conn;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	e004      	b.n	800a536 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a52c:	6939      	ldr	r1, [r7, #16]
 800a52e:	2006      	movs	r0, #6
 800a530:	f002 f804 	bl	800c53c <memp_free>
  return NULL;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	08019db8 	.word	0x08019db8
 800a544:	08019f58 	.word	0x08019f58
 800a548:	08019dfc 	.word	0x08019dfc

0800a54c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d006      	beq.n	800a56a <netconn_free+0x1e>
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <netconn_free+0x80>)
 800a55e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a562:	491b      	ldr	r1, [pc, #108]	; (800a5d0 <netconn_free+0x84>)
 800a564:	481b      	ldr	r0, [pc, #108]	; (800a5d4 <netconn_free+0x88>)
 800a566:	f00c f9fb 	bl	8016960 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3310      	adds	r3, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f00b fed8 	bl	8016324 <sys_mbox_valid>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <netconn_free+0x3c>
 800a57a:	4b14      	ldr	r3, [pc, #80]	; (800a5cc <netconn_free+0x80>)
 800a57c:	f240 3223 	movw	r2, #803	; 0x323
 800a580:	4915      	ldr	r1, [pc, #84]	; (800a5d8 <netconn_free+0x8c>)
 800a582:	4814      	ldr	r0, [pc, #80]	; (800a5d4 <netconn_free+0x88>)
 800a584:	f00c f9ec 	bl	8016960 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3314      	adds	r3, #20
 800a58c:	4618      	mov	r0, r3
 800a58e:	f00b fec9 	bl	8016324 <sys_mbox_valid>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d006      	beq.n	800a5a6 <netconn_free+0x5a>
 800a598:	4b0c      	ldr	r3, [pc, #48]	; (800a5cc <netconn_free+0x80>)
 800a59a:	f240 3226 	movw	r2, #806	; 0x326
 800a59e:	490f      	ldr	r1, [pc, #60]	; (800a5dc <netconn_free+0x90>)
 800a5a0:	480c      	ldr	r0, [pc, #48]	; (800a5d4 <netconn_free+0x88>)
 800a5a2:	f00c f9dd 	bl	8016960 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f00b ff3b 	bl	8016426 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	330c      	adds	r3, #12
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00b ff54 	bl	8016462 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	2006      	movs	r0, #6
 800a5be:	f001 ffbd 	bl	800c53c <memp_free>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	08019db8 	.word	0x08019db8
 800a5d0:	08019f80 	.word	0x08019f80
 800a5d4:	08019dfc 	.word	0x08019dfc
 800a5d8:	08019fb0 	.word	0x08019fb0
 800a5dc:	08019fec 	.word	0x08019fec

0800a5e0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3310      	adds	r3, #16
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f00b fe99 	bl	8016324 <sys_mbox_valid>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d02f      	beq.n	800a658 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5f8:	e018      	b.n	800a62c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a602:	2b10      	cmp	r3, #16
 800a604:	d10e      	bne.n	800a624 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f107 020f 	add.w	r2, r7, #15
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fc64 	bl	8009edc <lwip_netconn_is_err_msg>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f002 fe2d 	bl	800d27c <pbuf_free>
 800a622:	e003      	b.n	800a62c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	4618      	mov	r0, r3
 800a628:	f000 ff1a 	bl	800b460 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3310      	adds	r3, #16
 800a630:	f107 0210 	add.w	r2, r7, #16
 800a634:	4611      	mov	r1, r2
 800a636:	4618      	mov	r0, r3
 800a638:	f00b fe5d 	bl	80162f6 <sys_arch_mbox_tryfetch>
 800a63c:	4603      	mov	r3, r0
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a642:	d1da      	bne.n	800a5fa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3310      	adds	r3, #16
 800a648:	4618      	mov	r0, r3
 800a64a:	f00b fdf7 	bl	801623c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3310      	adds	r3, #16
 800a652:	4618      	mov	r0, r3
 800a654:	f00b fe77 	bl	8016346 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3314      	adds	r3, #20
 800a65c:	4618      	mov	r0, r3
 800a65e:	f00b fe61 	bl	8016324 <sys_mbox_valid>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d034      	beq.n	800a6d2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a668:	e01d      	b.n	800a6a6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f107 020e 	add.w	r2, r7, #14
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff fc32 	bl	8009edc <lwip_netconn_is_err_msg>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d113      	bne.n	800a6a6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a682:	6978      	ldr	r0, [r7, #20]
 800a684:	f7ff ffac 	bl	800a5e0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	4618      	mov	r0, r3
 800a696:	f003 fbe1 	bl	800de5c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2200      	movs	r2, #0
 800a69e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	f7ff ff53 	bl	800a54c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3314      	adds	r3, #20
 800a6aa:	f107 0210 	add.w	r2, r7, #16
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f00b fe20 	bl	80162f6 <sys_arch_mbox_tryfetch>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6bc:	d1d5      	bne.n	800a66a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f00b fdba 	bl	801623c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3314      	adds	r3, #20
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f00b fe3a 	bl	8016346 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a6d2:	bf00      	nop
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <lwip_netconn_do_close_internal+0x24>
 800a6f2:	4b87      	ldr	r3, [pc, #540]	; (800a910 <lwip_netconn_do_close_internal+0x234>)
 800a6f4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a6f8:	4986      	ldr	r1, [pc, #536]	; (800a914 <lwip_netconn_do_close_internal+0x238>)
 800a6fa:	4887      	ldr	r0, [pc, #540]	; (800a918 <lwip_netconn_do_close_internal+0x23c>)
 800a6fc:	f00c f930 	bl	8016960 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a708:	2b10      	cmp	r3, #16
 800a70a:	d006      	beq.n	800a71a <lwip_netconn_do_close_internal+0x3e>
 800a70c:	4b80      	ldr	r3, [pc, #512]	; (800a910 <lwip_netconn_do_close_internal+0x234>)
 800a70e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a712:	4982      	ldr	r1, [pc, #520]	; (800a91c <lwip_netconn_do_close_internal+0x240>)
 800a714:	4880      	ldr	r0, [pc, #512]	; (800a918 <lwip_netconn_do_close_internal+0x23c>)
 800a716:	f00c f923 	bl	8016960 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d006      	beq.n	800a730 <lwip_netconn_do_close_internal+0x54>
 800a722:	4b7b      	ldr	r3, [pc, #492]	; (800a910 <lwip_netconn_do_close_internal+0x234>)
 800a724:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a728:	497d      	ldr	r1, [pc, #500]	; (800a920 <lwip_netconn_do_close_internal+0x244>)
 800a72a:	487b      	ldr	r0, [pc, #492]	; (800a918 <lwip_netconn_do_close_internal+0x23c>)
 800a72c:	f00c f918 	bl	8016960 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <lwip_netconn_do_close_internal+0x6a>
 800a738:	4b75      	ldr	r3, [pc, #468]	; (800a910 <lwip_netconn_do_close_internal+0x234>)
 800a73a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a73e:	4979      	ldr	r1, [pc, #484]	; (800a924 <lwip_netconn_do_close_internal+0x248>)
 800a740:	4875      	ldr	r0, [pc, #468]	; (800a918 <lwip_netconn_do_close_internal+0x23c>)
 800a742:	f00c f90d 	bl	8016960 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <lwip_netconn_do_close_internal+0x80>
 800a74e:	4b70      	ldr	r3, [pc, #448]	; (800a910 <lwip_netconn_do_close_internal+0x234>)
 800a750:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a754:	4974      	ldr	r1, [pc, #464]	; (800a928 <lwip_netconn_do_close_internal+0x24c>)
 800a756:	4870      	ldr	r0, [pc, #448]	; (800a918 <lwip_netconn_do_close_internal+0x23c>)
 800a758:	f00c f902 	bl	8016960 <iprintf>

  tpcb = conn->pcb.tcp;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	7a1b      	ldrb	r3, [r3, #8]
 800a768:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d102      	bne.n	800a786 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a780:	2301      	movs	r3, #1
 800a782:	75bb      	strb	r3, [r7, #22]
 800a784:	e01f      	b.n	800a7c6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a786:	7bbb      	ldrb	r3, [r7, #14]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00e      	beq.n	800a7aa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a790:	2b05      	cmp	r3, #5
 800a792:	d007      	beq.n	800a7a4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a798:	2b06      	cmp	r3, #6
 800a79a:	d003      	beq.n	800a7a4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d102      	bne.n	800a7aa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	75bb      	strb	r3, [r7, #22]
 800a7a8:	e00d      	b.n	800a7c6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a7aa:	7b7b      	ldrb	r3, [r7, #13]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d008      	beq.n	800a7c2 <lwip_netconn_do_close_internal+0xe6>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	8b5b      	ldrh	r3, [r3, #26]
 800a7b4:	f003 0310 	and.w	r3, r3, #16
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	75bb      	strb	r3, [r7, #22]
 800a7c0:	e001      	b.n	800a7c6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a7c6:	7dbb      	ldrb	r3, [r7, #22]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6938      	ldr	r0, [r7, #16]
 800a7d0:	f004 fc20 	bl	800f014 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	7d1b      	ldrb	r3, [r3, #20]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d104      	bne.n	800a7e6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6938      	ldr	r0, [r7, #16]
 800a7e0:	f004 fc90 	bl	800f104 <tcp_accept>
 800a7e4:	e01d      	b.n	800a822 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d007      	beq.n	800a7fc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	6938      	ldr	r0, [r7, #16]
 800a7f0:	f004 fc22 	bl	800f038 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6938      	ldr	r0, [r7, #16]
 800a7f8:	f004 fc84 	bl	800f104 <tcp_accept>
    }
    if (shut_tx) {
 800a7fc:	7b7b      	ldrb	r3, [r7, #13]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a802:	2100      	movs	r1, #0
 800a804:	6938      	ldr	r0, [r7, #16]
 800a806:	f004 fc39 	bl	800f07c <tcp_sent>
    }
    if (shut_close) {
 800a80a:	7dbb      	ldrb	r3, [r7, #22]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f004 fc8d 	bl	800f134 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a81a:	2100      	movs	r1, #0
 800a81c:	6938      	ldr	r0, [r7, #16]
 800a81e:	f004 fc4f 	bl	800f0c0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a822:	7dbb      	ldrb	r3, [r7, #22]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a828:	6938      	ldr	r0, [r7, #16]
 800a82a:	f003 f9d1 	bl	800dbd0 <tcp_close>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]
 800a832:	e007      	b.n	800a844 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	7b7a      	ldrb	r2, [r7, #13]
 800a838:	4619      	mov	r1, r3
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f003 f9f4 	bl	800dc28 <tcp_shutdown>
 800a840:	4603      	mov	r3, r0
 800a842:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d102      	bne.n	800a852 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a84c:	2301      	movs	r3, #1
 800a84e:	757b      	strb	r3, [r7, #21]
 800a850:	e016      	b.n	800a880 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85a:	d10f      	bne.n	800a87c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	7a5b      	ldrb	r3, [r3, #9]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10c      	bne.n	800a880 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a866:	2301      	movs	r3, #1
 800a868:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a86a:	7dbb      	ldrb	r3, [r7, #22]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d007      	beq.n	800a880 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a870:	6938      	ldr	r0, [r7, #16]
 800a872:	f003 faf3 	bl	800de5c <tcp_abort>
          err = ERR_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]
 800a87a:	e001      	b.n	800a880 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a87c:	2301      	movs	r3, #1
 800a87e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a880:	7d7b      	ldrb	r3, [r7, #21]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d052      	beq.n	800a92c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	330c      	adds	r3, #12
 800a88e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	7dfa      	ldrb	r2, [r7, #23]
 800a896:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d129      	bne.n	800a900 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a8ac:	7dbb      	ldrb	r3, [r7, #22]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00c      	beq.n	800a8cc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <lwip_netconn_do_close_internal+0x1f0>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2104      	movs	r1, #4
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	4798      	blx	r3
      }
      if (shut_rx) {
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d005      	beq.n	800a8e6 <lwip_netconn_do_close_internal+0x20a>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	4798      	blx	r3
      }
      if (shut_tx) {
 800a8e6:	7b7b      	ldrb	r3, [r7, #13]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d009      	beq.n	800a900 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d005      	beq.n	800a900 <lwip_netconn_do_close_internal+0x224>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a906:	68b8      	ldr	r0, [r7, #8]
 800a908:	f00b fd80 	bl	801640c <sys_sem_signal>
    }
    return ERR_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	e03c      	b.n	800a98a <lwip_netconn_do_close_internal+0x2ae>
 800a910:	08019db8 	.word	0x08019db8
 800a914:	0801a028 	.word	0x0801a028
 800a918:	08019dfc 	.word	0x08019dfc
 800a91c:	0801a038 	.word	0x0801a038
 800a920:	0801a058 	.word	0x0801a058
 800a924:	0801a07c 	.word	0x0801a07c
 800a928:	08019ebc 	.word	0x08019ebc
  }
  if (!close_finished) {
 800a92c:	7d7b      	ldrb	r3, [r7, #21]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d11e      	bne.n	800a970 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	7d1b      	ldrb	r3, [r3, #20]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d106      	bne.n	800a948 <lwip_netconn_do_close_internal+0x26c>
 800a93a:	4b16      	ldr	r3, [pc, #88]	; (800a994 <lwip_netconn_do_close_internal+0x2b8>)
 800a93c:	f240 4241 	movw	r2, #1089	; 0x441
 800a940:	4915      	ldr	r1, [pc, #84]	; (800a998 <lwip_netconn_do_close_internal+0x2bc>)
 800a942:	4816      	ldr	r0, [pc, #88]	; (800a99c <lwip_netconn_do_close_internal+0x2c0>)
 800a944:	f00c f80c 	bl	8016960 <iprintf>
    if (shut_tx) {
 800a948:	7b7b      	ldrb	r3, [r7, #13]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a94e:	4914      	ldr	r1, [pc, #80]	; (800a9a0 <lwip_netconn_do_close_internal+0x2c4>)
 800a950:	6938      	ldr	r0, [r7, #16]
 800a952:	f004 fb93 	bl	800f07c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a956:	2201      	movs	r2, #1
 800a958:	4912      	ldr	r1, [pc, #72]	; (800a9a4 <lwip_netconn_do_close_internal+0x2c8>)
 800a95a:	6938      	ldr	r0, [r7, #16]
 800a95c:	f004 fbea 	bl	800f134 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a960:	4911      	ldr	r1, [pc, #68]	; (800a9a8 <lwip_netconn_do_close_internal+0x2cc>)
 800a962:	6938      	ldr	r0, [r7, #16]
 800a964:	f004 fbac 	bl	800f0c0 <tcp_err>
    tcp_arg(tpcb, conn);
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	6938      	ldr	r0, [r7, #16]
 800a96c:	f004 fb52 	bl	800f014 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <lwip_netconn_do_close_internal+0x2aa>
 800a978:	4b06      	ldr	r3, [pc, #24]	; (800a994 <lwip_netconn_do_close_internal+0x2b8>)
 800a97a:	f240 424d 	movw	r2, #1101	; 0x44d
 800a97e:	490b      	ldr	r1, [pc, #44]	; (800a9ac <lwip_netconn_do_close_internal+0x2d0>)
 800a980:	4806      	ldr	r0, [pc, #24]	; (800a99c <lwip_netconn_do_close_internal+0x2c0>)
 800a982:	f00b ffed 	bl	8016960 <iprintf>
  return err;
 800a986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	08019db8 	.word	0x08019db8
 800a998:	0801a090 	.word	0x0801a090
 800a99c:	08019dfc 	.word	0x08019dfc
 800a9a0:	0800a125 	.word	0x0800a125
 800a9a4:	0800a05d 	.word	0x0800a05d
 800a9a8:	0800a1cd 	.word	0x0800a1cd
 800a9ac:	0801a0b4 	.word	0x0801a0b4

0800a9b0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	785b      	ldrb	r3, [r3, #1]
 800a9c2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00d      	beq.n	800a9e6 <lwip_netconn_do_delconn+0x36>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d4:	2b10      	cmp	r3, #16
 800a9d6:	d006      	beq.n	800a9e6 <lwip_netconn_do_delconn+0x36>
 800a9d8:	4b59      	ldr	r3, [pc, #356]	; (800ab40 <lwip_netconn_do_delconn+0x190>)
 800a9da:	f240 425e 	movw	r2, #1118	; 0x45e
 800a9de:	4959      	ldr	r1, [pc, #356]	; (800ab44 <lwip_netconn_do_delconn+0x194>)
 800a9e0:	4859      	ldr	r0, [pc, #356]	; (800ab48 <lwip_netconn_do_delconn+0x198>)
 800a9e2:	f00b ffbd 	bl	8016960 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <lwip_netconn_do_delconn+0x48>
 800a9ec:	7afb      	ldrb	r3, [r7, #11]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d002      	beq.n	800a9f8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a9f2:	7afb      	ldrb	r3, [r7, #11]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d109      	bne.n	800aa0c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d10a      	bne.n	800aa14 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	7f1b      	ldrb	r3, [r3, #28]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	22fb      	movs	r2, #251	; 0xfb
 800aa10:	711a      	strb	r2, [r3, #4]
 800aa12:	e089      	b.n	800ab28 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d10d      	bne.n	800aa36 <lwip_netconn_do_delconn+0x86>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	7f1b      	ldrb	r3, [r3, #28]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d106      	bne.n	800aa36 <lwip_netconn_do_delconn+0x86>
 800aa28:	4b45      	ldr	r3, [pc, #276]	; (800ab40 <lwip_netconn_do_delconn+0x190>)
 800aa2a:	f240 427a 	movw	r2, #1146	; 0x47a
 800aa2e:	4947      	ldr	r1, [pc, #284]	; (800ab4c <lwip_netconn_do_delconn+0x19c>)
 800aa30:	4845      	ldr	r0, [pc, #276]	; (800ab48 <lwip_netconn_do_delconn+0x198>)
 800aa32:	f00b ff95 	bl	8016960 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fdcd 	bl	800a5e0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d051      	beq.n	800aaf4 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa5a:	2b10      	cmp	r3, #16
 800aa5c:	d145      	bne.n	800aaea <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d006      	beq.n	800aa76 <lwip_netconn_do_delconn+0xc6>
 800aa68:	4b35      	ldr	r3, [pc, #212]	; (800ab40 <lwip_netconn_do_delconn+0x190>)
 800aa6a:	f240 4294 	movw	r2, #1172	; 0x494
 800aa6e:	4938      	ldr	r1, [pc, #224]	; (800ab50 <lwip_netconn_do_delconn+0x1a0>)
 800aa70:	4835      	ldr	r0, [pc, #212]	; (800ab48 <lwip_netconn_do_delconn+0x198>)
 800aa72:	f00b ff75 	bl	8016960 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2203      	movs	r2, #3
 800aa82:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fe22 	bl	800a6dc <lwip_netconn_do_close_internal>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d04b      	beq.n	800ab36 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d006      	beq.n	800aab6 <lwip_netconn_do_delconn+0x106>
 800aaa8:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <lwip_netconn_do_delconn+0x190>)
 800aaaa:	f240 429a 	movw	r2, #1178	; 0x49a
 800aaae:	4929      	ldr	r1, [pc, #164]	; (800ab54 <lwip_netconn_do_delconn+0x1a4>)
 800aab0:	4825      	ldr	r0, [pc, #148]	; (800ab48 <lwip_netconn_do_delconn+0x198>)
 800aab2:	f00b ff55 	bl	8016960 <iprintf>
            UNLOCK_TCPIP_CORE();
 800aab6:	4828      	ldr	r0, [pc, #160]	; (800ab58 <lwip_netconn_do_delconn+0x1a8>)
 800aab8:	f00b fd11 	bl	80164de <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	330c      	adds	r3, #12
 800aac2:	2100      	movs	r1, #0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f00b fc70 	bl	80163aa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aaca:	4823      	ldr	r0, [pc, #140]	; (800ab58 <lwip_netconn_do_delconn+0x1a8>)
 800aacc:	f00b fcf8 	bl	80164c0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d02d      	beq.n	800ab36 <lwip_netconn_do_delconn+0x186>
 800aada:	4b19      	ldr	r3, [pc, #100]	; (800ab40 <lwip_netconn_do_delconn+0x190>)
 800aadc:	f240 429e 	movw	r2, #1182	; 0x49e
 800aae0:	491c      	ldr	r1, [pc, #112]	; (800ab54 <lwip_netconn_do_delconn+0x1a4>)
 800aae2:	4819      	ldr	r0, [pc, #100]	; (800ab48 <lwip_netconn_do_delconn+0x198>)
 800aae4:	f00b ff3c 	bl	8016960 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aae8:	e025      	b.n	800ab36 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800aaea:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d007      	beq.n	800ab0e <lwip_netconn_do_delconn+0x15e>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	6810      	ldr	r0, [r2, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <lwip_netconn_do_delconn+0x178>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	6810      	ldr	r0, [r2, #0]
 800ab22:	2200      	movs	r2, #0
 800ab24:	2102      	movs	r1, #2
 800ab26:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f00b fc86 	bl	8016440 <sys_sem_valid>
 800ab34:	e000      	b.n	800ab38 <lwip_netconn_do_delconn+0x188>
          return;
 800ab36:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	08019db8 	.word	0x08019db8
 800ab44:	0801a0c4 	.word	0x0801a0c4
 800ab48:	08019dfc 	.word	0x08019dfc
 800ab4c:	0801a0d8 	.word	0x0801a0d8
 800ab50:	0801a0f8 	.word	0x0801a0f8
 800ab54:	0801a114 	.word	0x0801a114
 800ab58:	20009ab8 	.word	0x20009ab8

0800ab5c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d016      	beq.n	800aba0 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab7c:	2b10      	cmp	r3, #16
 800ab7e:	d10c      	bne.n	800ab9a <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6858      	ldr	r0, [r3, #4]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6899      	ldr	r1, [r3, #8]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	899b      	ldrh	r3, [r3, #12]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f003 f970 	bl	800de74 <tcp_bind>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]
        break;
 800ab98:	e004      	b.n	800aba4 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ab9a:	23fa      	movs	r3, #250	; 0xfa
 800ab9c:	73fb      	strb	r3, [r7, #15]
        break;
 800ab9e:	e001      	b.n	800aba4 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800aba0:	23fa      	movs	r3, #250	; 0xfa
 800aba2:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	7bfa      	ldrb	r2, [r7, #15]
 800aba8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800abd0:	f06f 0305 	mvn.w	r3, #5
 800abd4:	e070      	b.n	800acb8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	785b      	ldrb	r3, [r3, #1]
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d006      	beq.n	800abec <lwip_netconn_do_connected+0x38>
 800abde:	4b38      	ldr	r3, [pc, #224]	; (800acc0 <lwip_netconn_do_connected+0x10c>)
 800abe0:	f240 5223 	movw	r2, #1315	; 0x523
 800abe4:	4937      	ldr	r1, [pc, #220]	; (800acc4 <lwip_netconn_do_connected+0x110>)
 800abe6:	4838      	ldr	r0, [pc, #224]	; (800acc8 <lwip_netconn_do_connected+0x114>)
 800abe8:	f00b feba 	bl	8016960 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10c      	bne.n	800ac0e <lwip_netconn_do_connected+0x5a>
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	7f1b      	ldrb	r3, [r3, #28]
 800abf8:	f003 0304 	and.w	r3, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d106      	bne.n	800ac0e <lwip_netconn_do_connected+0x5a>
 800ac00:	4b2f      	ldr	r3, [pc, #188]	; (800acc0 <lwip_netconn_do_connected+0x10c>)
 800ac02:	f240 5224 	movw	r2, #1316	; 0x524
 800ac06:	4931      	ldr	r1, [pc, #196]	; (800accc <lwip_netconn_do_connected+0x118>)
 800ac08:	482f      	ldr	r0, [pc, #188]	; (800acc8 <lwip_netconn_do_connected+0x114>)
 800ac0a:	f00b fea9 	bl	8016960 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d008      	beq.n	800ac28 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	79fa      	ldrb	r2, [r7, #7]
 800ac1c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	330c      	adds	r3, #12
 800ac26:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac30:	2b10      	cmp	r3, #16
 800ac32:	d106      	bne.n	800ac42 <lwip_netconn_do_connected+0x8e>
 800ac34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ac3c:	69b8      	ldr	r0, [r7, #24]
 800ac3e:	f7ff fb9b 	bl	800a378 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	7f1b      	ldrb	r3, [r3, #28]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bf0c      	ite	eq
 800ac4e:	2301      	moveq	r3, #1
 800ac50:	2300      	movne	r3, #0
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	7f1b      	ldrb	r3, [r3, #28]
 800ac5a:	f023 0304 	bic.w	r3, r3, #4
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <lwip_netconn_do_connected+0xbc>
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10c      	bne.n	800ac8a <lwip_netconn_do_connected+0xd6>
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <lwip_netconn_do_connected+0xc8>
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <lwip_netconn_do_connected+0xd6>
 800ac7c:	4b10      	ldr	r3, [pc, #64]	; (800acc0 <lwip_netconn_do_connected+0x10c>)
 800ac7e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800ac82:	4913      	ldr	r1, [pc, #76]	; (800acd0 <lwip_netconn_do_connected+0x11c>)
 800ac84:	4810      	ldr	r0, [pc, #64]	; (800acc8 <lwip_netconn_do_connected+0x114>)
 800ac86:	f00b fe6b 	bl	8016960 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	2200      	movs	r2, #0
 800ac94:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <lwip_netconn_do_connected+0xf6>
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	2200      	movs	r2, #0
 800aca4:	2102      	movs	r1, #2
 800aca6:	69b8      	ldr	r0, [r7, #24]
 800aca8:	4798      	blx	r3

  if (was_blocking) {
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800acb0:	69f8      	ldr	r0, [r7, #28]
 800acb2:	f00b fbab 	bl	801640c <sys_sem_signal>
  }
  return ERR_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	08019db8 	.word	0x08019db8
 800acc4:	0801a11c 	.word	0x0801a11c
 800acc8:	08019dfc 	.word	0x08019dfc
 800accc:	0801a13c 	.word	0x0801a13c
 800acd0:	0801a17c 	.word	0x0801a17c

0800acd4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d102      	bne.n	800acf0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800acea:	23f1      	movs	r3, #241	; 0xf1
 800acec:	75fb      	strb	r3, [r7, #23]
 800acee:	e08b      	b.n	800ae08 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d179      	bne.n	800adf2 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	785b      	ldrb	r3, [r3, #1]
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d102      	bne.n	800ad0e <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800ad08:	23f7      	movs	r3, #247	; 0xf7
 800ad0a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800ad0c:	e07b      	b.n	800ae06 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	785b      	ldrb	r3, [r3, #1]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800ad18:	23f6      	movs	r3, #246	; 0xf6
 800ad1a:	75fb      	strb	r3, [r7, #23]
        break;
 800ad1c:	e073      	b.n	800ae06 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff fb28 	bl	800a378 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6858      	ldr	r0, [r3, #4]
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6899      	ldr	r1, [r3, #8]
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	899a      	ldrh	r2, [r3, #12]
 800ad36:	4b38      	ldr	r3, [pc, #224]	; (800ae18 <lwip_netconn_do_connect+0x144>)
 800ad38:	f003 fa24 	bl	800e184 <tcp_connect>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800ad40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d15e      	bne.n	800ae06 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	7f1b      	ldrb	r3, [r3, #28]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bf14      	ite	ne
 800ad56:	2301      	movne	r3, #1
 800ad58:	2300      	moveq	r3, #0
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2203      	movs	r2, #3
 800ad64:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d009      	beq.n	800ad80 <lwip_netconn_do_connect+0xac>
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	7f1a      	ldrb	r2, [r3, #28]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f042 0204 	orr.w	r2, r2, #4
 800ad7a:	b2d2      	uxtb	r2, r2
 800ad7c:	771a      	strb	r2, [r3, #28]
 800ad7e:	e008      	b.n	800ad92 <lwip_netconn_do_connect+0xbe>
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	7f1a      	ldrb	r2, [r3, #28]
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 0204 	bic.w	r2, r2, #4
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800ad98:	23fb      	movs	r3, #251	; 0xfb
 800ad9a:	75fb      	strb	r3, [r7, #23]
        break;
 800ad9c:	e033      	b.n	800ae06 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b03      	cmp	r3, #3
 800adae:	d006      	beq.n	800adbe <lwip_netconn_do_connect+0xea>
 800adb0:	4b1a      	ldr	r3, [pc, #104]	; (800ae1c <lwip_netconn_do_connect+0x148>)
 800adb2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800adb6:	491a      	ldr	r1, [pc, #104]	; (800ae20 <lwip_netconn_do_connect+0x14c>)
 800adb8:	481a      	ldr	r0, [pc, #104]	; (800ae24 <lwip_netconn_do_connect+0x150>)
 800adba:	f00b fdd1 	bl	8016960 <iprintf>
              UNLOCK_TCPIP_CORE();
 800adbe:	481a      	ldr	r0, [pc, #104]	; (800ae28 <lwip_netconn_do_connect+0x154>)
 800adc0:	f00b fb8d 	bl	80164de <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	330c      	adds	r3, #12
 800adca:	2100      	movs	r1, #0
 800adcc:	4618      	mov	r0, r3
 800adce:	f00b faec 	bl	80163aa <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800add2:	4815      	ldr	r0, [pc, #84]	; (800ae28 <lwip_netconn_do_connect+0x154>)
 800add4:	f00b fb74 	bl	80164c0 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d116      	bne.n	800ae10 <lwip_netconn_do_connect+0x13c>
 800ade2:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <lwip_netconn_do_connect+0x148>)
 800ade4:	f240 5274 	movw	r2, #1396	; 0x574
 800ade8:	490d      	ldr	r1, [pc, #52]	; (800ae20 <lwip_netconn_do_connect+0x14c>)
 800adea:	480e      	ldr	r0, [pc, #56]	; (800ae24 <lwip_netconn_do_connect+0x150>)
 800adec:	f00b fdb8 	bl	8016960 <iprintf>
              return;
 800adf0:	e00e      	b.n	800ae10 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800adf2:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <lwip_netconn_do_connect+0x148>)
 800adf4:	f240 527d 	movw	r2, #1405	; 0x57d
 800adf8:	490c      	ldr	r1, [pc, #48]	; (800ae2c <lwip_netconn_do_connect+0x158>)
 800adfa:	480a      	ldr	r0, [pc, #40]	; (800ae24 <lwip_netconn_do_connect+0x150>)
 800adfc:	f00b fdb0 	bl	8016960 <iprintf>
 800ae00:	23fa      	movs	r3, #250	; 0xfa
 800ae02:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800ae04:	e000      	b.n	800ae08 <lwip_netconn_do_connect+0x134>
        break;
 800ae06:	bf00      	nop
    }
  }
  msg->err = err;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	7dfa      	ldrb	r2, [r7, #23]
 800ae0c:	711a      	strb	r2, [r3, #4]
 800ae0e:	e000      	b.n	800ae12 <lwip_netconn_do_connect+0x13e>
              return;
 800ae10:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800ae12:	3718      	adds	r7, #24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	0800abb5 	.word	0x0800abb5
 800ae1c:	08019db8 	.word	0x08019db8
 800ae20:	0801a114 	.word	0x0801a114
 800ae24:	08019dfc 	.word	0x08019dfc
 800ae28:	20009ab8 	.word	0x20009ab8
 800ae2c:	0801a19c 	.word	0x0801a19c

0800ae30 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d022      	beq.n	800ae92 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae56:	2b10      	cmp	r3, #16
 800ae58:	d11b      	bne.n	800ae92 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae66:	d202      	bcs.n	800ae6e <lwip_netconn_do_recv+0x3e>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	e001      	b.n	800ae72 <lwip_netconn_do_recv+0x42>
 800ae6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae72:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	89fa      	ldrh	r2, [r7, #14]
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f003 f8ea 	bl	800e058 <tcp_recved>
        remaining -= recved;
 800ae84:	89fb      	ldrh	r3, [r7, #14]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e6      	bne.n	800ae60 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ae92:	bf00      	nop
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <lwip_netconn_do_writemore+0x24>
 800aeb2:	4b96      	ldr	r3, [pc, #600]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800aeb4:	f240 6273 	movw	r2, #1651	; 0x673
 800aeb8:	4995      	ldr	r1, [pc, #596]	; (800b110 <lwip_netconn_do_writemore+0x274>)
 800aeba:	4896      	ldr	r0, [pc, #600]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800aebc:	f00b fd50 	bl	8016960 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d006      	beq.n	800aed6 <lwip_netconn_do_writemore+0x3a>
 800aec8:	4b90      	ldr	r3, [pc, #576]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800aeca:	f240 6274 	movw	r2, #1652	; 0x674
 800aece:	4992      	ldr	r1, [pc, #584]	; (800b118 <lwip_netconn_do_writemore+0x27c>)
 800aed0:	4890      	ldr	r0, [pc, #576]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800aed2:	f00b fd45 	bl	8016960 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <lwip_netconn_do_writemore+0x50>
 800aede:	4b8b      	ldr	r3, [pc, #556]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800aee0:	f240 6275 	movw	r2, #1653	; 0x675
 800aee4:	498d      	ldr	r1, [pc, #564]	; (800b11c <lwip_netconn_do_writemore+0x280>)
 800aee6:	488b      	ldr	r0, [pc, #556]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800aee8:	f00b fd3a 	bl	8016960 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d106      	bne.n	800af02 <lwip_netconn_do_writemore+0x66>
 800aef4:	4b85      	ldr	r3, [pc, #532]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800aef6:	f240 6276 	movw	r2, #1654	; 0x676
 800aefa:	4989      	ldr	r1, [pc, #548]	; (800b120 <lwip_netconn_do_writemore+0x284>)
 800aefc:	4885      	ldr	r0, [pc, #532]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800aefe:	f00b fd2f 	bl	8016960 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	699a      	ldr	r2, [r3, #24]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d306      	bcc.n	800af20 <lwip_netconn_do_writemore+0x84>
 800af12:	4b7e      	ldr	r3, [pc, #504]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800af14:	f240 6277 	movw	r2, #1655	; 0x677
 800af18:	4982      	ldr	r1, [pc, #520]	; (800b124 <lwip_netconn_do_writemore+0x288>)
 800af1a:	487e      	ldr	r0, [pc, #504]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800af1c:	f00b fd20 	bl	8016960 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	899b      	ldrh	r3, [r3, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <lwip_netconn_do_writemore+0x9c>
 800af2a:	4b78      	ldr	r3, [pc, #480]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800af2c:	f240 6279 	movw	r2, #1657	; 0x679
 800af30:	497d      	ldr	r1, [pc, #500]	; (800b128 <lwip_netconn_do_writemore+0x28c>)
 800af32:	4878      	ldr	r0, [pc, #480]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800af34:	f00b fd14 	bl	8016960 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	7f1b      	ldrb	r3, [r3, #28]
 800af3e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7f1b      	ldrb	r3, [r3, #28]
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d104      	bne.n	800af56 <lwip_netconn_do_writemore+0xba>
 800af4c:	7ebb      	ldrb	r3, [r7, #26]
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <lwip_netconn_do_writemore+0xbe>
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <lwip_netconn_do_writemore+0xc0>
 800af5a:	2300      	movs	r3, #0
 800af5c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	4413      	add	r3, r2
 800af6e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a1b      	ldr	r3, [r3, #32]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af88:	d307      	bcc.n	800af9a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800af8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af8e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800af90:	7ebb      	ldrb	r3, [r7, #26]
 800af92:	f043 0302 	orr.w	r3, r3, #2
 800af96:	76bb      	strb	r3, [r7, #26]
 800af98:	e001      	b.n	800af9e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afa6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800afa8:	89fa      	ldrh	r2, [r7, #14]
 800afaa:	8bbb      	ldrh	r3, [r7, #28]
 800afac:	429a      	cmp	r2, r3
 800afae:	d216      	bcs.n	800afde <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800afb0:	89fb      	ldrh	r3, [r7, #14]
 800afb2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800afb4:	7e3b      	ldrb	r3, [r7, #24]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00d      	beq.n	800afd6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800afba:	8bbb      	ldrh	r3, [r7, #28]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10e      	bne.n	800afde <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <lwip_netconn_do_writemore+0x134>
 800afca:	f06f 0306 	mvn.w	r3, #6
 800afce:	e000      	b.n	800afd2 <lwip_netconn_do_writemore+0x136>
 800afd0:	2300      	movs	r3, #0
 800afd2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800afd4:	e07d      	b.n	800b0d2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800afd6:	7ebb      	ldrb	r3, [r7, #26]
 800afd8:	f043 0302 	orr.w	r3, r3, #2
 800afdc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	8bbb      	ldrh	r3, [r7, #28]
 800afe6:	441a      	add	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d906      	bls.n	800b002 <lwip_netconn_do_writemore+0x166>
 800aff4:	4b45      	ldr	r3, [pc, #276]	; (800b10c <lwip_netconn_do_writemore+0x270>)
 800aff6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800affa:	494c      	ldr	r1, [pc, #304]	; (800b12c <lwip_netconn_do_writemore+0x290>)
 800affc:	4845      	ldr	r0, [pc, #276]	; (800b114 <lwip_netconn_do_writemore+0x278>)
 800affe:	f00b fcaf 	bl	8016960 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b002:	8bbb      	ldrh	r3, [r7, #28]
 800b004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b008:	4293      	cmp	r3, r2
 800b00a:	d103      	bne.n	800b014 <lwip_netconn_do_writemore+0x178>
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b012:	d209      	bcs.n	800b028 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b018:	8bba      	ldrh	r2, [r7, #28]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d10b      	bne.n	800b036 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	899b      	ldrh	r3, [r3, #12]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d906      	bls.n	800b036 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b028:	2301      	movs	r3, #1
 800b02a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b02c:	7ebb      	ldrb	r3, [r7, #26]
 800b02e:	f043 0302 	orr.w	r3, r3, #2
 800b032:	76bb      	strb	r3, [r7, #26]
 800b034:	e001      	b.n	800b03a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b036:	2300      	movs	r3, #0
 800b038:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6858      	ldr	r0, [r3, #4]
 800b03e:	7ebb      	ldrb	r3, [r7, #26]
 800b040:	8bba      	ldrh	r2, [r7, #28]
 800b042:	6979      	ldr	r1, [r7, #20]
 800b044:	f006 ff28 	bl	8011e98 <tcp_write>
 800b048:	4603      	mov	r3, r0
 800b04a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b04c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d12c      	bne.n	800b0ae <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	6999      	ldr	r1, [r3, #24]
 800b05a:	8bba      	ldrh	r2, [r7, #28]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	440a      	add	r2, r1
 800b062:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	6919      	ldr	r1, [r3, #16]
 800b06a:	8bba      	ldrh	r2, [r7, #28]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	440a      	add	r2, r1
 800b072:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	691a      	ldr	r2, [r3, #16]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	429a      	cmp	r2, r3
 800b084:	d113      	bne.n	800b0ae <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	899a      	ldrh	r2, [r3, #12]
 800b08c:	3a01      	subs	r2, #1
 800b08e:	b292      	uxth	r2, r2
 800b090:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	899b      	ldrh	r3, [r3, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d008      	beq.n	800b0ae <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	689a      	ldr	r2, [r3, #8]
 800b0a2:	3208      	adds	r2, #8
 800b0a4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b0ae:	7e7b      	ldrb	r3, [r7, #25]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d004      	beq.n	800b0be <lwip_netconn_do_writemore+0x222>
 800b0b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f43f af50 	beq.w	800af5e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b0be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <lwip_netconn_do_writemore+0x234>
 800b0c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ce:	d146      	bne.n	800b15e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b0d0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b0d2:	7e3b      	ldrb	r3, [r7, #24]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d02b      	beq.n	800b130 <lwip_netconn_do_writemore+0x294>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d223      	bcs.n	800b130 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d005      	beq.n	800b0fc <lwip_netconn_do_writemore+0x260>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2103      	movs	r1, #3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7f1b      	ldrb	r3, [r3, #28]
 800b100:	f043 0310 	orr.w	r3, r3, #16
 800b104:	b2da      	uxtb	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	771a      	strb	r2, [r3, #28]
 800b10a:	e028      	b.n	800b15e <lwip_netconn_do_writemore+0x2c2>
 800b10c:	08019db8 	.word	0x08019db8
 800b110:	08019eac 	.word	0x08019eac
 800b114:	08019dfc 	.word	0x08019dfc
 800b118:	0801a1b4 	.word	0x0801a1b4
 800b11c:	08019ebc 	.word	0x08019ebc
 800b120:	0801a1d4 	.word	0x0801a1d4
 800b124:	0801a1ec 	.word	0x0801a1ec
 800b128:	0801a22c 	.word	0x0801a22c
 800b12c:	0801a254 	.word	0x0801a254
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b138:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b13c:	d305      	bcc.n	800b14a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b146:	2b04      	cmp	r3, #4
 800b148:	d909      	bls.n	800b15e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <lwip_netconn_do_writemore+0x2c2>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b156:	2200      	movs	r2, #0
 800b158:	2103      	movs	r1, #3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b15e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d11d      	bne.n	800b1a2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	699a      	ldr	r2, [r3, #24]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	429a      	cmp	r2, r3
 800b174:	d002      	beq.n	800b17c <lwip_netconn_do_writemore+0x2e0>
 800b176:	7e3b      	ldrb	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b17c:	2301      	movs	r3, #1
 800b17e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	4618      	mov	r0, r3
 800b186:	f007 fc71 	bl	8012a6c <tcp_output>
 800b18a:	4603      	mov	r3, r0
 800b18c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b18e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b192:	f113 0f04 	cmn.w	r3, #4
 800b196:	d12c      	bne.n	800b1f2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b198:	7b3b      	ldrb	r3, [r7, #12]
 800b19a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b19c:	2301      	movs	r3, #1
 800b19e:	76fb      	strb	r3, [r7, #27]
 800b1a0:	e027      	b.n	800b1f2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b1a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1aa:	d120      	bne.n	800b1ee <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f007 fc5b 	bl	8012a6c <tcp_output>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b1ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b1be:	f113 0f04 	cmn.w	r3, #4
 800b1c2:	d104      	bne.n	800b1ce <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1c4:	7b7b      	ldrb	r3, [r7, #13]
 800b1c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	76fb      	strb	r3, [r7, #27]
 800b1cc:	e011      	b.n	800b1f2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b1ce:	7e3b      	ldrb	r3, [r7, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00e      	beq.n	800b1f2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <lwip_netconn_do_writemore+0x348>
 800b1de:	f06f 0306 	mvn.w	r3, #6
 800b1e2:	e000      	b.n	800b1e6 <lwip_netconn_do_writemore+0x34a>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	76fb      	strb	r3, [r7, #27]
 800b1ec:	e001      	b.n	800b1f2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b1f2:	7efb      	ldrb	r3, [r7, #27]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d015      	beq.n	800b224 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	330c      	adds	r3, #12
 800b200:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	7ffa      	ldrb	r2, [r7, #31]
 800b208:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b216:	78fb      	ldrb	r3, [r7, #3]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b21c:	68b8      	ldr	r0, [r7, #8]
 800b21e:	f00b f8f5 	bl	801640c <sys_sem_signal>
 800b222:	e002      	b.n	800b22a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b228:	e000      	b.n	800b22c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3720      	adds	r7, #32
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4618      	mov	r0, r3
 800b246:	f7fe fdf8 	bl	8009e3a <netconn_err>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d163      	bne.n	800b31e <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b260:	2b10      	cmp	r3, #16
 800b262:	d15c      	bne.n	800b31e <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b26e:	23fb      	movs	r3, #251	; 0xfb
 800b270:	73fb      	strb	r3, [r7, #15]
 800b272:	e054      	b.n	800b31e <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d04d      	beq.n	800b31a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2201      	movs	r2, #1
 800b284:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d006      	beq.n	800b29e <lwip_netconn_do_write+0x6a>
 800b290:	4b27      	ldr	r3, [pc, #156]	; (800b330 <lwip_netconn_do_write+0xfc>)
 800b292:	f240 7223 	movw	r2, #1827	; 0x723
 800b296:	4927      	ldr	r1, [pc, #156]	; (800b334 <lwip_netconn_do_write+0x100>)
 800b298:	4827      	ldr	r0, [pc, #156]	; (800b338 <lwip_netconn_do_write+0x104>)
 800b29a:	f00b fb61 	bl	8016960 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d106      	bne.n	800b2b4 <lwip_netconn_do_write+0x80>
 800b2a6:	4b22      	ldr	r3, [pc, #136]	; (800b330 <lwip_netconn_do_write+0xfc>)
 800b2a8:	f240 7224 	movw	r2, #1828	; 0x724
 800b2ac:	4923      	ldr	r1, [pc, #140]	; (800b33c <lwip_netconn_do_write+0x108>)
 800b2ae:	4822      	ldr	r0, [pc, #136]	; (800b338 <lwip_netconn_do_write+0x104>)
 800b2b0:	f00b fb56 	bl	8016960 <iprintf>
        msg->conn->current_msg = msg;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fdea 	bl	800ae9c <lwip_netconn_do_writemore>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d02b      	beq.n	800b326 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	785b      	ldrb	r3, [r3, #1]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d006      	beq.n	800b2e6 <lwip_netconn_do_write+0xb2>
 800b2d8:	4b15      	ldr	r3, [pc, #84]	; (800b330 <lwip_netconn_do_write+0xfc>)
 800b2da:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b2de:	4918      	ldr	r1, [pc, #96]	; (800b340 <lwip_netconn_do_write+0x10c>)
 800b2e0:	4815      	ldr	r0, [pc, #84]	; (800b338 <lwip_netconn_do_write+0x104>)
 800b2e2:	f00b fb3d 	bl	8016960 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b2e6:	4817      	ldr	r0, [pc, #92]	; (800b344 <lwip_netconn_do_write+0x110>)
 800b2e8:	f00b f8f9 	bl	80164de <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f00b f858 	bl	80163aa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b2fa:	4812      	ldr	r0, [pc, #72]	; (800b344 <lwip_netconn_do_write+0x110>)
 800b2fc:	f00b f8e0 	bl	80164c0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	785b      	ldrb	r3, [r3, #1]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d10d      	bne.n	800b326 <lwip_netconn_do_write+0xf2>
 800b30a:	4b09      	ldr	r3, [pc, #36]	; (800b330 <lwip_netconn_do_write+0xfc>)
 800b30c:	f240 722c 	movw	r2, #1836	; 0x72c
 800b310:	490b      	ldr	r1, [pc, #44]	; (800b340 <lwip_netconn_do_write+0x10c>)
 800b312:	4809      	ldr	r0, [pc, #36]	; (800b338 <lwip_netconn_do_write+0x104>)
 800b314:	f00b fb24 	bl	8016960 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b318:	e005      	b.n	800b326 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800b31a:	23f5      	movs	r3, #245	; 0xf5
 800b31c:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	7bfa      	ldrb	r2, [r7, #15]
 800b322:	711a      	strb	r2, [r3, #4]
 800b324:	e000      	b.n	800b328 <lwip_netconn_do_write+0xf4>
        return;
 800b326:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	08019db8 	.word	0x08019db8
 800b334:	0801a0f8 	.word	0x0801a0f8
 800b338:	08019dfc 	.word	0x08019dfc
 800b33c:	0801a280 	.word	0x0801a280
 800b340:	0801a114 	.word	0x0801a114
 800b344:	20009ab8 	.word	0x20009ab8

0800b348 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	785b      	ldrb	r3, [r3, #1]
 800b35a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d069      	beq.n	800b43a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b370:	2b10      	cmp	r3, #16
 800b372:	d162      	bne.n	800b43a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d002      	beq.n	800b382 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d05b      	beq.n	800b43a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b382:	7afb      	ldrb	r3, [r7, #11]
 800b384:	2b03      	cmp	r3, #3
 800b386:	d103      	bne.n	800b390 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	22f5      	movs	r2, #245	; 0xf5
 800b38c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b38e:	e059      	b.n	800b444 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b390:	7afb      	ldrb	r3, [r7, #11]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d103      	bne.n	800b39e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	22fb      	movs	r2, #251	; 0xfb
 800b39a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b39c:	e052      	b.n	800b444 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	7a1b      	ldrb	r3, [r3, #8]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff f916 	bl	800a5e0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d006      	beq.n	800b3cc <lwip_netconn_do_close+0x84>
 800b3be:	4b23      	ldr	r3, [pc, #140]	; (800b44c <lwip_netconn_do_close+0x104>)
 800b3c0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b3c4:	4922      	ldr	r1, [pc, #136]	; (800b450 <lwip_netconn_do_close+0x108>)
 800b3c6:	4823      	ldr	r0, [pc, #140]	; (800b454 <lwip_netconn_do_close+0x10c>)
 800b3c8:	f00b faca 	bl	8016960 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2204      	movs	r2, #4
 800b3d2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff f97a 	bl	800a6dc <lwip_netconn_do_close_internal>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d029      	beq.n	800b442 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	785b      	ldrb	r3, [r3, #1]
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	d006      	beq.n	800b406 <lwip_netconn_do_close+0xbe>
 800b3f8:	4b14      	ldr	r3, [pc, #80]	; (800b44c <lwip_netconn_do_close+0x104>)
 800b3fa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b3fe:	4916      	ldr	r1, [pc, #88]	; (800b458 <lwip_netconn_do_close+0x110>)
 800b400:	4814      	ldr	r0, [pc, #80]	; (800b454 <lwip_netconn_do_close+0x10c>)
 800b402:	f00b faad 	bl	8016960 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b406:	4815      	ldr	r0, [pc, #84]	; (800b45c <lwip_netconn_do_close+0x114>)
 800b408:	f00b f869 	bl	80164de <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	330c      	adds	r3, #12
 800b412:	2100      	movs	r1, #0
 800b414:	4618      	mov	r0, r3
 800b416:	f00a ffc8 	bl	80163aa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b41a:	4810      	ldr	r0, [pc, #64]	; (800b45c <lwip_netconn_do_close+0x114>)
 800b41c:	f00b f850 	bl	80164c0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00b      	beq.n	800b442 <lwip_netconn_do_close+0xfa>
 800b42a:	4b08      	ldr	r3, [pc, #32]	; (800b44c <lwip_netconn_do_close+0x104>)
 800b42c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b430:	4909      	ldr	r1, [pc, #36]	; (800b458 <lwip_netconn_do_close+0x110>)
 800b432:	4808      	ldr	r0, [pc, #32]	; (800b454 <lwip_netconn_do_close+0x10c>)
 800b434:	f00b fa94 	bl	8016960 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b438:	e003      	b.n	800b442 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	22f5      	movs	r2, #245	; 0xf5
 800b43e:	711a      	strb	r2, [r3, #4]
 800b440:	e000      	b.n	800b444 <lwip_netconn_do_close+0xfc>
      return;
 800b442:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	08019db8 	.word	0x08019db8
 800b450:	0801a0f8 	.word	0x0801a0f8
 800b454:	08019dfc 	.word	0x08019dfc
 800b458:	0801a114 	.word	0x0801a114
 800b45c:	20009ab8 	.word	0x20009ab8

0800b460 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d013      	beq.n	800b496 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00b      	beq.n	800b48e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f001 fefe 	bl	800d27c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	605a      	str	r2, [r3, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	2005      	movs	r0, #5
 800b492:	f001 f853 	bl	800c53c <memp_free>
  }
}
 800b496:	bf00      	nop
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d108      	bne.n	800b4c0 <netbuf_next+0x20>
 800b4ae:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <netbuf_next+0x54>)
 800b4b0:	22e0      	movs	r2, #224	; 0xe0
 800b4b2:	4911      	ldr	r1, [pc, #68]	; (800b4f8 <netbuf_next+0x58>)
 800b4b4:	4811      	ldr	r0, [pc, #68]	; (800b4fc <netbuf_next+0x5c>)
 800b4b6:	f00b fa53 	bl	8016960 <iprintf>
 800b4ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4be:	e014      	b.n	800b4ea <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <netbuf_next+0x30>
    return -1;
 800b4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ce:	e00c      	b.n	800b4ea <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <netbuf_next+0x48>
    return 1;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <netbuf_next+0x4a>
  }
  return 0;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0801a2ac 	.word	0x0801a2ac
 800b4f8:	0801a40c 	.word	0x0801a40c
 800b4fc:	0801a2fc 	.word	0x0801a2fc

0800b500 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b50a:	f008 fb89 	bl	8013c20 <sys_timeouts_sleeptime>
 800b50e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b516:	d10b      	bne.n	800b530 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b518:	4813      	ldr	r0, [pc, #76]	; (800b568 <tcpip_timeouts_mbox_fetch+0x68>)
 800b51a:	f00a ffe0 	bl	80164de <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b51e:	2200      	movs	r2, #0
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f00a feb6 	bl	8016294 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b528:	480f      	ldr	r0, [pc, #60]	; (800b568 <tcpip_timeouts_mbox_fetch+0x68>)
 800b52a:	f00a ffc9 	bl	80164c0 <sys_mutex_lock>
    return;
 800b52e:	e018      	b.n	800b562 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b536:	f008 fb39 	bl	8013bac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b53a:	e7e6      	b.n	800b50a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b53c:	480a      	ldr	r0, [pc, #40]	; (800b568 <tcpip_timeouts_mbox_fetch+0x68>)
 800b53e:	f00a ffce 	bl	80164de <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f00a fea4 	bl	8016294 <sys_arch_mbox_fetch>
 800b54c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b54e:	4806      	ldr	r0, [pc, #24]	; (800b568 <tcpip_timeouts_mbox_fetch+0x68>)
 800b550:	f00a ffb6 	bl	80164c0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b55a:	d102      	bne.n	800b562 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b55c:	f008 fb26 	bl	8013bac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b560:	e7d3      	b.n	800b50a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20009ab8 	.word	0x20009ab8

0800b56c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b574:	4810      	ldr	r0, [pc, #64]	; (800b5b8 <tcpip_thread+0x4c>)
 800b576:	f00a ffa3 	bl	80164c0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <tcpip_thread+0x50>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b582:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <tcpip_thread+0x50>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a0e      	ldr	r2, [pc, #56]	; (800b5c0 <tcpip_thread+0x54>)
 800b588:	6812      	ldr	r2, [r2, #0]
 800b58a:	4610      	mov	r0, r2
 800b58c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b58e:	f107 030c 	add.w	r3, r7, #12
 800b592:	4619      	mov	r1, r3
 800b594:	480b      	ldr	r0, [pc, #44]	; (800b5c4 <tcpip_thread+0x58>)
 800b596:	f7ff ffb3 	bl	800b500 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d106      	bne.n	800b5ae <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b5a0:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <tcpip_thread+0x5c>)
 800b5a2:	2291      	movs	r2, #145	; 0x91
 800b5a4:	4909      	ldr	r1, [pc, #36]	; (800b5cc <tcpip_thread+0x60>)
 800b5a6:	480a      	ldr	r0, [pc, #40]	; (800b5d0 <tcpip_thread+0x64>)
 800b5a8:	f00b f9da 	bl	8016960 <iprintf>
      continue;
 800b5ac:	e003      	b.n	800b5b6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 f80f 	bl	800b5d4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b5b6:	e7ea      	b.n	800b58e <tcpip_thread+0x22>
 800b5b8:	20009ab8 	.word	0x20009ab8
 800b5bc:	20009aac 	.word	0x20009aac
 800b5c0:	20009ab0 	.word	0x20009ab0
 800b5c4:	20009ab4 	.word	0x20009ab4
 800b5c8:	0801a444 	.word	0x0801a444
 800b5cc:	0801a474 	.word	0x0801a474
 800b5d0:	0801a494 	.word	0x0801a494

0800b5d4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d026      	beq.n	800b632 <tcpip_thread_handle_msg+0x5e>
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	dc2b      	bgt.n	800b640 <tcpip_thread_handle_msg+0x6c>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <tcpip_thread_handle_msg+0x1e>
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d015      	beq.n	800b61c <tcpip_thread_handle_msg+0x48>
 800b5f0:	e026      	b.n	800b640 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	6850      	ldr	r0, [r2, #4]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6892      	ldr	r2, [r2, #8]
 800b5fe:	4611      	mov	r1, r2
 800b600:	4798      	blx	r3
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d004      	beq.n	800b612 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 fe35 	bl	800d27c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	2008      	movs	r0, #8
 800b616:	f000 ff91 	bl	800c53c <memp_free>
      break;
 800b61a:	e018      	b.n	800b64e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	6892      	ldr	r2, [r2, #8]
 800b624:	4610      	mov	r0, r2
 800b626:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	2007      	movs	r0, #7
 800b62c:	f000 ff86 	bl	800c53c <memp_free>
      break;
 800b630:	e00d      	b.n	800b64e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	6892      	ldr	r2, [r2, #8]
 800b63a:	4610      	mov	r0, r2
 800b63c:	4798      	blx	r3
      break;
 800b63e:	e006      	b.n	800b64e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b640:	4b05      	ldr	r3, [pc, #20]	; (800b658 <tcpip_thread_handle_msg+0x84>)
 800b642:	22cf      	movs	r2, #207	; 0xcf
 800b644:	4905      	ldr	r1, [pc, #20]	; (800b65c <tcpip_thread_handle_msg+0x88>)
 800b646:	4806      	ldr	r0, [pc, #24]	; (800b660 <tcpip_thread_handle_msg+0x8c>)
 800b648:	f00b f98a 	bl	8016960 <iprintf>
      break;
 800b64c:	bf00      	nop
  }
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	0801a444 	.word	0x0801a444
 800b65c:	0801a474 	.word	0x0801a474
 800b660:	0801a494 	.word	0x0801a494

0800b664 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b670:	481a      	ldr	r0, [pc, #104]	; (800b6dc <tcpip_inpkt+0x78>)
 800b672:	f00a fe57 	bl	8016324 <sys_mbox_valid>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d105      	bne.n	800b688 <tcpip_inpkt+0x24>
 800b67c:	4b18      	ldr	r3, [pc, #96]	; (800b6e0 <tcpip_inpkt+0x7c>)
 800b67e:	22fc      	movs	r2, #252	; 0xfc
 800b680:	4918      	ldr	r1, [pc, #96]	; (800b6e4 <tcpip_inpkt+0x80>)
 800b682:	4819      	ldr	r0, [pc, #100]	; (800b6e8 <tcpip_inpkt+0x84>)
 800b684:	f00b f96c 	bl	8016960 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b688:	2008      	movs	r0, #8
 800b68a:	f000 fee1 	bl	800c450 <memp_malloc>
 800b68e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b69a:	e01a      	b.n	800b6d2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b6b4:	6979      	ldr	r1, [r7, #20]
 800b6b6:	4809      	ldr	r0, [pc, #36]	; (800b6dc <tcpip_inpkt+0x78>)
 800b6b8:	f00a fdd2 	bl	8016260 <sys_mbox_trypost>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d006      	beq.n	800b6d0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b6c2:	6979      	ldr	r1, [r7, #20]
 800b6c4:	2008      	movs	r0, #8
 800b6c6:	f000 ff39 	bl	800c53c <memp_free>
    return ERR_MEM;
 800b6ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6ce:	e000      	b.n	800b6d2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b6d0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20009ab4 	.word	0x20009ab4
 800b6e0:	0801a444 	.word	0x0801a444
 800b6e4:	0801a4bc 	.word	0x0801a4bc
 800b6e8:	0801a494 	.word	0x0801a494

0800b6ec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6fc:	f003 0318 	and.w	r3, r3, #24
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b704:	4a08      	ldr	r2, [pc, #32]	; (800b728 <tcpip_input+0x3c>)
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff ffab 	bl	800b664 <tcpip_inpkt>
 800b70e:	4603      	mov	r3, r0
 800b710:	e005      	b.n	800b71e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b712:	4a06      	ldr	r2, [pc, #24]	; (800b72c <tcpip_input+0x40>)
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff ffa4 	bl	800b664 <tcpip_inpkt>
 800b71c:	4603      	mov	r3, r0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	0801605d 	.word	0x0801605d
 800b72c:	08014f79 	.word	0x08014f79

0800b730 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b73a:	4819      	ldr	r0, [pc, #100]	; (800b7a0 <tcpip_try_callback+0x70>)
 800b73c:	f00a fdf2 	bl	8016324 <sys_mbox_valid>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d106      	bne.n	800b754 <tcpip_try_callback+0x24>
 800b746:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <tcpip_try_callback+0x74>)
 800b748:	f240 125d 	movw	r2, #349	; 0x15d
 800b74c:	4916      	ldr	r1, [pc, #88]	; (800b7a8 <tcpip_try_callback+0x78>)
 800b74e:	4817      	ldr	r0, [pc, #92]	; (800b7ac <tcpip_try_callback+0x7c>)
 800b750:	f00b f906 	bl	8016960 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b754:	2007      	movs	r0, #7
 800b756:	f000 fe7b 	bl	800c450 <memp_malloc>
 800b75a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d102      	bne.n	800b768 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b766:	e017      	b.n	800b798 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2201      	movs	r2, #1
 800b76c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b77a:	68f9      	ldr	r1, [r7, #12]
 800b77c:	4808      	ldr	r0, [pc, #32]	; (800b7a0 <tcpip_try_callback+0x70>)
 800b77e:	f00a fd6f 	bl	8016260 <sys_mbox_trypost>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d006      	beq.n	800b796 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	2007      	movs	r0, #7
 800b78c:	f000 fed6 	bl	800c53c <memp_free>
    return ERR_MEM;
 800b790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b794:	e000      	b.n	800b798 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20009ab4 	.word	0x20009ab4
 800b7a4:	0801a444 	.word	0x0801a444
 800b7a8:	0801a4bc 	.word	0x0801a4bc
 800b7ac:	0801a494 	.word	0x0801a494

0800b7b0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b7bc:	4806      	ldr	r0, [pc, #24]	; (800b7d8 <tcpip_send_msg_wait_sem+0x28>)
 800b7be:	f00a fe7f 	bl	80164c0 <sys_mutex_lock>
  fn(apimsg);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	68b8      	ldr	r0, [r7, #8]
 800b7c6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b7c8:	4803      	ldr	r0, [pc, #12]	; (800b7d8 <tcpip_send_msg_wait_sem+0x28>)
 800b7ca:	f00a fe88 	bl	80164de <sys_mutex_unlock>
  return ERR_OK;
 800b7ce:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20009ab8 	.word	0x20009ab8

0800b7dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b7e6:	f000 f98b 	bl	800bb00 <lwip_init>

  tcpip_init_done = initfunc;
 800b7ea:	4a17      	ldr	r2, [pc, #92]	; (800b848 <tcpip_init+0x6c>)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b7f0:	4a16      	ldr	r2, [pc, #88]	; (800b84c <tcpip_init+0x70>)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b7f6:	2106      	movs	r1, #6
 800b7f8:	4815      	ldr	r0, [pc, #84]	; (800b850 <tcpip_init+0x74>)
 800b7fa:	f00a fd05 	bl	8016208 <sys_mbox_new>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d006      	beq.n	800b812 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b804:	4b13      	ldr	r3, [pc, #76]	; (800b854 <tcpip_init+0x78>)
 800b806:	f240 2261 	movw	r2, #609	; 0x261
 800b80a:	4913      	ldr	r1, [pc, #76]	; (800b858 <tcpip_init+0x7c>)
 800b80c:	4813      	ldr	r0, [pc, #76]	; (800b85c <tcpip_init+0x80>)
 800b80e:	f00b f8a7 	bl	8016960 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b812:	4813      	ldr	r0, [pc, #76]	; (800b860 <tcpip_init+0x84>)
 800b814:	f00a fe3e 	bl	8016494 <sys_mutex_new>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b81e:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <tcpip_init+0x78>)
 800b820:	f240 2265 	movw	r2, #613	; 0x265
 800b824:	490f      	ldr	r1, [pc, #60]	; (800b864 <tcpip_init+0x88>)
 800b826:	480d      	ldr	r0, [pc, #52]	; (800b85c <tcpip_init+0x80>)
 800b828:	f00b f89a 	bl	8016960 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b82c:	2318      	movs	r3, #24
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b834:	2200      	movs	r2, #0
 800b836:	490c      	ldr	r1, [pc, #48]	; (800b868 <tcpip_init+0x8c>)
 800b838:	480c      	ldr	r0, [pc, #48]	; (800b86c <tcpip_init+0x90>)
 800b83a:	f00a fe5d 	bl	80164f8 <sys_thread_new>
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20009aac 	.word	0x20009aac
 800b84c:	20009ab0 	.word	0x20009ab0
 800b850:	20009ab4 	.word	0x20009ab4
 800b854:	0801a444 	.word	0x0801a444
 800b858:	0801a4cc 	.word	0x0801a4cc
 800b85c:	0801a494 	.word	0x0801a494
 800b860:	20009ab8 	.word	0x20009ab8
 800b864:	0801a4f0 	.word	0x0801a4f0
 800b868:	0800b56d 	.word	0x0800b56d
 800b86c:	0801a514 	.word	0x0801a514

0800b870 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b87a:	88fb      	ldrh	r3, [r7, #6]
 800b87c:	021b      	lsls	r3, r3, #8
 800b87e:	b21a      	sxth	r2, r3
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	0a1b      	lsrs	r3, r3, #8
 800b884:	b29b      	uxth	r3, r3
 800b886:	b21b      	sxth	r3, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	b21b      	sxth	r3, r3
 800b88c:	b29b      	uxth	r3, r3
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	061a      	lsls	r2, r3, #24
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b8ae:	431a      	orrs	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	0a1b      	lsrs	r3, r3, #8
 800b8b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b8b8:	431a      	orrs	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	0e1b      	lsrs	r3, r3, #24
 800b8be:	4313      	orrs	r3, r2
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b089      	sub	sp, #36	; 0x24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00d      	beq.n	800b90c <lwip_standard_chksum+0x40>
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dd0a      	ble.n	800b90c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	1c53      	adds	r3, r2, #1
 800b8fa:	61fb      	str	r3, [r7, #28]
 800b8fc:	f107 030e 	add.w	r3, r7, #14
 800b900:	3301      	adds	r3, #1
 800b902:	7812      	ldrb	r2, [r2, #0]
 800b904:	701a      	strb	r2, [r3, #0]
    len--;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	3b01      	subs	r3, #1
 800b90a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b910:	e00a      	b.n	800b928 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	1c9a      	adds	r2, r3, #2
 800b916:	61ba      	str	r2, [r7, #24]
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	4413      	add	r3, r2
 800b920:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	3b02      	subs	r3, #2
 800b926:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	dcf1      	bgt.n	800b912 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	dd04      	ble.n	800b93e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b934:	f107 030e 	add.w	r3, r7, #14
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b93e:	89fb      	ldrh	r3, [r7, #14]
 800b940:	461a      	mov	r2, r3
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	4413      	add	r3, r2
 800b946:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	0c1a      	lsrs	r2, r3, #16
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	4413      	add	r3, r2
 800b952:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	0c1a      	lsrs	r2, r3, #16
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	4413      	add	r3, r2
 800b95e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d007      	beq.n	800b976 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	021b      	lsls	r3, r3, #8
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	b2db      	uxtb	r3, r3
 800b972:	4313      	orrs	r3, r2
 800b974:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	b29b      	uxth	r3, r3
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3724      	adds	r7, #36	; 0x24
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b086      	sub	sp, #24
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	60f8      	str	r0, [r7, #12]
 800b98e:	607b      	str	r3, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	72fb      	strb	r3, [r7, #11]
 800b994:	4613      	mov	r3, r2
 800b996:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	e02b      	b.n	800b9fa <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	895b      	ldrh	r3, [r3, #10]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f7ff ff8d 	bl	800b8cc <lwip_standard_chksum>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	0c1a      	lsrs	r2, r3, #16
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	4413      	add	r3, r2
 800b9c6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	895b      	ldrh	r3, [r3, #10]
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00e      	beq.n	800b9f4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bf0c      	ite	eq
 800b9dc:	2301      	moveq	r3, #1
 800b9de:	2300      	movne	r3, #0
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	0a1b      	lsrs	r3, r3, #8
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	617b      	str	r3, [r7, #20]
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1d0      	bne.n	800b9a2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d007      	beq.n	800ba16 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	021b      	lsls	r3, r3, #8
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	0a1b      	lsrs	r3, r3, #8
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	4313      	orrs	r3, r2
 800ba14:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff ff28 	bl	800b870 <lwip_htons>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800ba2a:	893b      	ldrh	r3, [r7, #8]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff ff1f 	bl	800b870 <lwip_htons>
 800ba32:	4603      	mov	r3, r0
 800ba34:	461a      	mov	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4413      	add	r3, r2
 800ba3a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	0c1a      	lsrs	r2, r3, #16
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4413      	add	r3, r2
 800ba46:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	0c1a      	lsrs	r2, r3, #16
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	4413      	add	r3, r2
 800ba52:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	43db      	mvns	r3, r3
 800ba5a:	b29b      	uxth	r3, r3
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	607b      	str	r3, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	72fb      	strb	r3, [r7, #11]
 800ba72:	4613      	mov	r3, r2
 800ba74:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	0c1b      	lsrs	r3, r3, #16
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4413      	add	r3, r2
 800ba8a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4413      	add	r3, r2
 800ba9a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	0c1b      	lsrs	r3, r3, #16
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	4413      	add	r3, r2
 800baa4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	0c1a      	lsrs	r2, r3, #16
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	b29b      	uxth	r3, r3
 800baae:	4413      	add	r3, r2
 800bab0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	0c1a      	lsrs	r2, r3, #16
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	4413      	add	r3, r2
 800babc:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800babe:	893a      	ldrh	r2, [r7, #8]
 800bac0:	7af9      	ldrb	r1, [r7, #11]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff ff5e 	bl	800b986 <inet_cksum_pseudo_base>
 800baca:	4603      	mov	r3, r0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	607b      	str	r3, [r7, #4]
 800bade:	460b      	mov	r3, r1
 800bae0:	72fb      	strb	r3, [r7, #11]
 800bae2:	4613      	mov	r3, r2
 800bae4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800bae6:	893a      	ldrh	r2, [r7, #8]
 800bae8:	7af9      	ldrb	r1, [r7, #11]
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f7ff ffb7 	bl	800ba64 <inet_chksum_pseudo>
 800baf6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bb0a:	f00a fcb7 	bl	801647c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bb0e:	f000 f8d3 	bl	800bcb8 <mem_init>
  memp_init();
 800bb12:	f000 fc2f 	bl	800c374 <memp_init>
  pbuf_init();
  netif_init();
 800bb16:	f000 fd3b 	bl	800c590 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bb1a:	f001 fe49 	bl	800d7b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bb1e:	f007 fffd 	bl	8013b1c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <ptr_to_mem+0x20>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	4413      	add	r3, r2
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	2000eae8 	.word	0x2000eae8

0800bb50 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <mem_to_ptr+0x20>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	b29b      	uxth	r3, r3
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	2000eae8 	.word	0x2000eae8

0800bb74 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bb7c:	4b45      	ldr	r3, [pc, #276]	; (800bc94 <plug_holes+0x120>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d206      	bcs.n	800bb94 <plug_holes+0x20>
 800bb86:	4b44      	ldr	r3, [pc, #272]	; (800bc98 <plug_holes+0x124>)
 800bb88:	f240 12df 	movw	r2, #479	; 0x1df
 800bb8c:	4943      	ldr	r1, [pc, #268]	; (800bc9c <plug_holes+0x128>)
 800bb8e:	4844      	ldr	r0, [pc, #272]	; (800bca0 <plug_holes+0x12c>)
 800bb90:	f00a fee6 	bl	8016960 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bb94:	4b43      	ldr	r3, [pc, #268]	; (800bca4 <plug_holes+0x130>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d306      	bcc.n	800bbac <plug_holes+0x38>
 800bb9e:	4b3e      	ldr	r3, [pc, #248]	; (800bc98 <plug_holes+0x124>)
 800bba0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bba4:	4940      	ldr	r1, [pc, #256]	; (800bca8 <plug_holes+0x134>)
 800bba6:	483e      	ldr	r0, [pc, #248]	; (800bca0 <plug_holes+0x12c>)
 800bba8:	f00a feda 	bl	8016960 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	791b      	ldrb	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d006      	beq.n	800bbc2 <plug_holes+0x4e>
 800bbb4:	4b38      	ldr	r3, [pc, #224]	; (800bc98 <plug_holes+0x124>)
 800bbb6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bbba:	493c      	ldr	r1, [pc, #240]	; (800bcac <plug_holes+0x138>)
 800bbbc:	4838      	ldr	r0, [pc, #224]	; (800bca0 <plug_holes+0x12c>)
 800bbbe:	f00a fecf 	bl	8016960 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bbca:	d906      	bls.n	800bbda <plug_holes+0x66>
 800bbcc:	4b32      	ldr	r3, [pc, #200]	; (800bc98 <plug_holes+0x124>)
 800bbce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bbd2:	4937      	ldr	r1, [pc, #220]	; (800bcb0 <plug_holes+0x13c>)
 800bbd4:	4832      	ldr	r0, [pc, #200]	; (800bca0 <plug_holes+0x12c>)
 800bbd6:	f00a fec3 	bl	8016960 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff ffa4 	bl	800bb2c <ptr_to_mem>
 800bbe4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d024      	beq.n	800bc38 <plug_holes+0xc4>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	791b      	ldrb	r3, [r3, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d120      	bne.n	800bc38 <plug_holes+0xc4>
 800bbf6:	4b2b      	ldr	r3, [pc, #172]	; (800bca4 <plug_holes+0x130>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d01b      	beq.n	800bc38 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bc00:	4b2c      	ldr	r3, [pc, #176]	; (800bcb4 <plug_holes+0x140>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d102      	bne.n	800bc10 <plug_holes+0x9c>
      lfree = mem;
 800bc0a:	4a2a      	ldr	r2, [pc, #168]	; (800bcb4 <plug_holes+0x140>)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	881a      	ldrh	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bc20:	d00a      	beq.n	800bc38 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff ff80 	bl	800bb2c <ptr_to_mem>
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff ff8e 	bl	800bb50 <mem_to_ptr>
 800bc34:	4603      	mov	r3, r0
 800bc36:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	885b      	ldrh	r3, [r3, #2]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ff75 	bl	800bb2c <ptr_to_mem>
 800bc42:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d01f      	beq.n	800bc8c <plug_holes+0x118>
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	791b      	ldrb	r3, [r3, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d11b      	bne.n	800bc8c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bc54:	4b17      	ldr	r3, [pc, #92]	; (800bcb4 <plug_holes+0x140>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d102      	bne.n	800bc64 <plug_holes+0xf0>
      lfree = pmem;
 800bc5e:	4a15      	ldr	r2, [pc, #84]	; (800bcb4 <plug_holes+0x140>)
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	881a      	ldrh	r2, [r3, #0]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bc74:	d00a      	beq.n	800bc8c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff ff56 	bl	800bb2c <ptr_to_mem>
 800bc80:	4604      	mov	r4, r0
 800bc82:	68b8      	ldr	r0, [r7, #8]
 800bc84:	f7ff ff64 	bl	800bb50 <mem_to_ptr>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bc8c:	bf00      	nop
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd90      	pop	{r4, r7, pc}
 800bc94:	2000eae8 	.word	0x2000eae8
 800bc98:	0801a524 	.word	0x0801a524
 800bc9c:	0801a554 	.word	0x0801a554
 800bca0:	0801a56c 	.word	0x0801a56c
 800bca4:	2000eaec 	.word	0x2000eaec
 800bca8:	0801a594 	.word	0x0801a594
 800bcac:	0801a5b0 	.word	0x0801a5b0
 800bcb0:	0801a5cc 	.word	0x0801a5cc
 800bcb4:	2000eaf4 	.word	0x2000eaf4

0800bcb8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bcbe:	4b1f      	ldr	r3, [pc, #124]	; (800bd3c <mem_init+0x84>)
 800bcc0:	3303      	adds	r3, #3
 800bcc2:	f023 0303 	bic.w	r3, r3, #3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <mem_init+0x88>)
 800bcca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bccc:	4b1c      	ldr	r3, [pc, #112]	; (800bd40 <mem_init+0x88>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800bcd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bce6:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800bcea:	f7ff ff1f 	bl	800bb2c <ptr_to_mem>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4a14      	ldr	r2, [pc, #80]	; (800bd44 <mem_init+0x8c>)
 800bcf2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bcf4:	4b13      	ldr	r3, [pc, #76]	; (800bd44 <mem_init+0x8c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bcfc:	4b11      	ldr	r3, [pc, #68]	; (800bd44 <mem_init+0x8c>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800bd04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bd06:	4b0f      	ldr	r3, [pc, #60]	; (800bd44 <mem_init+0x8c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800bd0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bd10:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <mem_init+0x88>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a0c      	ldr	r2, [pc, #48]	; (800bd48 <mem_init+0x90>)
 800bd16:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd18:	480c      	ldr	r0, [pc, #48]	; (800bd4c <mem_init+0x94>)
 800bd1a:	f00a fbbb 	bl	8016494 <sys_mutex_new>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d006      	beq.n	800bd32 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <mem_init+0x98>)
 800bd26:	f240 221f 	movw	r2, #543	; 0x21f
 800bd2a:	490a      	ldr	r1, [pc, #40]	; (800bd54 <mem_init+0x9c>)
 800bd2c:	480a      	ldr	r0, [pc, #40]	; (800bd58 <mem_init+0xa0>)
 800bd2e:	f00a fe17 	bl	8016960 <iprintf>
  }
}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20009ad4 	.word	0x20009ad4
 800bd40:	2000eae8 	.word	0x2000eae8
 800bd44:	2000eaec 	.word	0x2000eaec
 800bd48:	2000eaf4 	.word	0x2000eaf4
 800bd4c:	2000eaf0 	.word	0x2000eaf0
 800bd50:	0801a524 	.word	0x0801a524
 800bd54:	0801a5f8 	.word	0x0801a5f8
 800bd58:	0801a56c 	.word	0x0801a56c

0800bd5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7ff fef3 	bl	800bb50 <mem_to_ptr>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff feda 	bl	800bb2c <ptr_to_mem>
 800bd78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	885b      	ldrh	r3, [r3, #2]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7ff fed4 	bl	800bb2c <ptr_to_mem>
 800bd84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bd8e:	d818      	bhi.n	800bdc2 <mem_link_valid+0x66>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	885b      	ldrh	r3, [r3, #2]
 800bd94:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bd98:	d813      	bhi.n	800bdc2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd9e:	8afa      	ldrh	r2, [r7, #22]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d004      	beq.n	800bdae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	8afa      	ldrh	r2, [r7, #22]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d109      	bne.n	800bdc2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bdae:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <mem_link_valid+0x74>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d006      	beq.n	800bdc6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	885b      	ldrh	r3, [r3, #2]
 800bdbc:	8afa      	ldrh	r2, [r7, #22]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d001      	beq.n	800bdc6 <mem_link_valid+0x6a>
    return 0;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e000      	b.n	800bdc8 <mem_link_valid+0x6c>
  }
  return 1;
 800bdc6:	2301      	movs	r3, #1
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	2000eaec 	.word	0x2000eaec

0800bdd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d070      	beq.n	800bec4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f003 0303 	and.w	r3, r3, #3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00d      	beq.n	800be08 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bdec:	4b37      	ldr	r3, [pc, #220]	; (800becc <mem_free+0xf8>)
 800bdee:	f240 2273 	movw	r2, #627	; 0x273
 800bdf2:	4937      	ldr	r1, [pc, #220]	; (800bed0 <mem_free+0xfc>)
 800bdf4:	4837      	ldr	r0, [pc, #220]	; (800bed4 <mem_free+0x100>)
 800bdf6:	f00a fdb3 	bl	8016960 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdfa:	f00a fb9d 	bl	8016538 <sys_arch_protect>
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f00a fba7 	bl	8016554 <sys_arch_unprotect>
    return;
 800be06:	e05e      	b.n	800bec6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3b08      	subs	r3, #8
 800be0c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800be0e:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <mem_free+0x104>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69fa      	ldr	r2, [r7, #28]
 800be14:	429a      	cmp	r2, r3
 800be16:	d306      	bcc.n	800be26 <mem_free+0x52>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f103 020c 	add.w	r2, r3, #12
 800be1e:	4b2f      	ldr	r3, [pc, #188]	; (800bedc <mem_free+0x108>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	429a      	cmp	r2, r3
 800be24:	d90d      	bls.n	800be42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800be26:	4b29      	ldr	r3, [pc, #164]	; (800becc <mem_free+0xf8>)
 800be28:	f240 227f 	movw	r2, #639	; 0x27f
 800be2c:	492c      	ldr	r1, [pc, #176]	; (800bee0 <mem_free+0x10c>)
 800be2e:	4829      	ldr	r0, [pc, #164]	; (800bed4 <mem_free+0x100>)
 800be30:	f00a fd96 	bl	8016960 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be34:	f00a fb80 	bl	8016538 <sys_arch_protect>
 800be38:	6138      	str	r0, [r7, #16]
 800be3a:	6938      	ldr	r0, [r7, #16]
 800be3c:	f00a fb8a 	bl	8016554 <sys_arch_unprotect>
    return;
 800be40:	e041      	b.n	800bec6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800be42:	4828      	ldr	r0, [pc, #160]	; (800bee4 <mem_free+0x110>)
 800be44:	f00a fb3c 	bl	80164c0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	791b      	ldrb	r3, [r3, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d110      	bne.n	800be72 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800be50:	4b1e      	ldr	r3, [pc, #120]	; (800becc <mem_free+0xf8>)
 800be52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800be56:	4924      	ldr	r1, [pc, #144]	; (800bee8 <mem_free+0x114>)
 800be58:	481e      	ldr	r0, [pc, #120]	; (800bed4 <mem_free+0x100>)
 800be5a:	f00a fd81 	bl	8016960 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be5e:	4821      	ldr	r0, [pc, #132]	; (800bee4 <mem_free+0x110>)
 800be60:	f00a fb3d 	bl	80164de <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be64:	f00a fb68 	bl	8016538 <sys_arch_protect>
 800be68:	6178      	str	r0, [r7, #20]
 800be6a:	6978      	ldr	r0, [r7, #20]
 800be6c:	f00a fb72 	bl	8016554 <sys_arch_unprotect>
    return;
 800be70:	e029      	b.n	800bec6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800be72:	69f8      	ldr	r0, [r7, #28]
 800be74:	f7ff ff72 	bl	800bd5c <mem_link_valid>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d110      	bne.n	800bea0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <mem_free+0xf8>)
 800be80:	f240 2295 	movw	r2, #661	; 0x295
 800be84:	4919      	ldr	r1, [pc, #100]	; (800beec <mem_free+0x118>)
 800be86:	4813      	ldr	r0, [pc, #76]	; (800bed4 <mem_free+0x100>)
 800be88:	f00a fd6a 	bl	8016960 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be8c:	4815      	ldr	r0, [pc, #84]	; (800bee4 <mem_free+0x110>)
 800be8e:	f00a fb26 	bl	80164de <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be92:	f00a fb51 	bl	8016538 <sys_arch_protect>
 800be96:	61b8      	str	r0, [r7, #24]
 800be98:	69b8      	ldr	r0, [r7, #24]
 800be9a:	f00a fb5b 	bl	8016554 <sys_arch_unprotect>
    return;
 800be9e:	e012      	b.n	800bec6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	2200      	movs	r2, #0
 800bea4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bea6:	4b12      	ldr	r3, [pc, #72]	; (800bef0 <mem_free+0x11c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	429a      	cmp	r2, r3
 800beae:	d202      	bcs.n	800beb6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800beb0:	4a0f      	ldr	r2, [pc, #60]	; (800bef0 <mem_free+0x11c>)
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800beb6:	69f8      	ldr	r0, [r7, #28]
 800beb8:	f7ff fe5c 	bl	800bb74 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bebc:	4809      	ldr	r0, [pc, #36]	; (800bee4 <mem_free+0x110>)
 800bebe:	f00a fb0e 	bl	80164de <sys_mutex_unlock>
 800bec2:	e000      	b.n	800bec6 <mem_free+0xf2>
    return;
 800bec4:	bf00      	nop
}
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	0801a524 	.word	0x0801a524
 800bed0:	0801a614 	.word	0x0801a614
 800bed4:	0801a56c 	.word	0x0801a56c
 800bed8:	2000eae8 	.word	0x2000eae8
 800bedc:	2000eaec 	.word	0x2000eaec
 800bee0:	0801a638 	.word	0x0801a638
 800bee4:	2000eaf0 	.word	0x2000eaf0
 800bee8:	0801a654 	.word	0x0801a654
 800beec:	0801a67c 	.word	0x0801a67c
 800bef0:	2000eaf4 	.word	0x2000eaf4

0800bef4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bf00:	887b      	ldrh	r3, [r7, #2]
 800bf02:	3303      	adds	r3, #3
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bf0c:	8bfb      	ldrh	r3, [r7, #30]
 800bf0e:	2b0b      	cmp	r3, #11
 800bf10:	d801      	bhi.n	800bf16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf12:	230c      	movs	r3, #12
 800bf14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf16:	8bfb      	ldrh	r3, [r7, #30]
 800bf18:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bf1c:	d803      	bhi.n	800bf26 <mem_trim+0x32>
 800bf1e:	8bfa      	ldrh	r2, [r7, #30]
 800bf20:	887b      	ldrh	r3, [r7, #2]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d201      	bcs.n	800bf2a <mem_trim+0x36>
    return NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e0d8      	b.n	800c0dc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf2a:	4b6e      	ldr	r3, [pc, #440]	; (800c0e4 <mem_trim+0x1f0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d304      	bcc.n	800bf3e <mem_trim+0x4a>
 800bf34:	4b6c      	ldr	r3, [pc, #432]	; (800c0e8 <mem_trim+0x1f4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d306      	bcc.n	800bf4c <mem_trim+0x58>
 800bf3e:	4b6b      	ldr	r3, [pc, #428]	; (800c0ec <mem_trim+0x1f8>)
 800bf40:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bf44:	496a      	ldr	r1, [pc, #424]	; (800c0f0 <mem_trim+0x1fc>)
 800bf46:	486b      	ldr	r0, [pc, #428]	; (800c0f4 <mem_trim+0x200>)
 800bf48:	f00a fd0a 	bl	8016960 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf4c:	4b65      	ldr	r3, [pc, #404]	; (800c0e4 <mem_trim+0x1f0>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d304      	bcc.n	800bf60 <mem_trim+0x6c>
 800bf56:	4b64      	ldr	r3, [pc, #400]	; (800c0e8 <mem_trim+0x1f4>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d307      	bcc.n	800bf70 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf60:	f00a faea 	bl	8016538 <sys_arch_protect>
 800bf64:	60b8      	str	r0, [r7, #8]
 800bf66:	68b8      	ldr	r0, [r7, #8]
 800bf68:	f00a faf4 	bl	8016554 <sys_arch_unprotect>
    return rmem;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	e0b5      	b.n	800c0dc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3b08      	subs	r3, #8
 800bf74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bf76:	69b8      	ldr	r0, [r7, #24]
 800bf78:	f7ff fdea 	bl	800bb50 <mem_to_ptr>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	881a      	ldrh	r2, [r3, #0]
 800bf84:	8afb      	ldrh	r3, [r7, #22]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	3b08      	subs	r3, #8
 800bf8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bf8e:	8bfa      	ldrh	r2, [r7, #30]
 800bf90:	8abb      	ldrh	r3, [r7, #20]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d906      	bls.n	800bfa4 <mem_trim+0xb0>
 800bf96:	4b55      	ldr	r3, [pc, #340]	; (800c0ec <mem_trim+0x1f8>)
 800bf98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bf9c:	4956      	ldr	r1, [pc, #344]	; (800c0f8 <mem_trim+0x204>)
 800bf9e:	4855      	ldr	r0, [pc, #340]	; (800c0f4 <mem_trim+0x200>)
 800bfa0:	f00a fcde 	bl	8016960 <iprintf>
  if (newsize > size) {
 800bfa4:	8bfa      	ldrh	r2, [r7, #30]
 800bfa6:	8abb      	ldrh	r3, [r7, #20]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d901      	bls.n	800bfb0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bfac:	2300      	movs	r3, #0
 800bfae:	e095      	b.n	800c0dc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bfb0:	8bfa      	ldrh	r2, [r7, #30]
 800bfb2:	8abb      	ldrh	r3, [r7, #20]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d101      	bne.n	800bfbc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	e08f      	b.n	800c0dc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfbc:	484f      	ldr	r0, [pc, #316]	; (800c0fc <mem_trim+0x208>)
 800bfbe:	f00a fa7f 	bl	80164c0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff fdb0 	bl	800bb2c <ptr_to_mem>
 800bfcc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d13f      	bne.n	800c056 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bfde:	d106      	bne.n	800bfee <mem_trim+0xfa>
 800bfe0:	4b42      	ldr	r3, [pc, #264]	; (800c0ec <mem_trim+0x1f8>)
 800bfe2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bfe6:	4946      	ldr	r1, [pc, #280]	; (800c100 <mem_trim+0x20c>)
 800bfe8:	4842      	ldr	r0, [pc, #264]	; (800c0f4 <mem_trim+0x200>)
 800bfea:	f00a fcb9 	bl	8016960 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bff4:	8afa      	ldrh	r2, [r7, #22]
 800bff6:	8bfb      	ldrh	r3, [r7, #30]
 800bff8:	4413      	add	r3, r2
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3308      	adds	r3, #8
 800bffe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c000:	4b40      	ldr	r3, [pc, #256]	; (800c104 <mem_trim+0x210>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	429a      	cmp	r2, r3
 800c008:	d106      	bne.n	800c018 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c00a:	89fb      	ldrh	r3, [r7, #14]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff fd8d 	bl	800bb2c <ptr_to_mem>
 800c012:	4603      	mov	r3, r0
 800c014:	4a3b      	ldr	r2, [pc, #236]	; (800c104 <mem_trim+0x210>)
 800c016:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c018:	89fb      	ldrh	r3, [r7, #14]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff fd86 	bl	800bb2c <ptr_to_mem>
 800c020:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2200      	movs	r2, #0
 800c026:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	89ba      	ldrh	r2, [r7, #12]
 800c02c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	8afa      	ldrh	r2, [r7, #22]
 800c032:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	89fa      	ldrh	r2, [r7, #14]
 800c038:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c042:	d047      	beq.n	800c0d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	4618      	mov	r0, r3
 800c04a:	f7ff fd6f 	bl	800bb2c <ptr_to_mem>
 800c04e:	4602      	mov	r2, r0
 800c050:	89fb      	ldrh	r3, [r7, #14]
 800c052:	8053      	strh	r3, [r2, #2]
 800c054:	e03e      	b.n	800c0d4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c056:	8bfb      	ldrh	r3, [r7, #30]
 800c058:	f103 0214 	add.w	r2, r3, #20
 800c05c:	8abb      	ldrh	r3, [r7, #20]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d838      	bhi.n	800c0d4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c062:	8afa      	ldrh	r2, [r7, #22]
 800c064:	8bfb      	ldrh	r3, [r7, #30]
 800c066:	4413      	add	r3, r2
 800c068:	b29b      	uxth	r3, r3
 800c06a:	3308      	adds	r3, #8
 800c06c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c076:	d106      	bne.n	800c086 <mem_trim+0x192>
 800c078:	4b1c      	ldr	r3, [pc, #112]	; (800c0ec <mem_trim+0x1f8>)
 800c07a:	f240 3216 	movw	r2, #790	; 0x316
 800c07e:	4920      	ldr	r1, [pc, #128]	; (800c100 <mem_trim+0x20c>)
 800c080:	481c      	ldr	r0, [pc, #112]	; (800c0f4 <mem_trim+0x200>)
 800c082:	f00a fc6d 	bl	8016960 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c086:	89fb      	ldrh	r3, [r7, #14]
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fd4f 	bl	800bb2c <ptr_to_mem>
 800c08e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c090:	4b1c      	ldr	r3, [pc, #112]	; (800c104 <mem_trim+0x210>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	429a      	cmp	r2, r3
 800c098:	d202      	bcs.n	800c0a0 <mem_trim+0x1ac>
      lfree = mem2;
 800c09a:	4a1a      	ldr	r2, [pc, #104]	; (800c104 <mem_trim+0x210>)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	881a      	ldrh	r2, [r3, #0]
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	8afa      	ldrh	r2, [r7, #22]
 800c0b2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	89fa      	ldrh	r2, [r7, #14]
 800c0b8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	881b      	ldrh	r3, [r3, #0]
 800c0be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c0c2:	d007      	beq.n	800c0d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff fd2f 	bl	800bb2c <ptr_to_mem>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	89fb      	ldrh	r3, [r7, #14]
 800c0d2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0d4:	4809      	ldr	r0, [pc, #36]	; (800c0fc <mem_trim+0x208>)
 800c0d6:	f00a fa02 	bl	80164de <sys_mutex_unlock>
  return rmem;
 800c0da:	687b      	ldr	r3, [r7, #4]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3720      	adds	r7, #32
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	2000eae8 	.word	0x2000eae8
 800c0e8:	2000eaec 	.word	0x2000eaec
 800c0ec:	0801a524 	.word	0x0801a524
 800c0f0:	0801a6b0 	.word	0x0801a6b0
 800c0f4:	0801a56c 	.word	0x0801a56c
 800c0f8:	0801a6c8 	.word	0x0801a6c8
 800c0fc:	2000eaf0 	.word	0x2000eaf0
 800c100:	0801a6e8 	.word	0x0801a6e8
 800c104:	2000eaf4 	.word	0x2000eaf4

0800c108 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c112:	88fb      	ldrh	r3, [r7, #6]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <mem_malloc+0x14>
    return NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	e0e2      	b.n	800c2e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c11c:	88fb      	ldrh	r3, [r7, #6]
 800c11e:	3303      	adds	r3, #3
 800c120:	b29b      	uxth	r3, r3
 800c122:	f023 0303 	bic.w	r3, r3, #3
 800c126:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c128:	8bbb      	ldrh	r3, [r7, #28]
 800c12a:	2b0b      	cmp	r3, #11
 800c12c:	d801      	bhi.n	800c132 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c12e:	230c      	movs	r3, #12
 800c130:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c132:	8bbb      	ldrh	r3, [r7, #28]
 800c134:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c138:	d803      	bhi.n	800c142 <mem_malloc+0x3a>
 800c13a:	8bba      	ldrh	r2, [r7, #28]
 800c13c:	88fb      	ldrh	r3, [r7, #6]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d201      	bcs.n	800c146 <mem_malloc+0x3e>
    return NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	e0cd      	b.n	800c2e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c146:	4869      	ldr	r0, [pc, #420]	; (800c2ec <mem_malloc+0x1e4>)
 800c148:	f00a f9ba 	bl	80164c0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c14c:	4b68      	ldr	r3, [pc, #416]	; (800c2f0 <mem_malloc+0x1e8>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff fcfd 	bl	800bb50 <mem_to_ptr>
 800c156:	4603      	mov	r3, r0
 800c158:	83fb      	strh	r3, [r7, #30]
 800c15a:	e0b7      	b.n	800c2cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c15c:	8bfb      	ldrh	r3, [r7, #30]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fce4 	bl	800bb2c <ptr_to_mem>
 800c164:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	791b      	ldrb	r3, [r3, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f040 80a7 	bne.w	800c2be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	8bfb      	ldrh	r3, [r7, #30]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	f1a3 0208 	sub.w	r2, r3, #8
 800c17e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c180:	429a      	cmp	r2, r3
 800c182:	f0c0 809c 	bcc.w	800c2be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	8bfb      	ldrh	r3, [r7, #30]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	f1a3 0208 	sub.w	r2, r3, #8
 800c194:	8bbb      	ldrh	r3, [r7, #28]
 800c196:	3314      	adds	r3, #20
 800c198:	429a      	cmp	r2, r3
 800c19a:	d333      	bcc.n	800c204 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c19c:	8bfa      	ldrh	r2, [r7, #30]
 800c19e:	8bbb      	ldrh	r3, [r7, #28]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c1a8:	8a7b      	ldrh	r3, [r7, #18]
 800c1aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c1ae:	d106      	bne.n	800c1be <mem_malloc+0xb6>
 800c1b0:	4b50      	ldr	r3, [pc, #320]	; (800c2f4 <mem_malloc+0x1ec>)
 800c1b2:	f240 3287 	movw	r2, #903	; 0x387
 800c1b6:	4950      	ldr	r1, [pc, #320]	; (800c2f8 <mem_malloc+0x1f0>)
 800c1b8:	4850      	ldr	r0, [pc, #320]	; (800c2fc <mem_malloc+0x1f4>)
 800c1ba:	f00a fbd1 	bl	8016960 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c1be:	8a7b      	ldrh	r3, [r7, #18]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff fcb3 	bl	800bb2c <ptr_to_mem>
 800c1c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	881a      	ldrh	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	8bfa      	ldrh	r2, [r7, #30]
 800c1da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	8a7a      	ldrh	r2, [r7, #18]
 800c1e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c1f0:	d00b      	beq.n	800c20a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff fc98 	bl	800bb2c <ptr_to_mem>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	8a7b      	ldrh	r3, [r7, #18]
 800c200:	8053      	strh	r3, [r2, #2]
 800c202:	e002      	b.n	800c20a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2201      	movs	r2, #1
 800c208:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c20a:	4b39      	ldr	r3, [pc, #228]	; (800c2f0 <mem_malloc+0x1e8>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	429a      	cmp	r2, r3
 800c212:	d127      	bne.n	800c264 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c214:	4b36      	ldr	r3, [pc, #216]	; (800c2f0 <mem_malloc+0x1e8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c21a:	e005      	b.n	800c228 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fc83 	bl	800bb2c <ptr_to_mem>
 800c226:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	791b      	ldrb	r3, [r3, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d004      	beq.n	800c23a <mem_malloc+0x132>
 800c230:	4b33      	ldr	r3, [pc, #204]	; (800c300 <mem_malloc+0x1f8>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	429a      	cmp	r2, r3
 800c238:	d1f0      	bne.n	800c21c <mem_malloc+0x114>
          }
          lfree = cur;
 800c23a:	4a2d      	ldr	r2, [pc, #180]	; (800c2f0 <mem_malloc+0x1e8>)
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c240:	4b2b      	ldr	r3, [pc, #172]	; (800c2f0 <mem_malloc+0x1e8>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b2e      	ldr	r3, [pc, #184]	; (800c300 <mem_malloc+0x1f8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d00b      	beq.n	800c264 <mem_malloc+0x15c>
 800c24c:	4b28      	ldr	r3, [pc, #160]	; (800c2f0 <mem_malloc+0x1e8>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	791b      	ldrb	r3, [r3, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d006      	beq.n	800c264 <mem_malloc+0x15c>
 800c256:	4b27      	ldr	r3, [pc, #156]	; (800c2f4 <mem_malloc+0x1ec>)
 800c258:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c25c:	4929      	ldr	r1, [pc, #164]	; (800c304 <mem_malloc+0x1fc>)
 800c25e:	4827      	ldr	r0, [pc, #156]	; (800c2fc <mem_malloc+0x1f4>)
 800c260:	f00a fb7e 	bl	8016960 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c264:	4821      	ldr	r0, [pc, #132]	; (800c2ec <mem_malloc+0x1e4>)
 800c266:	f00a f93a 	bl	80164de <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c26a:	8bba      	ldrh	r2, [r7, #28]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	4413      	add	r3, r2
 800c270:	3308      	adds	r3, #8
 800c272:	4a23      	ldr	r2, [pc, #140]	; (800c300 <mem_malloc+0x1f8>)
 800c274:	6812      	ldr	r2, [r2, #0]
 800c276:	4293      	cmp	r3, r2
 800c278:	d906      	bls.n	800c288 <mem_malloc+0x180>
 800c27a:	4b1e      	ldr	r3, [pc, #120]	; (800c2f4 <mem_malloc+0x1ec>)
 800c27c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c280:	4921      	ldr	r1, [pc, #132]	; (800c308 <mem_malloc+0x200>)
 800c282:	481e      	ldr	r0, [pc, #120]	; (800c2fc <mem_malloc+0x1f4>)
 800c284:	f00a fb6c 	bl	8016960 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f003 0303 	and.w	r3, r3, #3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d006      	beq.n	800c2a0 <mem_malloc+0x198>
 800c292:	4b18      	ldr	r3, [pc, #96]	; (800c2f4 <mem_malloc+0x1ec>)
 800c294:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c298:	491c      	ldr	r1, [pc, #112]	; (800c30c <mem_malloc+0x204>)
 800c29a:	4818      	ldr	r0, [pc, #96]	; (800c2fc <mem_malloc+0x1f4>)
 800c29c:	f00a fb60 	bl	8016960 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f003 0303 	and.w	r3, r3, #3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d006      	beq.n	800c2b8 <mem_malloc+0x1b0>
 800c2aa:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <mem_malloc+0x1ec>)
 800c2ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c2b0:	4917      	ldr	r1, [pc, #92]	; (800c310 <mem_malloc+0x208>)
 800c2b2:	4812      	ldr	r0, [pc, #72]	; (800c2fc <mem_malloc+0x1f4>)
 800c2b4:	f00a fb54 	bl	8016960 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	e011      	b.n	800c2e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c2be:	8bfb      	ldrh	r3, [r7, #30]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fc33 	bl	800bb2c <ptr_to_mem>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2cc:	8bfa      	ldrh	r2, [r7, #30]
 800c2ce:	8bbb      	ldrh	r3, [r7, #28]
 800c2d0:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	f4ff af41 	bcc.w	800c15c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c2da:	4804      	ldr	r0, [pc, #16]	; (800c2ec <mem_malloc+0x1e4>)
 800c2dc:	f00a f8ff 	bl	80164de <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2000eaf0 	.word	0x2000eaf0
 800c2f0:	2000eaf4 	.word	0x2000eaf4
 800c2f4:	0801a524 	.word	0x0801a524
 800c2f8:	0801a6e8 	.word	0x0801a6e8
 800c2fc:	0801a56c 	.word	0x0801a56c
 800c300:	2000eaec 	.word	0x2000eaec
 800c304:	0801a6fc 	.word	0x0801a6fc
 800c308:	0801a718 	.word	0x0801a718
 800c30c:	0801a748 	.word	0x0801a748
 800c310:	0801a778 	.word	0x0801a778

0800c314 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	3303      	adds	r3, #3
 800c32a:	f023 0303 	bic.w	r3, r3, #3
 800c32e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c330:	2300      	movs	r3, #0
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	e011      	b.n	800c35a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	4413      	add	r3, r2
 800c352:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3301      	adds	r3, #1
 800c358:	60fb      	str	r3, [r7, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	885b      	ldrh	r3, [r3, #2]
 800c35e:	461a      	mov	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4293      	cmp	r3, r2
 800c364:	dbe7      	blt.n	800c336 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c366:	bf00      	nop
 800c368:	bf00      	nop
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c37a:	2300      	movs	r3, #0
 800c37c:	80fb      	strh	r3, [r7, #6]
 800c37e:	e009      	b.n	800c394 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	4a08      	ldr	r2, [pc, #32]	; (800c3a4 <memp_init+0x30>)
 800c384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff ffc3 	bl	800c314 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c38e:	88fb      	ldrh	r3, [r7, #6]
 800c390:	3301      	adds	r3, #1
 800c392:	80fb      	strh	r3, [r7, #6]
 800c394:	88fb      	ldrh	r3, [r7, #6]
 800c396:	2b0b      	cmp	r3, #11
 800c398:	d9f2      	bls.n	800c380 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c39a:	bf00      	nop
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	0801cc8c 	.word	0x0801cc8c

0800c3a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c3b0:	f00a f8c2 	bl	8016538 <sys_arch_protect>
 800c3b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d015      	beq.n	800c3f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	6812      	ldr	r2, [r2, #0]
 800c3cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f003 0303 	and.w	r3, r3, #3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d006      	beq.n	800c3e6 <do_memp_malloc_pool+0x3e>
 800c3d8:	4b09      	ldr	r3, [pc, #36]	; (800c400 <do_memp_malloc_pool+0x58>)
 800c3da:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c3de:	4909      	ldr	r1, [pc, #36]	; (800c404 <do_memp_malloc_pool+0x5c>)
 800c3e0:	4809      	ldr	r0, [pc, #36]	; (800c408 <do_memp_malloc_pool+0x60>)
 800c3e2:	f00a fabd 	bl	8016960 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f00a f8b4 	bl	8016554 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	e003      	b.n	800c3f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f00a f8af 	bl	8016554 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	0801a79c 	.word	0x0801a79c
 800c404:	0801a7cc 	.word	0x0801a7cc
 800c408:	0801a7f0 	.word	0x0801a7f0

0800c40c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <memp_malloc_pool+0x1c>
 800c41a:	4b0a      	ldr	r3, [pc, #40]	; (800c444 <memp_malloc_pool+0x38>)
 800c41c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c420:	4909      	ldr	r1, [pc, #36]	; (800c448 <memp_malloc_pool+0x3c>)
 800c422:	480a      	ldr	r0, [pc, #40]	; (800c44c <memp_malloc_pool+0x40>)
 800c424:	f00a fa9c 	bl	8016960 <iprintf>
  if (desc == NULL) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <memp_malloc_pool+0x26>
    return NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	e003      	b.n	800c43a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff ffb8 	bl	800c3a8 <do_memp_malloc_pool>
 800c438:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	0801a79c 	.word	0x0801a79c
 800c448:	0801a818 	.word	0x0801a818
 800c44c:	0801a7f0 	.word	0x0801a7f0

0800c450 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c45a:	79fb      	ldrb	r3, [r7, #7]
 800c45c:	2b0b      	cmp	r3, #11
 800c45e:	d908      	bls.n	800c472 <memp_malloc+0x22>
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <memp_malloc+0x3c>)
 800c462:	f240 1257 	movw	r2, #343	; 0x157
 800c466:	490a      	ldr	r1, [pc, #40]	; (800c490 <memp_malloc+0x40>)
 800c468:	480a      	ldr	r0, [pc, #40]	; (800c494 <memp_malloc+0x44>)
 800c46a:	f00a fa79 	bl	8016960 <iprintf>
 800c46e:	2300      	movs	r3, #0
 800c470:	e008      	b.n	800c484 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c472:	79fb      	ldrb	r3, [r7, #7]
 800c474:	4a08      	ldr	r2, [pc, #32]	; (800c498 <memp_malloc+0x48>)
 800c476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff ff94 	bl	800c3a8 <do_memp_malloc_pool>
 800c480:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c482:	68fb      	ldr	r3, [r7, #12]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	0801a79c 	.word	0x0801a79c
 800c490:	0801a82c 	.word	0x0801a82c
 800c494:	0801a7f0 	.word	0x0801a7f0
 800c498:	0801cc8c 	.word	0x0801cc8c

0800c49c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	f003 0303 	and.w	r3, r3, #3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d006      	beq.n	800c4be <do_memp_free_pool+0x22>
 800c4b0:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <do_memp_free_pool+0x4c>)
 800c4b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c4b6:	490d      	ldr	r1, [pc, #52]	; (800c4ec <do_memp_free_pool+0x50>)
 800c4b8:	480d      	ldr	r0, [pc, #52]	; (800c4f0 <do_memp_free_pool+0x54>)
 800c4ba:	f00a fa51 	bl	8016960 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c4c2:	f00a f839 	bl	8016538 <sys_arch_protect>
 800c4c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c4da:	68b8      	ldr	r0, [r7, #8]
 800c4dc:	f00a f83a 	bl	8016554 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c4e0:	bf00      	nop
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	0801a79c 	.word	0x0801a79c
 800c4ec:	0801a84c 	.word	0x0801a84c
 800c4f0:	0801a7f0 	.word	0x0801a7f0

0800c4f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d106      	bne.n	800c512 <memp_free_pool+0x1e>
 800c504:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <memp_free_pool+0x3c>)
 800c506:	f240 1295 	movw	r2, #405	; 0x195
 800c50a:	490a      	ldr	r1, [pc, #40]	; (800c534 <memp_free_pool+0x40>)
 800c50c:	480a      	ldr	r0, [pc, #40]	; (800c538 <memp_free_pool+0x44>)
 800c50e:	f00a fa27 	bl	8016960 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d007      	beq.n	800c528 <memp_free_pool+0x34>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d004      	beq.n	800c528 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ffbb 	bl	800c49c <do_memp_free_pool>
 800c526:	e000      	b.n	800c52a <memp_free_pool+0x36>
    return;
 800c528:	bf00      	nop
}
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	0801a79c 	.word	0x0801a79c
 800c534:	0801a818 	.word	0x0801a818
 800c538:	0801a7f0 	.word	0x0801a7f0

0800c53c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	2b0b      	cmp	r3, #11
 800c54c:	d907      	bls.n	800c55e <memp_free+0x22>
 800c54e:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <memp_free+0x44>)
 800c550:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c554:	490b      	ldr	r1, [pc, #44]	; (800c584 <memp_free+0x48>)
 800c556:	480c      	ldr	r0, [pc, #48]	; (800c588 <memp_free+0x4c>)
 800c558:	f00a fa02 	bl	8016960 <iprintf>
 800c55c:	e00c      	b.n	800c578 <memp_free+0x3c>

  if (mem == NULL) {
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d008      	beq.n	800c576 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	4a09      	ldr	r2, [pc, #36]	; (800c58c <memp_free+0x50>)
 800c568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff ff94 	bl	800c49c <do_memp_free_pool>
 800c574:	e000      	b.n	800c578 <memp_free+0x3c>
    return;
 800c576:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	0801a79c 	.word	0x0801a79c
 800c584:	0801a86c 	.word	0x0801a86c
 800c588:	0801a7f0 	.word	0x0801a7f0
 800c58c:	0801cc8c 	.word	0x0801cc8c

0800c590 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c590:	b480      	push	{r7}
 800c592:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c594:	bf00      	nop
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
	...

0800c5a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d108      	bne.n	800c5c6 <netif_add+0x26>
 800c5b4:	4b57      	ldr	r3, [pc, #348]	; (800c714 <netif_add+0x174>)
 800c5b6:	f240 1227 	movw	r2, #295	; 0x127
 800c5ba:	4957      	ldr	r1, [pc, #348]	; (800c718 <netif_add+0x178>)
 800c5bc:	4857      	ldr	r0, [pc, #348]	; (800c71c <netif_add+0x17c>)
 800c5be:	f00a f9cf 	bl	8016960 <iprintf>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e0a2      	b.n	800c70c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d108      	bne.n	800c5de <netif_add+0x3e>
 800c5cc:	4b51      	ldr	r3, [pc, #324]	; (800c714 <netif_add+0x174>)
 800c5ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c5d2:	4953      	ldr	r1, [pc, #332]	; (800c720 <netif_add+0x180>)
 800c5d4:	4851      	ldr	r0, [pc, #324]	; (800c71c <netif_add+0x17c>)
 800c5d6:	f00a f9c3 	bl	8016960 <iprintf>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e096      	b.n	800c70c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c5e4:	4b4f      	ldr	r3, [pc, #316]	; (800c724 <netif_add+0x184>)
 800c5e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c5ee:	4b4d      	ldr	r3, [pc, #308]	; (800c724 <netif_add+0x184>)
 800c5f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c5f8:	4b4a      	ldr	r3, [pc, #296]	; (800c724 <netif_add+0x184>)
 800c5fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	4a45      	ldr	r2, [pc, #276]	; (800c728 <netif_add+0x188>)
 800c612:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6a3a      	ldr	r2, [r7, #32]
 800c62c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c62e:	4b3f      	ldr	r3, [pc, #252]	; (800c72c <netif_add+0x18c>)
 800c630:	781a      	ldrb	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c63c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	68b9      	ldr	r1, [r7, #8]
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 f90f 	bl	800c868 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	4798      	blx	r3
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <netif_add+0xba>
    return NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	e058      	b.n	800c70c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c660:	2bff      	cmp	r3, #255	; 0xff
 800c662:	d103      	bne.n	800c66c <netif_add+0xcc>
        netif->num = 0;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c670:	4b2f      	ldr	r3, [pc, #188]	; (800c730 <netif_add+0x190>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	617b      	str	r3, [r7, #20]
 800c676:	e02b      	b.n	800c6d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d106      	bne.n	800c68e <netif_add+0xee>
 800c680:	4b24      	ldr	r3, [pc, #144]	; (800c714 <netif_add+0x174>)
 800c682:	f240 128b 	movw	r2, #395	; 0x18b
 800c686:	492b      	ldr	r1, [pc, #172]	; (800c734 <netif_add+0x194>)
 800c688:	4824      	ldr	r0, [pc, #144]	; (800c71c <netif_add+0x17c>)
 800c68a:	f00a f969 	bl	8016960 <iprintf>
        num_netifs++;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	3301      	adds	r3, #1
 800c692:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2bff      	cmp	r3, #255	; 0xff
 800c698:	dd06      	ble.n	800c6a8 <netif_add+0x108>
 800c69a:	4b1e      	ldr	r3, [pc, #120]	; (800c714 <netif_add+0x174>)
 800c69c:	f240 128d 	movw	r2, #397	; 0x18d
 800c6a0:	4925      	ldr	r1, [pc, #148]	; (800c738 <netif_add+0x198>)
 800c6a2:	481e      	ldr	r0, [pc, #120]	; (800c71c <netif_add+0x17c>)
 800c6a4:	f00a f95c 	bl	8016960 <iprintf>
        if (netif2->num == netif->num) {
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d108      	bne.n	800c6ca <netif_add+0x12a>
          netif->num++;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6be:	3301      	adds	r3, #1
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c6c8:	e005      	b.n	800c6d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1d0      	bne.n	800c678 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1be      	bne.n	800c65a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6e2:	2bfe      	cmp	r3, #254	; 0xfe
 800c6e4:	d103      	bne.n	800c6ee <netif_add+0x14e>
    netif_num = 0;
 800c6e6:	4b11      	ldr	r3, [pc, #68]	; (800c72c <netif_add+0x18c>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	701a      	strb	r2, [r3, #0]
 800c6ec:	e006      	b.n	800c6fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	4b0c      	ldr	r3, [pc, #48]	; (800c72c <netif_add+0x18c>)
 800c6fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c6fc:	4b0c      	ldr	r3, [pc, #48]	; (800c730 <netif_add+0x190>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c704:	4a0a      	ldr	r2, [pc, #40]	; (800c730 <netif_add+0x190>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c70a:	68fb      	ldr	r3, [r7, #12]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3718      	adds	r7, #24
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	0801a888 	.word	0x0801a888
 800c718:	0801a91c 	.word	0x0801a91c
 800c71c:	0801a8d8 	.word	0x0801a8d8
 800c720:	0801a938 	.word	0x0801a938
 800c724:	0801ccfc 	.word	0x0801ccfc
 800c728:	0800cb43 	.word	0x0800cb43
 800c72c:	20011b44 	.word	0x20011b44
 800c730:	20011b3c 	.word	0x20011b3c
 800c734:	0801a95c 	.word	0x0801a95c
 800c738:	0801a970 	.word	0x0801a970

0800c73c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f002 fe99 	bl	800f480 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <netif_do_set_ipaddr+0x20>
 800c76a:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <netif_do_set_ipaddr+0x88>)
 800c76c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c770:	491c      	ldr	r1, [pc, #112]	; (800c7e4 <netif_do_set_ipaddr+0x8c>)
 800c772:	481d      	ldr	r0, [pc, #116]	; (800c7e8 <netif_do_set_ipaddr+0x90>)
 800c774:	f00a f8f4 	bl	8016960 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <netif_do_set_ipaddr+0x34>
 800c77e:	4b18      	ldr	r3, [pc, #96]	; (800c7e0 <netif_do_set_ipaddr+0x88>)
 800c780:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c784:	4917      	ldr	r1, [pc, #92]	; (800c7e4 <netif_do_set_ipaddr+0x8c>)
 800c786:	4818      	ldr	r0, [pc, #96]	; (800c7e8 <netif_do_set_ipaddr+0x90>)
 800c788:	f00a f8ea 	bl	8016960 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3304      	adds	r3, #4
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	429a      	cmp	r2, r3
 800c798:	d01c      	beq.n	800c7d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c7aa:	f107 0314 	add.w	r3, r7, #20
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff ffc3 	bl	800c73c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <netif_do_set_ipaddr+0x6a>
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	e000      	b.n	800c7c4 <netif_do_set_ipaddr+0x6c>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f000 f8d2 	bl	800c974 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e000      	b.n	800c7d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3718      	adds	r7, #24
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	0801a888 	.word	0x0801a888
 800c7e4:	0801a9a0 	.word	0x0801a9a0
 800c7e8:	0801a8d8 	.word	0x0801a8d8

0800c7ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3308      	adds	r3, #8
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	429a      	cmp	r2, r3
 800c804:	d00a      	beq.n	800c81c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <netif_do_set_netmask+0x26>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	e000      	b.n	800c814 <netif_do_set_netmask+0x28>
 800c812:	2300      	movs	r3, #0
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c818:	2301      	movs	r3, #1
 800c81a:	e000      	b.n	800c81e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b085      	sub	sp, #20
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	330c      	adds	r3, #12
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	429a      	cmp	r2, r3
 800c842:	d00a      	beq.n	800c85a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <netif_do_set_gw+0x26>
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	e000      	b.n	800c852 <netif_do_set_gw+0x28>
 800c850:	2300      	movs	r3, #0
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c856:	2301      	movs	r3, #1
 800c858:	e000      	b.n	800c85c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c884:	4b1c      	ldr	r3, [pc, #112]	; (800c8f8 <netif_set_addr+0x90>)
 800c886:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c88e:	4b1a      	ldr	r3, [pc, #104]	; (800c8f8 <netif_set_addr+0x90>)
 800c890:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c898:	4b17      	ldr	r3, [pc, #92]	; (800c8f8 <netif_set_addr+0x90>)
 800c89a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <netif_set_addr+0x42>
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <netif_set_addr+0x46>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <netif_set_addr+0x48>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d006      	beq.n	800c8c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8b8:	f107 0310 	add.w	r3, r7, #16
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68b9      	ldr	r1, [r7, #8]
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff ff49 	bl	800c758 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	6879      	ldr	r1, [r7, #4]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff ff8e 	bl	800c7ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c8d0:	69ba      	ldr	r2, [r7, #24]
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f7ff ffa8 	bl	800c82a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8e0:	f107 0310 	add.w	r3, r7, #16
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	68b9      	ldr	r1, [r7, #8]
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f7ff ff35 	bl	800c758 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c8ee:	bf00      	nop
 800c8f0:	3720      	adds	r7, #32
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	0801ccfc 	.word	0x0801ccfc

0800c8fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c904:	4a04      	ldr	r2, [pc, #16]	; (800c918 <netif_set_default+0x1c>)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	20011b40 	.word	0x20011b40

0800c91c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d107      	bne.n	800c93a <netif_set_up+0x1e>
 800c92a:	4b0f      	ldr	r3, [pc, #60]	; (800c968 <netif_set_up+0x4c>)
 800c92c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c930:	490e      	ldr	r1, [pc, #56]	; (800c96c <netif_set_up+0x50>)
 800c932:	480f      	ldr	r0, [pc, #60]	; (800c970 <netif_set_up+0x54>)
 800c934:	f00a f814 	bl	8016960 <iprintf>
 800c938:	e013      	b.n	800c962 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10c      	bne.n	800c962 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c94e:	f043 0301 	orr.w	r3, r3, #1
 800c952:	b2da      	uxtb	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c95a:	2103      	movs	r1, #3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f809 	bl	800c974 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	0801a888 	.word	0x0801a888
 800c96c:	0801aa10 	.word	0x0801aa10
 800c970:	0801a8d8 	.word	0x0801a8d8

0800c974 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	460b      	mov	r3, r1
 800c97e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d106      	bne.n	800c994 <netif_issue_reports+0x20>
 800c986:	4b18      	ldr	r3, [pc, #96]	; (800c9e8 <netif_issue_reports+0x74>)
 800c988:	f240 326d 	movw	r2, #877	; 0x36d
 800c98c:	4917      	ldr	r1, [pc, #92]	; (800c9ec <netif_issue_reports+0x78>)
 800c98e:	4818      	ldr	r0, [pc, #96]	; (800c9f0 <netif_issue_reports+0x7c>)
 800c990:	f009 ffe6 	bl	8016960 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c99a:	f003 0304 	and.w	r3, r3, #4
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d01e      	beq.n	800c9e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d017      	beq.n	800c9e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9b0:	78fb      	ldrb	r3, [r7, #3]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d013      	beq.n	800c9e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00e      	beq.n	800c9e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9ca:	f003 0308 	and.w	r3, r3, #8
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d007      	beq.n	800c9e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f008 f893 	bl	8014b04 <etharp_request>
 800c9de:	e000      	b.n	800c9e2 <netif_issue_reports+0x6e>
    return;
 800c9e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	0801a888 	.word	0x0801a888
 800c9ec:	0801aa2c 	.word	0x0801aa2c
 800c9f0:	0801a8d8 	.word	0x0801a8d8

0800c9f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d107      	bne.n	800ca12 <netif_set_down+0x1e>
 800ca02:	4b12      	ldr	r3, [pc, #72]	; (800ca4c <netif_set_down+0x58>)
 800ca04:	f240 329b 	movw	r2, #923	; 0x39b
 800ca08:	4911      	ldr	r1, [pc, #68]	; (800ca50 <netif_set_down+0x5c>)
 800ca0a:	4812      	ldr	r0, [pc, #72]	; (800ca54 <netif_set_down+0x60>)
 800ca0c:	f009 ffa8 	bl	8016960 <iprintf>
 800ca10:	e019      	b.n	800ca46 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca26:	f023 0301 	bic.w	r3, r3, #1
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f007 fc1d 	bl	8014280 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	0801a888 	.word	0x0801a888
 800ca50:	0801aa50 	.word	0x0801aa50
 800ca54:	0801a8d8 	.word	0x0801a8d8

0800ca58 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d107      	bne.n	800ca76 <netif_set_link_up+0x1e>
 800ca66:	4b13      	ldr	r3, [pc, #76]	; (800cab4 <netif_set_link_up+0x5c>)
 800ca68:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ca6c:	4912      	ldr	r1, [pc, #72]	; (800cab8 <netif_set_link_up+0x60>)
 800ca6e:	4813      	ldr	r0, [pc, #76]	; (800cabc <netif_set_link_up+0x64>)
 800ca70:	f009 ff76 	bl	8016960 <iprintf>
 800ca74:	e01b      	b.n	800caae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca7c:	f003 0304 	and.w	r3, r3, #4
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d114      	bne.n	800caae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca8a:	f043 0304 	orr.w	r3, r3, #4
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca96:	2103      	movs	r1, #3
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff ff6b 	bl	800c974 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	69db      	ldr	r3, [r3, #28]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <netif_set_link_up+0x56>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	0801a888 	.word	0x0801a888
 800cab8:	0801aa70 	.word	0x0801aa70
 800cabc:	0801a8d8 	.word	0x0801a8d8

0800cac0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d107      	bne.n	800cade <netif_set_link_down+0x1e>
 800cace:	4b11      	ldr	r3, [pc, #68]	; (800cb14 <netif_set_link_down+0x54>)
 800cad0:	f240 4206 	movw	r2, #1030	; 0x406
 800cad4:	4910      	ldr	r1, [pc, #64]	; (800cb18 <netif_set_link_down+0x58>)
 800cad6:	4811      	ldr	r0, [pc, #68]	; (800cb1c <netif_set_link_down+0x5c>)
 800cad8:	f009 ff42 	bl	8016960 <iprintf>
 800cadc:	e017      	b.n	800cb0e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d010      	beq.n	800cb0e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caf2:	f023 0304 	bic.w	r3, r3, #4
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <netif_set_link_down+0x4e>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	0801a888 	.word	0x0801a888
 800cb18:	0801aa94 	.word	0x0801aa94
 800cb1c:	0801a8d8 	.word	0x0801a8d8

0800cb20 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	61da      	str	r2, [r3, #28]
  }
}
 800cb36:	bf00      	nop
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b085      	sub	sp, #20
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cb4e:	f06f 030b 	mvn.w	r3, #11
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
	...

0800cb60 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cb6a:	79fb      	ldrb	r3, [r7, #7]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d013      	beq.n	800cb98 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cb70:	4b0d      	ldr	r3, [pc, #52]	; (800cba8 <netif_get_by_index+0x48>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e00c      	b.n	800cb92 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb7e:	3301      	adds	r3, #1
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	79fa      	ldrb	r2, [r7, #7]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d101      	bne.n	800cb8c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	e006      	b.n	800cb9a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1ef      	bne.n	800cb78 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	20011b3c 	.word	0x20011b3c

0800cbac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cbb2:	f009 fcc1 	bl	8016538 <sys_arch_protect>
 800cbb6:	6038      	str	r0, [r7, #0]
 800cbb8:	4b0d      	ldr	r3, [pc, #52]	; (800cbf0 <pbuf_free_ooseq+0x44>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	701a      	strb	r2, [r3, #0]
 800cbbe:	6838      	ldr	r0, [r7, #0]
 800cbc0:	f009 fcc8 	bl	8016554 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbc4:	4b0b      	ldr	r3, [pc, #44]	; (800cbf4 <pbuf_free_ooseq+0x48>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	607b      	str	r3, [r7, #4]
 800cbca:	e00a      	b.n	800cbe2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f002 fc91 	bl	800f4fc <tcp_free_ooseq>
      return;
 800cbda:	e005      	b.n	800cbe8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	607b      	str	r3, [r7, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1f1      	bne.n	800cbcc <pbuf_free_ooseq+0x20>
    }
  }
}
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20011b45 	.word	0x20011b45
 800cbf4:	20011b54 	.word	0x20011b54

0800cbf8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cc00:	f7ff ffd4 	bl	800cbac <pbuf_free_ooseq>
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cc12:	f009 fc91 	bl	8016538 <sys_arch_protect>
 800cc16:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cc18:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <pbuf_pool_is_empty+0x4c>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cc1e:	4b0e      	ldr	r3, [pc, #56]	; (800cc58 <pbuf_pool_is_empty+0x4c>)
 800cc20:	2201      	movs	r2, #1
 800cc22:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f009 fc95 	bl	8016554 <sys_arch_unprotect>

  if (!queued) {
 800cc2a:	78fb      	ldrb	r3, [r7, #3]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10f      	bne.n	800cc50 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cc30:	2100      	movs	r1, #0
 800cc32:	480a      	ldr	r0, [pc, #40]	; (800cc5c <pbuf_pool_is_empty+0x50>)
 800cc34:	f7fe fd7c 	bl	800b730 <tcpip_try_callback>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d008      	beq.n	800cc50 <pbuf_pool_is_empty+0x44>
 800cc3e:	f009 fc7b 	bl	8016538 <sys_arch_protect>
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <pbuf_pool_is_empty+0x4c>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f009 fc82 	bl	8016554 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20011b45 	.word	0x20011b45
 800cc5c:	0800cbf9 	.word	0x0800cbf9

0800cc60 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	460b      	mov	r3, r1
 800cc70:	80fb      	strh	r3, [r7, #6]
 800cc72:	4613      	mov	r3, r2
 800cc74:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	88fa      	ldrh	r2, [r7, #6]
 800cc86:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	88ba      	ldrh	r2, [r7, #4]
 800cc8c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cc8e:	8b3b      	ldrh	r3, [r7, #24]
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	7f3a      	ldrb	r2, [r7, #28]
 800cc9a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	73da      	strb	r2, [r3, #15]
}
 800cca8:	bf00      	nop
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b08c      	sub	sp, #48	; 0x30
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	4603      	mov	r3, r0
 800ccbc:	71fb      	strb	r3, [r7, #7]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	80bb      	strh	r3, [r7, #4]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ccca:	887b      	ldrh	r3, [r7, #2]
 800cccc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccd0:	d07f      	beq.n	800cdd2 <pbuf_alloc+0x11e>
 800ccd2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccd6:	f300 80c8 	bgt.w	800ce6a <pbuf_alloc+0x1b6>
 800ccda:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ccde:	d010      	beq.n	800cd02 <pbuf_alloc+0x4e>
 800cce0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cce4:	f300 80c1 	bgt.w	800ce6a <pbuf_alloc+0x1b6>
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d002      	beq.n	800ccf2 <pbuf_alloc+0x3e>
 800ccec:	2b41      	cmp	r3, #65	; 0x41
 800ccee:	f040 80bc 	bne.w	800ce6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ccf2:	887a      	ldrh	r2, [r7, #2]
 800ccf4:	88bb      	ldrh	r3, [r7, #4]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f000 f8d1 	bl	800cea0 <pbuf_alloc_reference>
 800ccfe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cd00:	e0bd      	b.n	800ce7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cd0a:	88bb      	ldrh	r3, [r7, #4]
 800cd0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cd0e:	200b      	movs	r0, #11
 800cd10:	f7ff fb9e 	bl	800c450 <memp_malloc>
 800cd14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d109      	bne.n	800cd30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cd1c:	f7ff ff76 	bl	800cc0c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <pbuf_alloc+0x78>
            pbuf_free(p);
 800cd26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd28:	f000 faa8 	bl	800d27c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e0a7      	b.n	800ce80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cd30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd32:	3303      	adds	r3, #3
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	f023 0303 	bic.w	r3, r3, #3
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	8b7a      	ldrh	r2, [r7, #26]
 800cd44:	4293      	cmp	r3, r2
 800cd46:	bf28      	it	cs
 800cd48:	4613      	movcs	r3, r2
 800cd4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cd4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd4e:	3310      	adds	r3, #16
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	4413      	add	r3, r2
 800cd54:	3303      	adds	r3, #3
 800cd56:	f023 0303 	bic.w	r3, r3, #3
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	89f9      	ldrh	r1, [r7, #14]
 800cd5e:	8b7a      	ldrh	r2, [r7, #26]
 800cd60:	2300      	movs	r3, #0
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	887b      	ldrh	r3, [r7, #2]
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	6938      	ldr	r0, [r7, #16]
 800cd6e:	f7ff ff77 	bl	800cc60 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f003 0303 	and.w	r3, r3, #3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d006      	beq.n	800cd8c <pbuf_alloc+0xd8>
 800cd7e:	4b42      	ldr	r3, [pc, #264]	; (800ce88 <pbuf_alloc+0x1d4>)
 800cd80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd84:	4941      	ldr	r1, [pc, #260]	; (800ce8c <pbuf_alloc+0x1d8>)
 800cd86:	4842      	ldr	r0, [pc, #264]	; (800ce90 <pbuf_alloc+0x1dc>)
 800cd88:	f009 fdea 	bl	8016960 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd8e:	3303      	adds	r3, #3
 800cd90:	f023 0303 	bic.w	r3, r3, #3
 800cd94:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd98:	d106      	bne.n	800cda8 <pbuf_alloc+0xf4>
 800cd9a:	4b3b      	ldr	r3, [pc, #236]	; (800ce88 <pbuf_alloc+0x1d4>)
 800cd9c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cda0:	493c      	ldr	r1, [pc, #240]	; (800ce94 <pbuf_alloc+0x1e0>)
 800cda2:	483b      	ldr	r0, [pc, #236]	; (800ce90 <pbuf_alloc+0x1dc>)
 800cda4:	f009 fddc 	bl	8016960 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d102      	bne.n	800cdb4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24
 800cdb2:	e002      	b.n	800cdba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cdbe:	8b7a      	ldrh	r2, [r7, #26]
 800cdc0:	89fb      	ldrh	r3, [r7, #14]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cdca:	8b7b      	ldrh	r3, [r7, #26]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d19e      	bne.n	800cd0e <pbuf_alloc+0x5a>
      break;
 800cdd0:	e055      	b.n	800ce7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cdd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdd4:	3303      	adds	r3, #3
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f023 0303 	bic.w	r3, r3, #3
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	88bb      	ldrh	r3, [r7, #4]
 800cde0:	3303      	adds	r3, #3
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	f023 0303 	bic.w	r3, r3, #3
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	4413      	add	r3, r2
 800cdec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cdee:	8b3b      	ldrh	r3, [r7, #24]
 800cdf0:	3310      	adds	r3, #16
 800cdf2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cdf4:	8b3a      	ldrh	r2, [r7, #24]
 800cdf6:	88bb      	ldrh	r3, [r7, #4]
 800cdf8:	3303      	adds	r3, #3
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d306      	bcc.n	800ce10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ce02:	8afa      	ldrh	r2, [r7, #22]
 800ce04:	88bb      	ldrh	r3, [r7, #4]
 800ce06:	3303      	adds	r3, #3
 800ce08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d201      	bcs.n	800ce14 <pbuf_alloc+0x160>
        return NULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	e035      	b.n	800ce80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ce14:	8afb      	ldrh	r3, [r7, #22]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff f976 	bl	800c108 <mem_malloc>
 800ce1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d101      	bne.n	800ce28 <pbuf_alloc+0x174>
        return NULL;
 800ce24:	2300      	movs	r3, #0
 800ce26:	e02b      	b.n	800ce80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ce28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce2a:	3310      	adds	r3, #16
 800ce2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce2e:	4413      	add	r3, r2
 800ce30:	3303      	adds	r3, #3
 800ce32:	f023 0303 	bic.w	r3, r3, #3
 800ce36:	4618      	mov	r0, r3
 800ce38:	88b9      	ldrh	r1, [r7, #4]
 800ce3a:	88ba      	ldrh	r2, [r7, #4]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	887b      	ldrh	r3, [r7, #2]
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	460b      	mov	r3, r1
 800ce46:	4601      	mov	r1, r0
 800ce48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce4a:	f7ff ff09 	bl	800cc60 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	f003 0303 	and.w	r3, r3, #3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d010      	beq.n	800ce7c <pbuf_alloc+0x1c8>
 800ce5a:	4b0b      	ldr	r3, [pc, #44]	; (800ce88 <pbuf_alloc+0x1d4>)
 800ce5c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ce60:	490d      	ldr	r1, [pc, #52]	; (800ce98 <pbuf_alloc+0x1e4>)
 800ce62:	480b      	ldr	r0, [pc, #44]	; (800ce90 <pbuf_alloc+0x1dc>)
 800ce64:	f009 fd7c 	bl	8016960 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ce68:	e008      	b.n	800ce7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce6a:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <pbuf_alloc+0x1d4>)
 800ce6c:	f240 1227 	movw	r2, #295	; 0x127
 800ce70:	490a      	ldr	r1, [pc, #40]	; (800ce9c <pbuf_alloc+0x1e8>)
 800ce72:	4807      	ldr	r0, [pc, #28]	; (800ce90 <pbuf_alloc+0x1dc>)
 800ce74:	f009 fd74 	bl	8016960 <iprintf>
      return NULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e001      	b.n	800ce80 <pbuf_alloc+0x1cc>
      break;
 800ce7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3728      	adds	r7, #40	; 0x28
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	0801aab8 	.word	0x0801aab8
 800ce8c:	0801aae8 	.word	0x0801aae8
 800ce90:	0801ab18 	.word	0x0801ab18
 800ce94:	0801ab40 	.word	0x0801ab40
 800ce98:	0801ab74 	.word	0x0801ab74
 800ce9c:	0801aba0 	.word	0x0801aba0

0800cea0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	807b      	strh	r3, [r7, #2]
 800ceac:	4613      	mov	r3, r2
 800ceae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ceb0:	883b      	ldrh	r3, [r7, #0]
 800ceb2:	2b41      	cmp	r3, #65	; 0x41
 800ceb4:	d009      	beq.n	800ceca <pbuf_alloc_reference+0x2a>
 800ceb6:	883b      	ldrh	r3, [r7, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d006      	beq.n	800ceca <pbuf_alloc_reference+0x2a>
 800cebc:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <pbuf_alloc_reference+0x5c>)
 800cebe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cec2:	490f      	ldr	r1, [pc, #60]	; (800cf00 <pbuf_alloc_reference+0x60>)
 800cec4:	480f      	ldr	r0, [pc, #60]	; (800cf04 <pbuf_alloc_reference+0x64>)
 800cec6:	f009 fd4b 	bl	8016960 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ceca:	200a      	movs	r0, #10
 800cecc:	f7ff fac0 	bl	800c450 <memp_malloc>
 800ced0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e00b      	b.n	800cef4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cedc:	8879      	ldrh	r1, [r7, #2]
 800cede:	887a      	ldrh	r2, [r7, #2]
 800cee0:	2300      	movs	r3, #0
 800cee2:	9301      	str	r3, [sp, #4]
 800cee4:	883b      	ldrh	r3, [r7, #0]
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	460b      	mov	r3, r1
 800ceea:	6879      	ldr	r1, [r7, #4]
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f7ff feb7 	bl	800cc60 <pbuf_init_alloced_pbuf>
  return p;
 800cef2:	68fb      	ldr	r3, [r7, #12]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0801aab8 	.word	0x0801aab8
 800cf00:	0801abbc 	.word	0x0801abbc
 800cf04:	0801ab18 	.word	0x0801ab18

0800cf08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	4603      	mov	r3, r0
 800cf12:	73fb      	strb	r3, [r7, #15]
 800cf14:	460b      	mov	r3, r1
 800cf16:	81bb      	strh	r3, [r7, #12]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf20:	8a7b      	ldrh	r3, [r7, #18]
 800cf22:	3303      	adds	r3, #3
 800cf24:	f023 0203 	bic.w	r2, r3, #3
 800cf28:	89bb      	ldrh	r3, [r7, #12]
 800cf2a:	441a      	add	r2, r3
 800cf2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d901      	bls.n	800cf36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e018      	b.n	800cf68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d007      	beq.n	800cf4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf3c:	8a7b      	ldrh	r3, [r7, #18]
 800cf3e:	3303      	adds	r3, #3
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	6a3a      	ldr	r2, [r7, #32]
 800cf46:	4413      	add	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	e001      	b.n	800cf50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	89b9      	ldrh	r1, [r7, #12]
 800cf54:	89ba      	ldrh	r2, [r7, #12]
 800cf56:	2302      	movs	r3, #2
 800cf58:	9301      	str	r3, [sp, #4]
 800cf5a:	897b      	ldrh	r3, [r7, #10]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	6979      	ldr	r1, [r7, #20]
 800cf62:	f7ff fe7d 	bl	800cc60 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cf66:	687b      	ldr	r3, [r7, #4]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d106      	bne.n	800cf90 <pbuf_realloc+0x20>
 800cf82:	4b3a      	ldr	r3, [pc, #232]	; (800d06c <pbuf_realloc+0xfc>)
 800cf84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf88:	4939      	ldr	r1, [pc, #228]	; (800d070 <pbuf_realloc+0x100>)
 800cf8a:	483a      	ldr	r0, [pc, #232]	; (800d074 <pbuf_realloc+0x104>)
 800cf8c:	f009 fce8 	bl	8016960 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	891b      	ldrh	r3, [r3, #8]
 800cf94:	887a      	ldrh	r2, [r7, #2]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d263      	bcs.n	800d062 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	891a      	ldrh	r2, [r3, #8]
 800cf9e:	887b      	ldrh	r3, [r7, #2]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cfa4:	887b      	ldrh	r3, [r7, #2]
 800cfa6:	817b      	strh	r3, [r7, #10]
  q = p;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cfac:	e018      	b.n	800cfe0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	895b      	ldrh	r3, [r3, #10]
 800cfb2:	897a      	ldrh	r2, [r7, #10]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	891a      	ldrh	r2, [r3, #8]
 800cfbc:	893b      	ldrh	r3, [r7, #8]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <pbuf_realloc+0x70>
 800cfd2:	4b26      	ldr	r3, [pc, #152]	; (800d06c <pbuf_realloc+0xfc>)
 800cfd4:	f240 12af 	movw	r2, #431	; 0x1af
 800cfd8:	4927      	ldr	r1, [pc, #156]	; (800d078 <pbuf_realloc+0x108>)
 800cfda:	4826      	ldr	r0, [pc, #152]	; (800d074 <pbuf_realloc+0x104>)
 800cfdc:	f009 fcc0 	bl	8016960 <iprintf>
  while (rem_len > q->len) {
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	895b      	ldrh	r3, [r3, #10]
 800cfe4:	897a      	ldrh	r2, [r7, #10]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d8e1      	bhi.n	800cfae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	7b1b      	ldrb	r3, [r3, #12]
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d121      	bne.n	800d03a <pbuf_realloc+0xca>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	895b      	ldrh	r3, [r3, #10]
 800cffa:	897a      	ldrh	r2, [r7, #10]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d01c      	beq.n	800d03a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	7b5b      	ldrb	r3, [r3, #13]
 800d004:	f003 0302 	and.w	r3, r3, #2
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d116      	bne.n	800d03a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	b29a      	uxth	r2, r3
 800d016:	897b      	ldrh	r3, [r7, #10]
 800d018:	4413      	add	r3, r2
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	4619      	mov	r1, r3
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f7fe ff68 	bl	800bef4 <mem_trim>
 800d024:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <pbuf_realloc+0xca>
 800d02c:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <pbuf_realloc+0xfc>)
 800d02e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d032:	4912      	ldr	r1, [pc, #72]	; (800d07c <pbuf_realloc+0x10c>)
 800d034:	480f      	ldr	r0, [pc, #60]	; (800d074 <pbuf_realloc+0x104>)
 800d036:	f009 fc93 	bl	8016960 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	897a      	ldrh	r2, [r7, #10]
 800d03e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	895a      	ldrh	r2, [r3, #10]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d004      	beq.n	800d05a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4618      	mov	r0, r3
 800d056:	f000 f911 	bl	800d27c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	e000      	b.n	800d064 <pbuf_realloc+0xf4>
    return;
 800d062:	bf00      	nop

}
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	0801aab8 	.word	0x0801aab8
 800d070:	0801abd0 	.word	0x0801abd0
 800d074:	0801ab18 	.word	0x0801ab18
 800d078:	0801abe8 	.word	0x0801abe8
 800d07c:	0801ac00 	.word	0x0801ac00

0800d080 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	4613      	mov	r3, r2
 800d08c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <pbuf_add_header_impl+0x22>
 800d094:	4b2b      	ldr	r3, [pc, #172]	; (800d144 <pbuf_add_header_impl+0xc4>)
 800d096:	f240 12df 	movw	r2, #479	; 0x1df
 800d09a:	492b      	ldr	r1, [pc, #172]	; (800d148 <pbuf_add_header_impl+0xc8>)
 800d09c:	482b      	ldr	r0, [pc, #172]	; (800d14c <pbuf_add_header_impl+0xcc>)
 800d09e:	f009 fc5f 	bl	8016960 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <pbuf_add_header_impl+0x30>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ae:	d301      	bcc.n	800d0b4 <pbuf_add_header_impl+0x34>
    return 1;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e043      	b.n	800d13c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <pbuf_add_header_impl+0x3e>
    return 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e03e      	b.n	800d13c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	891a      	ldrh	r2, [r3, #8]
 800d0c6:	8a7b      	ldrh	r3, [r7, #18]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	8a7a      	ldrh	r2, [r7, #18]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d901      	bls.n	800d0d6 <pbuf_add_header_impl+0x56>
    return 1;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e032      	b.n	800d13c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	7b1b      	ldrb	r3, [r3, #12]
 800d0da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d0dc:	8a3b      	ldrh	r3, [r7, #16]
 800d0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00c      	beq.n	800d100 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	425b      	negs	r3, r3
 800d0ee:	4413      	add	r3, r2
 800d0f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3310      	adds	r3, #16
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d20d      	bcs.n	800d118 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e01d      	b.n	800d13c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d006      	beq.n	800d114 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	425b      	negs	r3, r3
 800d10e:	4413      	add	r3, r2
 800d110:	617b      	str	r3, [r7, #20]
 800d112:	e001      	b.n	800d118 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d114:	2301      	movs	r3, #1
 800d116:	e011      	b.n	800d13c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	697a      	ldr	r2, [r7, #20]
 800d11c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	895a      	ldrh	r2, [r3, #10]
 800d122:	8a7b      	ldrh	r3, [r7, #18]
 800d124:	4413      	add	r3, r2
 800d126:	b29a      	uxth	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	891a      	ldrh	r2, [r3, #8]
 800d130:	8a7b      	ldrh	r3, [r7, #18]
 800d132:	4413      	add	r3, r2
 800d134:	b29a      	uxth	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	811a      	strh	r2, [r3, #8]


  return 0;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3718      	adds	r7, #24
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	0801aab8 	.word	0x0801aab8
 800d148:	0801ac1c 	.word	0x0801ac1c
 800d14c:	0801ab18 	.word	0x0801ab18

0800d150 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d15a:	2200      	movs	r2, #0
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff ff8e 	bl	800d080 <pbuf_add_header_impl>
 800d164:	4603      	mov	r3, r0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <pbuf_remove_header+0x1e>
 800d180:	4b20      	ldr	r3, [pc, #128]	; (800d204 <pbuf_remove_header+0x94>)
 800d182:	f240 224b 	movw	r2, #587	; 0x24b
 800d186:	4920      	ldr	r1, [pc, #128]	; (800d208 <pbuf_remove_header+0x98>)
 800d188:	4820      	ldr	r0, [pc, #128]	; (800d20c <pbuf_remove_header+0x9c>)
 800d18a:	f009 fbe9 	bl	8016960 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d003      	beq.n	800d19c <pbuf_remove_header+0x2c>
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d19a:	d301      	bcc.n	800d1a0 <pbuf_remove_header+0x30>
    return 1;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e02c      	b.n	800d1fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <pbuf_remove_header+0x3a>
    return 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e027      	b.n	800d1fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	895b      	ldrh	r3, [r3, #10]
 800d1b2:	89fa      	ldrh	r2, [r7, #14]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d908      	bls.n	800d1ca <pbuf_remove_header+0x5a>
 800d1b8:	4b12      	ldr	r3, [pc, #72]	; (800d204 <pbuf_remove_header+0x94>)
 800d1ba:	f240 2255 	movw	r2, #597	; 0x255
 800d1be:	4914      	ldr	r1, [pc, #80]	; (800d210 <pbuf_remove_header+0xa0>)
 800d1c0:	4812      	ldr	r0, [pc, #72]	; (800d20c <pbuf_remove_header+0x9c>)
 800d1c2:	f009 fbcd 	bl	8016960 <iprintf>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e017      	b.n	800d1fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	441a      	add	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	895a      	ldrh	r2, [r3, #10]
 800d1e0:	89fb      	ldrh	r3, [r7, #14]
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	891a      	ldrh	r2, [r3, #8]
 800d1ee:	89fb      	ldrh	r3, [r7, #14]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	0801aab8 	.word	0x0801aab8
 800d208:	0801ac1c 	.word	0x0801ac1c
 800d20c:	0801ab18 	.word	0x0801ab18
 800d210:	0801ac28 	.word	0x0801ac28

0800d214 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	807b      	strh	r3, [r7, #2]
 800d220:	4613      	mov	r3, r2
 800d222:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	da08      	bge.n	800d23e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d22c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d230:	425b      	negs	r3, r3
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7ff ff9b 	bl	800d170 <pbuf_remove_header>
 800d23a:	4603      	mov	r3, r0
 800d23c:	e007      	b.n	800d24e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d23e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d242:	787a      	ldrb	r2, [r7, #1]
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ff1a 	bl	800d080 <pbuf_add_header_impl>
 800d24c:	4603      	mov	r3, r0
  }
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b082      	sub	sp, #8
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d266:	2201      	movs	r2, #1
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff ffd2 	bl	800d214 <pbuf_header_impl>
 800d270:	4603      	mov	r3, r0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10b      	bne.n	800d2a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <pbuf_free+0x22>
 800d290:	4b3b      	ldr	r3, [pc, #236]	; (800d380 <pbuf_free+0x104>)
 800d292:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d296:	493b      	ldr	r1, [pc, #236]	; (800d384 <pbuf_free+0x108>)
 800d298:	483b      	ldr	r0, [pc, #236]	; (800d388 <pbuf_free+0x10c>)
 800d29a:	f009 fb61 	bl	8016960 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e069      	b.n	800d376 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d2a6:	e062      	b.n	800d36e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d2a8:	f009 f946 	bl	8016538 <sys_arch_protect>
 800d2ac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7b9b      	ldrb	r3, [r3, #14]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <pbuf_free+0x48>
 800d2b6:	4b32      	ldr	r3, [pc, #200]	; (800d380 <pbuf_free+0x104>)
 800d2b8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d2bc:	4933      	ldr	r1, [pc, #204]	; (800d38c <pbuf_free+0x110>)
 800d2be:	4832      	ldr	r0, [pc, #200]	; (800d388 <pbuf_free+0x10c>)
 800d2c0:	f009 fb4e 	bl	8016960 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7b9b      	ldrb	r3, [r3, #14]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	739a      	strb	r2, [r3, #14]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7b9b      	ldrb	r3, [r3, #14]
 800d2d4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d2d6:	69b8      	ldr	r0, [r7, #24]
 800d2d8:	f009 f93c 	bl	8016554 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d2dc:	7dfb      	ldrb	r3, [r7, #23]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d143      	bne.n	800d36a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7b1b      	ldrb	r3, [r3, #12]
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7b5b      	ldrb	r3, [r3, #13]
 800d2f6:	f003 0302 	and.w	r3, r3, #2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d011      	beq.n	800d322 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d106      	bne.n	800d318 <pbuf_free+0x9c>
 800d30a:	4b1d      	ldr	r3, [pc, #116]	; (800d380 <pbuf_free+0x104>)
 800d30c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d310:	491f      	ldr	r1, [pc, #124]	; (800d390 <pbuf_free+0x114>)
 800d312:	481d      	ldr	r0, [pc, #116]	; (800d388 <pbuf_free+0x10c>)
 800d314:	f009 fb24 	bl	8016960 <iprintf>
        pc->custom_free_function(p);
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	4798      	blx	r3
 800d320:	e01d      	b.n	800d35e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d322:	7bfb      	ldrb	r3, [r7, #15]
 800d324:	2b02      	cmp	r3, #2
 800d326:	d104      	bne.n	800d332 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d328:	6879      	ldr	r1, [r7, #4]
 800d32a:	200b      	movs	r0, #11
 800d32c:	f7ff f906 	bl	800c53c <memp_free>
 800d330:	e015      	b.n	800d35e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d104      	bne.n	800d342 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	200a      	movs	r0, #10
 800d33c:	f7ff f8fe 	bl	800c53c <memp_free>
 800d340:	e00d      	b.n	800d35e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d103      	bne.n	800d350 <pbuf_free+0xd4>
          mem_free(p);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7fe fd43 	bl	800bdd4 <mem_free>
 800d34e:	e006      	b.n	800d35e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d350:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <pbuf_free+0x104>)
 800d352:	f240 320f 	movw	r2, #783	; 0x30f
 800d356:	490f      	ldr	r1, [pc, #60]	; (800d394 <pbuf_free+0x118>)
 800d358:	480b      	ldr	r0, [pc, #44]	; (800d388 <pbuf_free+0x10c>)
 800d35a:	f009 fb01 	bl	8016960 <iprintf>
        }
      }
      count++;
 800d35e:	7ffb      	ldrb	r3, [r7, #31]
 800d360:	3301      	adds	r3, #1
 800d362:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	607b      	str	r3, [r7, #4]
 800d368:	e001      	b.n	800d36e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d36a:	2300      	movs	r3, #0
 800d36c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d199      	bne.n	800d2a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d374:	7ffb      	ldrb	r3, [r7, #31]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3720      	adds	r7, #32
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	0801aab8 	.word	0x0801aab8
 800d384:	0801ac1c 	.word	0x0801ac1c
 800d388:	0801ab18 	.word	0x0801ab18
 800d38c:	0801ac48 	.word	0x0801ac48
 800d390:	0801ac60 	.word	0x0801ac60
 800d394:	0801ac84 	.word	0x0801ac84

0800d398 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d3a4:	e005      	b.n	800d3b2 <pbuf_clen+0x1a>
    ++len;
 800d3a6:	89fb      	ldrh	r3, [r7, #14]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1f6      	bne.n	800d3a6 <pbuf_clen+0xe>
  }
  return len;
 800d3b8:	89fb      	ldrh	r3, [r7, #14]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
	...

0800d3c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d016      	beq.n	800d404 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d3d6:	f009 f8af 	bl	8016538 <sys_arch_protect>
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	7b9b      	ldrb	r3, [r3, #14]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	739a      	strb	r2, [r3, #14]
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f009 f8b3 	bl	8016554 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	7b9b      	ldrb	r3, [r3, #14]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d106      	bne.n	800d404 <pbuf_ref+0x3c>
 800d3f6:	4b05      	ldr	r3, [pc, #20]	; (800d40c <pbuf_ref+0x44>)
 800d3f8:	f240 3242 	movw	r2, #834	; 0x342
 800d3fc:	4904      	ldr	r1, [pc, #16]	; (800d410 <pbuf_ref+0x48>)
 800d3fe:	4805      	ldr	r0, [pc, #20]	; (800d414 <pbuf_ref+0x4c>)
 800d400:	f009 faae 	bl	8016960 <iprintf>
  }
}
 800d404:	bf00      	nop
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	0801aab8 	.word	0x0801aab8
 800d410:	0801ac98 	.word	0x0801ac98
 800d414:	0801ab18 	.word	0x0801ab18

0800d418 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <pbuf_cat+0x16>
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d107      	bne.n	800d43e <pbuf_cat+0x26>
 800d42e:	4b20      	ldr	r3, [pc, #128]	; (800d4b0 <pbuf_cat+0x98>)
 800d430:	f240 3259 	movw	r2, #857	; 0x359
 800d434:	491f      	ldr	r1, [pc, #124]	; (800d4b4 <pbuf_cat+0x9c>)
 800d436:	4820      	ldr	r0, [pc, #128]	; (800d4b8 <pbuf_cat+0xa0>)
 800d438:	f009 fa92 	bl	8016960 <iprintf>
 800d43c:	e034      	b.n	800d4a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	60fb      	str	r3, [r7, #12]
 800d442:	e00a      	b.n	800d45a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	891a      	ldrh	r2, [r3, #8]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	891b      	ldrh	r3, [r3, #8]
 800d44c:	4413      	add	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1f0      	bne.n	800d444 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	891a      	ldrh	r2, [r3, #8]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	895b      	ldrh	r3, [r3, #10]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d006      	beq.n	800d47c <pbuf_cat+0x64>
 800d46e:	4b10      	ldr	r3, [pc, #64]	; (800d4b0 <pbuf_cat+0x98>)
 800d470:	f240 3262 	movw	r2, #866	; 0x362
 800d474:	4911      	ldr	r1, [pc, #68]	; (800d4bc <pbuf_cat+0xa4>)
 800d476:	4810      	ldr	r0, [pc, #64]	; (800d4b8 <pbuf_cat+0xa0>)
 800d478:	f009 fa72 	bl	8016960 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <pbuf_cat+0x7a>
 800d484:	4b0a      	ldr	r3, [pc, #40]	; (800d4b0 <pbuf_cat+0x98>)
 800d486:	f240 3263 	movw	r2, #867	; 0x363
 800d48a:	490d      	ldr	r1, [pc, #52]	; (800d4c0 <pbuf_cat+0xa8>)
 800d48c:	480a      	ldr	r0, [pc, #40]	; (800d4b8 <pbuf_cat+0xa0>)
 800d48e:	f009 fa67 	bl	8016960 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	891a      	ldrh	r2, [r3, #8]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	891b      	ldrh	r3, [r3, #8]
 800d49a:	4413      	add	r3, r2
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	0801aab8 	.word	0x0801aab8
 800d4b4:	0801acac 	.word	0x0801acac
 800d4b8:	0801ab18 	.word	0x0801ab18
 800d4bc:	0801ace4 	.word	0x0801ace4
 800d4c0:	0801ad14 	.word	0x0801ad14

0800d4c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d008      	beq.n	800d4ee <pbuf_copy+0x2a>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <pbuf_copy+0x2a>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	891a      	ldrh	r2, [r3, #8]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	891b      	ldrh	r3, [r3, #8]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d209      	bcs.n	800d502 <pbuf_copy+0x3e>
 800d4ee:	4b57      	ldr	r3, [pc, #348]	; (800d64c <pbuf_copy+0x188>)
 800d4f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d4f4:	4956      	ldr	r1, [pc, #344]	; (800d650 <pbuf_copy+0x18c>)
 800d4f6:	4857      	ldr	r0, [pc, #348]	; (800d654 <pbuf_copy+0x190>)
 800d4f8:	f009 fa32 	bl	8016960 <iprintf>
 800d4fc:	f06f 030f 	mvn.w	r3, #15
 800d500:	e09f      	b.n	800d642 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	895b      	ldrh	r3, [r3, #10]
 800d506:	461a      	mov	r2, r3
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	1ad2      	subs	r2, r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	895b      	ldrh	r3, [r3, #10]
 800d510:	4619      	mov	r1, r3
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	1acb      	subs	r3, r1, r3
 800d516:	429a      	cmp	r2, r3
 800d518:	d306      	bcc.n	800d528 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	895b      	ldrh	r3, [r3, #10]
 800d51e:	461a      	mov	r2, r3
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	e005      	b.n	800d534 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	895b      	ldrh	r3, [r3, #10]
 800d52c:	461a      	mov	r2, r3
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685a      	ldr	r2, [r3, #4]
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	18d0      	adds	r0, r2, r3
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	4413      	add	r3, r2
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	4619      	mov	r1, r3
 800d548:	f009 f945 	bl	80167d6 <memcpy>
    offset_to += len;
 800d54c:	697a      	ldr	r2, [r7, #20]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	4413      	add	r3, r2
 800d552:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	4413      	add	r3, r2
 800d55a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	895b      	ldrh	r3, [r3, #10]
 800d560:	461a      	mov	r2, r3
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	4293      	cmp	r3, r2
 800d566:	d906      	bls.n	800d576 <pbuf_copy+0xb2>
 800d568:	4b38      	ldr	r3, [pc, #224]	; (800d64c <pbuf_copy+0x188>)
 800d56a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d56e:	493a      	ldr	r1, [pc, #232]	; (800d658 <pbuf_copy+0x194>)
 800d570:	4838      	ldr	r0, [pc, #224]	; (800d654 <pbuf_copy+0x190>)
 800d572:	f009 f9f5 	bl	8016960 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	895b      	ldrh	r3, [r3, #10]
 800d57a:	461a      	mov	r2, r3
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	4293      	cmp	r3, r2
 800d580:	d906      	bls.n	800d590 <pbuf_copy+0xcc>
 800d582:	4b32      	ldr	r3, [pc, #200]	; (800d64c <pbuf_copy+0x188>)
 800d584:	f240 32da 	movw	r2, #986	; 0x3da
 800d588:	4934      	ldr	r1, [pc, #208]	; (800d65c <pbuf_copy+0x198>)
 800d58a:	4832      	ldr	r0, [pc, #200]	; (800d654 <pbuf_copy+0x190>)
 800d58c:	f009 f9e8 	bl	8016960 <iprintf>
    if (offset_from >= p_from->len) {
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	895b      	ldrh	r3, [r3, #10]
 800d594:	461a      	mov	r2, r3
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	4293      	cmp	r3, r2
 800d59a:	d304      	bcc.n	800d5a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	895b      	ldrh	r3, [r3, #10]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d114      	bne.n	800d5dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10c      	bne.n	800d5dc <pbuf_copy+0x118>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d009      	beq.n	800d5dc <pbuf_copy+0x118>
 800d5c8:	4b20      	ldr	r3, [pc, #128]	; (800d64c <pbuf_copy+0x188>)
 800d5ca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d5ce:	4924      	ldr	r1, [pc, #144]	; (800d660 <pbuf_copy+0x19c>)
 800d5d0:	4820      	ldr	r0, [pc, #128]	; (800d654 <pbuf_copy+0x190>)
 800d5d2:	f009 f9c5 	bl	8016960 <iprintf>
 800d5d6:	f06f 030f 	mvn.w	r3, #15
 800d5da:	e032      	b.n	800d642 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d013      	beq.n	800d60a <pbuf_copy+0x146>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	895a      	ldrh	r2, [r3, #10]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	891b      	ldrh	r3, [r3, #8]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d10d      	bne.n	800d60a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d009      	beq.n	800d60a <pbuf_copy+0x146>
 800d5f6:	4b15      	ldr	r3, [pc, #84]	; (800d64c <pbuf_copy+0x188>)
 800d5f8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d5fc:	4919      	ldr	r1, [pc, #100]	; (800d664 <pbuf_copy+0x1a0>)
 800d5fe:	4815      	ldr	r0, [pc, #84]	; (800d654 <pbuf_copy+0x190>)
 800d600:	f009 f9ae 	bl	8016960 <iprintf>
 800d604:	f06f 0305 	mvn.w	r3, #5
 800d608:	e01b      	b.n	800d642 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d013      	beq.n	800d638 <pbuf_copy+0x174>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	895a      	ldrh	r2, [r3, #10]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	891b      	ldrh	r3, [r3, #8]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d10d      	bne.n	800d638 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d009      	beq.n	800d638 <pbuf_copy+0x174>
 800d624:	4b09      	ldr	r3, [pc, #36]	; (800d64c <pbuf_copy+0x188>)
 800d626:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d62a:	490e      	ldr	r1, [pc, #56]	; (800d664 <pbuf_copy+0x1a0>)
 800d62c:	4809      	ldr	r0, [pc, #36]	; (800d654 <pbuf_copy+0x190>)
 800d62e:	f009 f997 	bl	8016960 <iprintf>
 800d632:	f06f 0305 	mvn.w	r3, #5
 800d636:	e004      	b.n	800d642 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f47f af61 	bne.w	800d502 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3718      	adds	r7, #24
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	0801aab8 	.word	0x0801aab8
 800d650:	0801ad60 	.word	0x0801ad60
 800d654:	0801ab18 	.word	0x0801ab18
 800d658:	0801ad90 	.word	0x0801ad90
 800d65c:	0801ada8 	.word	0x0801ada8
 800d660:	0801adc4 	.word	0x0801adc4
 800d664:	0801add4 	.word	0x0801add4

0800d668 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	4611      	mov	r1, r2
 800d674:	461a      	mov	r2, r3
 800d676:	460b      	mov	r3, r1
 800d678:	80fb      	strh	r3, [r7, #6]
 800d67a:	4613      	mov	r3, r2
 800d67c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d108      	bne.n	800d69e <pbuf_copy_partial+0x36>
 800d68c:	4b2b      	ldr	r3, [pc, #172]	; (800d73c <pbuf_copy_partial+0xd4>)
 800d68e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d692:	492b      	ldr	r1, [pc, #172]	; (800d740 <pbuf_copy_partial+0xd8>)
 800d694:	482b      	ldr	r0, [pc, #172]	; (800d744 <pbuf_copy_partial+0xdc>)
 800d696:	f009 f963 	bl	8016960 <iprintf>
 800d69a:	2300      	movs	r3, #0
 800d69c:	e04a      	b.n	800d734 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d108      	bne.n	800d6b6 <pbuf_copy_partial+0x4e>
 800d6a4:	4b25      	ldr	r3, [pc, #148]	; (800d73c <pbuf_copy_partial+0xd4>)
 800d6a6:	f240 420b 	movw	r2, #1035	; 0x40b
 800d6aa:	4927      	ldr	r1, [pc, #156]	; (800d748 <pbuf_copy_partial+0xe0>)
 800d6ac:	4825      	ldr	r0, [pc, #148]	; (800d744 <pbuf_copy_partial+0xdc>)
 800d6ae:	f009 f957 	bl	8016960 <iprintf>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	e03e      	b.n	800d734 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	61fb      	str	r3, [r7, #28]
 800d6ba:	e034      	b.n	800d726 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d6bc:	88bb      	ldrh	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00a      	beq.n	800d6d8 <pbuf_copy_partial+0x70>
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	895b      	ldrh	r3, [r3, #10]
 800d6c6:	88ba      	ldrh	r2, [r7, #4]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d305      	bcc.n	800d6d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	895b      	ldrh	r3, [r3, #10]
 800d6d0:	88ba      	ldrh	r2, [r7, #4]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	80bb      	strh	r3, [r7, #4]
 800d6d6:	e023      	b.n	800d720 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	895a      	ldrh	r2, [r3, #10]
 800d6dc:	88bb      	ldrh	r3, [r7, #4]
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d6e2:	8b3a      	ldrh	r2, [r7, #24]
 800d6e4:	88fb      	ldrh	r3, [r7, #6]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d901      	bls.n	800d6ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d6ea:	88fb      	ldrh	r3, [r7, #6]
 800d6ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d6ee:	8b7b      	ldrh	r3, [r7, #26]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	18d0      	adds	r0, r2, r3
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	685a      	ldr	r2, [r3, #4]
 800d6f8:	88bb      	ldrh	r3, [r7, #4]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	8b3a      	ldrh	r2, [r7, #24]
 800d6fe:	4619      	mov	r1, r3
 800d700:	f009 f869 	bl	80167d6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d704:	8afa      	ldrh	r2, [r7, #22]
 800d706:	8b3b      	ldrh	r3, [r7, #24]
 800d708:	4413      	add	r3, r2
 800d70a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d70c:	8b7a      	ldrh	r2, [r7, #26]
 800d70e:	8b3b      	ldrh	r3, [r7, #24]
 800d710:	4413      	add	r3, r2
 800d712:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d714:	88fa      	ldrh	r2, [r7, #6]
 800d716:	8b3b      	ldrh	r3, [r7, #24]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	61fb      	str	r3, [r7, #28]
 800d726:	88fb      	ldrh	r3, [r7, #6]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <pbuf_copy_partial+0xca>
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1c4      	bne.n	800d6bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d732:	8afb      	ldrh	r3, [r7, #22]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3720      	adds	r7, #32
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	0801aab8 	.word	0x0801aab8
 800d740:	0801ae00 	.word	0x0801ae00
 800d744:	0801ab18 	.word	0x0801ab18
 800d748:	0801ae20 	.word	0x0801ae20

0800d74c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	4603      	mov	r3, r0
 800d754:	603a      	str	r2, [r7, #0]
 800d756:	71fb      	strb	r3, [r7, #7]
 800d758:	460b      	mov	r3, r1
 800d75a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	8919      	ldrh	r1, [r3, #8]
 800d760:	88ba      	ldrh	r2, [r7, #4]
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff faa5 	bl	800ccb4 <pbuf_alloc>
 800d76a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d101      	bne.n	800d776 <pbuf_clone+0x2a>
    return NULL;
 800d772:	2300      	movs	r3, #0
 800d774:	e011      	b.n	800d79a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7ff fea3 	bl	800d4c4 <pbuf_copy>
 800d77e:	4603      	mov	r3, r0
 800d780:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d782:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d006      	beq.n	800d798 <pbuf_clone+0x4c>
 800d78a:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <pbuf_clone+0x58>)
 800d78c:	f240 5224 	movw	r2, #1316	; 0x524
 800d790:	4905      	ldr	r1, [pc, #20]	; (800d7a8 <pbuf_clone+0x5c>)
 800d792:	4806      	ldr	r0, [pc, #24]	; (800d7ac <pbuf_clone+0x60>)
 800d794:	f009 f8e4 	bl	8016960 <iprintf>
  return q;
 800d798:	68fb      	ldr	r3, [r7, #12]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	0801aab8 	.word	0x0801aab8
 800d7a8:	0801af2c 	.word	0x0801af2c
 800d7ac:	0801ab18 	.word	0x0801ab18

0800d7b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d7b4:	f009 f8ec 	bl	8016990 <rand>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	4b01      	ldr	r3, [pc, #4]	; (800d7d0 <tcp_init+0x20>)
 800d7ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d7cc:	bf00      	nop
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20000024 	.word	0x20000024

0800d7d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7d1b      	ldrb	r3, [r3, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d105      	bne.n	800d7f0 <tcp_free+0x1c>
 800d7e4:	4b06      	ldr	r3, [pc, #24]	; (800d800 <tcp_free+0x2c>)
 800d7e6:	22d4      	movs	r2, #212	; 0xd4
 800d7e8:	4906      	ldr	r1, [pc, #24]	; (800d804 <tcp_free+0x30>)
 800d7ea:	4807      	ldr	r0, [pc, #28]	; (800d808 <tcp_free+0x34>)
 800d7ec:	f009 f8b8 	bl	8016960 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d7f0:	6879      	ldr	r1, [r7, #4]
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	f7fe fea2 	bl	800c53c <memp_free>
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	0801afb8 	.word	0x0801afb8
 800d804:	0801afe8 	.word	0x0801afe8
 800d808:	0801affc 	.word	0x0801affc

0800d80c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7d1b      	ldrb	r3, [r3, #20]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d105      	bne.n	800d828 <tcp_free_listen+0x1c>
 800d81c:	4b06      	ldr	r3, [pc, #24]	; (800d838 <tcp_free_listen+0x2c>)
 800d81e:	22df      	movs	r2, #223	; 0xdf
 800d820:	4906      	ldr	r1, [pc, #24]	; (800d83c <tcp_free_listen+0x30>)
 800d822:	4807      	ldr	r0, [pc, #28]	; (800d840 <tcp_free_listen+0x34>)
 800d824:	f009 f89c 	bl	8016960 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	2001      	movs	r0, #1
 800d82c:	f7fe fe86 	bl	800c53c <memp_free>
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0801afb8 	.word	0x0801afb8
 800d83c:	0801b024 	.word	0x0801b024
 800d840:	0801affc 	.word	0x0801affc

0800d844 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d848:	f001 f8f4 	bl	800ea34 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d84c:	4b07      	ldr	r3, [pc, #28]	; (800d86c <tcp_tmr+0x28>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	b2da      	uxtb	r2, r3
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <tcp_tmr+0x28>)
 800d856:	701a      	strb	r2, [r3, #0]
 800d858:	4b04      	ldr	r3, [pc, #16]	; (800d86c <tcp_tmr+0x28>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d864:	f000 fda6 	bl	800e3b4 <tcp_slowtmr>
  }
}
 800d868:	bf00      	nop
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	20011b5d 	.word	0x20011b5d

0800d870 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d105      	bne.n	800d88c <tcp_remove_listener+0x1c>
 800d880:	4b0d      	ldr	r3, [pc, #52]	; (800d8b8 <tcp_remove_listener+0x48>)
 800d882:	22ff      	movs	r2, #255	; 0xff
 800d884:	490d      	ldr	r1, [pc, #52]	; (800d8bc <tcp_remove_listener+0x4c>)
 800d886:	480e      	ldr	r0, [pc, #56]	; (800d8c0 <tcp_remove_listener+0x50>)
 800d888:	f009 f86a 	bl	8016960 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e00a      	b.n	800d8a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d102      	bne.n	800d8a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f1      	bne.n	800d892 <tcp_remove_listener+0x22>
    }
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	0801afb8 	.word	0x0801afb8
 800d8bc:	0801b040 	.word	0x0801b040
 800d8c0:	0801affc 	.word	0x0801affc

0800d8c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <tcp_listen_closed+0x1c>
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <tcp_listen_closed+0x60>)
 800d8d4:	f240 1211 	movw	r2, #273	; 0x111
 800d8d8:	4913      	ldr	r1, [pc, #76]	; (800d928 <tcp_listen_closed+0x64>)
 800d8da:	4814      	ldr	r0, [pc, #80]	; (800d92c <tcp_listen_closed+0x68>)
 800d8dc:	f009 f840 	bl	8016960 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7d1b      	ldrb	r3, [r3, #20]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d006      	beq.n	800d8f6 <tcp_listen_closed+0x32>
 800d8e8:	4b0e      	ldr	r3, [pc, #56]	; (800d924 <tcp_listen_closed+0x60>)
 800d8ea:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d8ee:	4910      	ldr	r1, [pc, #64]	; (800d930 <tcp_listen_closed+0x6c>)
 800d8f0:	480e      	ldr	r0, [pc, #56]	; (800d92c <tcp_listen_closed+0x68>)
 800d8f2:	f009 f835 	bl	8016960 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	60fb      	str	r3, [r7, #12]
 800d8fa:	e00b      	b.n	800d914 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d8fc:	4a0d      	ldr	r2, [pc, #52]	; (800d934 <tcp_listen_closed+0x70>)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	6879      	ldr	r1, [r7, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7ff ffb1 	bl	800d870 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3301      	adds	r3, #1
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b03      	cmp	r3, #3
 800d918:	d9f0      	bls.n	800d8fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d91a:	bf00      	nop
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	0801afb8 	.word	0x0801afb8
 800d928:	0801b068 	.word	0x0801b068
 800d92c:	0801affc 	.word	0x0801affc
 800d930:	0801b074 	.word	0x0801b074
 800d934:	0801ccd4 	.word	0x0801ccd4

0800d938 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d938:	b5b0      	push	{r4, r5, r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af04      	add	r7, sp, #16
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_close_shutdown+0x20>
 800d94a:	4b63      	ldr	r3, [pc, #396]	; (800dad8 <tcp_close_shutdown+0x1a0>)
 800d94c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d950:	4962      	ldr	r1, [pc, #392]	; (800dadc <tcp_close_shutdown+0x1a4>)
 800d952:	4863      	ldr	r0, [pc, #396]	; (800dae0 <tcp_close_shutdown+0x1a8>)
 800d954:	f009 f804 	bl	8016960 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d066      	beq.n	800da2c <tcp_close_shutdown+0xf4>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7d1b      	ldrb	r3, [r3, #20]
 800d962:	2b04      	cmp	r3, #4
 800d964:	d003      	beq.n	800d96e <tcp_close_shutdown+0x36>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	7d1b      	ldrb	r3, [r3, #20]
 800d96a:	2b07      	cmp	r3, #7
 800d96c:	d15e      	bne.n	800da2c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d972:	2b00      	cmp	r3, #0
 800d974:	d104      	bne.n	800d980 <tcp_close_shutdown+0x48>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d97a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d97e:	d055      	beq.n	800da2c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	8b5b      	ldrh	r3, [r3, #26]
 800d984:	f003 0310 	and.w	r3, r3, #16
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <tcp_close_shutdown+0x62>
 800d98c:	4b52      	ldr	r3, [pc, #328]	; (800dad8 <tcp_close_shutdown+0x1a0>)
 800d98e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d992:	4954      	ldr	r1, [pc, #336]	; (800dae4 <tcp_close_shutdown+0x1ac>)
 800d994:	4852      	ldr	r0, [pc, #328]	; (800dae0 <tcp_close_shutdown+0x1a8>)
 800d996:	f008 ffe3 	bl	8016960 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d9a2:	687d      	ldr	r5, [r7, #4]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	8ad2      	ldrh	r2, [r2, #22]
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	8b09      	ldrh	r1, [r1, #24]
 800d9b0:	9102      	str	r1, [sp, #8]
 800d9b2:	9201      	str	r2, [sp, #4]
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f005 fe2b 	bl	8013618 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f001 fbe6 	bl	800f194 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d9c8:	4b47      	ldr	r3, [pc, #284]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d105      	bne.n	800d9de <tcp_close_shutdown+0xa6>
 800d9d2:	4b45      	ldr	r3, [pc, #276]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	4a43      	ldr	r2, [pc, #268]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9da:	6013      	str	r3, [r2, #0]
 800d9dc:	e013      	b.n	800da06 <tcp_close_shutdown+0xce>
 800d9de:	4b42      	ldr	r3, [pc, #264]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e00c      	b.n	800da00 <tcp_close_shutdown+0xc8>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d104      	bne.n	800d9fa <tcp_close_shutdown+0xc2>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68da      	ldr	r2, [r3, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	60da      	str	r2, [r3, #12]
 800d9f8:	e005      	b.n	800da06 <tcp_close_shutdown+0xce>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1ef      	bne.n	800d9e6 <tcp_close_shutdown+0xae>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	60da      	str	r2, [r3, #12]
 800da0c:	4b37      	ldr	r3, [pc, #220]	; (800daec <tcp_close_shutdown+0x1b4>)
 800da0e:	2201      	movs	r2, #1
 800da10:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800da12:	4b37      	ldr	r3, [pc, #220]	; (800daf0 <tcp_close_shutdown+0x1b8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d102      	bne.n	800da22 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800da1c:	f004 f87e 	bl	8011b1c <tcp_trigger_input_pcb_close>
 800da20:	e002      	b.n	800da28 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7ff fed6 	bl	800d7d4 <tcp_free>
      }
      return ERR_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	e050      	b.n	800dace <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	7d1b      	ldrb	r3, [r3, #20]
 800da30:	2b02      	cmp	r3, #2
 800da32:	d03b      	beq.n	800daac <tcp_close_shutdown+0x174>
 800da34:	2b02      	cmp	r3, #2
 800da36:	dc44      	bgt.n	800dac2 <tcp_close_shutdown+0x18a>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <tcp_close_shutdown+0x10a>
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d02a      	beq.n	800da96 <tcp_close_shutdown+0x15e>
 800da40:	e03f      	b.n	800dac2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8adb      	ldrh	r3, [r3, #22]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d021      	beq.n	800da8e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da4a:	4b2a      	ldr	r3, [pc, #168]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d105      	bne.n	800da60 <tcp_close_shutdown+0x128>
 800da54:	4b27      	ldr	r3, [pc, #156]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	4a26      	ldr	r2, [pc, #152]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	e013      	b.n	800da88 <tcp_close_shutdown+0x150>
 800da60:	4b24      	ldr	r3, [pc, #144]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60bb      	str	r3, [r7, #8]
 800da66:	e00c      	b.n	800da82 <tcp_close_shutdown+0x14a>
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d104      	bne.n	800da7c <tcp_close_shutdown+0x144>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	60da      	str	r2, [r3, #12]
 800da7a:	e005      	b.n	800da88 <tcp_close_shutdown+0x150>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	60bb      	str	r3, [r7, #8]
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1ef      	bne.n	800da68 <tcp_close_shutdown+0x130>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff fea0 	bl	800d7d4 <tcp_free>
      break;
 800da94:	e01a      	b.n	800dacc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff ff14 	bl	800d8c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da9c:	6879      	ldr	r1, [r7, #4]
 800da9e:	4816      	ldr	r0, [pc, #88]	; (800daf8 <tcp_close_shutdown+0x1c0>)
 800daa0:	f001 fbc8 	bl	800f234 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff feb1 	bl	800d80c <tcp_free_listen>
      break;
 800daaa:	e00f      	b.n	800dacc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	480e      	ldr	r0, [pc, #56]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800dab0:	f001 fbc0 	bl	800f234 <tcp_pcb_remove>
 800dab4:	4b0d      	ldr	r3, [pc, #52]	; (800daec <tcp_close_shutdown+0x1b4>)
 800dab6:	2201      	movs	r2, #1
 800dab8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff fe8a 	bl	800d7d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dac0:	e004      	b.n	800dacc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f81a 	bl	800dafc <tcp_close_shutdown_fin>
 800dac8:	4603      	mov	r3, r0
 800daca:	e000      	b.n	800dace <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bdb0      	pop	{r4, r5, r7, pc}
 800dad6:	bf00      	nop
 800dad8:	0801afb8 	.word	0x0801afb8
 800dadc:	0801b08c 	.word	0x0801b08c
 800dae0:	0801affc 	.word	0x0801affc
 800dae4:	0801b0ac 	.word	0x0801b0ac
 800dae8:	20011b54 	.word	0x20011b54
 800daec:	20011b5c 	.word	0x20011b5c
 800daf0:	20011b94 	.word	0x20011b94
 800daf4:	20011b4c 	.word	0x20011b4c
 800daf8:	20011b50 	.word	0x20011b50

0800dafc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <tcp_close_shutdown_fin+0x1c>
 800db0a:	4b2e      	ldr	r3, [pc, #184]	; (800dbc4 <tcp_close_shutdown_fin+0xc8>)
 800db0c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800db10:	492d      	ldr	r1, [pc, #180]	; (800dbc8 <tcp_close_shutdown_fin+0xcc>)
 800db12:	482e      	ldr	r0, [pc, #184]	; (800dbcc <tcp_close_shutdown_fin+0xd0>)
 800db14:	f008 ff24 	bl	8016960 <iprintf>

  switch (pcb->state) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	d020      	beq.n	800db62 <tcp_close_shutdown_fin+0x66>
 800db20:	2b07      	cmp	r3, #7
 800db22:	dc2b      	bgt.n	800db7c <tcp_close_shutdown_fin+0x80>
 800db24:	2b03      	cmp	r3, #3
 800db26:	d002      	beq.n	800db2e <tcp_close_shutdown_fin+0x32>
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d00d      	beq.n	800db48 <tcp_close_shutdown_fin+0x4c>
 800db2c:	e026      	b.n	800db7c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f004 fe5e 	bl	80127f0 <tcp_send_fin>
 800db34:	4603      	mov	r3, r0
 800db36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d11f      	bne.n	800db80 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2205      	movs	r2, #5
 800db44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db46:	e01b      	b.n	800db80 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f004 fe51 	bl	80127f0 <tcp_send_fin>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d114      	bne.n	800db84 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2205      	movs	r2, #5
 800db5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db60:	e010      	b.n	800db84 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f004 fe44 	bl	80127f0 <tcp_send_fin>
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d109      	bne.n	800db88 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2209      	movs	r2, #9
 800db78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db7a:	e005      	b.n	800db88 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	e01c      	b.n	800dbba <tcp_close_shutdown_fin+0xbe>
      break;
 800db80:	bf00      	nop
 800db82:	e002      	b.n	800db8a <tcp_close_shutdown_fin+0x8e>
      break;
 800db84:	bf00      	nop
 800db86:	e000      	b.n	800db8a <tcp_close_shutdown_fin+0x8e>
      break;
 800db88:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d103      	bne.n	800db9a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f004 ff6a 	bl	8012a6c <tcp_output>
 800db98:	e00d      	b.n	800dbb6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dba2:	d108      	bne.n	800dbb6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8b5b      	ldrh	r3, [r3, #26]
 800dba8:	f043 0308 	orr.w	r3, r3, #8
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e001      	b.n	800dbba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	0801afb8 	.word	0x0801afb8
 800dbc8:	0801b068 	.word	0x0801b068
 800dbcc:	0801affc 	.word	0x0801affc

0800dbd0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d109      	bne.n	800dbf2 <tcp_close+0x22>
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <tcp_close+0x4c>)
 800dbe0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dbe4:	490e      	ldr	r1, [pc, #56]	; (800dc20 <tcp_close+0x50>)
 800dbe6:	480f      	ldr	r0, [pc, #60]	; (800dc24 <tcp_close+0x54>)
 800dbe8:	f008 feba 	bl	8016960 <iprintf>
 800dbec:	f06f 030f 	mvn.w	r3, #15
 800dbf0:	e00f      	b.n	800dc12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7d1b      	ldrb	r3, [r3, #20]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d006      	beq.n	800dc08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	8b5b      	ldrh	r3, [r3, #26]
 800dbfe:	f043 0310 	orr.w	r3, r3, #16
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dc08:	2101      	movs	r1, #1
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7ff fe94 	bl	800d938 <tcp_close_shutdown>
 800dc10:	4603      	mov	r3, r0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0801afb8 	.word	0x0801afb8
 800dc20:	0801b0c8 	.word	0x0801b0c8
 800dc24:	0801affc 	.word	0x0801affc

0800dc28 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d109      	bne.n	800dc4e <tcp_shutdown+0x26>
 800dc3a:	4b26      	ldr	r3, [pc, #152]	; (800dcd4 <tcp_shutdown+0xac>)
 800dc3c:	f240 2207 	movw	r2, #519	; 0x207
 800dc40:	4925      	ldr	r1, [pc, #148]	; (800dcd8 <tcp_shutdown+0xb0>)
 800dc42:	4826      	ldr	r0, [pc, #152]	; (800dcdc <tcp_shutdown+0xb4>)
 800dc44:	f008 fe8c 	bl	8016960 <iprintf>
 800dc48:	f06f 030f 	mvn.w	r3, #15
 800dc4c:	e03d      	b.n	800dcca <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	7d1b      	ldrb	r3, [r3, #20]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d102      	bne.n	800dc5c <tcp_shutdown+0x34>
    return ERR_CONN;
 800dc56:	f06f 030a 	mvn.w	r3, #10
 800dc5a:	e036      	b.n	800dcca <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d01b      	beq.n	800dc9a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	8b5b      	ldrh	r3, [r3, #26]
 800dc66:	f043 0310 	orr.w	r3, r3, #16
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d005      	beq.n	800dc82 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dc76:	2101      	movs	r1, #1
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f7ff fe5d 	bl	800d938 <tcp_close_shutdown>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	e023      	b.n	800dcca <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d007      	beq.n	800dc9a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff faf4 	bl	800d27c <pbuf_free>
      pcb->refused_data = NULL;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d013      	beq.n	800dcc8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	7d1b      	ldrb	r3, [r3, #20]
 800dca4:	2b04      	cmp	r3, #4
 800dca6:	dc02      	bgt.n	800dcae <tcp_shutdown+0x86>
 800dca8:	2b03      	cmp	r3, #3
 800dcaa:	da02      	bge.n	800dcb2 <tcp_shutdown+0x8a>
 800dcac:	e009      	b.n	800dcc2 <tcp_shutdown+0x9a>
 800dcae:	2b07      	cmp	r3, #7
 800dcb0:	d107      	bne.n	800dcc2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f7ff fe3d 	bl	800d938 <tcp_close_shutdown>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	e003      	b.n	800dcca <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dcc2:	f06f 030a 	mvn.w	r3, #10
 800dcc6:	e000      	b.n	800dcca <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	0801afb8 	.word	0x0801afb8
 800dcd8:	0801b0e0 	.word	0x0801b0e0
 800dcdc:	0801affc 	.word	0x0801affc

0800dce0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b08e      	sub	sp, #56	; 0x38
 800dce4:	af04      	add	r7, sp, #16
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d107      	bne.n	800dd00 <tcp_abandon+0x20>
 800dcf0:	4b52      	ldr	r3, [pc, #328]	; (800de3c <tcp_abandon+0x15c>)
 800dcf2:	f240 223d 	movw	r2, #573	; 0x23d
 800dcf6:	4952      	ldr	r1, [pc, #328]	; (800de40 <tcp_abandon+0x160>)
 800dcf8:	4852      	ldr	r0, [pc, #328]	; (800de44 <tcp_abandon+0x164>)
 800dcfa:	f008 fe31 	bl	8016960 <iprintf>
 800dcfe:	e099      	b.n	800de34 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d106      	bne.n	800dd16 <tcp_abandon+0x36>
 800dd08:	4b4c      	ldr	r3, [pc, #304]	; (800de3c <tcp_abandon+0x15c>)
 800dd0a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd0e:	494e      	ldr	r1, [pc, #312]	; (800de48 <tcp_abandon+0x168>)
 800dd10:	484c      	ldr	r0, [pc, #304]	; (800de44 <tcp_abandon+0x164>)
 800dd12:	f008 fe25 	bl	8016960 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	7d1b      	ldrb	r3, [r3, #20]
 800dd1a:	2b0a      	cmp	r3, #10
 800dd1c:	d107      	bne.n	800dd2e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	484a      	ldr	r0, [pc, #296]	; (800de4c <tcp_abandon+0x16c>)
 800dd22:	f001 fa87 	bl	800f234 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff fd54 	bl	800d7d4 <tcp_free>
 800dd2c:	e082      	b.n	800de34 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd3a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd48:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	7d1b      	ldrb	r3, [r3, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d126      	bne.n	800dda6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	8adb      	ldrh	r3, [r3, #22]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d02e      	beq.n	800ddbe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd60:	4b3b      	ldr	r3, [pc, #236]	; (800de50 <tcp_abandon+0x170>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d105      	bne.n	800dd76 <tcp_abandon+0x96>
 800dd6a:	4b39      	ldr	r3, [pc, #228]	; (800de50 <tcp_abandon+0x170>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	4a37      	ldr	r2, [pc, #220]	; (800de50 <tcp_abandon+0x170>)
 800dd72:	6013      	str	r3, [r2, #0]
 800dd74:	e013      	b.n	800dd9e <tcp_abandon+0xbe>
 800dd76:	4b36      	ldr	r3, [pc, #216]	; (800de50 <tcp_abandon+0x170>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	61fb      	str	r3, [r7, #28]
 800dd7c:	e00c      	b.n	800dd98 <tcp_abandon+0xb8>
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d104      	bne.n	800dd92 <tcp_abandon+0xb2>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68da      	ldr	r2, [r3, #12]
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	60da      	str	r2, [r3, #12]
 800dd90:	e005      	b.n	800dd9e <tcp_abandon+0xbe>
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	61fb      	str	r3, [r7, #28]
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1ef      	bne.n	800dd7e <tcp_abandon+0x9e>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	60da      	str	r2, [r3, #12]
 800dda4:	e00b      	b.n	800ddbe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	8adb      	ldrh	r3, [r3, #22]
 800ddae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	4828      	ldr	r0, [pc, #160]	; (800de54 <tcp_abandon+0x174>)
 800ddb4:	f001 fa3e 	bl	800f234 <tcp_pcb_remove>
 800ddb8:	4b27      	ldr	r3, [pc, #156]	; (800de58 <tcp_abandon+0x178>)
 800ddba:	2201      	movs	r2, #1
 800ddbc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d004      	beq.n	800ddd0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 ff12 	bl	800ebf4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 ff09 	bl	800ebf4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d004      	beq.n	800ddf4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 ff00 	bl	800ebf4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00e      	beq.n	800de18 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	3304      	adds	r3, #4
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	8b12      	ldrh	r2, [r2, #24]
 800de04:	9202      	str	r2, [sp, #8]
 800de06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de08:	9201      	str	r2, [sp, #4]
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	460b      	mov	r3, r1
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	69b9      	ldr	r1, [r7, #24]
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f005 fc00 	bl	8013618 <tcp_rst>
    }
    last_state = pcb->state;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	7d1b      	ldrb	r3, [r3, #20]
 800de1c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff fcd8 	bl	800d7d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d004      	beq.n	800de34 <tcp_abandon+0x154>
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f06f 010c 	mvn.w	r1, #12
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	4798      	blx	r3
  }
}
 800de34:	3728      	adds	r7, #40	; 0x28
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	0801afb8 	.word	0x0801afb8
 800de40:	0801b0fc 	.word	0x0801b0fc
 800de44:	0801affc 	.word	0x0801affc
 800de48:	0801b118 	.word	0x0801b118
 800de4c:	20011b58 	.word	0x20011b58
 800de50:	20011b4c 	.word	0x20011b4c
 800de54:	20011b54 	.word	0x20011b54
 800de58:	20011b5c 	.word	0x20011b5c

0800de5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de64:	2101      	movs	r1, #1
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff ff3a 	bl	800dce0 <tcp_abandon>
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b088      	sub	sp, #32
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	4613      	mov	r3, r2
 800de80:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de82:	2304      	movs	r3, #4
 800de84:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de8c:	4b3e      	ldr	r3, [pc, #248]	; (800df88 <tcp_bind+0x114>)
 800de8e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d109      	bne.n	800deaa <tcp_bind+0x36>
 800de96:	4b3d      	ldr	r3, [pc, #244]	; (800df8c <tcp_bind+0x118>)
 800de98:	f240 22a9 	movw	r2, #681	; 0x2a9
 800de9c:	493c      	ldr	r1, [pc, #240]	; (800df90 <tcp_bind+0x11c>)
 800de9e:	483d      	ldr	r0, [pc, #244]	; (800df94 <tcp_bind+0x120>)
 800dea0:	f008 fd5e 	bl	8016960 <iprintf>
 800dea4:	f06f 030f 	mvn.w	r3, #15
 800dea8:	e06a      	b.n	800df80 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	7d1b      	ldrb	r3, [r3, #20]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d009      	beq.n	800dec6 <tcp_bind+0x52>
 800deb2:	4b36      	ldr	r3, [pc, #216]	; (800df8c <tcp_bind+0x118>)
 800deb4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800deb8:	4937      	ldr	r1, [pc, #220]	; (800df98 <tcp_bind+0x124>)
 800deba:	4836      	ldr	r0, [pc, #216]	; (800df94 <tcp_bind+0x120>)
 800debc:	f008 fd50 	bl	8016960 <iprintf>
 800dec0:	f06f 0305 	mvn.w	r3, #5
 800dec4:	e05c      	b.n	800df80 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dec6:	88fb      	ldrh	r3, [r7, #6]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d109      	bne.n	800dee0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800decc:	f000 f914 	bl	800e0f8 <tcp_new_port>
 800ded0:	4603      	mov	r3, r0
 800ded2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ded4:	88fb      	ldrh	r3, [r7, #6]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d135      	bne.n	800df46 <tcp_bind+0xd2>
      return ERR_BUF;
 800deda:	f06f 0301 	mvn.w	r3, #1
 800dede:	e04f      	b.n	800df80 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dee0:	2300      	movs	r3, #0
 800dee2:	61fb      	str	r3, [r7, #28]
 800dee4:	e02b      	b.n	800df3e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dee6:	4a2d      	ldr	r2, [pc, #180]	; (800df9c <tcp_bind+0x128>)
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	61bb      	str	r3, [r7, #24]
 800def2:	e01e      	b.n	800df32 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	8adb      	ldrh	r3, [r3, #22]
 800def8:	88fa      	ldrh	r2, [r7, #6]
 800defa:	429a      	cmp	r2, r3
 800defc:	d116      	bne.n	800df2c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800defe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df00:	2b00      	cmp	r3, #0
 800df02:	d010      	beq.n	800df26 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00c      	beq.n	800df26 <tcp_bind+0xb2>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d009      	beq.n	800df26 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d005      	beq.n	800df26 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df22:	429a      	cmp	r2, r3
 800df24:	d102      	bne.n	800df2c <tcp_bind+0xb8>
              return ERR_USE;
 800df26:	f06f 0307 	mvn.w	r3, #7
 800df2a:	e029      	b.n	800df80 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1dd      	bne.n	800def4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	3301      	adds	r3, #1
 800df3c:	61fb      	str	r3, [r7, #28]
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	429a      	cmp	r2, r3
 800df44:	dbcf      	blt.n	800dee6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00c      	beq.n	800df66 <tcp_bind+0xf2>
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d008      	beq.n	800df66 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <tcp_bind+0xec>
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	e000      	b.n	800df62 <tcp_bind+0xee>
 800df60:	2300      	movs	r3, #0
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	88fa      	ldrh	r2, [r7, #6]
 800df6a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df6c:	4b0c      	ldr	r3, [pc, #48]	; (800dfa0 <tcp_bind+0x12c>)
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	60da      	str	r2, [r3, #12]
 800df74:	4a0a      	ldr	r2, [pc, #40]	; (800dfa0 <tcp_bind+0x12c>)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6013      	str	r3, [r2, #0]
 800df7a:	f005 fd0f 	bl	801399c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3720      	adds	r7, #32
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0801ccfc 	.word	0x0801ccfc
 800df8c:	0801afb8 	.word	0x0801afb8
 800df90:	0801b14c 	.word	0x0801b14c
 800df94:	0801affc 	.word	0x0801affc
 800df98:	0801b164 	.word	0x0801b164
 800df9c:	0801ccd4 	.word	0x0801ccd4
 800dfa0:	20011b4c 	.word	0x20011b4c

0800dfa4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <tcp_update_rcv_ann_wnd+0x1c>
 800dfb2:	4b25      	ldr	r3, [pc, #148]	; (800e048 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfb4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dfb8:	4924      	ldr	r1, [pc, #144]	; (800e04c <tcp_update_rcv_ann_wnd+0xa8>)
 800dfba:	4825      	ldr	r0, [pc, #148]	; (800e050 <tcp_update_rcv_ann_wnd+0xac>)
 800dfbc:	f008 fcd0 	bl	8016960 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfc8:	4413      	add	r3, r2
 800dfca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dfd4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dfd8:	bf28      	it	cs
 800dfda:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dfde:	b292      	uxth	r2, r2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	db08      	blt.n	800dffc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	e020      	b.n	800e03e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	2b00      	cmp	r3, #0
 800e008:	dd03      	ble.n	800e012 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e010:	e014      	b.n	800e03c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e024:	d306      	bcc.n	800e034 <tcp_update_rcv_ann_wnd+0x90>
 800e026:	4b08      	ldr	r3, [pc, #32]	; (800e048 <tcp_update_rcv_ann_wnd+0xa4>)
 800e028:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e02c:	4909      	ldr	r1, [pc, #36]	; (800e054 <tcp_update_rcv_ann_wnd+0xb0>)
 800e02e:	4808      	ldr	r0, [pc, #32]	; (800e050 <tcp_update_rcv_ann_wnd+0xac>)
 800e030:	f008 fc96 	bl	8016960 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	b29a      	uxth	r2, r3
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e03c:	2300      	movs	r3, #0
  }
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	0801afb8 	.word	0x0801afb8
 800e04c:	0801b214 	.word	0x0801b214
 800e050:	0801affc 	.word	0x0801affc
 800e054:	0801b238 	.word	0x0801b238

0800e058 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d107      	bne.n	800e07a <tcp_recved+0x22>
 800e06a:	4b1f      	ldr	r3, [pc, #124]	; (800e0e8 <tcp_recved+0x90>)
 800e06c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e070:	491e      	ldr	r1, [pc, #120]	; (800e0ec <tcp_recved+0x94>)
 800e072:	481f      	ldr	r0, [pc, #124]	; (800e0f0 <tcp_recved+0x98>)
 800e074:	f008 fc74 	bl	8016960 <iprintf>
 800e078:	e032      	b.n	800e0e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7d1b      	ldrb	r3, [r3, #20]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d106      	bne.n	800e090 <tcp_recved+0x38>
 800e082:	4b19      	ldr	r3, [pc, #100]	; (800e0e8 <tcp_recved+0x90>)
 800e084:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e088:	491a      	ldr	r1, [pc, #104]	; (800e0f4 <tcp_recved+0x9c>)
 800e08a:	4819      	ldr	r0, [pc, #100]	; (800e0f0 <tcp_recved+0x98>)
 800e08c:	f008 fc68 	bl	8016960 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e094:	887b      	ldrh	r3, [r7, #2]
 800e096:	4413      	add	r3, r2
 800e098:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e09a:	89fb      	ldrh	r3, [r7, #14]
 800e09c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0a0:	d804      	bhi.n	800e0ac <tcp_recved+0x54>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0a6:	89fa      	ldrh	r2, [r7, #14]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d204      	bcs.n	800e0b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0b2:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0b4:	e002      	b.n	800e0bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	89fa      	ldrh	r2, [r7, #14]
 800e0ba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff ff71 	bl	800dfa4 <tcp_update_rcv_ann_wnd>
 800e0c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0ca:	d309      	bcc.n	800e0e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	8b5b      	ldrh	r3, [r3, #26]
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f004 fcc6 	bl	8012a6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	0801afb8 	.word	0x0801afb8
 800e0ec:	0801b254 	.word	0x0801b254
 800e0f0:	0801affc 	.word	0x0801affc
 800e0f4:	0801b26c 	.word	0x0801b26c

0800e0f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e0fe:	2300      	movs	r3, #0
 800e100:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e102:	4b1e      	ldr	r3, [pc, #120]	; (800e17c <tcp_new_port+0x84>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	3301      	adds	r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	4b1c      	ldr	r3, [pc, #112]	; (800e17c <tcp_new_port+0x84>)
 800e10c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e10e:	4b1b      	ldr	r3, [pc, #108]	; (800e17c <tcp_new_port+0x84>)
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e116:	4293      	cmp	r3, r2
 800e118:	d103      	bne.n	800e122 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e11a:	4b18      	ldr	r3, [pc, #96]	; (800e17c <tcp_new_port+0x84>)
 800e11c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e120:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e122:	2300      	movs	r3, #0
 800e124:	71fb      	strb	r3, [r7, #7]
 800e126:	e01e      	b.n	800e166 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	4a15      	ldr	r2, [pc, #84]	; (800e180 <tcp_new_port+0x88>)
 800e12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	e011      	b.n	800e15a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	8ada      	ldrh	r2, [r3, #22]
 800e13a:	4b10      	ldr	r3, [pc, #64]	; (800e17c <tcp_new_port+0x84>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d108      	bne.n	800e154 <tcp_new_port+0x5c>
        n++;
 800e142:	88bb      	ldrh	r3, [r7, #4]
 800e144:	3301      	adds	r3, #1
 800e146:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e148:	88bb      	ldrh	r3, [r7, #4]
 800e14a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e14e:	d3d8      	bcc.n	800e102 <tcp_new_port+0xa>
          return 0;
 800e150:	2300      	movs	r3, #0
 800e152:	e00d      	b.n	800e170 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	603b      	str	r3, [r7, #0]
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1ea      	bne.n	800e136 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	3301      	adds	r3, #1
 800e164:	71fb      	strb	r3, [r7, #7]
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d9dd      	bls.n	800e128 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e16c:	4b03      	ldr	r3, [pc, #12]	; (800e17c <tcp_new_port+0x84>)
 800e16e:	881b      	ldrh	r3, [r3, #0]
}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	20000024 	.word	0x20000024
 800e180:	0801ccd4 	.word	0x0801ccd4

0800e184 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08a      	sub	sp, #40	; 0x28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	4613      	mov	r3, r2
 800e192:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d109      	bne.n	800e1b2 <tcp_connect+0x2e>
 800e19e:	4b7d      	ldr	r3, [pc, #500]	; (800e394 <tcp_connect+0x210>)
 800e1a0:	f240 4235 	movw	r2, #1077	; 0x435
 800e1a4:	497c      	ldr	r1, [pc, #496]	; (800e398 <tcp_connect+0x214>)
 800e1a6:	487d      	ldr	r0, [pc, #500]	; (800e39c <tcp_connect+0x218>)
 800e1a8:	f008 fbda 	bl	8016960 <iprintf>
 800e1ac:	f06f 030f 	mvn.w	r3, #15
 800e1b0:	e0ec      	b.n	800e38c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <tcp_connect+0x48>
 800e1b8:	4b76      	ldr	r3, [pc, #472]	; (800e394 <tcp_connect+0x210>)
 800e1ba:	f240 4236 	movw	r2, #1078	; 0x436
 800e1be:	4978      	ldr	r1, [pc, #480]	; (800e3a0 <tcp_connect+0x21c>)
 800e1c0:	4876      	ldr	r0, [pc, #472]	; (800e39c <tcp_connect+0x218>)
 800e1c2:	f008 fbcd 	bl	8016960 <iprintf>
 800e1c6:	f06f 030f 	mvn.w	r3, #15
 800e1ca:	e0df      	b.n	800e38c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	7d1b      	ldrb	r3, [r3, #20]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d009      	beq.n	800e1e8 <tcp_connect+0x64>
 800e1d4:	4b6f      	ldr	r3, [pc, #444]	; (800e394 <tcp_connect+0x210>)
 800e1d6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e1da:	4972      	ldr	r1, [pc, #456]	; (800e3a4 <tcp_connect+0x220>)
 800e1dc:	486f      	ldr	r0, [pc, #444]	; (800e39c <tcp_connect+0x218>)
 800e1de:	f008 fbbf 	bl	8016960 <iprintf>
 800e1e2:	f06f 0309 	mvn.w	r3, #9
 800e1e6:	e0d1      	b.n	800e38c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <tcp_connect+0x70>
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	e000      	b.n	800e1f6 <tcp_connect+0x72>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	88fa      	ldrh	r2, [r7, #6]
 800e1fe:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	7a1b      	ldrb	r3, [r3, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d006      	beq.n	800e216 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	7a1b      	ldrb	r3, [r3, #8]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe fca7 	bl	800cb60 <netif_get_by_index>
 800e212:	6278      	str	r0, [r7, #36]	; 0x24
 800e214:	e005      	b.n	800e222 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3304      	adds	r3, #4
 800e21a:	4618      	mov	r0, r3
 800e21c:	f006 fe12 	bl	8014e44 <ip4_route>
 800e220:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	2b00      	cmp	r3, #0
 800e226:	d102      	bne.n	800e22e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e228:	f06f 0303 	mvn.w	r3, #3
 800e22c:	e0ae      	b.n	800e38c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d003      	beq.n	800e23c <tcp_connect+0xb8>
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d111      	bne.n	800e260 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <tcp_connect+0xc4>
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	3304      	adds	r3, #4
 800e246:	e000      	b.n	800e24a <tcp_connect+0xc6>
 800e248:	2300      	movs	r3, #0
 800e24a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <tcp_connect+0xd4>
      return ERR_RTE;
 800e252:	f06f 0303 	mvn.w	r3, #3
 800e256:	e099      	b.n	800e38c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	8adb      	ldrh	r3, [r3, #22]
 800e264:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	8adb      	ldrh	r3, [r3, #22]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10c      	bne.n	800e288 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e26e:	f7ff ff43 	bl	800e0f8 <tcp_new_port>
 800e272:	4603      	mov	r3, r0
 800e274:	461a      	mov	r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	8adb      	ldrh	r3, [r3, #22]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <tcp_connect+0x104>
      return ERR_BUF;
 800e282:	f06f 0301 	mvn.w	r3, #1
 800e286:	e081      	b.n	800e38c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f001 f867 	bl	800f35c <tcp_next_iss>
 800e28e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	1e5a      	subs	r2, r3, #1
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	1e5a      	subs	r2, r3, #1
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e2dc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2ea:	f001 f85d 	bl	800f3a8 <tcp_eff_send_mss_netif>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e306:	2102      	movs	r1, #2
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f004 fac1 	bl	8012890 <tcp_enqueue_flags>
 800e30e:	4603      	mov	r3, r0
 800e310:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e312:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d136      	bne.n	800e388 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2202      	movs	r2, #2
 800e31e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e320:	8b7b      	ldrh	r3, [r7, #26]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d021      	beq.n	800e36a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e326:	4b20      	ldr	r3, [pc, #128]	; (800e3a8 <tcp_connect+0x224>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d105      	bne.n	800e33c <tcp_connect+0x1b8>
 800e330:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <tcp_connect+0x224>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	4a1c      	ldr	r2, [pc, #112]	; (800e3a8 <tcp_connect+0x224>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	e013      	b.n	800e364 <tcp_connect+0x1e0>
 800e33c:	4b1a      	ldr	r3, [pc, #104]	; (800e3a8 <tcp_connect+0x224>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	623b      	str	r3, [r7, #32]
 800e342:	e00c      	b.n	800e35e <tcp_connect+0x1da>
 800e344:	6a3b      	ldr	r3, [r7, #32]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d104      	bne.n	800e358 <tcp_connect+0x1d4>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	60da      	str	r2, [r3, #12]
 800e356:	e005      	b.n	800e364 <tcp_connect+0x1e0>
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	623b      	str	r3, [r7, #32]
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1ef      	bne.n	800e344 <tcp_connect+0x1c0>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e36a:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <tcp_connect+0x228>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	4a0e      	ldr	r2, [pc, #56]	; (800e3ac <tcp_connect+0x228>)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	f005 fb10 	bl	801399c <tcp_timer_needed>
 800e37c:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <tcp_connect+0x22c>)
 800e37e:	2201      	movs	r2, #1
 800e380:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f004 fb72 	bl	8012a6c <tcp_output>
  }
  return ret;
 800e388:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3728      	adds	r7, #40	; 0x28
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	0801afb8 	.word	0x0801afb8
 800e398:	0801b294 	.word	0x0801b294
 800e39c:	0801affc 	.word	0x0801affc
 800e3a0:	0801b2b0 	.word	0x0801b2b0
 800e3a4:	0801b2cc 	.word	0x0801b2cc
 800e3a8:	20011b4c 	.word	0x20011b4c
 800e3ac:	20011b54 	.word	0x20011b54
 800e3b0:	20011b5c 	.word	0x20011b5c

0800e3b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3b4:	b5b0      	push	{r4, r5, r7, lr}
 800e3b6:	b090      	sub	sp, #64	; 0x40
 800e3b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e3c0:	4b94      	ldr	r3, [pc, #592]	; (800e614 <tcp_slowtmr+0x260>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	4a93      	ldr	r2, [pc, #588]	; (800e614 <tcp_slowtmr+0x260>)
 800e3c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e3ca:	4b93      	ldr	r3, [pc, #588]	; (800e618 <tcp_slowtmr+0x264>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	4b91      	ldr	r3, [pc, #580]	; (800e618 <tcp_slowtmr+0x264>)
 800e3d4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e3da:	4b90      	ldr	r3, [pc, #576]	; (800e61c <tcp_slowtmr+0x268>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e3e0:	e29d      	b.n	800e91e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	7d1b      	ldrb	r3, [r3, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d106      	bne.n	800e3f8 <tcp_slowtmr+0x44>
 800e3ea:	4b8d      	ldr	r3, [pc, #564]	; (800e620 <tcp_slowtmr+0x26c>)
 800e3ec:	f240 42be 	movw	r2, #1214	; 0x4be
 800e3f0:	498c      	ldr	r1, [pc, #560]	; (800e624 <tcp_slowtmr+0x270>)
 800e3f2:	488d      	ldr	r0, [pc, #564]	; (800e628 <tcp_slowtmr+0x274>)
 800e3f4:	f008 fab4 	bl	8016960 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	7d1b      	ldrb	r3, [r3, #20]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d106      	bne.n	800e40e <tcp_slowtmr+0x5a>
 800e400:	4b87      	ldr	r3, [pc, #540]	; (800e620 <tcp_slowtmr+0x26c>)
 800e402:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e406:	4989      	ldr	r1, [pc, #548]	; (800e62c <tcp_slowtmr+0x278>)
 800e408:	4887      	ldr	r0, [pc, #540]	; (800e628 <tcp_slowtmr+0x274>)
 800e40a:	f008 faa9 	bl	8016960 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	7d1b      	ldrb	r3, [r3, #20]
 800e412:	2b0a      	cmp	r3, #10
 800e414:	d106      	bne.n	800e424 <tcp_slowtmr+0x70>
 800e416:	4b82      	ldr	r3, [pc, #520]	; (800e620 <tcp_slowtmr+0x26c>)
 800e418:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e41c:	4984      	ldr	r1, [pc, #528]	; (800e630 <tcp_slowtmr+0x27c>)
 800e41e:	4882      	ldr	r0, [pc, #520]	; (800e628 <tcp_slowtmr+0x274>)
 800e420:	f008 fa9e 	bl	8016960 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	7f9a      	ldrb	r2, [r3, #30]
 800e428:	4b7b      	ldr	r3, [pc, #492]	; (800e618 <tcp_slowtmr+0x264>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d105      	bne.n	800e43c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e43a:	e270      	b.n	800e91e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e43c:	4b76      	ldr	r3, [pc, #472]	; (800e618 <tcp_slowtmr+0x264>)
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	7d1b      	ldrb	r3, [r3, #20]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d10a      	bne.n	800e46e <tcp_slowtmr+0xba>
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d905      	bls.n	800e46e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e466:	3301      	adds	r3, #1
 800e468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e46c:	e11e      	b.n	800e6ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e474:	2b0b      	cmp	r3, #11
 800e476:	d905      	bls.n	800e484 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e47c:	3301      	adds	r3, #1
 800e47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e482:	e113      	b.n	800e6ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d075      	beq.n	800e57a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e492:	2b00      	cmp	r3, #0
 800e494:	d006      	beq.n	800e4a4 <tcp_slowtmr+0xf0>
 800e496:	4b62      	ldr	r3, [pc, #392]	; (800e620 <tcp_slowtmr+0x26c>)
 800e498:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e49c:	4965      	ldr	r1, [pc, #404]	; (800e634 <tcp_slowtmr+0x280>)
 800e49e:	4862      	ldr	r0, [pc, #392]	; (800e628 <tcp_slowtmr+0x274>)
 800e4a0:	f008 fa5e 	bl	8016960 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d106      	bne.n	800e4ba <tcp_slowtmr+0x106>
 800e4ac:	4b5c      	ldr	r3, [pc, #368]	; (800e620 <tcp_slowtmr+0x26c>)
 800e4ae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4b2:	4961      	ldr	r1, [pc, #388]	; (800e638 <tcp_slowtmr+0x284>)
 800e4b4:	485c      	ldr	r0, [pc, #368]	; (800e628 <tcp_slowtmr+0x274>)
 800e4b6:	f008 fa53 	bl	8016960 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e4c0:	2b0b      	cmp	r3, #11
 800e4c2:	d905      	bls.n	800e4d0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ce:	e0ed      	b.n	800e6ac <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	4a58      	ldr	r2, [pc, #352]	; (800e63c <tcp_slowtmr+0x288>)
 800e4da:	5cd3      	ldrb	r3, [r2, r3]
 800e4dc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4e4:	7c7a      	ldrb	r2, [r7, #17]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d907      	bls.n	800e4fa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e500:	7c7a      	ldrb	r2, [r7, #17]
 800e502:	429a      	cmp	r2, r3
 800e504:	f200 80d2 	bhi.w	800e6ac <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e508:	2301      	movs	r3, #1
 800e50a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e512:	2b00      	cmp	r3, #0
 800e514:	d108      	bne.n	800e528 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e518:	f005 f972 	bl	8013800 <tcp_zero_window_probe>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d014      	beq.n	800e54c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e522:	2300      	movs	r3, #0
 800e524:	623b      	str	r3, [r7, #32]
 800e526:	e011      	b.n	800e54c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e52e:	4619      	mov	r1, r3
 800e530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e532:	f004 f815 	bl	8012560 <tcp_split_unsent_seg>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d107      	bne.n	800e54c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e53c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e53e:	f004 fa95 	bl	8012a6c <tcp_output>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 80ac 	beq.w	800e6ac <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	2200      	movs	r2, #0
 800e558:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e562:	2b06      	cmp	r3, #6
 800e564:	f200 80a2 	bhi.w	800e6ac <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e56e:	3301      	adds	r3, #1
 800e570:	b2da      	uxtb	r2, r3
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e578:	e098      	b.n	800e6ac <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e580:	2b00      	cmp	r3, #0
 800e582:	db0f      	blt.n	800e5a4 <tcp_slowtmr+0x1f0>
 800e584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e586:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e58a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e58e:	4293      	cmp	r3, r2
 800e590:	d008      	beq.n	800e5a4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e594:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e598:	b29b      	uxth	r3, r3
 800e59a:	3301      	adds	r3, #1
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	b21a      	sxth	r2, r3
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	db7b      	blt.n	800e6ac <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b6:	f004 fd5d 	bl	8013074 <tcp_rexmit_rto_prepare>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <tcp_slowtmr+0x21c>
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d171      	bne.n	800e6ac <tcp_slowtmr+0x2f8>
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d06d      	beq.n	800e6ac <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	7d1b      	ldrb	r3, [r3, #20]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d03a      	beq.n	800e64e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5de:	2b0c      	cmp	r3, #12
 800e5e0:	bf28      	it	cs
 800e5e2:	230c      	movcs	r3, #12
 800e5e4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5ec:	10db      	asrs	r3, r3, #3
 800e5ee:	b21b      	sxth	r3, r3
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5f8:	4413      	add	r3, r2
 800e5fa:	7efa      	ldrb	r2, [r7, #27]
 800e5fc:	4910      	ldr	r1, [pc, #64]	; (800e640 <tcp_slowtmr+0x28c>)
 800e5fe:	5c8a      	ldrb	r2, [r1, r2]
 800e600:	4093      	lsls	r3, r2
 800e602:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e60a:	4293      	cmp	r3, r2
 800e60c:	dc1a      	bgt.n	800e644 <tcp_slowtmr+0x290>
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	b21a      	sxth	r2, r3
 800e612:	e019      	b.n	800e648 <tcp_slowtmr+0x294>
 800e614:	20011b48 	.word	0x20011b48
 800e618:	20011b5e 	.word	0x20011b5e
 800e61c:	20011b54 	.word	0x20011b54
 800e620:	0801afb8 	.word	0x0801afb8
 800e624:	0801b2fc 	.word	0x0801b2fc
 800e628:	0801affc 	.word	0x0801affc
 800e62c:	0801b328 	.word	0x0801b328
 800e630:	0801b354 	.word	0x0801b354
 800e634:	0801b384 	.word	0x0801b384
 800e638:	0801b3b8 	.word	0x0801b3b8
 800e63c:	0801cccc 	.word	0x0801cccc
 800e640:	0801ccbc 	.word	0x0801ccbc
 800e644:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	2200      	movs	r2, #0
 800e652:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e656:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e660:	4293      	cmp	r3, r2
 800e662:	bf28      	it	cs
 800e664:	4613      	movcs	r3, r2
 800e666:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e668:	8a7b      	ldrh	r3, [r7, #18]
 800e66a:	085b      	lsrs	r3, r3, #1
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	b29b      	uxth	r3, r3
 800e682:	429a      	cmp	r2, r3
 800e684:	d206      	bcs.n	800e694 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e6a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6a8:	f004 fd54 	bl	8013154 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
 800e6b0:	2b06      	cmp	r3, #6
 800e6b2:	d111      	bne.n	800e6d8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	8b5b      	ldrh	r3, [r3, #26]
 800e6b8:	f003 0310 	and.w	r3, r3, #16
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6c0:	4b9c      	ldr	r3, [pc, #624]	; (800e934 <tcp_slowtmr+0x580>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	6a1b      	ldr	r3, [r3, #32]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	2b28      	cmp	r3, #40	; 0x28
 800e6cc:	d904      	bls.n	800e6d8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	7a5b      	ldrb	r3, [r3, #9]
 800e6dc:	f003 0308 	and.w	r3, r3, #8
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d04a      	beq.n	800e77a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6e8:	2b04      	cmp	r3, #4
 800e6ea:	d003      	beq.n	800e6f4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e6f0:	2b07      	cmp	r3, #7
 800e6f2:	d142      	bne.n	800e77a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6f4:	4b8f      	ldr	r3, [pc, #572]	; (800e934 <tcp_slowtmr+0x580>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e704:	4b8c      	ldr	r3, [pc, #560]	; (800e938 <tcp_slowtmr+0x584>)
 800e706:	440b      	add	r3, r1
 800e708:	498c      	ldr	r1, [pc, #560]	; (800e93c <tcp_slowtmr+0x588>)
 800e70a:	fba1 1303 	umull	r1, r3, r1, r3
 800e70e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e710:	429a      	cmp	r2, r3
 800e712:	d90a      	bls.n	800e72a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e718:	3301      	adds	r3, #1
 800e71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e71e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e722:	3301      	adds	r3, #1
 800e724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e728:	e027      	b.n	800e77a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e72a:	4b82      	ldr	r3, [pc, #520]	; (800e934 <tcp_slowtmr+0x580>)
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	6a1b      	ldr	r3, [r3, #32]
 800e732:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e740:	4618      	mov	r0, r3
 800e742:	4b7f      	ldr	r3, [pc, #508]	; (800e940 <tcp_slowtmr+0x58c>)
 800e744:	fb00 f303 	mul.w	r3, r0, r3
 800e748:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e74a:	497c      	ldr	r1, [pc, #496]	; (800e93c <tcp_slowtmr+0x588>)
 800e74c:	fba1 1303 	umull	r1, r3, r1, r3
 800e750:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e752:	429a      	cmp	r2, r3
 800e754:	d911      	bls.n	800e77a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e758:	f005 f812 	bl	8013780 <tcp_keepalive>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e762:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e766:	2b00      	cmp	r3, #0
 800e768:	d107      	bne.n	800e77a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e770:	3301      	adds	r3, #1
 800e772:	b2da      	uxtb	r2, r3
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d011      	beq.n	800e7a6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e782:	4b6c      	ldr	r3, [pc, #432]	; (800e934 <tcp_slowtmr+0x580>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	1ad2      	subs	r2, r2, r3
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e792:	4619      	mov	r1, r3
 800e794:	460b      	mov	r3, r1
 800e796:	005b      	lsls	r3, r3, #1
 800e798:	440b      	add	r3, r1
 800e79a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d302      	bcc.n	800e7a6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7a2:	f000 feab 	bl	800f4fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	7d1b      	ldrb	r3, [r3, #20]
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d10b      	bne.n	800e7c6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ae:	4b61      	ldr	r3, [pc, #388]	; (800e934 <tcp_slowtmr+0x580>)
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	6a1b      	ldr	r3, [r3, #32]
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	2b28      	cmp	r3, #40	; 0x28
 800e7ba:	d904      	bls.n	800e7c6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ca:	2b09      	cmp	r3, #9
 800e7cc:	d10b      	bne.n	800e7e6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7ce:	4b59      	ldr	r3, [pc, #356]	; (800e934 <tcp_slowtmr+0x580>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	2bf0      	cmp	r3, #240	; 0xf0
 800e7da:	d904      	bls.n	800e7e6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d060      	beq.n	800e8b0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e7f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f8:	f000 fccc 	bl	800f194 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d010      	beq.n	800e824 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e802:	4b50      	ldr	r3, [pc, #320]	; (800e944 <tcp_slowtmr+0x590>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e808:	429a      	cmp	r2, r3
 800e80a:	d106      	bne.n	800e81a <tcp_slowtmr+0x466>
 800e80c:	4b4e      	ldr	r3, [pc, #312]	; (800e948 <tcp_slowtmr+0x594>)
 800e80e:	f240 526d 	movw	r2, #1389	; 0x56d
 800e812:	494e      	ldr	r1, [pc, #312]	; (800e94c <tcp_slowtmr+0x598>)
 800e814:	484e      	ldr	r0, [pc, #312]	; (800e950 <tcp_slowtmr+0x59c>)
 800e816:	f008 f8a3 	bl	8016960 <iprintf>
        prev->next = pcb->next;
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	68da      	ldr	r2, [r3, #12]
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	60da      	str	r2, [r3, #12]
 800e822:	e00f      	b.n	800e844 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e824:	4b47      	ldr	r3, [pc, #284]	; (800e944 <tcp_slowtmr+0x590>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d006      	beq.n	800e83c <tcp_slowtmr+0x488>
 800e82e:	4b46      	ldr	r3, [pc, #280]	; (800e948 <tcp_slowtmr+0x594>)
 800e830:	f240 5271 	movw	r2, #1393	; 0x571
 800e834:	4947      	ldr	r1, [pc, #284]	; (800e954 <tcp_slowtmr+0x5a0>)
 800e836:	4846      	ldr	r0, [pc, #280]	; (800e950 <tcp_slowtmr+0x59c>)
 800e838:	f008 f892 	bl	8016960 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	4a40      	ldr	r2, [pc, #256]	; (800e944 <tcp_slowtmr+0x590>)
 800e842:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d013      	beq.n	800e874 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e854:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	3304      	adds	r3, #4
 800e85a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85c:	8ad2      	ldrh	r2, [r2, #22]
 800e85e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e860:	8b09      	ldrh	r1, [r1, #24]
 800e862:	9102      	str	r1, [sp, #8]
 800e864:	9201      	str	r2, [sp, #4]
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	462b      	mov	r3, r5
 800e86a:	4622      	mov	r2, r4
 800e86c:	4601      	mov	r1, r0
 800e86e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e870:	f004 fed2 	bl	8013618 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	7d1b      	ldrb	r3, [r3, #20]
 800e87e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e88a:	6838      	ldr	r0, [r7, #0]
 800e88c:	f7fe ffa2 	bl	800d7d4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e890:	4b31      	ldr	r3, [pc, #196]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <tcp_slowtmr+0x4f2>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f06f 010c 	mvn.w	r1, #12
 800e8a2:	68b8      	ldr	r0, [r7, #8]
 800e8a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8a6:	4b2c      	ldr	r3, [pc, #176]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d037      	beq.n	800e91e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e8ae:	e592      	b.n	800e3d6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	7f1b      	ldrb	r3, [r3, #28]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	7f1a      	ldrb	r2, [r3, #28]
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	7f5b      	ldrb	r3, [r3, #29]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d325      	bcc.n	800e91e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e8d8:	4b1f      	ldr	r3, [pc, #124]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00b      	beq.n	800e900 <tcp_slowtmr+0x54c>
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f0:	6912      	ldr	r2, [r2, #16]
 800e8f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4798      	blx	r3
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e8fe:	e002      	b.n	800e906 <tcp_slowtmr+0x552>
 800e900:	2300      	movs	r3, #0
 800e902:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e906:	4b14      	ldr	r3, [pc, #80]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d000      	beq.n	800e910 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e90e:	e562      	b.n	800e3d6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e910:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e914:	2b00      	cmp	r3, #0
 800e916:	d102      	bne.n	800e91e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e91a:	f004 f8a7 	bl	8012a6c <tcp_output>
  while (pcb != NULL) {
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	2b00      	cmp	r3, #0
 800e922:	f47f ad5e 	bne.w	800e3e2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e926:	2300      	movs	r3, #0
 800e928:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e92a:	4b0c      	ldr	r3, [pc, #48]	; (800e95c <tcp_slowtmr+0x5a8>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e930:	e069      	b.n	800ea06 <tcp_slowtmr+0x652>
 800e932:	bf00      	nop
 800e934:	20011b48 	.word	0x20011b48
 800e938:	000a4cb8 	.word	0x000a4cb8
 800e93c:	10624dd3 	.word	0x10624dd3
 800e940:	000124f8 	.word	0x000124f8
 800e944:	20011b54 	.word	0x20011b54
 800e948:	0801afb8 	.word	0x0801afb8
 800e94c:	0801b3f0 	.word	0x0801b3f0
 800e950:	0801affc 	.word	0x0801affc
 800e954:	0801b41c 	.word	0x0801b41c
 800e958:	20011b5c 	.word	0x20011b5c
 800e95c:	20011b58 	.word	0x20011b58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	7d1b      	ldrb	r3, [r3, #20]
 800e964:	2b0a      	cmp	r3, #10
 800e966:	d006      	beq.n	800e976 <tcp_slowtmr+0x5c2>
 800e968:	4b2b      	ldr	r3, [pc, #172]	; (800ea18 <tcp_slowtmr+0x664>)
 800e96a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e96e:	492b      	ldr	r1, [pc, #172]	; (800ea1c <tcp_slowtmr+0x668>)
 800e970:	482b      	ldr	r0, [pc, #172]	; (800ea20 <tcp_slowtmr+0x66c>)
 800e972:	f007 fff5 	bl	8016960 <iprintf>
    pcb_remove = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e97c:	4b29      	ldr	r3, [pc, #164]	; (800ea24 <tcp_slowtmr+0x670>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	6a1b      	ldr	r3, [r3, #32]
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	2bf0      	cmp	r3, #240	; 0xf0
 800e988:	d904      	bls.n	800e994 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e98a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98e:	3301      	adds	r3, #1
 800e990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d02f      	beq.n	800e9fc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e99c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e99e:	f000 fbf9 	bl	800f194 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d010      	beq.n	800e9ca <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9a8:	4b1f      	ldr	r3, [pc, #124]	; (800ea28 <tcp_slowtmr+0x674>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d106      	bne.n	800e9c0 <tcp_slowtmr+0x60c>
 800e9b2:	4b19      	ldr	r3, [pc, #100]	; (800ea18 <tcp_slowtmr+0x664>)
 800e9b4:	f240 52af 	movw	r2, #1455	; 0x5af
 800e9b8:	491c      	ldr	r1, [pc, #112]	; (800ea2c <tcp_slowtmr+0x678>)
 800e9ba:	4819      	ldr	r0, [pc, #100]	; (800ea20 <tcp_slowtmr+0x66c>)
 800e9bc:	f007 ffd0 	bl	8016960 <iprintf>
        prev->next = pcb->next;
 800e9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c2:	68da      	ldr	r2, [r3, #12]
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	60da      	str	r2, [r3, #12]
 800e9c8:	e00f      	b.n	800e9ea <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9ca:	4b17      	ldr	r3, [pc, #92]	; (800ea28 <tcp_slowtmr+0x674>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d006      	beq.n	800e9e2 <tcp_slowtmr+0x62e>
 800e9d4:	4b10      	ldr	r3, [pc, #64]	; (800ea18 <tcp_slowtmr+0x664>)
 800e9d6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9da:	4915      	ldr	r1, [pc, #84]	; (800ea30 <tcp_slowtmr+0x67c>)
 800e9dc:	4810      	ldr	r0, [pc, #64]	; (800ea20 <tcp_slowtmr+0x66c>)
 800e9de:	f007 ffbf 	bl	8016960 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	4a10      	ldr	r2, [pc, #64]	; (800ea28 <tcp_slowtmr+0x674>)
 800e9e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e9f4:	69f8      	ldr	r0, [r7, #28]
 800e9f6:	f7fe feed 	bl	800d7d4 <tcp_free>
 800e9fa:	e004      	b.n	800ea06 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1a9      	bne.n	800e960 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	bf00      	nop
 800ea10:	3730      	adds	r7, #48	; 0x30
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bdb0      	pop	{r4, r5, r7, pc}
 800ea16:	bf00      	nop
 800ea18:	0801afb8 	.word	0x0801afb8
 800ea1c:	0801b448 	.word	0x0801b448
 800ea20:	0801affc 	.word	0x0801affc
 800ea24:	20011b48 	.word	0x20011b48
 800ea28:	20011b58 	.word	0x20011b58
 800ea2c:	0801b478 	.word	0x0801b478
 800ea30:	0801b4a0 	.word	0x0801b4a0

0800ea34 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea3a:	4b2d      	ldr	r3, [pc, #180]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	4b2b      	ldr	r3, [pc, #172]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea44:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea46:	4b2b      	ldr	r3, [pc, #172]	; (800eaf4 <tcp_fasttmr+0xc0>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea4c:	e048      	b.n	800eae0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	7f9a      	ldrb	r2, [r3, #30]
 800ea52:	4b27      	ldr	r3, [pc, #156]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d03f      	beq.n	800eada <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea5a:	4b25      	ldr	r3, [pc, #148]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea5c:	781a      	ldrb	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8b5b      	ldrh	r3, [r3, #26]
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d010      	beq.n	800ea90 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8b5b      	ldrh	r3, [r3, #26]
 800ea72:	f043 0302 	orr.w	r3, r3, #2
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f003 fff5 	bl	8012a6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8b5b      	ldrh	r3, [r3, #26]
 800ea86:	f023 0303 	bic.w	r3, r3, #3
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f003 0308 	and.w	r3, r3, #8
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d009      	beq.n	800eab0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8b5b      	ldrh	r3, [r3, #26]
 800eaa0:	f023 0308 	bic.w	r3, r3, #8
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff f826 	bl	800dafc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00a      	beq.n	800ead4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eabe:	4b0e      	ldr	r3, [pc, #56]	; (800eaf8 <tcp_fasttmr+0xc4>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f819 	bl	800eafc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eaca:	4b0b      	ldr	r3, [pc, #44]	; (800eaf8 <tcp_fasttmr+0xc4>)
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d000      	beq.n	800ead4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ead2:	e7b8      	b.n	800ea46 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	607b      	str	r3, [r7, #4]
 800ead8:	e002      	b.n	800eae0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1b3      	bne.n	800ea4e <tcp_fasttmr+0x1a>
    }
  }
}
 800eae6:	bf00      	nop
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	20011b5e 	.word	0x20011b5e
 800eaf4:	20011b54 	.word	0x20011b54
 800eaf8:	20011b5c 	.word	0x20011b5c

0800eafc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eafc:	b590      	push	{r4, r7, lr}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <tcp_process_refused_data+0x22>
 800eb0a:	4b37      	ldr	r3, [pc, #220]	; (800ebe8 <tcp_process_refused_data+0xec>)
 800eb0c:	f240 6209 	movw	r2, #1545	; 0x609
 800eb10:	4936      	ldr	r1, [pc, #216]	; (800ebec <tcp_process_refused_data+0xf0>)
 800eb12:	4837      	ldr	r0, [pc, #220]	; (800ebf0 <tcp_process_refused_data+0xf4>)
 800eb14:	f007 ff24 	bl	8016960 <iprintf>
 800eb18:	f06f 030f 	mvn.w	r3, #15
 800eb1c:	e060      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb22:	7b5b      	ldrb	r3, [r3, #13]
 800eb24:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb2a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00b      	beq.n	800eb54 <tcp_process_refused_data+0x58>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6918      	ldr	r0, [r3, #16]
 800eb46:	2300      	movs	r3, #0
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	47a0      	blx	r4
 800eb4e:	4603      	mov	r3, r0
 800eb50:	73fb      	strb	r3, [r7, #15]
 800eb52:	e007      	b.n	800eb64 <tcp_process_refused_data+0x68>
 800eb54:	2300      	movs	r3, #0
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	6879      	ldr	r1, [r7, #4]
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	f000 f8a4 	bl	800eca8 <tcp_recv_null>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d12a      	bne.n	800ebc2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb6c:	7bbb      	ldrb	r3, [r7, #14]
 800eb6e:	f003 0320 	and.w	r3, r3, #32
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d033      	beq.n	800ebde <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb7e:	d005      	beq.n	800eb8c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb84:	3301      	adds	r3, #1
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <tcp_process_refused_data+0xb2>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6918      	ldr	r0, [r3, #16]
 800eba0:	2300      	movs	r3, #0
 800eba2:	2200      	movs	r2, #0
 800eba4:	6879      	ldr	r1, [r7, #4]
 800eba6:	47a0      	blx	r4
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73fb      	strb	r3, [r7, #15]
 800ebac:	e001      	b.n	800ebb2 <tcp_process_refused_data+0xb6>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebb6:	f113 0f0d 	cmn.w	r3, #13
 800ebba:	d110      	bne.n	800ebde <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ebbc:	f06f 030c 	mvn.w	r3, #12
 800ebc0:	e00e      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc6:	f113 0f0d 	cmn.w	r3, #13
 800ebca:	d102      	bne.n	800ebd2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebcc:	f06f 030c 	mvn.w	r3, #12
 800ebd0:	e006      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ebd8:	f06f 0304 	mvn.w	r3, #4
 800ebdc:	e000      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3714      	adds	r7, #20
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd90      	pop	{r4, r7, pc}
 800ebe8:	0801afb8 	.word	0x0801afb8
 800ebec:	0801b4c8 	.word	0x0801b4c8
 800ebf0:	0801affc 	.word	0x0801affc

0800ebf4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ebfc:	e007      	b.n	800ec0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f80a 	bl	800ec1e <tcp_seg_free>
    seg = next;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1f4      	bne.n	800ebfe <tcp_segs_free+0xa>
  }
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00c      	beq.n	800ec46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d004      	beq.n	800ec3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fe fb1f 	bl	800d27c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec3e:	6879      	ldr	r1, [r7, #4]
 800ec40:	2002      	movs	r0, #2
 800ec42:	f7fd fc7b 	bl	800c53c <memp_free>
  }
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <tcp_seg_copy+0x1c>
 800ec5e:	4b0f      	ldr	r3, [pc, #60]	; (800ec9c <tcp_seg_copy+0x4c>)
 800ec60:	f240 6282 	movw	r2, #1666	; 0x682
 800ec64:	490e      	ldr	r1, [pc, #56]	; (800eca0 <tcp_seg_copy+0x50>)
 800ec66:	480f      	ldr	r0, [pc, #60]	; (800eca4 <tcp_seg_copy+0x54>)
 800ec68:	f007 fe7a 	bl	8016960 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec6c:	2002      	movs	r0, #2
 800ec6e:	f7fd fbef 	bl	800c450 <memp_malloc>
 800ec72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <tcp_seg_copy+0x2e>
    return NULL;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	e00a      	b.n	800ec94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec7e:	2210      	movs	r2, #16
 800ec80:	6879      	ldr	r1, [r7, #4]
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f007 fda7 	bl	80167d6 <memcpy>
  pbuf_ref(cseg->p);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe fb9b 	bl	800d3c8 <pbuf_ref>
  return cseg;
 800ec92:	68fb      	ldr	r3, [r7, #12]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	0801afb8 	.word	0x0801afb8
 800eca0:	0801b50c 	.word	0x0801b50c
 800eca4:	0801affc 	.word	0x0801affc

0800eca8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d109      	bne.n	800ecd0 <tcp_recv_null+0x28>
 800ecbc:	4b12      	ldr	r3, [pc, #72]	; (800ed08 <tcp_recv_null+0x60>)
 800ecbe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecc2:	4912      	ldr	r1, [pc, #72]	; (800ed0c <tcp_recv_null+0x64>)
 800ecc4:	4812      	ldr	r0, [pc, #72]	; (800ed10 <tcp_recv_null+0x68>)
 800ecc6:	f007 fe4b 	bl	8016960 <iprintf>
 800ecca:	f06f 030f 	mvn.w	r3, #15
 800ecce:	e016      	b.n	800ecfe <tcp_recv_null+0x56>

  if (p != NULL) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d009      	beq.n	800ecea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	891b      	ldrh	r3, [r3, #8]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	68b8      	ldr	r0, [r7, #8]
 800ecde:	f7ff f9bb 	bl	800e058 <tcp_recved>
    pbuf_free(p);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7fe faca 	bl	800d27c <pbuf_free>
 800ece8:	e008      	b.n	800ecfc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ecea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d104      	bne.n	800ecfc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ecf2:	68b8      	ldr	r0, [r7, #8]
 800ecf4:	f7fe ff6c 	bl	800dbd0 <tcp_close>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	e000      	b.n	800ecfe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	0801afb8 	.word	0x0801afb8
 800ed0c:	0801b528 	.word	0x0801b528
 800ed10:	0801affc 	.word	0x0801affc

0800ed14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	db01      	blt.n	800ed2a <tcp_kill_prio+0x16>
 800ed26:	79fb      	ldrb	r3, [r7, #7]
 800ed28:	e000      	b.n	800ed2c <tcp_kill_prio+0x18>
 800ed2a:	237f      	movs	r3, #127	; 0x7f
 800ed2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed2e:	7afb      	ldrb	r3, [r7, #11]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d034      	beq.n	800ed9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed34:	7afb      	ldrb	r3, [r7, #11]
 800ed36:	3b01      	subs	r3, #1
 800ed38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed42:	4b19      	ldr	r3, [pc, #100]	; (800eda8 <tcp_kill_prio+0x94>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	e01f      	b.n	800ed8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	7d5b      	ldrb	r3, [r3, #21]
 800ed4e:	7afa      	ldrb	r2, [r7, #11]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d80c      	bhi.n	800ed6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed58:	7afa      	ldrb	r2, [r7, #11]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d112      	bne.n	800ed84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed5e:	4b13      	ldr	r3, [pc, #76]	; (800edac <tcp_kill_prio+0x98>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d80a      	bhi.n	800ed84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed6e:	4b0f      	ldr	r3, [pc, #60]	; (800edac <tcp_kill_prio+0x98>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	7d5b      	ldrb	r3, [r3, #21]
 800ed82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	617b      	str	r3, [r7, #20]
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1dc      	bne.n	800ed4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d004      	beq.n	800eda0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed96:	6938      	ldr	r0, [r7, #16]
 800ed98:	f7ff f860 	bl	800de5c <tcp_abort>
 800ed9c:	e000      	b.n	800eda0 <tcp_kill_prio+0x8c>
    return;
 800ed9e:	bf00      	nop
  }
}
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20011b54 	.word	0x20011b54
 800edac:	20011b48 	.word	0x20011b48

0800edb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4603      	mov	r3, r0
 800edb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	2b08      	cmp	r3, #8
 800edbe:	d009      	beq.n	800edd4 <tcp_kill_state+0x24>
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	2b09      	cmp	r3, #9
 800edc4:	d006      	beq.n	800edd4 <tcp_kill_state+0x24>
 800edc6:	4b1a      	ldr	r3, [pc, #104]	; (800ee30 <tcp_kill_state+0x80>)
 800edc8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800edcc:	4919      	ldr	r1, [pc, #100]	; (800ee34 <tcp_kill_state+0x84>)
 800edce:	481a      	ldr	r0, [pc, #104]	; (800ee38 <tcp_kill_state+0x88>)
 800edd0:	f007 fdc6 	bl	8016960 <iprintf>

  inactivity = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edd8:	2300      	movs	r3, #0
 800edda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eddc:	4b17      	ldr	r3, [pc, #92]	; (800ee3c <tcp_kill_state+0x8c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	e017      	b.n	800ee14 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	7d1b      	ldrb	r3, [r3, #20]
 800ede8:	79fa      	ldrb	r2, [r7, #7]
 800edea:	429a      	cmp	r2, r3
 800edec:	d10f      	bne.n	800ee0e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edee:	4b14      	ldr	r3, [pc, #80]	; (800ee40 <tcp_kill_state+0x90>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d807      	bhi.n	800ee0e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800edfe:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <tcp_kill_state+0x90>)
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1e4      	bne.n	800ede4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee20:	2100      	movs	r1, #0
 800ee22:	6938      	ldr	r0, [r7, #16]
 800ee24:	f7fe ff5c 	bl	800dce0 <tcp_abandon>
  }
}
 800ee28:	bf00      	nop
 800ee2a:	3718      	adds	r7, #24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	0801afb8 	.word	0x0801afb8
 800ee34:	0801b544 	.word	0x0801b544
 800ee38:	0801affc 	.word	0x0801affc
 800ee3c:	20011b54 	.word	0x20011b54
 800ee40:	20011b48 	.word	0x20011b48

0800ee44 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee52:	4b12      	ldr	r3, [pc, #72]	; (800ee9c <tcp_kill_timewait+0x58>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	60fb      	str	r3, [r7, #12]
 800ee58:	e012      	b.n	800ee80 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee5a:	4b11      	ldr	r3, [pc, #68]	; (800eea0 <tcp_kill_timewait+0x5c>)
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d807      	bhi.n	800ee7a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee6a:	4b0d      	ldr	r3, [pc, #52]	; (800eea0 <tcp_kill_timewait+0x5c>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1e9      	bne.n	800ee5a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee8c:	68b8      	ldr	r0, [r7, #8]
 800ee8e:	f7fe ffe5 	bl	800de5c <tcp_abort>
  }
}
 800ee92:	bf00      	nop
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20011b58 	.word	0x20011b58
 800eea0:	20011b48 	.word	0x20011b48

0800eea4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eeaa:	4b10      	ldr	r3, [pc, #64]	; (800eeec <tcp_handle_closepend+0x48>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeb0:	e014      	b.n	800eedc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	8b5b      	ldrh	r3, [r3, #26]
 800eebc:	f003 0308 	and.w	r3, r3, #8
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d009      	beq.n	800eed8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	8b5b      	ldrh	r3, [r3, #26]
 800eec8:	f023 0308 	bic.w	r3, r3, #8
 800eecc:	b29a      	uxth	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fe fe12 	bl	800dafc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1e7      	bne.n	800eeb2 <tcp_handle_closepend+0xe>
  }
}
 800eee2:	bf00      	nop
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	20011b54 	.word	0x20011b54

0800eef0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	4603      	mov	r3, r0
 800eef8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eefa:	2000      	movs	r0, #0
 800eefc:	f7fd faa8 	bl	800c450 <memp_malloc>
 800ef00:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d126      	bne.n	800ef56 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef08:	f7ff ffcc 	bl	800eea4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef0c:	f7ff ff9a 	bl	800ee44 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef10:	2000      	movs	r0, #0
 800ef12:	f7fd fa9d 	bl	800c450 <memp_malloc>
 800ef16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d11b      	bne.n	800ef56 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef1e:	2009      	movs	r0, #9
 800ef20:	f7ff ff46 	bl	800edb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef24:	2000      	movs	r0, #0
 800ef26:	f7fd fa93 	bl	800c450 <memp_malloc>
 800ef2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d111      	bne.n	800ef56 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef32:	2008      	movs	r0, #8
 800ef34:	f7ff ff3c 	bl	800edb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef38:	2000      	movs	r0, #0
 800ef3a:	f7fd fa89 	bl	800c450 <memp_malloc>
 800ef3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d107      	bne.n	800ef56 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef46:	79fb      	ldrb	r3, [r7, #7]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff fee3 	bl	800ed14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef4e:	2000      	movs	r0, #0
 800ef50:	f7fd fa7e 	bl	800c450 <memp_malloc>
 800ef54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d03f      	beq.n	800efdc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef5c:	229c      	movs	r2, #156	; 0x9c
 800ef5e:	2100      	movs	r1, #0
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f007 fc60 	bl	8016826 <memset>
    pcb->prio = prio;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	79fa      	ldrb	r2, [r7, #7]
 800ef6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	22ff      	movs	r2, #255	; 0xff
 800ef8a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef92:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2206      	movs	r2, #6
 800ef98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2206      	movs	r2, #6
 800efa0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2201      	movs	r2, #1
 800efae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800efb2:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <tcp_alloc+0xf8>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800efba:	4b0c      	ldr	r3, [pc, #48]	; (800efec <tcp_alloc+0xfc>)
 800efbc:	781a      	ldrb	r2, [r3, #0]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4a08      	ldr	r2, [pc, #32]	; (800eff0 <tcp_alloc+0x100>)
 800efd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4a07      	ldr	r2, [pc, #28]	; (800eff4 <tcp_alloc+0x104>)
 800efd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800efdc:	68fb      	ldr	r3, [r7, #12]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20011b48 	.word	0x20011b48
 800efec:	20011b5e 	.word	0x20011b5e
 800eff0:	0800eca9 	.word	0x0800eca9
 800eff4:	006ddd00 	.word	0x006ddd00

0800eff8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f002:	2040      	movs	r0, #64	; 0x40
 800f004:	f7ff ff74 	bl	800eef0 <tcp_alloc>
 800f008:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f00a:	68fb      	ldr	r3, [r7, #12]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	611a      	str	r2, [r3, #16]
  }
}
 800f02a:	bf00      	nop
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
	...

0800f038 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00e      	beq.n	800f066 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d106      	bne.n	800f05e <tcp_recv+0x26>
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <tcp_recv+0x38>)
 800f052:	f240 72df 	movw	r2, #2015	; 0x7df
 800f056:	4907      	ldr	r1, [pc, #28]	; (800f074 <tcp_recv+0x3c>)
 800f058:	4807      	ldr	r0, [pc, #28]	; (800f078 <tcp_recv+0x40>)
 800f05a:	f007 fc81 	bl	8016960 <iprintf>
    pcb->recv = recv;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f066:	bf00      	nop
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	0801afb8 	.word	0x0801afb8
 800f074:	0801b554 	.word	0x0801b554
 800f078:	0801affc 	.word	0x0801affc

0800f07c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00e      	beq.n	800f0aa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d106      	bne.n	800f0a2 <tcp_sent+0x26>
 800f094:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <tcp_sent+0x38>)
 800f096:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f09a:	4907      	ldr	r1, [pc, #28]	; (800f0b8 <tcp_sent+0x3c>)
 800f09c:	4807      	ldr	r0, [pc, #28]	; (800f0bc <tcp_sent+0x40>)
 800f09e:	f007 fc5f 	bl	8016960 <iprintf>
    pcb->sent = sent;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	0801afb8 	.word	0x0801afb8
 800f0b8:	0801b57c 	.word	0x0801b57c
 800f0bc:	0801affc 	.word	0x0801affc

0800f0c0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00e      	beq.n	800f0ee <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7d1b      	ldrb	r3, [r3, #20]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d106      	bne.n	800f0e6 <tcp_err+0x26>
 800f0d8:	4b07      	ldr	r3, [pc, #28]	; (800f0f8 <tcp_err+0x38>)
 800f0da:	f640 020d 	movw	r2, #2061	; 0x80d
 800f0de:	4907      	ldr	r1, [pc, #28]	; (800f0fc <tcp_err+0x3c>)
 800f0e0:	4807      	ldr	r0, [pc, #28]	; (800f100 <tcp_err+0x40>)
 800f0e2:	f007 fc3d 	bl	8016960 <iprintf>
    pcb->errf = err;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f0ee:	bf00      	nop
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	0801afb8 	.word	0x0801afb8
 800f0fc:	0801b5a4 	.word	0x0801b5a4
 800f100:	0801affc 	.word	0x0801affc

0800f104 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d008      	beq.n	800f126 <tcp_accept+0x22>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	7d1b      	ldrb	r3, [r3, #20]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d104      	bne.n	800f126 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	619a      	str	r2, [r3, #24]
  }
}
 800f126:	bf00      	nop
 800f128:	3714      	adds	r7, #20
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
	...

0800f134 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	4613      	mov	r3, r2
 800f140:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d107      	bne.n	800f158 <tcp_poll+0x24>
 800f148:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <tcp_poll+0x50>)
 800f14a:	f640 023d 	movw	r2, #2109	; 0x83d
 800f14e:	490e      	ldr	r1, [pc, #56]	; (800f188 <tcp_poll+0x54>)
 800f150:	480e      	ldr	r0, [pc, #56]	; (800f18c <tcp_poll+0x58>)
 800f152:	f007 fc05 	bl	8016960 <iprintf>
 800f156:	e011      	b.n	800f17c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	7d1b      	ldrb	r3, [r3, #20]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d106      	bne.n	800f16e <tcp_poll+0x3a>
 800f160:	4b08      	ldr	r3, [pc, #32]	; (800f184 <tcp_poll+0x50>)
 800f162:	f640 023e 	movw	r2, #2110	; 0x83e
 800f166:	490a      	ldr	r1, [pc, #40]	; (800f190 <tcp_poll+0x5c>)
 800f168:	4808      	ldr	r0, [pc, #32]	; (800f18c <tcp_poll+0x58>)
 800f16a:	f007 fbf9 	bl	8016960 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	79fa      	ldrb	r2, [r7, #7]
 800f17a:	775a      	strb	r2, [r3, #29]
}
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	0801afb8 	.word	0x0801afb8
 800f188:	0801b5cc 	.word	0x0801b5cc
 800f18c:	0801affc 	.word	0x0801affc
 800f190:	0801b5e4 	.word	0x0801b5e4

0800f194 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d107      	bne.n	800f1b2 <tcp_pcb_purge+0x1e>
 800f1a2:	4b21      	ldr	r3, [pc, #132]	; (800f228 <tcp_pcb_purge+0x94>)
 800f1a4:	f640 0251 	movw	r2, #2129	; 0x851
 800f1a8:	4920      	ldr	r1, [pc, #128]	; (800f22c <tcp_pcb_purge+0x98>)
 800f1aa:	4821      	ldr	r0, [pc, #132]	; (800f230 <tcp_pcb_purge+0x9c>)
 800f1ac:	f007 fbd8 	bl	8016960 <iprintf>
 800f1b0:	e037      	b.n	800f222 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7d1b      	ldrb	r3, [r3, #20]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d033      	beq.n	800f222 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1be:	2b0a      	cmp	r3, #10
 800f1c0:	d02f      	beq.n	800f222 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d02b      	beq.n	800f222 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d007      	beq.n	800f1e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fe f850 	bl	800d27c <pbuf_free>
      pcb->refused_data = NULL;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f986 	bl	800f4fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1f6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fcf9 	bl	800ebf4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff fcf4 	bl	800ebf4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	66da      	str	r2, [r3, #108]	; 0x6c
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	0801afb8 	.word	0x0801afb8
 800f22c:	0801b604 	.word	0x0801b604
 800f230:	0801affc 	.word	0x0801affc

0800f234 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <tcp_pcb_remove+0x1e>
 800f244:	4b3e      	ldr	r3, [pc, #248]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f246:	f640 0283 	movw	r2, #2179	; 0x883
 800f24a:	493e      	ldr	r1, [pc, #248]	; (800f344 <tcp_pcb_remove+0x110>)
 800f24c:	483e      	ldr	r0, [pc, #248]	; (800f348 <tcp_pcb_remove+0x114>)
 800f24e:	f007 fb87 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d106      	bne.n	800f266 <tcp_pcb_remove+0x32>
 800f258:	4b39      	ldr	r3, [pc, #228]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f25a:	f640 0284 	movw	r2, #2180	; 0x884
 800f25e:	493b      	ldr	r1, [pc, #236]	; (800f34c <tcp_pcb_remove+0x118>)
 800f260:	4839      	ldr	r0, [pc, #228]	; (800f348 <tcp_pcb_remove+0x114>)
 800f262:	f007 fb7d 	bl	8016960 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d105      	bne.n	800f27c <tcp_pcb_remove+0x48>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68da      	ldr	r2, [r3, #12]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	e013      	b.n	800f2a4 <tcp_pcb_remove+0x70>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	60fb      	str	r3, [r7, #12]
 800f282:	e00c      	b.n	800f29e <tcp_pcb_remove+0x6a>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d104      	bne.n	800f298 <tcp_pcb_remove+0x64>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	68da      	ldr	r2, [r3, #12]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	60da      	str	r2, [r3, #12]
 800f296:	e005      	b.n	800f2a4 <tcp_pcb_remove+0x70>
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1ef      	bne.n	800f284 <tcp_pcb_remove+0x50>
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2aa:	6838      	ldr	r0, [r7, #0]
 800f2ac:	f7ff ff72 	bl	800f194 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	7d1b      	ldrb	r3, [r3, #20]
 800f2b4:	2b0a      	cmp	r3, #10
 800f2b6:	d013      	beq.n	800f2e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d00f      	beq.n	800f2e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	8b5b      	ldrh	r3, [r3, #26]
 800f2c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d009      	beq.n	800f2e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	8b5b      	ldrh	r3, [r3, #26]
 800f2d0:	f043 0302 	orr.w	r3, r3, #2
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2da:	6838      	ldr	r0, [r7, #0]
 800f2dc:	f003 fbc6 	bl	8012a6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	7d1b      	ldrb	r3, [r3, #20]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d020      	beq.n	800f32a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d006      	beq.n	800f2fe <tcp_pcb_remove+0xca>
 800f2f0:	4b13      	ldr	r3, [pc, #76]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f2f2:	f640 0293 	movw	r2, #2195	; 0x893
 800f2f6:	4916      	ldr	r1, [pc, #88]	; (800f350 <tcp_pcb_remove+0x11c>)
 800f2f8:	4813      	ldr	r0, [pc, #76]	; (800f348 <tcp_pcb_remove+0x114>)
 800f2fa:	f007 fb31 	bl	8016960 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f302:	2b00      	cmp	r3, #0
 800f304:	d006      	beq.n	800f314 <tcp_pcb_remove+0xe0>
 800f306:	4b0e      	ldr	r3, [pc, #56]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f308:	f640 0294 	movw	r2, #2196	; 0x894
 800f30c:	4911      	ldr	r1, [pc, #68]	; (800f354 <tcp_pcb_remove+0x120>)
 800f30e:	480e      	ldr	r0, [pc, #56]	; (800f348 <tcp_pcb_remove+0x114>)
 800f310:	f007 fb26 	bl	8016960 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d006      	beq.n	800f32a <tcp_pcb_remove+0xf6>
 800f31c:	4b08      	ldr	r3, [pc, #32]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f31e:	f640 0296 	movw	r2, #2198	; 0x896
 800f322:	490d      	ldr	r1, [pc, #52]	; (800f358 <tcp_pcb_remove+0x124>)
 800f324:	4808      	ldr	r0, [pc, #32]	; (800f348 <tcp_pcb_remove+0x114>)
 800f326:	f007 fb1b 	bl	8016960 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	2200      	movs	r2, #0
 800f32e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	2200      	movs	r2, #0
 800f334:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f336:	bf00      	nop
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	0801afb8 	.word	0x0801afb8
 800f344:	0801b620 	.word	0x0801b620
 800f348:	0801affc 	.word	0x0801affc
 800f34c:	0801b63c 	.word	0x0801b63c
 800f350:	0801b65c 	.word	0x0801b65c
 800f354:	0801b674 	.word	0x0801b674
 800f358:	0801b690 	.word	0x0801b690

0800f35c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d106      	bne.n	800f378 <tcp_next_iss+0x1c>
 800f36a:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <tcp_next_iss+0x38>)
 800f36c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f370:	4909      	ldr	r1, [pc, #36]	; (800f398 <tcp_next_iss+0x3c>)
 800f372:	480a      	ldr	r0, [pc, #40]	; (800f39c <tcp_next_iss+0x40>)
 800f374:	f007 faf4 	bl	8016960 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f378:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <tcp_next_iss+0x44>)
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	4b09      	ldr	r3, [pc, #36]	; (800f3a4 <tcp_next_iss+0x48>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4413      	add	r3, r2
 800f382:	4a07      	ldr	r2, [pc, #28]	; (800f3a0 <tcp_next_iss+0x44>)
 800f384:	6013      	str	r3, [r2, #0]
  return iss;
 800f386:	4b06      	ldr	r3, [pc, #24]	; (800f3a0 <tcp_next_iss+0x44>)
 800f388:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	0801afb8 	.word	0x0801afb8
 800f398:	0801b6a8 	.word	0x0801b6a8
 800f39c:	0801affc 	.word	0x0801affc
 800f3a0:	20000028 	.word	0x20000028
 800f3a4:	20011b48 	.word	0x20011b48

0800f3a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d106      	bne.n	800f3ca <tcp_eff_send_mss_netif+0x22>
 800f3bc:	4b14      	ldr	r3, [pc, #80]	; (800f410 <tcp_eff_send_mss_netif+0x68>)
 800f3be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f3c2:	4914      	ldr	r1, [pc, #80]	; (800f414 <tcp_eff_send_mss_netif+0x6c>)
 800f3c4:	4814      	ldr	r0, [pc, #80]	; (800f418 <tcp_eff_send_mss_netif+0x70>)
 800f3c6:	f007 facb 	bl	8016960 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3d0:	89fb      	ldrh	r3, [r7, #14]
 800f3d2:	e019      	b.n	800f408 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3da:	8afb      	ldrh	r3, [r7, #22]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d012      	beq.n	800f406 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f3e0:	2328      	movs	r3, #40	; 0x28
 800f3e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f3e4:	8afa      	ldrh	r2, [r7, #22]
 800f3e6:	8abb      	ldrh	r3, [r7, #20]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d904      	bls.n	800f3f6 <tcp_eff_send_mss_netif+0x4e>
 800f3ec:	8afa      	ldrh	r2, [r7, #22]
 800f3ee:	8abb      	ldrh	r3, [r7, #20]
 800f3f0:	1ad3      	subs	r3, r2, r3
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	e000      	b.n	800f3f8 <tcp_eff_send_mss_netif+0x50>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f3fa:	8a7a      	ldrh	r2, [r7, #18]
 800f3fc:	89fb      	ldrh	r3, [r7, #14]
 800f3fe:	4293      	cmp	r3, r2
 800f400:	bf28      	it	cs
 800f402:	4613      	movcs	r3, r2
 800f404:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f406:	89fb      	ldrh	r3, [r7, #14]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	0801afb8 	.word	0x0801afb8
 800f414:	0801b6c4 	.word	0x0801b6c4
 800f418:	0801affc 	.word	0x0801affc

0800f41c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d119      	bne.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f430:	4b10      	ldr	r3, [pc, #64]	; (800f474 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f432:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f436:	4910      	ldr	r1, [pc, #64]	; (800f478 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f438:	4810      	ldr	r0, [pc, #64]	; (800f47c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f43a:	f007 fa91 	bl	8016960 <iprintf>

  while (pcb != NULL) {
 800f43e:	e011      	b.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d108      	bne.n	800f45e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7fe fd02 	bl	800de5c <tcp_abort>
      pcb = next;
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	e002      	b.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1ea      	bne.n	800f440 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f46a:	bf00      	nop
 800f46c:	bf00      	nop
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	0801afb8 	.word	0x0801afb8
 800f478:	0801b6ec 	.word	0x0801b6ec
 800f47c:	0801affc 	.word	0x0801affc

0800f480 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02a      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d026      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f498:	4b15      	ldr	r3, [pc, #84]	; (800f4f0 <tcp_netif_ip_addr_changed+0x70>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4619      	mov	r1, r3
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff ffbc 	bl	800f41c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4a4:	4b13      	ldr	r3, [pc, #76]	; (800f4f4 <tcp_netif_ip_addr_changed+0x74>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7ff ffb6 	bl	800f41c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d017      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d013      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4be:	4b0e      	ldr	r3, [pc, #56]	; (800f4f8 <tcp_netif_ip_addr_changed+0x78>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	e00c      	b.n	800f4e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d103      	bne.n	800f4da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1ef      	bne.n	800f4c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f4e6:	bf00      	nop
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20011b54 	.word	0x20011b54
 800f4f4:	20011b4c 	.word	0x20011b4c
 800f4f8:	20011b50 	.word	0x20011b50

0800f4fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d007      	beq.n	800f51c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff fb6f 	bl	800ebf4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f524:	b590      	push	{r4, r7, lr}
 800f526:	b08d      	sub	sp, #52	; 0x34
 800f528:	af04      	add	r7, sp, #16
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d105      	bne.n	800f540 <tcp_input+0x1c>
 800f534:	4b9b      	ldr	r3, [pc, #620]	; (800f7a4 <tcp_input+0x280>)
 800f536:	2283      	movs	r2, #131	; 0x83
 800f538:	499b      	ldr	r1, [pc, #620]	; (800f7a8 <tcp_input+0x284>)
 800f53a:	489c      	ldr	r0, [pc, #624]	; (800f7ac <tcp_input+0x288>)
 800f53c:	f007 fa10 	bl	8016960 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4a9a      	ldr	r2, [pc, #616]	; (800f7b0 <tcp_input+0x28c>)
 800f546:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	895b      	ldrh	r3, [r3, #10]
 800f54c:	2b13      	cmp	r3, #19
 800f54e:	f240 83d1 	bls.w	800fcf4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f552:	4b98      	ldr	r3, [pc, #608]	; (800f7b4 <tcp_input+0x290>)
 800f554:	695b      	ldr	r3, [r3, #20]
 800f556:	4a97      	ldr	r2, [pc, #604]	; (800f7b4 <tcp_input+0x290>)
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	4611      	mov	r1, r2
 800f55c:	4618      	mov	r0, r3
 800f55e:	f005 fefd 	bl	801535c <ip4_addr_isbroadcast_u32>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	f040 83c7 	bne.w	800fcf8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f56a:	4b92      	ldr	r3, [pc, #584]	; (800f7b4 <tcp_input+0x290>)
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f572:	2be0      	cmp	r3, #224	; 0xe0
 800f574:	f000 83c0 	beq.w	800fcf8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f578:	4b8d      	ldr	r3, [pc, #564]	; (800f7b0 <tcp_input+0x28c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	899b      	ldrh	r3, [r3, #12]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4618      	mov	r0, r3
 800f582:	f7fc f975 	bl	800b870 <lwip_htons>
 800f586:	4603      	mov	r3, r0
 800f588:	0b1b      	lsrs	r3, r3, #12
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f592:	7cbb      	ldrb	r3, [r7, #18]
 800f594:	2b13      	cmp	r3, #19
 800f596:	f240 83b1 	bls.w	800fcfc <tcp_input+0x7d8>
 800f59a:	7cbb      	ldrb	r3, [r7, #18]
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	891b      	ldrh	r3, [r3, #8]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	f200 83aa 	bhi.w	800fcfc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5a8:	7cbb      	ldrb	r3, [r7, #18]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	3b14      	subs	r3, #20
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	4b81      	ldr	r3, [pc, #516]	; (800f7b8 <tcp_input+0x294>)
 800f5b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5b4:	4b81      	ldr	r3, [pc, #516]	; (800f7bc <tcp_input+0x298>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	895a      	ldrh	r2, [r3, #10]
 800f5be:	7cbb      	ldrb	r3, [r7, #18]
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d309      	bcc.n	800f5da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5c6:	4b7c      	ldr	r3, [pc, #496]	; (800f7b8 <tcp_input+0x294>)
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	4b7d      	ldr	r3, [pc, #500]	; (800f7c0 <tcp_input+0x29c>)
 800f5cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5ce:	7cbb      	ldrb	r3, [r7, #18]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7fd fdcc 	bl	800d170 <pbuf_remove_header>
 800f5d8:	e04e      	b.n	800f678 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d105      	bne.n	800f5ee <tcp_input+0xca>
 800f5e2:	4b70      	ldr	r3, [pc, #448]	; (800f7a4 <tcp_input+0x280>)
 800f5e4:	22c2      	movs	r2, #194	; 0xc2
 800f5e6:	4977      	ldr	r1, [pc, #476]	; (800f7c4 <tcp_input+0x2a0>)
 800f5e8:	4870      	ldr	r0, [pc, #448]	; (800f7ac <tcp_input+0x288>)
 800f5ea:	f007 f9b9 	bl	8016960 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f5ee:	2114      	movs	r1, #20
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7fd fdbd 	bl	800d170 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	895a      	ldrh	r2, [r3, #10]
 800f5fa:	4b71      	ldr	r3, [pc, #452]	; (800f7c0 <tcp_input+0x29c>)
 800f5fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5fe:	4b6e      	ldr	r3, [pc, #440]	; (800f7b8 <tcp_input+0x294>)
 800f600:	881a      	ldrh	r2, [r3, #0]
 800f602:	4b6f      	ldr	r3, [pc, #444]	; (800f7c0 <tcp_input+0x29c>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f60a:	4b6d      	ldr	r3, [pc, #436]	; (800f7c0 <tcp_input+0x29c>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7fd fdad 	bl	800d170 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	895b      	ldrh	r3, [r3, #10]
 800f61c:	8a3a      	ldrh	r2, [r7, #16]
 800f61e:	429a      	cmp	r2, r3
 800f620:	f200 836e 	bhi.w	800fd00 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	4a64      	ldr	r2, [pc, #400]	; (800f7bc <tcp_input+0x298>)
 800f62c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	8a3a      	ldrh	r2, [r7, #16]
 800f634:	4611      	mov	r1, r2
 800f636:	4618      	mov	r0, r3
 800f638:	f7fd fd9a 	bl	800d170 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	891a      	ldrh	r2, [r3, #8]
 800f640:	8a3b      	ldrh	r3, [r7, #16]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	b29a      	uxth	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	895b      	ldrh	r3, [r3, #10]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d005      	beq.n	800f65e <tcp_input+0x13a>
 800f652:	4b54      	ldr	r3, [pc, #336]	; (800f7a4 <tcp_input+0x280>)
 800f654:	22df      	movs	r2, #223	; 0xdf
 800f656:	495c      	ldr	r1, [pc, #368]	; (800f7c8 <tcp_input+0x2a4>)
 800f658:	4854      	ldr	r0, [pc, #336]	; (800f7ac <tcp_input+0x288>)
 800f65a:	f007 f981 	bl	8016960 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	891a      	ldrh	r2, [r3, #8]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	891b      	ldrh	r3, [r3, #8]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d005      	beq.n	800f678 <tcp_input+0x154>
 800f66c:	4b4d      	ldr	r3, [pc, #308]	; (800f7a4 <tcp_input+0x280>)
 800f66e:	22e0      	movs	r2, #224	; 0xe0
 800f670:	4956      	ldr	r1, [pc, #344]	; (800f7cc <tcp_input+0x2a8>)
 800f672:	484e      	ldr	r0, [pc, #312]	; (800f7ac <tcp_input+0x288>)
 800f674:	f007 f974 	bl	8016960 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f678:	4b4d      	ldr	r3, [pc, #308]	; (800f7b0 <tcp_input+0x28c>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4a4b      	ldr	r2, [pc, #300]	; (800f7b0 <tcp_input+0x28c>)
 800f682:	6814      	ldr	r4, [r2, #0]
 800f684:	4618      	mov	r0, r3
 800f686:	f7fc f8f3 	bl	800b870 <lwip_htons>
 800f68a:	4603      	mov	r3, r0
 800f68c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f68e:	4b48      	ldr	r3, [pc, #288]	; (800f7b0 <tcp_input+0x28c>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	885b      	ldrh	r3, [r3, #2]
 800f694:	b29b      	uxth	r3, r3
 800f696:	4a46      	ldr	r2, [pc, #280]	; (800f7b0 <tcp_input+0x28c>)
 800f698:	6814      	ldr	r4, [r2, #0]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fc f8e8 	bl	800b870 <lwip_htons>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6a4:	4b42      	ldr	r3, [pc, #264]	; (800f7b0 <tcp_input+0x28c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	4a41      	ldr	r2, [pc, #260]	; (800f7b0 <tcp_input+0x28c>)
 800f6ac:	6814      	ldr	r4, [r2, #0]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fc f8f3 	bl	800b89a <lwip_htonl>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	6063      	str	r3, [r4, #4]
 800f6b8:	6863      	ldr	r3, [r4, #4]
 800f6ba:	4a45      	ldr	r2, [pc, #276]	; (800f7d0 <tcp_input+0x2ac>)
 800f6bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6be:	4b3c      	ldr	r3, [pc, #240]	; (800f7b0 <tcp_input+0x28c>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	4a3a      	ldr	r2, [pc, #232]	; (800f7b0 <tcp_input+0x28c>)
 800f6c6:	6814      	ldr	r4, [r2, #0]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fc f8e6 	bl	800b89a <lwip_htonl>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	60a3      	str	r3, [r4, #8]
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	4a3f      	ldr	r2, [pc, #252]	; (800f7d4 <tcp_input+0x2b0>)
 800f6d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6d8:	4b35      	ldr	r3, [pc, #212]	; (800f7b0 <tcp_input+0x28c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	89db      	ldrh	r3, [r3, #14]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	4a33      	ldr	r2, [pc, #204]	; (800f7b0 <tcp_input+0x28c>)
 800f6e2:	6814      	ldr	r4, [r2, #0]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fc f8c3 	bl	800b870 <lwip_htons>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6ee:	4b30      	ldr	r3, [pc, #192]	; (800f7b0 <tcp_input+0x28c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	899b      	ldrh	r3, [r3, #12]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fc f8ba 	bl	800b870 <lwip_htons>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f704:	b2da      	uxtb	r2, r3
 800f706:	4b34      	ldr	r3, [pc, #208]	; (800f7d8 <tcp_input+0x2b4>)
 800f708:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	891a      	ldrh	r2, [r3, #8]
 800f70e:	4b33      	ldr	r3, [pc, #204]	; (800f7dc <tcp_input+0x2b8>)
 800f710:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f712:	4b31      	ldr	r3, [pc, #196]	; (800f7d8 <tcp_input+0x2b4>)
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	f003 0303 	and.w	r3, r3, #3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00c      	beq.n	800f738 <tcp_input+0x214>
    tcplen++;
 800f71e:	4b2f      	ldr	r3, [pc, #188]	; (800f7dc <tcp_input+0x2b8>)
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	3301      	adds	r3, #1
 800f724:	b29a      	uxth	r2, r3
 800f726:	4b2d      	ldr	r3, [pc, #180]	; (800f7dc <tcp_input+0x2b8>)
 800f728:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	891a      	ldrh	r2, [r3, #8]
 800f72e:	4b2b      	ldr	r3, [pc, #172]	; (800f7dc <tcp_input+0x2b8>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	429a      	cmp	r2, r3
 800f734:	f200 82e6 	bhi.w	800fd04 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f738:	2300      	movs	r3, #0
 800f73a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f73c:	4b28      	ldr	r3, [pc, #160]	; (800f7e0 <tcp_input+0x2bc>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	61fb      	str	r3, [r7, #28]
 800f742:	e09d      	b.n	800f880 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	7d1b      	ldrb	r3, [r3, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d105      	bne.n	800f758 <tcp_input+0x234>
 800f74c:	4b15      	ldr	r3, [pc, #84]	; (800f7a4 <tcp_input+0x280>)
 800f74e:	22fb      	movs	r2, #251	; 0xfb
 800f750:	4924      	ldr	r1, [pc, #144]	; (800f7e4 <tcp_input+0x2c0>)
 800f752:	4816      	ldr	r0, [pc, #88]	; (800f7ac <tcp_input+0x288>)
 800f754:	f007 f904 	bl	8016960 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	7d1b      	ldrb	r3, [r3, #20]
 800f75c:	2b0a      	cmp	r3, #10
 800f75e:	d105      	bne.n	800f76c <tcp_input+0x248>
 800f760:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <tcp_input+0x280>)
 800f762:	22fc      	movs	r2, #252	; 0xfc
 800f764:	4920      	ldr	r1, [pc, #128]	; (800f7e8 <tcp_input+0x2c4>)
 800f766:	4811      	ldr	r0, [pc, #68]	; (800f7ac <tcp_input+0x288>)
 800f768:	f007 f8fa 	bl	8016960 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	7d1b      	ldrb	r3, [r3, #20]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d105      	bne.n	800f780 <tcp_input+0x25c>
 800f774:	4b0b      	ldr	r3, [pc, #44]	; (800f7a4 <tcp_input+0x280>)
 800f776:	22fd      	movs	r2, #253	; 0xfd
 800f778:	491c      	ldr	r1, [pc, #112]	; (800f7ec <tcp_input+0x2c8>)
 800f77a:	480c      	ldr	r0, [pc, #48]	; (800f7ac <tcp_input+0x288>)
 800f77c:	f007 f8f0 	bl	8016960 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	7a1b      	ldrb	r3, [r3, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d033      	beq.n	800f7f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	7a1a      	ldrb	r2, [r3, #8]
 800f78c:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <tcp_input+0x290>)
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f794:	3301      	adds	r3, #1
 800f796:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f798:	429a      	cmp	r2, r3
 800f79a:	d029      	beq.n	800f7f0 <tcp_input+0x2cc>
      prev = pcb;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	61bb      	str	r3, [r7, #24]
      continue;
 800f7a0:	e06b      	b.n	800f87a <tcp_input+0x356>
 800f7a2:	bf00      	nop
 800f7a4:	0801b720 	.word	0x0801b720
 800f7a8:	0801b754 	.word	0x0801b754
 800f7ac:	0801b76c 	.word	0x0801b76c
 800f7b0:	20011b70 	.word	0x20011b70
 800f7b4:	20009abc 	.word	0x20009abc
 800f7b8:	20011b74 	.word	0x20011b74
 800f7bc:	20011b78 	.word	0x20011b78
 800f7c0:	20011b76 	.word	0x20011b76
 800f7c4:	0801b794 	.word	0x0801b794
 800f7c8:	0801b7a4 	.word	0x0801b7a4
 800f7cc:	0801b7b0 	.word	0x0801b7b0
 800f7d0:	20011b80 	.word	0x20011b80
 800f7d4:	20011b84 	.word	0x20011b84
 800f7d8:	20011b8c 	.word	0x20011b8c
 800f7dc:	20011b8a 	.word	0x20011b8a
 800f7e0:	20011b54 	.word	0x20011b54
 800f7e4:	0801b7d0 	.word	0x0801b7d0
 800f7e8:	0801b7f8 	.word	0x0801b7f8
 800f7ec:	0801b824 	.word	0x0801b824
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	8b1a      	ldrh	r2, [r3, #24]
 800f7f4:	4b72      	ldr	r3, [pc, #456]	; (800f9c0 <tcp_input+0x49c>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	881b      	ldrh	r3, [r3, #0]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d13a      	bne.n	800f876 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	8ada      	ldrh	r2, [r3, #22]
 800f804:	4b6e      	ldr	r3, [pc, #440]	; (800f9c0 <tcp_input+0x49c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	885b      	ldrh	r3, [r3, #2]
 800f80a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d132      	bne.n	800f876 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	685a      	ldr	r2, [r3, #4]
 800f814:	4b6b      	ldr	r3, [pc, #428]	; (800f9c4 <tcp_input+0x4a0>)
 800f816:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f818:	429a      	cmp	r2, r3
 800f81a:	d12c      	bne.n	800f876 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	4b68      	ldr	r3, [pc, #416]	; (800f9c4 <tcp_input+0x4a0>)
 800f822:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f824:	429a      	cmp	r2, r3
 800f826:	d126      	bne.n	800f876 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d106      	bne.n	800f840 <tcp_input+0x31c>
 800f832:	4b65      	ldr	r3, [pc, #404]	; (800f9c8 <tcp_input+0x4a4>)
 800f834:	f240 120d 	movw	r2, #269	; 0x10d
 800f838:	4964      	ldr	r1, [pc, #400]	; (800f9cc <tcp_input+0x4a8>)
 800f83a:	4865      	ldr	r0, [pc, #404]	; (800f9d0 <tcp_input+0x4ac>)
 800f83c:	f007 f890 	bl	8016960 <iprintf>
      if (prev != NULL) {
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <tcp_input+0x338>
        prev->next = pcb->next;
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f84e:	4b61      	ldr	r3, [pc, #388]	; (800f9d4 <tcp_input+0x4b0>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f856:	4a5f      	ldr	r2, [pc, #380]	; (800f9d4 <tcp_input+0x4b0>)
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	69fa      	ldr	r2, [r7, #28]
 800f862:	429a      	cmp	r2, r3
 800f864:	d111      	bne.n	800f88a <tcp_input+0x366>
 800f866:	4b58      	ldr	r3, [pc, #352]	; (800f9c8 <tcp_input+0x4a4>)
 800f868:	f240 1215 	movw	r2, #277	; 0x115
 800f86c:	495a      	ldr	r1, [pc, #360]	; (800f9d8 <tcp_input+0x4b4>)
 800f86e:	4858      	ldr	r0, [pc, #352]	; (800f9d0 <tcp_input+0x4ac>)
 800f870:	f007 f876 	bl	8016960 <iprintf>
      break;
 800f874:	e009      	b.n	800f88a <tcp_input+0x366>
    }
    prev = pcb;
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	61fb      	str	r3, [r7, #28]
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f47f af5e 	bne.w	800f744 <tcp_input+0x220>
 800f888:	e000      	b.n	800f88c <tcp_input+0x368>
      break;
 800f88a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f040 80aa 	bne.w	800f9e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f894:	4b51      	ldr	r3, [pc, #324]	; (800f9dc <tcp_input+0x4b8>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	61fb      	str	r3, [r7, #28]
 800f89a:	e03f      	b.n	800f91c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	7d1b      	ldrb	r3, [r3, #20]
 800f8a0:	2b0a      	cmp	r3, #10
 800f8a2:	d006      	beq.n	800f8b2 <tcp_input+0x38e>
 800f8a4:	4b48      	ldr	r3, [pc, #288]	; (800f9c8 <tcp_input+0x4a4>)
 800f8a6:	f240 121f 	movw	r2, #287	; 0x11f
 800f8aa:	494d      	ldr	r1, [pc, #308]	; (800f9e0 <tcp_input+0x4bc>)
 800f8ac:	4848      	ldr	r0, [pc, #288]	; (800f9d0 <tcp_input+0x4ac>)
 800f8ae:	f007 f857 	bl	8016960 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	7a1b      	ldrb	r3, [r3, #8]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d009      	beq.n	800f8ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	7a1a      	ldrb	r2, [r3, #8]
 800f8be:	4b41      	ldr	r3, [pc, #260]	; (800f9c4 <tcp_input+0x4a0>)
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d122      	bne.n	800f914 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	8b1a      	ldrh	r2, [r3, #24]
 800f8d2:	4b3b      	ldr	r3, [pc, #236]	; (800f9c0 <tcp_input+0x49c>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d11b      	bne.n	800f916 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	8ada      	ldrh	r2, [r3, #22]
 800f8e2:	4b37      	ldr	r3, [pc, #220]	; (800f9c0 <tcp_input+0x49c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	885b      	ldrh	r3, [r3, #2]
 800f8e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d113      	bne.n	800f916 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	685a      	ldr	r2, [r3, #4]
 800f8f2:	4b34      	ldr	r3, [pc, #208]	; (800f9c4 <tcp_input+0x4a0>)
 800f8f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d10d      	bne.n	800f916 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	4b31      	ldr	r3, [pc, #196]	; (800f9c4 <tcp_input+0x4a0>)
 800f900:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f902:	429a      	cmp	r2, r3
 800f904:	d107      	bne.n	800f916 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f906:	69f8      	ldr	r0, [r7, #28]
 800f908:	f000 fb56 	bl	800ffb8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7fd fcb5 	bl	800d27c <pbuf_free>
        return;
 800f912:	e1fd      	b.n	800fd10 <tcp_input+0x7ec>
        continue;
 800f914:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	61fb      	str	r3, [r7, #28]
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1bc      	bne.n	800f89c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f922:	2300      	movs	r3, #0
 800f924:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f926:	4b2f      	ldr	r3, [pc, #188]	; (800f9e4 <tcp_input+0x4c0>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	617b      	str	r3, [r7, #20]
 800f92c:	e02a      	b.n	800f984 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	7a1b      	ldrb	r3, [r3, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00c      	beq.n	800f950 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	7a1a      	ldrb	r2, [r3, #8]
 800f93a:	4b22      	ldr	r3, [pc, #136]	; (800f9c4 <tcp_input+0x4a0>)
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f942:	3301      	adds	r3, #1
 800f944:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f946:	429a      	cmp	r2, r3
 800f948:	d002      	beq.n	800f950 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	61bb      	str	r3, [r7, #24]
        continue;
 800f94e:	e016      	b.n	800f97e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	8ada      	ldrh	r2, [r3, #22]
 800f954:	4b1a      	ldr	r3, [pc, #104]	; (800f9c0 <tcp_input+0x49c>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	885b      	ldrh	r3, [r3, #2]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d10c      	bne.n	800f97a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	4b17      	ldr	r3, [pc, #92]	; (800f9c4 <tcp_input+0x4a0>)
 800f966:	695b      	ldr	r3, [r3, #20]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d00f      	beq.n	800f98c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00d      	beq.n	800f98e <tcp_input+0x46a>
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d009      	beq.n	800f98e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	617b      	str	r3, [r7, #20]
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1d1      	bne.n	800f92e <tcp_input+0x40a>
 800f98a:	e000      	b.n	800f98e <tcp_input+0x46a>
            break;
 800f98c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d029      	beq.n	800f9e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00a      	beq.n	800f9b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	68da      	ldr	r2, [r3, #12]
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9a2:	4b10      	ldr	r3, [pc, #64]	; (800f9e4 <tcp_input+0x4c0>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9aa:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <tcp_input+0x4c0>)
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9b0:	6978      	ldr	r0, [r7, #20]
 800f9b2:	f000 fa03 	bl	800fdbc <tcp_listen_input>
      }
      pbuf_free(p);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7fd fc60 	bl	800d27c <pbuf_free>
      return;
 800f9bc:	e1a8      	b.n	800fd10 <tcp_input+0x7ec>
 800f9be:	bf00      	nop
 800f9c0:	20011b70 	.word	0x20011b70
 800f9c4:	20009abc 	.word	0x20009abc
 800f9c8:	0801b720 	.word	0x0801b720
 800f9cc:	0801b84c 	.word	0x0801b84c
 800f9d0:	0801b76c 	.word	0x0801b76c
 800f9d4:	20011b54 	.word	0x20011b54
 800f9d8:	0801b878 	.word	0x0801b878
 800f9dc:	20011b58 	.word	0x20011b58
 800f9e0:	0801b8a4 	.word	0x0801b8a4
 800f9e4:	20011b50 	.word	0x20011b50
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 8158 	beq.w	800fca0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f9f0:	4b95      	ldr	r3, [pc, #596]	; (800fc48 <tcp_input+0x724>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	891a      	ldrh	r2, [r3, #8]
 800f9fa:	4b93      	ldr	r3, [pc, #588]	; (800fc48 <tcp_input+0x724>)
 800f9fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f9fe:	4a92      	ldr	r2, [pc, #584]	; (800fc48 <tcp_input+0x724>)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa04:	4b91      	ldr	r3, [pc, #580]	; (800fc4c <tcp_input+0x728>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a8f      	ldr	r2, [pc, #572]	; (800fc48 <tcp_input+0x724>)
 800fa0a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa0c:	4b90      	ldr	r3, [pc, #576]	; (800fc50 <tcp_input+0x72c>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa12:	4b90      	ldr	r3, [pc, #576]	; (800fc54 <tcp_input+0x730>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa18:	4b8f      	ldr	r3, [pc, #572]	; (800fc58 <tcp_input+0x734>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa1e:	4b8f      	ldr	r3, [pc, #572]	; (800fc5c <tcp_input+0x738>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	f003 0308 	and.w	r3, r3, #8
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d006      	beq.n	800fa38 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	7b5b      	ldrb	r3, [r3, #13]
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	b2da      	uxtb	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d017      	beq.n	800fa70 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa40:	69f8      	ldr	r0, [r7, #28]
 800fa42:	f7ff f85b 	bl	800eafc <tcp_process_refused_data>
 800fa46:	4603      	mov	r3, r0
 800fa48:	f113 0f0d 	cmn.w	r3, #13
 800fa4c:	d007      	beq.n	800fa5e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00c      	beq.n	800fa70 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa56:	4b82      	ldr	r3, [pc, #520]	; (800fc60 <tcp_input+0x73c>)
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d008      	beq.n	800fa70 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f040 80e3 	bne.w	800fc2e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa68:	69f8      	ldr	r0, [r7, #28]
 800fa6a:	f003 fe27 	bl	80136bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa6e:	e0de      	b.n	800fc2e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fa70:	4a7c      	ldr	r2, [pc, #496]	; (800fc64 <tcp_input+0x740>)
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa76:	69f8      	ldr	r0, [r7, #28]
 800fa78:	f000 fb18 	bl	80100ac <tcp_process>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa84:	f113 0f0d 	cmn.w	r3, #13
 800fa88:	f000 80d3 	beq.w	800fc32 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fa8c:	4b71      	ldr	r3, [pc, #452]	; (800fc54 <tcp_input+0x730>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	f003 0308 	and.w	r3, r3, #8
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d015      	beq.n	800fac4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d008      	beq.n	800fab4 <tcp_input+0x590>
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faa8:	69fa      	ldr	r2, [r7, #28]
 800faaa:	6912      	ldr	r2, [r2, #16]
 800faac:	f06f 010d 	mvn.w	r1, #13
 800fab0:	4610      	mov	r0, r2
 800fab2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fab4:	69f9      	ldr	r1, [r7, #28]
 800fab6:	486c      	ldr	r0, [pc, #432]	; (800fc68 <tcp_input+0x744>)
 800fab8:	f7ff fbbc 	bl	800f234 <tcp_pcb_remove>
        tcp_free(pcb);
 800fabc:	69f8      	ldr	r0, [r7, #28]
 800fabe:	f7fd fe89 	bl	800d7d4 <tcp_free>
 800fac2:	e0da      	b.n	800fc7a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fac8:	4b63      	ldr	r3, [pc, #396]	; (800fc58 <tcp_input+0x734>)
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d01d      	beq.n	800fb0c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fad0:	4b61      	ldr	r3, [pc, #388]	; (800fc58 <tcp_input+0x734>)
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00a      	beq.n	800faf6 <tcp_input+0x5d2>
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fae6:	69fa      	ldr	r2, [r7, #28]
 800fae8:	6910      	ldr	r0, [r2, #16]
 800faea:	89fa      	ldrh	r2, [r7, #14]
 800faec:	69f9      	ldr	r1, [r7, #28]
 800faee:	4798      	blx	r3
 800faf0:	4603      	mov	r3, r0
 800faf2:	74fb      	strb	r3, [r7, #19]
 800faf4:	e001      	b.n	800fafa <tcp_input+0x5d6>
 800faf6:	2300      	movs	r3, #0
 800faf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fafa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fafe:	f113 0f0d 	cmn.w	r3, #13
 800fb02:	f000 8098 	beq.w	800fc36 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb06:	4b54      	ldr	r3, [pc, #336]	; (800fc58 <tcp_input+0x734>)
 800fb08:	2200      	movs	r2, #0
 800fb0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb0c:	69f8      	ldr	r0, [r7, #28]
 800fb0e:	f000 f915 	bl	800fd3c <tcp_input_delayed_close>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f040 8090 	bne.w	800fc3a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb1a:	4b4d      	ldr	r3, [pc, #308]	; (800fc50 <tcp_input+0x72c>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d041      	beq.n	800fba6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d006      	beq.n	800fb38 <tcp_input+0x614>
 800fb2a:	4b50      	ldr	r3, [pc, #320]	; (800fc6c <tcp_input+0x748>)
 800fb2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb30:	494f      	ldr	r1, [pc, #316]	; (800fc70 <tcp_input+0x74c>)
 800fb32:	4850      	ldr	r0, [pc, #320]	; (800fc74 <tcp_input+0x750>)
 800fb34:	f006 ff14 	bl	8016960 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	8b5b      	ldrh	r3, [r3, #26]
 800fb3c:	f003 0310 	and.w	r3, r3, #16
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d008      	beq.n	800fb56 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb44:	4b42      	ldr	r3, [pc, #264]	; (800fc50 <tcp_input+0x72c>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fd fb97 	bl	800d27c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb4e:	69f8      	ldr	r0, [r7, #28]
 800fb50:	f7fe f984 	bl	800de5c <tcp_abort>
            goto aborted;
 800fb54:	e091      	b.n	800fc7a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00c      	beq.n	800fb7a <tcp_input+0x656>
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	6918      	ldr	r0, [r3, #16]
 800fb6a:	4b39      	ldr	r3, [pc, #228]	; (800fc50 <tcp_input+0x72c>)
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	2300      	movs	r3, #0
 800fb70:	69f9      	ldr	r1, [r7, #28]
 800fb72:	47a0      	blx	r4
 800fb74:	4603      	mov	r3, r0
 800fb76:	74fb      	strb	r3, [r7, #19]
 800fb78:	e008      	b.n	800fb8c <tcp_input+0x668>
 800fb7a:	4b35      	ldr	r3, [pc, #212]	; (800fc50 <tcp_input+0x72c>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	2300      	movs	r3, #0
 800fb80:	69f9      	ldr	r1, [r7, #28]
 800fb82:	2000      	movs	r0, #0
 800fb84:	f7ff f890 	bl	800eca8 <tcp_recv_null>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb90:	f113 0f0d 	cmn.w	r3, #13
 800fb94:	d053      	beq.n	800fc3e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d003      	beq.n	800fba6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb9e:	4b2c      	ldr	r3, [pc, #176]	; (800fc50 <tcp_input+0x72c>)
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fba6:	4b2b      	ldr	r3, [pc, #172]	; (800fc54 <tcp_input+0x730>)
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	f003 0320 	and.w	r3, r3, #32
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d030      	beq.n	800fc14 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d009      	beq.n	800fbce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbbe:	7b5a      	ldrb	r2, [r3, #13]
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbc4:	f042 0220 	orr.w	r2, r2, #32
 800fbc8:	b2d2      	uxtb	r2, r2
 800fbca:	735a      	strb	r2, [r3, #13]
 800fbcc:	e022      	b.n	800fc14 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbd6:	d005      	beq.n	800fbe4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbdc:	3301      	adds	r3, #1
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00b      	beq.n	800fc06 <tcp_input+0x6e2>
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	6918      	ldr	r0, [r3, #16]
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	69f9      	ldr	r1, [r7, #28]
 800fbfe:	47a0      	blx	r4
 800fc00:	4603      	mov	r3, r0
 800fc02:	74fb      	strb	r3, [r7, #19]
 800fc04:	e001      	b.n	800fc0a <tcp_input+0x6e6>
 800fc06:	2300      	movs	r3, #0
 800fc08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc0e:	f113 0f0d 	cmn.w	r3, #13
 800fc12:	d016      	beq.n	800fc42 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc14:	4b13      	ldr	r3, [pc, #76]	; (800fc64 <tcp_input+0x740>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc1a:	69f8      	ldr	r0, [r7, #28]
 800fc1c:	f000 f88e 	bl	800fd3c <tcp_input_delayed_close>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d128      	bne.n	800fc78 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc26:	69f8      	ldr	r0, [r7, #28]
 800fc28:	f002 ff20 	bl	8012a6c <tcp_output>
 800fc2c:	e025      	b.n	800fc7a <tcp_input+0x756>
        goto aborted;
 800fc2e:	bf00      	nop
 800fc30:	e023      	b.n	800fc7a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc32:	bf00      	nop
 800fc34:	e021      	b.n	800fc7a <tcp_input+0x756>
              goto aborted;
 800fc36:	bf00      	nop
 800fc38:	e01f      	b.n	800fc7a <tcp_input+0x756>
          goto aborted;
 800fc3a:	bf00      	nop
 800fc3c:	e01d      	b.n	800fc7a <tcp_input+0x756>
            goto aborted;
 800fc3e:	bf00      	nop
 800fc40:	e01b      	b.n	800fc7a <tcp_input+0x756>
              goto aborted;
 800fc42:	bf00      	nop
 800fc44:	e019      	b.n	800fc7a <tcp_input+0x756>
 800fc46:	bf00      	nop
 800fc48:	20011b60 	.word	0x20011b60
 800fc4c:	20011b70 	.word	0x20011b70
 800fc50:	20011b90 	.word	0x20011b90
 800fc54:	20011b8d 	.word	0x20011b8d
 800fc58:	20011b88 	.word	0x20011b88
 800fc5c:	20011b8c 	.word	0x20011b8c
 800fc60:	20011b8a 	.word	0x20011b8a
 800fc64:	20011b94 	.word	0x20011b94
 800fc68:	20011b54 	.word	0x20011b54
 800fc6c:	0801b720 	.word	0x0801b720
 800fc70:	0801b8d4 	.word	0x0801b8d4
 800fc74:	0801b76c 	.word	0x0801b76c
          goto aborted;
 800fc78:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc7a:	4b27      	ldr	r3, [pc, #156]	; (800fd18 <tcp_input+0x7f4>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc80:	4b26      	ldr	r3, [pc, #152]	; (800fd1c <tcp_input+0x7f8>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc86:	4b26      	ldr	r3, [pc, #152]	; (800fd20 <tcp_input+0x7fc>)
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d03f      	beq.n	800fd0e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fc8e:	4b24      	ldr	r3, [pc, #144]	; (800fd20 <tcp_input+0x7fc>)
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fd faf2 	bl	800d27c <pbuf_free>
      inseg.p = NULL;
 800fc98:	4b21      	ldr	r3, [pc, #132]	; (800fd20 <tcp_input+0x7fc>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc9e:	e036      	b.n	800fd0e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fca0:	4b20      	ldr	r3, [pc, #128]	; (800fd24 <tcp_input+0x800>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	899b      	ldrh	r3, [r3, #12]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fb fde1 	bl	800b870 <lwip_htons>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	f003 0304 	and.w	r3, r3, #4
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d118      	bne.n	800fcec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcba:	4b1b      	ldr	r3, [pc, #108]	; (800fd28 <tcp_input+0x804>)
 800fcbc:	6819      	ldr	r1, [r3, #0]
 800fcbe:	4b1b      	ldr	r3, [pc, #108]	; (800fd2c <tcp_input+0x808>)
 800fcc0:	881b      	ldrh	r3, [r3, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4b1a      	ldr	r3, [pc, #104]	; (800fd30 <tcp_input+0x80c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcca:	4b16      	ldr	r3, [pc, #88]	; (800fd24 <tcp_input+0x800>)
 800fccc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcce:	885b      	ldrh	r3, [r3, #2]
 800fcd0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcd2:	4a14      	ldr	r2, [pc, #80]	; (800fd24 <tcp_input+0x800>)
 800fcd4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd6:	8812      	ldrh	r2, [r2, #0]
 800fcd8:	b292      	uxth	r2, r2
 800fcda:	9202      	str	r2, [sp, #8]
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	4b15      	ldr	r3, [pc, #84]	; (800fd34 <tcp_input+0x810>)
 800fce0:	9300      	str	r3, [sp, #0]
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <tcp_input+0x814>)
 800fce4:	4602      	mov	r2, r0
 800fce6:	2000      	movs	r0, #0
 800fce8:	f003 fc96 	bl	8013618 <tcp_rst>
    pbuf_free(p);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7fd fac5 	bl	800d27c <pbuf_free>
  return;
 800fcf2:	e00c      	b.n	800fd0e <tcp_input+0x7ea>
    goto dropped;
 800fcf4:	bf00      	nop
 800fcf6:	e006      	b.n	800fd06 <tcp_input+0x7e2>
    goto dropped;
 800fcf8:	bf00      	nop
 800fcfa:	e004      	b.n	800fd06 <tcp_input+0x7e2>
    goto dropped;
 800fcfc:	bf00      	nop
 800fcfe:	e002      	b.n	800fd06 <tcp_input+0x7e2>
      goto dropped;
 800fd00:	bf00      	nop
 800fd02:	e000      	b.n	800fd06 <tcp_input+0x7e2>
      goto dropped;
 800fd04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7fd fab8 	bl	800d27c <pbuf_free>
 800fd0c:	e000      	b.n	800fd10 <tcp_input+0x7ec>
  return;
 800fd0e:	bf00      	nop
}
 800fd10:	3724      	adds	r7, #36	; 0x24
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd90      	pop	{r4, r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20011b94 	.word	0x20011b94
 800fd1c:	20011b90 	.word	0x20011b90
 800fd20:	20011b60 	.word	0x20011b60
 800fd24:	20011b70 	.word	0x20011b70
 800fd28:	20011b84 	.word	0x20011b84
 800fd2c:	20011b8a 	.word	0x20011b8a
 800fd30:	20011b80 	.word	0x20011b80
 800fd34:	20009acc 	.word	0x20009acc
 800fd38:	20009ad0 	.word	0x20009ad0

0800fd3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d106      	bne.n	800fd58 <tcp_input_delayed_close+0x1c>
 800fd4a:	4b17      	ldr	r3, [pc, #92]	; (800fda8 <tcp_input_delayed_close+0x6c>)
 800fd4c:	f240 225a 	movw	r2, #602	; 0x25a
 800fd50:	4916      	ldr	r1, [pc, #88]	; (800fdac <tcp_input_delayed_close+0x70>)
 800fd52:	4817      	ldr	r0, [pc, #92]	; (800fdb0 <tcp_input_delayed_close+0x74>)
 800fd54:	f006 fe04 	bl	8016960 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd58:	4b16      	ldr	r3, [pc, #88]	; (800fdb4 <tcp_input_delayed_close+0x78>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	f003 0310 	and.w	r3, r3, #16
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d01c      	beq.n	800fd9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	8b5b      	ldrh	r3, [r3, #26]
 800fd68:	f003 0310 	and.w	r3, r3, #16
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10d      	bne.n	800fd8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d008      	beq.n	800fd8c <tcp_input_delayed_close+0x50>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	6912      	ldr	r2, [r2, #16]
 800fd84:	f06f 010e 	mvn.w	r1, #14
 800fd88:	4610      	mov	r0, r2
 800fd8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd8c:	6879      	ldr	r1, [r7, #4]
 800fd8e:	480a      	ldr	r0, [pc, #40]	; (800fdb8 <tcp_input_delayed_close+0x7c>)
 800fd90:	f7ff fa50 	bl	800f234 <tcp_pcb_remove>
    tcp_free(pcb);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7fd fd1d 	bl	800d7d4 <tcp_free>
    return 1;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e000      	b.n	800fda0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	0801b720 	.word	0x0801b720
 800fdac:	0801b8f0 	.word	0x0801b8f0
 800fdb0:	0801b76c 	.word	0x0801b76c
 800fdb4:	20011b8d 	.word	0x20011b8d
 800fdb8:	20011b54 	.word	0x20011b54

0800fdbc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdbc:	b590      	push	{r4, r7, lr}
 800fdbe:	b08b      	sub	sp, #44	; 0x2c
 800fdc0:	af04      	add	r7, sp, #16
 800fdc2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fdc4:	4b6f      	ldr	r3, [pc, #444]	; (800ff84 <tcp_listen_input+0x1c8>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	f003 0304 	and.w	r3, r3, #4
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f040 80d2 	bne.w	800ff76 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d106      	bne.n	800fde6 <tcp_listen_input+0x2a>
 800fdd8:	4b6b      	ldr	r3, [pc, #428]	; (800ff88 <tcp_listen_input+0x1cc>)
 800fdda:	f240 2281 	movw	r2, #641	; 0x281
 800fdde:	496b      	ldr	r1, [pc, #428]	; (800ff8c <tcp_listen_input+0x1d0>)
 800fde0:	486b      	ldr	r0, [pc, #428]	; (800ff90 <tcp_listen_input+0x1d4>)
 800fde2:	f006 fdbd 	bl	8016960 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fde6:	4b67      	ldr	r3, [pc, #412]	; (800ff84 <tcp_listen_input+0x1c8>)
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	f003 0310 	and.w	r3, r3, #16
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d019      	beq.n	800fe26 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdf2:	4b68      	ldr	r3, [pc, #416]	; (800ff94 <tcp_listen_input+0x1d8>)
 800fdf4:	6819      	ldr	r1, [r3, #0]
 800fdf6:	4b68      	ldr	r3, [pc, #416]	; (800ff98 <tcp_listen_input+0x1dc>)
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	4b67      	ldr	r3, [pc, #412]	; (800ff9c <tcp_listen_input+0x1e0>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe02:	4b67      	ldr	r3, [pc, #412]	; (800ffa0 <tcp_listen_input+0x1e4>)
 800fe04:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe06:	885b      	ldrh	r3, [r3, #2]
 800fe08:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe0a:	4a65      	ldr	r2, [pc, #404]	; (800ffa0 <tcp_listen_input+0x1e4>)
 800fe0c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe0e:	8812      	ldrh	r2, [r2, #0]
 800fe10:	b292      	uxth	r2, r2
 800fe12:	9202      	str	r2, [sp, #8]
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	4b63      	ldr	r3, [pc, #396]	; (800ffa4 <tcp_listen_input+0x1e8>)
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	4b63      	ldr	r3, [pc, #396]	; (800ffa8 <tcp_listen_input+0x1ec>)
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f003 fbfa 	bl	8013618 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe24:	e0a9      	b.n	800ff7a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe26:	4b57      	ldr	r3, [pc, #348]	; (800ff84 <tcp_listen_input+0x1c8>)
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 0302 	and.w	r3, r3, #2
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f000 80a3 	beq.w	800ff7a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	7d5b      	ldrb	r3, [r3, #21]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff f859 	bl	800eef0 <tcp_alloc>
 800fe3e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d111      	bne.n	800fe6a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00a      	beq.n	800fe64 <tcp_listen_input+0xa8>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	6910      	ldr	r0, [r2, #16]
 800fe56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	4798      	blx	r3
 800fe5e:	4603      	mov	r3, r0
 800fe60:	73bb      	strb	r3, [r7, #14]
      return;
 800fe62:	e08b      	b.n	800ff7c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe64:	23f0      	movs	r3, #240	; 0xf0
 800fe66:	73bb      	strb	r3, [r7, #14]
      return;
 800fe68:	e088      	b.n	800ff7c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe6a:	4b50      	ldr	r3, [pc, #320]	; (800ffac <tcp_listen_input+0x1f0>)
 800fe6c:	695a      	ldr	r2, [r3, #20]
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe72:	4b4e      	ldr	r3, [pc, #312]	; (800ffac <tcp_listen_input+0x1f0>)
 800fe74:	691a      	ldr	r2, [r3, #16]
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	8ada      	ldrh	r2, [r3, #22]
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe82:	4b47      	ldr	r3, [pc, #284]	; (800ffa0 <tcp_listen_input+0x1e4>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	2203      	movs	r2, #3
 800fe92:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe94:	4b41      	ldr	r3, [pc, #260]	; (800ff9c <tcp_listen_input+0x1e0>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	1c5a      	adds	r2, r3, #1
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fea6:	6978      	ldr	r0, [r7, #20]
 800fea8:	f7ff fa58 	bl	800f35c <tcp_next_iss>
 800feac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	693a      	ldr	r2, [r7, #16]
 800feb2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	693a      	ldr	r2, [r7, #16]
 800febe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	693a      	ldr	r2, [r7, #16]
 800fec4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fec6:	4b35      	ldr	r3, [pc, #212]	; (800ff9c <tcp_listen_input+0x1e0>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	1e5a      	subs	r2, r3, #1
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	691a      	ldr	r2, [r3, #16]
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	7a5b      	ldrb	r3, [r3, #9]
 800fee2:	f003 030c 	and.w	r3, r3, #12
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	7a1a      	ldrb	r2, [r3, #8]
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fef4:	4b2e      	ldr	r3, [pc, #184]	; (800ffb0 <tcp_listen_input+0x1f4>)
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	60da      	str	r2, [r3, #12]
 800fefc:	4a2c      	ldr	r2, [pc, #176]	; (800ffb0 <tcp_listen_input+0x1f4>)
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	6013      	str	r3, [r2, #0]
 800ff02:	f003 fd4b 	bl	801399c <tcp_timer_needed>
 800ff06:	4b2b      	ldr	r3, [pc, #172]	; (800ffb4 <tcp_listen_input+0x1f8>)
 800ff08:	2201      	movs	r2, #1
 800ff0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff0c:	6978      	ldr	r0, [r7, #20]
 800ff0e:	f001 fd8f 	bl	8011a30 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff12:	4b23      	ldr	r3, [pc, #140]	; (800ffa0 <tcp_listen_input+0x1e4>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	89db      	ldrh	r3, [r3, #14]
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	3304      	adds	r3, #4
 800ff34:	4618      	mov	r0, r3
 800ff36:	f004 ff85 	bl	8014e44 <ip4_route>
 800ff3a:	4601      	mov	r1, r0
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	3304      	adds	r3, #4
 800ff40:	461a      	mov	r2, r3
 800ff42:	4620      	mov	r0, r4
 800ff44:	f7ff fa30 	bl	800f3a8 <tcp_eff_send_mss_netif>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff50:	2112      	movs	r1, #18
 800ff52:	6978      	ldr	r0, [r7, #20]
 800ff54:	f002 fc9c 	bl	8012890 <tcp_enqueue_flags>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d004      	beq.n	800ff6e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff64:	2100      	movs	r1, #0
 800ff66:	6978      	ldr	r0, [r7, #20]
 800ff68:	f7fd feba 	bl	800dce0 <tcp_abandon>
      return;
 800ff6c:	e006      	b.n	800ff7c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff6e:	6978      	ldr	r0, [r7, #20]
 800ff70:	f002 fd7c 	bl	8012a6c <tcp_output>
  return;
 800ff74:	e001      	b.n	800ff7a <tcp_listen_input+0x1be>
    return;
 800ff76:	bf00      	nop
 800ff78:	e000      	b.n	800ff7c <tcp_listen_input+0x1c0>
  return;
 800ff7a:	bf00      	nop
}
 800ff7c:	371c      	adds	r7, #28
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd90      	pop	{r4, r7, pc}
 800ff82:	bf00      	nop
 800ff84:	20011b8c 	.word	0x20011b8c
 800ff88:	0801b720 	.word	0x0801b720
 800ff8c:	0801b918 	.word	0x0801b918
 800ff90:	0801b76c 	.word	0x0801b76c
 800ff94:	20011b84 	.word	0x20011b84
 800ff98:	20011b8a 	.word	0x20011b8a
 800ff9c:	20011b80 	.word	0x20011b80
 800ffa0:	20011b70 	.word	0x20011b70
 800ffa4:	20009acc 	.word	0x20009acc
 800ffa8:	20009ad0 	.word	0x20009ad0
 800ffac:	20009abc 	.word	0x20009abc
 800ffb0:	20011b54 	.word	0x20011b54
 800ffb4:	20011b5c 	.word	0x20011b5c

0800ffb8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af04      	add	r7, sp, #16
 800ffbe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffc0:	4b2f      	ldr	r3, [pc, #188]	; (8010080 <tcp_timewait_input+0xc8>)
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d153      	bne.n	8010074 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <tcp_timewait_input+0x28>
 800ffd2:	4b2c      	ldr	r3, [pc, #176]	; (8010084 <tcp_timewait_input+0xcc>)
 800ffd4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ffd8:	492b      	ldr	r1, [pc, #172]	; (8010088 <tcp_timewait_input+0xd0>)
 800ffda:	482c      	ldr	r0, [pc, #176]	; (801008c <tcp_timewait_input+0xd4>)
 800ffdc:	f006 fcc0 	bl	8016960 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ffe0:	4b27      	ldr	r3, [pc, #156]	; (8010080 <tcp_timewait_input+0xc8>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	f003 0302 	and.w	r3, r3, #2
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d02a      	beq.n	8010042 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffec:	4b28      	ldr	r3, [pc, #160]	; (8010090 <tcp_timewait_input+0xd8>)
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	db2d      	blt.n	8010056 <tcp_timewait_input+0x9e>
 800fffa:	4b25      	ldr	r3, [pc, #148]	; (8010090 <tcp_timewait_input+0xd8>)
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	6879      	ldr	r1, [r7, #4]
 8010004:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010006:	440b      	add	r3, r1
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	2b00      	cmp	r3, #0
 801000c:	dc23      	bgt.n	8010056 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801000e:	4b21      	ldr	r3, [pc, #132]	; (8010094 <tcp_timewait_input+0xdc>)
 8010010:	6819      	ldr	r1, [r3, #0]
 8010012:	4b21      	ldr	r3, [pc, #132]	; (8010098 <tcp_timewait_input+0xe0>)
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	461a      	mov	r2, r3
 8010018:	4b1d      	ldr	r3, [pc, #116]	; (8010090 <tcp_timewait_input+0xd8>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001e:	4b1f      	ldr	r3, [pc, #124]	; (801009c <tcp_timewait_input+0xe4>)
 8010020:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010022:	885b      	ldrh	r3, [r3, #2]
 8010024:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010026:	4a1d      	ldr	r2, [pc, #116]	; (801009c <tcp_timewait_input+0xe4>)
 8010028:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801002a:	8812      	ldrh	r2, [r2, #0]
 801002c:	b292      	uxth	r2, r2
 801002e:	9202      	str	r2, [sp, #8]
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	4b1b      	ldr	r3, [pc, #108]	; (80100a0 <tcp_timewait_input+0xe8>)
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	4b1b      	ldr	r3, [pc, #108]	; (80100a4 <tcp_timewait_input+0xec>)
 8010038:	4602      	mov	r2, r0
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f003 faec 	bl	8013618 <tcp_rst>
      return;
 8010040:	e01b      	b.n	801007a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010042:	4b0f      	ldr	r3, [pc, #60]	; (8010080 <tcp_timewait_input+0xc8>)
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	f003 0301 	and.w	r3, r3, #1
 801004a:	2b00      	cmp	r3, #0
 801004c:	d003      	beq.n	8010056 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801004e:	4b16      	ldr	r3, [pc, #88]	; (80100a8 <tcp_timewait_input+0xf0>)
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010056:	4b10      	ldr	r3, [pc, #64]	; (8010098 <tcp_timewait_input+0xe0>)
 8010058:	881b      	ldrh	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00c      	beq.n	8010078 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	8b5b      	ldrh	r3, [r3, #26]
 8010062:	f043 0302 	orr.w	r3, r3, #2
 8010066:	b29a      	uxth	r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f002 fcfd 	bl	8012a6c <tcp_output>
  }
  return;
 8010072:	e001      	b.n	8010078 <tcp_timewait_input+0xc0>
    return;
 8010074:	bf00      	nop
 8010076:	e000      	b.n	801007a <tcp_timewait_input+0xc2>
  return;
 8010078:	bf00      	nop
}
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	20011b8c 	.word	0x20011b8c
 8010084:	0801b720 	.word	0x0801b720
 8010088:	0801b938 	.word	0x0801b938
 801008c:	0801b76c 	.word	0x0801b76c
 8010090:	20011b80 	.word	0x20011b80
 8010094:	20011b84 	.word	0x20011b84
 8010098:	20011b8a 	.word	0x20011b8a
 801009c:	20011b70 	.word	0x20011b70
 80100a0:	20009acc 	.word	0x20009acc
 80100a4:	20009ad0 	.word	0x20009ad0
 80100a8:	20011b48 	.word	0x20011b48

080100ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100ac:	b590      	push	{r4, r7, lr}
 80100ae:	b08d      	sub	sp, #52	; 0x34
 80100b0:	af04      	add	r7, sp, #16
 80100b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d106      	bne.n	80100d0 <tcp_process+0x24>
 80100c2:	4b9d      	ldr	r3, [pc, #628]	; (8010338 <tcp_process+0x28c>)
 80100c4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80100c8:	499c      	ldr	r1, [pc, #624]	; (801033c <tcp_process+0x290>)
 80100ca:	489d      	ldr	r0, [pc, #628]	; (8010340 <tcp_process+0x294>)
 80100cc:	f006 fc48 	bl	8016960 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100d0:	4b9c      	ldr	r3, [pc, #624]	; (8010344 <tcp_process+0x298>)
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	f003 0304 	and.w	r3, r3, #4
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d04e      	beq.n	801017a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	7d1b      	ldrb	r3, [r3, #20]
 80100e0:	2b02      	cmp	r3, #2
 80100e2:	d108      	bne.n	80100f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100e8:	4b97      	ldr	r3, [pc, #604]	; (8010348 <tcp_process+0x29c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d123      	bne.n	8010138 <tcp_process+0x8c>
        acceptable = 1;
 80100f0:	2301      	movs	r3, #1
 80100f2:	76fb      	strb	r3, [r7, #27]
 80100f4:	e020      	b.n	8010138 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100fa:	4b94      	ldr	r3, [pc, #592]	; (801034c <tcp_process+0x2a0>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d102      	bne.n	8010108 <tcp_process+0x5c>
        acceptable = 1;
 8010102:	2301      	movs	r3, #1
 8010104:	76fb      	strb	r3, [r7, #27]
 8010106:	e017      	b.n	8010138 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010108:	4b90      	ldr	r3, [pc, #576]	; (801034c <tcp_process+0x2a0>)
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	2b00      	cmp	r3, #0
 8010114:	db10      	blt.n	8010138 <tcp_process+0x8c>
 8010116:	4b8d      	ldr	r3, [pc, #564]	; (801034c <tcp_process+0x2a0>)
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010122:	440b      	add	r3, r1
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	2b00      	cmp	r3, #0
 8010128:	dc06      	bgt.n	8010138 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	8b5b      	ldrh	r3, [r3, #26]
 801012e:	f043 0302 	orr.w	r3, r3, #2
 8010132:	b29a      	uxth	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010138:	7efb      	ldrb	r3, [r7, #27]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d01b      	beq.n	8010176 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	7d1b      	ldrb	r3, [r3, #20]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d106      	bne.n	8010154 <tcp_process+0xa8>
 8010146:	4b7c      	ldr	r3, [pc, #496]	; (8010338 <tcp_process+0x28c>)
 8010148:	f44f 724e 	mov.w	r2, #824	; 0x338
 801014c:	4980      	ldr	r1, [pc, #512]	; (8010350 <tcp_process+0x2a4>)
 801014e:	487c      	ldr	r0, [pc, #496]	; (8010340 <tcp_process+0x294>)
 8010150:	f006 fc06 	bl	8016960 <iprintf>
      recv_flags |= TF_RESET;
 8010154:	4b7f      	ldr	r3, [pc, #508]	; (8010354 <tcp_process+0x2a8>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	f043 0308 	orr.w	r3, r3, #8
 801015c:	b2da      	uxtb	r2, r3
 801015e:	4b7d      	ldr	r3, [pc, #500]	; (8010354 <tcp_process+0x2a8>)
 8010160:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8b5b      	ldrh	r3, [r3, #26]
 8010166:	f023 0301 	bic.w	r3, r3, #1
 801016a:	b29a      	uxth	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010170:	f06f 030d 	mvn.w	r3, #13
 8010174:	e37a      	b.n	801086c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	e378      	b.n	801086c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801017a:	4b72      	ldr	r3, [pc, #456]	; (8010344 <tcp_process+0x298>)
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	2b00      	cmp	r3, #0
 8010184:	d010      	beq.n	80101a8 <tcp_process+0xfc>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	7d1b      	ldrb	r3, [r3, #20]
 801018a:	2b02      	cmp	r3, #2
 801018c:	d00c      	beq.n	80101a8 <tcp_process+0xfc>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	7d1b      	ldrb	r3, [r3, #20]
 8010192:	2b03      	cmp	r3, #3
 8010194:	d008      	beq.n	80101a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	8b5b      	ldrh	r3, [r3, #26]
 801019a:	f043 0302 	orr.w	r3, r3, #2
 801019e:	b29a      	uxth	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80101a4:	2300      	movs	r3, #0
 80101a6:	e361      	b.n	801086c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	8b5b      	ldrh	r3, [r3, #26]
 80101ac:	f003 0310 	and.w	r3, r3, #16
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d103      	bne.n	80101bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101b4:	4b68      	ldr	r3, [pc, #416]	; (8010358 <tcp_process+0x2ac>)
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2200      	movs	r2, #0
 80101c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f001 fc2f 	bl	8011a30 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	7d1b      	ldrb	r3, [r3, #20]
 80101d6:	3b02      	subs	r3, #2
 80101d8:	2b07      	cmp	r3, #7
 80101da:	f200 8337 	bhi.w	801084c <tcp_process+0x7a0>
 80101de:	a201      	add	r2, pc, #4	; (adr r2, 80101e4 <tcp_process+0x138>)
 80101e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e4:	08010205 	.word	0x08010205
 80101e8:	08010435 	.word	0x08010435
 80101ec:	080105ad 	.word	0x080105ad
 80101f0:	080105d7 	.word	0x080105d7
 80101f4:	080106fb 	.word	0x080106fb
 80101f8:	080105ad 	.word	0x080105ad
 80101fc:	08010787 	.word	0x08010787
 8010200:	08010817 	.word	0x08010817
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010204:	4b4f      	ldr	r3, [pc, #316]	; (8010344 <tcp_process+0x298>)
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	f003 0310 	and.w	r3, r3, #16
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 80e4 	beq.w	80103da <tcp_process+0x32e>
 8010212:	4b4c      	ldr	r3, [pc, #304]	; (8010344 <tcp_process+0x298>)
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	f003 0302 	and.w	r3, r3, #2
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 80dd 	beq.w	80103da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	4b48      	ldr	r3, [pc, #288]	; (8010348 <tcp_process+0x29c>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	f040 80d5 	bne.w	80103da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010230:	4b46      	ldr	r3, [pc, #280]	; (801034c <tcp_process+0x2a0>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010242:	4b41      	ldr	r3, [pc, #260]	; (8010348 <tcp_process+0x29c>)
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801024a:	4b44      	ldr	r3, [pc, #272]	; (801035c <tcp_process+0x2b0>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	89db      	ldrh	r3, [r3, #14]
 8010250:	b29a      	uxth	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010264:	4b39      	ldr	r3, [pc, #228]	; (801034c <tcp_process+0x2a0>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	1e5a      	subs	r2, r3, #1
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2204      	movs	r2, #4
 8010272:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3304      	adds	r3, #4
 801027c:	4618      	mov	r0, r3
 801027e:	f004 fde1 	bl	8014e44 <ip4_route>
 8010282:	4601      	mov	r1, r0
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3304      	adds	r3, #4
 8010288:	461a      	mov	r2, r3
 801028a:	4620      	mov	r0, r4
 801028c:	f7ff f88c 	bl	800f3a8 <tcp_eff_send_mss_netif>
 8010290:	4603      	mov	r3, r0
 8010292:	461a      	mov	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801029c:	009a      	lsls	r2, r3, #2
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102a2:	005b      	lsls	r3, r3, #1
 80102a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80102a8:	428b      	cmp	r3, r1
 80102aa:	bf38      	it	cc
 80102ac:	460b      	movcc	r3, r1
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d204      	bcs.n	80102bc <tcp_process+0x210>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	e00d      	b.n	80102d8 <tcp_process+0x22c>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d904      	bls.n	80102d4 <tcp_process+0x228>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102ce:	005b      	lsls	r3, r3, #1
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	e001      	b.n	80102d8 <tcp_process+0x22c>
 80102d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80102d8:	687a      	ldr	r2, [r7, #4]
 80102da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d106      	bne.n	80102f6 <tcp_process+0x24a>
 80102e8:	4b13      	ldr	r3, [pc, #76]	; (8010338 <tcp_process+0x28c>)
 80102ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80102ee:	491c      	ldr	r1, [pc, #112]	; (8010360 <tcp_process+0x2b4>)
 80102f0:	4813      	ldr	r0, [pc, #76]	; (8010340 <tcp_process+0x294>)
 80102f2:	f006 fb35 	bl	8016960 <iprintf>
        --pcb->snd_queuelen;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102fc:	3b01      	subs	r3, #1
 80102fe:	b29a      	uxth	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801030a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d12a      	bne.n	8010368 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010316:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <tcp_process+0x280>
 801031e:	4b06      	ldr	r3, [pc, #24]	; (8010338 <tcp_process+0x28c>)
 8010320:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010324:	490f      	ldr	r1, [pc, #60]	; (8010364 <tcp_process+0x2b8>)
 8010326:	4806      	ldr	r0, [pc, #24]	; (8010340 <tcp_process+0x294>)
 8010328:	f006 fb1a 	bl	8016960 <iprintf>
          pcb->unsent = rseg->next;
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	66da      	str	r2, [r3, #108]	; 0x6c
 8010334:	e01c      	b.n	8010370 <tcp_process+0x2c4>
 8010336:	bf00      	nop
 8010338:	0801b720 	.word	0x0801b720
 801033c:	0801b958 	.word	0x0801b958
 8010340:	0801b76c 	.word	0x0801b76c
 8010344:	20011b8c 	.word	0x20011b8c
 8010348:	20011b84 	.word	0x20011b84
 801034c:	20011b80 	.word	0x20011b80
 8010350:	0801b974 	.word	0x0801b974
 8010354:	20011b8d 	.word	0x20011b8d
 8010358:	20011b48 	.word	0x20011b48
 801035c:	20011b70 	.word	0x20011b70
 8010360:	0801b994 	.word	0x0801b994
 8010364:	0801b9ac 	.word	0x0801b9ac
        } else {
          pcb->unacked = rseg->next;
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010370:	69f8      	ldr	r0, [r7, #28]
 8010372:	f7fe fc54 	bl	800ec1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801037a:	2b00      	cmp	r3, #0
 801037c:	d104      	bne.n	8010388 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010384:	861a      	strh	r2, [r3, #48]	; 0x30
 8010386:	e006      	b.n	8010396 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00a      	beq.n	80103b6 <tcp_process+0x30a>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	6910      	ldr	r0, [r2, #16]
 80103aa:	2200      	movs	r2, #0
 80103ac:	6879      	ldr	r1, [r7, #4]
 80103ae:	4798      	blx	r3
 80103b0:	4603      	mov	r3, r0
 80103b2:	76bb      	strb	r3, [r7, #26]
 80103b4:	e001      	b.n	80103ba <tcp_process+0x30e>
 80103b6:	2300      	movs	r3, #0
 80103b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103be:	f113 0f0d 	cmn.w	r3, #13
 80103c2:	d102      	bne.n	80103ca <tcp_process+0x31e>
          return ERR_ABRT;
 80103c4:	f06f 030c 	mvn.w	r3, #12
 80103c8:	e250      	b.n	801086c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	8b5b      	ldrh	r3, [r3, #26]
 80103ce:	f043 0302 	orr.w	r3, r3, #2
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103d8:	e23a      	b.n	8010850 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103da:	4b98      	ldr	r3, [pc, #608]	; (801063c <tcp_process+0x590>)
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	f003 0310 	and.w	r3, r3, #16
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f000 8234 	beq.w	8010850 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e8:	4b95      	ldr	r3, [pc, #596]	; (8010640 <tcp_process+0x594>)
 80103ea:	6819      	ldr	r1, [r3, #0]
 80103ec:	4b95      	ldr	r3, [pc, #596]	; (8010644 <tcp_process+0x598>)
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	461a      	mov	r2, r3
 80103f2:	4b95      	ldr	r3, [pc, #596]	; (8010648 <tcp_process+0x59c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f8:	4b94      	ldr	r3, [pc, #592]	; (801064c <tcp_process+0x5a0>)
 80103fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103fc:	885b      	ldrh	r3, [r3, #2]
 80103fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010400:	4a92      	ldr	r2, [pc, #584]	; (801064c <tcp_process+0x5a0>)
 8010402:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010404:	8812      	ldrh	r2, [r2, #0]
 8010406:	b292      	uxth	r2, r2
 8010408:	9202      	str	r2, [sp, #8]
 801040a:	9301      	str	r3, [sp, #4]
 801040c:	4b90      	ldr	r3, [pc, #576]	; (8010650 <tcp_process+0x5a4>)
 801040e:	9300      	str	r3, [sp, #0]
 8010410:	4b90      	ldr	r3, [pc, #576]	; (8010654 <tcp_process+0x5a8>)
 8010412:	4602      	mov	r2, r0
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f003 f8ff 	bl	8013618 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010420:	2b05      	cmp	r3, #5
 8010422:	f200 8215 	bhi.w	8010850 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f002 feb9 	bl	80131a4 <tcp_rexmit_rto>
      break;
 8010432:	e20d      	b.n	8010850 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010434:	4b81      	ldr	r3, [pc, #516]	; (801063c <tcp_process+0x590>)
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	f003 0310 	and.w	r3, r3, #16
 801043c:	2b00      	cmp	r3, #0
 801043e:	f000 80a1 	beq.w	8010584 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010442:	4b7f      	ldr	r3, [pc, #508]	; (8010640 <tcp_process+0x594>)
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	3b01      	subs	r3, #1
 801044e:	2b00      	cmp	r3, #0
 8010450:	db7e      	blt.n	8010550 <tcp_process+0x4a4>
 8010452:	4b7b      	ldr	r3, [pc, #492]	; (8010640 <tcp_process+0x594>)
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	2b00      	cmp	r3, #0
 801045e:	dc77      	bgt.n	8010550 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2204      	movs	r2, #4
 8010464:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801046a:	2b00      	cmp	r3, #0
 801046c:	d102      	bne.n	8010474 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801046e:	23fa      	movs	r3, #250	; 0xfa
 8010470:	76bb      	strb	r3, [r7, #26]
 8010472:	e01d      	b.n	80104b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010478:	699b      	ldr	r3, [r3, #24]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <tcp_process+0x3e0>
 801047e:	4b76      	ldr	r3, [pc, #472]	; (8010658 <tcp_process+0x5ac>)
 8010480:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010484:	4975      	ldr	r1, [pc, #468]	; (801065c <tcp_process+0x5b0>)
 8010486:	4876      	ldr	r0, [pc, #472]	; (8010660 <tcp_process+0x5b4>)
 8010488:	f006 fa6a 	bl	8016960 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d00a      	beq.n	80104ac <tcp_process+0x400>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801049a:	699b      	ldr	r3, [r3, #24]
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	6910      	ldr	r0, [r2, #16]
 80104a0:	2200      	movs	r2, #0
 80104a2:	6879      	ldr	r1, [r7, #4]
 80104a4:	4798      	blx	r3
 80104a6:	4603      	mov	r3, r0
 80104a8:	76bb      	strb	r3, [r7, #26]
 80104aa:	e001      	b.n	80104b0 <tcp_process+0x404>
 80104ac:	23f0      	movs	r3, #240	; 0xf0
 80104ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00a      	beq.n	80104ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104bc:	f113 0f0d 	cmn.w	r3, #13
 80104c0:	d002      	beq.n	80104c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7fd fcca 	bl	800de5c <tcp_abort>
            }
            return ERR_ABRT;
 80104c8:	f06f 030c 	mvn.w	r3, #12
 80104cc:	e1ce      	b.n	801086c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 fae0 	bl	8010a94 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104d4:	4b63      	ldr	r3, [pc, #396]	; (8010664 <tcp_process+0x5b8>)
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d005      	beq.n	80104e8 <tcp_process+0x43c>
            recv_acked--;
 80104dc:	4b61      	ldr	r3, [pc, #388]	; (8010664 <tcp_process+0x5b8>)
 80104de:	881b      	ldrh	r3, [r3, #0]
 80104e0:	3b01      	subs	r3, #1
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	4b5f      	ldr	r3, [pc, #380]	; (8010664 <tcp_process+0x5b8>)
 80104e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ec:	009a      	lsls	r2, r3, #2
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104f2:	005b      	lsls	r3, r3, #1
 80104f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80104f8:	428b      	cmp	r3, r1
 80104fa:	bf38      	it	cc
 80104fc:	460b      	movcc	r3, r1
 80104fe:	429a      	cmp	r2, r3
 8010500:	d204      	bcs.n	801050c <tcp_process+0x460>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	b29b      	uxth	r3, r3
 801050a:	e00d      	b.n	8010528 <tcp_process+0x47c>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010510:	005b      	lsls	r3, r3, #1
 8010512:	f241 121c 	movw	r2, #4380	; 0x111c
 8010516:	4293      	cmp	r3, r2
 8010518:	d904      	bls.n	8010524 <tcp_process+0x478>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801051e:	005b      	lsls	r3, r3, #1
 8010520:	b29b      	uxth	r3, r3
 8010522:	e001      	b.n	8010528 <tcp_process+0x47c>
 8010524:	f241 131c 	movw	r3, #4380	; 0x111c
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801052e:	4b4e      	ldr	r3, [pc, #312]	; (8010668 <tcp_process+0x5bc>)
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	f003 0320 	and.w	r3, r3, #32
 8010536:	2b00      	cmp	r3, #0
 8010538:	d037      	beq.n	80105aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	8b5b      	ldrh	r3, [r3, #26]
 801053e:	f043 0302 	orr.w	r3, r3, #2
 8010542:	b29a      	uxth	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2207      	movs	r2, #7
 801054c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801054e:	e02c      	b.n	80105aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010550:	4b3b      	ldr	r3, [pc, #236]	; (8010640 <tcp_process+0x594>)
 8010552:	6819      	ldr	r1, [r3, #0]
 8010554:	4b3b      	ldr	r3, [pc, #236]	; (8010644 <tcp_process+0x598>)
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	4b3b      	ldr	r3, [pc, #236]	; (8010648 <tcp_process+0x59c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010560:	4b3a      	ldr	r3, [pc, #232]	; (801064c <tcp_process+0x5a0>)
 8010562:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010564:	885b      	ldrh	r3, [r3, #2]
 8010566:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010568:	4a38      	ldr	r2, [pc, #224]	; (801064c <tcp_process+0x5a0>)
 801056a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801056c:	8812      	ldrh	r2, [r2, #0]
 801056e:	b292      	uxth	r2, r2
 8010570:	9202      	str	r2, [sp, #8]
 8010572:	9301      	str	r3, [sp, #4]
 8010574:	4b36      	ldr	r3, [pc, #216]	; (8010650 <tcp_process+0x5a4>)
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	4b36      	ldr	r3, [pc, #216]	; (8010654 <tcp_process+0x5a8>)
 801057a:	4602      	mov	r2, r0
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f003 f84b 	bl	8013618 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010582:	e167      	b.n	8010854 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010584:	4b2d      	ldr	r3, [pc, #180]	; (801063c <tcp_process+0x590>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	f003 0302 	and.w	r3, r3, #2
 801058c:	2b00      	cmp	r3, #0
 801058e:	f000 8161 	beq.w	8010854 <tcp_process+0x7a8>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	1e5a      	subs	r2, r3, #1
 8010598:	4b2b      	ldr	r3, [pc, #172]	; (8010648 <tcp_process+0x59c>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	429a      	cmp	r2, r3
 801059e:	f040 8159 	bne.w	8010854 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f002 fe20 	bl	80131e8 <tcp_rexmit>
      break;
 80105a8:	e154      	b.n	8010854 <tcp_process+0x7a8>
 80105aa:	e153      	b.n	8010854 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 fa71 	bl	8010a94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105b2:	4b2d      	ldr	r3, [pc, #180]	; (8010668 <tcp_process+0x5bc>)
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	f003 0320 	and.w	r3, r3, #32
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 814c 	beq.w	8010858 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	8b5b      	ldrh	r3, [r3, #26]
 80105c4:	f043 0302 	orr.w	r3, r3, #2
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2207      	movs	r2, #7
 80105d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105d4:	e140      	b.n	8010858 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 fa5c 	bl	8010a94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105dc:	4b22      	ldr	r3, [pc, #136]	; (8010668 <tcp_process+0x5bc>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 0320 	and.w	r3, r3, #32
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d071      	beq.n	80106cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105e8:	4b14      	ldr	r3, [pc, #80]	; (801063c <tcp_process+0x590>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	f003 0310 	and.w	r3, r3, #16
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d060      	beq.n	80106b6 <tcp_process+0x60a>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105f8:	4b11      	ldr	r3, [pc, #68]	; (8010640 <tcp_process+0x594>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d15a      	bne.n	80106b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010604:	2b00      	cmp	r3, #0
 8010606:	d156      	bne.n	80106b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	8b5b      	ldrh	r3, [r3, #26]
 801060c:	f043 0302 	orr.w	r3, r3, #2
 8010610:	b29a      	uxth	r2, r3
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fe fdbc 	bl	800f194 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801061c:	4b13      	ldr	r3, [pc, #76]	; (801066c <tcp_process+0x5c0>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d105      	bne.n	8010632 <tcp_process+0x586>
 8010626:	4b11      	ldr	r3, [pc, #68]	; (801066c <tcp_process+0x5c0>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68db      	ldr	r3, [r3, #12]
 801062c:	4a0f      	ldr	r2, [pc, #60]	; (801066c <tcp_process+0x5c0>)
 801062e:	6013      	str	r3, [r2, #0]
 8010630:	e02e      	b.n	8010690 <tcp_process+0x5e4>
 8010632:	4b0e      	ldr	r3, [pc, #56]	; (801066c <tcp_process+0x5c0>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e027      	b.n	801068a <tcp_process+0x5de>
 801063a:	bf00      	nop
 801063c:	20011b8c 	.word	0x20011b8c
 8010640:	20011b84 	.word	0x20011b84
 8010644:	20011b8a 	.word	0x20011b8a
 8010648:	20011b80 	.word	0x20011b80
 801064c:	20011b70 	.word	0x20011b70
 8010650:	20009acc 	.word	0x20009acc
 8010654:	20009ad0 	.word	0x20009ad0
 8010658:	0801b720 	.word	0x0801b720
 801065c:	0801b9c0 	.word	0x0801b9c0
 8010660:	0801b76c 	.word	0x0801b76c
 8010664:	20011b88 	.word	0x20011b88
 8010668:	20011b8d 	.word	0x20011b8d
 801066c:	20011b54 	.word	0x20011b54
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	429a      	cmp	r2, r3
 8010678:	d104      	bne.n	8010684 <tcp_process+0x5d8>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	68da      	ldr	r2, [r3, #12]
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	60da      	str	r2, [r3, #12]
 8010682:	e005      	b.n	8010690 <tcp_process+0x5e4>
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	617b      	str	r3, [r7, #20]
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1ef      	bne.n	8010670 <tcp_process+0x5c4>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	60da      	str	r2, [r3, #12]
 8010696:	4b77      	ldr	r3, [pc, #476]	; (8010874 <tcp_process+0x7c8>)
 8010698:	2201      	movs	r2, #1
 801069a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	220a      	movs	r2, #10
 80106a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80106a2:	4b75      	ldr	r3, [pc, #468]	; (8010878 <tcp_process+0x7cc>)
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	60da      	str	r2, [r3, #12]
 80106aa:	4a73      	ldr	r2, [pc, #460]	; (8010878 <tcp_process+0x7cc>)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6013      	str	r3, [r2, #0]
 80106b0:	f003 f974 	bl	801399c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106b4:	e0d2      	b.n	801085c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	8b5b      	ldrh	r3, [r3, #26]
 80106ba:	f043 0302 	orr.w	r3, r3, #2
 80106be:	b29a      	uxth	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2208      	movs	r2, #8
 80106c8:	751a      	strb	r2, [r3, #20]
      break;
 80106ca:	e0c7      	b.n	801085c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106cc:	4b6b      	ldr	r3, [pc, #428]	; (801087c <tcp_process+0x7d0>)
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	f003 0310 	and.w	r3, r3, #16
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 80c1 	beq.w	801085c <tcp_process+0x7b0>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106de:	4b68      	ldr	r3, [pc, #416]	; (8010880 <tcp_process+0x7d4>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	f040 80ba 	bne.w	801085c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f040 80b5 	bne.w	801085c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2206      	movs	r2, #6
 80106f6:	751a      	strb	r2, [r3, #20]
      break;
 80106f8:	e0b0      	b.n	801085c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 f9ca 	bl	8010a94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010700:	4b60      	ldr	r3, [pc, #384]	; (8010884 <tcp_process+0x7d8>)
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	f003 0320 	and.w	r3, r3, #32
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 80a9 	beq.w	8010860 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	8b5b      	ldrh	r3, [r3, #26]
 8010712:	f043 0302 	orr.w	r3, r3, #2
 8010716:	b29a      	uxth	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7fe fd39 	bl	800f194 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010722:	4b59      	ldr	r3, [pc, #356]	; (8010888 <tcp_process+0x7dc>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	429a      	cmp	r2, r3
 801072a:	d105      	bne.n	8010738 <tcp_process+0x68c>
 801072c:	4b56      	ldr	r3, [pc, #344]	; (8010888 <tcp_process+0x7dc>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	4a55      	ldr	r2, [pc, #340]	; (8010888 <tcp_process+0x7dc>)
 8010734:	6013      	str	r3, [r2, #0]
 8010736:	e013      	b.n	8010760 <tcp_process+0x6b4>
 8010738:	4b53      	ldr	r3, [pc, #332]	; (8010888 <tcp_process+0x7dc>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	613b      	str	r3, [r7, #16]
 801073e:	e00c      	b.n	801075a <tcp_process+0x6ae>
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	429a      	cmp	r2, r3
 8010748:	d104      	bne.n	8010754 <tcp_process+0x6a8>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	68da      	ldr	r2, [r3, #12]
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	60da      	str	r2, [r3, #12]
 8010752:	e005      	b.n	8010760 <tcp_process+0x6b4>
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	613b      	str	r3, [r7, #16]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d1ef      	bne.n	8010740 <tcp_process+0x694>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	60da      	str	r2, [r3, #12]
 8010766:	4b43      	ldr	r3, [pc, #268]	; (8010874 <tcp_process+0x7c8>)
 8010768:	2201      	movs	r2, #1
 801076a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	220a      	movs	r2, #10
 8010770:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010772:	4b41      	ldr	r3, [pc, #260]	; (8010878 <tcp_process+0x7cc>)
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	60da      	str	r2, [r3, #12]
 801077a:	4a3f      	ldr	r2, [pc, #252]	; (8010878 <tcp_process+0x7cc>)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6013      	str	r3, [r2, #0]
 8010780:	f003 f90c 	bl	801399c <tcp_timer_needed>
      }
      break;
 8010784:	e06c      	b.n	8010860 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f984 	bl	8010a94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801078c:	4b3b      	ldr	r3, [pc, #236]	; (801087c <tcp_process+0x7d0>)
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	f003 0310 	and.w	r3, r3, #16
 8010794:	2b00      	cmp	r3, #0
 8010796:	d065      	beq.n	8010864 <tcp_process+0x7b8>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801079c:	4b38      	ldr	r3, [pc, #224]	; (8010880 <tcp_process+0x7d4>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d15f      	bne.n	8010864 <tcp_process+0x7b8>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d15b      	bne.n	8010864 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7fe fcf1 	bl	800f194 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107b2:	4b35      	ldr	r3, [pc, #212]	; (8010888 <tcp_process+0x7dc>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d105      	bne.n	80107c8 <tcp_process+0x71c>
 80107bc:	4b32      	ldr	r3, [pc, #200]	; (8010888 <tcp_process+0x7dc>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	4a31      	ldr	r2, [pc, #196]	; (8010888 <tcp_process+0x7dc>)
 80107c4:	6013      	str	r3, [r2, #0]
 80107c6:	e013      	b.n	80107f0 <tcp_process+0x744>
 80107c8:	4b2f      	ldr	r3, [pc, #188]	; (8010888 <tcp_process+0x7dc>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	60fb      	str	r3, [r7, #12]
 80107ce:	e00c      	b.n	80107ea <tcp_process+0x73e>
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d104      	bne.n	80107e4 <tcp_process+0x738>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	68da      	ldr	r2, [r3, #12]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	60da      	str	r2, [r3, #12]
 80107e2:	e005      	b.n	80107f0 <tcp_process+0x744>
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	60fb      	str	r3, [r7, #12]
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1ef      	bne.n	80107d0 <tcp_process+0x724>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	60da      	str	r2, [r3, #12]
 80107f6:	4b1f      	ldr	r3, [pc, #124]	; (8010874 <tcp_process+0x7c8>)
 80107f8:	2201      	movs	r2, #1
 80107fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	220a      	movs	r2, #10
 8010800:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010802:	4b1d      	ldr	r3, [pc, #116]	; (8010878 <tcp_process+0x7cc>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	60da      	str	r2, [r3, #12]
 801080a:	4a1b      	ldr	r2, [pc, #108]	; (8010878 <tcp_process+0x7cc>)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6013      	str	r3, [r2, #0]
 8010810:	f003 f8c4 	bl	801399c <tcp_timer_needed>
      }
      break;
 8010814:	e026      	b.n	8010864 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 f93c 	bl	8010a94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801081c:	4b17      	ldr	r3, [pc, #92]	; (801087c <tcp_process+0x7d0>)
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	f003 0310 	and.w	r3, r3, #16
 8010824:	2b00      	cmp	r3, #0
 8010826:	d01f      	beq.n	8010868 <tcp_process+0x7bc>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801082c:	4b14      	ldr	r3, [pc, #80]	; (8010880 <tcp_process+0x7d4>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	429a      	cmp	r2, r3
 8010832:	d119      	bne.n	8010868 <tcp_process+0x7bc>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010838:	2b00      	cmp	r3, #0
 801083a:	d115      	bne.n	8010868 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801083c:	4b11      	ldr	r3, [pc, #68]	; (8010884 <tcp_process+0x7d8>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	f043 0310 	orr.w	r3, r3, #16
 8010844:	b2da      	uxtb	r2, r3
 8010846:	4b0f      	ldr	r3, [pc, #60]	; (8010884 <tcp_process+0x7d8>)
 8010848:	701a      	strb	r2, [r3, #0]
      }
      break;
 801084a:	e00d      	b.n	8010868 <tcp_process+0x7bc>
    default:
      break;
 801084c:	bf00      	nop
 801084e:	e00c      	b.n	801086a <tcp_process+0x7be>
      break;
 8010850:	bf00      	nop
 8010852:	e00a      	b.n	801086a <tcp_process+0x7be>
      break;
 8010854:	bf00      	nop
 8010856:	e008      	b.n	801086a <tcp_process+0x7be>
      break;
 8010858:	bf00      	nop
 801085a:	e006      	b.n	801086a <tcp_process+0x7be>
      break;
 801085c:	bf00      	nop
 801085e:	e004      	b.n	801086a <tcp_process+0x7be>
      break;
 8010860:	bf00      	nop
 8010862:	e002      	b.n	801086a <tcp_process+0x7be>
      break;
 8010864:	bf00      	nop
 8010866:	e000      	b.n	801086a <tcp_process+0x7be>
      break;
 8010868:	bf00      	nop
  }
  return ERR_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3724      	adds	r7, #36	; 0x24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd90      	pop	{r4, r7, pc}
 8010874:	20011b5c 	.word	0x20011b5c
 8010878:	20011b58 	.word	0x20011b58
 801087c:	20011b8c 	.word	0x20011b8c
 8010880:	20011b84 	.word	0x20011b84
 8010884:	20011b8d 	.word	0x20011b8d
 8010888:	20011b54 	.word	0x20011b54

0801088c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801088c:	b590      	push	{r4, r7, lr}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <tcp_oos_insert_segment+0x1e>
 801089c:	4b3b      	ldr	r3, [pc, #236]	; (801098c <tcp_oos_insert_segment+0x100>)
 801089e:	f240 421f 	movw	r2, #1055	; 0x41f
 80108a2:	493b      	ldr	r1, [pc, #236]	; (8010990 <tcp_oos_insert_segment+0x104>)
 80108a4:	483b      	ldr	r0, [pc, #236]	; (8010994 <tcp_oos_insert_segment+0x108>)
 80108a6:	f006 f85b 	bl	8016960 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	899b      	ldrh	r3, [r3, #12]
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fa ffdc 	bl	800b870 <lwip_htons>
 80108b8:	4603      	mov	r3, r0
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	f003 0301 	and.w	r3, r3, #1
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d028      	beq.n	8010916 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108c4:	6838      	ldr	r0, [r7, #0]
 80108c6:	f7fe f995 	bl	800ebf4 <tcp_segs_free>
    next = NULL;
 80108ca:	2300      	movs	r3, #0
 80108cc:	603b      	str	r3, [r7, #0]
 80108ce:	e056      	b.n	801097e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	899b      	ldrh	r3, [r3, #12]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fa ffc9 	bl	800b870 <lwip_htons>
 80108de:	4603      	mov	r3, r0
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00d      	beq.n	8010906 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	899b      	ldrh	r3, [r3, #12]
 80108f0:	b29c      	uxth	r4, r3
 80108f2:	2001      	movs	r0, #1
 80108f4:	f7fa ffbc 	bl	800b870 <lwip_htons>
 80108f8:	4603      	mov	r3, r0
 80108fa:	461a      	mov	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	4322      	orrs	r2, r4
 8010902:	b292      	uxth	r2, r2
 8010904:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f7fe f984 	bl	800ec1e <tcp_seg_free>
    while (next &&
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00e      	beq.n	801093a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	891b      	ldrh	r3, [r3, #8]
 8010920:	461a      	mov	r2, r3
 8010922:	4b1d      	ldr	r3, [pc, #116]	; (8010998 <tcp_oos_insert_segment+0x10c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	441a      	add	r2, r3
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	8909      	ldrh	r1, [r1, #8]
 8010932:	440b      	add	r3, r1
 8010934:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010936:	2b00      	cmp	r3, #0
 8010938:	daca      	bge.n	80108d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d01e      	beq.n	801097e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	891b      	ldrh	r3, [r3, #8]
 8010944:	461a      	mov	r2, r3
 8010946:	4b14      	ldr	r3, [pc, #80]	; (8010998 <tcp_oos_insert_segment+0x10c>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	441a      	add	r2, r3
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010954:	2b00      	cmp	r3, #0
 8010956:	dd12      	ble.n	801097e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	b29a      	uxth	r2, r3
 8010960:	4b0d      	ldr	r3, [pc, #52]	; (8010998 <tcp_oos_insert_segment+0x10c>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	b29b      	uxth	r3, r3
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	b29a      	uxth	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	685a      	ldr	r2, [r3, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	891b      	ldrh	r3, [r3, #8]
 8010976:	4619      	mov	r1, r3
 8010978:	4610      	mov	r0, r2
 801097a:	f7fc faf9 	bl	800cf70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	601a      	str	r2, [r3, #0]
}
 8010984:	bf00      	nop
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	bd90      	pop	{r4, r7, pc}
 801098c:	0801b720 	.word	0x0801b720
 8010990:	0801b9e0 	.word	0x0801b9e0
 8010994:	0801b76c 	.word	0x0801b76c
 8010998:	20011b80 	.word	0x20011b80

0801099c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801099c:	b5b0      	push	{r4, r5, r7, lr}
 801099e:	b086      	sub	sp, #24
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109aa:	e03e      	b.n	8010a2a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fc fcec 	bl	800d398 <pbuf_clen>
 80109c0:	4603      	mov	r3, r0
 80109c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109ca:	8a7a      	ldrh	r2, [r7, #18]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d906      	bls.n	80109de <tcp_free_acked_segments+0x42>
 80109d0:	4b2a      	ldr	r3, [pc, #168]	; (8010a7c <tcp_free_acked_segments+0xe0>)
 80109d2:	f240 4257 	movw	r2, #1111	; 0x457
 80109d6:	492a      	ldr	r1, [pc, #168]	; (8010a80 <tcp_free_acked_segments+0xe4>)
 80109d8:	482a      	ldr	r0, [pc, #168]	; (8010a84 <tcp_free_acked_segments+0xe8>)
 80109da:	f005 ffc1 	bl	8016960 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80109e4:	8a7b      	ldrh	r3, [r7, #18]
 80109e6:	1ad3      	subs	r3, r2, r3
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	891a      	ldrh	r2, [r3, #8]
 80109f4:	4b24      	ldr	r3, [pc, #144]	; (8010a88 <tcp_free_acked_segments+0xec>)
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	4413      	add	r3, r2
 80109fa:	b29a      	uxth	r2, r3
 80109fc:	4b22      	ldr	r3, [pc, #136]	; (8010a88 <tcp_free_acked_segments+0xec>)
 80109fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010a00:	6978      	ldr	r0, [r7, #20]
 8010a02:	f7fe f90c 	bl	800ec1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d00c      	beq.n	8010a2a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d109      	bne.n	8010a2a <tcp_free_acked_segments+0x8e>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d106      	bne.n	8010a2a <tcp_free_acked_segments+0x8e>
 8010a1c:	4b17      	ldr	r3, [pc, #92]	; (8010a7c <tcp_free_acked_segments+0xe0>)
 8010a1e:	f240 4261 	movw	r2, #1121	; 0x461
 8010a22:	491a      	ldr	r1, [pc, #104]	; (8010a8c <tcp_free_acked_segments+0xf0>)
 8010a24:	4817      	ldr	r0, [pc, #92]	; (8010a84 <tcp_free_acked_segments+0xe8>)
 8010a26:	f005 ff9b 	bl	8016960 <iprintf>
  while (seg_list != NULL &&
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d020      	beq.n	8010a72 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fa ff2f 	bl	800b89a <lwip_htonl>
 8010a3c:	4604      	mov	r4, r0
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	891b      	ldrh	r3, [r3, #8]
 8010a42:	461d      	mov	r5, r3
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	899b      	ldrh	r3, [r3, #12]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fa ff0f 	bl	800b870 <lwip_htons>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 0303 	and.w	r3, r3, #3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <tcp_free_acked_segments+0xc6>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e000      	b.n	8010a64 <tcp_free_acked_segments+0xc8>
 8010a62:	2300      	movs	r3, #0
 8010a64:	442b      	add	r3, r5
 8010a66:	18e2      	adds	r2, r4, r3
 8010a68:	4b09      	ldr	r3, [pc, #36]	; (8010a90 <tcp_free_acked_segments+0xf4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	dd9c      	ble.n	80109ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a72:	68bb      	ldr	r3, [r7, #8]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3718      	adds	r7, #24
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8010a7c:	0801b720 	.word	0x0801b720
 8010a80:	0801ba08 	.word	0x0801ba08
 8010a84:	0801b76c 	.word	0x0801b76c
 8010a88:	20011b88 	.word	0x20011b88
 8010a8c:	0801ba30 	.word	0x0801ba30
 8010a90:	20011b84 	.word	0x20011b84

08010a94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010a94:	b5b0      	push	{r4, r5, r7, lr}
 8010a96:	b094      	sub	sp, #80	; 0x50
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <tcp_receive+0x20>
 8010aa6:	4b91      	ldr	r3, [pc, #580]	; (8010cec <tcp_receive+0x258>)
 8010aa8:	f240 427b 	movw	r2, #1147	; 0x47b
 8010aac:	4990      	ldr	r1, [pc, #576]	; (8010cf0 <tcp_receive+0x25c>)
 8010aae:	4891      	ldr	r0, [pc, #580]	; (8010cf4 <tcp_receive+0x260>)
 8010ab0:	f005 ff56 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	7d1b      	ldrb	r3, [r3, #20]
 8010ab8:	2b03      	cmp	r3, #3
 8010aba:	d806      	bhi.n	8010aca <tcp_receive+0x36>
 8010abc:	4b8b      	ldr	r3, [pc, #556]	; (8010cec <tcp_receive+0x258>)
 8010abe:	f240 427c 	movw	r2, #1148	; 0x47c
 8010ac2:	498d      	ldr	r1, [pc, #564]	; (8010cf8 <tcp_receive+0x264>)
 8010ac4:	488b      	ldr	r0, [pc, #556]	; (8010cf4 <tcp_receive+0x260>)
 8010ac6:	f005 ff4b 	bl	8016960 <iprintf>

  if (flags & TCP_ACK) {
 8010aca:	4b8c      	ldr	r3, [pc, #560]	; (8010cfc <tcp_receive+0x268>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	f003 0310 	and.w	r3, r3, #16
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 8264 	beq.w	8010fa0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ade:	461a      	mov	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ae4:	4413      	add	r3, r2
 8010ae6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010aec:	4b84      	ldr	r3, [pc, #528]	; (8010d00 <tcp_receive+0x26c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	1ad3      	subs	r3, r2, r3
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	db1b      	blt.n	8010b2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010afa:	4b81      	ldr	r3, [pc, #516]	; (8010d00 <tcp_receive+0x26c>)
 8010afc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d106      	bne.n	8010b10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b06:	4b7f      	ldr	r3, [pc, #508]	; (8010d04 <tcp_receive+0x270>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	db0e      	blt.n	8010b2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b14:	4b7b      	ldr	r3, [pc, #492]	; (8010d04 <tcp_receive+0x270>)
 8010b16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d125      	bne.n	8010b68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b1c:	4b7a      	ldr	r3, [pc, #488]	; (8010d08 <tcp_receive+0x274>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	89db      	ldrh	r3, [r3, #14]
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d91c      	bls.n	8010b68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b2e:	4b76      	ldr	r3, [pc, #472]	; (8010d08 <tcp_receive+0x274>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	89db      	ldrh	r3, [r3, #14]
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d205      	bcs.n	8010b58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b58:	4b69      	ldr	r3, [pc, #420]	; (8010d00 <tcp_receive+0x26c>)
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b60:	4b68      	ldr	r3, [pc, #416]	; (8010d04 <tcp_receive+0x270>)
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b68:	4b66      	ldr	r3, [pc, #408]	; (8010d04 <tcp_receive+0x270>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	dc58      	bgt.n	8010c28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b76:	4b65      	ldr	r3, [pc, #404]	; (8010d0c <tcp_receive+0x278>)
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d14b      	bne.n	8010c16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010b88:	4413      	add	r3, r2
 8010b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d142      	bne.n	8010c16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	db3d      	blt.n	8010c16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b9e:	4b59      	ldr	r3, [pc, #356]	; (8010d04 <tcp_receive+0x270>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d137      	bne.n	8010c16 <tcp_receive+0x182>
              found_dupack = 1;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bb0:	2bff      	cmp	r3, #255	; 0xff
 8010bb2:	d007      	beq.n	8010bc4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bba:	3301      	adds	r3, #1
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bca:	2b03      	cmp	r3, #3
 8010bcc:	d91b      	bls.n	8010c06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd8:	4413      	add	r3, r2
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d30a      	bcc.n	8010bfc <tcp_receive+0x168>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bf0:	4413      	add	r3, r2
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bfa:	e004      	b.n	8010c06 <tcp_receive+0x172>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d902      	bls.n	8010c16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f002 fb55 	bl	80132c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f040 8161 	bne.w	8010ee0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c26:	e15b      	b.n	8010ee0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c28:	4b36      	ldr	r3, [pc, #216]	; (8010d04 <tcp_receive+0x270>)
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	3b01      	subs	r3, #1
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f2c0 814e 	blt.w	8010ed6 <tcp_receive+0x442>
 8010c3a:	4b32      	ldr	r3, [pc, #200]	; (8010d04 <tcp_receive+0x270>)
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f300 8146 	bgt.w	8010ed6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8b5b      	ldrh	r3, [r3, #26]
 8010c4e:	f003 0304 	and.w	r3, r3, #4
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d010      	beq.n	8010c78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	8b5b      	ldrh	r3, [r3, #26]
 8010c5a:	f023 0304 	bic.w	r3, r3, #4
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c86:	10db      	asrs	r3, r3, #3
 8010c88:	b21b      	sxth	r3, r3
 8010c8a:	b29a      	uxth	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	4413      	add	r3, r2
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	b21a      	sxth	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010ca0:	4b18      	ldr	r3, [pc, #96]	; (8010d04 <tcp_receive+0x270>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	b29a      	uxth	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010cb8:	4b12      	ldr	r3, [pc, #72]	; (8010d04 <tcp_receive+0x270>)
 8010cba:	681a      	ldr	r2, [r3, #0]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	7d1b      	ldrb	r3, [r3, #20]
 8010cc4:	2b03      	cmp	r3, #3
 8010cc6:	f240 8097 	bls.w	8010df8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d245      	bcs.n	8010d66 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	8b5b      	ldrh	r3, [r3, #26]
 8010cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d014      	beq.n	8010d10 <tcp_receive+0x27c>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e013      	b.n	8010d12 <tcp_receive+0x27e>
 8010cea:	bf00      	nop
 8010cec:	0801b720 	.word	0x0801b720
 8010cf0:	0801ba50 	.word	0x0801ba50
 8010cf4:	0801b76c 	.word	0x0801b76c
 8010cf8:	0801ba6c 	.word	0x0801ba6c
 8010cfc:	20011b8c 	.word	0x20011b8c
 8010d00:	20011b80 	.word	0x20011b80
 8010d04:	20011b84 	.word	0x20011b84
 8010d08:	20011b70 	.word	0x20011b70
 8010d0c:	20011b8a 	.word	0x20011b8a
 8010d10:	2302      	movs	r3, #2
 8010d12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d20:	fb12 f303 	smulbb	r3, r2, r3
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	bf28      	it	cs
 8010d2c:	4613      	movcs	r3, r2
 8010d2e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d38:	4413      	add	r3, r2
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d309      	bcc.n	8010d5a <tcp_receive+0x2c6>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d4e:	4413      	add	r3, r2
 8010d50:	b29a      	uxth	r2, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d58:	e04e      	b.n	8010df8 <tcp_receive+0x364>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d64:	e048      	b.n	8010df8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d6e:	4413      	add	r3, r2
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d309      	bcc.n	8010d90 <tcp_receive+0x2fc>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d84:	4413      	add	r3, r2
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d8e:	e004      	b.n	8010d9a <tcp_receive+0x306>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d326      	bcc.n	8010df8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dca:	4413      	add	r3, r2
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d30a      	bcc.n	8010dee <tcp_receive+0x35a>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de2:	4413      	add	r3, r2
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010dec:	e004      	b.n	8010df8 <tcp_receive+0x364>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010df4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e00:	4a98      	ldr	r2, [pc, #608]	; (8011064 <tcp_receive+0x5d0>)
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff fdca 	bl	801099c <tcp_free_acked_segments>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e16:	4a94      	ldr	r2, [pc, #592]	; (8011068 <tcp_receive+0x5d4>)
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff fdbf 	bl	801099c <tcp_free_acked_segments>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d104      	bne.n	8010e36 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e32:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e34:	e002      	b.n	8010e3c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d103      	bne.n	8010e52 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e58:	4b84      	ldr	r3, [pc, #528]	; (801106c <tcp_receive+0x5d8>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d035      	beq.n	8010ede <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d118      	bne.n	8010eac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00c      	beq.n	8010e9c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fa fd03 	bl	800b89a <lwip_htonl>
 8010e94:	4603      	mov	r3, r0
 8010e96:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	dc20      	bgt.n	8010ede <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	8b5b      	ldrh	r3, [r3, #26]
 8010ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010eaa:	e018      	b.n	8010ede <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7fa fcee 	bl	800b89a <lwip_htonl>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	1ae3      	subs	r3, r4, r3
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dc0b      	bgt.n	8010ede <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	8b5b      	ldrh	r3, [r3, #26]
 8010eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ed4:	e003      	b.n	8010ede <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f002 fbf0 	bl	80136bc <tcp_send_empty_ack>
 8010edc:	e000      	b.n	8010ee0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ede:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d05b      	beq.n	8010fa0 <tcp_receive+0x50c>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010eec:	4b60      	ldr	r3, [pc, #384]	; (8011070 <tcp_receive+0x5dc>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	da54      	bge.n	8010fa0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010ef6:	4b5f      	ldr	r3, [pc, #380]	; (8011074 <tcp_receive+0x5e0>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f14:	10db      	asrs	r3, r3, #3
 8010f16:	b21b      	sxth	r3, r3
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f2e:	4413      	add	r3, r2
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	b21a      	sxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	da05      	bge.n	8010f4c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f44:	425b      	negs	r3, r3
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f4c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f56:	109b      	asrs	r3, r3, #2
 8010f58:	b21b      	sxth	r3, r3
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f70:	4413      	add	r3, r2
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	b21a      	sxth	r2, r3
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f80:	10db      	asrs	r3, r3, #3
 8010f82:	b21b      	sxth	r3, r3
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	4413      	add	r3, r2
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	b21a      	sxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010fa0:	4b35      	ldr	r3, [pc, #212]	; (8011078 <tcp_receive+0x5e4>)
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 84e2 	beq.w	801196e <tcp_receive+0xeda>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	7d1b      	ldrb	r3, [r3, #20]
 8010fae:	2b06      	cmp	r3, #6
 8010fb0:	f200 84dd 	bhi.w	801196e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fb8:	4b30      	ldr	r3, [pc, #192]	; (801107c <tcp_receive+0x5e8>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	1ad3      	subs	r3, r2, r3
 8010fbe:	3b01      	subs	r3, #1
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f2c0 808f 	blt.w	80110e4 <tcp_receive+0x650>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fca:	4b2b      	ldr	r3, [pc, #172]	; (8011078 <tcp_receive+0x5e4>)
 8010fcc:	881b      	ldrh	r3, [r3, #0]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	4b2a      	ldr	r3, [pc, #168]	; (801107c <tcp_receive+0x5e8>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	440b      	add	r3, r1
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	3301      	adds	r3, #1
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f300 8082 	bgt.w	80110e4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010fe0:	4b27      	ldr	r3, [pc, #156]	; (8011080 <tcp_receive+0x5ec>)
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fea:	4b24      	ldr	r3, [pc, #144]	; (801107c <tcp_receive+0x5e8>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010ff2:	4b23      	ldr	r3, [pc, #140]	; (8011080 <tcp_receive+0x5ec>)
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <tcp_receive+0x574>
 8010ffa:	4b22      	ldr	r3, [pc, #136]	; (8011084 <tcp_receive+0x5f0>)
 8010ffc:	f240 5294 	movw	r2, #1428	; 0x594
 8011000:	4921      	ldr	r1, [pc, #132]	; (8011088 <tcp_receive+0x5f4>)
 8011002:	4822      	ldr	r0, [pc, #136]	; (801108c <tcp_receive+0x5f8>)
 8011004:	f005 fcac 	bl	8016960 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801100e:	4293      	cmp	r3, r2
 8011010:	d906      	bls.n	8011020 <tcp_receive+0x58c>
 8011012:	4b1c      	ldr	r3, [pc, #112]	; (8011084 <tcp_receive+0x5f0>)
 8011014:	f240 5295 	movw	r2, #1429	; 0x595
 8011018:	491d      	ldr	r1, [pc, #116]	; (8011090 <tcp_receive+0x5fc>)
 801101a:	481c      	ldr	r0, [pc, #112]	; (801108c <tcp_receive+0x5f8>)
 801101c:	f005 fca0 	bl	8016960 <iprintf>
      off = (u16_t)off32;
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011022:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011026:	4b16      	ldr	r3, [pc, #88]	; (8011080 <tcp_receive+0x5ec>)
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	891b      	ldrh	r3, [r3, #8]
 801102c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011030:	429a      	cmp	r2, r3
 8011032:	d906      	bls.n	8011042 <tcp_receive+0x5ae>
 8011034:	4b13      	ldr	r3, [pc, #76]	; (8011084 <tcp_receive+0x5f0>)
 8011036:	f240 5297 	movw	r2, #1431	; 0x597
 801103a:	4916      	ldr	r1, [pc, #88]	; (8011094 <tcp_receive+0x600>)
 801103c:	4813      	ldr	r0, [pc, #76]	; (801108c <tcp_receive+0x5f8>)
 801103e:	f005 fc8f 	bl	8016960 <iprintf>
      inseg.len -= off;
 8011042:	4b0f      	ldr	r3, [pc, #60]	; (8011080 <tcp_receive+0x5ec>)
 8011044:	891a      	ldrh	r2, [r3, #8]
 8011046:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801104a:	1ad3      	subs	r3, r2, r3
 801104c:	b29a      	uxth	r2, r3
 801104e:	4b0c      	ldr	r3, [pc, #48]	; (8011080 <tcp_receive+0x5ec>)
 8011050:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011052:	4b0b      	ldr	r3, [pc, #44]	; (8011080 <tcp_receive+0x5ec>)
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	891a      	ldrh	r2, [r3, #8]
 8011058:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011060:	e02a      	b.n	80110b8 <tcp_receive+0x624>
 8011062:	bf00      	nop
 8011064:	0801ba88 	.word	0x0801ba88
 8011068:	0801ba90 	.word	0x0801ba90
 801106c:	20011b88 	.word	0x20011b88
 8011070:	20011b84 	.word	0x20011b84
 8011074:	20011b48 	.word	0x20011b48
 8011078:	20011b8a 	.word	0x20011b8a
 801107c:	20011b80 	.word	0x20011b80
 8011080:	20011b60 	.word	0x20011b60
 8011084:	0801b720 	.word	0x0801b720
 8011088:	0801ba98 	.word	0x0801ba98
 801108c:	0801b76c 	.word	0x0801b76c
 8011090:	0801baa8 	.word	0x0801baa8
 8011094:	0801bab8 	.word	0x0801bab8
        off -= p->len;
 8011098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109a:	895b      	ldrh	r3, [r3, #10]
 801109c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80110a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ae:	2200      	movs	r2, #0
 80110b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80110b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ba:	895b      	ldrh	r3, [r3, #10]
 80110bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d8e9      	bhi.n	8011098 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110c8:	4619      	mov	r1, r3
 80110ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80110cc:	f7fc f850 	bl	800d170 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d4:	4a91      	ldr	r2, [pc, #580]	; (801131c <tcp_receive+0x888>)
 80110d6:	6013      	str	r3, [r2, #0]
 80110d8:	4b91      	ldr	r3, [pc, #580]	; (8011320 <tcp_receive+0x88c>)
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	4a8f      	ldr	r2, [pc, #572]	; (801131c <tcp_receive+0x888>)
 80110de:	6812      	ldr	r2, [r2, #0]
 80110e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80110e2:	e00d      	b.n	8011100 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80110e4:	4b8d      	ldr	r3, [pc, #564]	; (801131c <tcp_receive+0x888>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	da06      	bge.n	8011100 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	8b5b      	ldrh	r3, [r3, #26]
 80110f6:	f043 0302 	orr.w	r3, r3, #2
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011100:	4b86      	ldr	r3, [pc, #536]	; (801131c <tcp_receive+0x888>)
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	2b00      	cmp	r3, #0
 801110c:	f2c0 842a 	blt.w	8011964 <tcp_receive+0xed0>
 8011110:	4b82      	ldr	r3, [pc, #520]	; (801131c <tcp_receive+0x888>)
 8011112:	681a      	ldr	r2, [r3, #0]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011118:	6879      	ldr	r1, [r7, #4]
 801111a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801111c:	440b      	add	r3, r1
 801111e:	1ad3      	subs	r3, r2, r3
 8011120:	3301      	adds	r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	f300 841e 	bgt.w	8011964 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801112c:	4b7b      	ldr	r3, [pc, #492]	; (801131c <tcp_receive+0x888>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	429a      	cmp	r2, r3
 8011132:	f040 829a 	bne.w	801166a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011136:	4b7a      	ldr	r3, [pc, #488]	; (8011320 <tcp_receive+0x88c>)
 8011138:	891c      	ldrh	r4, [r3, #8]
 801113a:	4b79      	ldr	r3, [pc, #484]	; (8011320 <tcp_receive+0x88c>)
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	899b      	ldrh	r3, [r3, #12]
 8011140:	b29b      	uxth	r3, r3
 8011142:	4618      	mov	r0, r3
 8011144:	f7fa fb94 	bl	800b870 <lwip_htons>
 8011148:	4603      	mov	r3, r0
 801114a:	b2db      	uxtb	r3, r3
 801114c:	f003 0303 	and.w	r3, r3, #3
 8011150:	2b00      	cmp	r3, #0
 8011152:	d001      	beq.n	8011158 <tcp_receive+0x6c4>
 8011154:	2301      	movs	r3, #1
 8011156:	e000      	b.n	801115a <tcp_receive+0x6c6>
 8011158:	2300      	movs	r3, #0
 801115a:	4423      	add	r3, r4
 801115c:	b29a      	uxth	r2, r3
 801115e:	4b71      	ldr	r3, [pc, #452]	; (8011324 <tcp_receive+0x890>)
 8011160:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011166:	4b6f      	ldr	r3, [pc, #444]	; (8011324 <tcp_receive+0x890>)
 8011168:	881b      	ldrh	r3, [r3, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	d275      	bcs.n	801125a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801116e:	4b6c      	ldr	r3, [pc, #432]	; (8011320 <tcp_receive+0x88c>)
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	899b      	ldrh	r3, [r3, #12]
 8011174:	b29b      	uxth	r3, r3
 8011176:	4618      	mov	r0, r3
 8011178:	f7fa fb7a 	bl	800b870 <lwip_htons>
 801117c:	4603      	mov	r3, r0
 801117e:	b2db      	uxtb	r3, r3
 8011180:	f003 0301 	and.w	r3, r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	d01f      	beq.n	80111c8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011188:	4b65      	ldr	r3, [pc, #404]	; (8011320 <tcp_receive+0x88c>)
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	899b      	ldrh	r3, [r3, #12]
 801118e:	b29b      	uxth	r3, r3
 8011190:	b21b      	sxth	r3, r3
 8011192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011196:	b21c      	sxth	r4, r3
 8011198:	4b61      	ldr	r3, [pc, #388]	; (8011320 <tcp_receive+0x88c>)
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	899b      	ldrh	r3, [r3, #12]
 801119e:	b29b      	uxth	r3, r3
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fa fb65 	bl	800b870 <lwip_htons>
 80111a6:	4603      	mov	r3, r0
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fa fb5c 	bl	800b870 <lwip_htons>
 80111b8:	4603      	mov	r3, r0
 80111ba:	b21b      	sxth	r3, r3
 80111bc:	4323      	orrs	r3, r4
 80111be:	b21a      	sxth	r2, r3
 80111c0:	4b57      	ldr	r3, [pc, #348]	; (8011320 <tcp_receive+0x88c>)
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	b292      	uxth	r2, r2
 80111c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111cc:	4b54      	ldr	r3, [pc, #336]	; (8011320 <tcp_receive+0x88c>)
 80111ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111d0:	4b53      	ldr	r3, [pc, #332]	; (8011320 <tcp_receive+0x88c>)
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	899b      	ldrh	r3, [r3, #12]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	4618      	mov	r0, r3
 80111da:	f7fa fb49 	bl	800b870 <lwip_htons>
 80111de:	4603      	mov	r3, r0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	f003 0302 	and.w	r3, r3, #2
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d005      	beq.n	80111f6 <tcp_receive+0x762>
            inseg.len -= 1;
 80111ea:	4b4d      	ldr	r3, [pc, #308]	; (8011320 <tcp_receive+0x88c>)
 80111ec:	891b      	ldrh	r3, [r3, #8]
 80111ee:	3b01      	subs	r3, #1
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	4b4b      	ldr	r3, [pc, #300]	; (8011320 <tcp_receive+0x88c>)
 80111f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80111f6:	4b4a      	ldr	r3, [pc, #296]	; (8011320 <tcp_receive+0x88c>)
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	4a49      	ldr	r2, [pc, #292]	; (8011320 <tcp_receive+0x88c>)
 80111fc:	8912      	ldrh	r2, [r2, #8]
 80111fe:	4611      	mov	r1, r2
 8011200:	4618      	mov	r0, r3
 8011202:	f7fb feb5 	bl	800cf70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011206:	4b46      	ldr	r3, [pc, #280]	; (8011320 <tcp_receive+0x88c>)
 8011208:	891c      	ldrh	r4, [r3, #8]
 801120a:	4b45      	ldr	r3, [pc, #276]	; (8011320 <tcp_receive+0x88c>)
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fa fb2c 	bl	800b870 <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 0303 	and.w	r3, r3, #3
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <tcp_receive+0x794>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <tcp_receive+0x796>
 8011228:	2300      	movs	r3, #0
 801122a:	4423      	add	r3, r4
 801122c:	b29a      	uxth	r2, r3
 801122e:	4b3d      	ldr	r3, [pc, #244]	; (8011324 <tcp_receive+0x890>)
 8011230:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011232:	4b3c      	ldr	r3, [pc, #240]	; (8011324 <tcp_receive+0x890>)
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	4b38      	ldr	r3, [pc, #224]	; (801131c <tcp_receive+0x888>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	441a      	add	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011242:	6879      	ldr	r1, [r7, #4]
 8011244:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011246:	440b      	add	r3, r1
 8011248:	429a      	cmp	r2, r3
 801124a:	d006      	beq.n	801125a <tcp_receive+0x7c6>
 801124c:	4b36      	ldr	r3, [pc, #216]	; (8011328 <tcp_receive+0x894>)
 801124e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011252:	4936      	ldr	r1, [pc, #216]	; (801132c <tcp_receive+0x898>)
 8011254:	4836      	ldr	r0, [pc, #216]	; (8011330 <tcp_receive+0x89c>)
 8011256:	f005 fb83 	bl	8016960 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801125e:	2b00      	cmp	r3, #0
 8011260:	f000 80e7 	beq.w	8011432 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011264:	4b2e      	ldr	r3, [pc, #184]	; (8011320 <tcp_receive+0x88c>)
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	899b      	ldrh	r3, [r3, #12]
 801126a:	b29b      	uxth	r3, r3
 801126c:	4618      	mov	r0, r3
 801126e:	f7fa faff 	bl	800b870 <lwip_htons>
 8011272:	4603      	mov	r3, r0
 8011274:	b2db      	uxtb	r3, r3
 8011276:	f003 0301 	and.w	r3, r3, #1
 801127a:	2b00      	cmp	r3, #0
 801127c:	d010      	beq.n	80112a0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801127e:	e00a      	b.n	8011296 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011284:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	f7fd fcc4 	bl	800ec1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801129a:	2b00      	cmp	r3, #0
 801129c:	d1f0      	bne.n	8011280 <tcp_receive+0x7ec>
 801129e:	e0c8      	b.n	8011432 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80112a6:	e052      	b.n	801134e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	899b      	ldrh	r3, [r3, #12]
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7fa fadd 	bl	800b870 <lwip_htons>
 80112b6:	4603      	mov	r3, r0
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	f003 0301 	and.w	r3, r3, #1
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d03d      	beq.n	801133e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112c2:	4b17      	ldr	r3, [pc, #92]	; (8011320 <tcp_receive+0x88c>)
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	899b      	ldrh	r3, [r3, #12]
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fa fad0 	bl	800b870 <lwip_htons>
 80112d0:	4603      	mov	r3, r0
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d130      	bne.n	801133e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112dc:	4b10      	ldr	r3, [pc, #64]	; (8011320 <tcp_receive+0x88c>)
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	899b      	ldrh	r3, [r3, #12]
 80112e2:	b29c      	uxth	r4, r3
 80112e4:	2001      	movs	r0, #1
 80112e6:	f7fa fac3 	bl	800b870 <lwip_htons>
 80112ea:	4603      	mov	r3, r0
 80112ec:	461a      	mov	r2, r3
 80112ee:	4b0c      	ldr	r3, [pc, #48]	; (8011320 <tcp_receive+0x88c>)
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	4322      	orrs	r2, r4
 80112f4:	b292      	uxth	r2, r2
 80112f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80112f8:	4b09      	ldr	r3, [pc, #36]	; (8011320 <tcp_receive+0x88c>)
 80112fa:	891c      	ldrh	r4, [r3, #8]
 80112fc:	4b08      	ldr	r3, [pc, #32]	; (8011320 <tcp_receive+0x88c>)
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	b29b      	uxth	r3, r3
 8011304:	4618      	mov	r0, r3
 8011306:	f7fa fab3 	bl	800b870 <lwip_htons>
 801130a:	4603      	mov	r3, r0
 801130c:	b2db      	uxtb	r3, r3
 801130e:	f003 0303 	and.w	r3, r3, #3
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00e      	beq.n	8011334 <tcp_receive+0x8a0>
 8011316:	2301      	movs	r3, #1
 8011318:	e00d      	b.n	8011336 <tcp_receive+0x8a2>
 801131a:	bf00      	nop
 801131c:	20011b80 	.word	0x20011b80
 8011320:	20011b60 	.word	0x20011b60
 8011324:	20011b8a 	.word	0x20011b8a
 8011328:	0801b720 	.word	0x0801b720
 801132c:	0801bac8 	.word	0x0801bac8
 8011330:	0801b76c 	.word	0x0801b76c
 8011334:	2300      	movs	r3, #0
 8011336:	4423      	add	r3, r4
 8011338:	b29a      	uxth	r2, r3
 801133a:	4b98      	ldr	r3, [pc, #608]	; (801159c <tcp_receive+0xb08>)
 801133c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801133e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011340:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011348:	6938      	ldr	r0, [r7, #16]
 801134a:	f7fd fc68 	bl	800ec1e <tcp_seg_free>
            while (next &&
 801134e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00e      	beq.n	8011372 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011354:	4b91      	ldr	r3, [pc, #580]	; (801159c <tcp_receive+0xb08>)
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	461a      	mov	r2, r3
 801135a:	4b91      	ldr	r3, [pc, #580]	; (80115a0 <tcp_receive+0xb0c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	441a      	add	r2, r3
 8011360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011368:	8909      	ldrh	r1, [r1, #8]
 801136a:	440b      	add	r3, r1
 801136c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801136e:	2b00      	cmp	r3, #0
 8011370:	da9a      	bge.n	80112a8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011374:	2b00      	cmp	r3, #0
 8011376:	d059      	beq.n	801142c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011378:	4b88      	ldr	r3, [pc, #544]	; (801159c <tcp_receive+0xb08>)
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	461a      	mov	r2, r3
 801137e:	4b88      	ldr	r3, [pc, #544]	; (80115a0 <tcp_receive+0xb0c>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	441a      	add	r2, r3
 8011384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801138c:	2b00      	cmp	r3, #0
 801138e:	dd4d      	ble.n	801142c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	b29a      	uxth	r2, r3
 8011398:	4b81      	ldr	r3, [pc, #516]	; (80115a0 <tcp_receive+0xb0c>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	b29b      	uxth	r3, r3
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	4b80      	ldr	r3, [pc, #512]	; (80115a4 <tcp_receive+0xb10>)
 80113a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113a6:	4b7f      	ldr	r3, [pc, #508]	; (80115a4 <tcp_receive+0xb10>)
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fa fa5e 	bl	800b870 <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	f003 0302 	and.w	r3, r3, #2
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d005      	beq.n	80113cc <tcp_receive+0x938>
                inseg.len -= 1;
 80113c0:	4b78      	ldr	r3, [pc, #480]	; (80115a4 <tcp_receive+0xb10>)
 80113c2:	891b      	ldrh	r3, [r3, #8]
 80113c4:	3b01      	subs	r3, #1
 80113c6:	b29a      	uxth	r2, r3
 80113c8:	4b76      	ldr	r3, [pc, #472]	; (80115a4 <tcp_receive+0xb10>)
 80113ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113cc:	4b75      	ldr	r3, [pc, #468]	; (80115a4 <tcp_receive+0xb10>)
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4a74      	ldr	r2, [pc, #464]	; (80115a4 <tcp_receive+0xb10>)
 80113d2:	8912      	ldrh	r2, [r2, #8]
 80113d4:	4611      	mov	r1, r2
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fb fdca 	bl	800cf70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113dc:	4b71      	ldr	r3, [pc, #452]	; (80115a4 <tcp_receive+0xb10>)
 80113de:	891c      	ldrh	r4, [r3, #8]
 80113e0:	4b70      	ldr	r3, [pc, #448]	; (80115a4 <tcp_receive+0xb10>)
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	899b      	ldrh	r3, [r3, #12]
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7fa fa41 	bl	800b870 <lwip_htons>
 80113ee:	4603      	mov	r3, r0
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	f003 0303 	and.w	r3, r3, #3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <tcp_receive+0x96a>
 80113fa:	2301      	movs	r3, #1
 80113fc:	e000      	b.n	8011400 <tcp_receive+0x96c>
 80113fe:	2300      	movs	r3, #0
 8011400:	4423      	add	r3, r4
 8011402:	b29a      	uxth	r2, r3
 8011404:	4b65      	ldr	r3, [pc, #404]	; (801159c <tcp_receive+0xb08>)
 8011406:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011408:	4b64      	ldr	r3, [pc, #400]	; (801159c <tcp_receive+0xb08>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	461a      	mov	r2, r3
 801140e:	4b64      	ldr	r3, [pc, #400]	; (80115a0 <tcp_receive+0xb0c>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	441a      	add	r2, r3
 8011414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	429a      	cmp	r2, r3
 801141c:	d006      	beq.n	801142c <tcp_receive+0x998>
 801141e:	4b62      	ldr	r3, [pc, #392]	; (80115a8 <tcp_receive+0xb14>)
 8011420:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011424:	4961      	ldr	r1, [pc, #388]	; (80115ac <tcp_receive+0xb18>)
 8011426:	4862      	ldr	r0, [pc, #392]	; (80115b0 <tcp_receive+0xb1c>)
 8011428:	f005 fa9a 	bl	8016960 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011430:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011432:	4b5a      	ldr	r3, [pc, #360]	; (801159c <tcp_receive+0xb08>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	461a      	mov	r2, r3
 8011438:	4b59      	ldr	r3, [pc, #356]	; (80115a0 <tcp_receive+0xb0c>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	441a      	add	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011446:	4b55      	ldr	r3, [pc, #340]	; (801159c <tcp_receive+0xb08>)
 8011448:	881b      	ldrh	r3, [r3, #0]
 801144a:	429a      	cmp	r2, r3
 801144c:	d206      	bcs.n	801145c <tcp_receive+0x9c8>
 801144e:	4b56      	ldr	r3, [pc, #344]	; (80115a8 <tcp_receive+0xb14>)
 8011450:	f240 6207 	movw	r2, #1543	; 0x607
 8011454:	4957      	ldr	r1, [pc, #348]	; (80115b4 <tcp_receive+0xb20>)
 8011456:	4856      	ldr	r0, [pc, #344]	; (80115b0 <tcp_receive+0xb1c>)
 8011458:	f005 fa82 	bl	8016960 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011460:	4b4e      	ldr	r3, [pc, #312]	; (801159c <tcp_receive+0xb08>)
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	b29a      	uxth	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7fc fd99 	bl	800dfa4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011472:	4b4c      	ldr	r3, [pc, #304]	; (80115a4 <tcp_receive+0xb10>)
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	891b      	ldrh	r3, [r3, #8]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d006      	beq.n	801148a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801147c:	4b49      	ldr	r3, [pc, #292]	; (80115a4 <tcp_receive+0xb10>)
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	4a4d      	ldr	r2, [pc, #308]	; (80115b8 <tcp_receive+0xb24>)
 8011482:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011484:	4b47      	ldr	r3, [pc, #284]	; (80115a4 <tcp_receive+0xb10>)
 8011486:	2200      	movs	r2, #0
 8011488:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801148a:	4b46      	ldr	r3, [pc, #280]	; (80115a4 <tcp_receive+0xb10>)
 801148c:	68db      	ldr	r3, [r3, #12]
 801148e:	899b      	ldrh	r3, [r3, #12]
 8011490:	b29b      	uxth	r3, r3
 8011492:	4618      	mov	r0, r3
 8011494:	f7fa f9ec 	bl	800b870 <lwip_htons>
 8011498:	4603      	mov	r3, r0
 801149a:	b2db      	uxtb	r3, r3
 801149c:	f003 0301 	and.w	r3, r3, #1
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f000 80b8 	beq.w	8011616 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80114a6:	4b45      	ldr	r3, [pc, #276]	; (80115bc <tcp_receive+0xb28>)
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	f043 0320 	orr.w	r3, r3, #32
 80114ae:	b2da      	uxtb	r2, r3
 80114b0:	4b42      	ldr	r3, [pc, #264]	; (80115bc <tcp_receive+0xb28>)
 80114b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114b4:	e0af      	b.n	8011616 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	4a36      	ldr	r2, [pc, #216]	; (80115a0 <tcp_receive+0xb0c>)
 80114c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	891b      	ldrh	r3, [r3, #8]
 80114cc:	461c      	mov	r4, r3
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	899b      	ldrh	r3, [r3, #12]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fa f9ca 	bl	800b870 <lwip_htons>
 80114dc:	4603      	mov	r3, r0
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	f003 0303 	and.w	r3, r3, #3
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d001      	beq.n	80114ec <tcp_receive+0xa58>
 80114e8:	2301      	movs	r3, #1
 80114ea:	e000      	b.n	80114ee <tcp_receive+0xa5a>
 80114ec:	2300      	movs	r3, #0
 80114ee:	191a      	adds	r2, r3, r4
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f4:	441a      	add	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114fe:	461c      	mov	r4, r3
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	891b      	ldrh	r3, [r3, #8]
 8011504:	461d      	mov	r5, r3
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	899b      	ldrh	r3, [r3, #12]
 801150c:	b29b      	uxth	r3, r3
 801150e:	4618      	mov	r0, r3
 8011510:	f7fa f9ae 	bl	800b870 <lwip_htons>
 8011514:	4603      	mov	r3, r0
 8011516:	b2db      	uxtb	r3, r3
 8011518:	f003 0303 	and.w	r3, r3, #3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <tcp_receive+0xa90>
 8011520:	2301      	movs	r3, #1
 8011522:	e000      	b.n	8011526 <tcp_receive+0xa92>
 8011524:	2300      	movs	r3, #0
 8011526:	442b      	add	r3, r5
 8011528:	429c      	cmp	r4, r3
 801152a:	d206      	bcs.n	801153a <tcp_receive+0xaa6>
 801152c:	4b1e      	ldr	r3, [pc, #120]	; (80115a8 <tcp_receive+0xb14>)
 801152e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011532:	4923      	ldr	r1, [pc, #140]	; (80115c0 <tcp_receive+0xb2c>)
 8011534:	481e      	ldr	r0, [pc, #120]	; (80115b0 <tcp_receive+0xb1c>)
 8011536:	f005 fa13 	bl	8016960 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	891b      	ldrh	r3, [r3, #8]
 801153e:	461c      	mov	r4, r3
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	899b      	ldrh	r3, [r3, #12]
 8011546:	b29b      	uxth	r3, r3
 8011548:	4618      	mov	r0, r3
 801154a:	f7fa f991 	bl	800b870 <lwip_htons>
 801154e:	4603      	mov	r3, r0
 8011550:	b2db      	uxtb	r3, r3
 8011552:	f003 0303 	and.w	r3, r3, #3
 8011556:	2b00      	cmp	r3, #0
 8011558:	d001      	beq.n	801155e <tcp_receive+0xaca>
 801155a:	2301      	movs	r3, #1
 801155c:	e000      	b.n	8011560 <tcp_receive+0xacc>
 801155e:	2300      	movs	r3, #0
 8011560:	1919      	adds	r1, r3, r4
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011566:	b28b      	uxth	r3, r1
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	b29a      	uxth	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f7fc fd17 	bl	800dfa4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	891b      	ldrh	r3, [r3, #8]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d028      	beq.n	80115d2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011580:	4b0d      	ldr	r3, [pc, #52]	; (80115b8 <tcp_receive+0xb24>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d01d      	beq.n	80115c4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011588:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <tcp_receive+0xb24>)
 801158a:	681a      	ldr	r2, [r3, #0]
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	4619      	mov	r1, r3
 8011592:	4610      	mov	r0, r2
 8011594:	f7fb ff40 	bl	800d418 <pbuf_cat>
 8011598:	e018      	b.n	80115cc <tcp_receive+0xb38>
 801159a:	bf00      	nop
 801159c:	20011b8a 	.word	0x20011b8a
 80115a0:	20011b80 	.word	0x20011b80
 80115a4:	20011b60 	.word	0x20011b60
 80115a8:	0801b720 	.word	0x0801b720
 80115ac:	0801bb00 	.word	0x0801bb00
 80115b0:	0801b76c 	.word	0x0801b76c
 80115b4:	0801bb3c 	.word	0x0801bb3c
 80115b8:	20011b90 	.word	0x20011b90
 80115bc:	20011b8d 	.word	0x20011b8d
 80115c0:	0801bb5c 	.word	0x0801bb5c
            } else {
              recv_data = cseg->p;
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	4a70      	ldr	r2, [pc, #448]	; (801178c <tcp_receive+0xcf8>)
 80115ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	2200      	movs	r2, #0
 80115d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	899b      	ldrh	r3, [r3, #12]
 80115d8:	b29b      	uxth	r3, r3
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fa f948 	bl	800b870 <lwip_htons>
 80115e0:	4603      	mov	r3, r0
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00d      	beq.n	8011608 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80115ec:	4b68      	ldr	r3, [pc, #416]	; (8011790 <tcp_receive+0xcfc>)
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	f043 0320 	orr.w	r3, r3, #32
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	4b66      	ldr	r3, [pc, #408]	; (8011790 <tcp_receive+0xcfc>)
 80115f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	7d1b      	ldrb	r3, [r3, #20]
 80115fe:	2b04      	cmp	r3, #4
 8011600:	d102      	bne.n	8011608 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2207      	movs	r2, #7
 8011606:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011610:	68b8      	ldr	r0, [r7, #8]
 8011612:	f7fd fb04 	bl	800ec1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801161a:	2b00      	cmp	r3, #0
 801161c:	d008      	beq.n	8011630 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801162a:	429a      	cmp	r2, r3
 801162c:	f43f af43 	beq.w	80114b6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	8b5b      	ldrh	r3, [r3, #26]
 8011634:	f003 0301 	and.w	r3, r3, #1
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00e      	beq.n	801165a <tcp_receive+0xbc6>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	8b5b      	ldrh	r3, [r3, #26]
 8011640:	f023 0301 	bic.w	r3, r3, #1
 8011644:	b29a      	uxth	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	835a      	strh	r2, [r3, #26]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	8b5b      	ldrh	r3, [r3, #26]
 801164e:	f043 0302 	orr.w	r3, r3, #2
 8011652:	b29a      	uxth	r2, r3
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011658:	e188      	b.n	801196c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	8b5b      	ldrh	r3, [r3, #26]
 801165e:	f043 0301 	orr.w	r3, r3, #1
 8011662:	b29a      	uxth	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011668:	e180      	b.n	801196c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801166e:	2b00      	cmp	r3, #0
 8011670:	d106      	bne.n	8011680 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011672:	4848      	ldr	r0, [pc, #288]	; (8011794 <tcp_receive+0xd00>)
 8011674:	f7fd faec 	bl	800ec50 <tcp_seg_copy>
 8011678:	4602      	mov	r2, r0
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	675a      	str	r2, [r3, #116]	; 0x74
 801167e:	e16d      	b.n	801195c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011680:	2300      	movs	r3, #0
 8011682:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011688:	63bb      	str	r3, [r7, #56]	; 0x38
 801168a:	e157      	b.n	801193c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801168c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	685a      	ldr	r2, [r3, #4]
 8011692:	4b41      	ldr	r3, [pc, #260]	; (8011798 <tcp_receive+0xd04>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	429a      	cmp	r2, r3
 8011698:	d11d      	bne.n	80116d6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801169a:	4b3e      	ldr	r3, [pc, #248]	; (8011794 <tcp_receive+0xd00>)
 801169c:	891a      	ldrh	r2, [r3, #8]
 801169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a0:	891b      	ldrh	r3, [r3, #8]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	f240 814f 	bls.w	8011946 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116a8:	483a      	ldr	r0, [pc, #232]	; (8011794 <tcp_receive+0xd00>)
 80116aa:	f7fd fad1 	bl	800ec50 <tcp_seg_copy>
 80116ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f000 8149 	beq.w	801194a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80116b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d003      	beq.n	80116c6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80116be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	601a      	str	r2, [r3, #0]
 80116c4:	e002      	b.n	80116cc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	697a      	ldr	r2, [r7, #20]
 80116ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116ce:	6978      	ldr	r0, [r7, #20]
 80116d0:	f7ff f8dc 	bl	801088c <tcp_oos_insert_segment>
                }
                break;
 80116d4:	e139      	b.n	801194a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d117      	bne.n	801170c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116dc:	4b2e      	ldr	r3, [pc, #184]	; (8011798 <tcp_receive+0xd04>)
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	da57      	bge.n	801179c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116ec:	4829      	ldr	r0, [pc, #164]	; (8011794 <tcp_receive+0xd00>)
 80116ee:	f7fd faaf 	bl	800ec50 <tcp_seg_copy>
 80116f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 8129 	beq.w	801194e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	69ba      	ldr	r2, [r7, #24]
 8011700:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011704:	69b8      	ldr	r0, [r7, #24]
 8011706:	f7ff f8c1 	bl	801088c <tcp_oos_insert_segment>
                  }
                  break;
 801170a:	e120      	b.n	801194e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801170c:	4b22      	ldr	r3, [pc, #136]	; (8011798 <tcp_receive+0xd04>)
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	3b01      	subs	r3, #1
 801171a:	2b00      	cmp	r3, #0
 801171c:	db3e      	blt.n	801179c <tcp_receive+0xd08>
 801171e:	4b1e      	ldr	r3, [pc, #120]	; (8011798 <tcp_receive+0xd04>)
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	3301      	adds	r3, #1
 801172c:	2b00      	cmp	r3, #0
 801172e:	dc35      	bgt.n	801179c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011730:	4818      	ldr	r0, [pc, #96]	; (8011794 <tcp_receive+0xd00>)
 8011732:	f7fd fa8d 	bl	800ec50 <tcp_seg_copy>
 8011736:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	2b00      	cmp	r3, #0
 801173c:	f000 8109 	beq.w	8011952 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011748:	8912      	ldrh	r2, [r2, #8]
 801174a:	441a      	add	r2, r3
 801174c:	4b12      	ldr	r3, [pc, #72]	; (8011798 <tcp_receive+0xd04>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	2b00      	cmp	r3, #0
 8011754:	dd12      	ble.n	801177c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011756:	4b10      	ldr	r3, [pc, #64]	; (8011798 <tcp_receive+0xd04>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	b29a      	uxth	r2, r3
 801175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	b29b      	uxth	r3, r3
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	b29a      	uxth	r2, r3
 8011768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801176a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011772:	891b      	ldrh	r3, [r3, #8]
 8011774:	4619      	mov	r1, r3
 8011776:	4610      	mov	r0, r2
 8011778:	f7fb fbfa 	bl	800cf70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177e:	69fa      	ldr	r2, [r7, #28]
 8011780:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011782:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011784:	69f8      	ldr	r0, [r7, #28]
 8011786:	f7ff f881 	bl	801088c <tcp_oos_insert_segment>
                  }
                  break;
 801178a:	e0e2      	b.n	8011952 <tcp_receive+0xebe>
 801178c:	20011b90 	.word	0x20011b90
 8011790:	20011b8d 	.word	0x20011b8d
 8011794:	20011b60 	.word	0x20011b60
 8011798:	20011b80 	.word	0x20011b80
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f040 80c6 	bne.w	8011936 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80117aa:	4b80      	ldr	r3, [pc, #512]	; (80119ac <tcp_receive+0xf18>)
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f340 80bd 	ble.w	8011936 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	899b      	ldrh	r3, [r3, #12]
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fa f853 	bl	800b870 <lwip_htons>
 80117ca:	4603      	mov	r3, r0
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	f003 0301 	and.w	r3, r3, #1
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f040 80bf 	bne.w	8011956 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117d8:	4875      	ldr	r0, [pc, #468]	; (80119b0 <tcp_receive+0xf1c>)
 80117da:	f7fd fa39 	bl	800ec50 <tcp_seg_copy>
 80117de:	4602      	mov	r2, r0
 80117e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80117e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 80b6 	beq.w	801195a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80117ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117f6:	8912      	ldrh	r2, [r2, #8]
 80117f8:	441a      	add	r2, r3
 80117fa:	4b6c      	ldr	r3, [pc, #432]	; (80119ac <tcp_receive+0xf18>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	dd12      	ble.n	801182a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011804:	4b69      	ldr	r3, [pc, #420]	; (80119ac <tcp_receive+0xf18>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	b29a      	uxth	r2, r3
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	68db      	ldr	r3, [r3, #12]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	b29b      	uxth	r3, r3
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	b29a      	uxth	r2, r3
 8011816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011818:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011820:	891b      	ldrh	r3, [r3, #8]
 8011822:	4619      	mov	r1, r3
 8011824:	4610      	mov	r0, r2
 8011826:	f7fb fba3 	bl	800cf70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801182a:	4b62      	ldr	r3, [pc, #392]	; (80119b4 <tcp_receive+0xf20>)
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	461a      	mov	r2, r3
 8011830:	4b5e      	ldr	r3, [pc, #376]	; (80119ac <tcp_receive+0xf18>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	441a      	add	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183a:	6879      	ldr	r1, [r7, #4]
 801183c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801183e:	440b      	add	r3, r1
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	f340 8089 	ble.w	801195a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	899b      	ldrh	r3, [r3, #12]
 8011850:	b29b      	uxth	r3, r3
 8011852:	4618      	mov	r0, r3
 8011854:	f7fa f80c 	bl	800b870 <lwip_htons>
 8011858:	4603      	mov	r3, r0
 801185a:	b2db      	uxtb	r3, r3
 801185c:	f003 0301 	and.w	r3, r3, #1
 8011860:	2b00      	cmp	r3, #0
 8011862:	d022      	beq.n	80118aa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	899b      	ldrh	r3, [r3, #12]
 801186c:	b29b      	uxth	r3, r3
 801186e:	b21b      	sxth	r3, r3
 8011870:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011874:	b21c      	sxth	r4, r3
 8011876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	68db      	ldr	r3, [r3, #12]
 801187c:	899b      	ldrh	r3, [r3, #12]
 801187e:	b29b      	uxth	r3, r3
 8011880:	4618      	mov	r0, r3
 8011882:	f7f9 fff5 	bl	800b870 <lwip_htons>
 8011886:	4603      	mov	r3, r0
 8011888:	b2db      	uxtb	r3, r3
 801188a:	b29b      	uxth	r3, r3
 801188c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011890:	b29b      	uxth	r3, r3
 8011892:	4618      	mov	r0, r3
 8011894:	f7f9 ffec 	bl	800b870 <lwip_htons>
 8011898:	4603      	mov	r3, r0
 801189a:	b21b      	sxth	r3, r3
 801189c:	4323      	orrs	r3, r4
 801189e:	b21a      	sxth	r2, r3
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	b292      	uxth	r2, r2
 80118a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118b4:	4413      	add	r3, r2
 80118b6:	b299      	uxth	r1, r3
 80118b8:	4b3c      	ldr	r3, [pc, #240]	; (80119ac <tcp_receive+0xf18>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	b29a      	uxth	r2, r3
 80118be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	1a8a      	subs	r2, r1, r2
 80118c4:	b292      	uxth	r2, r2
 80118c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	685a      	ldr	r2, [r3, #4]
 80118ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	891b      	ldrh	r3, [r3, #8]
 80118d4:	4619      	mov	r1, r3
 80118d6:	4610      	mov	r0, r2
 80118d8:	f7fb fb4a 	bl	800cf70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	891c      	ldrh	r4, [r3, #8]
 80118e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	899b      	ldrh	r3, [r3, #12]
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7f9 ffbf 	bl	800b870 <lwip_htons>
 80118f2:	4603      	mov	r3, r0
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	f003 0303 	and.w	r3, r3, #3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <tcp_receive+0xe6e>
 80118fe:	2301      	movs	r3, #1
 8011900:	e000      	b.n	8011904 <tcp_receive+0xe70>
 8011902:	2300      	movs	r3, #0
 8011904:	4423      	add	r3, r4
 8011906:	b29a      	uxth	r2, r3
 8011908:	4b2a      	ldr	r3, [pc, #168]	; (80119b4 <tcp_receive+0xf20>)
 801190a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801190c:	4b29      	ldr	r3, [pc, #164]	; (80119b4 <tcp_receive+0xf20>)
 801190e:	881b      	ldrh	r3, [r3, #0]
 8011910:	461a      	mov	r2, r3
 8011912:	4b26      	ldr	r3, [pc, #152]	; (80119ac <tcp_receive+0xf18>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	441a      	add	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801191c:	6879      	ldr	r1, [r7, #4]
 801191e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011920:	440b      	add	r3, r1
 8011922:	429a      	cmp	r2, r3
 8011924:	d019      	beq.n	801195a <tcp_receive+0xec6>
 8011926:	4b24      	ldr	r3, [pc, #144]	; (80119b8 <tcp_receive+0xf24>)
 8011928:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801192c:	4923      	ldr	r1, [pc, #140]	; (80119bc <tcp_receive+0xf28>)
 801192e:	4824      	ldr	r0, [pc, #144]	; (80119c0 <tcp_receive+0xf2c>)
 8011930:	f005 f816 	bl	8016960 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011934:	e011      	b.n	801195a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	63bb      	str	r3, [r7, #56]	; 0x38
 801193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193e:	2b00      	cmp	r3, #0
 8011940:	f47f aea4 	bne.w	801168c <tcp_receive+0xbf8>
 8011944:	e00a      	b.n	801195c <tcp_receive+0xec8>
                break;
 8011946:	bf00      	nop
 8011948:	e008      	b.n	801195c <tcp_receive+0xec8>
                break;
 801194a:	bf00      	nop
 801194c:	e006      	b.n	801195c <tcp_receive+0xec8>
                  break;
 801194e:	bf00      	nop
 8011950:	e004      	b.n	801195c <tcp_receive+0xec8>
                  break;
 8011952:	bf00      	nop
 8011954:	e002      	b.n	801195c <tcp_receive+0xec8>
                  break;
 8011956:	bf00      	nop
 8011958:	e000      	b.n	801195c <tcp_receive+0xec8>
                break;
 801195a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f001 fead 	bl	80136bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011962:	e003      	b.n	801196c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f001 fea9 	bl	80136bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801196a:	e01a      	b.n	80119a2 <tcp_receive+0xf0e>
 801196c:	e019      	b.n	80119a2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801196e:	4b0f      	ldr	r3, [pc, #60]	; (80119ac <tcp_receive+0xf18>)
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	db0a      	blt.n	8011992 <tcp_receive+0xefe>
 801197c:	4b0b      	ldr	r3, [pc, #44]	; (80119ac <tcp_receive+0xf18>)
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011988:	440b      	add	r3, r1
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	3301      	adds	r3, #1
 801198e:	2b00      	cmp	r3, #0
 8011990:	dd07      	ble.n	80119a2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	8b5b      	ldrh	r3, [r3, #26]
 8011996:	f043 0302 	orr.w	r3, r3, #2
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80119a0:	e7ff      	b.n	80119a2 <tcp_receive+0xf0e>
 80119a2:	bf00      	nop
 80119a4:	3750      	adds	r7, #80	; 0x50
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bdb0      	pop	{r4, r5, r7, pc}
 80119aa:	bf00      	nop
 80119ac:	20011b80 	.word	0x20011b80
 80119b0:	20011b60 	.word	0x20011b60
 80119b4:	20011b8a 	.word	0x20011b8a
 80119b8:	0801b720 	.word	0x0801b720
 80119bc:	0801bac8 	.word	0x0801bac8
 80119c0:	0801b76c 	.word	0x0801b76c

080119c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119ca:	4b15      	ldr	r3, [pc, #84]	; (8011a20 <tcp_get_next_optbyte+0x5c>)
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	1c5a      	adds	r2, r3, #1
 80119d0:	b291      	uxth	r1, r2
 80119d2:	4a13      	ldr	r2, [pc, #76]	; (8011a20 <tcp_get_next_optbyte+0x5c>)
 80119d4:	8011      	strh	r1, [r2, #0]
 80119d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119d8:	4b12      	ldr	r3, [pc, #72]	; (8011a24 <tcp_get_next_optbyte+0x60>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d004      	beq.n	80119ea <tcp_get_next_optbyte+0x26>
 80119e0:	4b11      	ldr	r3, [pc, #68]	; (8011a28 <tcp_get_next_optbyte+0x64>)
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	88fa      	ldrh	r2, [r7, #6]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d208      	bcs.n	80119fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119ea:	4b10      	ldr	r3, [pc, #64]	; (8011a2c <tcp_get_next_optbyte+0x68>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	3314      	adds	r3, #20
 80119f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80119f2:	88fb      	ldrh	r3, [r7, #6]
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	4413      	add	r3, r2
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	e00b      	b.n	8011a14 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80119fc:	88fb      	ldrh	r3, [r7, #6]
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	4b09      	ldr	r3, [pc, #36]	; (8011a28 <tcp_get_next_optbyte+0x64>)
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a0a:	4b06      	ldr	r3, [pc, #24]	; (8011a24 <tcp_get_next_optbyte+0x60>)
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	797b      	ldrb	r3, [r7, #5]
 8011a10:	4413      	add	r3, r2
 8011a12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	20011b7c 	.word	0x20011b7c
 8011a24:	20011b78 	.word	0x20011b78
 8011a28:	20011b76 	.word	0x20011b76
 8011a2c:	20011b70 	.word	0x20011b70

08011a30 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d106      	bne.n	8011a4c <tcp_parseopt+0x1c>
 8011a3e:	4b32      	ldr	r3, [pc, #200]	; (8011b08 <tcp_parseopt+0xd8>)
 8011a40:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a44:	4931      	ldr	r1, [pc, #196]	; (8011b0c <tcp_parseopt+0xdc>)
 8011a46:	4832      	ldr	r0, [pc, #200]	; (8011b10 <tcp_parseopt+0xe0>)
 8011a48:	f004 ff8a 	bl	8016960 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a4c:	4b31      	ldr	r3, [pc, #196]	; (8011b14 <tcp_parseopt+0xe4>)
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d055      	beq.n	8011b00 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a54:	4b30      	ldr	r3, [pc, #192]	; (8011b18 <tcp_parseopt+0xe8>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	801a      	strh	r2, [r3, #0]
 8011a5a:	e045      	b.n	8011ae8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011a5c:	f7ff ffb2 	bl	80119c4 <tcp_get_next_optbyte>
 8011a60:	4603      	mov	r3, r0
 8011a62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a64:	7bfb      	ldrb	r3, [r7, #15]
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d006      	beq.n	8011a78 <tcp_parseopt+0x48>
 8011a6a:	2b02      	cmp	r3, #2
 8011a6c:	dc2b      	bgt.n	8011ac6 <tcp_parseopt+0x96>
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d041      	beq.n	8011af6 <tcp_parseopt+0xc6>
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d127      	bne.n	8011ac6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011a76:	e037      	b.n	8011ae8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a78:	f7ff ffa4 	bl	80119c4 <tcp_get_next_optbyte>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b04      	cmp	r3, #4
 8011a80:	d13b      	bne.n	8011afa <tcp_parseopt+0xca>
 8011a82:	4b25      	ldr	r3, [pc, #148]	; (8011b18 <tcp_parseopt+0xe8>)
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	3301      	adds	r3, #1
 8011a88:	4a22      	ldr	r2, [pc, #136]	; (8011b14 <tcp_parseopt+0xe4>)
 8011a8a:	8812      	ldrh	r2, [r2, #0]
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	da34      	bge.n	8011afa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011a90:	f7ff ff98 	bl	80119c4 <tcp_get_next_optbyte>
 8011a94:	4603      	mov	r3, r0
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	021b      	lsls	r3, r3, #8
 8011a9a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011a9c:	f7ff ff92 	bl	80119c4 <tcp_get_next_optbyte>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	89bb      	ldrh	r3, [r7, #12]
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011aaa:	89bb      	ldrh	r3, [r7, #12]
 8011aac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011ab0:	d804      	bhi.n	8011abc <tcp_parseopt+0x8c>
 8011ab2:	89bb      	ldrh	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d001      	beq.n	8011abc <tcp_parseopt+0x8c>
 8011ab8:	89ba      	ldrh	r2, [r7, #12]
 8011aba:	e001      	b.n	8011ac0 <tcp_parseopt+0x90>
 8011abc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ac4:	e010      	b.n	8011ae8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ac6:	f7ff ff7d 	bl	80119c4 <tcp_get_next_optbyte>
 8011aca:	4603      	mov	r3, r0
 8011acc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ace:	7afb      	ldrb	r3, [r7, #11]
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d914      	bls.n	8011afe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ad4:	7afb      	ldrb	r3, [r7, #11]
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b0f      	ldr	r3, [pc, #60]	; (8011b18 <tcp_parseopt+0xe8>)
 8011ada:	881b      	ldrh	r3, [r3, #0]
 8011adc:	4413      	add	r3, r2
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	3b02      	subs	r3, #2
 8011ae2:	b29a      	uxth	r2, r3
 8011ae4:	4b0c      	ldr	r3, [pc, #48]	; (8011b18 <tcp_parseopt+0xe8>)
 8011ae6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011ae8:	4b0b      	ldr	r3, [pc, #44]	; (8011b18 <tcp_parseopt+0xe8>)
 8011aea:	881a      	ldrh	r2, [r3, #0]
 8011aec:	4b09      	ldr	r3, [pc, #36]	; (8011b14 <tcp_parseopt+0xe4>)
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d3b3      	bcc.n	8011a5c <tcp_parseopt+0x2c>
 8011af4:	e004      	b.n	8011b00 <tcp_parseopt+0xd0>
          return;
 8011af6:	bf00      	nop
 8011af8:	e002      	b.n	8011b00 <tcp_parseopt+0xd0>
            return;
 8011afa:	bf00      	nop
 8011afc:	e000      	b.n	8011b00 <tcp_parseopt+0xd0>
            return;
 8011afe:	bf00      	nop
      }
    }
  }
}
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	0801b720 	.word	0x0801b720
 8011b0c:	0801bb84 	.word	0x0801bb84
 8011b10:	0801b76c 	.word	0x0801b76c
 8011b14:	20011b74 	.word	0x20011b74
 8011b18:	20011b7c 	.word	0x20011b7c

08011b1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b20:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <tcp_trigger_input_pcb_close+0x1c>)
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	f043 0310 	orr.w	r3, r3, #16
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b03      	ldr	r3, [pc, #12]	; (8011b38 <tcp_trigger_input_pcb_close+0x1c>)
 8011b2c:	701a      	strb	r2, [r3, #0]
}
 8011b2e:	bf00      	nop
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	20011b8d 	.word	0x20011b8d

08011b3c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00a      	beq.n	8011b64 <tcp_route+0x28>
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	7a1b      	ldrb	r3, [r3, #8]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d006      	beq.n	8011b64 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	7a1b      	ldrb	r3, [r3, #8]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fb f800 	bl	800cb60 <netif_get_by_index>
 8011b60:	4603      	mov	r3, r0
 8011b62:	e003      	b.n	8011b6c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f003 f96d 	bl	8014e44 <ip4_route>
 8011b6a:	4603      	mov	r3, r0
  }
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b74:	b590      	push	{r4, r7, lr}
 8011b76:	b087      	sub	sp, #28
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	603b      	str	r3, [r7, #0]
 8011b80:	4613      	mov	r3, r2
 8011b82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <tcp_create_segment+0x22>
 8011b8a:	4b44      	ldr	r3, [pc, #272]	; (8011c9c <tcp_create_segment+0x128>)
 8011b8c:	22a3      	movs	r2, #163	; 0xa3
 8011b8e:	4944      	ldr	r1, [pc, #272]	; (8011ca0 <tcp_create_segment+0x12c>)
 8011b90:	4844      	ldr	r0, [pc, #272]	; (8011ca4 <tcp_create_segment+0x130>)
 8011b92:	f004 fee5 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d105      	bne.n	8011ba8 <tcp_create_segment+0x34>
 8011b9c:	4b3f      	ldr	r3, [pc, #252]	; (8011c9c <tcp_create_segment+0x128>)
 8011b9e:	22a4      	movs	r2, #164	; 0xa4
 8011ba0:	4941      	ldr	r1, [pc, #260]	; (8011ca8 <tcp_create_segment+0x134>)
 8011ba2:	4840      	ldr	r0, [pc, #256]	; (8011ca4 <tcp_create_segment+0x130>)
 8011ba4:	f004 fedc 	bl	8016960 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f003 0304 	and.w	r3, r3, #4
 8011bb4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011bb6:	2002      	movs	r0, #2
 8011bb8:	f7fa fc4a 	bl	800c450 <memp_malloc>
 8011bbc:	6138      	str	r0, [r7, #16]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d104      	bne.n	8011bce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bc4:	68b8      	ldr	r0, [r7, #8]
 8011bc6:	f7fb fb59 	bl	800d27c <pbuf_free>
    return NULL;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	e061      	b.n	8011c92 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011bd4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	891a      	ldrh	r2, [r3, #8]
 8011be6:	7dfb      	ldrb	r3, [r7, #23]
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d205      	bcs.n	8011bfa <tcp_create_segment+0x86>
 8011bee:	4b2b      	ldr	r3, [pc, #172]	; (8011c9c <tcp_create_segment+0x128>)
 8011bf0:	22b0      	movs	r2, #176	; 0xb0
 8011bf2:	492e      	ldr	r1, [pc, #184]	; (8011cac <tcp_create_segment+0x138>)
 8011bf4:	482b      	ldr	r0, [pc, #172]	; (8011ca4 <tcp_create_segment+0x130>)
 8011bf6:	f004 feb3 	bl	8016960 <iprintf>
  seg->len = p->tot_len - optlen;
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	891a      	ldrh	r2, [r3, #8]
 8011bfe:	7dfb      	ldrb	r3, [r7, #23]
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011c0a:	2114      	movs	r1, #20
 8011c0c:	68b8      	ldr	r0, [r7, #8]
 8011c0e:	f7fb fa9f 	bl	800d150 <pbuf_add_header>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d004      	beq.n	8011c22 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c18:	6938      	ldr	r0, [r7, #16]
 8011c1a:	f7fd f800 	bl	800ec1e <tcp_seg_free>
    return NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	e037      	b.n	8011c92 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	685a      	ldr	r2, [r3, #4]
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	8ada      	ldrh	r2, [r3, #22]
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	68dc      	ldr	r4, [r3, #12]
 8011c34:	4610      	mov	r0, r2
 8011c36:	f7f9 fe1b 	bl	800b870 <lwip_htons>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	8b1a      	ldrh	r2, [r3, #24]
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	68dc      	ldr	r4, [r3, #12]
 8011c46:	4610      	mov	r0, r2
 8011c48:	f7f9 fe12 	bl	800b870 <lwip_htons>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	68dc      	ldr	r4, [r3, #12]
 8011c54:	6838      	ldr	r0, [r7, #0]
 8011c56:	f7f9 fe20 	bl	800b89a <lwip_htonl>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c5e:	7dfb      	ldrb	r3, [r7, #23]
 8011c60:	089b      	lsrs	r3, r3, #2
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	3305      	adds	r3, #5
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	031b      	lsls	r3, r3, #12
 8011c6c:	b29a      	uxth	r2, r3
 8011c6e:	79fb      	ldrb	r3, [r7, #7]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	4313      	orrs	r3, r2
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	68dc      	ldr	r4, [r3, #12]
 8011c7a:	4610      	mov	r0, r2
 8011c7c:	f7f9 fdf8 	bl	800b870 <lwip_htons>
 8011c80:	4603      	mov	r3, r0
 8011c82:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	749a      	strb	r2, [r3, #18]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c90:	693b      	ldr	r3, [r7, #16]
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	371c      	adds	r7, #28
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd90      	pop	{r4, r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	0801bba0 	.word	0x0801bba0
 8011ca0:	0801bbd4 	.word	0x0801bbd4
 8011ca4:	0801bbf4 	.word	0x0801bbf4
 8011ca8:	0801bc1c 	.word	0x0801bc1c
 8011cac:	0801bc40 	.word	0x0801bc40

08011cb0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b086      	sub	sp, #24
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	607b      	str	r3, [r7, #4]
 8011cb8:	4603      	mov	r3, r0
 8011cba:	73fb      	strb	r3, [r7, #15]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	81bb      	strh	r3, [r7, #12]
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011cc4:	89bb      	ldrh	r3, [r7, #12]
 8011cc6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d105      	bne.n	8011cda <tcp_pbuf_prealloc+0x2a>
 8011cce:	4b30      	ldr	r3, [pc, #192]	; (8011d90 <tcp_pbuf_prealloc+0xe0>)
 8011cd0:	22e8      	movs	r2, #232	; 0xe8
 8011cd2:	4930      	ldr	r1, [pc, #192]	; (8011d94 <tcp_pbuf_prealloc+0xe4>)
 8011cd4:	4830      	ldr	r0, [pc, #192]	; (8011d98 <tcp_pbuf_prealloc+0xe8>)
 8011cd6:	f004 fe43 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011cda:	6a3b      	ldr	r3, [r7, #32]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d105      	bne.n	8011cec <tcp_pbuf_prealloc+0x3c>
 8011ce0:	4b2b      	ldr	r3, [pc, #172]	; (8011d90 <tcp_pbuf_prealloc+0xe0>)
 8011ce2:	22e9      	movs	r2, #233	; 0xe9
 8011ce4:	492d      	ldr	r1, [pc, #180]	; (8011d9c <tcp_pbuf_prealloc+0xec>)
 8011ce6:	482c      	ldr	r0, [pc, #176]	; (8011d98 <tcp_pbuf_prealloc+0xe8>)
 8011ce8:	f004 fe3a 	bl	8016960 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011cec:	89ba      	ldrh	r2, [r7, #12]
 8011cee:	897b      	ldrh	r3, [r7, #10]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d221      	bcs.n	8011d38 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cf8:	f003 0302 	and.w	r3, r3, #2
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d111      	bne.n	8011d24 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011d00:	6a3b      	ldr	r3, [r7, #32]
 8011d02:	8b5b      	ldrh	r3, [r3, #26]
 8011d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d115      	bne.n	8011d38 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d007      	beq.n	8011d24 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d14:	6a3b      	ldr	r3, [r7, #32]
 8011d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d103      	bne.n	8011d24 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d1c:	6a3b      	ldr	r3, [r7, #32]
 8011d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d009      	beq.n	8011d38 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d24:	89bb      	ldrh	r3, [r7, #12]
 8011d26:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011d2a:	f023 0203 	bic.w	r2, r3, #3
 8011d2e:	897b      	ldrh	r3, [r7, #10]
 8011d30:	4293      	cmp	r3, r2
 8011d32:	bf28      	it	cs
 8011d34:	4613      	movcs	r3, r2
 8011d36:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d38:	8af9      	ldrh	r1, [r7, #22]
 8011d3a:	7bfb      	ldrb	r3, [r7, #15]
 8011d3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fa ffb7 	bl	800ccb4 <pbuf_alloc>
 8011d46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d48:	693b      	ldr	r3, [r7, #16]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d101      	bne.n	8011d52 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e019      	b.n	8011d86 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d006      	beq.n	8011d68 <tcp_pbuf_prealloc+0xb8>
 8011d5a:	4b0d      	ldr	r3, [pc, #52]	; (8011d90 <tcp_pbuf_prealloc+0xe0>)
 8011d5c:	f240 120b 	movw	r2, #267	; 0x10b
 8011d60:	490f      	ldr	r1, [pc, #60]	; (8011da0 <tcp_pbuf_prealloc+0xf0>)
 8011d62:	480d      	ldr	r0, [pc, #52]	; (8011d98 <tcp_pbuf_prealloc+0xe8>)
 8011d64:	f004 fdfc 	bl	8016960 <iprintf>
  *oversize = p->len - length;
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	895a      	ldrh	r2, [r3, #10]
 8011d6c:	89bb      	ldrh	r3, [r7, #12]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	89ba      	ldrh	r2, [r7, #12]
 8011d7a:	811a      	strh	r2, [r3, #8]
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	891a      	ldrh	r2, [r3, #8]
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	815a      	strh	r2, [r3, #10]
  return p;
 8011d84:	693b      	ldr	r3, [r7, #16]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	0801bba0 	.word	0x0801bba0
 8011d94:	0801bc58 	.word	0x0801bc58
 8011d98:	0801bbf4 	.word	0x0801bbf4
 8011d9c:	0801bc7c 	.word	0x0801bc7c
 8011da0:	0801bc9c 	.word	0x0801bc9c

08011da4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	460b      	mov	r3, r1
 8011dae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d106      	bne.n	8011dc4 <tcp_write_checks+0x20>
 8011db6:	4b33      	ldr	r3, [pc, #204]	; (8011e84 <tcp_write_checks+0xe0>)
 8011db8:	f240 1233 	movw	r2, #307	; 0x133
 8011dbc:	4932      	ldr	r1, [pc, #200]	; (8011e88 <tcp_write_checks+0xe4>)
 8011dbe:	4833      	ldr	r0, [pc, #204]	; (8011e8c <tcp_write_checks+0xe8>)
 8011dc0:	f004 fdce 	bl	8016960 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	7d1b      	ldrb	r3, [r3, #20]
 8011dc8:	2b04      	cmp	r3, #4
 8011dca:	d00e      	beq.n	8011dea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011dd0:	2b07      	cmp	r3, #7
 8011dd2:	d00a      	beq.n	8011dea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d006      	beq.n	8011dea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d002      	beq.n	8011dea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011de4:	f06f 030a 	mvn.w	r3, #10
 8011de8:	e048      	b.n	8011e7c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011dea:	887b      	ldrh	r3, [r7, #2]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d101      	bne.n	8011df4 <tcp_write_checks+0x50>
    return ERR_OK;
 8011df0:	2300      	movs	r3, #0
 8011df2:	e043      	b.n	8011e7c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011dfa:	887a      	ldrh	r2, [r7, #2]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d909      	bls.n	8011e14 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	8b5b      	ldrh	r3, [r3, #26]
 8011e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e12:	e033      	b.n	8011e7c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e1a:	2b08      	cmp	r3, #8
 8011e1c:	d909      	bls.n	8011e32 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	8b5b      	ldrh	r3, [r3, #26]
 8011e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e26:	b29a      	uxth	r2, r3
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e30:	e024      	b.n	8011e7c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00f      	beq.n	8011e5c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d11a      	bne.n	8011e7a <tcp_write_checks+0xd6>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d116      	bne.n	8011e7a <tcp_write_checks+0xd6>
 8011e4c:	4b0d      	ldr	r3, [pc, #52]	; (8011e84 <tcp_write_checks+0xe0>)
 8011e4e:	f240 1255 	movw	r2, #341	; 0x155
 8011e52:	490f      	ldr	r1, [pc, #60]	; (8011e90 <tcp_write_checks+0xec>)
 8011e54:	480d      	ldr	r0, [pc, #52]	; (8011e8c <tcp_write_checks+0xe8>)
 8011e56:	f004 fd83 	bl	8016960 <iprintf>
 8011e5a:	e00e      	b.n	8011e7a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d103      	bne.n	8011e6c <tcp_write_checks+0xc8>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d006      	beq.n	8011e7a <tcp_write_checks+0xd6>
 8011e6c:	4b05      	ldr	r3, [pc, #20]	; (8011e84 <tcp_write_checks+0xe0>)
 8011e6e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011e72:	4908      	ldr	r1, [pc, #32]	; (8011e94 <tcp_write_checks+0xf0>)
 8011e74:	4805      	ldr	r0, [pc, #20]	; (8011e8c <tcp_write_checks+0xe8>)
 8011e76:	f004 fd73 	bl	8016960 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	0801bba0 	.word	0x0801bba0
 8011e88:	0801bcb0 	.word	0x0801bcb0
 8011e8c:	0801bbf4 	.word	0x0801bbf4
 8011e90:	0801bcd0 	.word	0x0801bcd0
 8011e94:	0801bd0c 	.word	0x0801bd0c

08011e98 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011e98:	b590      	push	{r4, r7, lr}
 8011e9a:	b09b      	sub	sp, #108	; 0x6c
 8011e9c:	af04      	add	r7, sp, #16
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	4611      	mov	r1, r2
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	80fb      	strh	r3, [r7, #6]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	653b      	str	r3, [r7, #80]	; 0x50
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eba:	2300      	movs	r3, #0
 8011ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d109      	bne.n	8011ef4 <tcp_write+0x5c>
 8011ee0:	4ba4      	ldr	r3, [pc, #656]	; (8012174 <tcp_write+0x2dc>)
 8011ee2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011ee6:	49a4      	ldr	r1, [pc, #656]	; (8012178 <tcp_write+0x2e0>)
 8011ee8:	48a4      	ldr	r0, [pc, #656]	; (801217c <tcp_write+0x2e4>)
 8011eea:	f004 fd39 	bl	8016960 <iprintf>
 8011eee:	f06f 030f 	mvn.w	r3, #15
 8011ef2:	e32a      	b.n	801254a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011efa:	085b      	lsrs	r3, r3, #1
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f02:	4293      	cmp	r3, r2
 8011f04:	bf28      	it	cs
 8011f06:	4613      	movcs	r3, r2
 8011f08:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d102      	bne.n	8011f16 <tcp_write+0x7e>
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f14:	e000      	b.n	8011f18 <tcp_write+0x80>
 8011f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d109      	bne.n	8011f34 <tcp_write+0x9c>
 8011f20:	4b94      	ldr	r3, [pc, #592]	; (8012174 <tcp_write+0x2dc>)
 8011f22:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011f26:	4996      	ldr	r1, [pc, #600]	; (8012180 <tcp_write+0x2e8>)
 8011f28:	4894      	ldr	r0, [pc, #592]	; (801217c <tcp_write+0x2e4>)
 8011f2a:	f004 fd19 	bl	8016960 <iprintf>
 8011f2e:	f06f 030f 	mvn.w	r3, #15
 8011f32:	e30a      	b.n	801254a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f34:	88fb      	ldrh	r3, [r7, #6]
 8011f36:	4619      	mov	r1, r3
 8011f38:	68f8      	ldr	r0, [r7, #12]
 8011f3a:	f7ff ff33 	bl	8011da4 <tcp_write_checks>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011f44:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <tcp_write+0xba>
    return err;
 8011f4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f50:	e2fb      	b.n	801254a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f000 80f6 	beq.w	8012158 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f70:	653b      	str	r3, [r7, #80]	; 0x50
 8011f72:	e002      	b.n	8011f7a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d1f8      	bne.n	8011f74 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f84:	7a9b      	ldrb	r3, [r3, #10]
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	f003 0304 	and.w	r3, r3, #4
 8011f8e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011f90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f94:	891b      	ldrh	r3, [r3, #8]
 8011f96:	4619      	mov	r1, r3
 8011f98:	8c3b      	ldrh	r3, [r7, #32]
 8011f9a:	440b      	add	r3, r1
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	da06      	bge.n	8011fae <tcp_write+0x116>
 8011fa0:	4b74      	ldr	r3, [pc, #464]	; (8012174 <tcp_write+0x2dc>)
 8011fa2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011fa6:	4977      	ldr	r1, [pc, #476]	; (8012184 <tcp_write+0x2ec>)
 8011fa8:	4874      	ldr	r0, [pc, #464]	; (801217c <tcp_write+0x2e4>)
 8011faa:	f004 fcd9 	bl	8016960 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb0:	891a      	ldrh	r2, [r3, #8]
 8011fb2:	8c3b      	ldrh	r3, [r7, #32]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fc4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011fc6:	8a7b      	ldrh	r3, [r7, #18]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d026      	beq.n	801201a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011fcc:	8a7b      	ldrh	r3, [r7, #18]
 8011fce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d206      	bcs.n	8011fe2 <tcp_write+0x14a>
 8011fd4:	4b67      	ldr	r3, [pc, #412]	; (8012174 <tcp_write+0x2dc>)
 8011fd6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011fda:	496b      	ldr	r1, [pc, #428]	; (8012188 <tcp_write+0x2f0>)
 8011fdc:	4867      	ldr	r0, [pc, #412]	; (801217c <tcp_write+0x2e4>)
 8011fde:	f004 fcbf 	bl	8016960 <iprintf>
      seg = last_unsent;
 8011fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011fe6:	8a7b      	ldrh	r3, [r7, #18]
 8011fe8:	88fa      	ldrh	r2, [r7, #6]
 8011fea:	4293      	cmp	r3, r2
 8011fec:	bf28      	it	cs
 8011fee:	4613      	movcs	r3, r2
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	bf28      	it	cs
 8011ff8:	4613      	movcs	r3, r2
 8011ffa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011ffc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012002:	4413      	add	r3, r2
 8012004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012008:	8a7a      	ldrh	r2, [r7, #18]
 801200a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	b29b      	uxth	r3, r3
 8012010:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012012:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012014:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012016:	1ad3      	subs	r3, r2, r3
 8012018:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801201a:	8a7b      	ldrh	r3, [r7, #18]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d00b      	beq.n	8012038 <tcp_write+0x1a0>
 8012020:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012024:	88fb      	ldrh	r3, [r7, #6]
 8012026:	429a      	cmp	r2, r3
 8012028:	d006      	beq.n	8012038 <tcp_write+0x1a0>
 801202a:	4b52      	ldr	r3, [pc, #328]	; (8012174 <tcp_write+0x2dc>)
 801202c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012030:	4956      	ldr	r1, [pc, #344]	; (801218c <tcp_write+0x2f4>)
 8012032:	4852      	ldr	r0, [pc, #328]	; (801217c <tcp_write+0x2e4>)
 8012034:	f004 fc94 	bl	8016960 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801203c:	88fb      	ldrh	r3, [r7, #6]
 801203e:	429a      	cmp	r2, r3
 8012040:	f080 8167 	bcs.w	8012312 <tcp_write+0x47a>
 8012044:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012046:	2b00      	cmp	r3, #0
 8012048:	f000 8163 	beq.w	8012312 <tcp_write+0x47a>
 801204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204e:	891b      	ldrh	r3, [r3, #8]
 8012050:	2b00      	cmp	r3, #0
 8012052:	f000 815e 	beq.w	8012312 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012056:	88fa      	ldrh	r2, [r7, #6]
 8012058:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801205c:	1ad2      	subs	r2, r2, r3
 801205e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012060:	4293      	cmp	r3, r2
 8012062:	bfa8      	it	ge
 8012064:	4613      	movge	r3, r2
 8012066:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801206c:	797b      	ldrb	r3, [r7, #5]
 801206e:	f003 0301 	and.w	r3, r3, #1
 8012072:	2b00      	cmp	r3, #0
 8012074:	d027      	beq.n	80120c6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012076:	f107 0012 	add.w	r0, r7, #18
 801207a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801207c:	8bf9      	ldrh	r1, [r7, #30]
 801207e:	2301      	movs	r3, #1
 8012080:	9302      	str	r3, [sp, #8]
 8012082:	797b      	ldrb	r3, [r7, #5]
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	4603      	mov	r3, r0
 801208c:	2000      	movs	r0, #0
 801208e:	f7ff fe0f 	bl	8011cb0 <tcp_pbuf_prealloc>
 8012092:	6578      	str	r0, [r7, #84]	; 0x54
 8012094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012096:	2b00      	cmp	r3, #0
 8012098:	f000 8225 	beq.w	80124e6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801209e:	6858      	ldr	r0, [r3, #4]
 80120a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120a4:	68ba      	ldr	r2, [r7, #8]
 80120a6:	4413      	add	r3, r2
 80120a8:	8bfa      	ldrh	r2, [r7, #30]
 80120aa:	4619      	mov	r1, r3
 80120ac:	f004 fb93 	bl	80167d6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120b2:	f7fb f971 	bl	800d398 <pbuf_clen>
 80120b6:	4603      	mov	r3, r0
 80120b8:	461a      	mov	r2, r3
 80120ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120be:	4413      	add	r3, r2
 80120c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80120c4:	e041      	b.n	801214a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80120c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	637b      	str	r3, [r7, #52]	; 0x34
 80120cc:	e002      	b.n	80120d4 <tcp_write+0x23c>
 80120ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	637b      	str	r3, [r7, #52]	; 0x34
 80120d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1f8      	bne.n	80120ce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120de:	7b1b      	ldrb	r3, [r3, #12]
 80120e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d115      	bne.n	8012114 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80120e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120ee:	8952      	ldrh	r2, [r2, #10]
 80120f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120f2:	68ba      	ldr	r2, [r7, #8]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d10d      	bne.n	8012114 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80120f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d006      	beq.n	801210e <tcp_write+0x276>
 8012100:	4b1c      	ldr	r3, [pc, #112]	; (8012174 <tcp_write+0x2dc>)
 8012102:	f240 2231 	movw	r2, #561	; 0x231
 8012106:	4922      	ldr	r1, [pc, #136]	; (8012190 <tcp_write+0x2f8>)
 8012108:	481c      	ldr	r0, [pc, #112]	; (801217c <tcp_write+0x2e4>)
 801210a:	f004 fc29 	bl	8016960 <iprintf>
          extendlen = seglen;
 801210e:	8bfb      	ldrh	r3, [r7, #30]
 8012110:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012112:	e01a      	b.n	801214a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012114:	8bfb      	ldrh	r3, [r7, #30]
 8012116:	2201      	movs	r2, #1
 8012118:	4619      	mov	r1, r3
 801211a:	2000      	movs	r0, #0
 801211c:	f7fa fdca 	bl	800ccb4 <pbuf_alloc>
 8012120:	6578      	str	r0, [r7, #84]	; 0x54
 8012122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012124:	2b00      	cmp	r3, #0
 8012126:	f000 81e0 	beq.w	80124ea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801212a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801212e:	68ba      	ldr	r2, [r7, #8]
 8012130:	441a      	add	r2, r3
 8012132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012134:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012136:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012138:	f7fb f92e 	bl	800d398 <pbuf_clen>
 801213c:	4603      	mov	r3, r0
 801213e:	461a      	mov	r2, r3
 8012140:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012144:	4413      	add	r3, r2
 8012146:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801214a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801214e:	8bfb      	ldrh	r3, [r7, #30]
 8012150:	4413      	add	r3, r2
 8012152:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012156:	e0dc      	b.n	8012312 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 80d7 	beq.w	8012312 <tcp_write+0x47a>
 8012164:	4b03      	ldr	r3, [pc, #12]	; (8012174 <tcp_write+0x2dc>)
 8012166:	f240 224a 	movw	r2, #586	; 0x24a
 801216a:	490a      	ldr	r1, [pc, #40]	; (8012194 <tcp_write+0x2fc>)
 801216c:	4803      	ldr	r0, [pc, #12]	; (801217c <tcp_write+0x2e4>)
 801216e:	f004 fbf7 	bl	8016960 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012172:	e0ce      	b.n	8012312 <tcp_write+0x47a>
 8012174:	0801bba0 	.word	0x0801bba0
 8012178:	0801bd40 	.word	0x0801bd40
 801217c:	0801bbf4 	.word	0x0801bbf4
 8012180:	0801bd58 	.word	0x0801bd58
 8012184:	0801bd8c 	.word	0x0801bd8c
 8012188:	0801bda4 	.word	0x0801bda4
 801218c:	0801bdc4 	.word	0x0801bdc4
 8012190:	0801bde4 	.word	0x0801bde4
 8012194:	0801be10 	.word	0x0801be10
    struct pbuf *p;
    u16_t left = len - pos;
 8012198:	88fa      	ldrh	r2, [r7, #6]
 801219a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80121a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121aa:	1ad3      	subs	r3, r2, r3
 80121ac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80121ae:	8b7a      	ldrh	r2, [r7, #26]
 80121b0:	8bbb      	ldrh	r3, [r7, #28]
 80121b2:	4293      	cmp	r3, r2
 80121b4:	bf28      	it	cs
 80121b6:	4613      	movcs	r3, r2
 80121b8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121ba:	797b      	ldrb	r3, [r7, #5]
 80121bc:	f003 0301 	and.w	r3, r3, #1
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d036      	beq.n	8012232 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80121c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	8b3b      	ldrh	r3, [r7, #24]
 80121cc:	4413      	add	r3, r2
 80121ce:	b299      	uxth	r1, r3
 80121d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	bf0c      	ite	eq
 80121d6:	2301      	moveq	r3, #1
 80121d8:	2300      	movne	r3, #0
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	f107 0012 	add.w	r0, r7, #18
 80121e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121e2:	9302      	str	r3, [sp, #8]
 80121e4:	797b      	ldrb	r3, [r7, #5]
 80121e6:	9301      	str	r3, [sp, #4]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	9300      	str	r3, [sp, #0]
 80121ec:	4603      	mov	r3, r0
 80121ee:	2036      	movs	r0, #54	; 0x36
 80121f0:	f7ff fd5e 	bl	8011cb0 <tcp_pbuf_prealloc>
 80121f4:	6338      	str	r0, [r7, #48]	; 0x30
 80121f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f000 8178 	beq.w	80124ee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80121fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012200:	895b      	ldrh	r3, [r3, #10]
 8012202:	8b3a      	ldrh	r2, [r7, #24]
 8012204:	429a      	cmp	r2, r3
 8012206:	d906      	bls.n	8012216 <tcp_write+0x37e>
 8012208:	4b8c      	ldr	r3, [pc, #560]	; (801243c <tcp_write+0x5a4>)
 801220a:	f240 2266 	movw	r2, #614	; 0x266
 801220e:	498c      	ldr	r1, [pc, #560]	; (8012440 <tcp_write+0x5a8>)
 8012210:	488c      	ldr	r0, [pc, #560]	; (8012444 <tcp_write+0x5ac>)
 8012212:	f004 fba5 	bl	8016960 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012218:	685a      	ldr	r2, [r3, #4]
 801221a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801221e:	18d0      	adds	r0, r2, r3
 8012220:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012224:	68ba      	ldr	r2, [r7, #8]
 8012226:	4413      	add	r3, r2
 8012228:	8b3a      	ldrh	r2, [r7, #24]
 801222a:	4619      	mov	r1, r3
 801222c:	f004 fad3 	bl	80167d6 <memcpy>
 8012230:	e02f      	b.n	8012292 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012232:	8a7b      	ldrh	r3, [r7, #18]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d006      	beq.n	8012246 <tcp_write+0x3ae>
 8012238:	4b80      	ldr	r3, [pc, #512]	; (801243c <tcp_write+0x5a4>)
 801223a:	f240 2271 	movw	r2, #625	; 0x271
 801223e:	4982      	ldr	r1, [pc, #520]	; (8012448 <tcp_write+0x5b0>)
 8012240:	4880      	ldr	r0, [pc, #512]	; (8012444 <tcp_write+0x5ac>)
 8012242:	f004 fb8d 	bl	8016960 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012246:	8b3b      	ldrh	r3, [r7, #24]
 8012248:	2201      	movs	r2, #1
 801224a:	4619      	mov	r1, r3
 801224c:	2036      	movs	r0, #54	; 0x36
 801224e:	f7fa fd31 	bl	800ccb4 <pbuf_alloc>
 8012252:	6178      	str	r0, [r7, #20]
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	2b00      	cmp	r3, #0
 8012258:	f000 814b 	beq.w	80124f2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801225c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	441a      	add	r2, r3
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012268:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801226c:	b29b      	uxth	r3, r3
 801226e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012272:	4619      	mov	r1, r3
 8012274:	2036      	movs	r0, #54	; 0x36
 8012276:	f7fa fd1d 	bl	800ccb4 <pbuf_alloc>
 801227a:	6338      	str	r0, [r7, #48]	; 0x30
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	2b00      	cmp	r3, #0
 8012280:	d103      	bne.n	801228a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012282:	6978      	ldr	r0, [r7, #20]
 8012284:	f7fa fffa 	bl	800d27c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012288:	e136      	b.n	80124f8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801228a:	6979      	ldr	r1, [r7, #20]
 801228c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801228e:	f7fb f8c3 	bl	800d418 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012294:	f7fb f880 	bl	800d398 <pbuf_clen>
 8012298:	4603      	mov	r3, r0
 801229a:	461a      	mov	r2, r3
 801229c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122a0:	4413      	add	r3, r2
 80122a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80122a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122aa:	2b09      	cmp	r3, #9
 80122ac:	d903      	bls.n	80122b6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80122ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122b0:	f7fa ffe4 	bl	800d27c <pbuf_free>
      goto memerr;
 80122b4:	e120      	b.n	80124f8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122be:	441a      	add	r2, r3
 80122c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	4613      	mov	r3, r2
 80122c8:	2200      	movs	r2, #0
 80122ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80122cc:	68f8      	ldr	r0, [r7, #12]
 80122ce:	f7ff fc51 	bl	8011b74 <tcp_create_segment>
 80122d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80122d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	f000 810d 	beq.w	80124f6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80122dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d102      	bne.n	80122e8 <tcp_write+0x450>
      queue = seg;
 80122e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122e4:	647b      	str	r3, [r7, #68]	; 0x44
 80122e6:	e00c      	b.n	8012302 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80122e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d106      	bne.n	80122fc <tcp_write+0x464>
 80122ee:	4b53      	ldr	r3, [pc, #332]	; (801243c <tcp_write+0x5a4>)
 80122f0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80122f4:	4955      	ldr	r1, [pc, #340]	; (801244c <tcp_write+0x5b4>)
 80122f6:	4853      	ldr	r0, [pc, #332]	; (8012444 <tcp_write+0x5ac>)
 80122f8:	f004 fb32 	bl	8016960 <iprintf>
      prev_seg->next = seg;
 80122fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012300:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012304:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012306:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801230a:	8b3b      	ldrh	r3, [r7, #24]
 801230c:	4413      	add	r3, r2
 801230e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012312:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	429a      	cmp	r2, r3
 801231a:	f4ff af3d 	bcc.w	8012198 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801231e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012320:	2b00      	cmp	r3, #0
 8012322:	d02c      	beq.n	801237e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	62fb      	str	r3, [r7, #44]	; 0x2c
 801232a:	e01e      	b.n	801236a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232e:	891a      	ldrh	r2, [r3, #8]
 8012330:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012332:	4413      	add	r3, r2
 8012334:	b29a      	uxth	r2, r3
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d110      	bne.n	8012364 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012348:	8952      	ldrh	r2, [r2, #10]
 801234a:	4413      	add	r3, r2
 801234c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801234e:	68b9      	ldr	r1, [r7, #8]
 8012350:	4618      	mov	r0, r3
 8012352:	f004 fa40 	bl	80167d6 <memcpy>
        p->len += oversize_used;
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	895a      	ldrh	r2, [r3, #10]
 801235a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801235c:	4413      	add	r3, r2
 801235e:	b29a      	uxth	r2, r3
 8012360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012362:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	62fb      	str	r3, [r7, #44]	; 0x2c
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1dd      	bne.n	801232c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012372:	891a      	ldrh	r2, [r3, #8]
 8012374:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012376:	4413      	add	r3, r2
 8012378:	b29a      	uxth	r2, r3
 801237a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801237c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801237e:	8a7a      	ldrh	r2, [r7, #18]
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012388:	2b00      	cmp	r3, #0
 801238a:	d018      	beq.n	80123be <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801238e:	2b00      	cmp	r3, #0
 8012390:	d106      	bne.n	80123a0 <tcp_write+0x508>
 8012392:	4b2a      	ldr	r3, [pc, #168]	; (801243c <tcp_write+0x5a4>)
 8012394:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012398:	492d      	ldr	r1, [pc, #180]	; (8012450 <tcp_write+0x5b8>)
 801239a:	482a      	ldr	r0, [pc, #168]	; (8012444 <tcp_write+0x5ac>)
 801239c:	f004 fae0 	bl	8016960 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80123a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fb f836 	bl	800d418 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80123ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ae:	891a      	ldrh	r2, [r3, #8]
 80123b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123b2:	891b      	ldrh	r3, [r3, #8]
 80123b4:	4413      	add	r3, r2
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ba:	811a      	strh	r2, [r3, #8]
 80123bc:	e037      	b.n	801242e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80123be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d034      	beq.n	801242e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80123c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d003      	beq.n	80123d2 <tcp_write+0x53a>
 80123ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <tcp_write+0x548>
 80123d2:	4b1a      	ldr	r3, [pc, #104]	; (801243c <tcp_write+0x5a4>)
 80123d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80123d8:	491e      	ldr	r1, [pc, #120]	; (8012454 <tcp_write+0x5bc>)
 80123da:	481a      	ldr	r0, [pc, #104]	; (8012444 <tcp_write+0x5ac>)
 80123dc:	f004 fac0 	bl	8016960 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80123e6:	e009      	b.n	80123fc <tcp_write+0x564>
      p->tot_len += extendlen;
 80123e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ea:	891a      	ldrh	r2, [r3, #8]
 80123ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123ee:	4413      	add	r3, r2
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d1f1      	bne.n	80123e8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012406:	891a      	ldrh	r2, [r3, #8]
 8012408:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801240a:	4413      	add	r3, r2
 801240c:	b29a      	uxth	r2, r3
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	895a      	ldrh	r2, [r3, #10]
 8012416:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012418:	4413      	add	r3, r2
 801241a:	b29a      	uxth	r2, r3
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012422:	891a      	ldrh	r2, [r3, #8]
 8012424:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012426:	4413      	add	r3, r2
 8012428:	b29a      	uxth	r2, r3
 801242a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801242c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012430:	2b00      	cmp	r3, #0
 8012432:	d111      	bne.n	8012458 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012438:	66da      	str	r2, [r3, #108]	; 0x6c
 801243a:	e010      	b.n	801245e <tcp_write+0x5c6>
 801243c:	0801bba0 	.word	0x0801bba0
 8012440:	0801be40 	.word	0x0801be40
 8012444:	0801bbf4 	.word	0x0801bbf4
 8012448:	0801be80 	.word	0x0801be80
 801244c:	0801be90 	.word	0x0801be90
 8012450:	0801bea4 	.word	0x0801bea4
 8012454:	0801bedc 	.word	0x0801bedc
  } else {
    last_unsent->next = queue;
 8012458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801245a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801245c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012462:	88fb      	ldrh	r3, [r7, #6]
 8012464:	441a      	add	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012470:	88fb      	ldrh	r3, [r7, #6]
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	b29a      	uxth	r2, r3
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012482:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00e      	beq.n	80124ae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012494:	2b00      	cmp	r3, #0
 8012496:	d10a      	bne.n	80124ae <tcp_write+0x616>
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <tcp_write+0x616>
 80124a0:	4b2c      	ldr	r3, [pc, #176]	; (8012554 <tcp_write+0x6bc>)
 80124a2:	f240 3212 	movw	r2, #786	; 0x312
 80124a6:	492c      	ldr	r1, [pc, #176]	; (8012558 <tcp_write+0x6c0>)
 80124a8:	482c      	ldr	r0, [pc, #176]	; (801255c <tcp_write+0x6c4>)
 80124aa:	f004 fa59 	bl	8016960 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80124ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d016      	beq.n	80124e2 <tcp_write+0x64a>
 80124b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d012      	beq.n	80124e2 <tcp_write+0x64a>
 80124bc:	797b      	ldrb	r3, [r7, #5]
 80124be:	f003 0302 	and.w	r3, r3, #2
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10d      	bne.n	80124e2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80124c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	899b      	ldrh	r3, [r3, #12]
 80124cc:	b29c      	uxth	r4, r3
 80124ce:	2008      	movs	r0, #8
 80124d0:	f7f9 f9ce 	bl	800b870 <lwip_htons>
 80124d4:	4603      	mov	r3, r0
 80124d6:	461a      	mov	r2, r3
 80124d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	4322      	orrs	r2, r4
 80124de:	b292      	uxth	r2, r2
 80124e0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80124e2:	2300      	movs	r3, #0
 80124e4:	e031      	b.n	801254a <tcp_write+0x6b2>
          goto memerr;
 80124e6:	bf00      	nop
 80124e8:	e006      	b.n	80124f8 <tcp_write+0x660>
            goto memerr;
 80124ea:	bf00      	nop
 80124ec:	e004      	b.n	80124f8 <tcp_write+0x660>
        goto memerr;
 80124ee:	bf00      	nop
 80124f0:	e002      	b.n	80124f8 <tcp_write+0x660>
        goto memerr;
 80124f2:	bf00      	nop
 80124f4:	e000      	b.n	80124f8 <tcp_write+0x660>
      goto memerr;
 80124f6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	8b5b      	ldrh	r3, [r3, #26]
 80124fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012500:	b29a      	uxth	r2, r3
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801250c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801250e:	f7fa feb5 	bl	800d27c <pbuf_free>
  }
  if (queue != NULL) {
 8012512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012514:	2b00      	cmp	r3, #0
 8012516:	d002      	beq.n	801251e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012518:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801251a:	f7fc fb6b 	bl	800ebf4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00e      	beq.n	8012546 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10a      	bne.n	8012546 <tcp_write+0x6ae>
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012534:	2b00      	cmp	r3, #0
 8012536:	d106      	bne.n	8012546 <tcp_write+0x6ae>
 8012538:	4b06      	ldr	r3, [pc, #24]	; (8012554 <tcp_write+0x6bc>)
 801253a:	f240 3227 	movw	r2, #807	; 0x327
 801253e:	4906      	ldr	r1, [pc, #24]	; (8012558 <tcp_write+0x6c0>)
 8012540:	4806      	ldr	r0, [pc, #24]	; (801255c <tcp_write+0x6c4>)
 8012542:	f004 fa0d 	bl	8016960 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801254a:	4618      	mov	r0, r3
 801254c:	375c      	adds	r7, #92	; 0x5c
 801254e:	46bd      	mov	sp, r7
 8012550:	bd90      	pop	{r4, r7, pc}
 8012552:	bf00      	nop
 8012554:	0801bba0 	.word	0x0801bba0
 8012558:	0801bf14 	.word	0x0801bf14
 801255c:	0801bbf4 	.word	0x0801bbf4

08012560 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012560:	b590      	push	{r4, r7, lr}
 8012562:	b08b      	sub	sp, #44	; 0x2c
 8012564:	af02      	add	r7, sp, #8
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	460b      	mov	r3, r1
 801256a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801256c:	2300      	movs	r3, #0
 801256e:	61fb      	str	r3, [r7, #28]
 8012570:	2300      	movs	r3, #0
 8012572:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012574:	2300      	movs	r3, #0
 8012576:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d106      	bne.n	801258c <tcp_split_unsent_seg+0x2c>
 801257e:	4b95      	ldr	r3, [pc, #596]	; (80127d4 <tcp_split_unsent_seg+0x274>)
 8012580:	f240 324b 	movw	r2, #843	; 0x34b
 8012584:	4994      	ldr	r1, [pc, #592]	; (80127d8 <tcp_split_unsent_seg+0x278>)
 8012586:	4895      	ldr	r0, [pc, #596]	; (80127dc <tcp_split_unsent_seg+0x27c>)
 8012588:	f004 f9ea 	bl	8016960 <iprintf>

  useg = pcb->unsent;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012590:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d102      	bne.n	801259e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801259c:	e116      	b.n	80127cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801259e:	887b      	ldrh	r3, [r7, #2]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d109      	bne.n	80125b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80125a4:	4b8b      	ldr	r3, [pc, #556]	; (80127d4 <tcp_split_unsent_seg+0x274>)
 80125a6:	f240 3253 	movw	r2, #851	; 0x353
 80125aa:	498d      	ldr	r1, [pc, #564]	; (80127e0 <tcp_split_unsent_seg+0x280>)
 80125ac:	488b      	ldr	r0, [pc, #556]	; (80127dc <tcp_split_unsent_seg+0x27c>)
 80125ae:	f004 f9d7 	bl	8016960 <iprintf>
    return ERR_VAL;
 80125b2:	f06f 0305 	mvn.w	r3, #5
 80125b6:	e109      	b.n	80127cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	891b      	ldrh	r3, [r3, #8]
 80125bc:	887a      	ldrh	r2, [r7, #2]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d301      	bcc.n	80125c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125c2:	2300      	movs	r3, #0
 80125c4:	e102      	b.n	80127cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ca:	887a      	ldrh	r2, [r7, #2]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d906      	bls.n	80125de <tcp_split_unsent_seg+0x7e>
 80125d0:	4b80      	ldr	r3, [pc, #512]	; (80127d4 <tcp_split_unsent_seg+0x274>)
 80125d2:	f240 325b 	movw	r2, #859	; 0x35b
 80125d6:	4983      	ldr	r1, [pc, #524]	; (80127e4 <tcp_split_unsent_seg+0x284>)
 80125d8:	4880      	ldr	r0, [pc, #512]	; (80127dc <tcp_split_unsent_seg+0x27c>)
 80125da:	f004 f9c1 	bl	8016960 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	891b      	ldrh	r3, [r3, #8]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <tcp_split_unsent_seg+0x94>
 80125e6:	4b7b      	ldr	r3, [pc, #492]	; (80127d4 <tcp_split_unsent_seg+0x274>)
 80125e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80125ec:	497e      	ldr	r1, [pc, #504]	; (80127e8 <tcp_split_unsent_seg+0x288>)
 80125ee:	487b      	ldr	r0, [pc, #492]	; (80127dc <tcp_split_unsent_seg+0x27c>)
 80125f0:	f004 f9b6 	bl	8016960 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	7a9b      	ldrb	r3, [r3, #10]
 80125f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80125fa:	7bfb      	ldrb	r3, [r7, #15]
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	f003 0304 	and.w	r3, r3, #4
 8012604:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	891a      	ldrh	r2, [r3, #8]
 801260a:	887b      	ldrh	r3, [r7, #2]
 801260c:	1ad3      	subs	r3, r2, r3
 801260e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012610:	7bbb      	ldrb	r3, [r7, #14]
 8012612:	b29a      	uxth	r2, r3
 8012614:	89bb      	ldrh	r3, [r7, #12]
 8012616:	4413      	add	r3, r2
 8012618:	b29b      	uxth	r3, r3
 801261a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801261e:	4619      	mov	r1, r3
 8012620:	2036      	movs	r0, #54	; 0x36
 8012622:	f7fa fb47 	bl	800ccb4 <pbuf_alloc>
 8012626:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	2b00      	cmp	r3, #0
 801262c:	f000 80b7 	beq.w	801279e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	891a      	ldrh	r2, [r3, #8]
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	891b      	ldrh	r3, [r3, #8]
 801263a:	1ad3      	subs	r3, r2, r3
 801263c:	b29a      	uxth	r2, r3
 801263e:	887b      	ldrh	r3, [r7, #2]
 8012640:	4413      	add	r3, r2
 8012642:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	6858      	ldr	r0, [r3, #4]
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	685a      	ldr	r2, [r3, #4]
 801264c:	7bbb      	ldrb	r3, [r7, #14]
 801264e:	18d1      	adds	r1, r2, r3
 8012650:	897b      	ldrh	r3, [r7, #10]
 8012652:	89ba      	ldrh	r2, [r7, #12]
 8012654:	f7fb f808 	bl	800d668 <pbuf_copy_partial>
 8012658:	4603      	mov	r3, r0
 801265a:	461a      	mov	r2, r3
 801265c:	89bb      	ldrh	r3, [r7, #12]
 801265e:	4293      	cmp	r3, r2
 8012660:	f040 809f 	bne.w	80127a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	899b      	ldrh	r3, [r3, #12]
 801266a:	b29b      	uxth	r3, r3
 801266c:	4618      	mov	r0, r3
 801266e:	f7f9 f8ff 	bl	800b870 <lwip_htons>
 8012672:	4603      	mov	r3, r0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801267a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801267c:	2300      	movs	r3, #0
 801267e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012680:	7efb      	ldrb	r3, [r7, #27]
 8012682:	f003 0308 	and.w	r3, r3, #8
 8012686:	2b00      	cmp	r3, #0
 8012688:	d007      	beq.n	801269a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801268a:	7efb      	ldrb	r3, [r7, #27]
 801268c:	f023 0308 	bic.w	r3, r3, #8
 8012690:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012692:	7ebb      	ldrb	r3, [r7, #26]
 8012694:	f043 0308 	orr.w	r3, r3, #8
 8012698:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801269a:	7efb      	ldrb	r3, [r7, #27]
 801269c:	f003 0301 	and.w	r3, r3, #1
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d007      	beq.n	80126b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80126a4:	7efb      	ldrb	r3, [r7, #27]
 80126a6:	f023 0301 	bic.w	r3, r3, #1
 80126aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126ac:	7ebb      	ldrb	r3, [r7, #26]
 80126ae:	f043 0301 	orr.w	r3, r3, #1
 80126b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7f9 f8ed 	bl	800b89a <lwip_htonl>
 80126c0:	4602      	mov	r2, r0
 80126c2:	887b      	ldrh	r3, [r7, #2]
 80126c4:	18d1      	adds	r1, r2, r3
 80126c6:	7eba      	ldrb	r2, [r7, #26]
 80126c8:	7bfb      	ldrb	r3, [r7, #15]
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	460b      	mov	r3, r1
 80126ce:	6939      	ldr	r1, [r7, #16]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ff fa4f 	bl	8011b74 <tcp_create_segment>
 80126d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d063      	beq.n	80127a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fa fe58 	bl	800d398 <pbuf_clen>
 80126e8:	4603      	mov	r3, r0
 80126ea:	461a      	mov	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126f2:	1a9b      	subs	r3, r3, r2
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	6858      	ldr	r0, [r3, #4]
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	891a      	ldrh	r2, [r3, #8]
 8012706:	89bb      	ldrh	r3, [r7, #12]
 8012708:	1ad3      	subs	r3, r2, r3
 801270a:	b29b      	uxth	r3, r3
 801270c:	4619      	mov	r1, r3
 801270e:	f7fa fc2f 	bl	800cf70 <pbuf_realloc>
  useg->len -= remainder;
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	891a      	ldrh	r2, [r3, #8]
 8012716:	89bb      	ldrh	r3, [r7, #12]
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	b29a      	uxth	r2, r3
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	68db      	ldr	r3, [r3, #12]
 8012724:	899b      	ldrh	r3, [r3, #12]
 8012726:	b29c      	uxth	r4, r3
 8012728:	7efb      	ldrb	r3, [r7, #27]
 801272a:	b29b      	uxth	r3, r3
 801272c:	4618      	mov	r0, r3
 801272e:	f7f9 f89f 	bl	800b870 <lwip_htons>
 8012732:	4603      	mov	r3, r0
 8012734:	461a      	mov	r2, r3
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	4322      	orrs	r2, r4
 801273c:	b292      	uxth	r2, r2
 801273e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	4618      	mov	r0, r3
 8012746:	f7fa fe27 	bl	800d398 <pbuf_clen>
 801274a:	4603      	mov	r3, r0
 801274c:	461a      	mov	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012754:	4413      	add	r3, r2
 8012756:	b29a      	uxth	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	4618      	mov	r0, r3
 8012764:	f7fa fe18 	bl	800d398 <pbuf_clen>
 8012768:	4603      	mov	r3, r0
 801276a:	461a      	mov	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012772:	4413      	add	r3, r2
 8012774:	b29a      	uxth	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	69fa      	ldr	r2, [r7, #28]
 8012788:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d103      	bne.n	801279a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2200      	movs	r2, #0
 8012796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801279a:	2300      	movs	r3, #0
 801279c:	e016      	b.n	80127cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801279e:	bf00      	nop
 80127a0:	e002      	b.n	80127a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127a2:	bf00      	nop
 80127a4:	e000      	b.n	80127a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d006      	beq.n	80127bc <tcp_split_unsent_seg+0x25c>
 80127ae:	4b09      	ldr	r3, [pc, #36]	; (80127d4 <tcp_split_unsent_seg+0x274>)
 80127b0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127b4:	490d      	ldr	r1, [pc, #52]	; (80127ec <tcp_split_unsent_seg+0x28c>)
 80127b6:	4809      	ldr	r0, [pc, #36]	; (80127dc <tcp_split_unsent_seg+0x27c>)
 80127b8:	f004 f8d2 	bl	8016960 <iprintf>
  if (p != NULL) {
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d002      	beq.n	80127c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127c2:	6938      	ldr	r0, [r7, #16]
 80127c4:	f7fa fd5a 	bl	800d27c <pbuf_free>
  }

  return ERR_MEM;
 80127c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3724      	adds	r7, #36	; 0x24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd90      	pop	{r4, r7, pc}
 80127d4:	0801bba0 	.word	0x0801bba0
 80127d8:	0801bf34 	.word	0x0801bf34
 80127dc:	0801bbf4 	.word	0x0801bbf4
 80127e0:	0801bf58 	.word	0x0801bf58
 80127e4:	0801bf7c 	.word	0x0801bf7c
 80127e8:	0801bf8c 	.word	0x0801bf8c
 80127ec:	0801bf9c 	.word	0x0801bf9c

080127f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80127f0:	b590      	push	{r4, r7, lr}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d106      	bne.n	801280c <tcp_send_fin+0x1c>
 80127fe:	4b21      	ldr	r3, [pc, #132]	; (8012884 <tcp_send_fin+0x94>)
 8012800:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012804:	4920      	ldr	r1, [pc, #128]	; (8012888 <tcp_send_fin+0x98>)
 8012806:	4821      	ldr	r0, [pc, #132]	; (801288c <tcp_send_fin+0x9c>)
 8012808:	f004 f8aa 	bl	8016960 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012810:	2b00      	cmp	r3, #0
 8012812:	d02e      	beq.n	8012872 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012818:	60fb      	str	r3, [r7, #12]
 801281a:	e002      	b.n	8012822 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d1f8      	bne.n	801281c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	899b      	ldrh	r3, [r3, #12]
 8012830:	b29b      	uxth	r3, r3
 8012832:	4618      	mov	r0, r3
 8012834:	f7f9 f81c 	bl	800b870 <lwip_htons>
 8012838:	4603      	mov	r3, r0
 801283a:	b2db      	uxtb	r3, r3
 801283c:	f003 0307 	and.w	r3, r3, #7
 8012840:	2b00      	cmp	r3, #0
 8012842:	d116      	bne.n	8012872 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	899b      	ldrh	r3, [r3, #12]
 801284a:	b29c      	uxth	r4, r3
 801284c:	2001      	movs	r0, #1
 801284e:	f7f9 f80f 	bl	800b870 <lwip_htons>
 8012852:	4603      	mov	r3, r0
 8012854:	461a      	mov	r2, r3
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	4322      	orrs	r2, r4
 801285c:	b292      	uxth	r2, r2
 801285e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	8b5b      	ldrh	r3, [r3, #26]
 8012864:	f043 0320 	orr.w	r3, r3, #32
 8012868:	b29a      	uxth	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	e004      	b.n	801287c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012872:	2101      	movs	r1, #1
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 f80b 	bl	8012890 <tcp_enqueue_flags>
 801287a:	4603      	mov	r3, r0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3714      	adds	r7, #20
 8012880:	46bd      	mov	sp, r7
 8012882:	bd90      	pop	{r4, r7, pc}
 8012884:	0801bba0 	.word	0x0801bba0
 8012888:	0801bfa8 	.word	0x0801bfa8
 801288c:	0801bbf4 	.word	0x0801bbf4

08012890 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b08a      	sub	sp, #40	; 0x28
 8012894:	af02      	add	r7, sp, #8
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	460b      	mov	r3, r1
 801289a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801289c:	2300      	movs	r3, #0
 801289e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80128a0:	2300      	movs	r3, #0
 80128a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80128a4:	78fb      	ldrb	r3, [r7, #3]
 80128a6:	f003 0303 	and.w	r3, r3, #3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d106      	bne.n	80128bc <tcp_enqueue_flags+0x2c>
 80128ae:	4b67      	ldr	r3, [pc, #412]	; (8012a4c <tcp_enqueue_flags+0x1bc>)
 80128b0:	f240 4211 	movw	r2, #1041	; 0x411
 80128b4:	4966      	ldr	r1, [pc, #408]	; (8012a50 <tcp_enqueue_flags+0x1c0>)
 80128b6:	4867      	ldr	r0, [pc, #412]	; (8012a54 <tcp_enqueue_flags+0x1c4>)
 80128b8:	f004 f852 	bl	8016960 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d106      	bne.n	80128d0 <tcp_enqueue_flags+0x40>
 80128c2:	4b62      	ldr	r3, [pc, #392]	; (8012a4c <tcp_enqueue_flags+0x1bc>)
 80128c4:	f240 4213 	movw	r2, #1043	; 0x413
 80128c8:	4963      	ldr	r1, [pc, #396]	; (8012a58 <tcp_enqueue_flags+0x1c8>)
 80128ca:	4862      	ldr	r0, [pc, #392]	; (8012a54 <tcp_enqueue_flags+0x1c4>)
 80128cc:	f004 f848 	bl	8016960 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80128d0:	78fb      	ldrb	r3, [r7, #3]
 80128d2:	f003 0302 	and.w	r3, r3, #2
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d001      	beq.n	80128de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80128da:	2301      	movs	r3, #1
 80128dc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128de:	7ffb      	ldrb	r3, [r7, #31]
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128ea:	7dfb      	ldrb	r3, [r7, #23]
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128f2:	4619      	mov	r1, r3
 80128f4:	2036      	movs	r0, #54	; 0x36
 80128f6:	f7fa f9dd 	bl	800ccb4 <pbuf_alloc>
 80128fa:	6138      	str	r0, [r7, #16]
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d109      	bne.n	8012916 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8b5b      	ldrh	r3, [r3, #26]
 8012906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801290a:	b29a      	uxth	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012914:	e095      	b.n	8012a42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	895a      	ldrh	r2, [r3, #10]
 801291a:	7dfb      	ldrb	r3, [r7, #23]
 801291c:	b29b      	uxth	r3, r3
 801291e:	429a      	cmp	r2, r3
 8012920:	d206      	bcs.n	8012930 <tcp_enqueue_flags+0xa0>
 8012922:	4b4a      	ldr	r3, [pc, #296]	; (8012a4c <tcp_enqueue_flags+0x1bc>)
 8012924:	f240 4239 	movw	r2, #1081	; 0x439
 8012928:	494c      	ldr	r1, [pc, #304]	; (8012a5c <tcp_enqueue_flags+0x1cc>)
 801292a:	484a      	ldr	r0, [pc, #296]	; (8012a54 <tcp_enqueue_flags+0x1c4>)
 801292c:	f004 f818 	bl	8016960 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012934:	78fa      	ldrb	r2, [r7, #3]
 8012936:	7ffb      	ldrb	r3, [r7, #31]
 8012938:	9300      	str	r3, [sp, #0]
 801293a:	460b      	mov	r3, r1
 801293c:	6939      	ldr	r1, [r7, #16]
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7ff f918 	bl	8011b74 <tcp_create_segment>
 8012944:	60f8      	str	r0, [r7, #12]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d109      	bne.n	8012960 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	8b5b      	ldrh	r3, [r3, #26]
 8012950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012954:	b29a      	uxth	r2, r3
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801295a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801295e:	e070      	b.n	8012a42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	f003 0303 	and.w	r3, r3, #3
 8012968:	2b00      	cmp	r3, #0
 801296a:	d006      	beq.n	801297a <tcp_enqueue_flags+0xea>
 801296c:	4b37      	ldr	r3, [pc, #220]	; (8012a4c <tcp_enqueue_flags+0x1bc>)
 801296e:	f240 4242 	movw	r2, #1090	; 0x442
 8012972:	493b      	ldr	r1, [pc, #236]	; (8012a60 <tcp_enqueue_flags+0x1d0>)
 8012974:	4837      	ldr	r0, [pc, #220]	; (8012a54 <tcp_enqueue_flags+0x1c4>)
 8012976:	f003 fff3 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	891b      	ldrh	r3, [r3, #8]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d006      	beq.n	8012990 <tcp_enqueue_flags+0x100>
 8012982:	4b32      	ldr	r3, [pc, #200]	; (8012a4c <tcp_enqueue_flags+0x1bc>)
 8012984:	f240 4243 	movw	r2, #1091	; 0x443
 8012988:	4936      	ldr	r1, [pc, #216]	; (8012a64 <tcp_enqueue_flags+0x1d4>)
 801298a:	4832      	ldr	r0, [pc, #200]	; (8012a54 <tcp_enqueue_flags+0x1c4>)
 801298c:	f003 ffe8 	bl	8016960 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012994:	2b00      	cmp	r3, #0
 8012996:	d103      	bne.n	80129a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	66da      	str	r2, [r3, #108]	; 0x6c
 801299e:	e00d      	b.n	80129bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a4:	61bb      	str	r3, [r7, #24]
 80129a6:	e002      	b.n	80129ae <tcp_enqueue_flags+0x11e>
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	61bb      	str	r3, [r7, #24]
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1f8      	bne.n	80129a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129b6:	69bb      	ldr	r3, [r7, #24]
 80129b8:	68fa      	ldr	r2, [r7, #12]
 80129ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2200      	movs	r2, #0
 80129c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80129c4:	78fb      	ldrb	r3, [r7, #3]
 80129c6:	f003 0302 	and.w	r3, r3, #2
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d104      	bne.n	80129d8 <tcp_enqueue_flags+0x148>
 80129ce:	78fb      	ldrb	r3, [r7, #3]
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d004      	beq.n	80129e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129dc:	1c5a      	adds	r2, r3, #1
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80129e2:	78fb      	ldrb	r3, [r7, #3]
 80129e4:	f003 0301 	and.w	r3, r3, #1
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d006      	beq.n	80129fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	8b5b      	ldrh	r3, [r3, #26]
 80129f0:	f043 0320 	orr.w	r3, r3, #32
 80129f4:	b29a      	uxth	r2, r3
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7fa fcca 	bl	800d398 <pbuf_clen>
 8012a04:	4603      	mov	r3, r0
 8012a06:	461a      	mov	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a0e:	4413      	add	r3, r2
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00e      	beq.n	8012a40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d10a      	bne.n	8012a40 <tcp_enqueue_flags+0x1b0>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <tcp_enqueue_flags+0x1b0>
 8012a32:	4b06      	ldr	r3, [pc, #24]	; (8012a4c <tcp_enqueue_flags+0x1bc>)
 8012a34:	f240 4265 	movw	r2, #1125	; 0x465
 8012a38:	490b      	ldr	r1, [pc, #44]	; (8012a68 <tcp_enqueue_flags+0x1d8>)
 8012a3a:	4806      	ldr	r0, [pc, #24]	; (8012a54 <tcp_enqueue_flags+0x1c4>)
 8012a3c:	f003 ff90 	bl	8016960 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3720      	adds	r7, #32
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	0801bba0 	.word	0x0801bba0
 8012a50:	0801bfc4 	.word	0x0801bfc4
 8012a54:	0801bbf4 	.word	0x0801bbf4
 8012a58:	0801c01c 	.word	0x0801c01c
 8012a5c:	0801c03c 	.word	0x0801c03c
 8012a60:	0801c078 	.word	0x0801c078
 8012a64:	0801c090 	.word	0x0801c090
 8012a68:	0801c0bc 	.word	0x0801c0bc

08012a6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a6c:	b5b0      	push	{r4, r5, r7, lr}
 8012a6e:	b08a      	sub	sp, #40	; 0x28
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d106      	bne.n	8012a88 <tcp_output+0x1c>
 8012a7a:	4b8a      	ldr	r3, [pc, #552]	; (8012ca4 <tcp_output+0x238>)
 8012a7c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012a80:	4989      	ldr	r1, [pc, #548]	; (8012ca8 <tcp_output+0x23c>)
 8012a82:	488a      	ldr	r0, [pc, #552]	; (8012cac <tcp_output+0x240>)
 8012a84:	f003 ff6c 	bl	8016960 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	7d1b      	ldrb	r3, [r3, #20]
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d106      	bne.n	8012a9e <tcp_output+0x32>
 8012a90:	4b84      	ldr	r3, [pc, #528]	; (8012ca4 <tcp_output+0x238>)
 8012a92:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012a96:	4986      	ldr	r1, [pc, #536]	; (8012cb0 <tcp_output+0x244>)
 8012a98:	4884      	ldr	r0, [pc, #528]	; (8012cac <tcp_output+0x240>)
 8012a9a:	f003 ff61 	bl	8016960 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a9e:	4b85      	ldr	r3, [pc, #532]	; (8012cb4 <tcp_output+0x248>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	687a      	ldr	r2, [r7, #4]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d101      	bne.n	8012aac <tcp_output+0x40>
    return ERR_OK;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	e1ce      	b.n	8012e4a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	bf28      	it	cs
 8012abc:	4613      	movcs	r3, r2
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ac6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d10b      	bne.n	8012ae6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8b5b      	ldrh	r3, [r3, #26]
 8012ad2:	f003 0302 	and.w	r3, r3, #2
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 81aa 	beq.w	8012e30 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 fded 	bl	80136bc <tcp_send_empty_ack>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	e1b1      	b.n	8012e4a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012ae6:	6879      	ldr	r1, [r7, #4]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3304      	adds	r3, #4
 8012aec:	461a      	mov	r2, r3
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7ff f824 	bl	8011b3c <tcp_route>
 8012af4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d102      	bne.n	8012b02 <tcp_output+0x96>
    return ERR_RTE;
 8012afc:	f06f 0303 	mvn.w	r3, #3
 8012b00:	e1a3      	b.n	8012e4a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d003      	beq.n	8012b10 <tcp_output+0xa4>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d111      	bne.n	8012b34 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d002      	beq.n	8012b1c <tcp_output+0xb0>
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	3304      	adds	r3, #4
 8012b1a:	e000      	b.n	8012b1e <tcp_output+0xb2>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d102      	bne.n	8012b2c <tcp_output+0xc0>
      return ERR_RTE;
 8012b26:	f06f 0303 	mvn.w	r3, #3
 8012b2a:	e18e      	b.n	8012e4a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7f8 fead 	bl	800b89a <lwip_htonl>
 8012b40:	4602      	mov	r2, r0
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b46:	1ad3      	subs	r3, r2, r3
 8012b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b4a:	8912      	ldrh	r2, [r2, #8]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	69ba      	ldr	r2, [r7, #24]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d227      	bcs.n	8012ba4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d114      	bne.n	8012b8c <tcp_output+0x120>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d110      	bne.n	8012b8c <tcp_output+0x120>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d10b      	bne.n	8012b8c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	8b5b      	ldrh	r3, [r3, #26]
 8012b90:	f003 0302 	and.w	r3, r3, #2
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 814d 	beq.w	8012e34 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f000 fd8e 	bl	80136bc <tcp_send_empty_ack>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	e152      	b.n	8012e4a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bb0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012bb2:	6a3b      	ldr	r3, [r7, #32]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f000 811c 	beq.w	8012df2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012bba:	e002      	b.n	8012bc2 <tcp_output+0x156>
 8012bbc:	6a3b      	ldr	r3, [r7, #32]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	623b      	str	r3, [r7, #32]
 8012bc2:	6a3b      	ldr	r3, [r7, #32]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d1f8      	bne.n	8012bbc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012bca:	e112      	b.n	8012df2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	899b      	ldrh	r3, [r3, #12]
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f8 fe4b 	bl	800b870 <lwip_htons>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f003 0304 	and.w	r3, r3, #4
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d006      	beq.n	8012bf4 <tcp_output+0x188>
 8012be6:	4b2f      	ldr	r3, [pc, #188]	; (8012ca4 <tcp_output+0x238>)
 8012be8:	f240 5236 	movw	r2, #1334	; 0x536
 8012bec:	4932      	ldr	r1, [pc, #200]	; (8012cb8 <tcp_output+0x24c>)
 8012bee:	482f      	ldr	r0, [pc, #188]	; (8012cac <tcp_output+0x240>)
 8012bf0:	f003 feb6 	bl	8016960 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d01f      	beq.n	8012c3c <tcp_output+0x1d0>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	8b5b      	ldrh	r3, [r3, #26]
 8012c00:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d119      	bne.n	8012c3c <tcp_output+0x1d0>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00b      	beq.n	8012c28 <tcp_output+0x1bc>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d110      	bne.n	8012c3c <tcp_output+0x1d0>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c1e:	891a      	ldrh	r2, [r3, #8]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d209      	bcs.n	8012c3c <tcp_output+0x1d0>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d004      	beq.n	8012c3c <tcp_output+0x1d0>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c38:	2b08      	cmp	r3, #8
 8012c3a:	d901      	bls.n	8012c40 <tcp_output+0x1d4>
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e000      	b.n	8012c42 <tcp_output+0x1d6>
 8012c40:	2300      	movs	r3, #0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d106      	bne.n	8012c54 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	8b5b      	ldrh	r3, [r3, #26]
 8012c4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	f000 80e4 	beq.w	8012e1c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	7d1b      	ldrb	r3, [r3, #20]
 8012c58:	2b02      	cmp	r3, #2
 8012c5a:	d00d      	beq.n	8012c78 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	899b      	ldrh	r3, [r3, #12]
 8012c62:	b29c      	uxth	r4, r3
 8012c64:	2010      	movs	r0, #16
 8012c66:	f7f8 fe03 	bl	800b870 <lwip_htons>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	4322      	orrs	r2, r4
 8012c74:	b292      	uxth	r2, r2
 8012c76:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c78:	697a      	ldr	r2, [r7, #20]
 8012c7a:	6879      	ldr	r1, [r7, #4]
 8012c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c7e:	f000 f909 	bl	8012e94 <tcp_output_segment>
 8012c82:	4603      	mov	r3, r0
 8012c84:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d016      	beq.n	8012cbc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
      return err;
 8012c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ca0:	e0d3      	b.n	8012e4a <tcp_output+0x3de>
 8012ca2:	bf00      	nop
 8012ca4:	0801bba0 	.word	0x0801bba0
 8012ca8:	0801c0e4 	.word	0x0801c0e4
 8012cac:	0801bbf4 	.word	0x0801bbf4
 8012cb0:	0801c0fc 	.word	0x0801c0fc
 8012cb4:	20011b94 	.word	0x20011b94
 8012cb8:	0801c124 	.word	0x0801c124
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	7d1b      	ldrb	r3, [r3, #20]
 8012cc8:	2b02      	cmp	r3, #2
 8012cca:	d006      	beq.n	8012cda <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	8b5b      	ldrh	r3, [r3, #26]
 8012cd0:	f023 0303 	bic.w	r3, r3, #3
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f8 fdda 	bl	800b89a <lwip_htonl>
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cea:	891b      	ldrh	r3, [r3, #8]
 8012cec:	461d      	mov	r5, r3
 8012cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	899b      	ldrh	r3, [r3, #12]
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f8 fdba 	bl	800b870 <lwip_htons>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	f003 0303 	and.w	r3, r3, #3
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d001      	beq.n	8012d0c <tcp_output+0x2a0>
 8012d08:	2301      	movs	r3, #1
 8012d0a:	e000      	b.n	8012d0e <tcp_output+0x2a2>
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	442b      	add	r3, r5
 8012d10:	4423      	add	r3, r4
 8012d12:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	1ad3      	subs	r3, r2, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	da02      	bge.n	8012d26 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d28:	891b      	ldrh	r3, [r3, #8]
 8012d2a:	461c      	mov	r4, r3
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f8 fd9b 	bl	800b870 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0303 	and.w	r3, r3, #3
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d001      	beq.n	8012d4a <tcp_output+0x2de>
 8012d46:	2301      	movs	r3, #1
 8012d48:	e000      	b.n	8012d4c <tcp_output+0x2e0>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4423      	add	r3, r4
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d049      	beq.n	8012de6 <tcp_output+0x37a>
      seg->next = NULL;
 8012d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d54:	2200      	movs	r2, #0
 8012d56:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d105      	bne.n	8012d6c <tcp_output+0x300>
        pcb->unacked = seg;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d64:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d68:	623b      	str	r3, [r7, #32]
 8012d6a:	e03f      	b.n	8012dec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7f8 fd91 	bl	800b89a <lwip_htonl>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	6a3b      	ldr	r3, [r7, #32]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7f8 fd8a 	bl	800b89a <lwip_htonl>
 8012d86:	4603      	mov	r3, r0
 8012d88:	1ae3      	subs	r3, r4, r3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	da24      	bge.n	8012dd8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	3370      	adds	r3, #112	; 0x70
 8012d92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d94:	e002      	b.n	8012d9c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d011      	beq.n	8012dc8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 fd74 	bl	800b89a <lwip_htonl>
 8012db2:	4604      	mov	r4, r0
 8012db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7f8 fd6d 	bl	800b89a <lwip_htonl>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	dbe6      	blt.n	8012d96 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	e009      	b.n	8012dec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ddc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012dde:	6a3b      	ldr	r3, [r7, #32]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	623b      	str	r3, [r7, #32]
 8012de4:	e002      	b.n	8012dec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012de8:	f7fb ff19 	bl	800ec1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d012      	beq.n	8012e1e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f8 fd4b 	bl	800b89a <lwip_htonl>
 8012e04:	4602      	mov	r2, r0
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e0e:	8912      	ldrh	r2, [r2, #8]
 8012e10:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e12:	69ba      	ldr	r2, [r7, #24]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	f4bf aed9 	bcs.w	8012bcc <tcp_output+0x160>
 8012e1a:	e000      	b.n	8012e1e <tcp_output+0x3b2>
      break;
 8012e1c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d108      	bne.n	8012e38 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e2e:	e004      	b.n	8012e3a <tcp_output+0x3ce>
    goto output_done;
 8012e30:	bf00      	nop
 8012e32:	e002      	b.n	8012e3a <tcp_output+0x3ce>
    goto output_done;
 8012e34:	bf00      	nop
 8012e36:	e000      	b.n	8012e3a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e38:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	8b5b      	ldrh	r3, [r3, #26]
 8012e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e48:	2300      	movs	r3, #0
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3728      	adds	r7, #40	; 0x28
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bdb0      	pop	{r4, r5, r7, pc}
 8012e52:	bf00      	nop

08012e54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d106      	bne.n	8012e70 <tcp_output_segment_busy+0x1c>
 8012e62:	4b09      	ldr	r3, [pc, #36]	; (8012e88 <tcp_output_segment_busy+0x34>)
 8012e64:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e68:	4908      	ldr	r1, [pc, #32]	; (8012e8c <tcp_output_segment_busy+0x38>)
 8012e6a:	4809      	ldr	r0, [pc, #36]	; (8012e90 <tcp_output_segment_busy+0x3c>)
 8012e6c:	f003 fd78 	bl	8016960 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	7b9b      	ldrb	r3, [r3, #14]
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d001      	beq.n	8012e7e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e000      	b.n	8012e80 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	0801bba0 	.word	0x0801bba0
 8012e8c:	0801c13c 	.word	0x0801c13c
 8012e90:	0801bbf4 	.word	0x0801bbf4

08012e94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e94:	b5b0      	push	{r4, r5, r7, lr}
 8012e96:	b08c      	sub	sp, #48	; 0x30
 8012e98:	af04      	add	r7, sp, #16
 8012e9a:	60f8      	str	r0, [r7, #12]
 8012e9c:	60b9      	str	r1, [r7, #8]
 8012e9e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <tcp_output_segment+0x20>
 8012ea6:	4b6c      	ldr	r3, [pc, #432]	; (8013058 <tcp_output_segment+0x1c4>)
 8012ea8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012eac:	496b      	ldr	r1, [pc, #428]	; (801305c <tcp_output_segment+0x1c8>)
 8012eae:	486c      	ldr	r0, [pc, #432]	; (8013060 <tcp_output_segment+0x1cc>)
 8012eb0:	f003 fd56 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d106      	bne.n	8012ec8 <tcp_output_segment+0x34>
 8012eba:	4b67      	ldr	r3, [pc, #412]	; (8013058 <tcp_output_segment+0x1c4>)
 8012ebc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012ec0:	4968      	ldr	r1, [pc, #416]	; (8013064 <tcp_output_segment+0x1d0>)
 8012ec2:	4867      	ldr	r0, [pc, #412]	; (8013060 <tcp_output_segment+0x1cc>)
 8012ec4:	f003 fd4c 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <tcp_output_segment+0x48>
 8012ece:	4b62      	ldr	r3, [pc, #392]	; (8013058 <tcp_output_segment+0x1c4>)
 8012ed0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012ed4:	4964      	ldr	r1, [pc, #400]	; (8013068 <tcp_output_segment+0x1d4>)
 8012ed6:	4862      	ldr	r0, [pc, #392]	; (8013060 <tcp_output_segment+0x1cc>)
 8012ed8:	f003 fd42 	bl	8016960 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f7ff ffb9 	bl	8012e54 <tcp_output_segment_busy>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d001      	beq.n	8012eec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	e0b1      	b.n	8013050 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68dc      	ldr	r4, [r3, #12]
 8012ef4:	4610      	mov	r0, r2
 8012ef6:	f7f8 fcd0 	bl	800b89a <lwip_htonl>
 8012efa:	4603      	mov	r3, r0
 8012efc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	68dc      	ldr	r4, [r3, #12]
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7f8 fcb2 	bl	800b870 <lwip_htons>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f14:	68ba      	ldr	r2, [r7, #8]
 8012f16:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f18:	441a      	add	r2, r3
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	68db      	ldr	r3, [r3, #12]
 8012f22:	3314      	adds	r3, #20
 8012f24:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	7a9b      	ldrb	r3, [r3, #10]
 8012f2a:	f003 0301 	and.w	r3, r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d015      	beq.n	8012f5e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	3304      	adds	r3, #4
 8012f36:	461a      	mov	r2, r3
 8012f38:	6879      	ldr	r1, [r7, #4]
 8012f3a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f3e:	f7fc fa33 	bl	800f3a8 <tcp_eff_send_mss_netif>
 8012f42:	4603      	mov	r3, r0
 8012f44:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f46:	8b7b      	ldrh	r3, [r7, #26]
 8012f48:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7f8 fca4 	bl	800b89a <lwip_htonl>
 8012f52:	4602      	mov	r2, r0
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	da02      	bge.n	8012f6e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d10c      	bne.n	8012f90 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f76:	4b3d      	ldr	r3, [pc, #244]	; (801306c <tcp_output_segment+0x1d8>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7f8 fc88 	bl	800b89a <lwip_htonl>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	68da      	ldr	r2, [r3, #12]
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	8959      	ldrh	r1, [r3, #10]
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	8b3a      	ldrh	r2, [r7, #24]
 8012faa:	1a8a      	subs	r2, r1, r2
 8012fac:	b292      	uxth	r2, r2
 8012fae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	8919      	ldrh	r1, [r3, #8]
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	8b3a      	ldrh	r2, [r7, #24]
 8012fbc:	1a8a      	subs	r2, r1, r2
 8012fbe:	b292      	uxth	r2, r2
 8012fc0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	68d2      	ldr	r2, [r2, #12]
 8012fca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	741a      	strb	r2, [r3, #16]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	f103 0214 	add.w	r2, r3, #20
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	7a9b      	ldrb	r3, [r3, #10]
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	f003 0304 	and.w	r3, r3, #4
 8012fea:	4413      	add	r3, r2
 8012fec:	69fa      	ldr	r2, [r7, #28]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d006      	beq.n	8013000 <tcp_output_segment+0x16c>
 8012ff2:	4b19      	ldr	r3, [pc, #100]	; (8013058 <tcp_output_segment+0x1c4>)
 8012ff4:	f240 621c 	movw	r2, #1564	; 0x61c
 8012ff8:	491d      	ldr	r1, [pc, #116]	; (8013070 <tcp_output_segment+0x1dc>)
 8012ffa:	4819      	ldr	r0, [pc, #100]	; (8013060 <tcp_output_segment+0x1cc>)
 8012ffc:	f003 fcb0 	bl	8016960 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013008:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801300a:	68bd      	ldr	r5, [r7, #8]
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	68d4      	ldr	r4, [r2, #12]
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	462b      	mov	r3, r5
 8013018:	460a      	mov	r2, r1
 801301a:	2106      	movs	r1, #6
 801301c:	f7f8 fd5a 	bl	800bad4 <ip_chksum_pseudo>
 8013020:	4603      	mov	r3, r0
 8013022:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	6858      	ldr	r0, [r3, #4]
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	1d1c      	adds	r4, r3, #4
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	7add      	ldrb	r5, [r3, #11]
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	7a9b      	ldrb	r3, [r3, #10]
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	9202      	str	r2, [sp, #8]
 801303a:	2206      	movs	r2, #6
 801303c:	9201      	str	r2, [sp, #4]
 801303e:	9300      	str	r3, [sp, #0]
 8013040:	462b      	mov	r3, r5
 8013042:	4622      	mov	r2, r4
 8013044:	f002 f8b2 	bl	80151ac <ip4_output_if>
 8013048:	4603      	mov	r3, r0
 801304a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801304c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013050:	4618      	mov	r0, r3
 8013052:	3720      	adds	r7, #32
 8013054:	46bd      	mov	sp, r7
 8013056:	bdb0      	pop	{r4, r5, r7, pc}
 8013058:	0801bba0 	.word	0x0801bba0
 801305c:	0801c164 	.word	0x0801c164
 8013060:	0801bbf4 	.word	0x0801bbf4
 8013064:	0801c184 	.word	0x0801c184
 8013068:	0801c1a4 	.word	0x0801c1a4
 801306c:	20011b48 	.word	0x20011b48
 8013070:	0801c1c8 	.word	0x0801c1c8

08013074 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013074:	b5b0      	push	{r4, r5, r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d106      	bne.n	8013090 <tcp_rexmit_rto_prepare+0x1c>
 8013082:	4b31      	ldr	r3, [pc, #196]	; (8013148 <tcp_rexmit_rto_prepare+0xd4>)
 8013084:	f240 6263 	movw	r2, #1635	; 0x663
 8013088:	4930      	ldr	r1, [pc, #192]	; (801314c <tcp_rexmit_rto_prepare+0xd8>)
 801308a:	4831      	ldr	r0, [pc, #196]	; (8013150 <tcp_rexmit_rto_prepare+0xdc>)
 801308c:	f003 fc68 	bl	8016960 <iprintf>

  if (pcb->unacked == NULL) {
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013094:	2b00      	cmp	r3, #0
 8013096:	d102      	bne.n	801309e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013098:	f06f 0305 	mvn.w	r3, #5
 801309c:	e050      	b.n	8013140 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a2:	60fb      	str	r3, [r7, #12]
 80130a4:	e00b      	b.n	80130be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7ff fed4 	bl	8012e54 <tcp_output_segment_busy>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d002      	beq.n	80130b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80130b2:	f06f 0305 	mvn.w	r3, #5
 80130b6:	e043      	b.n	8013140 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	60fb      	str	r3, [r7, #12]
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d1ef      	bne.n	80130a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80130c6:	68f8      	ldr	r0, [r7, #12]
 80130c8:	f7ff fec4 	bl	8012e54 <tcp_output_segment_busy>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d002      	beq.n	80130d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130d2:	f06f 0305 	mvn.w	r3, #5
 80130d6:	e033      	b.n	8013140 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2200      	movs	r2, #0
 80130ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	8b5b      	ldrh	r3, [r3, #26]
 80130f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80130f6:	b29a      	uxth	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	f7f8 fbc9 	bl	800b89a <lwip_htonl>
 8013108:	4604      	mov	r4, r0
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	891b      	ldrh	r3, [r3, #8]
 801310e:	461d      	mov	r5, r3
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	899b      	ldrh	r3, [r3, #12]
 8013116:	b29b      	uxth	r3, r3
 8013118:	4618      	mov	r0, r3
 801311a:	f7f8 fba9 	bl	800b870 <lwip_htons>
 801311e:	4603      	mov	r3, r0
 8013120:	b2db      	uxtb	r3, r3
 8013122:	f003 0303 	and.w	r3, r3, #3
 8013126:	2b00      	cmp	r3, #0
 8013128:	d001      	beq.n	801312e <tcp_rexmit_rto_prepare+0xba>
 801312a:	2301      	movs	r3, #1
 801312c:	e000      	b.n	8013130 <tcp_rexmit_rto_prepare+0xbc>
 801312e:	2300      	movs	r3, #0
 8013130:	442b      	add	r3, r5
 8013132:	18e2      	adds	r2, r4, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801313e:	2300      	movs	r3, #0
}
 8013140:	4618      	mov	r0, r3
 8013142:	3710      	adds	r7, #16
 8013144:	46bd      	mov	sp, r7
 8013146:	bdb0      	pop	{r4, r5, r7, pc}
 8013148:	0801bba0 	.word	0x0801bba0
 801314c:	0801c1dc 	.word	0x0801c1dc
 8013150:	0801bbf4 	.word	0x0801bbf4

08013154 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d106      	bne.n	8013170 <tcp_rexmit_rto_commit+0x1c>
 8013162:	4b0d      	ldr	r3, [pc, #52]	; (8013198 <tcp_rexmit_rto_commit+0x44>)
 8013164:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013168:	490c      	ldr	r1, [pc, #48]	; (801319c <tcp_rexmit_rto_commit+0x48>)
 801316a:	480d      	ldr	r0, [pc, #52]	; (80131a0 <tcp_rexmit_rto_commit+0x4c>)
 801316c:	f003 fbf8 	bl	8016960 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013176:	2bff      	cmp	r3, #255	; 0xff
 8013178:	d007      	beq.n	801318a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013180:	3301      	adds	r3, #1
 8013182:	b2da      	uxtb	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7ff fc6e 	bl	8012a6c <tcp_output>
}
 8013190:	bf00      	nop
 8013192:	3708      	adds	r7, #8
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	0801bba0 	.word	0x0801bba0
 801319c:	0801c200 	.word	0x0801c200
 80131a0:	0801bbf4 	.word	0x0801bbf4

080131a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <tcp_rexmit_rto+0x1c>
 80131b2:	4b0a      	ldr	r3, [pc, #40]	; (80131dc <tcp_rexmit_rto+0x38>)
 80131b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80131b8:	4909      	ldr	r1, [pc, #36]	; (80131e0 <tcp_rexmit_rto+0x3c>)
 80131ba:	480a      	ldr	r0, [pc, #40]	; (80131e4 <tcp_rexmit_rto+0x40>)
 80131bc:	f003 fbd0 	bl	8016960 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7ff ff57 	bl	8013074 <tcp_rexmit_rto_prepare>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d102      	bne.n	80131d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f7ff ffc1 	bl	8013154 <tcp_rexmit_rto_commit>
  }
}
 80131d2:	bf00      	nop
 80131d4:	3708      	adds	r7, #8
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	0801bba0 	.word	0x0801bba0
 80131e0:	0801c224 	.word	0x0801c224
 80131e4:	0801bbf4 	.word	0x0801bbf4

080131e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80131e8:	b590      	push	{r4, r7, lr}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <tcp_rexmit+0x1c>
 80131f6:	4b2f      	ldr	r3, [pc, #188]	; (80132b4 <tcp_rexmit+0xcc>)
 80131f8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80131fc:	492e      	ldr	r1, [pc, #184]	; (80132b8 <tcp_rexmit+0xd0>)
 80131fe:	482f      	ldr	r0, [pc, #188]	; (80132bc <tcp_rexmit+0xd4>)
 8013200:	f003 fbae 	bl	8016960 <iprintf>

  if (pcb->unacked == NULL) {
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013208:	2b00      	cmp	r3, #0
 801320a:	d102      	bne.n	8013212 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801320c:	f06f 0305 	mvn.w	r3, #5
 8013210:	e04c      	b.n	80132ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013216:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013218:	68b8      	ldr	r0, [r7, #8]
 801321a:	f7ff fe1b 	bl	8012e54 <tcp_output_segment_busy>
 801321e:	4603      	mov	r3, r0
 8013220:	2b00      	cmp	r3, #0
 8013222:	d002      	beq.n	801322a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013224:	f06f 0305 	mvn.w	r3, #5
 8013228:	e040      	b.n	80132ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	681a      	ldr	r2, [r3, #0]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	336c      	adds	r3, #108	; 0x6c
 8013236:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013238:	e002      	b.n	8013240 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d011      	beq.n	801326c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	4618      	mov	r0, r3
 8013252:	f7f8 fb22 	bl	800b89a <lwip_htonl>
 8013256:	4604      	mov	r4, r0
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	4618      	mov	r0, r3
 8013260:	f7f8 fb1b 	bl	800b89a <lwip_htonl>
 8013264:	4603      	mov	r3, r0
 8013266:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013268:	2b00      	cmp	r3, #0
 801326a:	dbe6      	blt.n	801323a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d103      	bne.n	801328a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013290:	2bff      	cmp	r3, #255	; 0xff
 8013292:	d007      	beq.n	80132a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801329a:	3301      	adds	r3, #1
 801329c:	b2da      	uxtb	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80132aa:	2300      	movs	r3, #0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd90      	pop	{r4, r7, pc}
 80132b4:	0801bba0 	.word	0x0801bba0
 80132b8:	0801c240 	.word	0x0801c240
 80132bc:	0801bbf4 	.word	0x0801bbf4

080132c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <tcp_rexmit_fast+0x1c>
 80132ce:	4b2a      	ldr	r3, [pc, #168]	; (8013378 <tcp_rexmit_fast+0xb8>)
 80132d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132d4:	4929      	ldr	r1, [pc, #164]	; (801337c <tcp_rexmit_fast+0xbc>)
 80132d6:	482a      	ldr	r0, [pc, #168]	; (8013380 <tcp_rexmit_fast+0xc0>)
 80132d8:	f003 fb42 	bl	8016960 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d045      	beq.n	8013370 <tcp_rexmit_fast+0xb0>
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	8b5b      	ldrh	r3, [r3, #26]
 80132e8:	f003 0304 	and.w	r3, r3, #4
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d13f      	bne.n	8013370 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7ff ff79 	bl	80131e8 <tcp_rexmit>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d139      	bne.n	8013370 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013308:	4293      	cmp	r3, r2
 801330a:	bf28      	it	cs
 801330c:	4613      	movcs	r3, r2
 801330e:	b29b      	uxth	r3, r3
 8013310:	2b00      	cmp	r3, #0
 8013312:	da00      	bge.n	8013316 <tcp_rexmit_fast+0x56>
 8013314:	3301      	adds	r3, #1
 8013316:	105b      	asrs	r3, r3, #1
 8013318:	b29a      	uxth	r2, r3
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013326:	461a      	mov	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	429a      	cmp	r2, r3
 8013330:	d206      	bcs.n	8013340 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	b29a      	uxth	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801334a:	4619      	mov	r1, r3
 801334c:	0049      	lsls	r1, r1, #1
 801334e:	440b      	add	r3, r1
 8013350:	b29b      	uxth	r3, r3
 8013352:	4413      	add	r3, r2
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	8b5b      	ldrh	r3, [r3, #26]
 8013360:	f043 0304 	orr.w	r3, r3, #4
 8013364:	b29a      	uxth	r2, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2200      	movs	r2, #0
 801336e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013370:	bf00      	nop
 8013372:	3708      	adds	r7, #8
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	0801bba0 	.word	0x0801bba0
 801337c:	0801c258 	.word	0x0801c258
 8013380:	0801bbf4 	.word	0x0801bbf4

08013384 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b086      	sub	sp, #24
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	607b      	str	r3, [r7, #4]
 801338e:	460b      	mov	r3, r1
 8013390:	817b      	strh	r3, [r7, #10]
 8013392:	4613      	mov	r3, r2
 8013394:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013396:	897a      	ldrh	r2, [r7, #10]
 8013398:	893b      	ldrh	r3, [r7, #8]
 801339a:	4413      	add	r3, r2
 801339c:	b29b      	uxth	r3, r3
 801339e:	3314      	adds	r3, #20
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133a6:	4619      	mov	r1, r3
 80133a8:	2022      	movs	r0, #34	; 0x22
 80133aa:	f7f9 fc83 	bl	800ccb4 <pbuf_alloc>
 80133ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d04d      	beq.n	8013452 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80133b6:	897b      	ldrh	r3, [r7, #10]
 80133b8:	3313      	adds	r3, #19
 80133ba:	697a      	ldr	r2, [r7, #20]
 80133bc:	8952      	ldrh	r2, [r2, #10]
 80133be:	4293      	cmp	r3, r2
 80133c0:	db06      	blt.n	80133d0 <tcp_output_alloc_header_common+0x4c>
 80133c2:	4b26      	ldr	r3, [pc, #152]	; (801345c <tcp_output_alloc_header_common+0xd8>)
 80133c4:	f240 7223 	movw	r2, #1827	; 0x723
 80133c8:	4925      	ldr	r1, [pc, #148]	; (8013460 <tcp_output_alloc_header_common+0xdc>)
 80133ca:	4826      	ldr	r0, [pc, #152]	; (8013464 <tcp_output_alloc_header_common+0xe0>)
 80133cc:	f003 fac8 	bl	8016960 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133d6:	8c3b      	ldrh	r3, [r7, #32]
 80133d8:	4618      	mov	r0, r3
 80133da:	f7f8 fa49 	bl	800b870 <lwip_htons>
 80133de:	4603      	mov	r3, r0
 80133e0:	461a      	mov	r2, r3
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7f8 fa41 	bl	800b870 <lwip_htons>
 80133ee:	4603      	mov	r3, r0
 80133f0:	461a      	mov	r2, r3
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f7f8 fa4c 	bl	800b89a <lwip_htonl>
 8013402:	4602      	mov	r2, r0
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013408:	897b      	ldrh	r3, [r7, #10]
 801340a:	089b      	lsrs	r3, r3, #2
 801340c:	b29b      	uxth	r3, r3
 801340e:	3305      	adds	r3, #5
 8013410:	b29b      	uxth	r3, r3
 8013412:	031b      	lsls	r3, r3, #12
 8013414:	b29a      	uxth	r2, r3
 8013416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801341a:	b29b      	uxth	r3, r3
 801341c:	4313      	orrs	r3, r2
 801341e:	b29b      	uxth	r3, r3
 8013420:	4618      	mov	r0, r3
 8013422:	f7f8 fa25 	bl	800b870 <lwip_htons>
 8013426:	4603      	mov	r3, r0
 8013428:	461a      	mov	r2, r3
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801342e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013430:	4618      	mov	r0, r3
 8013432:	f7f8 fa1d 	bl	800b870 <lwip_htons>
 8013436:	4603      	mov	r3, r0
 8013438:	461a      	mov	r2, r3
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	2200      	movs	r2, #0
 8013442:	741a      	strb	r2, [r3, #16]
 8013444:	2200      	movs	r2, #0
 8013446:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	2200      	movs	r2, #0
 801344c:	749a      	strb	r2, [r3, #18]
 801344e:	2200      	movs	r2, #0
 8013450:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013452:	697b      	ldr	r3, [r7, #20]
}
 8013454:	4618      	mov	r0, r3
 8013456:	3718      	adds	r7, #24
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	0801bba0 	.word	0x0801bba0
 8013460:	0801c278 	.word	0x0801c278
 8013464:	0801bbf4 	.word	0x0801bbf4

08013468 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013468:	b5b0      	push	{r4, r5, r7, lr}
 801346a:	b08a      	sub	sp, #40	; 0x28
 801346c:	af04      	add	r7, sp, #16
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	607b      	str	r3, [r7, #4]
 8013472:	460b      	mov	r3, r1
 8013474:	817b      	strh	r3, [r7, #10]
 8013476:	4613      	mov	r3, r2
 8013478:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d106      	bne.n	801348e <tcp_output_alloc_header+0x26>
 8013480:	4b15      	ldr	r3, [pc, #84]	; (80134d8 <tcp_output_alloc_header+0x70>)
 8013482:	f240 7242 	movw	r2, #1858	; 0x742
 8013486:	4915      	ldr	r1, [pc, #84]	; (80134dc <tcp_output_alloc_header+0x74>)
 8013488:	4815      	ldr	r0, [pc, #84]	; (80134e0 <tcp_output_alloc_header+0x78>)
 801348a:	f003 fa69 	bl	8016960 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	8adb      	ldrh	r3, [r3, #22]
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	8b12      	ldrh	r2, [r2, #24]
 801349a:	68f9      	ldr	r1, [r7, #12]
 801349c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801349e:	893d      	ldrh	r5, [r7, #8]
 80134a0:	897c      	ldrh	r4, [r7, #10]
 80134a2:	9103      	str	r1, [sp, #12]
 80134a4:	2110      	movs	r1, #16
 80134a6:	9102      	str	r1, [sp, #8]
 80134a8:	9201      	str	r2, [sp, #4]
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	462a      	mov	r2, r5
 80134b0:	4621      	mov	r1, r4
 80134b2:	f7ff ff67 	bl	8013384 <tcp_output_alloc_header_common>
 80134b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d006      	beq.n	80134cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c2:	68fa      	ldr	r2, [r7, #12]
 80134c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80134c6:	441a      	add	r2, r3
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80134cc:	697b      	ldr	r3, [r7, #20]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3718      	adds	r7, #24
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bdb0      	pop	{r4, r5, r7, pc}
 80134d6:	bf00      	nop
 80134d8:	0801bba0 	.word	0x0801bba0
 80134dc:	0801c2a8 	.word	0x0801c2a8
 80134e0:	0801bbf4 	.word	0x0801bbf4

080134e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b088      	sub	sp, #32
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	4611      	mov	r1, r2
 80134f0:	461a      	mov	r2, r3
 80134f2:	460b      	mov	r3, r1
 80134f4:	71fb      	strb	r3, [r7, #7]
 80134f6:	4613      	mov	r3, r2
 80134f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80134fa:	2300      	movs	r3, #0
 80134fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d106      	bne.n	8013512 <tcp_output_fill_options+0x2e>
 8013504:	4b13      	ldr	r3, [pc, #76]	; (8013554 <tcp_output_fill_options+0x70>)
 8013506:	f240 7256 	movw	r2, #1878	; 0x756
 801350a:	4913      	ldr	r1, [pc, #76]	; (8013558 <tcp_output_fill_options+0x74>)
 801350c:	4813      	ldr	r0, [pc, #76]	; (801355c <tcp_output_fill_options+0x78>)
 801350e:	f003 fa27 	bl	8016960 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013518:	69bb      	ldr	r3, [r7, #24]
 801351a:	3314      	adds	r3, #20
 801351c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	f103 0214 	add.w	r2, r3, #20
 8013524:	8bfb      	ldrh	r3, [r7, #30]
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	4619      	mov	r1, r3
 801352a:	79fb      	ldrb	r3, [r7, #7]
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	f003 0304 	and.w	r3, r3, #4
 8013532:	440b      	add	r3, r1
 8013534:	4413      	add	r3, r2
 8013536:	697a      	ldr	r2, [r7, #20]
 8013538:	429a      	cmp	r2, r3
 801353a:	d006      	beq.n	801354a <tcp_output_fill_options+0x66>
 801353c:	4b05      	ldr	r3, [pc, #20]	; (8013554 <tcp_output_fill_options+0x70>)
 801353e:	f240 7275 	movw	r2, #1909	; 0x775
 8013542:	4907      	ldr	r1, [pc, #28]	; (8013560 <tcp_output_fill_options+0x7c>)
 8013544:	4805      	ldr	r0, [pc, #20]	; (801355c <tcp_output_fill_options+0x78>)
 8013546:	f003 fa0b 	bl	8016960 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801354a:	bf00      	nop
 801354c:	3720      	adds	r7, #32
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	0801bba0 	.word	0x0801bba0
 8013558:	0801c2d0 	.word	0x0801c2d0
 801355c:	0801bbf4 	.word	0x0801bbf4
 8013560:	0801c1c8 	.word	0x0801c1c8

08013564 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b08c      	sub	sp, #48	; 0x30
 8013568:	af04      	add	r7, sp, #16
 801356a:	60f8      	str	r0, [r7, #12]
 801356c:	60b9      	str	r1, [r7, #8]
 801356e:	607a      	str	r2, [r7, #4]
 8013570:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d106      	bne.n	8013586 <tcp_output_control_segment+0x22>
 8013578:	4b24      	ldr	r3, [pc, #144]	; (801360c <tcp_output_control_segment+0xa8>)
 801357a:	f240 7287 	movw	r2, #1927	; 0x787
 801357e:	4924      	ldr	r1, [pc, #144]	; (8013610 <tcp_output_control_segment+0xac>)
 8013580:	4824      	ldr	r0, [pc, #144]	; (8013614 <tcp_output_control_segment+0xb0>)
 8013582:	f003 f9ed 	bl	8016960 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013586:	683a      	ldr	r2, [r7, #0]
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f7fe fad6 	bl	8011b3c <tcp_route>
 8013590:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d102      	bne.n	801359e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013598:	23fc      	movs	r3, #252	; 0xfc
 801359a:	77fb      	strb	r3, [r7, #31]
 801359c:	e02c      	b.n	80135f8 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	891a      	ldrh	r2, [r3, #8]
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2106      	movs	r1, #6
 80135b0:	68b8      	ldr	r0, [r7, #8]
 80135b2:	f7f8 fa8f 	bl	800bad4 <ip_chksum_pseudo>
 80135b6:	4603      	mov	r3, r0
 80135b8:	461a      	mov	r2, r3
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d006      	beq.n	80135d2 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	7adb      	ldrb	r3, [r3, #11]
 80135c8:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	7a9b      	ldrb	r3, [r3, #10]
 80135ce:	777b      	strb	r3, [r7, #29]
 80135d0:	e003      	b.n	80135da <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80135d2:	23ff      	movs	r3, #255	; 0xff
 80135d4:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80135d6:	2300      	movs	r3, #0
 80135d8:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80135da:	7fba      	ldrb	r2, [r7, #30]
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	9302      	str	r3, [sp, #8]
 80135e0:	2306      	movs	r3, #6
 80135e2:	9301      	str	r3, [sp, #4]
 80135e4:	7f7b      	ldrb	r3, [r7, #29]
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	4613      	mov	r3, r2
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	6879      	ldr	r1, [r7, #4]
 80135ee:	68b8      	ldr	r0, [r7, #8]
 80135f0:	f001 fddc 	bl	80151ac <ip4_output_if>
 80135f4:	4603      	mov	r3, r0
 80135f6:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135f8:	68b8      	ldr	r0, [r7, #8]
 80135fa:	f7f9 fe3f 	bl	800d27c <pbuf_free>
  return err;
 80135fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3720      	adds	r7, #32
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	0801bba0 	.word	0x0801bba0
 8013610:	0801c2f8 	.word	0x0801c2f8
 8013614:	0801bbf4 	.word	0x0801bbf4

08013618 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013618:	b590      	push	{r4, r7, lr}
 801361a:	b08b      	sub	sp, #44	; 0x2c
 801361c:	af04      	add	r7, sp, #16
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	607a      	str	r2, [r7, #4]
 8013624:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d106      	bne.n	801363a <tcp_rst+0x22>
 801362c:	4b1f      	ldr	r3, [pc, #124]	; (80136ac <tcp_rst+0x94>)
 801362e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013632:	491f      	ldr	r1, [pc, #124]	; (80136b0 <tcp_rst+0x98>)
 8013634:	481f      	ldr	r0, [pc, #124]	; (80136b4 <tcp_rst+0x9c>)
 8013636:	f003 f993 	bl	8016960 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	2b00      	cmp	r3, #0
 801363e:	d106      	bne.n	801364e <tcp_rst+0x36>
 8013640:	4b1a      	ldr	r3, [pc, #104]	; (80136ac <tcp_rst+0x94>)
 8013642:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013646:	491c      	ldr	r1, [pc, #112]	; (80136b8 <tcp_rst+0xa0>)
 8013648:	481a      	ldr	r0, [pc, #104]	; (80136b4 <tcp_rst+0x9c>)
 801364a:	f003 f989 	bl	8016960 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801364e:	2300      	movs	r3, #0
 8013650:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013652:	f246 0308 	movw	r3, #24584	; 0x6008
 8013656:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013658:	7dfb      	ldrb	r3, [r7, #23]
 801365a:	b29c      	uxth	r4, r3
 801365c:	68b8      	ldr	r0, [r7, #8]
 801365e:	f7f8 f91c 	bl	800b89a <lwip_htonl>
 8013662:	4602      	mov	r2, r0
 8013664:	8abb      	ldrh	r3, [r7, #20]
 8013666:	9303      	str	r3, [sp, #12]
 8013668:	2314      	movs	r3, #20
 801366a:	9302      	str	r3, [sp, #8]
 801366c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801366e:	9301      	str	r3, [sp, #4]
 8013670:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	4613      	mov	r3, r2
 8013676:	2200      	movs	r2, #0
 8013678:	4621      	mov	r1, r4
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff fe82 	bl	8013384 <tcp_output_alloc_header_common>
 8013680:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00c      	beq.n	80136a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013688:	7dfb      	ldrb	r3, [r7, #23]
 801368a:	2200      	movs	r2, #0
 801368c:	6939      	ldr	r1, [r7, #16]
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f7ff ff28 	bl	80134e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	683a      	ldr	r2, [r7, #0]
 8013698:	6939      	ldr	r1, [r7, #16]
 801369a:	68f8      	ldr	r0, [r7, #12]
 801369c:	f7ff ff62 	bl	8013564 <tcp_output_control_segment>
 80136a0:	e000      	b.n	80136a4 <tcp_rst+0x8c>
    return;
 80136a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80136a4:	371c      	adds	r7, #28
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd90      	pop	{r4, r7, pc}
 80136aa:	bf00      	nop
 80136ac:	0801bba0 	.word	0x0801bba0
 80136b0:	0801c324 	.word	0x0801c324
 80136b4:	0801bbf4 	.word	0x0801bbf4
 80136b8:	0801c340 	.word	0x0801c340

080136bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80136bc:	b590      	push	{r4, r7, lr}
 80136be:	b087      	sub	sp, #28
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80136c8:	2300      	movs	r3, #0
 80136ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d106      	bne.n	80136e0 <tcp_send_empty_ack+0x24>
 80136d2:	4b28      	ldr	r3, [pc, #160]	; (8013774 <tcp_send_empty_ack+0xb8>)
 80136d4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80136d8:	4927      	ldr	r1, [pc, #156]	; (8013778 <tcp_send_empty_ack+0xbc>)
 80136da:	4828      	ldr	r0, [pc, #160]	; (801377c <tcp_send_empty_ack+0xc0>)
 80136dc:	f003 f940 	bl	8016960 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136e0:	7dfb      	ldrb	r3, [r7, #23]
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	f003 0304 	and.w	r3, r3, #4
 80136ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80136ec:	7d7b      	ldrb	r3, [r7, #21]
 80136ee:	b29c      	uxth	r4, r3
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7f8 f8d0 	bl	800b89a <lwip_htonl>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2200      	movs	r2, #0
 80136fe:	4621      	mov	r1, r4
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7ff feb1 	bl	8013468 <tcp_output_alloc_header>
 8013706:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d109      	bne.n	8013722 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	8b5b      	ldrh	r3, [r3, #26]
 8013712:	f043 0303 	orr.w	r3, r3, #3
 8013716:	b29a      	uxth	r2, r3
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801371c:	f06f 0301 	mvn.w	r3, #1
 8013720:	e023      	b.n	801376a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013722:	7dbb      	ldrb	r3, [r7, #22]
 8013724:	7dfa      	ldrb	r2, [r7, #23]
 8013726:	6939      	ldr	r1, [r7, #16]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7ff fedb 	bl	80134e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	3304      	adds	r3, #4
 8013734:	6939      	ldr	r1, [r7, #16]
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f7ff ff14 	bl	8013564 <tcp_output_control_segment>
 801373c:	4603      	mov	r3, r0
 801373e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d007      	beq.n	8013758 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	8b5b      	ldrh	r3, [r3, #26]
 801374c:	f043 0303 	orr.w	r3, r3, #3
 8013750:	b29a      	uxth	r2, r3
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	835a      	strh	r2, [r3, #26]
 8013756:	e006      	b.n	8013766 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	8b5b      	ldrh	r3, [r3, #26]
 801375c:	f023 0303 	bic.w	r3, r3, #3
 8013760:	b29a      	uxth	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801376a:	4618      	mov	r0, r3
 801376c:	371c      	adds	r7, #28
 801376e:	46bd      	mov	sp, r7
 8013770:	bd90      	pop	{r4, r7, pc}
 8013772:	bf00      	nop
 8013774:	0801bba0 	.word	0x0801bba0
 8013778:	0801c35c 	.word	0x0801c35c
 801377c:	0801bbf4 	.word	0x0801bbf4

08013780 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013780:	b590      	push	{r4, r7, lr}
 8013782:	b087      	sub	sp, #28
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013788:	2300      	movs	r3, #0
 801378a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d106      	bne.n	80137a0 <tcp_keepalive+0x20>
 8013792:	4b18      	ldr	r3, [pc, #96]	; (80137f4 <tcp_keepalive+0x74>)
 8013794:	f640 0224 	movw	r2, #2084	; 0x824
 8013798:	4917      	ldr	r1, [pc, #92]	; (80137f8 <tcp_keepalive+0x78>)
 801379a:	4818      	ldr	r0, [pc, #96]	; (80137fc <tcp_keepalive+0x7c>)
 801379c:	f003 f8e0 	bl	8016960 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80137a0:	7dfb      	ldrb	r3, [r7, #23]
 80137a2:	b29c      	uxth	r4, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137a8:	3b01      	subs	r3, #1
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7f8 f875 	bl	800b89a <lwip_htonl>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2200      	movs	r2, #0
 80137b4:	4621      	mov	r1, r4
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7ff fe56 	bl	8013468 <tcp_output_alloc_header>
 80137bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d102      	bne.n	80137ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80137c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137c8:	e010      	b.n	80137ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137ca:	7dfb      	ldrb	r3, [r7, #23]
 80137cc:	2200      	movs	r2, #0
 80137ce:	6939      	ldr	r1, [r7, #16]
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f7ff fe87 	bl	80134e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	3304      	adds	r3, #4
 80137dc:	6939      	ldr	r1, [r7, #16]
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f7ff fec0 	bl	8013564 <tcp_output_control_segment>
 80137e4:	4603      	mov	r3, r0
 80137e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	371c      	adds	r7, #28
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd90      	pop	{r4, r7, pc}
 80137f4:	0801bba0 	.word	0x0801bba0
 80137f8:	0801c37c 	.word	0x0801c37c
 80137fc:	0801bbf4 	.word	0x0801bbf4

08013800 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013800:	b590      	push	{r4, r7, lr}
 8013802:	b08b      	sub	sp, #44	; 0x2c
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013808:	2300      	movs	r3, #0
 801380a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d106      	bne.n	8013822 <tcp_zero_window_probe+0x22>
 8013814:	4b4c      	ldr	r3, [pc, #304]	; (8013948 <tcp_zero_window_probe+0x148>)
 8013816:	f640 024f 	movw	r2, #2127	; 0x84f
 801381a:	494c      	ldr	r1, [pc, #304]	; (801394c <tcp_zero_window_probe+0x14c>)
 801381c:	484c      	ldr	r0, [pc, #304]	; (8013950 <tcp_zero_window_probe+0x150>)
 801381e:	f003 f89f 	bl	8016960 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013826:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013828:	6a3b      	ldr	r3, [r7, #32]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d101      	bne.n	8013832 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801382e:	2300      	movs	r3, #0
 8013830:	e086      	b.n	8013940 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013838:	2bff      	cmp	r3, #255	; 0xff
 801383a:	d007      	beq.n	801384c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013842:	3301      	adds	r3, #1
 8013844:	b2da      	uxtb	r2, r3
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801384c:	6a3b      	ldr	r3, [r7, #32]
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	899b      	ldrh	r3, [r3, #12]
 8013852:	b29b      	uxth	r3, r3
 8013854:	4618      	mov	r0, r3
 8013856:	f7f8 f80b 	bl	800b870 <lwip_htons>
 801385a:	4603      	mov	r3, r0
 801385c:	b2db      	uxtb	r3, r3
 801385e:	f003 0301 	and.w	r3, r3, #1
 8013862:	2b00      	cmp	r3, #0
 8013864:	d005      	beq.n	8013872 <tcp_zero_window_probe+0x72>
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	891b      	ldrh	r3, [r3, #8]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d101      	bne.n	8013872 <tcp_zero_window_probe+0x72>
 801386e:	2301      	movs	r3, #1
 8013870:	e000      	b.n	8013874 <tcp_zero_window_probe+0x74>
 8013872:	2300      	movs	r3, #0
 8013874:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013876:	7ffb      	ldrb	r3, [r7, #31]
 8013878:	2b00      	cmp	r3, #0
 801387a:	bf0c      	ite	eq
 801387c:	2301      	moveq	r3, #1
 801387e:	2300      	movne	r3, #0
 8013880:	b2db      	uxtb	r3, r3
 8013882:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013888:	b299      	uxth	r1, r3
 801388a:	6a3b      	ldr	r3, [r7, #32]
 801388c:	68db      	ldr	r3, [r3, #12]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	8bba      	ldrh	r2, [r7, #28]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff fde8 	bl	8013468 <tcp_output_alloc_header>
 8013898:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d102      	bne.n	80138a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80138a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138a4:	e04c      	b.n	8013940 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80138ac:	7ffb      	ldrb	r3, [r7, #31]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d011      	beq.n	80138d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	899b      	ldrh	r3, [r3, #12]
 80138b6:	b29b      	uxth	r3, r3
 80138b8:	b21b      	sxth	r3, r3
 80138ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80138be:	b21c      	sxth	r4, r3
 80138c0:	2011      	movs	r0, #17
 80138c2:	f7f7 ffd5 	bl	800b870 <lwip_htons>
 80138c6:	4603      	mov	r3, r0
 80138c8:	b21b      	sxth	r3, r3
 80138ca:	4323      	orrs	r3, r4
 80138cc:	b21b      	sxth	r3, r3
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	819a      	strh	r2, [r3, #12]
 80138d4:	e010      	b.n	80138f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	3314      	adds	r3, #20
 80138dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80138de:	6a3b      	ldr	r3, [r7, #32]
 80138e0:	6858      	ldr	r0, [r3, #4]
 80138e2:	6a3b      	ldr	r3, [r7, #32]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	891a      	ldrh	r2, [r3, #8]
 80138e8:	6a3b      	ldr	r3, [r7, #32]
 80138ea:	891b      	ldrh	r3, [r3, #8]
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	2201      	movs	r2, #1
 80138f2:	6939      	ldr	r1, [r7, #16]
 80138f4:	f7f9 feb8 	bl	800d668 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138f8:	6a3b      	ldr	r3, [r7, #32]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	f7f7 ffcb 	bl	800b89a <lwip_htonl>
 8013904:	4603      	mov	r3, r0
 8013906:	3301      	adds	r3, #1
 8013908:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	2b00      	cmp	r3, #0
 8013914:	da02      	bge.n	801391c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801391c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013920:	2200      	movs	r2, #0
 8013922:	69b9      	ldr	r1, [r7, #24]
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7ff fddd 	bl	80134e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	3304      	adds	r3, #4
 8013930:	69b9      	ldr	r1, [r7, #24]
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f7ff fe16 	bl	8013564 <tcp_output_control_segment>
 8013938:	4603      	mov	r3, r0
 801393a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801393c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013940:	4618      	mov	r0, r3
 8013942:	372c      	adds	r7, #44	; 0x2c
 8013944:	46bd      	mov	sp, r7
 8013946:	bd90      	pop	{r4, r7, pc}
 8013948:	0801bba0 	.word	0x0801bba0
 801394c:	0801c398 	.word	0x0801c398
 8013950:	0801bbf4 	.word	0x0801bbf4

08013954 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801395c:	f7f9 ff72 	bl	800d844 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013960:	4b0a      	ldr	r3, [pc, #40]	; (801398c <tcpip_tcp_timer+0x38>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d103      	bne.n	8013970 <tcpip_tcp_timer+0x1c>
 8013968:	4b09      	ldr	r3, [pc, #36]	; (8013990 <tcpip_tcp_timer+0x3c>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d005      	beq.n	801397c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013970:	2200      	movs	r2, #0
 8013972:	4908      	ldr	r1, [pc, #32]	; (8013994 <tcpip_tcp_timer+0x40>)
 8013974:	20fa      	movs	r0, #250	; 0xfa
 8013976:	f000 f8f3 	bl	8013b60 <sys_timeout>
 801397a:	e003      	b.n	8013984 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801397c:	4b06      	ldr	r3, [pc, #24]	; (8013998 <tcpip_tcp_timer+0x44>)
 801397e:	2200      	movs	r2, #0
 8013980:	601a      	str	r2, [r3, #0]
  }
}
 8013982:	bf00      	nop
 8013984:	bf00      	nop
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	20011b54 	.word	0x20011b54
 8013990:	20011b58 	.word	0x20011b58
 8013994:	08013955 	.word	0x08013955
 8013998:	20011ba0 	.word	0x20011ba0

0801399c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80139a0:	4b0a      	ldr	r3, [pc, #40]	; (80139cc <tcp_timer_needed+0x30>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10f      	bne.n	80139c8 <tcp_timer_needed+0x2c>
 80139a8:	4b09      	ldr	r3, [pc, #36]	; (80139d0 <tcp_timer_needed+0x34>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d103      	bne.n	80139b8 <tcp_timer_needed+0x1c>
 80139b0:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <tcp_timer_needed+0x38>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d007      	beq.n	80139c8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80139b8:	4b04      	ldr	r3, [pc, #16]	; (80139cc <tcp_timer_needed+0x30>)
 80139ba:	2201      	movs	r2, #1
 80139bc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139be:	2200      	movs	r2, #0
 80139c0:	4905      	ldr	r1, [pc, #20]	; (80139d8 <tcp_timer_needed+0x3c>)
 80139c2:	20fa      	movs	r0, #250	; 0xfa
 80139c4:	f000 f8cc 	bl	8013b60 <sys_timeout>
  }
}
 80139c8:	bf00      	nop
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	20011ba0 	.word	0x20011ba0
 80139d0:	20011b54 	.word	0x20011b54
 80139d4:	20011b58 	.word	0x20011b58
 80139d8:	08013955 	.word	0x08013955

080139dc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80139e8:	2009      	movs	r0, #9
 80139ea:	f7f8 fd31 	bl	800c450 <memp_malloc>
 80139ee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d109      	bne.n	8013a0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d151      	bne.n	8013aa0 <sys_timeout_abs+0xc4>
 80139fc:	4b2a      	ldr	r3, [pc, #168]	; (8013aa8 <sys_timeout_abs+0xcc>)
 80139fe:	22be      	movs	r2, #190	; 0xbe
 8013a00:	492a      	ldr	r1, [pc, #168]	; (8013aac <sys_timeout_abs+0xd0>)
 8013a02:	482b      	ldr	r0, [pc, #172]	; (8013ab0 <sys_timeout_abs+0xd4>)
 8013a04:	f002 ffac 	bl	8016960 <iprintf>
    return;
 8013a08:	e04a      	b.n	8013aa0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	68ba      	ldr	r2, [r7, #8]
 8013a14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013a22:	4b24      	ldr	r3, [pc, #144]	; (8013ab4 <sys_timeout_abs+0xd8>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d103      	bne.n	8013a32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a2a:	4a22      	ldr	r2, [pc, #136]	; (8013ab4 <sys_timeout_abs+0xd8>)
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	6013      	str	r3, [r2, #0]
    return;
 8013a30:	e037      	b.n	8013aa2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	685a      	ldr	r2, [r3, #4]
 8013a36:	4b1f      	ldr	r3, [pc, #124]	; (8013ab4 <sys_timeout_abs+0xd8>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	1ad3      	subs	r3, r2, r3
 8013a3e:	0fdb      	lsrs	r3, r3, #31
 8013a40:	f003 0301 	and.w	r3, r3, #1
 8013a44:	b2db      	uxtb	r3, r3
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d007      	beq.n	8013a5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a4a:	4b1a      	ldr	r3, [pc, #104]	; (8013ab4 <sys_timeout_abs+0xd8>)
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a52:	4a18      	ldr	r2, [pc, #96]	; (8013ab4 <sys_timeout_abs+0xd8>)
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	6013      	str	r3, [r2, #0]
 8013a58:	e023      	b.n	8013aa2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a5a:	4b16      	ldr	r3, [pc, #88]	; (8013ab4 <sys_timeout_abs+0xd8>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	617b      	str	r3, [r7, #20]
 8013a60:	e01a      	b.n	8013a98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d00b      	beq.n	8013a82 <sys_timeout_abs+0xa6>
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	685a      	ldr	r2, [r3, #4]
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	1ad3      	subs	r3, r2, r3
 8013a76:	0fdb      	lsrs	r3, r3, #31
 8013a78:	f003 0301 	and.w	r3, r3, #1
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d007      	beq.n	8013a92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	693a      	ldr	r2, [r7, #16]
 8013a8e:	601a      	str	r2, [r3, #0]
        break;
 8013a90:	e007      	b.n	8013aa2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	617b      	str	r3, [r7, #20]
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d1e1      	bne.n	8013a62 <sys_timeout_abs+0x86>
 8013a9e:	e000      	b.n	8013aa2 <sys_timeout_abs+0xc6>
    return;
 8013aa0:	bf00      	nop
      }
    }
  }
}
 8013aa2:	3718      	adds	r7, #24
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	0801c3bc 	.word	0x0801c3bc
 8013aac:	0801c3f0 	.word	0x0801c3f0
 8013ab0:	0801c430 	.word	0x0801c430
 8013ab4:	20011b98 	.word	0x20011b98

08013ab8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b086      	sub	sp, #24
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	4798      	blx	r3

  now = sys_now();
 8013aca:	f7f1 fb33 	bl	8005134 <sys_now>
 8013ace:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	4b0f      	ldr	r3, [pc, #60]	; (8013b14 <lwip_cyclic_timer+0x5c>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	4413      	add	r3, r2
 8013ada:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	0fdb      	lsrs	r3, r3, #31
 8013ae4:	f003 0301 	and.w	r3, r3, #1
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d009      	beq.n	8013b02 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	681a      	ldr	r2, [r3, #0]
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	4413      	add	r3, r2
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	4907      	ldr	r1, [pc, #28]	; (8013b18 <lwip_cyclic_timer+0x60>)
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7ff ff6e 	bl	80139dc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b00:	e004      	b.n	8013b0c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	4904      	ldr	r1, [pc, #16]	; (8013b18 <lwip_cyclic_timer+0x60>)
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	f7ff ff68 	bl	80139dc <sys_timeout_abs>
}
 8013b0c:	bf00      	nop
 8013b0e:	3718      	adds	r7, #24
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	20011b9c 	.word	0x20011b9c
 8013b18:	08013ab9 	.word	0x08013ab9

08013b1c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b22:	2301      	movs	r3, #1
 8013b24:	607b      	str	r3, [r7, #4]
 8013b26:	e00e      	b.n	8013b46 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b28:	4a0b      	ldr	r2, [pc, #44]	; (8013b58 <sys_timeouts_init+0x3c>)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	00db      	lsls	r3, r3, #3
 8013b34:	4a08      	ldr	r2, [pc, #32]	; (8013b58 <sys_timeouts_init+0x3c>)
 8013b36:	4413      	add	r3, r2
 8013b38:	461a      	mov	r2, r3
 8013b3a:	4908      	ldr	r1, [pc, #32]	; (8013b5c <sys_timeouts_init+0x40>)
 8013b3c:	f000 f810 	bl	8013b60 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	3301      	adds	r3, #1
 8013b44:	607b      	str	r3, [r7, #4]
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b02      	cmp	r3, #2
 8013b4a:	d9ed      	bls.n	8013b28 <sys_timeouts_init+0xc>
  }
}
 8013b4c:	bf00      	nop
 8013b4e:	bf00      	nop
 8013b50:	3708      	adds	r7, #8
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	0801cce4 	.word	0x0801cce4
 8013b5c:	08013ab9 	.word	0x08013ab9

08013b60 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b72:	d306      	bcc.n	8013b82 <sys_timeout+0x22>
 8013b74:	4b0a      	ldr	r3, [pc, #40]	; (8013ba0 <sys_timeout+0x40>)
 8013b76:	f240 1229 	movw	r2, #297	; 0x129
 8013b7a:	490a      	ldr	r1, [pc, #40]	; (8013ba4 <sys_timeout+0x44>)
 8013b7c:	480a      	ldr	r0, [pc, #40]	; (8013ba8 <sys_timeout+0x48>)
 8013b7e:	f002 feef 	bl	8016960 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b82:	f7f1 fad7 	bl	8005134 <sys_now>
 8013b86:	4602      	mov	r2, r0
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	68b9      	ldr	r1, [r7, #8]
 8013b92:	6978      	ldr	r0, [r7, #20]
 8013b94:	f7ff ff22 	bl	80139dc <sys_timeout_abs>
#endif
}
 8013b98:	bf00      	nop
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	0801c3bc 	.word	0x0801c3bc
 8013ba4:	0801c458 	.word	0x0801c458
 8013ba8:	0801c430 	.word	0x0801c430

08013bac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013bb2:	f7f1 fabf 	bl	8005134 <sys_now>
 8013bb6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013bb8:	4b17      	ldr	r3, [pc, #92]	; (8013c18 <sys_check_timeouts+0x6c>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d022      	beq.n	8013c0a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	68fa      	ldr	r2, [r7, #12]
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	0fdb      	lsrs	r3, r3, #31
 8013bce:	f003 0301 	and.w	r3, r3, #1
 8013bd2:	b2db      	uxtb	r3, r3
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d11a      	bne.n	8013c0e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	4a0e      	ldr	r2, [pc, #56]	; (8013c18 <sys_check_timeouts+0x6c>)
 8013bde:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	689b      	ldr	r3, [r3, #8]
 8013be4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	4a0a      	ldr	r2, [pc, #40]	; (8013c1c <sys_check_timeouts+0x70>)
 8013bf2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013bf4:	68b9      	ldr	r1, [r7, #8]
 8013bf6:	2009      	movs	r0, #9
 8013bf8:	f7f8 fca0 	bl	800c53c <memp_free>
    if (handler != NULL) {
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d0da      	beq.n	8013bb8 <sys_check_timeouts+0xc>
      handler(arg);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6838      	ldr	r0, [r7, #0]
 8013c06:	4798      	blx	r3
  do {
 8013c08:	e7d6      	b.n	8013bb8 <sys_check_timeouts+0xc>
      return;
 8013c0a:	bf00      	nop
 8013c0c:	e000      	b.n	8013c10 <sys_check_timeouts+0x64>
      return;
 8013c0e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c10:	3710      	adds	r7, #16
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	20011b98 	.word	0x20011b98
 8013c1c:	20011b9c 	.word	0x20011b9c

08013c20 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013c26:	4b16      	ldr	r3, [pc, #88]	; (8013c80 <sys_timeouts_sleeptime+0x60>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d102      	bne.n	8013c34 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c32:	e020      	b.n	8013c76 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013c34:	f7f1 fa7e 	bl	8005134 <sys_now>
 8013c38:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013c3a:	4b11      	ldr	r3, [pc, #68]	; (8013c80 <sys_timeouts_sleeptime+0x60>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	685a      	ldr	r2, [r3, #4]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	1ad3      	subs	r3, r2, r3
 8013c44:	0fdb      	lsrs	r3, r3, #31
 8013c46:	f003 0301 	and.w	r3, r3, #1
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d001      	beq.n	8013c54 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013c50:	2300      	movs	r3, #0
 8013c52:	e010      	b.n	8013c76 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c54:	4b0a      	ldr	r3, [pc, #40]	; (8013c80 <sys_timeouts_sleeptime+0x60>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	685a      	ldr	r2, [r3, #4]
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	da06      	bge.n	8013c74 <sys_timeouts_sleeptime+0x54>
 8013c66:	4b07      	ldr	r3, [pc, #28]	; (8013c84 <sys_timeouts_sleeptime+0x64>)
 8013c68:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013c6c:	4906      	ldr	r1, [pc, #24]	; (8013c88 <sys_timeouts_sleeptime+0x68>)
 8013c6e:	4807      	ldr	r0, [pc, #28]	; (8013c8c <sys_timeouts_sleeptime+0x6c>)
 8013c70:	f002 fe76 	bl	8016960 <iprintf>
    return ret;
 8013c74:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3708      	adds	r7, #8
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	20011b98 	.word	0x20011b98
 8013c84:	0801c3bc 	.word	0x0801c3bc
 8013c88:	0801c490 	.word	0x0801c490
 8013c8c:	0801c430 	.word	0x0801c430

08013c90 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013c98:	4915      	ldr	r1, [pc, #84]	; (8013cf0 <etharp_free_entry+0x60>)
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	4613      	mov	r3, r2
 8013c9e:	005b      	lsls	r3, r3, #1
 8013ca0:	4413      	add	r3, r2
 8013ca2:	00db      	lsls	r3, r3, #3
 8013ca4:	440b      	add	r3, r1
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d013      	beq.n	8013cd4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013cac:	4910      	ldr	r1, [pc, #64]	; (8013cf0 <etharp_free_entry+0x60>)
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	4613      	mov	r3, r2
 8013cb2:	005b      	lsls	r3, r3, #1
 8013cb4:	4413      	add	r3, r2
 8013cb6:	00db      	lsls	r3, r3, #3
 8013cb8:	440b      	add	r3, r1
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7f9 fadd 	bl	800d27c <pbuf_free>
    arp_table[i].q = NULL;
 8013cc2:	490b      	ldr	r1, [pc, #44]	; (8013cf0 <etharp_free_entry+0x60>)
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	005b      	lsls	r3, r3, #1
 8013cca:	4413      	add	r3, r2
 8013ccc:	00db      	lsls	r3, r3, #3
 8013cce:	440b      	add	r3, r1
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013cd4:	4906      	ldr	r1, [pc, #24]	; (8013cf0 <etharp_free_entry+0x60>)
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	4613      	mov	r3, r2
 8013cda:	005b      	lsls	r3, r3, #1
 8013cdc:	4413      	add	r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	440b      	add	r3, r1
 8013ce2:	3314      	adds	r3, #20
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013ce8:	bf00      	nop
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	20011ba4 	.word	0x20011ba4

08013cf4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	607b      	str	r3, [r7, #4]
 8013cfe:	e096      	b.n	8013e2e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013d00:	494f      	ldr	r1, [pc, #316]	; (8013e40 <etharp_tmr+0x14c>)
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	4613      	mov	r3, r2
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	4413      	add	r3, r2
 8013d0a:	00db      	lsls	r3, r3, #3
 8013d0c:	440b      	add	r3, r1
 8013d0e:	3314      	adds	r3, #20
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013d14:	78fb      	ldrb	r3, [r7, #3]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f000 8086 	beq.w	8013e28 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013d1c:	4948      	ldr	r1, [pc, #288]	; (8013e40 <etharp_tmr+0x14c>)
 8013d1e:	687a      	ldr	r2, [r7, #4]
 8013d20:	4613      	mov	r3, r2
 8013d22:	005b      	lsls	r3, r3, #1
 8013d24:	4413      	add	r3, r2
 8013d26:	00db      	lsls	r3, r3, #3
 8013d28:	440b      	add	r3, r1
 8013d2a:	3312      	adds	r3, #18
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	3301      	adds	r3, #1
 8013d30:	b298      	uxth	r0, r3
 8013d32:	4943      	ldr	r1, [pc, #268]	; (8013e40 <etharp_tmr+0x14c>)
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	4613      	mov	r3, r2
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	4413      	add	r3, r2
 8013d3c:	00db      	lsls	r3, r3, #3
 8013d3e:	440b      	add	r3, r1
 8013d40:	3312      	adds	r3, #18
 8013d42:	4602      	mov	r2, r0
 8013d44:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d46:	493e      	ldr	r1, [pc, #248]	; (8013e40 <etharp_tmr+0x14c>)
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	005b      	lsls	r3, r3, #1
 8013d4e:	4413      	add	r3, r2
 8013d50:	00db      	lsls	r3, r3, #3
 8013d52:	440b      	add	r3, r1
 8013d54:	3312      	adds	r3, #18
 8013d56:	881b      	ldrh	r3, [r3, #0]
 8013d58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013d5c:	d215      	bcs.n	8013d8a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d5e:	4938      	ldr	r1, [pc, #224]	; (8013e40 <etharp_tmr+0x14c>)
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	4613      	mov	r3, r2
 8013d64:	005b      	lsls	r3, r3, #1
 8013d66:	4413      	add	r3, r2
 8013d68:	00db      	lsls	r3, r3, #3
 8013d6a:	440b      	add	r3, r1
 8013d6c:	3314      	adds	r3, #20
 8013d6e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d10e      	bne.n	8013d92 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013d74:	4932      	ldr	r1, [pc, #200]	; (8013e40 <etharp_tmr+0x14c>)
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	4613      	mov	r3, r2
 8013d7a:	005b      	lsls	r3, r3, #1
 8013d7c:	4413      	add	r3, r2
 8013d7e:	00db      	lsls	r3, r3, #3
 8013d80:	440b      	add	r3, r1
 8013d82:	3312      	adds	r3, #18
 8013d84:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d86:	2b04      	cmp	r3, #4
 8013d88:	d903      	bls.n	8013d92 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f7ff ff80 	bl	8013c90 <etharp_free_entry>
 8013d90:	e04a      	b.n	8013e28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013d92:	492b      	ldr	r1, [pc, #172]	; (8013e40 <etharp_tmr+0x14c>)
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	4613      	mov	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	440b      	add	r3, r1
 8013da0:	3314      	adds	r3, #20
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	2b03      	cmp	r3, #3
 8013da6:	d10a      	bne.n	8013dbe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013da8:	4925      	ldr	r1, [pc, #148]	; (8013e40 <etharp_tmr+0x14c>)
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	4613      	mov	r3, r2
 8013dae:	005b      	lsls	r3, r3, #1
 8013db0:	4413      	add	r3, r2
 8013db2:	00db      	lsls	r3, r3, #3
 8013db4:	440b      	add	r3, r1
 8013db6:	3314      	adds	r3, #20
 8013db8:	2204      	movs	r2, #4
 8013dba:	701a      	strb	r2, [r3, #0]
 8013dbc:	e034      	b.n	8013e28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013dbe:	4920      	ldr	r1, [pc, #128]	; (8013e40 <etharp_tmr+0x14c>)
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	4413      	add	r3, r2
 8013dc8:	00db      	lsls	r3, r3, #3
 8013dca:	440b      	add	r3, r1
 8013dcc:	3314      	adds	r3, #20
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	2b04      	cmp	r3, #4
 8013dd2:	d10a      	bne.n	8013dea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013dd4:	491a      	ldr	r1, [pc, #104]	; (8013e40 <etharp_tmr+0x14c>)
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	4613      	mov	r3, r2
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4413      	add	r3, r2
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	440b      	add	r3, r1
 8013de2:	3314      	adds	r3, #20
 8013de4:	2202      	movs	r2, #2
 8013de6:	701a      	strb	r2, [r3, #0]
 8013de8:	e01e      	b.n	8013e28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013dea:	4915      	ldr	r1, [pc, #84]	; (8013e40 <etharp_tmr+0x14c>)
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	4613      	mov	r3, r2
 8013df0:	005b      	lsls	r3, r3, #1
 8013df2:	4413      	add	r3, r2
 8013df4:	00db      	lsls	r3, r3, #3
 8013df6:	440b      	add	r3, r1
 8013df8:	3314      	adds	r3, #20
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d113      	bne.n	8013e28 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e00:	490f      	ldr	r1, [pc, #60]	; (8013e40 <etharp_tmr+0x14c>)
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	4613      	mov	r3, r2
 8013e06:	005b      	lsls	r3, r3, #1
 8013e08:	4413      	add	r3, r2
 8013e0a:	00db      	lsls	r3, r3, #3
 8013e0c:	440b      	add	r3, r1
 8013e0e:	3308      	adds	r3, #8
 8013e10:	6818      	ldr	r0, [r3, #0]
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	4613      	mov	r3, r2
 8013e16:	005b      	lsls	r3, r3, #1
 8013e18:	4413      	add	r3, r2
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	4a08      	ldr	r2, [pc, #32]	; (8013e40 <etharp_tmr+0x14c>)
 8013e1e:	4413      	add	r3, r2
 8013e20:	3304      	adds	r3, #4
 8013e22:	4619      	mov	r1, r3
 8013e24:	f000 fe6e 	bl	8014b04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	607b      	str	r3, [r7, #4]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2b09      	cmp	r3, #9
 8013e32:	f77f af65 	ble.w	8013d00 <etharp_tmr+0xc>
      }
    }
  }
}
 8013e36:	bf00      	nop
 8013e38:	bf00      	nop
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	20011ba4 	.word	0x20011ba4

08013e44 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b08a      	sub	sp, #40	; 0x28
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	607a      	str	r2, [r7, #4]
 8013e50:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013e52:	230a      	movs	r3, #10
 8013e54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013e56:	230a      	movs	r3, #10
 8013e58:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013e5a:	230a      	movs	r3, #10
 8013e5c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013e62:	230a      	movs	r3, #10
 8013e64:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013e66:	2300      	movs	r3, #0
 8013e68:	83bb      	strh	r3, [r7, #28]
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	837b      	strh	r3, [r7, #26]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e72:	2300      	movs	r3, #0
 8013e74:	843b      	strh	r3, [r7, #32]
 8013e76:	e0ae      	b.n	8013fd6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013e78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e7c:	49a6      	ldr	r1, [pc, #664]	; (8014118 <etharp_find_entry+0x2d4>)
 8013e7e:	4613      	mov	r3, r2
 8013e80:	005b      	lsls	r3, r3, #1
 8013e82:	4413      	add	r3, r2
 8013e84:	00db      	lsls	r3, r3, #3
 8013e86:	440b      	add	r3, r1
 8013e88:	3314      	adds	r3, #20
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e92:	2b0a      	cmp	r3, #10
 8013e94:	d105      	bne.n	8013ea2 <etharp_find_entry+0x5e>
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d102      	bne.n	8013ea2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013e9c:	8c3b      	ldrh	r3, [r7, #32]
 8013e9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013ea0:	e095      	b.n	8013fce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013ea2:	7dfb      	ldrb	r3, [r7, #23]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f000 8092 	beq.w	8013fce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013eaa:	7dfb      	ldrb	r3, [r7, #23]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d009      	beq.n	8013ec4 <etharp_find_entry+0x80>
 8013eb0:	7dfb      	ldrb	r3, [r7, #23]
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d806      	bhi.n	8013ec4 <etharp_find_entry+0x80>
 8013eb6:	4b99      	ldr	r3, [pc, #612]	; (801411c <etharp_find_entry+0x2d8>)
 8013eb8:	f240 1223 	movw	r2, #291	; 0x123
 8013ebc:	4998      	ldr	r1, [pc, #608]	; (8014120 <etharp_find_entry+0x2dc>)
 8013ebe:	4899      	ldr	r0, [pc, #612]	; (8014124 <etharp_find_entry+0x2e0>)
 8013ec0:	f002 fd4e 	bl	8016960 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d020      	beq.n	8013f0c <etharp_find_entry+0xc8>
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	6819      	ldr	r1, [r3, #0]
 8013ece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ed2:	4891      	ldr	r0, [pc, #580]	; (8014118 <etharp_find_entry+0x2d4>)
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	00db      	lsls	r3, r3, #3
 8013edc:	4403      	add	r3, r0
 8013ede:	3304      	adds	r3, #4
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4299      	cmp	r1, r3
 8013ee4:	d112      	bne.n	8013f0c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d00c      	beq.n	8013f06 <etharp_find_entry+0xc2>
 8013eec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ef0:	4989      	ldr	r1, [pc, #548]	; (8014118 <etharp_find_entry+0x2d4>)
 8013ef2:	4613      	mov	r3, r2
 8013ef4:	005b      	lsls	r3, r3, #1
 8013ef6:	4413      	add	r3, r2
 8013ef8:	00db      	lsls	r3, r3, #3
 8013efa:	440b      	add	r3, r1
 8013efc:	3308      	adds	r3, #8
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	687a      	ldr	r2, [r7, #4]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d102      	bne.n	8013f0c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013f06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f0a:	e100      	b.n	801410e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013f0c:	7dfb      	ldrb	r3, [r7, #23]
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d140      	bne.n	8013f94 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013f12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f16:	4980      	ldr	r1, [pc, #512]	; (8014118 <etharp_find_entry+0x2d4>)
 8013f18:	4613      	mov	r3, r2
 8013f1a:	005b      	lsls	r3, r3, #1
 8013f1c:	4413      	add	r3, r2
 8013f1e:	00db      	lsls	r3, r3, #3
 8013f20:	440b      	add	r3, r1
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d01a      	beq.n	8013f5e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013f28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f2c:	497a      	ldr	r1, [pc, #488]	; (8014118 <etharp_find_entry+0x2d4>)
 8013f2e:	4613      	mov	r3, r2
 8013f30:	005b      	lsls	r3, r3, #1
 8013f32:	4413      	add	r3, r2
 8013f34:	00db      	lsls	r3, r3, #3
 8013f36:	440b      	add	r3, r1
 8013f38:	3312      	adds	r3, #18
 8013f3a:	881b      	ldrh	r3, [r3, #0]
 8013f3c:	8bba      	ldrh	r2, [r7, #28]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d845      	bhi.n	8013fce <etharp_find_entry+0x18a>
            old_queue = i;
 8013f42:	8c3b      	ldrh	r3, [r7, #32]
 8013f44:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f4a:	4973      	ldr	r1, [pc, #460]	; (8014118 <etharp_find_entry+0x2d4>)
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	005b      	lsls	r3, r3, #1
 8013f50:	4413      	add	r3, r2
 8013f52:	00db      	lsls	r3, r3, #3
 8013f54:	440b      	add	r3, r1
 8013f56:	3312      	adds	r3, #18
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	83bb      	strh	r3, [r7, #28]
 8013f5c:	e037      	b.n	8013fce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013f5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f62:	496d      	ldr	r1, [pc, #436]	; (8014118 <etharp_find_entry+0x2d4>)
 8013f64:	4613      	mov	r3, r2
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	4413      	add	r3, r2
 8013f6a:	00db      	lsls	r3, r3, #3
 8013f6c:	440b      	add	r3, r1
 8013f6e:	3312      	adds	r3, #18
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	8b7a      	ldrh	r2, [r7, #26]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d82a      	bhi.n	8013fce <etharp_find_entry+0x18a>
            old_pending = i;
 8013f78:	8c3b      	ldrh	r3, [r7, #32]
 8013f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013f7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f80:	4965      	ldr	r1, [pc, #404]	; (8014118 <etharp_find_entry+0x2d4>)
 8013f82:	4613      	mov	r3, r2
 8013f84:	005b      	lsls	r3, r3, #1
 8013f86:	4413      	add	r3, r2
 8013f88:	00db      	lsls	r3, r3, #3
 8013f8a:	440b      	add	r3, r1
 8013f8c:	3312      	adds	r3, #18
 8013f8e:	881b      	ldrh	r3, [r3, #0]
 8013f90:	837b      	strh	r3, [r7, #26]
 8013f92:	e01c      	b.n	8013fce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013f94:	7dfb      	ldrb	r3, [r7, #23]
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d919      	bls.n	8013fce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013f9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f9e:	495e      	ldr	r1, [pc, #376]	; (8014118 <etharp_find_entry+0x2d4>)
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	005b      	lsls	r3, r3, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	00db      	lsls	r3, r3, #3
 8013fa8:	440b      	add	r3, r1
 8013faa:	3312      	adds	r3, #18
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	8b3a      	ldrh	r2, [r7, #24]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d80c      	bhi.n	8013fce <etharp_find_entry+0x18a>
            old_stable = i;
 8013fb4:	8c3b      	ldrh	r3, [r7, #32]
 8013fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013fb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fbc:	4956      	ldr	r1, [pc, #344]	; (8014118 <etharp_find_entry+0x2d4>)
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	005b      	lsls	r3, r3, #1
 8013fc2:	4413      	add	r3, r2
 8013fc4:	00db      	lsls	r3, r3, #3
 8013fc6:	440b      	add	r3, r1
 8013fc8:	3312      	adds	r3, #18
 8013fca:	881b      	ldrh	r3, [r3, #0]
 8013fcc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fce:	8c3b      	ldrh	r3, [r7, #32]
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	843b      	strh	r3, [r7, #32]
 8013fd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fda:	2b09      	cmp	r3, #9
 8013fdc:	f77f af4c 	ble.w	8013e78 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013fe0:	7afb      	ldrb	r3, [r7, #11]
 8013fe2:	f003 0302 	and.w	r3, r3, #2
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d108      	bne.n	8013ffc <etharp_find_entry+0x1b8>
 8013fea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013fee:	2b0a      	cmp	r3, #10
 8013ff0:	d107      	bne.n	8014002 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013ff2:	7afb      	ldrb	r3, [r7, #11]
 8013ff4:	f003 0301 	and.w	r3, r3, #1
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d102      	bne.n	8014002 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014000:	e085      	b.n	801410e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014002:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014006:	2b09      	cmp	r3, #9
 8014008:	dc02      	bgt.n	8014010 <etharp_find_entry+0x1cc>
    i = empty;
 801400a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801400c:	843b      	strh	r3, [r7, #32]
 801400e:	e039      	b.n	8014084 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014010:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014014:	2b09      	cmp	r3, #9
 8014016:	dc14      	bgt.n	8014042 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801401a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801401c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014020:	493d      	ldr	r1, [pc, #244]	; (8014118 <etharp_find_entry+0x2d4>)
 8014022:	4613      	mov	r3, r2
 8014024:	005b      	lsls	r3, r3, #1
 8014026:	4413      	add	r3, r2
 8014028:	00db      	lsls	r3, r3, #3
 801402a:	440b      	add	r3, r1
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d018      	beq.n	8014064 <etharp_find_entry+0x220>
 8014032:	4b3a      	ldr	r3, [pc, #232]	; (801411c <etharp_find_entry+0x2d8>)
 8014034:	f240 126d 	movw	r2, #365	; 0x16d
 8014038:	493b      	ldr	r1, [pc, #236]	; (8014128 <etharp_find_entry+0x2e4>)
 801403a:	483a      	ldr	r0, [pc, #232]	; (8014124 <etharp_find_entry+0x2e0>)
 801403c:	f002 fc90 	bl	8016960 <iprintf>
 8014040:	e010      	b.n	8014064 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014042:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014046:	2b09      	cmp	r3, #9
 8014048:	dc02      	bgt.n	8014050 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801404a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801404c:	843b      	strh	r3, [r7, #32]
 801404e:	e009      	b.n	8014064 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014050:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014054:	2b09      	cmp	r3, #9
 8014056:	dc02      	bgt.n	801405e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014058:	8bfb      	ldrh	r3, [r7, #30]
 801405a:	843b      	strh	r3, [r7, #32]
 801405c:	e002      	b.n	8014064 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801405e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014062:	e054      	b.n	801410e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014064:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014068:	2b09      	cmp	r3, #9
 801406a:	dd06      	ble.n	801407a <etharp_find_entry+0x236>
 801406c:	4b2b      	ldr	r3, [pc, #172]	; (801411c <etharp_find_entry+0x2d8>)
 801406e:	f240 127f 	movw	r2, #383	; 0x17f
 8014072:	492e      	ldr	r1, [pc, #184]	; (801412c <etharp_find_entry+0x2e8>)
 8014074:	482b      	ldr	r0, [pc, #172]	; (8014124 <etharp_find_entry+0x2e0>)
 8014076:	f002 fc73 	bl	8016960 <iprintf>
    etharp_free_entry(i);
 801407a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801407e:	4618      	mov	r0, r3
 8014080:	f7ff fe06 	bl	8013c90 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014084:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014088:	2b09      	cmp	r3, #9
 801408a:	dd06      	ble.n	801409a <etharp_find_entry+0x256>
 801408c:	4b23      	ldr	r3, [pc, #140]	; (801411c <etharp_find_entry+0x2d8>)
 801408e:	f240 1283 	movw	r2, #387	; 0x183
 8014092:	4926      	ldr	r1, [pc, #152]	; (801412c <etharp_find_entry+0x2e8>)
 8014094:	4823      	ldr	r0, [pc, #140]	; (8014124 <etharp_find_entry+0x2e0>)
 8014096:	f002 fc63 	bl	8016960 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801409a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801409e:	491e      	ldr	r1, [pc, #120]	; (8014118 <etharp_find_entry+0x2d4>)
 80140a0:	4613      	mov	r3, r2
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	4413      	add	r3, r2
 80140a6:	00db      	lsls	r3, r3, #3
 80140a8:	440b      	add	r3, r1
 80140aa:	3314      	adds	r3, #20
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d006      	beq.n	80140c0 <etharp_find_entry+0x27c>
 80140b2:	4b1a      	ldr	r3, [pc, #104]	; (801411c <etharp_find_entry+0x2d8>)
 80140b4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80140b8:	491d      	ldr	r1, [pc, #116]	; (8014130 <etharp_find_entry+0x2ec>)
 80140ba:	481a      	ldr	r0, [pc, #104]	; (8014124 <etharp_find_entry+0x2e0>)
 80140bc:	f002 fc50 	bl	8016960 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d00b      	beq.n	80140de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80140c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	6819      	ldr	r1, [r3, #0]
 80140ce:	4812      	ldr	r0, [pc, #72]	; (8014118 <etharp_find_entry+0x2d4>)
 80140d0:	4613      	mov	r3, r2
 80140d2:	005b      	lsls	r3, r3, #1
 80140d4:	4413      	add	r3, r2
 80140d6:	00db      	lsls	r3, r3, #3
 80140d8:	4403      	add	r3, r0
 80140da:	3304      	adds	r3, #4
 80140dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80140de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e2:	490d      	ldr	r1, [pc, #52]	; (8014118 <etharp_find_entry+0x2d4>)
 80140e4:	4613      	mov	r3, r2
 80140e6:	005b      	lsls	r3, r3, #1
 80140e8:	4413      	add	r3, r2
 80140ea:	00db      	lsls	r3, r3, #3
 80140ec:	440b      	add	r3, r1
 80140ee:	3312      	adds	r3, #18
 80140f0:	2200      	movs	r2, #0
 80140f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80140f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140f8:	4907      	ldr	r1, [pc, #28]	; (8014118 <etharp_find_entry+0x2d4>)
 80140fa:	4613      	mov	r3, r2
 80140fc:	005b      	lsls	r3, r3, #1
 80140fe:	4413      	add	r3, r2
 8014100:	00db      	lsls	r3, r3, #3
 8014102:	440b      	add	r3, r1
 8014104:	3308      	adds	r3, #8
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801410a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3728      	adds	r7, #40	; 0x28
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	20011ba4 	.word	0x20011ba4
 801411c:	0801c4a4 	.word	0x0801c4a4
 8014120:	0801c4dc 	.word	0x0801c4dc
 8014124:	0801c51c 	.word	0x0801c51c
 8014128:	0801c544 	.word	0x0801c544
 801412c:	0801c55c 	.word	0x0801c55c
 8014130:	0801c570 	.word	0x0801c570

08014134 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b088      	sub	sp, #32
 8014138:	af02      	add	r7, sp, #8
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	60b9      	str	r1, [r7, #8]
 801413e:	607a      	str	r2, [r7, #4]
 8014140:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014148:	2b06      	cmp	r3, #6
 801414a:	d006      	beq.n	801415a <etharp_update_arp_entry+0x26>
 801414c:	4b48      	ldr	r3, [pc, #288]	; (8014270 <etharp_update_arp_entry+0x13c>)
 801414e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014152:	4948      	ldr	r1, [pc, #288]	; (8014274 <etharp_update_arp_entry+0x140>)
 8014154:	4848      	ldr	r0, [pc, #288]	; (8014278 <etharp_update_arp_entry+0x144>)
 8014156:	f002 fc03 	bl	8016960 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d012      	beq.n	8014186 <etharp_update_arp_entry+0x52>
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d00e      	beq.n	8014186 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	68f9      	ldr	r1, [r7, #12]
 801416e:	4618      	mov	r0, r3
 8014170:	f001 f8f4 	bl	801535c <ip4_addr_isbroadcast_u32>
 8014174:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014176:	2b00      	cmp	r3, #0
 8014178:	d105      	bne.n	8014186 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014182:	2be0      	cmp	r3, #224	; 0xe0
 8014184:	d102      	bne.n	801418c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014186:	f06f 030f 	mvn.w	r3, #15
 801418a:	e06c      	b.n	8014266 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801418c:	78fb      	ldrb	r3, [r7, #3]
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	4619      	mov	r1, r3
 8014192:	68b8      	ldr	r0, [r7, #8]
 8014194:	f7ff fe56 	bl	8013e44 <etharp_find_entry>
 8014198:	4603      	mov	r3, r0
 801419a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801419c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	da02      	bge.n	80141aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80141a4:	8afb      	ldrh	r3, [r7, #22]
 80141a6:	b25b      	sxtb	r3, r3
 80141a8:	e05d      	b.n	8014266 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80141aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141ae:	4933      	ldr	r1, [pc, #204]	; (801427c <etharp_update_arp_entry+0x148>)
 80141b0:	4613      	mov	r3, r2
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4413      	add	r3, r2
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	440b      	add	r3, r1
 80141ba:	3314      	adds	r3, #20
 80141bc:	2202      	movs	r2, #2
 80141be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80141c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141c4:	492d      	ldr	r1, [pc, #180]	; (801427c <etharp_update_arp_entry+0x148>)
 80141c6:	4613      	mov	r3, r2
 80141c8:	005b      	lsls	r3, r3, #1
 80141ca:	4413      	add	r3, r2
 80141cc:	00db      	lsls	r3, r3, #3
 80141ce:	440b      	add	r3, r1
 80141d0:	3308      	adds	r3, #8
 80141d2:	68fa      	ldr	r2, [r7, #12]
 80141d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80141d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141da:	4613      	mov	r3, r2
 80141dc:	005b      	lsls	r3, r3, #1
 80141de:	4413      	add	r3, r2
 80141e0:	00db      	lsls	r3, r3, #3
 80141e2:	3308      	adds	r3, #8
 80141e4:	4a25      	ldr	r2, [pc, #148]	; (801427c <etharp_update_arp_entry+0x148>)
 80141e6:	4413      	add	r3, r2
 80141e8:	3304      	adds	r3, #4
 80141ea:	2206      	movs	r2, #6
 80141ec:	6879      	ldr	r1, [r7, #4]
 80141ee:	4618      	mov	r0, r3
 80141f0:	f002 faf1 	bl	80167d6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80141f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141f8:	4920      	ldr	r1, [pc, #128]	; (801427c <etharp_update_arp_entry+0x148>)
 80141fa:	4613      	mov	r3, r2
 80141fc:	005b      	lsls	r3, r3, #1
 80141fe:	4413      	add	r3, r2
 8014200:	00db      	lsls	r3, r3, #3
 8014202:	440b      	add	r3, r1
 8014204:	3312      	adds	r3, #18
 8014206:	2200      	movs	r2, #0
 8014208:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801420a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801420e:	491b      	ldr	r1, [pc, #108]	; (801427c <etharp_update_arp_entry+0x148>)
 8014210:	4613      	mov	r3, r2
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	4413      	add	r3, r2
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	440b      	add	r3, r1
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d021      	beq.n	8014264 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014224:	4915      	ldr	r1, [pc, #84]	; (801427c <etharp_update_arp_entry+0x148>)
 8014226:	4613      	mov	r3, r2
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	440b      	add	r3, r1
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014238:	4910      	ldr	r1, [pc, #64]	; (801427c <etharp_update_arp_entry+0x148>)
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	440b      	add	r3, r1
 8014244:	2200      	movs	r2, #0
 8014246:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801424e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014252:	9300      	str	r3, [sp, #0]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6939      	ldr	r1, [r7, #16]
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	f001 ff8d 	bl	8016178 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801425e:	6938      	ldr	r0, [r7, #16]
 8014260:	f7f9 f80c 	bl	800d27c <pbuf_free>
  }
  return ERR_OK;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	3718      	adds	r7, #24
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	0801c4a4 	.word	0x0801c4a4
 8014274:	0801c59c 	.word	0x0801c59c
 8014278:	0801c51c 	.word	0x0801c51c
 801427c:	20011ba4 	.word	0x20011ba4

08014280 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014288:	2300      	movs	r3, #0
 801428a:	60fb      	str	r3, [r7, #12]
 801428c:	e01e      	b.n	80142cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801428e:	4913      	ldr	r1, [pc, #76]	; (80142dc <etharp_cleanup_netif+0x5c>)
 8014290:	68fa      	ldr	r2, [r7, #12]
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3314      	adds	r3, #20
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80142a2:	7afb      	ldrb	r3, [r7, #11]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00e      	beq.n	80142c6 <etharp_cleanup_netif+0x46>
 80142a8:	490c      	ldr	r1, [pc, #48]	; (80142dc <etharp_cleanup_netif+0x5c>)
 80142aa:	68fa      	ldr	r2, [r7, #12]
 80142ac:	4613      	mov	r3, r2
 80142ae:	005b      	lsls	r3, r3, #1
 80142b0:	4413      	add	r3, r2
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	440b      	add	r3, r1
 80142b6:	3308      	adds	r3, #8
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d102      	bne.n	80142c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80142c0:	68f8      	ldr	r0, [r7, #12]
 80142c2:	f7ff fce5 	bl	8013c90 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	3301      	adds	r3, #1
 80142ca:	60fb      	str	r3, [r7, #12]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b09      	cmp	r3, #9
 80142d0:	dddd      	ble.n	801428e <etharp_cleanup_netif+0xe>
    }
  }
}
 80142d2:	bf00      	nop
 80142d4:	bf00      	nop
 80142d6:	3710      	adds	r7, #16
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	20011ba4 	.word	0x20011ba4

080142e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80142e0:	b5b0      	push	{r4, r5, r7, lr}
 80142e2:	b08a      	sub	sp, #40	; 0x28
 80142e4:	af04      	add	r7, sp, #16
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d107      	bne.n	8014300 <etharp_input+0x20>
 80142f0:	4b3d      	ldr	r3, [pc, #244]	; (80143e8 <etharp_input+0x108>)
 80142f2:	f240 228a 	movw	r2, #650	; 0x28a
 80142f6:	493d      	ldr	r1, [pc, #244]	; (80143ec <etharp_input+0x10c>)
 80142f8:	483d      	ldr	r0, [pc, #244]	; (80143f0 <etharp_input+0x110>)
 80142fa:	f002 fb31 	bl	8016960 <iprintf>
 80142fe:	e06f      	b.n	80143e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	b29b      	uxth	r3, r3
 801430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014310:	d10c      	bne.n	801432c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014316:	2b06      	cmp	r3, #6
 8014318:	d108      	bne.n	801432c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801431e:	2b04      	cmp	r3, #4
 8014320:	d104      	bne.n	801432c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	885b      	ldrh	r3, [r3, #2]
 8014326:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014328:	2b08      	cmp	r3, #8
 801432a:	d003      	beq.n	8014334 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f7f8 ffa5 	bl	800d27c <pbuf_free>
    return;
 8014332:	e055      	b.n	80143e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	330e      	adds	r3, #14
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	3318      	adds	r3, #24
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	3304      	adds	r3, #4
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d102      	bne.n	8014354 <etharp_input+0x74>
    for_us = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	75fb      	strb	r3, [r7, #23]
 8014352:	e009      	b.n	8014368 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014354:	68ba      	ldr	r2, [r7, #8]
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	3304      	adds	r3, #4
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	429a      	cmp	r2, r3
 801435e:	bf0c      	ite	eq
 8014360:	2301      	moveq	r3, #1
 8014362:	2300      	movne	r3, #0
 8014364:	b2db      	uxtb	r3, r3
 8014366:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	f103 0208 	add.w	r2, r3, #8
 801436e:	7dfb      	ldrb	r3, [r7, #23]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d001      	beq.n	8014378 <etharp_input+0x98>
 8014374:	2301      	movs	r3, #1
 8014376:	e000      	b.n	801437a <etharp_input+0x9a>
 8014378:	2302      	movs	r3, #2
 801437a:	f107 010c 	add.w	r1, r7, #12
 801437e:	6838      	ldr	r0, [r7, #0]
 8014380:	f7ff fed8 	bl	8014134 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	88db      	ldrh	r3, [r3, #6]
 8014388:	b29b      	uxth	r3, r3
 801438a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801438e:	d003      	beq.n	8014398 <etharp_input+0xb8>
 8014390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014394:	d01e      	beq.n	80143d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014396:	e020      	b.n	80143da <etharp_input+0xfa>
      if (for_us) {
 8014398:	7dfb      	ldrb	r3, [r7, #23]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d01c      	beq.n	80143d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80143b4:	693a      	ldr	r2, [r7, #16]
 80143b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80143b8:	2102      	movs	r1, #2
 80143ba:	9103      	str	r1, [sp, #12]
 80143bc:	f107 010c 	add.w	r1, r7, #12
 80143c0:	9102      	str	r1, [sp, #8]
 80143c2:	9201      	str	r2, [sp, #4]
 80143c4:	9300      	str	r3, [sp, #0]
 80143c6:	462b      	mov	r3, r5
 80143c8:	4622      	mov	r2, r4
 80143ca:	4601      	mov	r1, r0
 80143cc:	6838      	ldr	r0, [r7, #0]
 80143ce:	f000 faeb 	bl	80149a8 <etharp_raw>
      break;
 80143d2:	e001      	b.n	80143d8 <etharp_input+0xf8>
      break;
 80143d4:	bf00      	nop
 80143d6:	e000      	b.n	80143da <etharp_input+0xfa>
      break;
 80143d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7f8 ff4e 	bl	800d27c <pbuf_free>
}
 80143e0:	3718      	adds	r7, #24
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bdb0      	pop	{r4, r5, r7, pc}
 80143e6:	bf00      	nop
 80143e8:	0801c4a4 	.word	0x0801c4a4
 80143ec:	0801c5f4 	.word	0x0801c5f4
 80143f0:	0801c51c 	.word	0x0801c51c

080143f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b086      	sub	sp, #24
 80143f8:	af02      	add	r7, sp, #8
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	4613      	mov	r3, r2
 8014400:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014402:	79fa      	ldrb	r2, [r7, #7]
 8014404:	4944      	ldr	r1, [pc, #272]	; (8014518 <etharp_output_to_arp_index+0x124>)
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	440b      	add	r3, r1
 8014410:	3314      	adds	r3, #20
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	2b01      	cmp	r3, #1
 8014416:	d806      	bhi.n	8014426 <etharp_output_to_arp_index+0x32>
 8014418:	4b40      	ldr	r3, [pc, #256]	; (801451c <etharp_output_to_arp_index+0x128>)
 801441a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801441e:	4940      	ldr	r1, [pc, #256]	; (8014520 <etharp_output_to_arp_index+0x12c>)
 8014420:	4840      	ldr	r0, [pc, #256]	; (8014524 <etharp_output_to_arp_index+0x130>)
 8014422:	f002 fa9d 	bl	8016960 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014426:	79fa      	ldrb	r2, [r7, #7]
 8014428:	493b      	ldr	r1, [pc, #236]	; (8014518 <etharp_output_to_arp_index+0x124>)
 801442a:	4613      	mov	r3, r2
 801442c:	005b      	lsls	r3, r3, #1
 801442e:	4413      	add	r3, r2
 8014430:	00db      	lsls	r3, r3, #3
 8014432:	440b      	add	r3, r1
 8014434:	3314      	adds	r3, #20
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	2b02      	cmp	r3, #2
 801443a:	d153      	bne.n	80144e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801443c:	79fa      	ldrb	r2, [r7, #7]
 801443e:	4936      	ldr	r1, [pc, #216]	; (8014518 <etharp_output_to_arp_index+0x124>)
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3312      	adds	r3, #18
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014452:	d919      	bls.n	8014488 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014454:	79fa      	ldrb	r2, [r7, #7]
 8014456:	4613      	mov	r3, r2
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	4413      	add	r3, r2
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	4a2e      	ldr	r2, [pc, #184]	; (8014518 <etharp_output_to_arp_index+0x124>)
 8014460:	4413      	add	r3, r2
 8014462:	3304      	adds	r3, #4
 8014464:	4619      	mov	r1, r3
 8014466:	68f8      	ldr	r0, [r7, #12]
 8014468:	f000 fb4c 	bl	8014b04 <etharp_request>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d138      	bne.n	80144e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014472:	79fa      	ldrb	r2, [r7, #7]
 8014474:	4928      	ldr	r1, [pc, #160]	; (8014518 <etharp_output_to_arp_index+0x124>)
 8014476:	4613      	mov	r3, r2
 8014478:	005b      	lsls	r3, r3, #1
 801447a:	4413      	add	r3, r2
 801447c:	00db      	lsls	r3, r3, #3
 801447e:	440b      	add	r3, r1
 8014480:	3314      	adds	r3, #20
 8014482:	2203      	movs	r2, #3
 8014484:	701a      	strb	r2, [r3, #0]
 8014486:	e02d      	b.n	80144e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014488:	79fa      	ldrb	r2, [r7, #7]
 801448a:	4923      	ldr	r1, [pc, #140]	; (8014518 <etharp_output_to_arp_index+0x124>)
 801448c:	4613      	mov	r3, r2
 801448e:	005b      	lsls	r3, r3, #1
 8014490:	4413      	add	r3, r2
 8014492:	00db      	lsls	r3, r3, #3
 8014494:	440b      	add	r3, r1
 8014496:	3312      	adds	r3, #18
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801449e:	d321      	bcc.n	80144e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80144a0:	79fa      	ldrb	r2, [r7, #7]
 80144a2:	4613      	mov	r3, r2
 80144a4:	005b      	lsls	r3, r3, #1
 80144a6:	4413      	add	r3, r2
 80144a8:	00db      	lsls	r3, r3, #3
 80144aa:	4a1b      	ldr	r2, [pc, #108]	; (8014518 <etharp_output_to_arp_index+0x124>)
 80144ac:	4413      	add	r3, r2
 80144ae:	1d19      	adds	r1, r3, #4
 80144b0:	79fa      	ldrb	r2, [r7, #7]
 80144b2:	4613      	mov	r3, r2
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	4413      	add	r3, r2
 80144b8:	00db      	lsls	r3, r3, #3
 80144ba:	3308      	adds	r3, #8
 80144bc:	4a16      	ldr	r2, [pc, #88]	; (8014518 <etharp_output_to_arp_index+0x124>)
 80144be:	4413      	add	r3, r2
 80144c0:	3304      	adds	r3, #4
 80144c2:	461a      	mov	r2, r3
 80144c4:	68f8      	ldr	r0, [r7, #12]
 80144c6:	f000 fafb 	bl	8014ac0 <etharp_request_dst>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d109      	bne.n	80144e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80144d0:	79fa      	ldrb	r2, [r7, #7]
 80144d2:	4911      	ldr	r1, [pc, #68]	; (8014518 <etharp_output_to_arp_index+0x124>)
 80144d4:	4613      	mov	r3, r2
 80144d6:	005b      	lsls	r3, r3, #1
 80144d8:	4413      	add	r3, r2
 80144da:	00db      	lsls	r3, r3, #3
 80144dc:	440b      	add	r3, r1
 80144de:	3314      	adds	r3, #20
 80144e0:	2203      	movs	r2, #3
 80144e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80144ea:	79fa      	ldrb	r2, [r7, #7]
 80144ec:	4613      	mov	r3, r2
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	4413      	add	r3, r2
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	3308      	adds	r3, #8
 80144f6:	4a08      	ldr	r2, [pc, #32]	; (8014518 <etharp_output_to_arp_index+0x124>)
 80144f8:	4413      	add	r3, r2
 80144fa:	3304      	adds	r3, #4
 80144fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014500:	9200      	str	r2, [sp, #0]
 8014502:	460a      	mov	r2, r1
 8014504:	68b9      	ldr	r1, [r7, #8]
 8014506:	68f8      	ldr	r0, [r7, #12]
 8014508:	f001 fe36 	bl	8016178 <ethernet_output>
 801450c:	4603      	mov	r3, r0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3710      	adds	r7, #16
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	20011ba4 	.word	0x20011ba4
 801451c:	0801c4a4 	.word	0x0801c4a4
 8014520:	0801c614 	.word	0x0801c614
 8014524:	0801c51c 	.word	0x0801c51c

08014528 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b08a      	sub	sp, #40	; 0x28
 801452c:	af02      	add	r7, sp, #8
 801452e:	60f8      	str	r0, [r7, #12]
 8014530:	60b9      	str	r1, [r7, #8]
 8014532:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d106      	bne.n	801454c <etharp_output+0x24>
 801453e:	4b73      	ldr	r3, [pc, #460]	; (801470c <etharp_output+0x1e4>)
 8014540:	f240 321e 	movw	r2, #798	; 0x31e
 8014544:	4972      	ldr	r1, [pc, #456]	; (8014710 <etharp_output+0x1e8>)
 8014546:	4873      	ldr	r0, [pc, #460]	; (8014714 <etharp_output+0x1ec>)
 8014548:	f002 fa0a 	bl	8016960 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <etharp_output+0x38>
 8014552:	4b6e      	ldr	r3, [pc, #440]	; (801470c <etharp_output+0x1e4>)
 8014554:	f240 321f 	movw	r2, #799	; 0x31f
 8014558:	496f      	ldr	r1, [pc, #444]	; (8014718 <etharp_output+0x1f0>)
 801455a:	486e      	ldr	r0, [pc, #440]	; (8014714 <etharp_output+0x1ec>)
 801455c:	f002 fa00 	bl	8016960 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <etharp_output+0x4c>
 8014566:	4b69      	ldr	r3, [pc, #420]	; (801470c <etharp_output+0x1e4>)
 8014568:	f44f 7248 	mov.w	r2, #800	; 0x320
 801456c:	496b      	ldr	r1, [pc, #428]	; (801471c <etharp_output+0x1f4>)
 801456e:	4869      	ldr	r0, [pc, #420]	; (8014714 <etharp_output+0x1ec>)
 8014570:	f002 f9f6 	bl	8016960 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	68f9      	ldr	r1, [r7, #12]
 801457a:	4618      	mov	r0, r3
 801457c:	f000 feee 	bl	801535c <ip4_addr_isbroadcast_u32>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d002      	beq.n	801458c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014586:	4b66      	ldr	r3, [pc, #408]	; (8014720 <etharp_output+0x1f8>)
 8014588:	61fb      	str	r3, [r7, #28]
 801458a:	e0af      	b.n	80146ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014594:	2be0      	cmp	r3, #224	; 0xe0
 8014596:	d118      	bne.n	80145ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014598:	2301      	movs	r3, #1
 801459a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801459c:	2300      	movs	r3, #0
 801459e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80145a0:	235e      	movs	r3, #94	; 0x5e
 80145a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	3301      	adds	r3, #1
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	3302      	adds	r3, #2
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	3303      	adds	r3, #3
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80145c2:	f107 0310 	add.w	r3, r7, #16
 80145c6:	61fb      	str	r3, [r7, #28]
 80145c8:	e090      	b.n	80146ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681a      	ldr	r2, [r3, #0]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	3304      	adds	r3, #4
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	405a      	eors	r2, r3
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	3308      	adds	r3, #8
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4013      	ands	r3, r2
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d012      	beq.n	8014608 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80145e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d00b      	beq.n	8014608 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	330c      	adds	r3, #12
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d003      	beq.n	8014602 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	330c      	adds	r3, #12
 80145fe:	61bb      	str	r3, [r7, #24]
 8014600:	e002      	b.n	8014608 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014602:	f06f 0303 	mvn.w	r3, #3
 8014606:	e07d      	b.n	8014704 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014608:	4b46      	ldr	r3, [pc, #280]	; (8014724 <etharp_output+0x1fc>)
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	4619      	mov	r1, r3
 801460e:	4a46      	ldr	r2, [pc, #280]	; (8014728 <etharp_output+0x200>)
 8014610:	460b      	mov	r3, r1
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	440b      	add	r3, r1
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	4413      	add	r3, r2
 801461a:	3314      	adds	r3, #20
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	2b01      	cmp	r3, #1
 8014620:	d925      	bls.n	801466e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014622:	4b40      	ldr	r3, [pc, #256]	; (8014724 <etharp_output+0x1fc>)
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	4619      	mov	r1, r3
 8014628:	4a3f      	ldr	r2, [pc, #252]	; (8014728 <etharp_output+0x200>)
 801462a:	460b      	mov	r3, r1
 801462c:	005b      	lsls	r3, r3, #1
 801462e:	440b      	add	r3, r1
 8014630:	00db      	lsls	r3, r3, #3
 8014632:	4413      	add	r3, r2
 8014634:	3308      	adds	r3, #8
 8014636:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014638:	68fa      	ldr	r2, [r7, #12]
 801463a:	429a      	cmp	r2, r3
 801463c:	d117      	bne.n	801466e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	4b38      	ldr	r3, [pc, #224]	; (8014724 <etharp_output+0x1fc>)
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	4618      	mov	r0, r3
 8014648:	4937      	ldr	r1, [pc, #220]	; (8014728 <etharp_output+0x200>)
 801464a:	4603      	mov	r3, r0
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4403      	add	r3, r0
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	440b      	add	r3, r1
 8014654:	3304      	adds	r3, #4
 8014656:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014658:	429a      	cmp	r2, r3
 801465a:	d108      	bne.n	801466e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801465c:	4b31      	ldr	r3, [pc, #196]	; (8014724 <etharp_output+0x1fc>)
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	461a      	mov	r2, r3
 8014662:	68b9      	ldr	r1, [r7, #8]
 8014664:	68f8      	ldr	r0, [r7, #12]
 8014666:	f7ff fec5 	bl	80143f4 <etharp_output_to_arp_index>
 801466a:	4603      	mov	r3, r0
 801466c:	e04a      	b.n	8014704 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801466e:	2300      	movs	r3, #0
 8014670:	75fb      	strb	r3, [r7, #23]
 8014672:	e031      	b.n	80146d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014674:	7dfa      	ldrb	r2, [r7, #23]
 8014676:	492c      	ldr	r1, [pc, #176]	; (8014728 <etharp_output+0x200>)
 8014678:	4613      	mov	r3, r2
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	4413      	add	r3, r2
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	440b      	add	r3, r1
 8014682:	3314      	adds	r3, #20
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	2b01      	cmp	r3, #1
 8014688:	d923      	bls.n	80146d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801468a:	7dfa      	ldrb	r2, [r7, #23]
 801468c:	4926      	ldr	r1, [pc, #152]	; (8014728 <etharp_output+0x200>)
 801468e:	4613      	mov	r3, r2
 8014690:	005b      	lsls	r3, r3, #1
 8014692:	4413      	add	r3, r2
 8014694:	00db      	lsls	r3, r3, #3
 8014696:	440b      	add	r3, r1
 8014698:	3308      	adds	r3, #8
 801469a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d117      	bne.n	80146d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	6819      	ldr	r1, [r3, #0]
 80146a6:	7dfa      	ldrb	r2, [r7, #23]
 80146a8:	481f      	ldr	r0, [pc, #124]	; (8014728 <etharp_output+0x200>)
 80146aa:	4613      	mov	r3, r2
 80146ac:	005b      	lsls	r3, r3, #1
 80146ae:	4413      	add	r3, r2
 80146b0:	00db      	lsls	r3, r3, #3
 80146b2:	4403      	add	r3, r0
 80146b4:	3304      	adds	r3, #4
 80146b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80146b8:	4299      	cmp	r1, r3
 80146ba:	d10a      	bne.n	80146d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80146bc:	4a19      	ldr	r2, [pc, #100]	; (8014724 <etharp_output+0x1fc>)
 80146be:	7dfb      	ldrb	r3, [r7, #23]
 80146c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80146c2:	7dfb      	ldrb	r3, [r7, #23]
 80146c4:	461a      	mov	r2, r3
 80146c6:	68b9      	ldr	r1, [r7, #8]
 80146c8:	68f8      	ldr	r0, [r7, #12]
 80146ca:	f7ff fe93 	bl	80143f4 <etharp_output_to_arp_index>
 80146ce:	4603      	mov	r3, r0
 80146d0:	e018      	b.n	8014704 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80146d2:	7dfb      	ldrb	r3, [r7, #23]
 80146d4:	3301      	adds	r3, #1
 80146d6:	75fb      	strb	r3, [r7, #23]
 80146d8:	7dfb      	ldrb	r3, [r7, #23]
 80146da:	2b09      	cmp	r3, #9
 80146dc:	d9ca      	bls.n	8014674 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80146de:	68ba      	ldr	r2, [r7, #8]
 80146e0:	69b9      	ldr	r1, [r7, #24]
 80146e2:	68f8      	ldr	r0, [r7, #12]
 80146e4:	f000 f822 	bl	801472c <etharp_query>
 80146e8:	4603      	mov	r3, r0
 80146ea:	e00b      	b.n	8014704 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80146f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	68b9      	ldr	r1, [r7, #8]
 80146fc:	68f8      	ldr	r0, [r7, #12]
 80146fe:	f001 fd3b 	bl	8016178 <ethernet_output>
 8014702:	4603      	mov	r3, r0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3720      	adds	r7, #32
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	0801c4a4 	.word	0x0801c4a4
 8014710:	0801c5f4 	.word	0x0801c5f4
 8014714:	0801c51c 	.word	0x0801c51c
 8014718:	0801c644 	.word	0x0801c644
 801471c:	0801c5e4 	.word	0x0801c5e4
 8014720:	0801cd00 	.word	0x0801cd00
 8014724:	20011c94 	.word	0x20011c94
 8014728:	20011ba4 	.word	0x20011ba4

0801472c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b08c      	sub	sp, #48	; 0x30
 8014730:	af02      	add	r7, sp, #8
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	3326      	adds	r3, #38	; 0x26
 801473c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801473e:	23ff      	movs	r3, #255	; 0xff
 8014740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014744:	2300      	movs	r3, #0
 8014746:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68f9      	ldr	r1, [r7, #12]
 801474e:	4618      	mov	r0, r3
 8014750:	f000 fe04 	bl	801535c <ip4_addr_isbroadcast_u32>
 8014754:	4603      	mov	r3, r0
 8014756:	2b00      	cmp	r3, #0
 8014758:	d10c      	bne.n	8014774 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014762:	2be0      	cmp	r3, #224	; 0xe0
 8014764:	d006      	beq.n	8014774 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d003      	beq.n	8014774 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d102      	bne.n	801477a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014774:	f06f 030f 	mvn.w	r3, #15
 8014778:	e101      	b.n	801497e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	2101      	movs	r1, #1
 801477e:	68b8      	ldr	r0, [r7, #8]
 8014780:	f7ff fb60 	bl	8013e44 <etharp_find_entry>
 8014784:	4603      	mov	r3, r0
 8014786:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801478c:	2b00      	cmp	r3, #0
 801478e:	da02      	bge.n	8014796 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014790:	8a7b      	ldrh	r3, [r7, #18]
 8014792:	b25b      	sxtb	r3, r3
 8014794:	e0f3      	b.n	801497e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014796:	8a7b      	ldrh	r3, [r7, #18]
 8014798:	2b7e      	cmp	r3, #126	; 0x7e
 801479a:	d906      	bls.n	80147aa <etharp_query+0x7e>
 801479c:	4b7a      	ldr	r3, [pc, #488]	; (8014988 <etharp_query+0x25c>)
 801479e:	f240 32c1 	movw	r2, #961	; 0x3c1
 80147a2:	497a      	ldr	r1, [pc, #488]	; (801498c <etharp_query+0x260>)
 80147a4:	487a      	ldr	r0, [pc, #488]	; (8014990 <etharp_query+0x264>)
 80147a6:	f002 f8db 	bl	8016960 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80147aa:	8a7b      	ldrh	r3, [r7, #18]
 80147ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80147ae:	7c7a      	ldrb	r2, [r7, #17]
 80147b0:	4978      	ldr	r1, [pc, #480]	; (8014994 <etharp_query+0x268>)
 80147b2:	4613      	mov	r3, r2
 80147b4:	005b      	lsls	r3, r3, #1
 80147b6:	4413      	add	r3, r2
 80147b8:	00db      	lsls	r3, r3, #3
 80147ba:	440b      	add	r3, r1
 80147bc:	3314      	adds	r3, #20
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d115      	bne.n	80147f0 <etharp_query+0xc4>
    is_new_entry = 1;
 80147c4:	2301      	movs	r3, #1
 80147c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80147c8:	7c7a      	ldrb	r2, [r7, #17]
 80147ca:	4972      	ldr	r1, [pc, #456]	; (8014994 <etharp_query+0x268>)
 80147cc:	4613      	mov	r3, r2
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	4413      	add	r3, r2
 80147d2:	00db      	lsls	r3, r3, #3
 80147d4:	440b      	add	r3, r1
 80147d6:	3314      	adds	r3, #20
 80147d8:	2201      	movs	r2, #1
 80147da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80147dc:	7c7a      	ldrb	r2, [r7, #17]
 80147de:	496d      	ldr	r1, [pc, #436]	; (8014994 <etharp_query+0x268>)
 80147e0:	4613      	mov	r3, r2
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	4413      	add	r3, r2
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	440b      	add	r3, r1
 80147ea:	3308      	adds	r3, #8
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80147f0:	7c7a      	ldrb	r2, [r7, #17]
 80147f2:	4968      	ldr	r1, [pc, #416]	; (8014994 <etharp_query+0x268>)
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	3314      	adds	r3, #20
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d011      	beq.n	801482a <etharp_query+0xfe>
 8014806:	7c7a      	ldrb	r2, [r7, #17]
 8014808:	4962      	ldr	r1, [pc, #392]	; (8014994 <etharp_query+0x268>)
 801480a:	4613      	mov	r3, r2
 801480c:	005b      	lsls	r3, r3, #1
 801480e:	4413      	add	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	440b      	add	r3, r1
 8014814:	3314      	adds	r3, #20
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d806      	bhi.n	801482a <etharp_query+0xfe>
 801481c:	4b5a      	ldr	r3, [pc, #360]	; (8014988 <etharp_query+0x25c>)
 801481e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014822:	495d      	ldr	r1, [pc, #372]	; (8014998 <etharp_query+0x26c>)
 8014824:	485a      	ldr	r0, [pc, #360]	; (8014990 <etharp_query+0x264>)
 8014826:	f002 f89b 	bl	8016960 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801482a:	6a3b      	ldr	r3, [r7, #32]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d102      	bne.n	8014836 <etharp_query+0x10a>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d10c      	bne.n	8014850 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014836:	68b9      	ldr	r1, [r7, #8]
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	f000 f963 	bl	8014b04 <etharp_request>
 801483e:	4603      	mov	r3, r0
 8014840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d102      	bne.n	8014850 <etharp_query+0x124>
      return result;
 801484a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801484e:	e096      	b.n	801497e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d106      	bne.n	8014864 <etharp_query+0x138>
 8014856:	4b4c      	ldr	r3, [pc, #304]	; (8014988 <etharp_query+0x25c>)
 8014858:	f240 32e1 	movw	r2, #993	; 0x3e1
 801485c:	494f      	ldr	r1, [pc, #316]	; (801499c <etharp_query+0x270>)
 801485e:	484c      	ldr	r0, [pc, #304]	; (8014990 <etharp_query+0x264>)
 8014860:	f002 f87e 	bl	8016960 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014864:	7c7a      	ldrb	r2, [r7, #17]
 8014866:	494b      	ldr	r1, [pc, #300]	; (8014994 <etharp_query+0x268>)
 8014868:	4613      	mov	r3, r2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	4413      	add	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	440b      	add	r3, r1
 8014872:	3314      	adds	r3, #20
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	2b01      	cmp	r3, #1
 8014878:	d917      	bls.n	80148aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801487a:	4a49      	ldr	r2, [pc, #292]	; (80149a0 <etharp_query+0x274>)
 801487c:	7c7b      	ldrb	r3, [r7, #17]
 801487e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014880:	7c7a      	ldrb	r2, [r7, #17]
 8014882:	4613      	mov	r3, r2
 8014884:	005b      	lsls	r3, r3, #1
 8014886:	4413      	add	r3, r2
 8014888:	00db      	lsls	r3, r3, #3
 801488a:	3308      	adds	r3, #8
 801488c:	4a41      	ldr	r2, [pc, #260]	; (8014994 <etharp_query+0x268>)
 801488e:	4413      	add	r3, r2
 8014890:	3304      	adds	r3, #4
 8014892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014896:	9200      	str	r2, [sp, #0]
 8014898:	697a      	ldr	r2, [r7, #20]
 801489a:	6879      	ldr	r1, [r7, #4]
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	f001 fc6b 	bl	8016178 <ethernet_output>
 80148a2:	4603      	mov	r3, r0
 80148a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148a8:	e067      	b.n	801497a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148aa:	7c7a      	ldrb	r2, [r7, #17]
 80148ac:	4939      	ldr	r1, [pc, #228]	; (8014994 <etharp_query+0x268>)
 80148ae:	4613      	mov	r3, r2
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	4413      	add	r3, r2
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	440b      	add	r3, r1
 80148b8:	3314      	adds	r3, #20
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d15c      	bne.n	801497a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80148c0:	2300      	movs	r3, #0
 80148c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80148c8:	e01c      	b.n	8014904 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	895a      	ldrh	r2, [r3, #10]
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	891b      	ldrh	r3, [r3, #8]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d10a      	bne.n	80148ec <etharp_query+0x1c0>
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d006      	beq.n	80148ec <etharp_query+0x1c0>
 80148de:	4b2a      	ldr	r3, [pc, #168]	; (8014988 <etharp_query+0x25c>)
 80148e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80148e4:	492f      	ldr	r1, [pc, #188]	; (80149a4 <etharp_query+0x278>)
 80148e6:	482a      	ldr	r0, [pc, #168]	; (8014990 <etharp_query+0x264>)
 80148e8:	f002 f83a 	bl	8016960 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	7b1b      	ldrb	r3, [r3, #12]
 80148f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d002      	beq.n	80148fe <etharp_query+0x1d2>
        copy_needed = 1;
 80148f8:	2301      	movs	r3, #1
 80148fa:	61bb      	str	r3, [r7, #24]
        break;
 80148fc:	e005      	b.n	801490a <etharp_query+0x1de>
      }
      p = p->next;
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014904:	69fb      	ldr	r3, [r7, #28]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1df      	bne.n	80148ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d007      	beq.n	8014920 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014916:	200e      	movs	r0, #14
 8014918:	f7f8 ff18 	bl	800d74c <pbuf_clone>
 801491c:	61f8      	str	r0, [r7, #28]
 801491e:	e004      	b.n	801492a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014924:	69f8      	ldr	r0, [r7, #28]
 8014926:	f7f8 fd4f 	bl	800d3c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d021      	beq.n	8014974 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014930:	7c7a      	ldrb	r2, [r7, #17]
 8014932:	4918      	ldr	r1, [pc, #96]	; (8014994 <etharp_query+0x268>)
 8014934:	4613      	mov	r3, r2
 8014936:	005b      	lsls	r3, r3, #1
 8014938:	4413      	add	r3, r2
 801493a:	00db      	lsls	r3, r3, #3
 801493c:	440b      	add	r3, r1
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d00a      	beq.n	801495a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014944:	7c7a      	ldrb	r2, [r7, #17]
 8014946:	4913      	ldr	r1, [pc, #76]	; (8014994 <etharp_query+0x268>)
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	440b      	add	r3, r1
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	4618      	mov	r0, r3
 8014956:	f7f8 fc91 	bl	800d27c <pbuf_free>
      }
      arp_table[i].q = p;
 801495a:	7c7a      	ldrb	r2, [r7, #17]
 801495c:	490d      	ldr	r1, [pc, #52]	; (8014994 <etharp_query+0x268>)
 801495e:	4613      	mov	r3, r2
 8014960:	005b      	lsls	r3, r3, #1
 8014962:	4413      	add	r3, r2
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	440b      	add	r3, r1
 8014968:	69fa      	ldr	r2, [r7, #28]
 801496a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801496c:	2300      	movs	r3, #0
 801496e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014972:	e002      	b.n	801497a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014974:	23ff      	movs	r3, #255	; 0xff
 8014976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801497a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801497e:	4618      	mov	r0, r3
 8014980:	3728      	adds	r7, #40	; 0x28
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	0801c4a4 	.word	0x0801c4a4
 801498c:	0801c650 	.word	0x0801c650
 8014990:	0801c51c 	.word	0x0801c51c
 8014994:	20011ba4 	.word	0x20011ba4
 8014998:	0801c660 	.word	0x0801c660
 801499c:	0801c644 	.word	0x0801c644
 80149a0:	20011c94 	.word	0x20011c94
 80149a4:	0801c688 	.word	0x0801c688

080149a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b08a      	sub	sp, #40	; 0x28
 80149ac:	af02      	add	r7, sp, #8
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
 80149b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80149b6:	2300      	movs	r3, #0
 80149b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d106      	bne.n	80149ce <etharp_raw+0x26>
 80149c0:	4b3a      	ldr	r3, [pc, #232]	; (8014aac <etharp_raw+0x104>)
 80149c2:	f240 4257 	movw	r2, #1111	; 0x457
 80149c6:	493a      	ldr	r1, [pc, #232]	; (8014ab0 <etharp_raw+0x108>)
 80149c8:	483a      	ldr	r0, [pc, #232]	; (8014ab4 <etharp_raw+0x10c>)
 80149ca:	f001 ffc9 	bl	8016960 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80149ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149d2:	211c      	movs	r1, #28
 80149d4:	200e      	movs	r0, #14
 80149d6:	f7f8 f96d 	bl	800ccb4 <pbuf_alloc>
 80149da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d102      	bne.n	80149e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80149e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149e6:	e05d      	b.n	8014aa4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	895b      	ldrh	r3, [r3, #10]
 80149ec:	2b1b      	cmp	r3, #27
 80149ee:	d806      	bhi.n	80149fe <etharp_raw+0x56>
 80149f0:	4b2e      	ldr	r3, [pc, #184]	; (8014aac <etharp_raw+0x104>)
 80149f2:	f240 4262 	movw	r2, #1122	; 0x462
 80149f6:	4930      	ldr	r1, [pc, #192]	; (8014ab8 <etharp_raw+0x110>)
 80149f8:	482e      	ldr	r0, [pc, #184]	; (8014ab4 <etharp_raw+0x10c>)
 80149fa:	f001 ffb1 	bl	8016960 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	685b      	ldr	r3, [r3, #4]
 8014a02:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014a04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7f6 ff32 	bl	800b870 <lwip_htons>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	461a      	mov	r2, r3
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a1a:	2b06      	cmp	r3, #6
 8014a1c:	d006      	beq.n	8014a2c <etharp_raw+0x84>
 8014a1e:	4b23      	ldr	r3, [pc, #140]	; (8014aac <etharp_raw+0x104>)
 8014a20:	f240 4269 	movw	r2, #1129	; 0x469
 8014a24:	4925      	ldr	r1, [pc, #148]	; (8014abc <etharp_raw+0x114>)
 8014a26:	4823      	ldr	r0, [pc, #140]	; (8014ab4 <etharp_raw+0x10c>)
 8014a28:	f001 ff9a 	bl	8016960 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	3308      	adds	r3, #8
 8014a30:	2206      	movs	r2, #6
 8014a32:	6839      	ldr	r1, [r7, #0]
 8014a34:	4618      	mov	r0, r3
 8014a36:	f001 fece 	bl	80167d6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	3312      	adds	r3, #18
 8014a3e:	2206      	movs	r2, #6
 8014a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a42:	4618      	mov	r0, r3
 8014a44:	f001 fec7 	bl	80167d6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	330e      	adds	r3, #14
 8014a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a4e:	6812      	ldr	r2, [r2, #0]
 8014a50:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	3318      	adds	r3, #24
 8014a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a58:	6812      	ldr	r2, [r2, #0]
 8014a5a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	701a      	strb	r2, [r3, #0]
 8014a62:	2200      	movs	r2, #0
 8014a64:	f042 0201 	orr.w	r2, r2, #1
 8014a68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	f042 0208 	orr.w	r2, r2, #8
 8014a72:	709a      	strb	r2, [r3, #2]
 8014a74:	2200      	movs	r2, #0
 8014a76:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	2206      	movs	r2, #6
 8014a7c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2204      	movs	r2, #4
 8014a82:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014a84:	f640 0306 	movw	r3, #2054	; 0x806
 8014a88:	9300      	str	r3, [sp, #0]
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	68ba      	ldr	r2, [r7, #8]
 8014a8e:	69b9      	ldr	r1, [r7, #24]
 8014a90:	68f8      	ldr	r0, [r7, #12]
 8014a92:	f001 fb71 	bl	8016178 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014a96:	69b8      	ldr	r0, [r7, #24]
 8014a98:	f7f8 fbf0 	bl	800d27c <pbuf_free>
  p = NULL;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014aa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3720      	adds	r7, #32
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	0801c4a4 	.word	0x0801c4a4
 8014ab0:	0801c5f4 	.word	0x0801c5f4
 8014ab4:	0801c51c 	.word	0x0801c51c
 8014ab8:	0801c6a4 	.word	0x0801c6a4
 8014abc:	0801c6d8 	.word	0x0801c6d8

08014ac0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b088      	sub	sp, #32
 8014ac4:	af04      	add	r7, sp, #16
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014adc:	2201      	movs	r2, #1
 8014ade:	9203      	str	r2, [sp, #12]
 8014ae0:	68ba      	ldr	r2, [r7, #8]
 8014ae2:	9202      	str	r2, [sp, #8]
 8014ae4:	4a06      	ldr	r2, [pc, #24]	; (8014b00 <etharp_request_dst+0x40>)
 8014ae6:	9201      	str	r2, [sp, #4]
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	4603      	mov	r3, r0
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	f7ff ff5a 	bl	80149a8 <etharp_raw>
 8014af4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	0801cd08 	.word	0x0801cd08

08014b04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014b0e:	4a05      	ldr	r2, [pc, #20]	; (8014b24 <etharp_request+0x20>)
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f7ff ffd4 	bl	8014ac0 <etharp_request_dst>
 8014b18:	4603      	mov	r3, r0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	0801cd00 	.word	0x0801cd00

08014b28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b08e      	sub	sp, #56	; 0x38
 8014b2c:	af04      	add	r7, sp, #16
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014b32:	4b79      	ldr	r3, [pc, #484]	; (8014d18 <icmp_input+0x1f0>)
 8014b34:	689b      	ldr	r3, [r3, #8]
 8014b36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	f003 030f 	and.w	r3, r3, #15
 8014b40:	b2db      	uxtb	r3, r3
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014b48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b4a:	2b13      	cmp	r3, #19
 8014b4c:	f240 80cd 	bls.w	8014cea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	895b      	ldrh	r3, [r3, #10]
 8014b54:	2b03      	cmp	r3, #3
 8014b56:	f240 80ca 	bls.w	8014cee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014b64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f000 80b7 	beq.w	8014cdc <icmp_input+0x1b4>
 8014b6e:	2b08      	cmp	r3, #8
 8014b70:	f040 80b7 	bne.w	8014ce2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014b74:	4b69      	ldr	r3, [pc, #420]	; (8014d1c <icmp_input+0x1f4>)
 8014b76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b78:	4b67      	ldr	r3, [pc, #412]	; (8014d18 <icmp_input+0x1f0>)
 8014b7a:	695b      	ldr	r3, [r3, #20]
 8014b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b80:	2be0      	cmp	r3, #224	; 0xe0
 8014b82:	f000 80bb 	beq.w	8014cfc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014b86:	4b64      	ldr	r3, [pc, #400]	; (8014d18 <icmp_input+0x1f0>)
 8014b88:	695b      	ldr	r3, [r3, #20]
 8014b8a:	4a63      	ldr	r2, [pc, #396]	; (8014d18 <icmp_input+0x1f0>)
 8014b8c:	6812      	ldr	r2, [r2, #0]
 8014b8e:	4611      	mov	r1, r2
 8014b90:	4618      	mov	r0, r3
 8014b92:	f000 fbe3 	bl	801535c <ip4_addr_isbroadcast_u32>
 8014b96:	4603      	mov	r3, r0
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	f040 80b1 	bne.w	8014d00 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	891b      	ldrh	r3, [r3, #8]
 8014ba2:	2b07      	cmp	r3, #7
 8014ba4:	f240 80a5 	bls.w	8014cf2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014baa:	330e      	adds	r3, #14
 8014bac:	4619      	mov	r1, r3
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f7f8 face 	bl	800d150 <pbuf_add_header>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d04b      	beq.n	8014c52 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	891a      	ldrh	r2, [r3, #8]
 8014bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bc0:	4413      	add	r3, r2
 8014bc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	891b      	ldrh	r3, [r3, #8]
 8014bc8:	8b7a      	ldrh	r2, [r7, #26]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	f0c0 809a 	bcc.w	8014d04 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014bd0:	8b7b      	ldrh	r3, [r7, #26]
 8014bd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	200e      	movs	r0, #14
 8014bda:	f7f8 f86b 	bl	800ccb4 <pbuf_alloc>
 8014bde:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	f000 8090 	beq.w	8014d08 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	895b      	ldrh	r3, [r3, #10]
 8014bec:	461a      	mov	r2, r3
 8014bee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bf0:	3308      	adds	r3, #8
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d203      	bcs.n	8014bfe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014bf6:	6978      	ldr	r0, [r7, #20]
 8014bf8:	f7f8 fb40 	bl	800d27c <pbuf_free>
          goto icmperr;
 8014bfc:	e085      	b.n	8014d0a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c06:	4618      	mov	r0, r3
 8014c08:	f001 fde5 	bl	80167d6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014c0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c0e:	4619      	mov	r1, r3
 8014c10:	6978      	ldr	r0, [r7, #20]
 8014c12:	f7f8 faad 	bl	800d170 <pbuf_remove_header>
 8014c16:	4603      	mov	r3, r0
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d009      	beq.n	8014c30 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014c1c:	4b40      	ldr	r3, [pc, #256]	; (8014d20 <icmp_input+0x1f8>)
 8014c1e:	22b6      	movs	r2, #182	; 0xb6
 8014c20:	4940      	ldr	r1, [pc, #256]	; (8014d24 <icmp_input+0x1fc>)
 8014c22:	4841      	ldr	r0, [pc, #260]	; (8014d28 <icmp_input+0x200>)
 8014c24:	f001 fe9c 	bl	8016960 <iprintf>
          pbuf_free(r);
 8014c28:	6978      	ldr	r0, [r7, #20]
 8014c2a:	f7f8 fb27 	bl	800d27c <pbuf_free>
          goto icmperr;
 8014c2e:	e06c      	b.n	8014d0a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014c30:	6879      	ldr	r1, [r7, #4]
 8014c32:	6978      	ldr	r0, [r7, #20]
 8014c34:	f7f8 fc46 	bl	800d4c4 <pbuf_copy>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d003      	beq.n	8014c46 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014c3e:	6978      	ldr	r0, [r7, #20]
 8014c40:	f7f8 fb1c 	bl	800d27c <pbuf_free>
          goto icmperr;
 8014c44:	e061      	b.n	8014d0a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f7f8 fb18 	bl	800d27c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	607b      	str	r3, [r7, #4]
 8014c50:	e00f      	b.n	8014c72 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014c52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c54:	330e      	adds	r3, #14
 8014c56:	4619      	mov	r1, r3
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f7f8 fa89 	bl	800d170 <pbuf_remove_header>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d006      	beq.n	8014c72 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014c64:	4b2e      	ldr	r3, [pc, #184]	; (8014d20 <icmp_input+0x1f8>)
 8014c66:	22c7      	movs	r2, #199	; 0xc7
 8014c68:	4930      	ldr	r1, [pc, #192]	; (8014d2c <icmp_input+0x204>)
 8014c6a:	482f      	ldr	r0, [pc, #188]	; (8014d28 <icmp_input+0x200>)
 8014c6c:	f001 fe78 	bl	8016960 <iprintf>
          goto icmperr;
 8014c70:	e04b      	b.n	8014d0a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014c78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7f8 fa67 	bl	800d150 <pbuf_add_header>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d12b      	bne.n	8014ce0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014c96:	4b20      	ldr	r3, [pc, #128]	; (8014d18 <icmp_input+0x1f0>)
 8014c98:	691a      	ldr	r2, [r3, #16]
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	709a      	strb	r2, [r3, #2]
 8014caa:	2200      	movs	r2, #0
 8014cac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	22ff      	movs	r2, #255	; 0xff
 8014cb2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	729a      	strb	r2, [r3, #10]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	9302      	str	r3, [sp, #8]
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	9301      	str	r3, [sp, #4]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	9300      	str	r3, [sp, #0]
 8014cca:	23ff      	movs	r3, #255	; 0xff
 8014ccc:	2200      	movs	r2, #0
 8014cce:	69f9      	ldr	r1, [r7, #28]
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f000 fa6b 	bl	80151ac <ip4_output_if>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014cda:	e001      	b.n	8014ce0 <icmp_input+0x1b8>
      break;
 8014cdc:	bf00      	nop
 8014cde:	e000      	b.n	8014ce2 <icmp_input+0x1ba>
      break;
 8014ce0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f7f8 faca 	bl	800d27c <pbuf_free>
  return;
 8014ce8:	e013      	b.n	8014d12 <icmp_input+0x1ea>
    goto lenerr;
 8014cea:	bf00      	nop
 8014cec:	e002      	b.n	8014cf4 <icmp_input+0x1cc>
    goto lenerr;
 8014cee:	bf00      	nop
 8014cf0:	e000      	b.n	8014cf4 <icmp_input+0x1cc>
        goto lenerr;
 8014cf2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f7f8 fac1 	bl	800d27c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cfa:	e00a      	b.n	8014d12 <icmp_input+0x1ea>
        goto icmperr;
 8014cfc:	bf00      	nop
 8014cfe:	e004      	b.n	8014d0a <icmp_input+0x1e2>
        goto icmperr;
 8014d00:	bf00      	nop
 8014d02:	e002      	b.n	8014d0a <icmp_input+0x1e2>
          goto icmperr;
 8014d04:	bf00      	nop
 8014d06:	e000      	b.n	8014d0a <icmp_input+0x1e2>
          goto icmperr;
 8014d08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7f8 fab6 	bl	800d27c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014d12:	3728      	adds	r7, #40	; 0x28
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	20009abc 	.word	0x20009abc
 8014d1c:	20009ad0 	.word	0x20009ad0
 8014d20:	0801c71c 	.word	0x0801c71c
 8014d24:	0801c754 	.word	0x0801c754
 8014d28:	0801c78c 	.word	0x0801c78c
 8014d2c:	0801c7b4 	.word	0x0801c7b4

08014d30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	460b      	mov	r3, r1
 8014d3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014d3c:	78fb      	ldrb	r3, [r7, #3]
 8014d3e:	461a      	mov	r2, r3
 8014d40:	2103      	movs	r1, #3
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 f814 	bl	8014d70 <icmp_send_response>
}
 8014d48:	bf00      	nop
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	460b      	mov	r3, r1
 8014d5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014d5c:	78fb      	ldrb	r3, [r7, #3]
 8014d5e:	461a      	mov	r2, r3
 8014d60:	210b      	movs	r1, #11
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f000 f804 	bl	8014d70 <icmp_send_response>
}
 8014d68:	bf00      	nop
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b08c      	sub	sp, #48	; 0x30
 8014d74:	af04      	add	r7, sp, #16
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	460b      	mov	r3, r1
 8014d7a:	70fb      	strb	r3, [r7, #3]
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014d80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d84:	2124      	movs	r1, #36	; 0x24
 8014d86:	2022      	movs	r0, #34	; 0x22
 8014d88:	f7f7 ff94 	bl	800ccb4 <pbuf_alloc>
 8014d8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d04c      	beq.n	8014e2e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	895b      	ldrh	r3, [r3, #10]
 8014d98:	2b23      	cmp	r3, #35	; 0x23
 8014d9a:	d806      	bhi.n	8014daa <icmp_send_response+0x3a>
 8014d9c:	4b26      	ldr	r3, [pc, #152]	; (8014e38 <icmp_send_response+0xc8>)
 8014d9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014da2:	4926      	ldr	r1, [pc, #152]	; (8014e3c <icmp_send_response+0xcc>)
 8014da4:	4826      	ldr	r0, [pc, #152]	; (8014e40 <icmp_send_response+0xd0>)
 8014da6:	f001 fddb 	bl	8016960 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	78fa      	ldrb	r2, [r7, #3]
 8014dba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	78ba      	ldrb	r2, [r7, #2]
 8014dc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	711a      	strb	r2, [r3, #4]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	719a      	strb	r2, [r3, #6]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014dd6:	69fb      	ldr	r3, [r7, #28]
 8014dd8:	685b      	ldr	r3, [r3, #4]
 8014dda:	f103 0008 	add.w	r0, r3, #8
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	221c      	movs	r2, #28
 8014de4:	4619      	mov	r1, r3
 8014de6:	f001 fcf6 	bl	80167d6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014dea:	69bb      	ldr	r3, [r7, #24]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014df0:	f107 030c 	add.w	r3, r7, #12
 8014df4:	4618      	mov	r0, r3
 8014df6:	f000 f825 	bl	8014e44 <ip4_route>
 8014dfa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d011      	beq.n	8014e26 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	2200      	movs	r2, #0
 8014e06:	709a      	strb	r2, [r3, #2]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014e0c:	f107 020c 	add.w	r2, r7, #12
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	9302      	str	r3, [sp, #8]
 8014e14:	2301      	movs	r3, #1
 8014e16:	9301      	str	r3, [sp, #4]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	9300      	str	r3, [sp, #0]
 8014e1c:	23ff      	movs	r3, #255	; 0xff
 8014e1e:	2100      	movs	r1, #0
 8014e20:	69f8      	ldr	r0, [r7, #28]
 8014e22:	f000 f9c3 	bl	80151ac <ip4_output_if>
  }
  pbuf_free(q);
 8014e26:	69f8      	ldr	r0, [r7, #28]
 8014e28:	f7f8 fa28 	bl	800d27c <pbuf_free>
 8014e2c:	e000      	b.n	8014e30 <icmp_send_response+0xc0>
    return;
 8014e2e:	bf00      	nop
}
 8014e30:	3720      	adds	r7, #32
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}
 8014e36:	bf00      	nop
 8014e38:	0801c71c 	.word	0x0801c71c
 8014e3c:	0801c7e8 	.word	0x0801c7e8
 8014e40:	0801c78c 	.word	0x0801c78c

08014e44 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b085      	sub	sp, #20
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014e4c:	4b33      	ldr	r3, [pc, #204]	; (8014f1c <ip4_route+0xd8>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	e036      	b.n	8014ec2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e5a:	f003 0301 	and.w	r3, r3, #1
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d02b      	beq.n	8014ebc <ip4_route+0x78>
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e6a:	089b      	lsrs	r3, r3, #2
 8014e6c:	f003 0301 	and.w	r3, r3, #1
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d022      	beq.n	8014ebc <ip4_route+0x78>
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	3304      	adds	r3, #4
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d01d      	beq.n	8014ebc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	3304      	adds	r3, #4
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	405a      	eors	r2, r3
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	3308      	adds	r3, #8
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	4013      	ands	r3, r2
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d101      	bne.n	8014e9c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	e038      	b.n	8014f0e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ea2:	f003 0302 	and.w	r3, r3, #2
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d108      	bne.n	8014ebc <ip4_route+0x78>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	330c      	adds	r3, #12
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d101      	bne.n	8014ebc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	e028      	b.n	8014f0e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	60fb      	str	r3, [r7, #12]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d1c5      	bne.n	8014e54 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014ec8:	4b15      	ldr	r3, [pc, #84]	; (8014f20 <ip4_route+0xdc>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d01a      	beq.n	8014f06 <ip4_route+0xc2>
 8014ed0:	4b13      	ldr	r3, [pc, #76]	; (8014f20 <ip4_route+0xdc>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ed8:	f003 0301 	and.w	r3, r3, #1
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d012      	beq.n	8014f06 <ip4_route+0xc2>
 8014ee0:	4b0f      	ldr	r3, [pc, #60]	; (8014f20 <ip4_route+0xdc>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ee8:	f003 0304 	and.w	r3, r3, #4
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d00a      	beq.n	8014f06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014ef0:	4b0b      	ldr	r3, [pc, #44]	; (8014f20 <ip4_route+0xdc>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	3304      	adds	r3, #4
 8014ef6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d004      	beq.n	8014f06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	2b7f      	cmp	r3, #127	; 0x7f
 8014f04:	d101      	bne.n	8014f0a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014f06:	2300      	movs	r3, #0
 8014f08:	e001      	b.n	8014f0e <ip4_route+0xca>
  }

  return netif_default;
 8014f0a:	4b05      	ldr	r3, [pc, #20]	; (8014f20 <ip4_route+0xdc>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3714      	adds	r7, #20
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	20011b3c 	.word	0x20011b3c
 8014f20:	20011b40 	.word	0x20011b40

08014f24 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d016      	beq.n	8014f6a <ip4_input_accept+0x46>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3304      	adds	r3, #4
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d011      	beq.n	8014f6a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014f46:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <ip4_input_accept+0x50>)
 8014f48:	695a      	ldr	r2, [r3, #20]
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d008      	beq.n	8014f66 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014f54:	4b07      	ldr	r3, [pc, #28]	; (8014f74 <ip4_input_accept+0x50>)
 8014f56:	695b      	ldr	r3, [r3, #20]
 8014f58:	6879      	ldr	r1, [r7, #4]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f000 f9fe 	bl	801535c <ip4_addr_isbroadcast_u32>
 8014f60:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d001      	beq.n	8014f6a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014f66:	2301      	movs	r3, #1
 8014f68:	e000      	b.n	8014f6c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	20009abc 	.word	0x20009abc

08014f78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b086      	sub	sp, #24
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	091b      	lsrs	r3, r3, #4
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	2b04      	cmp	r3, #4
 8014f92:	d004      	beq.n	8014f9e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f7f8 f971 	bl	800d27c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	e0fd      	b.n	801519a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	f003 030f 	and.w	r3, r3, #15
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	009b      	lsls	r3, r3, #2
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	885b      	ldrh	r3, [r3, #2]
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f6 fc5b 	bl	800b870 <lwip_htons>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	891b      	ldrh	r3, [r3, #8]
 8014fc2:	89ba      	ldrh	r2, [r7, #12]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d204      	bcs.n	8014fd2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014fc8:	89bb      	ldrh	r3, [r7, #12]
 8014fca:	4619      	mov	r1, r3
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f7f7 ffcf 	bl	800cf70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	895b      	ldrh	r3, [r3, #10]
 8014fd6:	89fa      	ldrh	r2, [r7, #14]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d807      	bhi.n	8014fec <ip4_input+0x74>
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	891b      	ldrh	r3, [r3, #8]
 8014fe0:	89ba      	ldrh	r2, [r7, #12]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d802      	bhi.n	8014fec <ip4_input+0x74>
 8014fe6:	89fb      	ldrh	r3, [r7, #14]
 8014fe8:	2b13      	cmp	r3, #19
 8014fea:	d804      	bhi.n	8014ff6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7f8 f945 	bl	800d27c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e0d1      	b.n	801519a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	691b      	ldr	r3, [r3, #16]
 8014ffa:	4a6a      	ldr	r2, [pc, #424]	; (80151a4 <ip4_input+0x22c>)
 8014ffc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	4a68      	ldr	r2, [pc, #416]	; (80151a4 <ip4_input+0x22c>)
 8015004:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015006:	4b67      	ldr	r3, [pc, #412]	; (80151a4 <ip4_input+0x22c>)
 8015008:	695b      	ldr	r3, [r3, #20]
 801500a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801500e:	2be0      	cmp	r3, #224	; 0xe0
 8015010:	d112      	bne.n	8015038 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015018:	f003 0301 	and.w	r3, r3, #1
 801501c:	b2db      	uxtb	r3, r3
 801501e:	2b00      	cmp	r3, #0
 8015020:	d007      	beq.n	8015032 <ip4_input+0xba>
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	3304      	adds	r3, #4
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d002      	beq.n	8015032 <ip4_input+0xba>
      netif = inp;
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	613b      	str	r3, [r7, #16]
 8015030:	e02a      	b.n	8015088 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015032:	2300      	movs	r3, #0
 8015034:	613b      	str	r3, [r7, #16]
 8015036:	e027      	b.n	8015088 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015038:	6838      	ldr	r0, [r7, #0]
 801503a:	f7ff ff73 	bl	8014f24 <ip4_input_accept>
 801503e:	4603      	mov	r3, r0
 8015040:	2b00      	cmp	r3, #0
 8015042:	d002      	beq.n	801504a <ip4_input+0xd2>
      netif = inp;
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	613b      	str	r3, [r7, #16]
 8015048:	e01e      	b.n	8015088 <ip4_input+0x110>
    } else {
      netif = NULL;
 801504a:	2300      	movs	r3, #0
 801504c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801504e:	4b55      	ldr	r3, [pc, #340]	; (80151a4 <ip4_input+0x22c>)
 8015050:	695b      	ldr	r3, [r3, #20]
 8015052:	b2db      	uxtb	r3, r3
 8015054:	2b7f      	cmp	r3, #127	; 0x7f
 8015056:	d017      	beq.n	8015088 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015058:	4b53      	ldr	r3, [pc, #332]	; (80151a8 <ip4_input+0x230>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	613b      	str	r3, [r7, #16]
 801505e:	e00e      	b.n	801507e <ip4_input+0x106>
          if (netif == inp) {
 8015060:	693a      	ldr	r2, [r7, #16]
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	429a      	cmp	r2, r3
 8015066:	d006      	beq.n	8015076 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015068:	6938      	ldr	r0, [r7, #16]
 801506a:	f7ff ff5b 	bl	8014f24 <ip4_input_accept>
 801506e:	4603      	mov	r3, r0
 8015070:	2b00      	cmp	r3, #0
 8015072:	d108      	bne.n	8015086 <ip4_input+0x10e>
 8015074:	e000      	b.n	8015078 <ip4_input+0x100>
            continue;
 8015076:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	613b      	str	r3, [r7, #16]
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d1ed      	bne.n	8015060 <ip4_input+0xe8>
 8015084:	e000      	b.n	8015088 <ip4_input+0x110>
            break;
 8015086:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015088:	4b46      	ldr	r3, [pc, #280]	; (80151a4 <ip4_input+0x22c>)
 801508a:	691b      	ldr	r3, [r3, #16]
 801508c:	6839      	ldr	r1, [r7, #0]
 801508e:	4618      	mov	r0, r3
 8015090:	f000 f964 	bl	801535c <ip4_addr_isbroadcast_u32>
 8015094:	4603      	mov	r3, r0
 8015096:	2b00      	cmp	r3, #0
 8015098:	d105      	bne.n	80150a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801509a:	4b42      	ldr	r3, [pc, #264]	; (80151a4 <ip4_input+0x22c>)
 801509c:	691b      	ldr	r3, [r3, #16]
 801509e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80150a2:	2be0      	cmp	r3, #224	; 0xe0
 80150a4:	d104      	bne.n	80150b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f7f8 f8e8 	bl	800d27c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80150ac:	2300      	movs	r3, #0
 80150ae:	e074      	b.n	801519a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d104      	bne.n	80150c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7f8 f8e0 	bl	800d27c <pbuf_free>
    return ERR_OK;
 80150bc:	2300      	movs	r3, #0
 80150be:	e06c      	b.n	801519a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	88db      	ldrh	r3, [r3, #6]
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	461a      	mov	r2, r3
 80150c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80150cc:	4013      	ands	r3, r2
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d00b      	beq.n	80150ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	f000 fc88 	bl	80159e8 <ip4_reass>
 80150d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d101      	bne.n	80150e4 <ip4_input+0x16c>
      return ERR_OK;
 80150e0:	2300      	movs	r3, #0
 80150e2:	e05a      	b.n	801519a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80150ea:	4a2e      	ldr	r2, [pc, #184]	; (80151a4 <ip4_input+0x22c>)
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80150f0:	4a2c      	ldr	r2, [pc, #176]	; (80151a4 <ip4_input+0x22c>)
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80150f6:	4a2b      	ldr	r2, [pc, #172]	; (80151a4 <ip4_input+0x22c>)
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	f003 030f 	and.w	r3, r3, #15
 8015104:	b2db      	uxtb	r3, r3
 8015106:	009b      	lsls	r3, r3, #2
 8015108:	b2db      	uxtb	r3, r3
 801510a:	b29a      	uxth	r2, r3
 801510c:	4b25      	ldr	r3, [pc, #148]	; (80151a4 <ip4_input+0x22c>)
 801510e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015110:	89fb      	ldrh	r3, [r7, #14]
 8015112:	4619      	mov	r1, r3
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7f8 f82b 	bl	800d170 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	7a5b      	ldrb	r3, [r3, #9]
 801511e:	2b01      	cmp	r3, #1
 8015120:	d006      	beq.n	8015130 <ip4_input+0x1b8>
 8015122:	2b06      	cmp	r3, #6
 8015124:	d109      	bne.n	801513a <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015126:	6839      	ldr	r1, [r7, #0]
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7fa f9fb 	bl	800f524 <tcp_input>
        break;
 801512e:	e021      	b.n	8015174 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015130:	6839      	ldr	r1, [r7, #0]
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7ff fcf8 	bl	8014b28 <icmp_input>
        break;
 8015138:	e01c      	b.n	8015174 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801513a:	4b1a      	ldr	r3, [pc, #104]	; (80151a4 <ip4_input+0x22c>)
 801513c:	695b      	ldr	r3, [r3, #20]
 801513e:	6939      	ldr	r1, [r7, #16]
 8015140:	4618      	mov	r0, r3
 8015142:	f000 f90b 	bl	801535c <ip4_addr_isbroadcast_u32>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d10f      	bne.n	801516c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801514c:	4b15      	ldr	r3, [pc, #84]	; (80151a4 <ip4_input+0x22c>)
 801514e:	695b      	ldr	r3, [r3, #20]
 8015150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015154:	2be0      	cmp	r3, #224	; 0xe0
 8015156:	d009      	beq.n	801516c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801515c:	4619      	mov	r1, r3
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7f8 f879 	bl	800d256 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015164:	2102      	movs	r1, #2
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7ff fde2 	bl	8014d30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f7f8 f885 	bl	800d27c <pbuf_free>
        break;
 8015172:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015174:	4b0b      	ldr	r3, [pc, #44]	; (80151a4 <ip4_input+0x22c>)
 8015176:	2200      	movs	r2, #0
 8015178:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801517a:	4b0a      	ldr	r3, [pc, #40]	; (80151a4 <ip4_input+0x22c>)
 801517c:	2200      	movs	r2, #0
 801517e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015180:	4b08      	ldr	r3, [pc, #32]	; (80151a4 <ip4_input+0x22c>)
 8015182:	2200      	movs	r2, #0
 8015184:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015186:	4b07      	ldr	r3, [pc, #28]	; (80151a4 <ip4_input+0x22c>)
 8015188:	2200      	movs	r2, #0
 801518a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801518c:	4b05      	ldr	r3, [pc, #20]	; (80151a4 <ip4_input+0x22c>)
 801518e:	2200      	movs	r2, #0
 8015190:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015192:	4b04      	ldr	r3, [pc, #16]	; (80151a4 <ip4_input+0x22c>)
 8015194:	2200      	movs	r2, #0
 8015196:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015198:	2300      	movs	r3, #0
}
 801519a:	4618      	mov	r0, r3
 801519c:	3718      	adds	r7, #24
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}
 80151a2:	bf00      	nop
 80151a4:	20009abc 	.word	0x20009abc
 80151a8:	20011b3c 	.word	0x20011b3c

080151ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b08a      	sub	sp, #40	; 0x28
 80151b0:	af04      	add	r7, sp, #16
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	607a      	str	r2, [r7, #4]
 80151b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d009      	beq.n	80151d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d003      	beq.n	80151d2 <ip4_output_if+0x26>
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d102      	bne.n	80151d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80151d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d4:	3304      	adds	r3, #4
 80151d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80151d8:	78fa      	ldrb	r2, [r7, #3]
 80151da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151dc:	9302      	str	r3, [sp, #8]
 80151de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80151e2:	9301      	str	r3, [sp, #4]
 80151e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	4613      	mov	r3, r2
 80151ec:	687a      	ldr	r2, [r7, #4]
 80151ee:	6979      	ldr	r1, [r7, #20]
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f000 f805 	bl	8015200 <ip4_output_if_src>
 80151f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3718      	adds	r7, #24
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b088      	sub	sp, #32
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	607a      	str	r2, [r7, #4]
 801520c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	7b9b      	ldrb	r3, [r3, #14]
 8015212:	2b01      	cmp	r3, #1
 8015214:	d006      	beq.n	8015224 <ip4_output_if_src+0x24>
 8015216:	4b4b      	ldr	r3, [pc, #300]	; (8015344 <ip4_output_if_src+0x144>)
 8015218:	f44f 7255 	mov.w	r2, #852	; 0x354
 801521c:	494a      	ldr	r1, [pc, #296]	; (8015348 <ip4_output_if_src+0x148>)
 801521e:	484b      	ldr	r0, [pc, #300]	; (801534c <ip4_output_if_src+0x14c>)
 8015220:	f001 fb9e 	bl	8016960 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d060      	beq.n	80152ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801522a:	2314      	movs	r3, #20
 801522c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801522e:	2114      	movs	r1, #20
 8015230:	68f8      	ldr	r0, [r7, #12]
 8015232:	f7f7 ff8d 	bl	800d150 <pbuf_add_header>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d002      	beq.n	8015242 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801523c:	f06f 0301 	mvn.w	r3, #1
 8015240:	e07c      	b.n	801533c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	895b      	ldrh	r3, [r3, #10]
 801524c:	2b13      	cmp	r3, #19
 801524e:	d806      	bhi.n	801525e <ip4_output_if_src+0x5e>
 8015250:	4b3c      	ldr	r3, [pc, #240]	; (8015344 <ip4_output_if_src+0x144>)
 8015252:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015256:	493e      	ldr	r1, [pc, #248]	; (8015350 <ip4_output_if_src+0x150>)
 8015258:	483c      	ldr	r0, [pc, #240]	; (801534c <ip4_output_if_src+0x14c>)
 801525a:	f001 fb81 	bl	8016960 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	78fa      	ldrb	r2, [r7, #3]
 8015262:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015264:	69fb      	ldr	r3, [r7, #28]
 8015266:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801526a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015274:	8b7b      	ldrh	r3, [r7, #26]
 8015276:	089b      	lsrs	r3, r3, #2
 8015278:	b29b      	uxth	r3, r3
 801527a:	b2db      	uxtb	r3, r3
 801527c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015280:	b2da      	uxtb	r2, r3
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801528c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	891b      	ldrh	r3, [r3, #8]
 8015292:	4618      	mov	r0, r3
 8015294:	f7f6 faec 	bl	800b870 <lwip_htons>
 8015298:	4603      	mov	r3, r0
 801529a:	461a      	mov	r2, r3
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	2200      	movs	r2, #0
 80152a4:	719a      	strb	r2, [r3, #6]
 80152a6:	2200      	movs	r2, #0
 80152a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80152aa:	4b2a      	ldr	r3, [pc, #168]	; (8015354 <ip4_output_if_src+0x154>)
 80152ac:	881b      	ldrh	r3, [r3, #0]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7f6 fade 	bl	800b870 <lwip_htons>
 80152b4:	4603      	mov	r3, r0
 80152b6:	461a      	mov	r2, r3
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80152bc:	4b25      	ldr	r3, [pc, #148]	; (8015354 <ip4_output_if_src+0x154>)
 80152be:	881b      	ldrh	r3, [r3, #0]
 80152c0:	3301      	adds	r3, #1
 80152c2:	b29a      	uxth	r2, r3
 80152c4:	4b23      	ldr	r3, [pc, #140]	; (8015354 <ip4_output_if_src+0x154>)
 80152c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d104      	bne.n	80152d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80152ce:	4b22      	ldr	r3, [pc, #136]	; (8015358 <ip4_output_if_src+0x158>)
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	69fb      	ldr	r3, [r7, #28]
 80152d4:	60da      	str	r2, [r3, #12]
 80152d6:	e003      	b.n	80152e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	681a      	ldr	r2, [r3, #0]
 80152dc:	69fb      	ldr	r3, [r7, #28]
 80152de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	2200      	movs	r2, #0
 80152e4:	729a      	strb	r2, [r3, #10]
 80152e6:	2200      	movs	r2, #0
 80152e8:	72da      	strb	r2, [r3, #11]
 80152ea:	e00f      	b.n	801530c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	895b      	ldrh	r3, [r3, #10]
 80152f0:	2b13      	cmp	r3, #19
 80152f2:	d802      	bhi.n	80152fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80152f4:	f06f 0301 	mvn.w	r3, #1
 80152f8:	e020      	b.n	801533c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	691b      	ldr	r3, [r3, #16]
 8015304:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015306:	f107 0314 	add.w	r3, r7, #20
 801530a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801530e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015310:	2b00      	cmp	r3, #0
 8015312:	d00c      	beq.n	801532e <ip4_output_if_src+0x12e>
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	891a      	ldrh	r2, [r3, #8]
 8015318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801531c:	429a      	cmp	r2, r3
 801531e:	d906      	bls.n	801532e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f000 fd53 	bl	8015dd0 <ip4_frag>
 801532a:	4603      	mov	r3, r0
 801532c:	e006      	b.n	801533c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015330:	695b      	ldr	r3, [r3, #20]
 8015332:	687a      	ldr	r2, [r7, #4]
 8015334:	68f9      	ldr	r1, [r7, #12]
 8015336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015338:	4798      	blx	r3
 801533a:	4603      	mov	r3, r0
}
 801533c:	4618      	mov	r0, r3
 801533e:	3720      	adds	r7, #32
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}
 8015344:	0801c814 	.word	0x0801c814
 8015348:	0801c848 	.word	0x0801c848
 801534c:	0801c854 	.word	0x0801c854
 8015350:	0801c87c 	.word	0x0801c87c
 8015354:	20011c96 	.word	0x20011c96
 8015358:	0801ccfc 	.word	0x0801ccfc

0801535c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801535c:	b480      	push	{r7}
 801535e:	b085      	sub	sp, #20
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015370:	d002      	beq.n	8015378 <ip4_addr_isbroadcast_u32+0x1c>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d101      	bne.n	801537c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015378:	2301      	movs	r3, #1
 801537a:	e02a      	b.n	80153d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015382:	f003 0302 	and.w	r3, r3, #2
 8015386:	2b00      	cmp	r3, #0
 8015388:	d101      	bne.n	801538e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801538a:	2300      	movs	r3, #0
 801538c:	e021      	b.n	80153d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	3304      	adds	r3, #4
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	429a      	cmp	r2, r3
 8015398:	d101      	bne.n	801539e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801539a:	2300      	movs	r3, #0
 801539c:	e019      	b.n	80153d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	3304      	adds	r3, #4
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	405a      	eors	r2, r3
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	3308      	adds	r3, #8
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4013      	ands	r3, r2
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d10d      	bne.n	80153d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	3308      	adds	r3, #8
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	43da      	mvns	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	3308      	adds	r3, #8
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d101      	bne.n	80153d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80153cc:	2301      	movs	r3, #1
 80153ce:	e000      	b.n	80153d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80153d0:	2300      	movs	r3, #0
  }
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3714      	adds	r7, #20
 80153d6:	46bd      	mov	sp, r7
 80153d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153dc:	4770      	bx	lr
	...

080153e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80153e6:	2300      	movs	r3, #0
 80153e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80153ea:	4b12      	ldr	r3, [pc, #72]	; (8015434 <ip_reass_tmr+0x54>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80153f0:	e018      	b.n	8015424 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	7fdb      	ldrb	r3, [r3, #31]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d00b      	beq.n	8015412 <ip_reass_tmr+0x32>
      r->timer--;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	7fdb      	ldrb	r3, [r3, #31]
 80153fe:	3b01      	subs	r3, #1
 8015400:	b2da      	uxtb	r2, r3
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	60fb      	str	r3, [r7, #12]
 8015410:	e008      	b.n	8015424 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801541c:	68b9      	ldr	r1, [r7, #8]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 f80a 	bl	8015438 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d1e3      	bne.n	80153f2 <ip_reass_tmr+0x12>
    }
  }
}
 801542a:	bf00      	nop
 801542c:	bf00      	nop
 801542e:	3710      	adds	r7, #16
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	20011c98 	.word	0x20011c98

08015438 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b088      	sub	sp, #32
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015442:	2300      	movs	r3, #0
 8015444:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	429a      	cmp	r2, r3
 801544c:	d105      	bne.n	801545a <ip_reass_free_complete_datagram+0x22>
 801544e:	4b45      	ldr	r3, [pc, #276]	; (8015564 <ip_reass_free_complete_datagram+0x12c>)
 8015450:	22ab      	movs	r2, #171	; 0xab
 8015452:	4945      	ldr	r1, [pc, #276]	; (8015568 <ip_reass_free_complete_datagram+0x130>)
 8015454:	4845      	ldr	r0, [pc, #276]	; (801556c <ip_reass_free_complete_datagram+0x134>)
 8015456:	f001 fa83 	bl	8016960 <iprintf>
  if (prev != NULL) {
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d00a      	beq.n	8015476 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	429a      	cmp	r2, r3
 8015468:	d005      	beq.n	8015476 <ip_reass_free_complete_datagram+0x3e>
 801546a:	4b3e      	ldr	r3, [pc, #248]	; (8015564 <ip_reass_free_complete_datagram+0x12c>)
 801546c:	22ad      	movs	r2, #173	; 0xad
 801546e:	4940      	ldr	r1, [pc, #256]	; (8015570 <ip_reass_free_complete_datagram+0x138>)
 8015470:	483e      	ldr	r0, [pc, #248]	; (801556c <ip_reass_free_complete_datagram+0x134>)
 8015472:	f001 fa75 	bl	8016960 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	685b      	ldr	r3, [r3, #4]
 801547c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	889b      	ldrh	r3, [r3, #4]
 8015482:	b29b      	uxth	r3, r3
 8015484:	2b00      	cmp	r3, #0
 8015486:	d12a      	bne.n	80154de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	681a      	ldr	r2, [r3, #0]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	6858      	ldr	r0, [r3, #4]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3308      	adds	r3, #8
 801549e:	2214      	movs	r2, #20
 80154a0:	4619      	mov	r1, r3
 80154a2:	f001 f998 	bl	80167d6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80154a6:	2101      	movs	r1, #1
 80154a8:	69b8      	ldr	r0, [r7, #24]
 80154aa:	f7ff fc51 	bl	8014d50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80154ae:	69b8      	ldr	r0, [r7, #24]
 80154b0:	f7f7 ff72 	bl	800d398 <pbuf_clen>
 80154b4:	4603      	mov	r3, r0
 80154b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80154b8:	8bfa      	ldrh	r2, [r7, #30]
 80154ba:	8a7b      	ldrh	r3, [r7, #18]
 80154bc:	4413      	add	r3, r2
 80154be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154c2:	db05      	blt.n	80154d0 <ip_reass_free_complete_datagram+0x98>
 80154c4:	4b27      	ldr	r3, [pc, #156]	; (8015564 <ip_reass_free_complete_datagram+0x12c>)
 80154c6:	22bc      	movs	r2, #188	; 0xbc
 80154c8:	492a      	ldr	r1, [pc, #168]	; (8015574 <ip_reass_free_complete_datagram+0x13c>)
 80154ca:	4828      	ldr	r0, [pc, #160]	; (801556c <ip_reass_free_complete_datagram+0x134>)
 80154cc:	f001 fa48 	bl	8016960 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80154d0:	8bfa      	ldrh	r2, [r7, #30]
 80154d2:	8a7b      	ldrh	r3, [r7, #18]
 80154d4:	4413      	add	r3, r2
 80154d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80154d8:	69b8      	ldr	r0, [r7, #24]
 80154da:	f7f7 fecf 	bl	800d27c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80154e4:	e01f      	b.n	8015526 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 80154ec:	69bb      	ldr	r3, [r7, #24]
 80154ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	f7f7 ff4e 	bl	800d398 <pbuf_clen>
 80154fc:	4603      	mov	r3, r0
 80154fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015500:	8bfa      	ldrh	r2, [r7, #30]
 8015502:	8a7b      	ldrh	r3, [r7, #18]
 8015504:	4413      	add	r3, r2
 8015506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801550a:	db05      	blt.n	8015518 <ip_reass_free_complete_datagram+0xe0>
 801550c:	4b15      	ldr	r3, [pc, #84]	; (8015564 <ip_reass_free_complete_datagram+0x12c>)
 801550e:	22cc      	movs	r2, #204	; 0xcc
 8015510:	4918      	ldr	r1, [pc, #96]	; (8015574 <ip_reass_free_complete_datagram+0x13c>)
 8015512:	4816      	ldr	r0, [pc, #88]	; (801556c <ip_reass_free_complete_datagram+0x134>)
 8015514:	f001 fa24 	bl	8016960 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015518:	8bfa      	ldrh	r2, [r7, #30]
 801551a:	8a7b      	ldrh	r3, [r7, #18]
 801551c:	4413      	add	r3, r2
 801551e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f7f7 feab 	bl	800d27c <pbuf_free>
  while (p != NULL) {
 8015526:	69bb      	ldr	r3, [r7, #24]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d1dc      	bne.n	80154e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801552c:	6839      	ldr	r1, [r7, #0]
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f000 f8c2 	bl	80156b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015534:	4b10      	ldr	r3, [pc, #64]	; (8015578 <ip_reass_free_complete_datagram+0x140>)
 8015536:	881b      	ldrh	r3, [r3, #0]
 8015538:	8bfa      	ldrh	r2, [r7, #30]
 801553a:	429a      	cmp	r2, r3
 801553c:	d905      	bls.n	801554a <ip_reass_free_complete_datagram+0x112>
 801553e:	4b09      	ldr	r3, [pc, #36]	; (8015564 <ip_reass_free_complete_datagram+0x12c>)
 8015540:	22d2      	movs	r2, #210	; 0xd2
 8015542:	490e      	ldr	r1, [pc, #56]	; (801557c <ip_reass_free_complete_datagram+0x144>)
 8015544:	4809      	ldr	r0, [pc, #36]	; (801556c <ip_reass_free_complete_datagram+0x134>)
 8015546:	f001 fa0b 	bl	8016960 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801554a:	4b0b      	ldr	r3, [pc, #44]	; (8015578 <ip_reass_free_complete_datagram+0x140>)
 801554c:	881a      	ldrh	r2, [r3, #0]
 801554e:	8bfb      	ldrh	r3, [r7, #30]
 8015550:	1ad3      	subs	r3, r2, r3
 8015552:	b29a      	uxth	r2, r3
 8015554:	4b08      	ldr	r3, [pc, #32]	; (8015578 <ip_reass_free_complete_datagram+0x140>)
 8015556:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015558:	8bfb      	ldrh	r3, [r7, #30]
}
 801555a:	4618      	mov	r0, r3
 801555c:	3720      	adds	r7, #32
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	0801c8ac 	.word	0x0801c8ac
 8015568:	0801c8e8 	.word	0x0801c8e8
 801556c:	0801c8f4 	.word	0x0801c8f4
 8015570:	0801c91c 	.word	0x0801c91c
 8015574:	0801c930 	.word	0x0801c930
 8015578:	20011c9c 	.word	0x20011c9c
 801557c:	0801c950 	.word	0x0801c950

08015580 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b08a      	sub	sp, #40	; 0x28
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801558a:	2300      	movs	r3, #0
 801558c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801558e:	2300      	movs	r3, #0
 8015590:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015592:	2300      	movs	r3, #0
 8015594:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015596:	2300      	movs	r3, #0
 8015598:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801559e:	4b28      	ldr	r3, [pc, #160]	; (8015640 <ip_reass_remove_oldest_datagram+0xc0>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80155a4:	e030      	b.n	8015608 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80155a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a8:	695a      	ldr	r2, [r3, #20]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d10c      	bne.n	80155cc <ip_reass_remove_oldest_datagram+0x4c>
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	699a      	ldr	r2, [r3, #24]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	691b      	ldr	r3, [r3, #16]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d106      	bne.n	80155cc <ip_reass_remove_oldest_datagram+0x4c>
 80155be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c0:	899a      	ldrh	r2, [r3, #12]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	889b      	ldrh	r3, [r3, #4]
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d014      	beq.n	80155f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	3301      	adds	r3, #1
 80155d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80155d2:	6a3b      	ldr	r3, [r7, #32]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d104      	bne.n	80155e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80155d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	61bb      	str	r3, [r7, #24]
 80155e0:	e009      	b.n	80155f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80155e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e4:	7fda      	ldrb	r2, [r3, #31]
 80155e6:	6a3b      	ldr	r3, [r7, #32]
 80155e8:	7fdb      	ldrb	r3, [r3, #31]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d803      	bhi.n	80155f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80155ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80155f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d001      	beq.n	8015602 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80155fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015600:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560a:	2b00      	cmp	r3, #0
 801560c:	d1cb      	bne.n	80155a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801560e:	6a3b      	ldr	r3, [r7, #32]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d008      	beq.n	8015626 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015614:	69b9      	ldr	r1, [r7, #24]
 8015616:	6a38      	ldr	r0, [r7, #32]
 8015618:	f7ff ff0e 	bl	8015438 <ip_reass_free_complete_datagram>
 801561c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801561e:	697a      	ldr	r2, [r7, #20]
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	4413      	add	r3, r2
 8015624:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015626:	697a      	ldr	r2, [r7, #20]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	429a      	cmp	r2, r3
 801562c:	da02      	bge.n	8015634 <ip_reass_remove_oldest_datagram+0xb4>
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	2b01      	cmp	r3, #1
 8015632:	dcac      	bgt.n	801558e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015634:	697b      	ldr	r3, [r7, #20]
}
 8015636:	4618      	mov	r0, r3
 8015638:	3728      	adds	r7, #40	; 0x28
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	20011c98 	.word	0x20011c98

08015644 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b084      	sub	sp, #16
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801564e:	2003      	movs	r0, #3
 8015650:	f7f6 fefe 	bl	800c450 <memp_malloc>
 8015654:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d110      	bne.n	801567e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801565c:	6839      	ldr	r1, [r7, #0]
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ff ff8e 	bl	8015580 <ip_reass_remove_oldest_datagram>
 8015664:	4602      	mov	r2, r0
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	4293      	cmp	r3, r2
 801566a:	dc03      	bgt.n	8015674 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801566c:	2003      	movs	r0, #3
 801566e:	f7f6 feef 	bl	800c450 <memp_malloc>
 8015672:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d101      	bne.n	801567e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801567a:	2300      	movs	r3, #0
 801567c:	e016      	b.n	80156ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801567e:	2220      	movs	r2, #32
 8015680:	2100      	movs	r1, #0
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	f001 f8cf 	bl	8016826 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	220f      	movs	r2, #15
 801568c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801568e:	4b09      	ldr	r3, [pc, #36]	; (80156b4 <ip_reass_enqueue_new_datagram+0x70>)
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015696:	4a07      	ldr	r2, [pc, #28]	; (80156b4 <ip_reass_enqueue_new_datagram+0x70>)
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	3308      	adds	r3, #8
 80156a0:	2214      	movs	r2, #20
 80156a2:	6879      	ldr	r1, [r7, #4]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f001 f896 	bl	80167d6 <memcpy>
  return ipr;
 80156aa:	68fb      	ldr	r3, [r7, #12]
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3710      	adds	r7, #16
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	20011c98 	.word	0x20011c98

080156b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80156c2:	4b10      	ldr	r3, [pc, #64]	; (8015704 <ip_reass_dequeue_datagram+0x4c>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d104      	bne.n	80156d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	4a0c      	ldr	r2, [pc, #48]	; (8015704 <ip_reass_dequeue_datagram+0x4c>)
 80156d2:	6013      	str	r3, [r2, #0]
 80156d4:	e00d      	b.n	80156f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d106      	bne.n	80156ea <ip_reass_dequeue_datagram+0x32>
 80156dc:	4b0a      	ldr	r3, [pc, #40]	; (8015708 <ip_reass_dequeue_datagram+0x50>)
 80156de:	f240 1245 	movw	r2, #325	; 0x145
 80156e2:	490a      	ldr	r1, [pc, #40]	; (801570c <ip_reass_dequeue_datagram+0x54>)
 80156e4:	480a      	ldr	r0, [pc, #40]	; (8015710 <ip_reass_dequeue_datagram+0x58>)
 80156e6:	f001 f93b 	bl	8016960 <iprintf>
    prev->next = ipr->next;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	681a      	ldr	r2, [r3, #0]
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80156f2:	6879      	ldr	r1, [r7, #4]
 80156f4:	2003      	movs	r0, #3
 80156f6:	f7f6 ff21 	bl	800c53c <memp_free>
}
 80156fa:	bf00      	nop
 80156fc:	3708      	adds	r7, #8
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	20011c98 	.word	0x20011c98
 8015708:	0801c8ac 	.word	0x0801c8ac
 801570c:	0801c974 	.word	0x0801c974
 8015710:	0801c8f4 	.word	0x0801c8f4

08015714 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b08c      	sub	sp, #48	; 0x30
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015720:	2300      	movs	r3, #0
 8015722:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015724:	2301      	movs	r3, #1
 8015726:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	885b      	ldrh	r3, [r3, #2]
 8015732:	b29b      	uxth	r3, r3
 8015734:	4618      	mov	r0, r3
 8015736:	f7f6 f89b 	bl	800b870 <lwip_htons>
 801573a:	4603      	mov	r3, r0
 801573c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	f003 030f 	and.w	r3, r3, #15
 8015746:	b2db      	uxtb	r3, r3
 8015748:	009b      	lsls	r3, r3, #2
 801574a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801574c:	7e7b      	ldrb	r3, [r7, #25]
 801574e:	b29b      	uxth	r3, r3
 8015750:	8b7a      	ldrh	r2, [r7, #26]
 8015752:	429a      	cmp	r2, r3
 8015754:	d202      	bcs.n	801575c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801575a:	e135      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801575c:	7e7b      	ldrb	r3, [r7, #25]
 801575e:	b29b      	uxth	r3, r3
 8015760:	8b7a      	ldrh	r2, [r7, #26]
 8015762:	1ad3      	subs	r3, r2, r3
 8015764:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015766:	69fb      	ldr	r3, [r7, #28]
 8015768:	88db      	ldrh	r3, [r3, #6]
 801576a:	b29b      	uxth	r3, r3
 801576c:	4618      	mov	r0, r3
 801576e:	f7f6 f87f 	bl	800b870 <lwip_htons>
 8015772:	4603      	mov	r3, r0
 8015774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015778:	b29b      	uxth	r3, r3
 801577a:	00db      	lsls	r3, r3, #3
 801577c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015786:	2200      	movs	r2, #0
 8015788:	701a      	strb	r2, [r3, #0]
 801578a:	2200      	movs	r2, #0
 801578c:	705a      	strb	r2, [r3, #1]
 801578e:	2200      	movs	r2, #0
 8015790:	709a      	strb	r2, [r3, #2]
 8015792:	2200      	movs	r2, #0
 8015794:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015798:	8afa      	ldrh	r2, [r7, #22]
 801579a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801579c:	8afa      	ldrh	r2, [r7, #22]
 801579e:	8b7b      	ldrh	r3, [r7, #26]
 80157a0:	4413      	add	r3, r2
 80157a2:	b29a      	uxth	r2, r3
 80157a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80157a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157aa:	88db      	ldrh	r3, [r3, #6]
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	8afa      	ldrh	r2, [r7, #22]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d902      	bls.n	80157ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157b8:	e106      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	685b      	ldr	r3, [r3, #4]
 80157be:	627b      	str	r3, [r7, #36]	; 0x24
 80157c0:	e068      	b.n	8015894 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80157c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c4:	685b      	ldr	r3, [r3, #4]
 80157c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80157c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ca:	889b      	ldrh	r3, [r3, #4]
 80157cc:	b29a      	uxth	r2, r3
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	889b      	ldrh	r3, [r3, #4]
 80157d2:	b29b      	uxth	r3, r3
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d235      	bcs.n	8015844 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80157d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80157de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d020      	beq.n	8015826 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80157e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e6:	889b      	ldrh	r3, [r3, #4]
 80157e8:	b29a      	uxth	r2, r3
 80157ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ec:	88db      	ldrh	r3, [r3, #6]
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d307      	bcc.n	8015804 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80157f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f6:	88db      	ldrh	r3, [r3, #6]
 80157f8:	b29a      	uxth	r2, r3
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	889b      	ldrh	r3, [r3, #4]
 80157fe:	b29b      	uxth	r3, r3
 8015800:	429a      	cmp	r2, r3
 8015802:	d902      	bls.n	801580a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015808:	e0de      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580c:	68ba      	ldr	r2, [r7, #8]
 801580e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015812:	88db      	ldrh	r3, [r3, #6]
 8015814:	b29a      	uxth	r2, r3
 8015816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015818:	889b      	ldrh	r3, [r3, #4]
 801581a:	b29b      	uxth	r3, r3
 801581c:	429a      	cmp	r2, r3
 801581e:	d03d      	beq.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015820:	2300      	movs	r3, #0
 8015822:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015824:	e03a      	b.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015828:	88db      	ldrh	r3, [r3, #6]
 801582a:	b29a      	uxth	r2, r3
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	889b      	ldrh	r3, [r3, #4]
 8015830:	b29b      	uxth	r3, r3
 8015832:	429a      	cmp	r2, r3
 8015834:	d902      	bls.n	801583c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801583a:	e0c5      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	68ba      	ldr	r2, [r7, #8]
 8015840:	605a      	str	r2, [r3, #4]
      break;
 8015842:	e02b      	b.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015846:	889b      	ldrh	r3, [r3, #4]
 8015848:	b29a      	uxth	r2, r3
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	889b      	ldrh	r3, [r3, #4]
 801584e:	b29b      	uxth	r3, r3
 8015850:	429a      	cmp	r2, r3
 8015852:	d102      	bne.n	801585a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015858:	e0b6      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585c:	889b      	ldrh	r3, [r3, #4]
 801585e:	b29a      	uxth	r2, r3
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	88db      	ldrh	r3, [r3, #6]
 8015864:	b29b      	uxth	r3, r3
 8015866:	429a      	cmp	r2, r3
 8015868:	d202      	bcs.n	8015870 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801586a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801586e:	e0ab      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	2b00      	cmp	r3, #0
 8015874:	d009      	beq.n	801588a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015878:	88db      	ldrh	r3, [r3, #6]
 801587a:	b29a      	uxth	r2, r3
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	889b      	ldrh	r3, [r3, #4]
 8015880:	b29b      	uxth	r3, r3
 8015882:	429a      	cmp	r2, r3
 8015884:	d001      	beq.n	801588a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015886:	2300      	movs	r3, #0
 8015888:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801588a:	693b      	ldr	r3, [r7, #16]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015890:	693b      	ldr	r3, [r7, #16]
 8015892:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015896:	2b00      	cmp	r3, #0
 8015898:	d193      	bne.n	80157c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801589a:	e000      	b.n	801589e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801589c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d12d      	bne.n	8015900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80158a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d01c      	beq.n	80158e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80158aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ac:	88db      	ldrh	r3, [r3, #6]
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b2:	889b      	ldrh	r3, [r3, #4]
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d906      	bls.n	80158c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80158ba:	4b45      	ldr	r3, [pc, #276]	; (80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158bc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80158c0:	4944      	ldr	r1, [pc, #272]	; (80159d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80158c2:	4845      	ldr	r0, [pc, #276]	; (80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158c4:	f001 f84c 	bl	8016960 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80158c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ca:	68ba      	ldr	r2, [r7, #8]
 80158cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80158ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d0:	88db      	ldrh	r3, [r3, #6]
 80158d2:	b29a      	uxth	r2, r3
 80158d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d6:	889b      	ldrh	r3, [r3, #4]
 80158d8:	b29b      	uxth	r3, r3
 80158da:	429a      	cmp	r2, r3
 80158dc:	d010      	beq.n	8015900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80158de:	2300      	movs	r3, #0
 80158e0:	623b      	str	r3, [r7, #32]
 80158e2:	e00d      	b.n	8015900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d006      	beq.n	80158fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80158ec:	4b38      	ldr	r3, [pc, #224]	; (80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158ee:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80158f2:	493a      	ldr	r1, [pc, #232]	; (80159dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80158f4:	4838      	ldr	r0, [pc, #224]	; (80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158f6:	f001 f833 	bl	8016960 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	68ba      	ldr	r2, [r7, #8]
 80158fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d105      	bne.n	8015912 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	7f9b      	ldrb	r3, [r3, #30]
 801590a:	f003 0301 	and.w	r3, r3, #1
 801590e:	2b00      	cmp	r3, #0
 8015910:	d059      	beq.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015912:	6a3b      	ldr	r3, [r7, #32]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d04f      	beq.n	80159b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d006      	beq.n	801592e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	685b      	ldr	r3, [r3, #4]
 8015926:	889b      	ldrh	r3, [r3, #4]
 8015928:	b29b      	uxth	r3, r3
 801592a:	2b00      	cmp	r3, #0
 801592c:	d002      	beq.n	8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801592e:	2300      	movs	r3, #0
 8015930:	623b      	str	r3, [r7, #32]
 8015932:	e041      	b.n	80159b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015936:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801593e:	e012      	b.n	8015966 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015948:	88db      	ldrh	r3, [r3, #6]
 801594a:	b29a      	uxth	r2, r3
 801594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801594e:	889b      	ldrh	r3, [r3, #4]
 8015950:	b29b      	uxth	r3, r3
 8015952:	429a      	cmp	r2, r3
 8015954:	d002      	beq.n	801595c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015956:	2300      	movs	r3, #0
 8015958:	623b      	str	r3, [r7, #32]
            break;
 801595a:	e007      	b.n	801596c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015968:	2b00      	cmp	r3, #0
 801596a:	d1e9      	bne.n	8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801596c:	6a3b      	ldr	r3, [r7, #32]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d022      	beq.n	80159b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d106      	bne.n	8015988 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801597a:	4b15      	ldr	r3, [pc, #84]	; (80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801597c:	f240 12df 	movw	r2, #479	; 0x1df
 8015980:	4917      	ldr	r1, [pc, #92]	; (80159e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015982:	4815      	ldr	r0, [pc, #84]	; (80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015984:	f000 ffec 	bl	8016960 <iprintf>
          LWIP_ASSERT("sanity check",
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015990:	429a      	cmp	r2, r3
 8015992:	d106      	bne.n	80159a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015994:	4b0e      	ldr	r3, [pc, #56]	; (80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015996:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801599a:	4911      	ldr	r1, [pc, #68]	; (80159e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801599c:	480e      	ldr	r0, [pc, #56]	; (80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801599e:	f000 ffdf 	bl	8016960 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80159a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d006      	beq.n	80159b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80159aa:	4b09      	ldr	r3, [pc, #36]	; (80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159ac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80159b0:	490c      	ldr	r1, [pc, #48]	; (80159e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80159b2:	4809      	ldr	r0, [pc, #36]	; (80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159b4:	f000 ffd4 	bl	8016960 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80159b8:	6a3b      	ldr	r3, [r7, #32]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	bf14      	ite	ne
 80159be:	2301      	movne	r3, #1
 80159c0:	2300      	moveq	r3, #0
 80159c2:	b2db      	uxtb	r3, r3
 80159c4:	e000      	b.n	80159c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80159c6:	2300      	movs	r3, #0
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3730      	adds	r7, #48	; 0x30
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	0801c8ac 	.word	0x0801c8ac
 80159d4:	0801c990 	.word	0x0801c990
 80159d8:	0801c8f4 	.word	0x0801c8f4
 80159dc:	0801c9b0 	.word	0x0801c9b0
 80159e0:	0801c9e8 	.word	0x0801c9e8
 80159e4:	0801c9f8 	.word	0x0801c9f8

080159e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b08e      	sub	sp, #56	; 0x38
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80159f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	f003 030f 	and.w	r3, r3, #15
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	2b14      	cmp	r3, #20
 8015a06:	f040 8171 	bne.w	8015cec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0c:	88db      	ldrh	r3, [r3, #6]
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7f5 ff2d 	bl	800b870 <lwip_htons>
 8015a16:	4603      	mov	r3, r0
 8015a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	00db      	lsls	r3, r3, #3
 8015a20:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a24:	885b      	ldrh	r3, [r3, #2]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7f5 ff21 	bl	800b870 <lwip_htons>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	f003 030f 	and.w	r3, r3, #15
 8015a3a:	b2db      	uxtb	r3, r3
 8015a3c:	009b      	lsls	r3, r3, #2
 8015a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	f0c0 8150 	bcc.w	8015cf0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f7f7 fc9b 	bl	800d398 <pbuf_clen>
 8015a62:	4603      	mov	r3, r0
 8015a64:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015a66:	4b8c      	ldr	r3, [pc, #560]	; (8015c98 <ip4_reass+0x2b0>)
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	8c3b      	ldrh	r3, [r7, #32]
 8015a6e:	4413      	add	r3, r2
 8015a70:	2b0a      	cmp	r3, #10
 8015a72:	dd10      	ble.n	8015a96 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015a74:	8c3b      	ldrh	r3, [r7, #32]
 8015a76:	4619      	mov	r1, r3
 8015a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a7a:	f7ff fd81 	bl	8015580 <ip_reass_remove_oldest_datagram>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	f000 8137 	beq.w	8015cf4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015a86:	4b84      	ldr	r3, [pc, #528]	; (8015c98 <ip4_reass+0x2b0>)
 8015a88:	881b      	ldrh	r3, [r3, #0]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	8c3b      	ldrh	r3, [r7, #32]
 8015a8e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015a90:	2b0a      	cmp	r3, #10
 8015a92:	f300 812f 	bgt.w	8015cf4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015a96:	4b81      	ldr	r3, [pc, #516]	; (8015c9c <ip4_reass+0x2b4>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8015a9c:	e015      	b.n	8015aca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa0:	695a      	ldr	r2, [r3, #20]
 8015aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa4:	68db      	ldr	r3, [r3, #12]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d10c      	bne.n	8015ac4 <ip4_reass+0xdc>
 8015aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aac:	699a      	ldr	r2, [r3, #24]
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	691b      	ldr	r3, [r3, #16]
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d106      	bne.n	8015ac4 <ip4_reass+0xdc>
 8015ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab8:	899a      	ldrh	r2, [r3, #12]
 8015aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015abc:	889b      	ldrh	r3, [r3, #4]
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d006      	beq.n	8015ad2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8015aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d1e6      	bne.n	8015a9e <ip4_reass+0xb6>
 8015ad0:	e000      	b.n	8015ad4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015ad2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d109      	bne.n	8015aee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015ada:	8c3b      	ldrh	r3, [r7, #32]
 8015adc:	4619      	mov	r1, r3
 8015ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ae0:	f7ff fdb0 	bl	8015644 <ip_reass_enqueue_new_datagram>
 8015ae4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d11c      	bne.n	8015b26 <ip4_reass+0x13e>
      goto nullreturn;
 8015aec:	e105      	b.n	8015cfa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af0:	88db      	ldrh	r3, [r3, #6]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f5 febb 	bl	800b870 <lwip_htons>
 8015afa:	4603      	mov	r3, r0
 8015afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d110      	bne.n	8015b26 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b06:	89db      	ldrh	r3, [r3, #14]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7f5 feb1 	bl	800b870 <lwip_htons>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d006      	beq.n	8015b26 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1a:	3308      	adds	r3, #8
 8015b1c:	2214      	movs	r2, #20
 8015b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b20:	4618      	mov	r0, r3
 8015b22:	f000 fe58 	bl	80167d6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	88db      	ldrh	r3, [r3, #6]
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	f003 0320 	and.w	r3, r3, #32
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	bf0c      	ite	eq
 8015b34:	2301      	moveq	r3, #1
 8015b36:	2300      	movne	r3, #0
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00e      	beq.n	8015b60 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015b42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b46:	4413      	add	r3, r2
 8015b48:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015b4a:	8b7a      	ldrh	r2, [r7, #26]
 8015b4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	f0c0 80a0 	bcc.w	8015c94 <ip4_reass+0x2ac>
 8015b54:	8b7b      	ldrh	r3, [r7, #26]
 8015b56:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	f200 809a 	bhi.w	8015c94 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015b60:	69fa      	ldr	r2, [r7, #28]
 8015b62:	6879      	ldr	r1, [r7, #4]
 8015b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b66:	f7ff fdd5 	bl	8015714 <ip_reass_chain_frag_into_datagram_and_validate>
 8015b6a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b72:	f000 809b 	beq.w	8015cac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015b76:	4b48      	ldr	r3, [pc, #288]	; (8015c98 <ip4_reass+0x2b0>)
 8015b78:	881a      	ldrh	r2, [r3, #0]
 8015b7a:	8c3b      	ldrh	r3, [r7, #32]
 8015b7c:	4413      	add	r3, r2
 8015b7e:	b29a      	uxth	r2, r3
 8015b80:	4b45      	ldr	r3, [pc, #276]	; (8015c98 <ip4_reass+0x2b0>)
 8015b82:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d00d      	beq.n	8015ba6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015b8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b8e:	4413      	add	r3, r2
 8015b90:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b94:	8a7a      	ldrh	r2, [r7, #18]
 8015b96:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9a:	7f9b      	ldrb	r3, [r3, #30]
 8015b9c:	f043 0301 	orr.w	r3, r3, #1
 8015ba0:	b2da      	uxtb	r2, r3
 8015ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	2b01      	cmp	r3, #1
 8015baa:	d171      	bne.n	8015c90 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bae:	8b9b      	ldrh	r3, [r3, #28]
 8015bb0:	3314      	adds	r3, #20
 8015bb2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	685b      	ldr	r3, [r3, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc8:	3308      	adds	r3, #8
 8015bca:	2214      	movs	r2, #20
 8015bcc:	4619      	mov	r1, r3
 8015bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bd0:	f000 fe01 	bl	80167d6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015bd4:	8a3b      	ldrh	r3, [r7, #16]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7f5 fe4a 	bl	800b870 <lwip_htons>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	461a      	mov	r2, r3
 8015be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be6:	2200      	movs	r2, #0
 8015be8:	719a      	strb	r2, [r3, #6]
 8015bea:	2200      	movs	r2, #0
 8015bec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	729a      	strb	r2, [r3, #10]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfa:	685b      	ldr	r3, [r3, #4]
 8015bfc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015bfe:	e00d      	b.n	8015c1c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015c06:	2114      	movs	r1, #20
 8015c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015c0a:	f7f7 fab1 	bl	800d170 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015c0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7f7 fc01 	bl	800d418 <pbuf_cat>
      r = iprh->next_pbuf;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d1ee      	bne.n	8015c00 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015c22:	4b1e      	ldr	r3, [pc, #120]	; (8015c9c <ip4_reass+0x2b4>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d102      	bne.n	8015c32 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c30:	e010      	b.n	8015c54 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015c32:	4b1a      	ldr	r3, [pc, #104]	; (8015c9c <ip4_reass+0x2b4>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c38:	e007      	b.n	8015c4a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c40:	429a      	cmp	r2, r3
 8015c42:	d006      	beq.n	8015c52 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d1f4      	bne.n	8015c3a <ip4_reass+0x252>
 8015c50:	e000      	b.n	8015c54 <ip4_reass+0x26c>
          break;
 8015c52:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c58:	f7ff fd2e 	bl	80156b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7f7 fb9b 	bl	800d398 <pbuf_clen>
 8015c62:	4603      	mov	r3, r0
 8015c64:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015c66:	4b0c      	ldr	r3, [pc, #48]	; (8015c98 <ip4_reass+0x2b0>)
 8015c68:	881b      	ldrh	r3, [r3, #0]
 8015c6a:	8c3a      	ldrh	r2, [r7, #32]
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d906      	bls.n	8015c7e <ip4_reass+0x296>
 8015c70:	4b0b      	ldr	r3, [pc, #44]	; (8015ca0 <ip4_reass+0x2b8>)
 8015c72:	f240 229b 	movw	r2, #667	; 0x29b
 8015c76:	490b      	ldr	r1, [pc, #44]	; (8015ca4 <ip4_reass+0x2bc>)
 8015c78:	480b      	ldr	r0, [pc, #44]	; (8015ca8 <ip4_reass+0x2c0>)
 8015c7a:	f000 fe71 	bl	8016960 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015c7e:	4b06      	ldr	r3, [pc, #24]	; (8015c98 <ip4_reass+0x2b0>)
 8015c80:	881a      	ldrh	r2, [r3, #0]
 8015c82:	8c3b      	ldrh	r3, [r7, #32]
 8015c84:	1ad3      	subs	r3, r2, r3
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	4b03      	ldr	r3, [pc, #12]	; (8015c98 <ip4_reass+0x2b0>)
 8015c8a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	e038      	b.n	8015d02 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015c90:	2300      	movs	r3, #0
 8015c92:	e036      	b.n	8015d02 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015c94:	bf00      	nop
 8015c96:	e00a      	b.n	8015cae <ip4_reass+0x2c6>
 8015c98:	20011c9c 	.word	0x20011c9c
 8015c9c:	20011c98 	.word	0x20011c98
 8015ca0:	0801c8ac 	.word	0x0801c8ac
 8015ca4:	0801ca1c 	.word	0x0801ca1c
 8015ca8:	0801c8f4 	.word	0x0801c8f4
    goto nullreturn_ipr;
 8015cac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d106      	bne.n	8015cc2 <ip4_reass+0x2da>
 8015cb4:	4b15      	ldr	r3, [pc, #84]	; (8015d0c <ip4_reass+0x324>)
 8015cb6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015cba:	4915      	ldr	r1, [pc, #84]	; (8015d10 <ip4_reass+0x328>)
 8015cbc:	4815      	ldr	r0, [pc, #84]	; (8015d14 <ip4_reass+0x32c>)
 8015cbe:	f000 fe4f 	bl	8016960 <iprintf>
  if (ipr->p == NULL) {
 8015cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d116      	bne.n	8015cf8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015cca:	4b13      	ldr	r3, [pc, #76]	; (8015d18 <ip4_reass+0x330>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d006      	beq.n	8015ce2 <ip4_reass+0x2fa>
 8015cd4:	4b0d      	ldr	r3, [pc, #52]	; (8015d0c <ip4_reass+0x324>)
 8015cd6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015cda:	4910      	ldr	r1, [pc, #64]	; (8015d1c <ip4_reass+0x334>)
 8015cdc:	480d      	ldr	r0, [pc, #52]	; (8015d14 <ip4_reass+0x32c>)
 8015cde:	f000 fe3f 	bl	8016960 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce6:	f7ff fce7 	bl	80156b8 <ip_reass_dequeue_datagram>
 8015cea:	e006      	b.n	8015cfa <ip4_reass+0x312>
    goto nullreturn;
 8015cec:	bf00      	nop
 8015cee:	e004      	b.n	8015cfa <ip4_reass+0x312>
    goto nullreturn;
 8015cf0:	bf00      	nop
 8015cf2:	e002      	b.n	8015cfa <ip4_reass+0x312>
      goto nullreturn;
 8015cf4:	bf00      	nop
 8015cf6:	e000      	b.n	8015cfa <ip4_reass+0x312>
  }

nullreturn:
 8015cf8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f7f7 fabe 	bl	800d27c <pbuf_free>
  return NULL;
 8015d00:	2300      	movs	r3, #0
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3738      	adds	r7, #56	; 0x38
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	0801c8ac 	.word	0x0801c8ac
 8015d10:	0801ca38 	.word	0x0801ca38
 8015d14:	0801c8f4 	.word	0x0801c8f4
 8015d18:	20011c98 	.word	0x20011c98
 8015d1c:	0801ca44 	.word	0x0801ca44

08015d20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015d24:	2004      	movs	r0, #4
 8015d26:	f7f6 fb93 	bl	800c450 <memp_malloc>
 8015d2a:	4603      	mov	r3, r0
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	bd80      	pop	{r7, pc}

08015d30 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b082      	sub	sp, #8
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d106      	bne.n	8015d4c <ip_frag_free_pbuf_custom_ref+0x1c>
 8015d3e:	4b07      	ldr	r3, [pc, #28]	; (8015d5c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015d40:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015d44:	4906      	ldr	r1, [pc, #24]	; (8015d60 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015d46:	4807      	ldr	r0, [pc, #28]	; (8015d64 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015d48:	f000 fe0a 	bl	8016960 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015d4c:	6879      	ldr	r1, [r7, #4]
 8015d4e:	2004      	movs	r0, #4
 8015d50:	f7f6 fbf4 	bl	800c53c <memp_free>
}
 8015d54:	bf00      	nop
 8015d56:	3708      	adds	r7, #8
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	0801c8ac 	.word	0x0801c8ac
 8015d60:	0801ca64 	.word	0x0801ca64
 8015d64:	0801c8f4 	.word	0x0801c8f4

08015d68 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b084      	sub	sp, #16
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d106      	bne.n	8015d88 <ipfrag_free_pbuf_custom+0x20>
 8015d7a:	4b11      	ldr	r3, [pc, #68]	; (8015dc0 <ipfrag_free_pbuf_custom+0x58>)
 8015d7c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015d80:	4910      	ldr	r1, [pc, #64]	; (8015dc4 <ipfrag_free_pbuf_custom+0x5c>)
 8015d82:	4811      	ldr	r0, [pc, #68]	; (8015dc8 <ipfrag_free_pbuf_custom+0x60>)
 8015d84:	f000 fdec 	bl	8016960 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015d88:	68fa      	ldr	r2, [r7, #12]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d006      	beq.n	8015d9e <ipfrag_free_pbuf_custom+0x36>
 8015d90:	4b0b      	ldr	r3, [pc, #44]	; (8015dc0 <ipfrag_free_pbuf_custom+0x58>)
 8015d92:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015d96:	490d      	ldr	r1, [pc, #52]	; (8015dcc <ipfrag_free_pbuf_custom+0x64>)
 8015d98:	480b      	ldr	r0, [pc, #44]	; (8015dc8 <ipfrag_free_pbuf_custom+0x60>)
 8015d9a:	f000 fde1 	bl	8016960 <iprintf>
  if (pcr->original != NULL) {
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	695b      	ldr	r3, [r3, #20]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d004      	beq.n	8015db0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	695b      	ldr	r3, [r3, #20]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7f7 fa66 	bl	800d27c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015db0:	68f8      	ldr	r0, [r7, #12]
 8015db2:	f7ff ffbd 	bl	8015d30 <ip_frag_free_pbuf_custom_ref>
}
 8015db6:	bf00      	nop
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	0801c8ac 	.word	0x0801c8ac
 8015dc4:	0801ca70 	.word	0x0801ca70
 8015dc8:	0801c8f4 	.word	0x0801c8f4
 8015dcc:	0801ca7c 	.word	0x0801ca7c

08015dd0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b094      	sub	sp, #80	; 0x50
 8015dd4:	af02      	add	r7, sp, #8
 8015dd6:	60f8      	str	r0, [r7, #12]
 8015dd8:	60b9      	str	r1, [r7, #8]
 8015dda:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015de6:	3b14      	subs	r3, #20
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	da00      	bge.n	8015dee <ip4_frag+0x1e>
 8015dec:	3307      	adds	r3, #7
 8015dee:	10db      	asrs	r3, r3, #3
 8015df0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015df2:	2314      	movs	r3, #20
 8015df4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e02:	781b      	ldrb	r3, [r3, #0]
 8015e04:	f003 030f 	and.w	r3, r3, #15
 8015e08:	b2db      	uxtb	r3, r3
 8015e0a:	009b      	lsls	r3, r3, #2
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	2b14      	cmp	r3, #20
 8015e10:	d002      	beq.n	8015e18 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015e12:	f06f 0305 	mvn.w	r3, #5
 8015e16:	e110      	b.n	801603a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	895b      	ldrh	r3, [r3, #10]
 8015e1c:	2b13      	cmp	r3, #19
 8015e1e:	d809      	bhi.n	8015e34 <ip4_frag+0x64>
 8015e20:	4b88      	ldr	r3, [pc, #544]	; (8016044 <ip4_frag+0x274>)
 8015e22:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015e26:	4988      	ldr	r1, [pc, #544]	; (8016048 <ip4_frag+0x278>)
 8015e28:	4888      	ldr	r0, [pc, #544]	; (801604c <ip4_frag+0x27c>)
 8015e2a:	f000 fd99 	bl	8016960 <iprintf>
 8015e2e:	f06f 0305 	mvn.w	r3, #5
 8015e32:	e102      	b.n	801603a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e36:	88db      	ldrh	r3, [r3, #6]
 8015e38:	b29b      	uxth	r3, r3
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7f5 fd18 	bl	800b870 <lwip_htons>
 8015e40:	4603      	mov	r3, r0
 8015e42:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015e44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015e54:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	891b      	ldrh	r3, [r3, #8]
 8015e5a:	3b14      	subs	r3, #20
 8015e5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015e60:	e0e1      	b.n	8016026 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015e62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e64:	00db      	lsls	r3, r3, #3
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	bf28      	it	cs
 8015e70:	4613      	movcs	r3, r2
 8015e72:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015e74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e78:	2114      	movs	r1, #20
 8015e7a:	200e      	movs	r0, #14
 8015e7c:	f7f6 ff1a 	bl	800ccb4 <pbuf_alloc>
 8015e80:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	f000 80d5 	beq.w	8016034 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8c:	895b      	ldrh	r3, [r3, #10]
 8015e8e:	2b13      	cmp	r3, #19
 8015e90:	d806      	bhi.n	8015ea0 <ip4_frag+0xd0>
 8015e92:	4b6c      	ldr	r3, [pc, #432]	; (8016044 <ip4_frag+0x274>)
 8015e94:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015e98:	496d      	ldr	r1, [pc, #436]	; (8016050 <ip4_frag+0x280>)
 8015e9a:	486c      	ldr	r0, [pc, #432]	; (801604c <ip4_frag+0x27c>)
 8015e9c:	f000 fd60 	bl	8016960 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	2214      	movs	r2, #20
 8015ea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f000 fc94 	bl	80167d6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015eb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015eb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015eba:	e064      	b.n	8015f86 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	895a      	ldrh	r2, [r3, #10]
 8015ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015ec2:	1ad3      	subs	r3, r2, r3
 8015ec4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	895b      	ldrh	r3, [r3, #10]
 8015eca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d906      	bls.n	8015ede <ip4_frag+0x10e>
 8015ed0:	4b5c      	ldr	r3, [pc, #368]	; (8016044 <ip4_frag+0x274>)
 8015ed2:	f240 322d 	movw	r2, #813	; 0x32d
 8015ed6:	495f      	ldr	r1, [pc, #380]	; (8016054 <ip4_frag+0x284>)
 8015ed8:	485c      	ldr	r0, [pc, #368]	; (801604c <ip4_frag+0x27c>)
 8015eda:	f000 fd41 	bl	8016960 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015ede:	8bfa      	ldrh	r2, [r7, #30]
 8015ee0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	bf28      	it	cs
 8015ee8:	4613      	movcs	r3, r2
 8015eea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015eee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d105      	bne.n	8015f02 <ip4_frag+0x132>
        poff = 0;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	60fb      	str	r3, [r7, #12]
        continue;
 8015f00:	e041      	b.n	8015f86 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015f02:	f7ff ff0d 	bl	8015d20 <ip_frag_alloc_pbuf_custom_ref>
 8015f06:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d103      	bne.n	8015f16 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f10:	f7f7 f9b4 	bl	800d27c <pbuf_free>
        goto memerr;
 8015f14:	e08f      	b.n	8016036 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f16:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f1e:	4413      	add	r3, r2
 8015f20:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015f24:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015f28:	9201      	str	r2, [sp, #4]
 8015f2a:	9300      	str	r3, [sp, #0]
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2241      	movs	r2, #65	; 0x41
 8015f30:	2000      	movs	r0, #0
 8015f32:	f7f6 ffe9 	bl	800cf08 <pbuf_alloced_custom>
 8015f36:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d106      	bne.n	8015f4c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015f3e:	69b8      	ldr	r0, [r7, #24]
 8015f40:	f7ff fef6 	bl	8015d30 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f46:	f7f7 f999 	bl	800d27c <pbuf_free>
        goto memerr;
 8015f4a:	e074      	b.n	8016036 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f7f7 fa3b 	bl	800d3c8 <pbuf_ref>
      pcr->original = p;
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	68fa      	ldr	r2, [r7, #12]
 8015f56:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015f58:	69bb      	ldr	r3, [r7, #24]
 8015f5a:	4a3f      	ldr	r2, [pc, #252]	; (8016058 <ip4_frag+0x288>)
 8015f5c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015f5e:	6979      	ldr	r1, [r7, #20]
 8015f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f62:	f7f7 fa59 	bl	800d418 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015f66:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015f6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f6e:	1ad3      	subs	r3, r2, r3
 8015f70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d004      	beq.n	8015f86 <ip4_frag+0x1b6>
        poff = 0;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015f86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d196      	bne.n	8015ebc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015f8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f94:	4413      	add	r3, r2
 8015f96:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015f9c:	f1a3 0213 	sub.w	r2, r3, #19
 8015fa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	bfcc      	ite	gt
 8015fa8:	2301      	movgt	r3, #1
 8015faa:	2300      	movle	r3, #0
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015fba:	6a3b      	ldr	r3, [r7, #32]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d002      	beq.n	8015fc6 <ip4_frag+0x1f6>
 8015fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d003      	beq.n	8015fce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015fc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015fcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015fce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f5 fc4d 	bl	800b870 <lwip_htons>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	461a      	mov	r2, r3
 8015fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fdc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015fde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fe0:	3314      	adds	r3, #20
 8015fe2:	b29b      	uxth	r3, r3
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7f5 fc43 	bl	800b870 <lwip_htons>
 8015fea:	4603      	mov	r3, r0
 8015fec:	461a      	mov	r2, r3
 8015fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	729a      	strb	r2, [r3, #10]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	695b      	ldr	r3, [r3, #20]
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016004:	68b8      	ldr	r0, [r7, #8]
 8016006:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801600a:	f7f7 f937 	bl	800d27c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801600e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801601a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801601e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016020:	4413      	add	r3, r2
 8016022:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016026:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801602a:	2b00      	cmp	r3, #0
 801602c:	f47f af19 	bne.w	8015e62 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016030:	2300      	movs	r3, #0
 8016032:	e002      	b.n	801603a <ip4_frag+0x26a>
      goto memerr;
 8016034:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801603a:	4618      	mov	r0, r3
 801603c:	3748      	adds	r7, #72	; 0x48
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	0801c8ac 	.word	0x0801c8ac
 8016048:	0801ca88 	.word	0x0801ca88
 801604c:	0801c8f4 	.word	0x0801c8f4
 8016050:	0801caa4 	.word	0x0801caa4
 8016054:	0801cac4 	.word	0x0801cac4
 8016058:	08015d69 	.word	0x08015d69

0801605c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b086      	sub	sp, #24
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016066:	230e      	movs	r3, #14
 8016068:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	895b      	ldrh	r3, [r3, #10]
 801606e:	2b0e      	cmp	r3, #14
 8016070:	d96e      	bls.n	8016150 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	7bdb      	ldrb	r3, [r3, #15]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d106      	bne.n	8016088 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016080:	3301      	adds	r3, #1
 8016082:	b2da      	uxtb	r2, r3
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	685b      	ldr	r3, [r3, #4]
 801608c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	7b1a      	ldrb	r2, [r3, #12]
 8016092:	7b5b      	ldrb	r3, [r3, #13]
 8016094:	021b      	lsls	r3, r3, #8
 8016096:	4313      	orrs	r3, r2
 8016098:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	f003 0301 	and.w	r3, r3, #1
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d023      	beq.n	80160ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	d10f      	bne.n	80160ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	785b      	ldrb	r3, [r3, #1]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d11b      	bne.n	80160ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80160ba:	2b5e      	cmp	r3, #94	; 0x5e
 80160bc:	d117      	bne.n	80160ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	7b5b      	ldrb	r3, [r3, #13]
 80160c2:	f043 0310 	orr.w	r3, r3, #16
 80160c6:	b2da      	uxtb	r2, r3
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	735a      	strb	r2, [r3, #13]
 80160cc:	e00f      	b.n	80160ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80160ce:	693b      	ldr	r3, [r7, #16]
 80160d0:	2206      	movs	r2, #6
 80160d2:	4928      	ldr	r1, [pc, #160]	; (8016174 <ethernet_input+0x118>)
 80160d4:	4618      	mov	r0, r3
 80160d6:	f000 fb6e 	bl	80167b6 <memcmp>
 80160da:	4603      	mov	r3, r0
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d106      	bne.n	80160ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	7b5b      	ldrb	r3, [r3, #13]
 80160e4:	f043 0308 	orr.w	r3, r3, #8
 80160e8:	b2da      	uxtb	r2, r3
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80160ee:	89fb      	ldrh	r3, [r7, #14]
 80160f0:	2b08      	cmp	r3, #8
 80160f2:	d003      	beq.n	80160fc <ethernet_input+0xa0>
 80160f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80160f8:	d014      	beq.n	8016124 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80160fa:	e032      	b.n	8016162 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016102:	f003 0308 	and.w	r3, r3, #8
 8016106:	2b00      	cmp	r3, #0
 8016108:	d024      	beq.n	8016154 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801610a:	8afb      	ldrh	r3, [r7, #22]
 801610c:	4619      	mov	r1, r3
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f7f7 f82e 	bl	800d170 <pbuf_remove_header>
 8016114:	4603      	mov	r3, r0
 8016116:	2b00      	cmp	r3, #0
 8016118:	d11e      	bne.n	8016158 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801611a:	6839      	ldr	r1, [r7, #0]
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f7fe ff2b 	bl	8014f78 <ip4_input>
      break;
 8016122:	e013      	b.n	801614c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016124:	683b      	ldr	r3, [r7, #0]
 8016126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801612a:	f003 0308 	and.w	r3, r3, #8
 801612e:	2b00      	cmp	r3, #0
 8016130:	d014      	beq.n	801615c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016132:	8afb      	ldrh	r3, [r7, #22]
 8016134:	4619      	mov	r1, r3
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f7f7 f81a 	bl	800d170 <pbuf_remove_header>
 801613c:	4603      	mov	r3, r0
 801613e:	2b00      	cmp	r3, #0
 8016140:	d10e      	bne.n	8016160 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f7fe f8cb 	bl	80142e0 <etharp_input>
      break;
 801614a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801614c:	2300      	movs	r3, #0
 801614e:	e00c      	b.n	801616a <ethernet_input+0x10e>
    goto free_and_return;
 8016150:	bf00      	nop
 8016152:	e006      	b.n	8016162 <ethernet_input+0x106>
        goto free_and_return;
 8016154:	bf00      	nop
 8016156:	e004      	b.n	8016162 <ethernet_input+0x106>
        goto free_and_return;
 8016158:	bf00      	nop
 801615a:	e002      	b.n	8016162 <ethernet_input+0x106>
        goto free_and_return;
 801615c:	bf00      	nop
 801615e:	e000      	b.n	8016162 <ethernet_input+0x106>
        goto free_and_return;
 8016160:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f7f7 f88a 	bl	800d27c <pbuf_free>
  return ERR_OK;
 8016168:	2300      	movs	r3, #0
}
 801616a:	4618      	mov	r0, r3
 801616c:	3718      	adds	r7, #24
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	0801cd00 	.word	0x0801cd00

08016178 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	60f8      	str	r0, [r7, #12]
 8016180:	60b9      	str	r1, [r7, #8]
 8016182:	607a      	str	r2, [r7, #4]
 8016184:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016186:	8c3b      	ldrh	r3, [r7, #32]
 8016188:	4618      	mov	r0, r3
 801618a:	f7f5 fb71 	bl	800b870 <lwip_htons>
 801618e:	4603      	mov	r3, r0
 8016190:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016192:	210e      	movs	r1, #14
 8016194:	68b8      	ldr	r0, [r7, #8]
 8016196:	f7f6 ffdb 	bl	800d150 <pbuf_add_header>
 801619a:	4603      	mov	r3, r0
 801619c:	2b00      	cmp	r3, #0
 801619e:	d125      	bne.n	80161ec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	8afa      	ldrh	r2, [r7, #22]
 80161aa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	2206      	movs	r2, #6
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f000 fb0f 	bl	80167d6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	3306      	adds	r3, #6
 80161bc:	2206      	movs	r2, #6
 80161be:	6879      	ldr	r1, [r7, #4]
 80161c0:	4618      	mov	r0, r3
 80161c2:	f000 fb08 	bl	80167d6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80161cc:	2b06      	cmp	r3, #6
 80161ce:	d006      	beq.n	80161de <ethernet_output+0x66>
 80161d0:	4b0a      	ldr	r3, [pc, #40]	; (80161fc <ethernet_output+0x84>)
 80161d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80161d6:	490a      	ldr	r1, [pc, #40]	; (8016200 <ethernet_output+0x88>)
 80161d8:	480a      	ldr	r0, [pc, #40]	; (8016204 <ethernet_output+0x8c>)
 80161da:	f000 fbc1 	bl	8016960 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	699b      	ldr	r3, [r3, #24]
 80161e2:	68b9      	ldr	r1, [r7, #8]
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	4798      	blx	r3
 80161e8:	4603      	mov	r3, r0
 80161ea:	e002      	b.n	80161f2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80161ec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80161ee:	f06f 0301 	mvn.w	r3, #1
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3718      	adds	r7, #24
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	0801cad4 	.word	0x0801cad4
 8016200:	0801cb0c 	.word	0x0801cb0c
 8016204:	0801cb40 	.word	0x0801cb40

08016208 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	2200      	movs	r2, #0
 8016216:	2104      	movs	r1, #4
 8016218:	4618      	mov	r0, r3
 801621a:	f7ef fdf1 	bl	8005e00 <osMessageQueueNew>
 801621e:	4602      	mov	r2, r0
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d102      	bne.n	8016232 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801622c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016230:	e000      	b.n	8016234 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016232:	2300      	movs	r3, #0
}
 8016234:	4618      	mov	r0, r3
 8016236:	3708      	adds	r7, #8
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}

0801623c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	4618      	mov	r0, r3
 801624a:	f7ef ff45 	bl	80060d8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4618      	mov	r0, r3
 8016254:	f7ef ff72 	bl	800613c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016258:	bf00      	nop
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b084      	sub	sp, #16
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6818      	ldr	r0, [r3, #0]
 801626e:	4639      	mov	r1, r7
 8016270:	2300      	movs	r3, #0
 8016272:	2200      	movs	r2, #0
 8016274:	f7ef fe4a 	bl	8005f0c <osMessageQueuePut>
 8016278:	4603      	mov	r3, r0
 801627a:	2b00      	cmp	r3, #0
 801627c:	d102      	bne.n	8016284 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801627e:	2300      	movs	r3, #0
 8016280:	73fb      	strb	r3, [r7, #15]
 8016282:	e001      	b.n	8016288 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016284:	23ff      	movs	r3, #255	; 0xff
 8016286:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801628c:	4618      	mov	r0, r3
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}

08016294 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b086      	sub	sp, #24
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80162a0:	f7ef f9da 	bl	8005658 <osKernelGetTickCount>
 80162a4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d013      	beq.n	80162d4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	6818      	ldr	r0, [r3, #0]
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2200      	movs	r2, #0
 80162b4:	68b9      	ldr	r1, [r7, #8]
 80162b6:	f7ef fe9d 	bl	8005ff4 <osMessageQueueGet>
 80162ba:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d105      	bne.n	80162ce <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80162c2:	f7ef f9c9 	bl	8005658 <osKernelGetTickCount>
 80162c6:	4602      	mov	r2, r0
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	e00f      	b.n	80162ee <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80162ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162d2:	e00c      	b.n	80162ee <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	6818      	ldr	r0, [r3, #0]
 80162d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162dc:	2200      	movs	r2, #0
 80162de:	68b9      	ldr	r1, [r7, #8]
 80162e0:	f7ef fe88 	bl	8005ff4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80162e4:	f7ef f9b8 	bl	8005658 <osKernelGetTickCount>
 80162e8:	4602      	mov	r2, r0
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3718      	adds	r7, #24
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b082      	sub	sp, #8
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
 80162fe:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	6818      	ldr	r0, [r3, #0]
 8016304:	2300      	movs	r3, #0
 8016306:	2200      	movs	r2, #0
 8016308:	6839      	ldr	r1, [r7, #0]
 801630a:	f7ef fe73 	bl	8005ff4 <osMessageQueueGet>
 801630e:	4603      	mov	r3, r0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d101      	bne.n	8016318 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8016314:	2300      	movs	r3, #0
 8016316:	e001      	b.n	801631c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801631c:	4618      	mov	r0, r3
 801631e:	3708      	adds	r7, #8
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016324:	b480      	push	{r7}
 8016326:	b083      	sub	sp, #12
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d101      	bne.n	8016338 <sys_mbox_valid+0x14>
    return 0;
 8016334:	2300      	movs	r3, #0
 8016336:	e000      	b.n	801633a <sys_mbox_valid+0x16>
  else
    return 1;
 8016338:	2301      	movs	r3, #1
}
 801633a:	4618      	mov	r0, r3
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr

08016346 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016346:	b480      	push	{r7}
 8016348:	b083      	sub	sp, #12
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2200      	movs	r2, #0
 8016352:	601a      	str	r2, [r3, #0]
}
 8016354:	bf00      	nop
 8016356:	370c      	adds	r7, #12
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr

08016360 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	460b      	mov	r3, r1
 801636a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801636c:	78fb      	ldrb	r3, [r7, #3]
 801636e:	2200      	movs	r2, #0
 8016370:	4619      	mov	r1, r3
 8016372:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016376:	f7ef fbb3 	bl	8005ae0 <osSemaphoreNew>
 801637a:	4602      	mov	r2, r0
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d102      	bne.n	801638e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801638c:	e009      	b.n	80163a2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801638e:	78fb      	ldrb	r3, [r7, #3]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d105      	bne.n	80163a0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	2100      	movs	r1, #0
 801639a:	4618      	mov	r0, r3
 801639c:	f7ef fc3c 	bl	8005c18 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80163a0:	2300      	movs	r3, #0
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3708      	adds	r7, #8
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}

080163aa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80163aa:	b580      	push	{r7, lr}
 80163ac:	b084      	sub	sp, #16
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	6078      	str	r0, [r7, #4]
 80163b2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80163b4:	f7ef f950 	bl	8005658 <osKernelGetTickCount>
 80163b8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d011      	beq.n	80163e4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	6839      	ldr	r1, [r7, #0]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7ef fc26 	bl	8005c18 <osSemaphoreAcquire>
 80163cc:	4603      	mov	r3, r0
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d105      	bne.n	80163de <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80163d2:	f7ef f941 	bl	8005658 <osKernelGetTickCount>
 80163d6:	4602      	mov	r2, r0
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	1ad3      	subs	r3, r2, r3
 80163dc:	e012      	b.n	8016404 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80163de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163e2:	e00f      	b.n	8016404 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80163e4:	bf00      	nop
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7ef fc12 	bl	8005c18 <osSemaphoreAcquire>
 80163f4:	4603      	mov	r3, r0
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1f5      	bne.n	80163e6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80163fa:	f7ef f92d 	bl	8005658 <osKernelGetTickCount>
 80163fe:	4602      	mov	r2, r0
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016404:	4618      	mov	r0, r3
 8016406:	3710      	adds	r7, #16
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	4618      	mov	r0, r3
 801641a:	f7ef fc63 	bl	8005ce4 <osSemaphoreRelease>
}
 801641e:	bf00      	nop
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016426:	b580      	push	{r7, lr}
 8016428:	b082      	sub	sp, #8
 801642a:	af00      	add	r7, sp, #0
 801642c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	4618      	mov	r0, r3
 8016434:	f7ef fcae 	bl	8005d94 <osSemaphoreDelete>
}
 8016438:	bf00      	nop
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016440:	b480      	push	{r7}
 8016442:	b083      	sub	sp, #12
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d101      	bne.n	8016454 <sys_sem_valid+0x14>
    return 0;
 8016450:	2300      	movs	r3, #0
 8016452:	e000      	b.n	8016456 <sys_sem_valid+0x16>
  else
    return 1;
 8016454:	2301      	movs	r3, #1
}
 8016456:	4618      	mov	r0, r3
 8016458:	370c      	adds	r7, #12
 801645a:	46bd      	mov	sp, r7
 801645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016460:	4770      	bx	lr

08016462 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016462:	b480      	push	{r7}
 8016464:	b083      	sub	sp, #12
 8016466:	af00      	add	r7, sp, #0
 8016468:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2200      	movs	r2, #0
 801646e:	601a      	str	r2, [r3, #0]
}
 8016470:	bf00      	nop
 8016472:	370c      	adds	r7, #12
 8016474:	46bd      	mov	sp, r7
 8016476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647a:	4770      	bx	lr

0801647c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016480:	2000      	movs	r0, #0
 8016482:	f7ef f9e5 	bl	8005850 <osMutexNew>
 8016486:	4603      	mov	r3, r0
 8016488:	4a01      	ldr	r2, [pc, #4]	; (8016490 <sys_init+0x14>)
 801648a:	6013      	str	r3, [r2, #0]
#endif
}
 801648c:	bf00      	nop
 801648e:	bd80      	pop	{r7, pc}
 8016490:	20011ca0 	.word	0x20011ca0

08016494 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801649c:	2000      	movs	r0, #0
 801649e:	f7ef f9d7 	bl	8005850 <osMutexNew>
 80164a2:	4602      	mov	r2, r0
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d102      	bne.n	80164b6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80164b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164b4:	e000      	b.n	80164b8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3708      	adds	r7, #8
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}

080164c0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7ef fa57 	bl	8005984 <osMutexAcquire>
#endif
}
 80164d6:	bf00      	nop
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b082      	sub	sp, #8
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7ef faa8 	bl	8005a40 <osMutexRelease>
}
 80164f0:	bf00      	nop
 80164f2:	3708      	adds	r7, #8
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b08e      	sub	sp, #56	; 0x38
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	607a      	str	r2, [r7, #4]
 8016504:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016506:	f107 0314 	add.w	r3, r7, #20
 801650a:	2224      	movs	r2, #36	; 0x24
 801650c:	2100      	movs	r1, #0
 801650e:	4618      	mov	r0, r3
 8016510:	f000 f989 	bl	8016826 <memset>
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	617b      	str	r3, [r7, #20]
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	62bb      	str	r3, [r7, #40]	; 0x28
 801651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801651e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016520:	f107 0314 	add.w	r3, r7, #20
 8016524:	461a      	mov	r2, r3
 8016526:	6879      	ldr	r1, [r7, #4]
 8016528:	68b8      	ldr	r0, [r7, #8]
 801652a:	f7ef f8bd 	bl	80056a8 <osThreadNew>
 801652e:	4603      	mov	r3, r0
#endif
}
 8016530:	4618      	mov	r0, r3
 8016532:	3738      	adds	r7, #56	; 0x38
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801653c:	4b04      	ldr	r3, [pc, #16]	; (8016550 <sys_arch_protect+0x18>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016544:	4618      	mov	r0, r3
 8016546:	f7ef fa1d 	bl	8005984 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801654a:	2301      	movs	r3, #1
}
 801654c:	4618      	mov	r0, r3
 801654e:	bd80      	pop	{r7, pc}
 8016550:	20011ca0 	.word	0x20011ca0

08016554 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b082      	sub	sp, #8
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801655c:	4b04      	ldr	r3, [pc, #16]	; (8016570 <sys_arch_unprotect+0x1c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	4618      	mov	r0, r3
 8016562:	f7ef fa6d 	bl	8005a40 <osMutexRelease>
}
 8016566:	bf00      	nop
 8016568:	3708      	adds	r7, #8
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	20011ca0 	.word	0x20011ca0

08016574 <atof>:
 8016574:	2100      	movs	r1, #0
 8016576:	f001 b971 	b.w	801785c <strtod>
	...

0801657c <std>:
 801657c:	2300      	movs	r3, #0
 801657e:	b510      	push	{r4, lr}
 8016580:	4604      	mov	r4, r0
 8016582:	e9c0 3300 	strd	r3, r3, [r0]
 8016586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801658a:	6083      	str	r3, [r0, #8]
 801658c:	8181      	strh	r1, [r0, #12]
 801658e:	6643      	str	r3, [r0, #100]	; 0x64
 8016590:	81c2      	strh	r2, [r0, #14]
 8016592:	6183      	str	r3, [r0, #24]
 8016594:	4619      	mov	r1, r3
 8016596:	2208      	movs	r2, #8
 8016598:	305c      	adds	r0, #92	; 0x5c
 801659a:	f000 f944 	bl	8016826 <memset>
 801659e:	4b05      	ldr	r3, [pc, #20]	; (80165b4 <std+0x38>)
 80165a0:	6263      	str	r3, [r4, #36]	; 0x24
 80165a2:	4b05      	ldr	r3, [pc, #20]	; (80165b8 <std+0x3c>)
 80165a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80165a6:	4b05      	ldr	r3, [pc, #20]	; (80165bc <std+0x40>)
 80165a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80165aa:	4b05      	ldr	r3, [pc, #20]	; (80165c0 <std+0x44>)
 80165ac:	6224      	str	r4, [r4, #32]
 80165ae:	6323      	str	r3, [r4, #48]	; 0x30
 80165b0:	bd10      	pop	{r4, pc}
 80165b2:	bf00      	nop
 80165b4:	08016b41 	.word	0x08016b41
 80165b8:	08016b63 	.word	0x08016b63
 80165bc:	08016b9b 	.word	0x08016b9b
 80165c0:	08016bbf 	.word	0x08016bbf

080165c4 <_cleanup_r>:
 80165c4:	4901      	ldr	r1, [pc, #4]	; (80165cc <_cleanup_r+0x8>)
 80165c6:	f000 b8af 	b.w	8016728 <_fwalk_reent>
 80165ca:	bf00      	nop
 80165cc:	08017ab9 	.word	0x08017ab9

080165d0 <__sfmoreglue>:
 80165d0:	b570      	push	{r4, r5, r6, lr}
 80165d2:	2268      	movs	r2, #104	; 0x68
 80165d4:	1e4d      	subs	r5, r1, #1
 80165d6:	4355      	muls	r5, r2
 80165d8:	460e      	mov	r6, r1
 80165da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80165de:	f000 f94b 	bl	8016878 <_malloc_r>
 80165e2:	4604      	mov	r4, r0
 80165e4:	b140      	cbz	r0, 80165f8 <__sfmoreglue+0x28>
 80165e6:	2100      	movs	r1, #0
 80165e8:	e9c0 1600 	strd	r1, r6, [r0]
 80165ec:	300c      	adds	r0, #12
 80165ee:	60a0      	str	r0, [r4, #8]
 80165f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80165f4:	f000 f917 	bl	8016826 <memset>
 80165f8:	4620      	mov	r0, r4
 80165fa:	bd70      	pop	{r4, r5, r6, pc}

080165fc <__sfp_lock_acquire>:
 80165fc:	4801      	ldr	r0, [pc, #4]	; (8016604 <__sfp_lock_acquire+0x8>)
 80165fe:	f000 b8d8 	b.w	80167b2 <__retarget_lock_acquire_recursive>
 8016602:	bf00      	nop
 8016604:	20011ca5 	.word	0x20011ca5

08016608 <__sfp_lock_release>:
 8016608:	4801      	ldr	r0, [pc, #4]	; (8016610 <__sfp_lock_release+0x8>)
 801660a:	f000 b8d3 	b.w	80167b4 <__retarget_lock_release_recursive>
 801660e:	bf00      	nop
 8016610:	20011ca5 	.word	0x20011ca5

08016614 <__sinit_lock_acquire>:
 8016614:	4801      	ldr	r0, [pc, #4]	; (801661c <__sinit_lock_acquire+0x8>)
 8016616:	f000 b8cc 	b.w	80167b2 <__retarget_lock_acquire_recursive>
 801661a:	bf00      	nop
 801661c:	20011ca6 	.word	0x20011ca6

08016620 <__sinit_lock_release>:
 8016620:	4801      	ldr	r0, [pc, #4]	; (8016628 <__sinit_lock_release+0x8>)
 8016622:	f000 b8c7 	b.w	80167b4 <__retarget_lock_release_recursive>
 8016626:	bf00      	nop
 8016628:	20011ca6 	.word	0x20011ca6

0801662c <__sinit>:
 801662c:	b510      	push	{r4, lr}
 801662e:	4604      	mov	r4, r0
 8016630:	f7ff fff0 	bl	8016614 <__sinit_lock_acquire>
 8016634:	69a3      	ldr	r3, [r4, #24]
 8016636:	b11b      	cbz	r3, 8016640 <__sinit+0x14>
 8016638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801663c:	f7ff bff0 	b.w	8016620 <__sinit_lock_release>
 8016640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016644:	6523      	str	r3, [r4, #80]	; 0x50
 8016646:	4b13      	ldr	r3, [pc, #76]	; (8016694 <__sinit+0x68>)
 8016648:	4a13      	ldr	r2, [pc, #76]	; (8016698 <__sinit+0x6c>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	62a2      	str	r2, [r4, #40]	; 0x28
 801664e:	42a3      	cmp	r3, r4
 8016650:	bf04      	itt	eq
 8016652:	2301      	moveq	r3, #1
 8016654:	61a3      	streq	r3, [r4, #24]
 8016656:	4620      	mov	r0, r4
 8016658:	f000 f820 	bl	801669c <__sfp>
 801665c:	6060      	str	r0, [r4, #4]
 801665e:	4620      	mov	r0, r4
 8016660:	f000 f81c 	bl	801669c <__sfp>
 8016664:	60a0      	str	r0, [r4, #8]
 8016666:	4620      	mov	r0, r4
 8016668:	f000 f818 	bl	801669c <__sfp>
 801666c:	2200      	movs	r2, #0
 801666e:	60e0      	str	r0, [r4, #12]
 8016670:	2104      	movs	r1, #4
 8016672:	6860      	ldr	r0, [r4, #4]
 8016674:	f7ff ff82 	bl	801657c <std>
 8016678:	68a0      	ldr	r0, [r4, #8]
 801667a:	2201      	movs	r2, #1
 801667c:	2109      	movs	r1, #9
 801667e:	f7ff ff7d 	bl	801657c <std>
 8016682:	68e0      	ldr	r0, [r4, #12]
 8016684:	2202      	movs	r2, #2
 8016686:	2112      	movs	r1, #18
 8016688:	f7ff ff78 	bl	801657c <std>
 801668c:	2301      	movs	r3, #1
 801668e:	61a3      	str	r3, [r4, #24]
 8016690:	e7d2      	b.n	8016638 <__sinit+0xc>
 8016692:	bf00      	nop
 8016694:	0801ce70 	.word	0x0801ce70
 8016698:	080165c5 	.word	0x080165c5

0801669c <__sfp>:
 801669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801669e:	4607      	mov	r7, r0
 80166a0:	f7ff ffac 	bl	80165fc <__sfp_lock_acquire>
 80166a4:	4b1e      	ldr	r3, [pc, #120]	; (8016720 <__sfp+0x84>)
 80166a6:	681e      	ldr	r6, [r3, #0]
 80166a8:	69b3      	ldr	r3, [r6, #24]
 80166aa:	b913      	cbnz	r3, 80166b2 <__sfp+0x16>
 80166ac:	4630      	mov	r0, r6
 80166ae:	f7ff ffbd 	bl	801662c <__sinit>
 80166b2:	3648      	adds	r6, #72	; 0x48
 80166b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80166b8:	3b01      	subs	r3, #1
 80166ba:	d503      	bpl.n	80166c4 <__sfp+0x28>
 80166bc:	6833      	ldr	r3, [r6, #0]
 80166be:	b30b      	cbz	r3, 8016704 <__sfp+0x68>
 80166c0:	6836      	ldr	r6, [r6, #0]
 80166c2:	e7f7      	b.n	80166b4 <__sfp+0x18>
 80166c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80166c8:	b9d5      	cbnz	r5, 8016700 <__sfp+0x64>
 80166ca:	4b16      	ldr	r3, [pc, #88]	; (8016724 <__sfp+0x88>)
 80166cc:	60e3      	str	r3, [r4, #12]
 80166ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80166d2:	6665      	str	r5, [r4, #100]	; 0x64
 80166d4:	f000 f86c 	bl	80167b0 <__retarget_lock_init_recursive>
 80166d8:	f7ff ff96 	bl	8016608 <__sfp_lock_release>
 80166dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80166e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80166e4:	6025      	str	r5, [r4, #0]
 80166e6:	61a5      	str	r5, [r4, #24]
 80166e8:	2208      	movs	r2, #8
 80166ea:	4629      	mov	r1, r5
 80166ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80166f0:	f000 f899 	bl	8016826 <memset>
 80166f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80166f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80166fc:	4620      	mov	r0, r4
 80166fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016700:	3468      	adds	r4, #104	; 0x68
 8016702:	e7d9      	b.n	80166b8 <__sfp+0x1c>
 8016704:	2104      	movs	r1, #4
 8016706:	4638      	mov	r0, r7
 8016708:	f7ff ff62 	bl	80165d0 <__sfmoreglue>
 801670c:	4604      	mov	r4, r0
 801670e:	6030      	str	r0, [r6, #0]
 8016710:	2800      	cmp	r0, #0
 8016712:	d1d5      	bne.n	80166c0 <__sfp+0x24>
 8016714:	f7ff ff78 	bl	8016608 <__sfp_lock_release>
 8016718:	230c      	movs	r3, #12
 801671a:	603b      	str	r3, [r7, #0]
 801671c:	e7ee      	b.n	80166fc <__sfp+0x60>
 801671e:	bf00      	nop
 8016720:	0801ce70 	.word	0x0801ce70
 8016724:	ffff0001 	.word	0xffff0001

08016728 <_fwalk_reent>:
 8016728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801672c:	4606      	mov	r6, r0
 801672e:	4688      	mov	r8, r1
 8016730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016734:	2700      	movs	r7, #0
 8016736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801673a:	f1b9 0901 	subs.w	r9, r9, #1
 801673e:	d505      	bpl.n	801674c <_fwalk_reent+0x24>
 8016740:	6824      	ldr	r4, [r4, #0]
 8016742:	2c00      	cmp	r4, #0
 8016744:	d1f7      	bne.n	8016736 <_fwalk_reent+0xe>
 8016746:	4638      	mov	r0, r7
 8016748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801674c:	89ab      	ldrh	r3, [r5, #12]
 801674e:	2b01      	cmp	r3, #1
 8016750:	d907      	bls.n	8016762 <_fwalk_reent+0x3a>
 8016752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016756:	3301      	adds	r3, #1
 8016758:	d003      	beq.n	8016762 <_fwalk_reent+0x3a>
 801675a:	4629      	mov	r1, r5
 801675c:	4630      	mov	r0, r6
 801675e:	47c0      	blx	r8
 8016760:	4307      	orrs	r7, r0
 8016762:	3568      	adds	r5, #104	; 0x68
 8016764:	e7e9      	b.n	801673a <_fwalk_reent+0x12>
	...

08016768 <__libc_init_array>:
 8016768:	b570      	push	{r4, r5, r6, lr}
 801676a:	4d0d      	ldr	r5, [pc, #52]	; (80167a0 <__libc_init_array+0x38>)
 801676c:	4c0d      	ldr	r4, [pc, #52]	; (80167a4 <__libc_init_array+0x3c>)
 801676e:	1b64      	subs	r4, r4, r5
 8016770:	10a4      	asrs	r4, r4, #2
 8016772:	2600      	movs	r6, #0
 8016774:	42a6      	cmp	r6, r4
 8016776:	d109      	bne.n	801678c <__libc_init_array+0x24>
 8016778:	4d0b      	ldr	r5, [pc, #44]	; (80167a8 <__libc_init_array+0x40>)
 801677a:	4c0c      	ldr	r4, [pc, #48]	; (80167ac <__libc_init_array+0x44>)
 801677c:	f003 f8f4 	bl	8019968 <_init>
 8016780:	1b64      	subs	r4, r4, r5
 8016782:	10a4      	asrs	r4, r4, #2
 8016784:	2600      	movs	r6, #0
 8016786:	42a6      	cmp	r6, r4
 8016788:	d105      	bne.n	8016796 <__libc_init_array+0x2e>
 801678a:	bd70      	pop	{r4, r5, r6, pc}
 801678c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016790:	4798      	blx	r3
 8016792:	3601      	adds	r6, #1
 8016794:	e7ee      	b.n	8016774 <__libc_init_array+0xc>
 8016796:	f855 3b04 	ldr.w	r3, [r5], #4
 801679a:	4798      	blx	r3
 801679c:	3601      	adds	r6, #1
 801679e:	e7f2      	b.n	8016786 <__libc_init_array+0x1e>
 80167a0:	0801d200 	.word	0x0801d200
 80167a4:	0801d200 	.word	0x0801d200
 80167a8:	0801d200 	.word	0x0801d200
 80167ac:	0801d204 	.word	0x0801d204

080167b0 <__retarget_lock_init_recursive>:
 80167b0:	4770      	bx	lr

080167b2 <__retarget_lock_acquire_recursive>:
 80167b2:	4770      	bx	lr

080167b4 <__retarget_lock_release_recursive>:
 80167b4:	4770      	bx	lr

080167b6 <memcmp>:
 80167b6:	b510      	push	{r4, lr}
 80167b8:	3901      	subs	r1, #1
 80167ba:	4402      	add	r2, r0
 80167bc:	4290      	cmp	r0, r2
 80167be:	d101      	bne.n	80167c4 <memcmp+0xe>
 80167c0:	2000      	movs	r0, #0
 80167c2:	e005      	b.n	80167d0 <memcmp+0x1a>
 80167c4:	7803      	ldrb	r3, [r0, #0]
 80167c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80167ca:	42a3      	cmp	r3, r4
 80167cc:	d001      	beq.n	80167d2 <memcmp+0x1c>
 80167ce:	1b18      	subs	r0, r3, r4
 80167d0:	bd10      	pop	{r4, pc}
 80167d2:	3001      	adds	r0, #1
 80167d4:	e7f2      	b.n	80167bc <memcmp+0x6>

080167d6 <memcpy>:
 80167d6:	440a      	add	r2, r1
 80167d8:	4291      	cmp	r1, r2
 80167da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80167de:	d100      	bne.n	80167e2 <memcpy+0xc>
 80167e0:	4770      	bx	lr
 80167e2:	b510      	push	{r4, lr}
 80167e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167ec:	4291      	cmp	r1, r2
 80167ee:	d1f9      	bne.n	80167e4 <memcpy+0xe>
 80167f0:	bd10      	pop	{r4, pc}

080167f2 <memmove>:
 80167f2:	4288      	cmp	r0, r1
 80167f4:	b510      	push	{r4, lr}
 80167f6:	eb01 0402 	add.w	r4, r1, r2
 80167fa:	d902      	bls.n	8016802 <memmove+0x10>
 80167fc:	4284      	cmp	r4, r0
 80167fe:	4623      	mov	r3, r4
 8016800:	d807      	bhi.n	8016812 <memmove+0x20>
 8016802:	1e43      	subs	r3, r0, #1
 8016804:	42a1      	cmp	r1, r4
 8016806:	d008      	beq.n	801681a <memmove+0x28>
 8016808:	f811 2b01 	ldrb.w	r2, [r1], #1
 801680c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016810:	e7f8      	b.n	8016804 <memmove+0x12>
 8016812:	4402      	add	r2, r0
 8016814:	4601      	mov	r1, r0
 8016816:	428a      	cmp	r2, r1
 8016818:	d100      	bne.n	801681c <memmove+0x2a>
 801681a:	bd10      	pop	{r4, pc}
 801681c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016820:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016824:	e7f7      	b.n	8016816 <memmove+0x24>

08016826 <memset>:
 8016826:	4402      	add	r2, r0
 8016828:	4603      	mov	r3, r0
 801682a:	4293      	cmp	r3, r2
 801682c:	d100      	bne.n	8016830 <memset+0xa>
 801682e:	4770      	bx	lr
 8016830:	f803 1b01 	strb.w	r1, [r3], #1
 8016834:	e7f9      	b.n	801682a <memset+0x4>
	...

08016838 <sbrk_aligned>:
 8016838:	b570      	push	{r4, r5, r6, lr}
 801683a:	4e0e      	ldr	r6, [pc, #56]	; (8016874 <sbrk_aligned+0x3c>)
 801683c:	460c      	mov	r4, r1
 801683e:	6831      	ldr	r1, [r6, #0]
 8016840:	4605      	mov	r5, r0
 8016842:	b911      	cbnz	r1, 801684a <sbrk_aligned+0x12>
 8016844:	f000 f94c 	bl	8016ae0 <_sbrk_r>
 8016848:	6030      	str	r0, [r6, #0]
 801684a:	4621      	mov	r1, r4
 801684c:	4628      	mov	r0, r5
 801684e:	f000 f947 	bl	8016ae0 <_sbrk_r>
 8016852:	1c43      	adds	r3, r0, #1
 8016854:	d00a      	beq.n	801686c <sbrk_aligned+0x34>
 8016856:	1cc4      	adds	r4, r0, #3
 8016858:	f024 0403 	bic.w	r4, r4, #3
 801685c:	42a0      	cmp	r0, r4
 801685e:	d007      	beq.n	8016870 <sbrk_aligned+0x38>
 8016860:	1a21      	subs	r1, r4, r0
 8016862:	4628      	mov	r0, r5
 8016864:	f000 f93c 	bl	8016ae0 <_sbrk_r>
 8016868:	3001      	adds	r0, #1
 801686a:	d101      	bne.n	8016870 <sbrk_aligned+0x38>
 801686c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016870:	4620      	mov	r0, r4
 8016872:	bd70      	pop	{r4, r5, r6, pc}
 8016874:	20011cac 	.word	0x20011cac

08016878 <_malloc_r>:
 8016878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801687c:	1ccd      	adds	r5, r1, #3
 801687e:	f025 0503 	bic.w	r5, r5, #3
 8016882:	3508      	adds	r5, #8
 8016884:	2d0c      	cmp	r5, #12
 8016886:	bf38      	it	cc
 8016888:	250c      	movcc	r5, #12
 801688a:	2d00      	cmp	r5, #0
 801688c:	4607      	mov	r7, r0
 801688e:	db01      	blt.n	8016894 <_malloc_r+0x1c>
 8016890:	42a9      	cmp	r1, r5
 8016892:	d905      	bls.n	80168a0 <_malloc_r+0x28>
 8016894:	230c      	movs	r3, #12
 8016896:	603b      	str	r3, [r7, #0]
 8016898:	2600      	movs	r6, #0
 801689a:	4630      	mov	r0, r6
 801689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a0:	4e2e      	ldr	r6, [pc, #184]	; (801695c <_malloc_r+0xe4>)
 80168a2:	f001 fcf3 	bl	801828c <__malloc_lock>
 80168a6:	6833      	ldr	r3, [r6, #0]
 80168a8:	461c      	mov	r4, r3
 80168aa:	bb34      	cbnz	r4, 80168fa <_malloc_r+0x82>
 80168ac:	4629      	mov	r1, r5
 80168ae:	4638      	mov	r0, r7
 80168b0:	f7ff ffc2 	bl	8016838 <sbrk_aligned>
 80168b4:	1c43      	adds	r3, r0, #1
 80168b6:	4604      	mov	r4, r0
 80168b8:	d14d      	bne.n	8016956 <_malloc_r+0xde>
 80168ba:	6834      	ldr	r4, [r6, #0]
 80168bc:	4626      	mov	r6, r4
 80168be:	2e00      	cmp	r6, #0
 80168c0:	d140      	bne.n	8016944 <_malloc_r+0xcc>
 80168c2:	6823      	ldr	r3, [r4, #0]
 80168c4:	4631      	mov	r1, r6
 80168c6:	4638      	mov	r0, r7
 80168c8:	eb04 0803 	add.w	r8, r4, r3
 80168cc:	f000 f908 	bl	8016ae0 <_sbrk_r>
 80168d0:	4580      	cmp	r8, r0
 80168d2:	d13a      	bne.n	801694a <_malloc_r+0xd2>
 80168d4:	6821      	ldr	r1, [r4, #0]
 80168d6:	3503      	adds	r5, #3
 80168d8:	1a6d      	subs	r5, r5, r1
 80168da:	f025 0503 	bic.w	r5, r5, #3
 80168de:	3508      	adds	r5, #8
 80168e0:	2d0c      	cmp	r5, #12
 80168e2:	bf38      	it	cc
 80168e4:	250c      	movcc	r5, #12
 80168e6:	4629      	mov	r1, r5
 80168e8:	4638      	mov	r0, r7
 80168ea:	f7ff ffa5 	bl	8016838 <sbrk_aligned>
 80168ee:	3001      	adds	r0, #1
 80168f0:	d02b      	beq.n	801694a <_malloc_r+0xd2>
 80168f2:	6823      	ldr	r3, [r4, #0]
 80168f4:	442b      	add	r3, r5
 80168f6:	6023      	str	r3, [r4, #0]
 80168f8:	e00e      	b.n	8016918 <_malloc_r+0xa0>
 80168fa:	6822      	ldr	r2, [r4, #0]
 80168fc:	1b52      	subs	r2, r2, r5
 80168fe:	d41e      	bmi.n	801693e <_malloc_r+0xc6>
 8016900:	2a0b      	cmp	r2, #11
 8016902:	d916      	bls.n	8016932 <_malloc_r+0xba>
 8016904:	1961      	adds	r1, r4, r5
 8016906:	42a3      	cmp	r3, r4
 8016908:	6025      	str	r5, [r4, #0]
 801690a:	bf18      	it	ne
 801690c:	6059      	strne	r1, [r3, #4]
 801690e:	6863      	ldr	r3, [r4, #4]
 8016910:	bf08      	it	eq
 8016912:	6031      	streq	r1, [r6, #0]
 8016914:	5162      	str	r2, [r4, r5]
 8016916:	604b      	str	r3, [r1, #4]
 8016918:	4638      	mov	r0, r7
 801691a:	f104 060b 	add.w	r6, r4, #11
 801691e:	f001 fcbb 	bl	8018298 <__malloc_unlock>
 8016922:	f026 0607 	bic.w	r6, r6, #7
 8016926:	1d23      	adds	r3, r4, #4
 8016928:	1af2      	subs	r2, r6, r3
 801692a:	d0b6      	beq.n	801689a <_malloc_r+0x22>
 801692c:	1b9b      	subs	r3, r3, r6
 801692e:	50a3      	str	r3, [r4, r2]
 8016930:	e7b3      	b.n	801689a <_malloc_r+0x22>
 8016932:	6862      	ldr	r2, [r4, #4]
 8016934:	42a3      	cmp	r3, r4
 8016936:	bf0c      	ite	eq
 8016938:	6032      	streq	r2, [r6, #0]
 801693a:	605a      	strne	r2, [r3, #4]
 801693c:	e7ec      	b.n	8016918 <_malloc_r+0xa0>
 801693e:	4623      	mov	r3, r4
 8016940:	6864      	ldr	r4, [r4, #4]
 8016942:	e7b2      	b.n	80168aa <_malloc_r+0x32>
 8016944:	4634      	mov	r4, r6
 8016946:	6876      	ldr	r6, [r6, #4]
 8016948:	e7b9      	b.n	80168be <_malloc_r+0x46>
 801694a:	230c      	movs	r3, #12
 801694c:	603b      	str	r3, [r7, #0]
 801694e:	4638      	mov	r0, r7
 8016950:	f001 fca2 	bl	8018298 <__malloc_unlock>
 8016954:	e7a1      	b.n	801689a <_malloc_r+0x22>
 8016956:	6025      	str	r5, [r4, #0]
 8016958:	e7de      	b.n	8016918 <_malloc_r+0xa0>
 801695a:	bf00      	nop
 801695c:	20011ca8 	.word	0x20011ca8

08016960 <iprintf>:
 8016960:	b40f      	push	{r0, r1, r2, r3}
 8016962:	4b0a      	ldr	r3, [pc, #40]	; (801698c <iprintf+0x2c>)
 8016964:	b513      	push	{r0, r1, r4, lr}
 8016966:	681c      	ldr	r4, [r3, #0]
 8016968:	b124      	cbz	r4, 8016974 <iprintf+0x14>
 801696a:	69a3      	ldr	r3, [r4, #24]
 801696c:	b913      	cbnz	r3, 8016974 <iprintf+0x14>
 801696e:	4620      	mov	r0, r4
 8016970:	f7ff fe5c 	bl	801662c <__sinit>
 8016974:	ab05      	add	r3, sp, #20
 8016976:	9a04      	ldr	r2, [sp, #16]
 8016978:	68a1      	ldr	r1, [r4, #8]
 801697a:	9301      	str	r3, [sp, #4]
 801697c:	4620      	mov	r0, r4
 801697e:	f002 fb3b 	bl	8018ff8 <_vfiprintf_r>
 8016982:	b002      	add	sp, #8
 8016984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016988:	b004      	add	sp, #16
 801698a:	4770      	bx	lr
 801698c:	2000002c 	.word	0x2000002c

08016990 <rand>:
 8016990:	4b16      	ldr	r3, [pc, #88]	; (80169ec <rand+0x5c>)
 8016992:	b510      	push	{r4, lr}
 8016994:	681c      	ldr	r4, [r3, #0]
 8016996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016998:	b9b3      	cbnz	r3, 80169c8 <rand+0x38>
 801699a:	2018      	movs	r0, #24
 801699c:	f001 fc5c 	bl	8018258 <malloc>
 80169a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80169a2:	b928      	cbnz	r0, 80169b0 <rand+0x20>
 80169a4:	4602      	mov	r2, r0
 80169a6:	4b12      	ldr	r3, [pc, #72]	; (80169f0 <rand+0x60>)
 80169a8:	4812      	ldr	r0, [pc, #72]	; (80169f4 <rand+0x64>)
 80169aa:	214e      	movs	r1, #78	; 0x4e
 80169ac:	f000 ffd0 	bl	8017950 <__assert_func>
 80169b0:	4a11      	ldr	r2, [pc, #68]	; (80169f8 <rand+0x68>)
 80169b2:	4b12      	ldr	r3, [pc, #72]	; (80169fc <rand+0x6c>)
 80169b4:	e9c0 2300 	strd	r2, r3, [r0]
 80169b8:	4b11      	ldr	r3, [pc, #68]	; (8016a00 <rand+0x70>)
 80169ba:	6083      	str	r3, [r0, #8]
 80169bc:	230b      	movs	r3, #11
 80169be:	8183      	strh	r3, [r0, #12]
 80169c0:	2201      	movs	r2, #1
 80169c2:	2300      	movs	r3, #0
 80169c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80169c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80169ca:	4a0e      	ldr	r2, [pc, #56]	; (8016a04 <rand+0x74>)
 80169cc:	6920      	ldr	r0, [r4, #16]
 80169ce:	6963      	ldr	r3, [r4, #20]
 80169d0:	490d      	ldr	r1, [pc, #52]	; (8016a08 <rand+0x78>)
 80169d2:	4342      	muls	r2, r0
 80169d4:	fb01 2203 	mla	r2, r1, r3, r2
 80169d8:	fba0 0101 	umull	r0, r1, r0, r1
 80169dc:	1c43      	adds	r3, r0, #1
 80169de:	eb42 0001 	adc.w	r0, r2, r1
 80169e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80169e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80169ea:	bd10      	pop	{r4, pc}
 80169ec:	2000002c 	.word	0x2000002c
 80169f0:	0801ce74 	.word	0x0801ce74
 80169f4:	0801ce8b 	.word	0x0801ce8b
 80169f8:	abcd330e 	.word	0xabcd330e
 80169fc:	e66d1234 	.word	0xe66d1234
 8016a00:	0005deec 	.word	0x0005deec
 8016a04:	5851f42d 	.word	0x5851f42d
 8016a08:	4c957f2d 	.word	0x4c957f2d

08016a0c <cleanup_glue>:
 8016a0c:	b538      	push	{r3, r4, r5, lr}
 8016a0e:	460c      	mov	r4, r1
 8016a10:	6809      	ldr	r1, [r1, #0]
 8016a12:	4605      	mov	r5, r0
 8016a14:	b109      	cbz	r1, 8016a1a <cleanup_glue+0xe>
 8016a16:	f7ff fff9 	bl	8016a0c <cleanup_glue>
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a22:	f002 b917 	b.w	8018c54 <_free_r>
	...

08016a28 <_reclaim_reent>:
 8016a28:	4b2c      	ldr	r3, [pc, #176]	; (8016adc <_reclaim_reent+0xb4>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	4283      	cmp	r3, r0
 8016a2e:	b570      	push	{r4, r5, r6, lr}
 8016a30:	4604      	mov	r4, r0
 8016a32:	d051      	beq.n	8016ad8 <_reclaim_reent+0xb0>
 8016a34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016a36:	b143      	cbz	r3, 8016a4a <_reclaim_reent+0x22>
 8016a38:	68db      	ldr	r3, [r3, #12]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d14a      	bne.n	8016ad4 <_reclaim_reent+0xac>
 8016a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a40:	6819      	ldr	r1, [r3, #0]
 8016a42:	b111      	cbz	r1, 8016a4a <_reclaim_reent+0x22>
 8016a44:	4620      	mov	r0, r4
 8016a46:	f002 f905 	bl	8018c54 <_free_r>
 8016a4a:	6961      	ldr	r1, [r4, #20]
 8016a4c:	b111      	cbz	r1, 8016a54 <_reclaim_reent+0x2c>
 8016a4e:	4620      	mov	r0, r4
 8016a50:	f002 f900 	bl	8018c54 <_free_r>
 8016a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016a56:	b111      	cbz	r1, 8016a5e <_reclaim_reent+0x36>
 8016a58:	4620      	mov	r0, r4
 8016a5a:	f002 f8fb 	bl	8018c54 <_free_r>
 8016a5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016a60:	b111      	cbz	r1, 8016a68 <_reclaim_reent+0x40>
 8016a62:	4620      	mov	r0, r4
 8016a64:	f002 f8f6 	bl	8018c54 <_free_r>
 8016a68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016a6a:	b111      	cbz	r1, 8016a72 <_reclaim_reent+0x4a>
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f002 f8f1 	bl	8018c54 <_free_r>
 8016a72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016a74:	b111      	cbz	r1, 8016a7c <_reclaim_reent+0x54>
 8016a76:	4620      	mov	r0, r4
 8016a78:	f002 f8ec 	bl	8018c54 <_free_r>
 8016a7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016a7e:	b111      	cbz	r1, 8016a86 <_reclaim_reent+0x5e>
 8016a80:	4620      	mov	r0, r4
 8016a82:	f002 f8e7 	bl	8018c54 <_free_r>
 8016a86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016a88:	b111      	cbz	r1, 8016a90 <_reclaim_reent+0x68>
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	f002 f8e2 	bl	8018c54 <_free_r>
 8016a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a92:	b111      	cbz	r1, 8016a9a <_reclaim_reent+0x72>
 8016a94:	4620      	mov	r0, r4
 8016a96:	f002 f8dd 	bl	8018c54 <_free_r>
 8016a9a:	69a3      	ldr	r3, [r4, #24]
 8016a9c:	b1e3      	cbz	r3, 8016ad8 <_reclaim_reent+0xb0>
 8016a9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	4798      	blx	r3
 8016aa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016aa6:	b1b9      	cbz	r1, 8016ad8 <_reclaim_reent+0xb0>
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aae:	f7ff bfad 	b.w	8016a0c <cleanup_glue>
 8016ab2:	5949      	ldr	r1, [r1, r5]
 8016ab4:	b941      	cbnz	r1, 8016ac8 <_reclaim_reent+0xa0>
 8016ab6:	3504      	adds	r5, #4
 8016ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016aba:	2d80      	cmp	r5, #128	; 0x80
 8016abc:	68d9      	ldr	r1, [r3, #12]
 8016abe:	d1f8      	bne.n	8016ab2 <_reclaim_reent+0x8a>
 8016ac0:	4620      	mov	r0, r4
 8016ac2:	f002 f8c7 	bl	8018c54 <_free_r>
 8016ac6:	e7ba      	b.n	8016a3e <_reclaim_reent+0x16>
 8016ac8:	680e      	ldr	r6, [r1, #0]
 8016aca:	4620      	mov	r0, r4
 8016acc:	f002 f8c2 	bl	8018c54 <_free_r>
 8016ad0:	4631      	mov	r1, r6
 8016ad2:	e7ef      	b.n	8016ab4 <_reclaim_reent+0x8c>
 8016ad4:	2500      	movs	r5, #0
 8016ad6:	e7ef      	b.n	8016ab8 <_reclaim_reent+0x90>
 8016ad8:	bd70      	pop	{r4, r5, r6, pc}
 8016ada:	bf00      	nop
 8016adc:	2000002c 	.word	0x2000002c

08016ae0 <_sbrk_r>:
 8016ae0:	b538      	push	{r3, r4, r5, lr}
 8016ae2:	4d06      	ldr	r5, [pc, #24]	; (8016afc <_sbrk_r+0x1c>)
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	4604      	mov	r4, r0
 8016ae8:	4608      	mov	r0, r1
 8016aea:	602b      	str	r3, [r5, #0]
 8016aec:	f7ea fdc2 	bl	8001674 <_sbrk>
 8016af0:	1c43      	adds	r3, r0, #1
 8016af2:	d102      	bne.n	8016afa <_sbrk_r+0x1a>
 8016af4:	682b      	ldr	r3, [r5, #0]
 8016af6:	b103      	cbz	r3, 8016afa <_sbrk_r+0x1a>
 8016af8:	6023      	str	r3, [r4, #0]
 8016afa:	bd38      	pop	{r3, r4, r5, pc}
 8016afc:	20011cb0 	.word	0x20011cb0

08016b00 <siprintf>:
 8016b00:	b40e      	push	{r1, r2, r3}
 8016b02:	b500      	push	{lr}
 8016b04:	b09c      	sub	sp, #112	; 0x70
 8016b06:	ab1d      	add	r3, sp, #116	; 0x74
 8016b08:	9002      	str	r0, [sp, #8]
 8016b0a:	9006      	str	r0, [sp, #24]
 8016b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b10:	4809      	ldr	r0, [pc, #36]	; (8016b38 <siprintf+0x38>)
 8016b12:	9107      	str	r1, [sp, #28]
 8016b14:	9104      	str	r1, [sp, #16]
 8016b16:	4909      	ldr	r1, [pc, #36]	; (8016b3c <siprintf+0x3c>)
 8016b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b1c:	9105      	str	r1, [sp, #20]
 8016b1e:	6800      	ldr	r0, [r0, #0]
 8016b20:	9301      	str	r3, [sp, #4]
 8016b22:	a902      	add	r1, sp, #8
 8016b24:	f002 f93e 	bl	8018da4 <_svfiprintf_r>
 8016b28:	9b02      	ldr	r3, [sp, #8]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	701a      	strb	r2, [r3, #0]
 8016b2e:	b01c      	add	sp, #112	; 0x70
 8016b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b34:	b003      	add	sp, #12
 8016b36:	4770      	bx	lr
 8016b38:	2000002c 	.word	0x2000002c
 8016b3c:	ffff0208 	.word	0xffff0208

08016b40 <__sread>:
 8016b40:	b510      	push	{r4, lr}
 8016b42:	460c      	mov	r4, r1
 8016b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b48:	f002 fd1a 	bl	8019580 <_read_r>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	bfab      	itete	ge
 8016b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b52:	89a3      	ldrhlt	r3, [r4, #12]
 8016b54:	181b      	addge	r3, r3, r0
 8016b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b5a:	bfac      	ite	ge
 8016b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b5e:	81a3      	strhlt	r3, [r4, #12]
 8016b60:	bd10      	pop	{r4, pc}

08016b62 <__swrite>:
 8016b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b66:	461f      	mov	r7, r3
 8016b68:	898b      	ldrh	r3, [r1, #12]
 8016b6a:	05db      	lsls	r3, r3, #23
 8016b6c:	4605      	mov	r5, r0
 8016b6e:	460c      	mov	r4, r1
 8016b70:	4616      	mov	r6, r2
 8016b72:	d505      	bpl.n	8016b80 <__swrite+0x1e>
 8016b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b78:	2302      	movs	r3, #2
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	f001 fb5a 	bl	8018234 <_lseek_r>
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b8a:	81a3      	strh	r3, [r4, #12]
 8016b8c:	4632      	mov	r2, r6
 8016b8e:	463b      	mov	r3, r7
 8016b90:	4628      	mov	r0, r5
 8016b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b96:	f000 bec9 	b.w	801792c <_write_r>

08016b9a <__sseek>:
 8016b9a:	b510      	push	{r4, lr}
 8016b9c:	460c      	mov	r4, r1
 8016b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ba2:	f001 fb47 	bl	8018234 <_lseek_r>
 8016ba6:	1c43      	adds	r3, r0, #1
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	bf15      	itete	ne
 8016bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8016bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016bb6:	81a3      	strheq	r3, [r4, #12]
 8016bb8:	bf18      	it	ne
 8016bba:	81a3      	strhne	r3, [r4, #12]
 8016bbc:	bd10      	pop	{r4, pc}

08016bbe <__sclose>:
 8016bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc2:	f000 bee3 	b.w	801798c <_close_r>

08016bc6 <strncmp>:
 8016bc6:	b510      	push	{r4, lr}
 8016bc8:	b17a      	cbz	r2, 8016bea <strncmp+0x24>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	3901      	subs	r1, #1
 8016bce:	1884      	adds	r4, r0, r2
 8016bd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016bd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016bd8:	4290      	cmp	r0, r2
 8016bda:	d101      	bne.n	8016be0 <strncmp+0x1a>
 8016bdc:	42a3      	cmp	r3, r4
 8016bde:	d101      	bne.n	8016be4 <strncmp+0x1e>
 8016be0:	1a80      	subs	r0, r0, r2
 8016be2:	bd10      	pop	{r4, pc}
 8016be4:	2800      	cmp	r0, #0
 8016be6:	d1f3      	bne.n	8016bd0 <strncmp+0xa>
 8016be8:	e7fa      	b.n	8016be0 <strncmp+0x1a>
 8016bea:	4610      	mov	r0, r2
 8016bec:	e7f9      	b.n	8016be2 <strncmp+0x1c>

08016bee <strncpy>:
 8016bee:	b510      	push	{r4, lr}
 8016bf0:	3901      	subs	r1, #1
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	b132      	cbz	r2, 8016c04 <strncpy+0x16>
 8016bf6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016bfa:	f803 4b01 	strb.w	r4, [r3], #1
 8016bfe:	3a01      	subs	r2, #1
 8016c00:	2c00      	cmp	r4, #0
 8016c02:	d1f7      	bne.n	8016bf4 <strncpy+0x6>
 8016c04:	441a      	add	r2, r3
 8016c06:	2100      	movs	r1, #0
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	d100      	bne.n	8016c0e <strncpy+0x20>
 8016c0c:	bd10      	pop	{r4, pc}
 8016c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8016c12:	e7f9      	b.n	8016c08 <strncpy+0x1a>

08016c14 <sulp>:
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	4604      	mov	r4, r0
 8016c18:	460d      	mov	r5, r1
 8016c1a:	ec45 4b10 	vmov	d0, r4, r5
 8016c1e:	4616      	mov	r6, r2
 8016c20:	f001 feb2 	bl	8018988 <__ulp>
 8016c24:	ec51 0b10 	vmov	r0, r1, d0
 8016c28:	b17e      	cbz	r6, 8016c4a <sulp+0x36>
 8016c2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	dd09      	ble.n	8016c4a <sulp+0x36>
 8016c36:	051b      	lsls	r3, r3, #20
 8016c38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c3c:	2400      	movs	r4, #0
 8016c3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c42:	4622      	mov	r2, r4
 8016c44:	462b      	mov	r3, r5
 8016c46:	f7e9 fcf7 	bl	8000638 <__aeabi_dmul>
 8016c4a:	bd70      	pop	{r4, r5, r6, pc}
 8016c4c:	0000      	movs	r0, r0
	...

08016c50 <_strtod_l>:
 8016c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c54:	ed2d 8b02 	vpush	{d8}
 8016c58:	b09d      	sub	sp, #116	; 0x74
 8016c5a:	461f      	mov	r7, r3
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	9318      	str	r3, [sp, #96]	; 0x60
 8016c60:	4ba2      	ldr	r3, [pc, #648]	; (8016eec <_strtod_l+0x29c>)
 8016c62:	9213      	str	r2, [sp, #76]	; 0x4c
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	9305      	str	r3, [sp, #20]
 8016c68:	4604      	mov	r4, r0
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	4688      	mov	r8, r1
 8016c6e:	f7e9 facf 	bl	8000210 <strlen>
 8016c72:	f04f 0a00 	mov.w	sl, #0
 8016c76:	4605      	mov	r5, r0
 8016c78:	f04f 0b00 	mov.w	fp, #0
 8016c7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c82:	781a      	ldrb	r2, [r3, #0]
 8016c84:	2a2b      	cmp	r2, #43	; 0x2b
 8016c86:	d04e      	beq.n	8016d26 <_strtod_l+0xd6>
 8016c88:	d83b      	bhi.n	8016d02 <_strtod_l+0xb2>
 8016c8a:	2a0d      	cmp	r2, #13
 8016c8c:	d834      	bhi.n	8016cf8 <_strtod_l+0xa8>
 8016c8e:	2a08      	cmp	r2, #8
 8016c90:	d834      	bhi.n	8016cfc <_strtod_l+0xac>
 8016c92:	2a00      	cmp	r2, #0
 8016c94:	d03e      	beq.n	8016d14 <_strtod_l+0xc4>
 8016c96:	2300      	movs	r3, #0
 8016c98:	930a      	str	r3, [sp, #40]	; 0x28
 8016c9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016c9c:	7833      	ldrb	r3, [r6, #0]
 8016c9e:	2b30      	cmp	r3, #48	; 0x30
 8016ca0:	f040 80b0 	bne.w	8016e04 <_strtod_l+0x1b4>
 8016ca4:	7873      	ldrb	r3, [r6, #1]
 8016ca6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016caa:	2b58      	cmp	r3, #88	; 0x58
 8016cac:	d168      	bne.n	8016d80 <_strtod_l+0x130>
 8016cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cb0:	9301      	str	r3, [sp, #4]
 8016cb2:	ab18      	add	r3, sp, #96	; 0x60
 8016cb4:	9702      	str	r7, [sp, #8]
 8016cb6:	9300      	str	r3, [sp, #0]
 8016cb8:	4a8d      	ldr	r2, [pc, #564]	; (8016ef0 <_strtod_l+0x2a0>)
 8016cba:	ab19      	add	r3, sp, #100	; 0x64
 8016cbc:	a917      	add	r1, sp, #92	; 0x5c
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	f000 ffb0 	bl	8017c24 <__gethex>
 8016cc4:	f010 0707 	ands.w	r7, r0, #7
 8016cc8:	4605      	mov	r5, r0
 8016cca:	d005      	beq.n	8016cd8 <_strtod_l+0x88>
 8016ccc:	2f06      	cmp	r7, #6
 8016cce:	d12c      	bne.n	8016d2a <_strtod_l+0xda>
 8016cd0:	3601      	adds	r6, #1
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	9617      	str	r6, [sp, #92]	; 0x5c
 8016cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8016cd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	f040 8590 	bne.w	8017800 <_strtod_l+0xbb0>
 8016ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ce2:	b1eb      	cbz	r3, 8016d20 <_strtod_l+0xd0>
 8016ce4:	4652      	mov	r2, sl
 8016ce6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016cea:	ec43 2b10 	vmov	d0, r2, r3
 8016cee:	b01d      	add	sp, #116	; 0x74
 8016cf0:	ecbd 8b02 	vpop	{d8}
 8016cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf8:	2a20      	cmp	r2, #32
 8016cfa:	d1cc      	bne.n	8016c96 <_strtod_l+0x46>
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d00:	e7be      	b.n	8016c80 <_strtod_l+0x30>
 8016d02:	2a2d      	cmp	r2, #45	; 0x2d
 8016d04:	d1c7      	bne.n	8016c96 <_strtod_l+0x46>
 8016d06:	2201      	movs	r2, #1
 8016d08:	920a      	str	r2, [sp, #40]	; 0x28
 8016d0a:	1c5a      	adds	r2, r3, #1
 8016d0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d0e:	785b      	ldrb	r3, [r3, #1]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d1c2      	bne.n	8016c9a <_strtod_l+0x4a>
 8016d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	f040 856e 	bne.w	80177fc <_strtod_l+0xbac>
 8016d20:	4652      	mov	r2, sl
 8016d22:	465b      	mov	r3, fp
 8016d24:	e7e1      	b.n	8016cea <_strtod_l+0x9a>
 8016d26:	2200      	movs	r2, #0
 8016d28:	e7ee      	b.n	8016d08 <_strtod_l+0xb8>
 8016d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016d2c:	b13a      	cbz	r2, 8016d3e <_strtod_l+0xee>
 8016d2e:	2135      	movs	r1, #53	; 0x35
 8016d30:	a81a      	add	r0, sp, #104	; 0x68
 8016d32:	f001 ff34 	bl	8018b9e <__copybits>
 8016d36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f001 faf3 	bl	8018324 <_Bfree>
 8016d3e:	3f01      	subs	r7, #1
 8016d40:	2f04      	cmp	r7, #4
 8016d42:	d806      	bhi.n	8016d52 <_strtod_l+0x102>
 8016d44:	e8df f007 	tbb	[pc, r7]
 8016d48:	1714030a 	.word	0x1714030a
 8016d4c:	0a          	.byte	0x0a
 8016d4d:	00          	.byte	0x00
 8016d4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8016d52:	0728      	lsls	r0, r5, #28
 8016d54:	d5c0      	bpl.n	8016cd8 <_strtod_l+0x88>
 8016d56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016d5a:	e7bd      	b.n	8016cd8 <_strtod_l+0x88>
 8016d5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8016d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016d62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016d66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016d6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d6e:	e7f0      	b.n	8016d52 <_strtod_l+0x102>
 8016d70:	f8df b180 	ldr.w	fp, [pc, #384]	; 8016ef4 <_strtod_l+0x2a4>
 8016d74:	e7ed      	b.n	8016d52 <_strtod_l+0x102>
 8016d76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016d7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016d7e:	e7e8      	b.n	8016d52 <_strtod_l+0x102>
 8016d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d82:	1c5a      	adds	r2, r3, #1
 8016d84:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d86:	785b      	ldrb	r3, [r3, #1]
 8016d88:	2b30      	cmp	r3, #48	; 0x30
 8016d8a:	d0f9      	beq.n	8016d80 <_strtod_l+0x130>
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d0a3      	beq.n	8016cd8 <_strtod_l+0x88>
 8016d90:	2301      	movs	r3, #1
 8016d92:	f04f 0900 	mov.w	r9, #0
 8016d96:	9304      	str	r3, [sp, #16]
 8016d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d9a:	9308      	str	r3, [sp, #32]
 8016d9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8016da0:	464f      	mov	r7, r9
 8016da2:	220a      	movs	r2, #10
 8016da4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016da6:	7806      	ldrb	r6, [r0, #0]
 8016da8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016dac:	b2d9      	uxtb	r1, r3
 8016dae:	2909      	cmp	r1, #9
 8016db0:	d92a      	bls.n	8016e08 <_strtod_l+0x1b8>
 8016db2:	9905      	ldr	r1, [sp, #20]
 8016db4:	462a      	mov	r2, r5
 8016db6:	f7ff ff06 	bl	8016bc6 <strncmp>
 8016dba:	b398      	cbz	r0, 8016e24 <_strtod_l+0x1d4>
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	4632      	mov	r2, r6
 8016dc0:	463d      	mov	r5, r7
 8016dc2:	9005      	str	r0, [sp, #20]
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	2a65      	cmp	r2, #101	; 0x65
 8016dc8:	d001      	beq.n	8016dce <_strtod_l+0x17e>
 8016dca:	2a45      	cmp	r2, #69	; 0x45
 8016dcc:	d118      	bne.n	8016e00 <_strtod_l+0x1b0>
 8016dce:	b91d      	cbnz	r5, 8016dd8 <_strtod_l+0x188>
 8016dd0:	9a04      	ldr	r2, [sp, #16]
 8016dd2:	4302      	orrs	r2, r0
 8016dd4:	d09e      	beq.n	8016d14 <_strtod_l+0xc4>
 8016dd6:	2500      	movs	r5, #0
 8016dd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016ddc:	f108 0201 	add.w	r2, r8, #1
 8016de0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016de2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016de6:	2a2b      	cmp	r2, #43	; 0x2b
 8016de8:	d075      	beq.n	8016ed6 <_strtod_l+0x286>
 8016dea:	2a2d      	cmp	r2, #45	; 0x2d
 8016dec:	d07b      	beq.n	8016ee6 <_strtod_l+0x296>
 8016dee:	f04f 0c00 	mov.w	ip, #0
 8016df2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016df6:	2909      	cmp	r1, #9
 8016df8:	f240 8082 	bls.w	8016f00 <_strtod_l+0x2b0>
 8016dfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016e00:	2600      	movs	r6, #0
 8016e02:	e09d      	b.n	8016f40 <_strtod_l+0x2f0>
 8016e04:	2300      	movs	r3, #0
 8016e06:	e7c4      	b.n	8016d92 <_strtod_l+0x142>
 8016e08:	2f08      	cmp	r7, #8
 8016e0a:	bfd8      	it	le
 8016e0c:	9907      	ldrle	r1, [sp, #28]
 8016e0e:	f100 0001 	add.w	r0, r0, #1
 8016e12:	bfda      	itte	le
 8016e14:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e18:	9307      	strle	r3, [sp, #28]
 8016e1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016e1e:	3701      	adds	r7, #1
 8016e20:	9017      	str	r0, [sp, #92]	; 0x5c
 8016e22:	e7bf      	b.n	8016da4 <_strtod_l+0x154>
 8016e24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e26:	195a      	adds	r2, r3, r5
 8016e28:	9217      	str	r2, [sp, #92]	; 0x5c
 8016e2a:	5d5a      	ldrb	r2, [r3, r5]
 8016e2c:	2f00      	cmp	r7, #0
 8016e2e:	d037      	beq.n	8016ea0 <_strtod_l+0x250>
 8016e30:	9005      	str	r0, [sp, #20]
 8016e32:	463d      	mov	r5, r7
 8016e34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016e38:	2b09      	cmp	r3, #9
 8016e3a:	d912      	bls.n	8016e62 <_strtod_l+0x212>
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	e7c2      	b.n	8016dc6 <_strtod_l+0x176>
 8016e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e42:	1c5a      	adds	r2, r3, #1
 8016e44:	9217      	str	r2, [sp, #92]	; 0x5c
 8016e46:	785a      	ldrb	r2, [r3, #1]
 8016e48:	3001      	adds	r0, #1
 8016e4a:	2a30      	cmp	r2, #48	; 0x30
 8016e4c:	d0f8      	beq.n	8016e40 <_strtod_l+0x1f0>
 8016e4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016e52:	2b08      	cmp	r3, #8
 8016e54:	f200 84d9 	bhi.w	801780a <_strtod_l+0xbba>
 8016e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e5a:	9005      	str	r0, [sp, #20]
 8016e5c:	2000      	movs	r0, #0
 8016e5e:	9308      	str	r3, [sp, #32]
 8016e60:	4605      	mov	r5, r0
 8016e62:	3a30      	subs	r2, #48	; 0x30
 8016e64:	f100 0301 	add.w	r3, r0, #1
 8016e68:	d014      	beq.n	8016e94 <_strtod_l+0x244>
 8016e6a:	9905      	ldr	r1, [sp, #20]
 8016e6c:	4419      	add	r1, r3
 8016e6e:	9105      	str	r1, [sp, #20]
 8016e70:	462b      	mov	r3, r5
 8016e72:	eb00 0e05 	add.w	lr, r0, r5
 8016e76:	210a      	movs	r1, #10
 8016e78:	4573      	cmp	r3, lr
 8016e7a:	d113      	bne.n	8016ea4 <_strtod_l+0x254>
 8016e7c:	182b      	adds	r3, r5, r0
 8016e7e:	2b08      	cmp	r3, #8
 8016e80:	f105 0501 	add.w	r5, r5, #1
 8016e84:	4405      	add	r5, r0
 8016e86:	dc1c      	bgt.n	8016ec2 <_strtod_l+0x272>
 8016e88:	9907      	ldr	r1, [sp, #28]
 8016e8a:	230a      	movs	r3, #10
 8016e8c:	fb03 2301 	mla	r3, r3, r1, r2
 8016e90:	9307      	str	r3, [sp, #28]
 8016e92:	2300      	movs	r3, #0
 8016e94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e96:	1c51      	adds	r1, r2, #1
 8016e98:	9117      	str	r1, [sp, #92]	; 0x5c
 8016e9a:	7852      	ldrb	r2, [r2, #1]
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	e7c9      	b.n	8016e34 <_strtod_l+0x1e4>
 8016ea0:	4638      	mov	r0, r7
 8016ea2:	e7d2      	b.n	8016e4a <_strtod_l+0x1fa>
 8016ea4:	2b08      	cmp	r3, #8
 8016ea6:	dc04      	bgt.n	8016eb2 <_strtod_l+0x262>
 8016ea8:	9e07      	ldr	r6, [sp, #28]
 8016eaa:	434e      	muls	r6, r1
 8016eac:	9607      	str	r6, [sp, #28]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	e7e2      	b.n	8016e78 <_strtod_l+0x228>
 8016eb2:	f103 0c01 	add.w	ip, r3, #1
 8016eb6:	f1bc 0f10 	cmp.w	ip, #16
 8016eba:	bfd8      	it	le
 8016ebc:	fb01 f909 	mulle.w	r9, r1, r9
 8016ec0:	e7f5      	b.n	8016eae <_strtod_l+0x25e>
 8016ec2:	2d10      	cmp	r5, #16
 8016ec4:	bfdc      	itt	le
 8016ec6:	230a      	movle	r3, #10
 8016ec8:	fb03 2909 	mlale	r9, r3, r9, r2
 8016ecc:	e7e1      	b.n	8016e92 <_strtod_l+0x242>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	9305      	str	r3, [sp, #20]
 8016ed2:	2301      	movs	r3, #1
 8016ed4:	e77c      	b.n	8016dd0 <_strtod_l+0x180>
 8016ed6:	f04f 0c00 	mov.w	ip, #0
 8016eda:	f108 0202 	add.w	r2, r8, #2
 8016ede:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ee0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016ee4:	e785      	b.n	8016df2 <_strtod_l+0x1a2>
 8016ee6:	f04f 0c01 	mov.w	ip, #1
 8016eea:	e7f6      	b.n	8016eda <_strtod_l+0x28a>
 8016eec:	0801d058 	.word	0x0801d058
 8016ef0:	0801cef4 	.word	0x0801cef4
 8016ef4:	7ff00000 	.word	0x7ff00000
 8016ef8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016efa:	1c51      	adds	r1, r2, #1
 8016efc:	9117      	str	r1, [sp, #92]	; 0x5c
 8016efe:	7852      	ldrb	r2, [r2, #1]
 8016f00:	2a30      	cmp	r2, #48	; 0x30
 8016f02:	d0f9      	beq.n	8016ef8 <_strtod_l+0x2a8>
 8016f04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016f08:	2908      	cmp	r1, #8
 8016f0a:	f63f af79 	bhi.w	8016e00 <_strtod_l+0x1b0>
 8016f0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016f12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f14:	9206      	str	r2, [sp, #24]
 8016f16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f18:	1c51      	adds	r1, r2, #1
 8016f1a:	9117      	str	r1, [sp, #92]	; 0x5c
 8016f1c:	7852      	ldrb	r2, [r2, #1]
 8016f1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016f22:	2e09      	cmp	r6, #9
 8016f24:	d937      	bls.n	8016f96 <_strtod_l+0x346>
 8016f26:	9e06      	ldr	r6, [sp, #24]
 8016f28:	1b89      	subs	r1, r1, r6
 8016f2a:	2908      	cmp	r1, #8
 8016f2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016f30:	dc02      	bgt.n	8016f38 <_strtod_l+0x2e8>
 8016f32:	4576      	cmp	r6, lr
 8016f34:	bfa8      	it	ge
 8016f36:	4676      	movge	r6, lr
 8016f38:	f1bc 0f00 	cmp.w	ip, #0
 8016f3c:	d000      	beq.n	8016f40 <_strtod_l+0x2f0>
 8016f3e:	4276      	negs	r6, r6
 8016f40:	2d00      	cmp	r5, #0
 8016f42:	d14d      	bne.n	8016fe0 <_strtod_l+0x390>
 8016f44:	9904      	ldr	r1, [sp, #16]
 8016f46:	4301      	orrs	r1, r0
 8016f48:	f47f aec6 	bne.w	8016cd8 <_strtod_l+0x88>
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	f47f aee1 	bne.w	8016d14 <_strtod_l+0xc4>
 8016f52:	2a69      	cmp	r2, #105	; 0x69
 8016f54:	d027      	beq.n	8016fa6 <_strtod_l+0x356>
 8016f56:	dc24      	bgt.n	8016fa2 <_strtod_l+0x352>
 8016f58:	2a49      	cmp	r2, #73	; 0x49
 8016f5a:	d024      	beq.n	8016fa6 <_strtod_l+0x356>
 8016f5c:	2a4e      	cmp	r2, #78	; 0x4e
 8016f5e:	f47f aed9 	bne.w	8016d14 <_strtod_l+0xc4>
 8016f62:	499f      	ldr	r1, [pc, #636]	; (80171e0 <_strtod_l+0x590>)
 8016f64:	a817      	add	r0, sp, #92	; 0x5c
 8016f66:	f001 f8b5 	bl	80180d4 <__match>
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	f43f aed2 	beq.w	8016d14 <_strtod_l+0xc4>
 8016f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	2b28      	cmp	r3, #40	; 0x28
 8016f76:	d12d      	bne.n	8016fd4 <_strtod_l+0x384>
 8016f78:	499a      	ldr	r1, [pc, #616]	; (80171e4 <_strtod_l+0x594>)
 8016f7a:	aa1a      	add	r2, sp, #104	; 0x68
 8016f7c:	a817      	add	r0, sp, #92	; 0x5c
 8016f7e:	f001 f8bd 	bl	80180fc <__hexnan>
 8016f82:	2805      	cmp	r0, #5
 8016f84:	d126      	bne.n	8016fd4 <_strtod_l+0x384>
 8016f86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8016f8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016f90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016f94:	e6a0      	b.n	8016cd8 <_strtod_l+0x88>
 8016f96:	210a      	movs	r1, #10
 8016f98:	fb01 2e0e 	mla	lr, r1, lr, r2
 8016f9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016fa0:	e7b9      	b.n	8016f16 <_strtod_l+0x2c6>
 8016fa2:	2a6e      	cmp	r2, #110	; 0x6e
 8016fa4:	e7db      	b.n	8016f5e <_strtod_l+0x30e>
 8016fa6:	4990      	ldr	r1, [pc, #576]	; (80171e8 <_strtod_l+0x598>)
 8016fa8:	a817      	add	r0, sp, #92	; 0x5c
 8016faa:	f001 f893 	bl	80180d4 <__match>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f43f aeb0 	beq.w	8016d14 <_strtod_l+0xc4>
 8016fb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fb6:	498d      	ldr	r1, [pc, #564]	; (80171ec <_strtod_l+0x59c>)
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	a817      	add	r0, sp, #92	; 0x5c
 8016fbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8016fbe:	f001 f889 	bl	80180d4 <__match>
 8016fc2:	b910      	cbnz	r0, 8016fca <_strtod_l+0x37a>
 8016fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fc6:	3301      	adds	r3, #1
 8016fc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8016fca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80171fc <_strtod_l+0x5ac>
 8016fce:	f04f 0a00 	mov.w	sl, #0
 8016fd2:	e681      	b.n	8016cd8 <_strtod_l+0x88>
 8016fd4:	4886      	ldr	r0, [pc, #536]	; (80171f0 <_strtod_l+0x5a0>)
 8016fd6:	f002 fae7 	bl	80195a8 <nan>
 8016fda:	ec5b ab10 	vmov	sl, fp, d0
 8016fde:	e67b      	b.n	8016cd8 <_strtod_l+0x88>
 8016fe0:	9b05      	ldr	r3, [sp, #20]
 8016fe2:	9807      	ldr	r0, [sp, #28]
 8016fe4:	1af3      	subs	r3, r6, r3
 8016fe6:	2f00      	cmp	r7, #0
 8016fe8:	bf08      	it	eq
 8016fea:	462f      	moveq	r7, r5
 8016fec:	2d10      	cmp	r5, #16
 8016fee:	9306      	str	r3, [sp, #24]
 8016ff0:	46a8      	mov	r8, r5
 8016ff2:	bfa8      	it	ge
 8016ff4:	f04f 0810 	movge.w	r8, #16
 8016ff8:	f7e9 faa4 	bl	8000544 <__aeabi_ui2d>
 8016ffc:	2d09      	cmp	r5, #9
 8016ffe:	4682      	mov	sl, r0
 8017000:	468b      	mov	fp, r1
 8017002:	dd13      	ble.n	801702c <_strtod_l+0x3dc>
 8017004:	4b7b      	ldr	r3, [pc, #492]	; (80171f4 <_strtod_l+0x5a4>)
 8017006:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801700a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801700e:	f7e9 fb13 	bl	8000638 <__aeabi_dmul>
 8017012:	4682      	mov	sl, r0
 8017014:	4648      	mov	r0, r9
 8017016:	468b      	mov	fp, r1
 8017018:	f7e9 fa94 	bl	8000544 <__aeabi_ui2d>
 801701c:	4602      	mov	r2, r0
 801701e:	460b      	mov	r3, r1
 8017020:	4650      	mov	r0, sl
 8017022:	4659      	mov	r1, fp
 8017024:	f7e9 f952 	bl	80002cc <__adddf3>
 8017028:	4682      	mov	sl, r0
 801702a:	468b      	mov	fp, r1
 801702c:	2d0f      	cmp	r5, #15
 801702e:	dc38      	bgt.n	80170a2 <_strtod_l+0x452>
 8017030:	9b06      	ldr	r3, [sp, #24]
 8017032:	2b00      	cmp	r3, #0
 8017034:	f43f ae50 	beq.w	8016cd8 <_strtod_l+0x88>
 8017038:	dd24      	ble.n	8017084 <_strtod_l+0x434>
 801703a:	2b16      	cmp	r3, #22
 801703c:	dc0b      	bgt.n	8017056 <_strtod_l+0x406>
 801703e:	496d      	ldr	r1, [pc, #436]	; (80171f4 <_strtod_l+0x5a4>)
 8017040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017048:	4652      	mov	r2, sl
 801704a:	465b      	mov	r3, fp
 801704c:	f7e9 faf4 	bl	8000638 <__aeabi_dmul>
 8017050:	4682      	mov	sl, r0
 8017052:	468b      	mov	fp, r1
 8017054:	e640      	b.n	8016cd8 <_strtod_l+0x88>
 8017056:	9a06      	ldr	r2, [sp, #24]
 8017058:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801705c:	4293      	cmp	r3, r2
 801705e:	db20      	blt.n	80170a2 <_strtod_l+0x452>
 8017060:	4c64      	ldr	r4, [pc, #400]	; (80171f4 <_strtod_l+0x5a4>)
 8017062:	f1c5 050f 	rsb	r5, r5, #15
 8017066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801706a:	4652      	mov	r2, sl
 801706c:	465b      	mov	r3, fp
 801706e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017072:	f7e9 fae1 	bl	8000638 <__aeabi_dmul>
 8017076:	9b06      	ldr	r3, [sp, #24]
 8017078:	1b5d      	subs	r5, r3, r5
 801707a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801707e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017082:	e7e3      	b.n	801704c <_strtod_l+0x3fc>
 8017084:	9b06      	ldr	r3, [sp, #24]
 8017086:	3316      	adds	r3, #22
 8017088:	db0b      	blt.n	80170a2 <_strtod_l+0x452>
 801708a:	9b05      	ldr	r3, [sp, #20]
 801708c:	1b9e      	subs	r6, r3, r6
 801708e:	4b59      	ldr	r3, [pc, #356]	; (80171f4 <_strtod_l+0x5a4>)
 8017090:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8017094:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017098:	4650      	mov	r0, sl
 801709a:	4659      	mov	r1, fp
 801709c:	f7e9 fbf6 	bl	800088c <__aeabi_ddiv>
 80170a0:	e7d6      	b.n	8017050 <_strtod_l+0x400>
 80170a2:	9b06      	ldr	r3, [sp, #24]
 80170a4:	eba5 0808 	sub.w	r8, r5, r8
 80170a8:	4498      	add	r8, r3
 80170aa:	f1b8 0f00 	cmp.w	r8, #0
 80170ae:	dd74      	ble.n	801719a <_strtod_l+0x54a>
 80170b0:	f018 030f 	ands.w	r3, r8, #15
 80170b4:	d00a      	beq.n	80170cc <_strtod_l+0x47c>
 80170b6:	494f      	ldr	r1, [pc, #316]	; (80171f4 <_strtod_l+0x5a4>)
 80170b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80170bc:	4652      	mov	r2, sl
 80170be:	465b      	mov	r3, fp
 80170c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170c4:	f7e9 fab8 	bl	8000638 <__aeabi_dmul>
 80170c8:	4682      	mov	sl, r0
 80170ca:	468b      	mov	fp, r1
 80170cc:	f038 080f 	bics.w	r8, r8, #15
 80170d0:	d04f      	beq.n	8017172 <_strtod_l+0x522>
 80170d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80170d6:	dd22      	ble.n	801711e <_strtod_l+0x4ce>
 80170d8:	2500      	movs	r5, #0
 80170da:	462e      	mov	r6, r5
 80170dc:	9507      	str	r5, [sp, #28]
 80170de:	9505      	str	r5, [sp, #20]
 80170e0:	2322      	movs	r3, #34	; 0x22
 80170e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80171fc <_strtod_l+0x5ac>
 80170e6:	6023      	str	r3, [r4, #0]
 80170e8:	f04f 0a00 	mov.w	sl, #0
 80170ec:	9b07      	ldr	r3, [sp, #28]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f43f adf2 	beq.w	8016cd8 <_strtod_l+0x88>
 80170f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80170f6:	4620      	mov	r0, r4
 80170f8:	f001 f914 	bl	8018324 <_Bfree>
 80170fc:	9905      	ldr	r1, [sp, #20]
 80170fe:	4620      	mov	r0, r4
 8017100:	f001 f910 	bl	8018324 <_Bfree>
 8017104:	4631      	mov	r1, r6
 8017106:	4620      	mov	r0, r4
 8017108:	f001 f90c 	bl	8018324 <_Bfree>
 801710c:	9907      	ldr	r1, [sp, #28]
 801710e:	4620      	mov	r0, r4
 8017110:	f001 f908 	bl	8018324 <_Bfree>
 8017114:	4629      	mov	r1, r5
 8017116:	4620      	mov	r0, r4
 8017118:	f001 f904 	bl	8018324 <_Bfree>
 801711c:	e5dc      	b.n	8016cd8 <_strtod_l+0x88>
 801711e:	4b36      	ldr	r3, [pc, #216]	; (80171f8 <_strtod_l+0x5a8>)
 8017120:	9304      	str	r3, [sp, #16]
 8017122:	2300      	movs	r3, #0
 8017124:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017128:	4650      	mov	r0, sl
 801712a:	4659      	mov	r1, fp
 801712c:	4699      	mov	r9, r3
 801712e:	f1b8 0f01 	cmp.w	r8, #1
 8017132:	dc21      	bgt.n	8017178 <_strtod_l+0x528>
 8017134:	b10b      	cbz	r3, 801713a <_strtod_l+0x4ea>
 8017136:	4682      	mov	sl, r0
 8017138:	468b      	mov	fp, r1
 801713a:	4b2f      	ldr	r3, [pc, #188]	; (80171f8 <_strtod_l+0x5a8>)
 801713c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017140:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017144:	4652      	mov	r2, sl
 8017146:	465b      	mov	r3, fp
 8017148:	e9d9 0100 	ldrd	r0, r1, [r9]
 801714c:	f7e9 fa74 	bl	8000638 <__aeabi_dmul>
 8017150:	4b2a      	ldr	r3, [pc, #168]	; (80171fc <_strtod_l+0x5ac>)
 8017152:	460a      	mov	r2, r1
 8017154:	400b      	ands	r3, r1
 8017156:	492a      	ldr	r1, [pc, #168]	; (8017200 <_strtod_l+0x5b0>)
 8017158:	428b      	cmp	r3, r1
 801715a:	4682      	mov	sl, r0
 801715c:	d8bc      	bhi.n	80170d8 <_strtod_l+0x488>
 801715e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017162:	428b      	cmp	r3, r1
 8017164:	bf86      	itte	hi
 8017166:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8017204 <_strtod_l+0x5b4>
 801716a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801716e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017172:	2300      	movs	r3, #0
 8017174:	9304      	str	r3, [sp, #16]
 8017176:	e084      	b.n	8017282 <_strtod_l+0x632>
 8017178:	f018 0f01 	tst.w	r8, #1
 801717c:	d005      	beq.n	801718a <_strtod_l+0x53a>
 801717e:	9b04      	ldr	r3, [sp, #16]
 8017180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017184:	f7e9 fa58 	bl	8000638 <__aeabi_dmul>
 8017188:	2301      	movs	r3, #1
 801718a:	9a04      	ldr	r2, [sp, #16]
 801718c:	3208      	adds	r2, #8
 801718e:	f109 0901 	add.w	r9, r9, #1
 8017192:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017196:	9204      	str	r2, [sp, #16]
 8017198:	e7c9      	b.n	801712e <_strtod_l+0x4de>
 801719a:	d0ea      	beq.n	8017172 <_strtod_l+0x522>
 801719c:	f1c8 0800 	rsb	r8, r8, #0
 80171a0:	f018 020f 	ands.w	r2, r8, #15
 80171a4:	d00a      	beq.n	80171bc <_strtod_l+0x56c>
 80171a6:	4b13      	ldr	r3, [pc, #76]	; (80171f4 <_strtod_l+0x5a4>)
 80171a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171ac:	4650      	mov	r0, sl
 80171ae:	4659      	mov	r1, fp
 80171b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b4:	f7e9 fb6a 	bl	800088c <__aeabi_ddiv>
 80171b8:	4682      	mov	sl, r0
 80171ba:	468b      	mov	fp, r1
 80171bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80171c0:	d0d7      	beq.n	8017172 <_strtod_l+0x522>
 80171c2:	f1b8 0f1f 	cmp.w	r8, #31
 80171c6:	dd1f      	ble.n	8017208 <_strtod_l+0x5b8>
 80171c8:	2500      	movs	r5, #0
 80171ca:	462e      	mov	r6, r5
 80171cc:	9507      	str	r5, [sp, #28]
 80171ce:	9505      	str	r5, [sp, #20]
 80171d0:	2322      	movs	r3, #34	; 0x22
 80171d2:	f04f 0a00 	mov.w	sl, #0
 80171d6:	f04f 0b00 	mov.w	fp, #0
 80171da:	6023      	str	r3, [r4, #0]
 80171dc:	e786      	b.n	80170ec <_strtod_l+0x49c>
 80171de:	bf00      	nop
 80171e0:	0801ceef 	.word	0x0801ceef
 80171e4:	0801cf08 	.word	0x0801cf08
 80171e8:	0801cee6 	.word	0x0801cee6
 80171ec:	0801cee9 	.word	0x0801cee9
 80171f0:	0801cfe0 	.word	0x0801cfe0
 80171f4:	0801d0f0 	.word	0x0801d0f0
 80171f8:	0801d0c8 	.word	0x0801d0c8
 80171fc:	7ff00000 	.word	0x7ff00000
 8017200:	7ca00000 	.word	0x7ca00000
 8017204:	7fefffff 	.word	0x7fefffff
 8017208:	f018 0310 	ands.w	r3, r8, #16
 801720c:	bf18      	it	ne
 801720e:	236a      	movne	r3, #106	; 0x6a
 8017210:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80175c0 <_strtod_l+0x970>
 8017214:	9304      	str	r3, [sp, #16]
 8017216:	4650      	mov	r0, sl
 8017218:	4659      	mov	r1, fp
 801721a:	2300      	movs	r3, #0
 801721c:	f018 0f01 	tst.w	r8, #1
 8017220:	d004      	beq.n	801722c <_strtod_l+0x5dc>
 8017222:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017226:	f7e9 fa07 	bl	8000638 <__aeabi_dmul>
 801722a:	2301      	movs	r3, #1
 801722c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017230:	f109 0908 	add.w	r9, r9, #8
 8017234:	d1f2      	bne.n	801721c <_strtod_l+0x5cc>
 8017236:	b10b      	cbz	r3, 801723c <_strtod_l+0x5ec>
 8017238:	4682      	mov	sl, r0
 801723a:	468b      	mov	fp, r1
 801723c:	9b04      	ldr	r3, [sp, #16]
 801723e:	b1c3      	cbz	r3, 8017272 <_strtod_l+0x622>
 8017240:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017244:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017248:	2b00      	cmp	r3, #0
 801724a:	4659      	mov	r1, fp
 801724c:	dd11      	ble.n	8017272 <_strtod_l+0x622>
 801724e:	2b1f      	cmp	r3, #31
 8017250:	f340 8124 	ble.w	801749c <_strtod_l+0x84c>
 8017254:	2b34      	cmp	r3, #52	; 0x34
 8017256:	bfde      	ittt	le
 8017258:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801725c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8017260:	fa03 f202 	lslle.w	r2, r3, r2
 8017264:	f04f 0a00 	mov.w	sl, #0
 8017268:	bfcc      	ite	gt
 801726a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801726e:	ea02 0b01 	andle.w	fp, r2, r1
 8017272:	2200      	movs	r2, #0
 8017274:	2300      	movs	r3, #0
 8017276:	4650      	mov	r0, sl
 8017278:	4659      	mov	r1, fp
 801727a:	f7e9 fc45 	bl	8000b08 <__aeabi_dcmpeq>
 801727e:	2800      	cmp	r0, #0
 8017280:	d1a2      	bne.n	80171c8 <_strtod_l+0x578>
 8017282:	9b07      	ldr	r3, [sp, #28]
 8017284:	9300      	str	r3, [sp, #0]
 8017286:	9908      	ldr	r1, [sp, #32]
 8017288:	462b      	mov	r3, r5
 801728a:	463a      	mov	r2, r7
 801728c:	4620      	mov	r0, r4
 801728e:	f001 f8b1 	bl	80183f4 <__s2b>
 8017292:	9007      	str	r0, [sp, #28]
 8017294:	2800      	cmp	r0, #0
 8017296:	f43f af1f 	beq.w	80170d8 <_strtod_l+0x488>
 801729a:	9b05      	ldr	r3, [sp, #20]
 801729c:	1b9e      	subs	r6, r3, r6
 801729e:	9b06      	ldr	r3, [sp, #24]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	bfb4      	ite	lt
 80172a4:	4633      	movlt	r3, r6
 80172a6:	2300      	movge	r3, #0
 80172a8:	930c      	str	r3, [sp, #48]	; 0x30
 80172aa:	9b06      	ldr	r3, [sp, #24]
 80172ac:	2500      	movs	r5, #0
 80172ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80172b2:	9312      	str	r3, [sp, #72]	; 0x48
 80172b4:	462e      	mov	r6, r5
 80172b6:	9b07      	ldr	r3, [sp, #28]
 80172b8:	4620      	mov	r0, r4
 80172ba:	6859      	ldr	r1, [r3, #4]
 80172bc:	f000 fff2 	bl	80182a4 <_Balloc>
 80172c0:	9005      	str	r0, [sp, #20]
 80172c2:	2800      	cmp	r0, #0
 80172c4:	f43f af0c 	beq.w	80170e0 <_strtod_l+0x490>
 80172c8:	9b07      	ldr	r3, [sp, #28]
 80172ca:	691a      	ldr	r2, [r3, #16]
 80172cc:	3202      	adds	r2, #2
 80172ce:	f103 010c 	add.w	r1, r3, #12
 80172d2:	0092      	lsls	r2, r2, #2
 80172d4:	300c      	adds	r0, #12
 80172d6:	f7ff fa7e 	bl	80167d6 <memcpy>
 80172da:	ec4b ab10 	vmov	d0, sl, fp
 80172de:	aa1a      	add	r2, sp, #104	; 0x68
 80172e0:	a919      	add	r1, sp, #100	; 0x64
 80172e2:	4620      	mov	r0, r4
 80172e4:	f001 fbcc 	bl	8018a80 <__d2b>
 80172e8:	ec4b ab18 	vmov	d8, sl, fp
 80172ec:	9018      	str	r0, [sp, #96]	; 0x60
 80172ee:	2800      	cmp	r0, #0
 80172f0:	f43f aef6 	beq.w	80170e0 <_strtod_l+0x490>
 80172f4:	2101      	movs	r1, #1
 80172f6:	4620      	mov	r0, r4
 80172f8:	f001 f916 	bl	8018528 <__i2b>
 80172fc:	4606      	mov	r6, r0
 80172fe:	2800      	cmp	r0, #0
 8017300:	f43f aeee 	beq.w	80170e0 <_strtod_l+0x490>
 8017304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017306:	9904      	ldr	r1, [sp, #16]
 8017308:	2b00      	cmp	r3, #0
 801730a:	bfab      	itete	ge
 801730c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801730e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017310:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017312:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8017316:	bfac      	ite	ge
 8017318:	eb03 0902 	addge.w	r9, r3, r2
 801731c:	1ad7      	sublt	r7, r2, r3
 801731e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017320:	eba3 0801 	sub.w	r8, r3, r1
 8017324:	4490      	add	r8, r2
 8017326:	4ba1      	ldr	r3, [pc, #644]	; (80175ac <_strtod_l+0x95c>)
 8017328:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801732c:	4598      	cmp	r8, r3
 801732e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017332:	f280 80c7 	bge.w	80174c4 <_strtod_l+0x874>
 8017336:	eba3 0308 	sub.w	r3, r3, r8
 801733a:	2b1f      	cmp	r3, #31
 801733c:	eba2 0203 	sub.w	r2, r2, r3
 8017340:	f04f 0101 	mov.w	r1, #1
 8017344:	f300 80b1 	bgt.w	80174aa <_strtod_l+0x85a>
 8017348:	fa01 f303 	lsl.w	r3, r1, r3
 801734c:	930d      	str	r3, [sp, #52]	; 0x34
 801734e:	2300      	movs	r3, #0
 8017350:	9308      	str	r3, [sp, #32]
 8017352:	eb09 0802 	add.w	r8, r9, r2
 8017356:	9b04      	ldr	r3, [sp, #16]
 8017358:	45c1      	cmp	r9, r8
 801735a:	4417      	add	r7, r2
 801735c:	441f      	add	r7, r3
 801735e:	464b      	mov	r3, r9
 8017360:	bfa8      	it	ge
 8017362:	4643      	movge	r3, r8
 8017364:	42bb      	cmp	r3, r7
 8017366:	bfa8      	it	ge
 8017368:	463b      	movge	r3, r7
 801736a:	2b00      	cmp	r3, #0
 801736c:	bfc2      	ittt	gt
 801736e:	eba8 0803 	subgt.w	r8, r8, r3
 8017372:	1aff      	subgt	r7, r7, r3
 8017374:	eba9 0903 	subgt.w	r9, r9, r3
 8017378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801737a:	2b00      	cmp	r3, #0
 801737c:	dd17      	ble.n	80173ae <_strtod_l+0x75e>
 801737e:	4631      	mov	r1, r6
 8017380:	461a      	mov	r2, r3
 8017382:	4620      	mov	r0, r4
 8017384:	f001 f990 	bl	80186a8 <__pow5mult>
 8017388:	4606      	mov	r6, r0
 801738a:	2800      	cmp	r0, #0
 801738c:	f43f aea8 	beq.w	80170e0 <_strtod_l+0x490>
 8017390:	4601      	mov	r1, r0
 8017392:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017394:	4620      	mov	r0, r4
 8017396:	f001 f8dd 	bl	8018554 <__multiply>
 801739a:	900b      	str	r0, [sp, #44]	; 0x2c
 801739c:	2800      	cmp	r0, #0
 801739e:	f43f ae9f 	beq.w	80170e0 <_strtod_l+0x490>
 80173a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80173a4:	4620      	mov	r0, r4
 80173a6:	f000 ffbd 	bl	8018324 <_Bfree>
 80173aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173ac:	9318      	str	r3, [sp, #96]	; 0x60
 80173ae:	f1b8 0f00 	cmp.w	r8, #0
 80173b2:	f300 808c 	bgt.w	80174ce <_strtod_l+0x87e>
 80173b6:	9b06      	ldr	r3, [sp, #24]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	dd08      	ble.n	80173ce <_strtod_l+0x77e>
 80173bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80173be:	9905      	ldr	r1, [sp, #20]
 80173c0:	4620      	mov	r0, r4
 80173c2:	f001 f971 	bl	80186a8 <__pow5mult>
 80173c6:	9005      	str	r0, [sp, #20]
 80173c8:	2800      	cmp	r0, #0
 80173ca:	f43f ae89 	beq.w	80170e0 <_strtod_l+0x490>
 80173ce:	2f00      	cmp	r7, #0
 80173d0:	dd08      	ble.n	80173e4 <_strtod_l+0x794>
 80173d2:	9905      	ldr	r1, [sp, #20]
 80173d4:	463a      	mov	r2, r7
 80173d6:	4620      	mov	r0, r4
 80173d8:	f001 f9c0 	bl	801875c <__lshift>
 80173dc:	9005      	str	r0, [sp, #20]
 80173de:	2800      	cmp	r0, #0
 80173e0:	f43f ae7e 	beq.w	80170e0 <_strtod_l+0x490>
 80173e4:	f1b9 0f00 	cmp.w	r9, #0
 80173e8:	dd08      	ble.n	80173fc <_strtod_l+0x7ac>
 80173ea:	4631      	mov	r1, r6
 80173ec:	464a      	mov	r2, r9
 80173ee:	4620      	mov	r0, r4
 80173f0:	f001 f9b4 	bl	801875c <__lshift>
 80173f4:	4606      	mov	r6, r0
 80173f6:	2800      	cmp	r0, #0
 80173f8:	f43f ae72 	beq.w	80170e0 <_strtod_l+0x490>
 80173fc:	9a05      	ldr	r2, [sp, #20]
 80173fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017400:	4620      	mov	r0, r4
 8017402:	f001 fa37 	bl	8018874 <__mdiff>
 8017406:	4605      	mov	r5, r0
 8017408:	2800      	cmp	r0, #0
 801740a:	f43f ae69 	beq.w	80170e0 <_strtod_l+0x490>
 801740e:	68c3      	ldr	r3, [r0, #12]
 8017410:	930b      	str	r3, [sp, #44]	; 0x2c
 8017412:	2300      	movs	r3, #0
 8017414:	60c3      	str	r3, [r0, #12]
 8017416:	4631      	mov	r1, r6
 8017418:	f001 fa10 	bl	801883c <__mcmp>
 801741c:	2800      	cmp	r0, #0
 801741e:	da60      	bge.n	80174e2 <_strtod_l+0x892>
 8017420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017422:	ea53 030a 	orrs.w	r3, r3, sl
 8017426:	f040 8082 	bne.w	801752e <_strtod_l+0x8de>
 801742a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801742e:	2b00      	cmp	r3, #0
 8017430:	d17d      	bne.n	801752e <_strtod_l+0x8de>
 8017432:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017436:	0d1b      	lsrs	r3, r3, #20
 8017438:	051b      	lsls	r3, r3, #20
 801743a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801743e:	d976      	bls.n	801752e <_strtod_l+0x8de>
 8017440:	696b      	ldr	r3, [r5, #20]
 8017442:	b913      	cbnz	r3, 801744a <_strtod_l+0x7fa>
 8017444:	692b      	ldr	r3, [r5, #16]
 8017446:	2b01      	cmp	r3, #1
 8017448:	dd71      	ble.n	801752e <_strtod_l+0x8de>
 801744a:	4629      	mov	r1, r5
 801744c:	2201      	movs	r2, #1
 801744e:	4620      	mov	r0, r4
 8017450:	f001 f984 	bl	801875c <__lshift>
 8017454:	4631      	mov	r1, r6
 8017456:	4605      	mov	r5, r0
 8017458:	f001 f9f0 	bl	801883c <__mcmp>
 801745c:	2800      	cmp	r0, #0
 801745e:	dd66      	ble.n	801752e <_strtod_l+0x8de>
 8017460:	9904      	ldr	r1, [sp, #16]
 8017462:	4a53      	ldr	r2, [pc, #332]	; (80175b0 <_strtod_l+0x960>)
 8017464:	465b      	mov	r3, fp
 8017466:	2900      	cmp	r1, #0
 8017468:	f000 8081 	beq.w	801756e <_strtod_l+0x91e>
 801746c:	ea02 010b 	and.w	r1, r2, fp
 8017470:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017474:	dc7b      	bgt.n	801756e <_strtod_l+0x91e>
 8017476:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801747a:	f77f aea9 	ble.w	80171d0 <_strtod_l+0x580>
 801747e:	4b4d      	ldr	r3, [pc, #308]	; (80175b4 <_strtod_l+0x964>)
 8017480:	4650      	mov	r0, sl
 8017482:	4659      	mov	r1, fp
 8017484:	2200      	movs	r2, #0
 8017486:	f7e9 f8d7 	bl	8000638 <__aeabi_dmul>
 801748a:	460b      	mov	r3, r1
 801748c:	4303      	orrs	r3, r0
 801748e:	bf08      	it	eq
 8017490:	2322      	moveq	r3, #34	; 0x22
 8017492:	4682      	mov	sl, r0
 8017494:	468b      	mov	fp, r1
 8017496:	bf08      	it	eq
 8017498:	6023      	streq	r3, [r4, #0]
 801749a:	e62b      	b.n	80170f4 <_strtod_l+0x4a4>
 801749c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80174a0:	fa02 f303 	lsl.w	r3, r2, r3
 80174a4:	ea03 0a0a 	and.w	sl, r3, sl
 80174a8:	e6e3      	b.n	8017272 <_strtod_l+0x622>
 80174aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80174ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80174b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80174b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80174ba:	fa01 f308 	lsl.w	r3, r1, r8
 80174be:	9308      	str	r3, [sp, #32]
 80174c0:	910d      	str	r1, [sp, #52]	; 0x34
 80174c2:	e746      	b.n	8017352 <_strtod_l+0x702>
 80174c4:	2300      	movs	r3, #0
 80174c6:	9308      	str	r3, [sp, #32]
 80174c8:	2301      	movs	r3, #1
 80174ca:	930d      	str	r3, [sp, #52]	; 0x34
 80174cc:	e741      	b.n	8017352 <_strtod_l+0x702>
 80174ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80174d0:	4642      	mov	r2, r8
 80174d2:	4620      	mov	r0, r4
 80174d4:	f001 f942 	bl	801875c <__lshift>
 80174d8:	9018      	str	r0, [sp, #96]	; 0x60
 80174da:	2800      	cmp	r0, #0
 80174dc:	f47f af6b 	bne.w	80173b6 <_strtod_l+0x766>
 80174e0:	e5fe      	b.n	80170e0 <_strtod_l+0x490>
 80174e2:	465f      	mov	r7, fp
 80174e4:	d16e      	bne.n	80175c4 <_strtod_l+0x974>
 80174e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174ec:	b342      	cbz	r2, 8017540 <_strtod_l+0x8f0>
 80174ee:	4a32      	ldr	r2, [pc, #200]	; (80175b8 <_strtod_l+0x968>)
 80174f0:	4293      	cmp	r3, r2
 80174f2:	d128      	bne.n	8017546 <_strtod_l+0x8f6>
 80174f4:	9b04      	ldr	r3, [sp, #16]
 80174f6:	4651      	mov	r1, sl
 80174f8:	b1eb      	cbz	r3, 8017536 <_strtod_l+0x8e6>
 80174fa:	4b2d      	ldr	r3, [pc, #180]	; (80175b0 <_strtod_l+0x960>)
 80174fc:	403b      	ands	r3, r7
 80174fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017506:	d819      	bhi.n	801753c <_strtod_l+0x8ec>
 8017508:	0d1b      	lsrs	r3, r3, #20
 801750a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801750e:	fa02 f303 	lsl.w	r3, r2, r3
 8017512:	4299      	cmp	r1, r3
 8017514:	d117      	bne.n	8017546 <_strtod_l+0x8f6>
 8017516:	4b29      	ldr	r3, [pc, #164]	; (80175bc <_strtod_l+0x96c>)
 8017518:	429f      	cmp	r7, r3
 801751a:	d102      	bne.n	8017522 <_strtod_l+0x8d2>
 801751c:	3101      	adds	r1, #1
 801751e:	f43f addf 	beq.w	80170e0 <_strtod_l+0x490>
 8017522:	4b23      	ldr	r3, [pc, #140]	; (80175b0 <_strtod_l+0x960>)
 8017524:	403b      	ands	r3, r7
 8017526:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801752a:	f04f 0a00 	mov.w	sl, #0
 801752e:	9b04      	ldr	r3, [sp, #16]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d1a4      	bne.n	801747e <_strtod_l+0x82e>
 8017534:	e5de      	b.n	80170f4 <_strtod_l+0x4a4>
 8017536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801753a:	e7ea      	b.n	8017512 <_strtod_l+0x8c2>
 801753c:	4613      	mov	r3, r2
 801753e:	e7e8      	b.n	8017512 <_strtod_l+0x8c2>
 8017540:	ea53 030a 	orrs.w	r3, r3, sl
 8017544:	d08c      	beq.n	8017460 <_strtod_l+0x810>
 8017546:	9b08      	ldr	r3, [sp, #32]
 8017548:	b1db      	cbz	r3, 8017582 <_strtod_l+0x932>
 801754a:	423b      	tst	r3, r7
 801754c:	d0ef      	beq.n	801752e <_strtod_l+0x8de>
 801754e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017550:	9a04      	ldr	r2, [sp, #16]
 8017552:	4650      	mov	r0, sl
 8017554:	4659      	mov	r1, fp
 8017556:	b1c3      	cbz	r3, 801758a <_strtod_l+0x93a>
 8017558:	f7ff fb5c 	bl	8016c14 <sulp>
 801755c:	4602      	mov	r2, r0
 801755e:	460b      	mov	r3, r1
 8017560:	ec51 0b18 	vmov	r0, r1, d8
 8017564:	f7e8 feb2 	bl	80002cc <__adddf3>
 8017568:	4682      	mov	sl, r0
 801756a:	468b      	mov	fp, r1
 801756c:	e7df      	b.n	801752e <_strtod_l+0x8de>
 801756e:	4013      	ands	r3, r2
 8017570:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017574:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017578:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801757c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017580:	e7d5      	b.n	801752e <_strtod_l+0x8de>
 8017582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017584:	ea13 0f0a 	tst.w	r3, sl
 8017588:	e7e0      	b.n	801754c <_strtod_l+0x8fc>
 801758a:	f7ff fb43 	bl	8016c14 <sulp>
 801758e:	4602      	mov	r2, r0
 8017590:	460b      	mov	r3, r1
 8017592:	ec51 0b18 	vmov	r0, r1, d8
 8017596:	f7e8 fe97 	bl	80002c8 <__aeabi_dsub>
 801759a:	2200      	movs	r2, #0
 801759c:	2300      	movs	r3, #0
 801759e:	4682      	mov	sl, r0
 80175a0:	468b      	mov	fp, r1
 80175a2:	f7e9 fab1 	bl	8000b08 <__aeabi_dcmpeq>
 80175a6:	2800      	cmp	r0, #0
 80175a8:	d0c1      	beq.n	801752e <_strtod_l+0x8de>
 80175aa:	e611      	b.n	80171d0 <_strtod_l+0x580>
 80175ac:	fffffc02 	.word	0xfffffc02
 80175b0:	7ff00000 	.word	0x7ff00000
 80175b4:	39500000 	.word	0x39500000
 80175b8:	000fffff 	.word	0x000fffff
 80175bc:	7fefffff 	.word	0x7fefffff
 80175c0:	0801cf20 	.word	0x0801cf20
 80175c4:	4631      	mov	r1, r6
 80175c6:	4628      	mov	r0, r5
 80175c8:	f001 fab6 	bl	8018b38 <__ratio>
 80175cc:	ec59 8b10 	vmov	r8, r9, d0
 80175d0:	ee10 0a10 	vmov	r0, s0
 80175d4:	2200      	movs	r2, #0
 80175d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80175da:	4649      	mov	r1, r9
 80175dc:	f7e9 faa8 	bl	8000b30 <__aeabi_dcmple>
 80175e0:	2800      	cmp	r0, #0
 80175e2:	d07a      	beq.n	80176da <_strtod_l+0xa8a>
 80175e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d04a      	beq.n	8017680 <_strtod_l+0xa30>
 80175ea:	4b95      	ldr	r3, [pc, #596]	; (8017840 <_strtod_l+0xbf0>)
 80175ec:	2200      	movs	r2, #0
 80175ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80175f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017840 <_strtod_l+0xbf0>
 80175f6:	f04f 0800 	mov.w	r8, #0
 80175fa:	4b92      	ldr	r3, [pc, #584]	; (8017844 <_strtod_l+0xbf4>)
 80175fc:	403b      	ands	r3, r7
 80175fe:	930d      	str	r3, [sp, #52]	; 0x34
 8017600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017602:	4b91      	ldr	r3, [pc, #580]	; (8017848 <_strtod_l+0xbf8>)
 8017604:	429a      	cmp	r2, r3
 8017606:	f040 80b0 	bne.w	801776a <_strtod_l+0xb1a>
 801760a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801760e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017612:	ec4b ab10 	vmov	d0, sl, fp
 8017616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801761a:	f001 f9b5 	bl	8018988 <__ulp>
 801761e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017622:	ec53 2b10 	vmov	r2, r3, d0
 8017626:	f7e9 f807 	bl	8000638 <__aeabi_dmul>
 801762a:	4652      	mov	r2, sl
 801762c:	465b      	mov	r3, fp
 801762e:	f7e8 fe4d 	bl	80002cc <__adddf3>
 8017632:	460b      	mov	r3, r1
 8017634:	4983      	ldr	r1, [pc, #524]	; (8017844 <_strtod_l+0xbf4>)
 8017636:	4a85      	ldr	r2, [pc, #532]	; (801784c <_strtod_l+0xbfc>)
 8017638:	4019      	ands	r1, r3
 801763a:	4291      	cmp	r1, r2
 801763c:	4682      	mov	sl, r0
 801763e:	d960      	bls.n	8017702 <_strtod_l+0xab2>
 8017640:	ee18 3a90 	vmov	r3, s17
 8017644:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017648:	4293      	cmp	r3, r2
 801764a:	d104      	bne.n	8017656 <_strtod_l+0xa06>
 801764c:	ee18 3a10 	vmov	r3, s16
 8017650:	3301      	adds	r3, #1
 8017652:	f43f ad45 	beq.w	80170e0 <_strtod_l+0x490>
 8017656:	f8df b200 	ldr.w	fp, [pc, #512]	; 8017858 <_strtod_l+0xc08>
 801765a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801765e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017660:	4620      	mov	r0, r4
 8017662:	f000 fe5f 	bl	8018324 <_Bfree>
 8017666:	9905      	ldr	r1, [sp, #20]
 8017668:	4620      	mov	r0, r4
 801766a:	f000 fe5b 	bl	8018324 <_Bfree>
 801766e:	4631      	mov	r1, r6
 8017670:	4620      	mov	r0, r4
 8017672:	f000 fe57 	bl	8018324 <_Bfree>
 8017676:	4629      	mov	r1, r5
 8017678:	4620      	mov	r0, r4
 801767a:	f000 fe53 	bl	8018324 <_Bfree>
 801767e:	e61a      	b.n	80172b6 <_strtod_l+0x666>
 8017680:	f1ba 0f00 	cmp.w	sl, #0
 8017684:	d11b      	bne.n	80176be <_strtod_l+0xa6e>
 8017686:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801768a:	b9f3      	cbnz	r3, 80176ca <_strtod_l+0xa7a>
 801768c:	4b6c      	ldr	r3, [pc, #432]	; (8017840 <_strtod_l+0xbf0>)
 801768e:	2200      	movs	r2, #0
 8017690:	4640      	mov	r0, r8
 8017692:	4649      	mov	r1, r9
 8017694:	f7e9 fa42 	bl	8000b1c <__aeabi_dcmplt>
 8017698:	b9d0      	cbnz	r0, 80176d0 <_strtod_l+0xa80>
 801769a:	4640      	mov	r0, r8
 801769c:	4649      	mov	r1, r9
 801769e:	4b6c      	ldr	r3, [pc, #432]	; (8017850 <_strtod_l+0xc00>)
 80176a0:	2200      	movs	r2, #0
 80176a2:	f7e8 ffc9 	bl	8000638 <__aeabi_dmul>
 80176a6:	4680      	mov	r8, r0
 80176a8:	4689      	mov	r9, r1
 80176aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80176ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80176b2:	9315      	str	r3, [sp, #84]	; 0x54
 80176b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80176b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80176bc:	e79d      	b.n	80175fa <_strtod_l+0x9aa>
 80176be:	f1ba 0f01 	cmp.w	sl, #1
 80176c2:	d102      	bne.n	80176ca <_strtod_l+0xa7a>
 80176c4:	2f00      	cmp	r7, #0
 80176c6:	f43f ad83 	beq.w	80171d0 <_strtod_l+0x580>
 80176ca:	4b62      	ldr	r3, [pc, #392]	; (8017854 <_strtod_l+0xc04>)
 80176cc:	2200      	movs	r2, #0
 80176ce:	e78e      	b.n	80175ee <_strtod_l+0x99e>
 80176d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8017850 <_strtod_l+0xc00>
 80176d4:	f04f 0800 	mov.w	r8, #0
 80176d8:	e7e7      	b.n	80176aa <_strtod_l+0xa5a>
 80176da:	4b5d      	ldr	r3, [pc, #372]	; (8017850 <_strtod_l+0xc00>)
 80176dc:	4640      	mov	r0, r8
 80176de:	4649      	mov	r1, r9
 80176e0:	2200      	movs	r2, #0
 80176e2:	f7e8 ffa9 	bl	8000638 <__aeabi_dmul>
 80176e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176e8:	4680      	mov	r8, r0
 80176ea:	4689      	mov	r9, r1
 80176ec:	b933      	cbnz	r3, 80176fc <_strtod_l+0xaac>
 80176ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176f2:	900e      	str	r0, [sp, #56]	; 0x38
 80176f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80176f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80176fa:	e7dd      	b.n	80176b8 <_strtod_l+0xa68>
 80176fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8017700:	e7f9      	b.n	80176f6 <_strtod_l+0xaa6>
 8017702:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017706:	9b04      	ldr	r3, [sp, #16]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d1a8      	bne.n	801765e <_strtod_l+0xa0e>
 801770c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017712:	0d1b      	lsrs	r3, r3, #20
 8017714:	051b      	lsls	r3, r3, #20
 8017716:	429a      	cmp	r2, r3
 8017718:	d1a1      	bne.n	801765e <_strtod_l+0xa0e>
 801771a:	4640      	mov	r0, r8
 801771c:	4649      	mov	r1, r9
 801771e:	f7e9 faad 	bl	8000c7c <__aeabi_d2lz>
 8017722:	f7e8 ff5b 	bl	80005dc <__aeabi_l2d>
 8017726:	4602      	mov	r2, r0
 8017728:	460b      	mov	r3, r1
 801772a:	4640      	mov	r0, r8
 801772c:	4649      	mov	r1, r9
 801772e:	f7e8 fdcb 	bl	80002c8 <__aeabi_dsub>
 8017732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017738:	ea43 030a 	orr.w	r3, r3, sl
 801773c:	4313      	orrs	r3, r2
 801773e:	4680      	mov	r8, r0
 8017740:	4689      	mov	r9, r1
 8017742:	d055      	beq.n	80177f0 <_strtod_l+0xba0>
 8017744:	a336      	add	r3, pc, #216	; (adr r3, 8017820 <_strtod_l+0xbd0>)
 8017746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774a:	f7e9 f9e7 	bl	8000b1c <__aeabi_dcmplt>
 801774e:	2800      	cmp	r0, #0
 8017750:	f47f acd0 	bne.w	80170f4 <_strtod_l+0x4a4>
 8017754:	a334      	add	r3, pc, #208	; (adr r3, 8017828 <_strtod_l+0xbd8>)
 8017756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801775a:	4640      	mov	r0, r8
 801775c:	4649      	mov	r1, r9
 801775e:	f7e9 f9fb 	bl	8000b58 <__aeabi_dcmpgt>
 8017762:	2800      	cmp	r0, #0
 8017764:	f43f af7b 	beq.w	801765e <_strtod_l+0xa0e>
 8017768:	e4c4      	b.n	80170f4 <_strtod_l+0x4a4>
 801776a:	9b04      	ldr	r3, [sp, #16]
 801776c:	b333      	cbz	r3, 80177bc <_strtod_l+0xb6c>
 801776e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017770:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017774:	d822      	bhi.n	80177bc <_strtod_l+0xb6c>
 8017776:	a32e      	add	r3, pc, #184	; (adr r3, 8017830 <_strtod_l+0xbe0>)
 8017778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801777c:	4640      	mov	r0, r8
 801777e:	4649      	mov	r1, r9
 8017780:	f7e9 f9d6 	bl	8000b30 <__aeabi_dcmple>
 8017784:	b1a0      	cbz	r0, 80177b0 <_strtod_l+0xb60>
 8017786:	4649      	mov	r1, r9
 8017788:	4640      	mov	r0, r8
 801778a:	f7e9 f9ef 	bl	8000b6c <__aeabi_d2uiz>
 801778e:	2801      	cmp	r0, #1
 8017790:	bf38      	it	cc
 8017792:	2001      	movcc	r0, #1
 8017794:	f7e8 fed6 	bl	8000544 <__aeabi_ui2d>
 8017798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801779a:	4680      	mov	r8, r0
 801779c:	4689      	mov	r9, r1
 801779e:	bb23      	cbnz	r3, 80177ea <_strtod_l+0xb9a>
 80177a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177a4:	9010      	str	r0, [sp, #64]	; 0x40
 80177a6:	9311      	str	r3, [sp, #68]	; 0x44
 80177a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80177ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80177b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80177b8:	1a9b      	subs	r3, r3, r2
 80177ba:	9309      	str	r3, [sp, #36]	; 0x24
 80177bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177c0:	eeb0 0a48 	vmov.f32	s0, s16
 80177c4:	eef0 0a68 	vmov.f32	s1, s17
 80177c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80177cc:	f001 f8dc 	bl	8018988 <__ulp>
 80177d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177d4:	ec53 2b10 	vmov	r2, r3, d0
 80177d8:	f7e8 ff2e 	bl	8000638 <__aeabi_dmul>
 80177dc:	ec53 2b18 	vmov	r2, r3, d8
 80177e0:	f7e8 fd74 	bl	80002cc <__adddf3>
 80177e4:	4682      	mov	sl, r0
 80177e6:	468b      	mov	fp, r1
 80177e8:	e78d      	b.n	8017706 <_strtod_l+0xab6>
 80177ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80177ee:	e7db      	b.n	80177a8 <_strtod_l+0xb58>
 80177f0:	a311      	add	r3, pc, #68	; (adr r3, 8017838 <_strtod_l+0xbe8>)
 80177f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177f6:	f7e9 f991 	bl	8000b1c <__aeabi_dcmplt>
 80177fa:	e7b2      	b.n	8017762 <_strtod_l+0xb12>
 80177fc:	2300      	movs	r3, #0
 80177fe:	930a      	str	r3, [sp, #40]	; 0x28
 8017800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017804:	6013      	str	r3, [r2, #0]
 8017806:	f7ff ba6b 	b.w	8016ce0 <_strtod_l+0x90>
 801780a:	2a65      	cmp	r2, #101	; 0x65
 801780c:	f43f ab5f 	beq.w	8016ece <_strtod_l+0x27e>
 8017810:	2a45      	cmp	r2, #69	; 0x45
 8017812:	f43f ab5c 	beq.w	8016ece <_strtod_l+0x27e>
 8017816:	2301      	movs	r3, #1
 8017818:	f7ff bb94 	b.w	8016f44 <_strtod_l+0x2f4>
 801781c:	f3af 8000 	nop.w
 8017820:	94a03595 	.word	0x94a03595
 8017824:	3fdfffff 	.word	0x3fdfffff
 8017828:	35afe535 	.word	0x35afe535
 801782c:	3fe00000 	.word	0x3fe00000
 8017830:	ffc00000 	.word	0xffc00000
 8017834:	41dfffff 	.word	0x41dfffff
 8017838:	94a03595 	.word	0x94a03595
 801783c:	3fcfffff 	.word	0x3fcfffff
 8017840:	3ff00000 	.word	0x3ff00000
 8017844:	7ff00000 	.word	0x7ff00000
 8017848:	7fe00000 	.word	0x7fe00000
 801784c:	7c9fffff 	.word	0x7c9fffff
 8017850:	3fe00000 	.word	0x3fe00000
 8017854:	bff00000 	.word	0xbff00000
 8017858:	7fefffff 	.word	0x7fefffff

0801785c <strtod>:
 801785c:	460a      	mov	r2, r1
 801785e:	4601      	mov	r1, r0
 8017860:	4802      	ldr	r0, [pc, #8]	; (801786c <strtod+0x10>)
 8017862:	4b03      	ldr	r3, [pc, #12]	; (8017870 <strtod+0x14>)
 8017864:	6800      	ldr	r0, [r0, #0]
 8017866:	f7ff b9f3 	b.w	8016c50 <_strtod_l>
 801786a:	bf00      	nop
 801786c:	2000002c 	.word	0x2000002c
 8017870:	20000094 	.word	0x20000094

08017874 <strtok>:
 8017874:	4b16      	ldr	r3, [pc, #88]	; (80178d0 <strtok+0x5c>)
 8017876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017878:	681e      	ldr	r6, [r3, #0]
 801787a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801787c:	4605      	mov	r5, r0
 801787e:	b9fc      	cbnz	r4, 80178c0 <strtok+0x4c>
 8017880:	2050      	movs	r0, #80	; 0x50
 8017882:	9101      	str	r1, [sp, #4]
 8017884:	f000 fce8 	bl	8018258 <malloc>
 8017888:	9901      	ldr	r1, [sp, #4]
 801788a:	65b0      	str	r0, [r6, #88]	; 0x58
 801788c:	4602      	mov	r2, r0
 801788e:	b920      	cbnz	r0, 801789a <strtok+0x26>
 8017890:	4b10      	ldr	r3, [pc, #64]	; (80178d4 <strtok+0x60>)
 8017892:	4811      	ldr	r0, [pc, #68]	; (80178d8 <strtok+0x64>)
 8017894:	2157      	movs	r1, #87	; 0x57
 8017896:	f000 f85b 	bl	8017950 <__assert_func>
 801789a:	e9c0 4400 	strd	r4, r4, [r0]
 801789e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80178a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80178a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80178aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80178ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80178b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80178b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80178ba:	6184      	str	r4, [r0, #24]
 80178bc:	7704      	strb	r4, [r0, #28]
 80178be:	6244      	str	r4, [r0, #36]	; 0x24
 80178c0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80178c2:	2301      	movs	r3, #1
 80178c4:	4628      	mov	r0, r5
 80178c6:	b002      	add	sp, #8
 80178c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178cc:	f000 b806 	b.w	80178dc <__strtok_r>
 80178d0:	2000002c 	.word	0x2000002c
 80178d4:	0801ce74 	.word	0x0801ce74
 80178d8:	0801cf48 	.word	0x0801cf48

080178dc <__strtok_r>:
 80178dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178de:	b908      	cbnz	r0, 80178e4 <__strtok_r+0x8>
 80178e0:	6810      	ldr	r0, [r2, #0]
 80178e2:	b188      	cbz	r0, 8017908 <__strtok_r+0x2c>
 80178e4:	4604      	mov	r4, r0
 80178e6:	4620      	mov	r0, r4
 80178e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80178ec:	460f      	mov	r7, r1
 80178ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80178f2:	b91e      	cbnz	r6, 80178fc <__strtok_r+0x20>
 80178f4:	b965      	cbnz	r5, 8017910 <__strtok_r+0x34>
 80178f6:	6015      	str	r5, [r2, #0]
 80178f8:	4628      	mov	r0, r5
 80178fa:	e005      	b.n	8017908 <__strtok_r+0x2c>
 80178fc:	42b5      	cmp	r5, r6
 80178fe:	d1f6      	bne.n	80178ee <__strtok_r+0x12>
 8017900:	2b00      	cmp	r3, #0
 8017902:	d1f0      	bne.n	80178e6 <__strtok_r+0xa>
 8017904:	6014      	str	r4, [r2, #0]
 8017906:	7003      	strb	r3, [r0, #0]
 8017908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801790a:	461c      	mov	r4, r3
 801790c:	e00c      	b.n	8017928 <__strtok_r+0x4c>
 801790e:	b915      	cbnz	r5, 8017916 <__strtok_r+0x3a>
 8017910:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017914:	460e      	mov	r6, r1
 8017916:	f816 5b01 	ldrb.w	r5, [r6], #1
 801791a:	42ab      	cmp	r3, r5
 801791c:	d1f7      	bne.n	801790e <__strtok_r+0x32>
 801791e:	2b00      	cmp	r3, #0
 8017920:	d0f3      	beq.n	801790a <__strtok_r+0x2e>
 8017922:	2300      	movs	r3, #0
 8017924:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017928:	6014      	str	r4, [r2, #0]
 801792a:	e7ed      	b.n	8017908 <__strtok_r+0x2c>

0801792c <_write_r>:
 801792c:	b538      	push	{r3, r4, r5, lr}
 801792e:	4d07      	ldr	r5, [pc, #28]	; (801794c <_write_r+0x20>)
 8017930:	4604      	mov	r4, r0
 8017932:	4608      	mov	r0, r1
 8017934:	4611      	mov	r1, r2
 8017936:	2200      	movs	r2, #0
 8017938:	602a      	str	r2, [r5, #0]
 801793a:	461a      	mov	r2, r3
 801793c:	f7e9 fe49 	bl	80015d2 <_write>
 8017940:	1c43      	adds	r3, r0, #1
 8017942:	d102      	bne.n	801794a <_write_r+0x1e>
 8017944:	682b      	ldr	r3, [r5, #0]
 8017946:	b103      	cbz	r3, 801794a <_write_r+0x1e>
 8017948:	6023      	str	r3, [r4, #0]
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	20011cb0 	.word	0x20011cb0

08017950 <__assert_func>:
 8017950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017952:	4614      	mov	r4, r2
 8017954:	461a      	mov	r2, r3
 8017956:	4b09      	ldr	r3, [pc, #36]	; (801797c <__assert_func+0x2c>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	4605      	mov	r5, r0
 801795c:	68d8      	ldr	r0, [r3, #12]
 801795e:	b14c      	cbz	r4, 8017974 <__assert_func+0x24>
 8017960:	4b07      	ldr	r3, [pc, #28]	; (8017980 <__assert_func+0x30>)
 8017962:	9100      	str	r1, [sp, #0]
 8017964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017968:	4906      	ldr	r1, [pc, #24]	; (8017984 <__assert_func+0x34>)
 801796a:	462b      	mov	r3, r5
 801796c:	f000 f8e0 	bl	8017b30 <fiprintf>
 8017970:	f001 fef0 	bl	8019754 <abort>
 8017974:	4b04      	ldr	r3, [pc, #16]	; (8017988 <__assert_func+0x38>)
 8017976:	461c      	mov	r4, r3
 8017978:	e7f3      	b.n	8017962 <__assert_func+0x12>
 801797a:	bf00      	nop
 801797c:	2000002c 	.word	0x2000002c
 8017980:	0801cfa5 	.word	0x0801cfa5
 8017984:	0801cfb2 	.word	0x0801cfb2
 8017988:	0801cfe0 	.word	0x0801cfe0

0801798c <_close_r>:
 801798c:	b538      	push	{r3, r4, r5, lr}
 801798e:	4d06      	ldr	r5, [pc, #24]	; (80179a8 <_close_r+0x1c>)
 8017990:	2300      	movs	r3, #0
 8017992:	4604      	mov	r4, r0
 8017994:	4608      	mov	r0, r1
 8017996:	602b      	str	r3, [r5, #0]
 8017998:	f7e9 fe37 	bl	800160a <_close>
 801799c:	1c43      	adds	r3, r0, #1
 801799e:	d102      	bne.n	80179a6 <_close_r+0x1a>
 80179a0:	682b      	ldr	r3, [r5, #0]
 80179a2:	b103      	cbz	r3, 80179a6 <_close_r+0x1a>
 80179a4:	6023      	str	r3, [r4, #0]
 80179a6:	bd38      	pop	{r3, r4, r5, pc}
 80179a8:	20011cb0 	.word	0x20011cb0

080179ac <__sflush_r>:
 80179ac:	898a      	ldrh	r2, [r1, #12]
 80179ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b2:	4605      	mov	r5, r0
 80179b4:	0710      	lsls	r0, r2, #28
 80179b6:	460c      	mov	r4, r1
 80179b8:	d458      	bmi.n	8017a6c <__sflush_r+0xc0>
 80179ba:	684b      	ldr	r3, [r1, #4]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	dc05      	bgt.n	80179cc <__sflush_r+0x20>
 80179c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	dc02      	bgt.n	80179cc <__sflush_r+0x20>
 80179c6:	2000      	movs	r0, #0
 80179c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179ce:	2e00      	cmp	r6, #0
 80179d0:	d0f9      	beq.n	80179c6 <__sflush_r+0x1a>
 80179d2:	2300      	movs	r3, #0
 80179d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80179d8:	682f      	ldr	r7, [r5, #0]
 80179da:	602b      	str	r3, [r5, #0]
 80179dc:	d032      	beq.n	8017a44 <__sflush_r+0x98>
 80179de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80179e0:	89a3      	ldrh	r3, [r4, #12]
 80179e2:	075a      	lsls	r2, r3, #29
 80179e4:	d505      	bpl.n	80179f2 <__sflush_r+0x46>
 80179e6:	6863      	ldr	r3, [r4, #4]
 80179e8:	1ac0      	subs	r0, r0, r3
 80179ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179ec:	b10b      	cbz	r3, 80179f2 <__sflush_r+0x46>
 80179ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179f0:	1ac0      	subs	r0, r0, r3
 80179f2:	2300      	movs	r3, #0
 80179f4:	4602      	mov	r2, r0
 80179f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179f8:	6a21      	ldr	r1, [r4, #32]
 80179fa:	4628      	mov	r0, r5
 80179fc:	47b0      	blx	r6
 80179fe:	1c43      	adds	r3, r0, #1
 8017a00:	89a3      	ldrh	r3, [r4, #12]
 8017a02:	d106      	bne.n	8017a12 <__sflush_r+0x66>
 8017a04:	6829      	ldr	r1, [r5, #0]
 8017a06:	291d      	cmp	r1, #29
 8017a08:	d82c      	bhi.n	8017a64 <__sflush_r+0xb8>
 8017a0a:	4a2a      	ldr	r2, [pc, #168]	; (8017ab4 <__sflush_r+0x108>)
 8017a0c:	40ca      	lsrs	r2, r1
 8017a0e:	07d6      	lsls	r6, r2, #31
 8017a10:	d528      	bpl.n	8017a64 <__sflush_r+0xb8>
 8017a12:	2200      	movs	r2, #0
 8017a14:	6062      	str	r2, [r4, #4]
 8017a16:	04d9      	lsls	r1, r3, #19
 8017a18:	6922      	ldr	r2, [r4, #16]
 8017a1a:	6022      	str	r2, [r4, #0]
 8017a1c:	d504      	bpl.n	8017a28 <__sflush_r+0x7c>
 8017a1e:	1c42      	adds	r2, r0, #1
 8017a20:	d101      	bne.n	8017a26 <__sflush_r+0x7a>
 8017a22:	682b      	ldr	r3, [r5, #0]
 8017a24:	b903      	cbnz	r3, 8017a28 <__sflush_r+0x7c>
 8017a26:	6560      	str	r0, [r4, #84]	; 0x54
 8017a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a2a:	602f      	str	r7, [r5, #0]
 8017a2c:	2900      	cmp	r1, #0
 8017a2e:	d0ca      	beq.n	80179c6 <__sflush_r+0x1a>
 8017a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a34:	4299      	cmp	r1, r3
 8017a36:	d002      	beq.n	8017a3e <__sflush_r+0x92>
 8017a38:	4628      	mov	r0, r5
 8017a3a:	f001 f90b 	bl	8018c54 <_free_r>
 8017a3e:	2000      	movs	r0, #0
 8017a40:	6360      	str	r0, [r4, #52]	; 0x34
 8017a42:	e7c1      	b.n	80179c8 <__sflush_r+0x1c>
 8017a44:	6a21      	ldr	r1, [r4, #32]
 8017a46:	2301      	movs	r3, #1
 8017a48:	4628      	mov	r0, r5
 8017a4a:	47b0      	blx	r6
 8017a4c:	1c41      	adds	r1, r0, #1
 8017a4e:	d1c7      	bne.n	80179e0 <__sflush_r+0x34>
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d0c4      	beq.n	80179e0 <__sflush_r+0x34>
 8017a56:	2b1d      	cmp	r3, #29
 8017a58:	d001      	beq.n	8017a5e <__sflush_r+0xb2>
 8017a5a:	2b16      	cmp	r3, #22
 8017a5c:	d101      	bne.n	8017a62 <__sflush_r+0xb6>
 8017a5e:	602f      	str	r7, [r5, #0]
 8017a60:	e7b1      	b.n	80179c6 <__sflush_r+0x1a>
 8017a62:	89a3      	ldrh	r3, [r4, #12]
 8017a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a68:	81a3      	strh	r3, [r4, #12]
 8017a6a:	e7ad      	b.n	80179c8 <__sflush_r+0x1c>
 8017a6c:	690f      	ldr	r7, [r1, #16]
 8017a6e:	2f00      	cmp	r7, #0
 8017a70:	d0a9      	beq.n	80179c6 <__sflush_r+0x1a>
 8017a72:	0793      	lsls	r3, r2, #30
 8017a74:	680e      	ldr	r6, [r1, #0]
 8017a76:	bf08      	it	eq
 8017a78:	694b      	ldreq	r3, [r1, #20]
 8017a7a:	600f      	str	r7, [r1, #0]
 8017a7c:	bf18      	it	ne
 8017a7e:	2300      	movne	r3, #0
 8017a80:	eba6 0807 	sub.w	r8, r6, r7
 8017a84:	608b      	str	r3, [r1, #8]
 8017a86:	f1b8 0f00 	cmp.w	r8, #0
 8017a8a:	dd9c      	ble.n	80179c6 <__sflush_r+0x1a>
 8017a8c:	6a21      	ldr	r1, [r4, #32]
 8017a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a90:	4643      	mov	r3, r8
 8017a92:	463a      	mov	r2, r7
 8017a94:	4628      	mov	r0, r5
 8017a96:	47b0      	blx	r6
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	dc06      	bgt.n	8017aaa <__sflush_r+0xfe>
 8017a9c:	89a3      	ldrh	r3, [r4, #12]
 8017a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aa2:	81a3      	strh	r3, [r4, #12]
 8017aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017aa8:	e78e      	b.n	80179c8 <__sflush_r+0x1c>
 8017aaa:	4407      	add	r7, r0
 8017aac:	eba8 0800 	sub.w	r8, r8, r0
 8017ab0:	e7e9      	b.n	8017a86 <__sflush_r+0xda>
 8017ab2:	bf00      	nop
 8017ab4:	20400001 	.word	0x20400001

08017ab8 <_fflush_r>:
 8017ab8:	b538      	push	{r3, r4, r5, lr}
 8017aba:	690b      	ldr	r3, [r1, #16]
 8017abc:	4605      	mov	r5, r0
 8017abe:	460c      	mov	r4, r1
 8017ac0:	b913      	cbnz	r3, 8017ac8 <_fflush_r+0x10>
 8017ac2:	2500      	movs	r5, #0
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	bd38      	pop	{r3, r4, r5, pc}
 8017ac8:	b118      	cbz	r0, 8017ad2 <_fflush_r+0x1a>
 8017aca:	6983      	ldr	r3, [r0, #24]
 8017acc:	b90b      	cbnz	r3, 8017ad2 <_fflush_r+0x1a>
 8017ace:	f7fe fdad 	bl	801662c <__sinit>
 8017ad2:	4b14      	ldr	r3, [pc, #80]	; (8017b24 <_fflush_r+0x6c>)
 8017ad4:	429c      	cmp	r4, r3
 8017ad6:	d11b      	bne.n	8017b10 <_fflush_r+0x58>
 8017ad8:	686c      	ldr	r4, [r5, #4]
 8017ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d0ef      	beq.n	8017ac2 <_fflush_r+0xa>
 8017ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ae4:	07d0      	lsls	r0, r2, #31
 8017ae6:	d404      	bmi.n	8017af2 <_fflush_r+0x3a>
 8017ae8:	0599      	lsls	r1, r3, #22
 8017aea:	d402      	bmi.n	8017af2 <_fflush_r+0x3a>
 8017aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017aee:	f7fe fe60 	bl	80167b2 <__retarget_lock_acquire_recursive>
 8017af2:	4628      	mov	r0, r5
 8017af4:	4621      	mov	r1, r4
 8017af6:	f7ff ff59 	bl	80179ac <__sflush_r>
 8017afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017afc:	07da      	lsls	r2, r3, #31
 8017afe:	4605      	mov	r5, r0
 8017b00:	d4e0      	bmi.n	8017ac4 <_fflush_r+0xc>
 8017b02:	89a3      	ldrh	r3, [r4, #12]
 8017b04:	059b      	lsls	r3, r3, #22
 8017b06:	d4dd      	bmi.n	8017ac4 <_fflush_r+0xc>
 8017b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b0a:	f7fe fe53 	bl	80167b4 <__retarget_lock_release_recursive>
 8017b0e:	e7d9      	b.n	8017ac4 <_fflush_r+0xc>
 8017b10:	4b05      	ldr	r3, [pc, #20]	; (8017b28 <_fflush_r+0x70>)
 8017b12:	429c      	cmp	r4, r3
 8017b14:	d101      	bne.n	8017b1a <_fflush_r+0x62>
 8017b16:	68ac      	ldr	r4, [r5, #8]
 8017b18:	e7df      	b.n	8017ada <_fflush_r+0x22>
 8017b1a:	4b04      	ldr	r3, [pc, #16]	; (8017b2c <_fflush_r+0x74>)
 8017b1c:	429c      	cmp	r4, r3
 8017b1e:	bf08      	it	eq
 8017b20:	68ec      	ldreq	r4, [r5, #12]
 8017b22:	e7da      	b.n	8017ada <_fflush_r+0x22>
 8017b24:	0801ce30 	.word	0x0801ce30
 8017b28:	0801ce50 	.word	0x0801ce50
 8017b2c:	0801ce10 	.word	0x0801ce10

08017b30 <fiprintf>:
 8017b30:	b40e      	push	{r1, r2, r3}
 8017b32:	b503      	push	{r0, r1, lr}
 8017b34:	4601      	mov	r1, r0
 8017b36:	ab03      	add	r3, sp, #12
 8017b38:	4805      	ldr	r0, [pc, #20]	; (8017b50 <fiprintf+0x20>)
 8017b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b3e:	6800      	ldr	r0, [r0, #0]
 8017b40:	9301      	str	r3, [sp, #4]
 8017b42:	f001 fa59 	bl	8018ff8 <_vfiprintf_r>
 8017b46:	b002      	add	sp, #8
 8017b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b4c:	b003      	add	sp, #12
 8017b4e:	4770      	bx	lr
 8017b50:	2000002c 	.word	0x2000002c

08017b54 <rshift>:
 8017b54:	6903      	ldr	r3, [r0, #16]
 8017b56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017b5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017b62:	f100 0414 	add.w	r4, r0, #20
 8017b66:	dd45      	ble.n	8017bf4 <rshift+0xa0>
 8017b68:	f011 011f 	ands.w	r1, r1, #31
 8017b6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017b70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017b74:	d10c      	bne.n	8017b90 <rshift+0x3c>
 8017b76:	f100 0710 	add.w	r7, r0, #16
 8017b7a:	4629      	mov	r1, r5
 8017b7c:	42b1      	cmp	r1, r6
 8017b7e:	d334      	bcc.n	8017bea <rshift+0x96>
 8017b80:	1a9b      	subs	r3, r3, r2
 8017b82:	009b      	lsls	r3, r3, #2
 8017b84:	1eea      	subs	r2, r5, #3
 8017b86:	4296      	cmp	r6, r2
 8017b88:	bf38      	it	cc
 8017b8a:	2300      	movcc	r3, #0
 8017b8c:	4423      	add	r3, r4
 8017b8e:	e015      	b.n	8017bbc <rshift+0x68>
 8017b90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017b94:	f1c1 0820 	rsb	r8, r1, #32
 8017b98:	40cf      	lsrs	r7, r1
 8017b9a:	f105 0e04 	add.w	lr, r5, #4
 8017b9e:	46a1      	mov	r9, r4
 8017ba0:	4576      	cmp	r6, lr
 8017ba2:	46f4      	mov	ip, lr
 8017ba4:	d815      	bhi.n	8017bd2 <rshift+0x7e>
 8017ba6:	1a9a      	subs	r2, r3, r2
 8017ba8:	0092      	lsls	r2, r2, #2
 8017baa:	3a04      	subs	r2, #4
 8017bac:	3501      	adds	r5, #1
 8017bae:	42ae      	cmp	r6, r5
 8017bb0:	bf38      	it	cc
 8017bb2:	2200      	movcc	r2, #0
 8017bb4:	18a3      	adds	r3, r4, r2
 8017bb6:	50a7      	str	r7, [r4, r2]
 8017bb8:	b107      	cbz	r7, 8017bbc <rshift+0x68>
 8017bba:	3304      	adds	r3, #4
 8017bbc:	1b1a      	subs	r2, r3, r4
 8017bbe:	42a3      	cmp	r3, r4
 8017bc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017bc4:	bf08      	it	eq
 8017bc6:	2300      	moveq	r3, #0
 8017bc8:	6102      	str	r2, [r0, #16]
 8017bca:	bf08      	it	eq
 8017bcc:	6143      	streq	r3, [r0, #20]
 8017bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bd2:	f8dc c000 	ldr.w	ip, [ip]
 8017bd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8017bda:	ea4c 0707 	orr.w	r7, ip, r7
 8017bde:	f849 7b04 	str.w	r7, [r9], #4
 8017be2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017be6:	40cf      	lsrs	r7, r1
 8017be8:	e7da      	b.n	8017ba0 <rshift+0x4c>
 8017bea:	f851 cb04 	ldr.w	ip, [r1], #4
 8017bee:	f847 cf04 	str.w	ip, [r7, #4]!
 8017bf2:	e7c3      	b.n	8017b7c <rshift+0x28>
 8017bf4:	4623      	mov	r3, r4
 8017bf6:	e7e1      	b.n	8017bbc <rshift+0x68>

08017bf8 <__hexdig_fun>:
 8017bf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017bfc:	2b09      	cmp	r3, #9
 8017bfe:	d802      	bhi.n	8017c06 <__hexdig_fun+0xe>
 8017c00:	3820      	subs	r0, #32
 8017c02:	b2c0      	uxtb	r0, r0
 8017c04:	4770      	bx	lr
 8017c06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017c0a:	2b05      	cmp	r3, #5
 8017c0c:	d801      	bhi.n	8017c12 <__hexdig_fun+0x1a>
 8017c0e:	3847      	subs	r0, #71	; 0x47
 8017c10:	e7f7      	b.n	8017c02 <__hexdig_fun+0xa>
 8017c12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017c16:	2b05      	cmp	r3, #5
 8017c18:	d801      	bhi.n	8017c1e <__hexdig_fun+0x26>
 8017c1a:	3827      	subs	r0, #39	; 0x27
 8017c1c:	e7f1      	b.n	8017c02 <__hexdig_fun+0xa>
 8017c1e:	2000      	movs	r0, #0
 8017c20:	4770      	bx	lr
	...

08017c24 <__gethex>:
 8017c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c28:	ed2d 8b02 	vpush	{d8}
 8017c2c:	b089      	sub	sp, #36	; 0x24
 8017c2e:	ee08 0a10 	vmov	s16, r0
 8017c32:	9304      	str	r3, [sp, #16]
 8017c34:	4bb4      	ldr	r3, [pc, #720]	; (8017f08 <__gethex+0x2e4>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	9301      	str	r3, [sp, #4]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	468b      	mov	fp, r1
 8017c3e:	4690      	mov	r8, r2
 8017c40:	f7e8 fae6 	bl	8000210 <strlen>
 8017c44:	9b01      	ldr	r3, [sp, #4]
 8017c46:	f8db 2000 	ldr.w	r2, [fp]
 8017c4a:	4403      	add	r3, r0
 8017c4c:	4682      	mov	sl, r0
 8017c4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017c52:	9305      	str	r3, [sp, #20]
 8017c54:	1c93      	adds	r3, r2, #2
 8017c56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017c5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017c5e:	32fe      	adds	r2, #254	; 0xfe
 8017c60:	18d1      	adds	r1, r2, r3
 8017c62:	461f      	mov	r7, r3
 8017c64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017c68:	9100      	str	r1, [sp, #0]
 8017c6a:	2830      	cmp	r0, #48	; 0x30
 8017c6c:	d0f8      	beq.n	8017c60 <__gethex+0x3c>
 8017c6e:	f7ff ffc3 	bl	8017bf8 <__hexdig_fun>
 8017c72:	4604      	mov	r4, r0
 8017c74:	2800      	cmp	r0, #0
 8017c76:	d13a      	bne.n	8017cee <__gethex+0xca>
 8017c78:	9901      	ldr	r1, [sp, #4]
 8017c7a:	4652      	mov	r2, sl
 8017c7c:	4638      	mov	r0, r7
 8017c7e:	f7fe ffa2 	bl	8016bc6 <strncmp>
 8017c82:	4605      	mov	r5, r0
 8017c84:	2800      	cmp	r0, #0
 8017c86:	d168      	bne.n	8017d5a <__gethex+0x136>
 8017c88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017c8c:	eb07 060a 	add.w	r6, r7, sl
 8017c90:	f7ff ffb2 	bl	8017bf8 <__hexdig_fun>
 8017c94:	2800      	cmp	r0, #0
 8017c96:	d062      	beq.n	8017d5e <__gethex+0x13a>
 8017c98:	4633      	mov	r3, r6
 8017c9a:	7818      	ldrb	r0, [r3, #0]
 8017c9c:	2830      	cmp	r0, #48	; 0x30
 8017c9e:	461f      	mov	r7, r3
 8017ca0:	f103 0301 	add.w	r3, r3, #1
 8017ca4:	d0f9      	beq.n	8017c9a <__gethex+0x76>
 8017ca6:	f7ff ffa7 	bl	8017bf8 <__hexdig_fun>
 8017caa:	2301      	movs	r3, #1
 8017cac:	fab0 f480 	clz	r4, r0
 8017cb0:	0964      	lsrs	r4, r4, #5
 8017cb2:	4635      	mov	r5, r6
 8017cb4:	9300      	str	r3, [sp, #0]
 8017cb6:	463a      	mov	r2, r7
 8017cb8:	4616      	mov	r6, r2
 8017cba:	3201      	adds	r2, #1
 8017cbc:	7830      	ldrb	r0, [r6, #0]
 8017cbe:	f7ff ff9b 	bl	8017bf8 <__hexdig_fun>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d1f8      	bne.n	8017cb8 <__gethex+0x94>
 8017cc6:	9901      	ldr	r1, [sp, #4]
 8017cc8:	4652      	mov	r2, sl
 8017cca:	4630      	mov	r0, r6
 8017ccc:	f7fe ff7b 	bl	8016bc6 <strncmp>
 8017cd0:	b980      	cbnz	r0, 8017cf4 <__gethex+0xd0>
 8017cd2:	b94d      	cbnz	r5, 8017ce8 <__gethex+0xc4>
 8017cd4:	eb06 050a 	add.w	r5, r6, sl
 8017cd8:	462a      	mov	r2, r5
 8017cda:	4616      	mov	r6, r2
 8017cdc:	3201      	adds	r2, #1
 8017cde:	7830      	ldrb	r0, [r6, #0]
 8017ce0:	f7ff ff8a 	bl	8017bf8 <__hexdig_fun>
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	d1f8      	bne.n	8017cda <__gethex+0xb6>
 8017ce8:	1bad      	subs	r5, r5, r6
 8017cea:	00ad      	lsls	r5, r5, #2
 8017cec:	e004      	b.n	8017cf8 <__gethex+0xd4>
 8017cee:	2400      	movs	r4, #0
 8017cf0:	4625      	mov	r5, r4
 8017cf2:	e7e0      	b.n	8017cb6 <__gethex+0x92>
 8017cf4:	2d00      	cmp	r5, #0
 8017cf6:	d1f7      	bne.n	8017ce8 <__gethex+0xc4>
 8017cf8:	7833      	ldrb	r3, [r6, #0]
 8017cfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017cfe:	2b50      	cmp	r3, #80	; 0x50
 8017d00:	d13b      	bne.n	8017d7a <__gethex+0x156>
 8017d02:	7873      	ldrb	r3, [r6, #1]
 8017d04:	2b2b      	cmp	r3, #43	; 0x2b
 8017d06:	d02c      	beq.n	8017d62 <__gethex+0x13e>
 8017d08:	2b2d      	cmp	r3, #45	; 0x2d
 8017d0a:	d02e      	beq.n	8017d6a <__gethex+0x146>
 8017d0c:	1c71      	adds	r1, r6, #1
 8017d0e:	f04f 0900 	mov.w	r9, #0
 8017d12:	7808      	ldrb	r0, [r1, #0]
 8017d14:	f7ff ff70 	bl	8017bf8 <__hexdig_fun>
 8017d18:	1e43      	subs	r3, r0, #1
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	2b18      	cmp	r3, #24
 8017d1e:	d82c      	bhi.n	8017d7a <__gethex+0x156>
 8017d20:	f1a0 0210 	sub.w	r2, r0, #16
 8017d24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017d28:	f7ff ff66 	bl	8017bf8 <__hexdig_fun>
 8017d2c:	1e43      	subs	r3, r0, #1
 8017d2e:	b2db      	uxtb	r3, r3
 8017d30:	2b18      	cmp	r3, #24
 8017d32:	d91d      	bls.n	8017d70 <__gethex+0x14c>
 8017d34:	f1b9 0f00 	cmp.w	r9, #0
 8017d38:	d000      	beq.n	8017d3c <__gethex+0x118>
 8017d3a:	4252      	negs	r2, r2
 8017d3c:	4415      	add	r5, r2
 8017d3e:	f8cb 1000 	str.w	r1, [fp]
 8017d42:	b1e4      	cbz	r4, 8017d7e <__gethex+0x15a>
 8017d44:	9b00      	ldr	r3, [sp, #0]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	bf14      	ite	ne
 8017d4a:	2700      	movne	r7, #0
 8017d4c:	2706      	moveq	r7, #6
 8017d4e:	4638      	mov	r0, r7
 8017d50:	b009      	add	sp, #36	; 0x24
 8017d52:	ecbd 8b02 	vpop	{d8}
 8017d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d5a:	463e      	mov	r6, r7
 8017d5c:	4625      	mov	r5, r4
 8017d5e:	2401      	movs	r4, #1
 8017d60:	e7ca      	b.n	8017cf8 <__gethex+0xd4>
 8017d62:	f04f 0900 	mov.w	r9, #0
 8017d66:	1cb1      	adds	r1, r6, #2
 8017d68:	e7d3      	b.n	8017d12 <__gethex+0xee>
 8017d6a:	f04f 0901 	mov.w	r9, #1
 8017d6e:	e7fa      	b.n	8017d66 <__gethex+0x142>
 8017d70:	230a      	movs	r3, #10
 8017d72:	fb03 0202 	mla	r2, r3, r2, r0
 8017d76:	3a10      	subs	r2, #16
 8017d78:	e7d4      	b.n	8017d24 <__gethex+0x100>
 8017d7a:	4631      	mov	r1, r6
 8017d7c:	e7df      	b.n	8017d3e <__gethex+0x11a>
 8017d7e:	1bf3      	subs	r3, r6, r7
 8017d80:	3b01      	subs	r3, #1
 8017d82:	4621      	mov	r1, r4
 8017d84:	2b07      	cmp	r3, #7
 8017d86:	dc0b      	bgt.n	8017da0 <__gethex+0x17c>
 8017d88:	ee18 0a10 	vmov	r0, s16
 8017d8c:	f000 fa8a 	bl	80182a4 <_Balloc>
 8017d90:	4604      	mov	r4, r0
 8017d92:	b940      	cbnz	r0, 8017da6 <__gethex+0x182>
 8017d94:	4b5d      	ldr	r3, [pc, #372]	; (8017f0c <__gethex+0x2e8>)
 8017d96:	4602      	mov	r2, r0
 8017d98:	21de      	movs	r1, #222	; 0xde
 8017d9a:	485d      	ldr	r0, [pc, #372]	; (8017f10 <__gethex+0x2ec>)
 8017d9c:	f7ff fdd8 	bl	8017950 <__assert_func>
 8017da0:	3101      	adds	r1, #1
 8017da2:	105b      	asrs	r3, r3, #1
 8017da4:	e7ee      	b.n	8017d84 <__gethex+0x160>
 8017da6:	f100 0914 	add.w	r9, r0, #20
 8017daa:	f04f 0b00 	mov.w	fp, #0
 8017dae:	f1ca 0301 	rsb	r3, sl, #1
 8017db2:	f8cd 9008 	str.w	r9, [sp, #8]
 8017db6:	f8cd b000 	str.w	fp, [sp]
 8017dba:	9306      	str	r3, [sp, #24]
 8017dbc:	42b7      	cmp	r7, r6
 8017dbe:	d340      	bcc.n	8017e42 <__gethex+0x21e>
 8017dc0:	9802      	ldr	r0, [sp, #8]
 8017dc2:	9b00      	ldr	r3, [sp, #0]
 8017dc4:	f840 3b04 	str.w	r3, [r0], #4
 8017dc8:	eba0 0009 	sub.w	r0, r0, r9
 8017dcc:	1080      	asrs	r0, r0, #2
 8017dce:	0146      	lsls	r6, r0, #5
 8017dd0:	6120      	str	r0, [r4, #16]
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f000 fb58 	bl	8018488 <__hi0bits>
 8017dd8:	1a30      	subs	r0, r6, r0
 8017dda:	f8d8 6000 	ldr.w	r6, [r8]
 8017dde:	42b0      	cmp	r0, r6
 8017de0:	dd63      	ble.n	8017eaa <__gethex+0x286>
 8017de2:	1b87      	subs	r7, r0, r6
 8017de4:	4639      	mov	r1, r7
 8017de6:	4620      	mov	r0, r4
 8017de8:	f000 fefc 	bl	8018be4 <__any_on>
 8017dec:	4682      	mov	sl, r0
 8017dee:	b1a8      	cbz	r0, 8017e1c <__gethex+0x1f8>
 8017df0:	1e7b      	subs	r3, r7, #1
 8017df2:	1159      	asrs	r1, r3, #5
 8017df4:	f003 021f 	and.w	r2, r3, #31
 8017df8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017dfc:	f04f 0a01 	mov.w	sl, #1
 8017e00:	fa0a f202 	lsl.w	r2, sl, r2
 8017e04:	420a      	tst	r2, r1
 8017e06:	d009      	beq.n	8017e1c <__gethex+0x1f8>
 8017e08:	4553      	cmp	r3, sl
 8017e0a:	dd05      	ble.n	8017e18 <__gethex+0x1f4>
 8017e0c:	1eb9      	subs	r1, r7, #2
 8017e0e:	4620      	mov	r0, r4
 8017e10:	f000 fee8 	bl	8018be4 <__any_on>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d145      	bne.n	8017ea4 <__gethex+0x280>
 8017e18:	f04f 0a02 	mov.w	sl, #2
 8017e1c:	4639      	mov	r1, r7
 8017e1e:	4620      	mov	r0, r4
 8017e20:	f7ff fe98 	bl	8017b54 <rshift>
 8017e24:	443d      	add	r5, r7
 8017e26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e2a:	42ab      	cmp	r3, r5
 8017e2c:	da4c      	bge.n	8017ec8 <__gethex+0x2a4>
 8017e2e:	ee18 0a10 	vmov	r0, s16
 8017e32:	4621      	mov	r1, r4
 8017e34:	f000 fa76 	bl	8018324 <_Bfree>
 8017e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	6013      	str	r3, [r2, #0]
 8017e3e:	27a3      	movs	r7, #163	; 0xa3
 8017e40:	e785      	b.n	8017d4e <__gethex+0x12a>
 8017e42:	1e73      	subs	r3, r6, #1
 8017e44:	9a05      	ldr	r2, [sp, #20]
 8017e46:	9303      	str	r3, [sp, #12]
 8017e48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017e4c:	4293      	cmp	r3, r2
 8017e4e:	d019      	beq.n	8017e84 <__gethex+0x260>
 8017e50:	f1bb 0f20 	cmp.w	fp, #32
 8017e54:	d107      	bne.n	8017e66 <__gethex+0x242>
 8017e56:	9b02      	ldr	r3, [sp, #8]
 8017e58:	9a00      	ldr	r2, [sp, #0]
 8017e5a:	f843 2b04 	str.w	r2, [r3], #4
 8017e5e:	9302      	str	r3, [sp, #8]
 8017e60:	2300      	movs	r3, #0
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	469b      	mov	fp, r3
 8017e66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017e6a:	f7ff fec5 	bl	8017bf8 <__hexdig_fun>
 8017e6e:	9b00      	ldr	r3, [sp, #0]
 8017e70:	f000 000f 	and.w	r0, r0, #15
 8017e74:	fa00 f00b 	lsl.w	r0, r0, fp
 8017e78:	4303      	orrs	r3, r0
 8017e7a:	9300      	str	r3, [sp, #0]
 8017e7c:	f10b 0b04 	add.w	fp, fp, #4
 8017e80:	9b03      	ldr	r3, [sp, #12]
 8017e82:	e00d      	b.n	8017ea0 <__gethex+0x27c>
 8017e84:	9b03      	ldr	r3, [sp, #12]
 8017e86:	9a06      	ldr	r2, [sp, #24]
 8017e88:	4413      	add	r3, r2
 8017e8a:	42bb      	cmp	r3, r7
 8017e8c:	d3e0      	bcc.n	8017e50 <__gethex+0x22c>
 8017e8e:	4618      	mov	r0, r3
 8017e90:	9901      	ldr	r1, [sp, #4]
 8017e92:	9307      	str	r3, [sp, #28]
 8017e94:	4652      	mov	r2, sl
 8017e96:	f7fe fe96 	bl	8016bc6 <strncmp>
 8017e9a:	9b07      	ldr	r3, [sp, #28]
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d1d7      	bne.n	8017e50 <__gethex+0x22c>
 8017ea0:	461e      	mov	r6, r3
 8017ea2:	e78b      	b.n	8017dbc <__gethex+0x198>
 8017ea4:	f04f 0a03 	mov.w	sl, #3
 8017ea8:	e7b8      	b.n	8017e1c <__gethex+0x1f8>
 8017eaa:	da0a      	bge.n	8017ec2 <__gethex+0x29e>
 8017eac:	1a37      	subs	r7, r6, r0
 8017eae:	4621      	mov	r1, r4
 8017eb0:	ee18 0a10 	vmov	r0, s16
 8017eb4:	463a      	mov	r2, r7
 8017eb6:	f000 fc51 	bl	801875c <__lshift>
 8017eba:	1bed      	subs	r5, r5, r7
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	f100 0914 	add.w	r9, r0, #20
 8017ec2:	f04f 0a00 	mov.w	sl, #0
 8017ec6:	e7ae      	b.n	8017e26 <__gethex+0x202>
 8017ec8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017ecc:	42a8      	cmp	r0, r5
 8017ece:	dd72      	ble.n	8017fb6 <__gethex+0x392>
 8017ed0:	1b45      	subs	r5, r0, r5
 8017ed2:	42ae      	cmp	r6, r5
 8017ed4:	dc36      	bgt.n	8017f44 <__gethex+0x320>
 8017ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017eda:	2b02      	cmp	r3, #2
 8017edc:	d02a      	beq.n	8017f34 <__gethex+0x310>
 8017ede:	2b03      	cmp	r3, #3
 8017ee0:	d02c      	beq.n	8017f3c <__gethex+0x318>
 8017ee2:	2b01      	cmp	r3, #1
 8017ee4:	d11c      	bne.n	8017f20 <__gethex+0x2fc>
 8017ee6:	42ae      	cmp	r6, r5
 8017ee8:	d11a      	bne.n	8017f20 <__gethex+0x2fc>
 8017eea:	2e01      	cmp	r6, #1
 8017eec:	d112      	bne.n	8017f14 <__gethex+0x2f0>
 8017eee:	9a04      	ldr	r2, [sp, #16]
 8017ef0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ef4:	6013      	str	r3, [r2, #0]
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	6123      	str	r3, [r4, #16]
 8017efa:	f8c9 3000 	str.w	r3, [r9]
 8017efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f00:	2762      	movs	r7, #98	; 0x62
 8017f02:	601c      	str	r4, [r3, #0]
 8017f04:	e723      	b.n	8017d4e <__gethex+0x12a>
 8017f06:	bf00      	nop
 8017f08:	0801d058 	.word	0x0801d058
 8017f0c:	0801cfe1 	.word	0x0801cfe1
 8017f10:	0801cff2 	.word	0x0801cff2
 8017f14:	1e71      	subs	r1, r6, #1
 8017f16:	4620      	mov	r0, r4
 8017f18:	f000 fe64 	bl	8018be4 <__any_on>
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	d1e6      	bne.n	8017eee <__gethex+0x2ca>
 8017f20:	ee18 0a10 	vmov	r0, s16
 8017f24:	4621      	mov	r1, r4
 8017f26:	f000 f9fd 	bl	8018324 <_Bfree>
 8017f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	6013      	str	r3, [r2, #0]
 8017f30:	2750      	movs	r7, #80	; 0x50
 8017f32:	e70c      	b.n	8017d4e <__gethex+0x12a>
 8017f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d1f2      	bne.n	8017f20 <__gethex+0x2fc>
 8017f3a:	e7d8      	b.n	8017eee <__gethex+0x2ca>
 8017f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d1d5      	bne.n	8017eee <__gethex+0x2ca>
 8017f42:	e7ed      	b.n	8017f20 <__gethex+0x2fc>
 8017f44:	1e6f      	subs	r7, r5, #1
 8017f46:	f1ba 0f00 	cmp.w	sl, #0
 8017f4a:	d131      	bne.n	8017fb0 <__gethex+0x38c>
 8017f4c:	b127      	cbz	r7, 8017f58 <__gethex+0x334>
 8017f4e:	4639      	mov	r1, r7
 8017f50:	4620      	mov	r0, r4
 8017f52:	f000 fe47 	bl	8018be4 <__any_on>
 8017f56:	4682      	mov	sl, r0
 8017f58:	117b      	asrs	r3, r7, #5
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017f60:	f007 071f 	and.w	r7, r7, #31
 8017f64:	fa01 f707 	lsl.w	r7, r1, r7
 8017f68:	421f      	tst	r7, r3
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	bf18      	it	ne
 8017f70:	f04a 0a02 	orrne.w	sl, sl, #2
 8017f74:	1b76      	subs	r6, r6, r5
 8017f76:	f7ff fded 	bl	8017b54 <rshift>
 8017f7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017f7e:	2702      	movs	r7, #2
 8017f80:	f1ba 0f00 	cmp.w	sl, #0
 8017f84:	d048      	beq.n	8018018 <__gethex+0x3f4>
 8017f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f8a:	2b02      	cmp	r3, #2
 8017f8c:	d015      	beq.n	8017fba <__gethex+0x396>
 8017f8e:	2b03      	cmp	r3, #3
 8017f90:	d017      	beq.n	8017fc2 <__gethex+0x39e>
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d109      	bne.n	8017faa <__gethex+0x386>
 8017f96:	f01a 0f02 	tst.w	sl, #2
 8017f9a:	d006      	beq.n	8017faa <__gethex+0x386>
 8017f9c:	f8d9 0000 	ldr.w	r0, [r9]
 8017fa0:	ea4a 0a00 	orr.w	sl, sl, r0
 8017fa4:	f01a 0f01 	tst.w	sl, #1
 8017fa8:	d10e      	bne.n	8017fc8 <__gethex+0x3a4>
 8017faa:	f047 0710 	orr.w	r7, r7, #16
 8017fae:	e033      	b.n	8018018 <__gethex+0x3f4>
 8017fb0:	f04f 0a01 	mov.w	sl, #1
 8017fb4:	e7d0      	b.n	8017f58 <__gethex+0x334>
 8017fb6:	2701      	movs	r7, #1
 8017fb8:	e7e2      	b.n	8017f80 <__gethex+0x35c>
 8017fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fbc:	f1c3 0301 	rsb	r3, r3, #1
 8017fc0:	9315      	str	r3, [sp, #84]	; 0x54
 8017fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d0f0      	beq.n	8017faa <__gethex+0x386>
 8017fc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017fcc:	f104 0314 	add.w	r3, r4, #20
 8017fd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017fd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017fd8:	f04f 0c00 	mov.w	ip, #0
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fe2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8017fe6:	d01c      	beq.n	8018022 <__gethex+0x3fe>
 8017fe8:	3201      	adds	r2, #1
 8017fea:	6002      	str	r2, [r0, #0]
 8017fec:	2f02      	cmp	r7, #2
 8017fee:	f104 0314 	add.w	r3, r4, #20
 8017ff2:	d13f      	bne.n	8018074 <__gethex+0x450>
 8017ff4:	f8d8 2000 	ldr.w	r2, [r8]
 8017ff8:	3a01      	subs	r2, #1
 8017ffa:	42b2      	cmp	r2, r6
 8017ffc:	d10a      	bne.n	8018014 <__gethex+0x3f0>
 8017ffe:	1171      	asrs	r1, r6, #5
 8018000:	2201      	movs	r2, #1
 8018002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018006:	f006 061f 	and.w	r6, r6, #31
 801800a:	fa02 f606 	lsl.w	r6, r2, r6
 801800e:	421e      	tst	r6, r3
 8018010:	bf18      	it	ne
 8018012:	4617      	movne	r7, r2
 8018014:	f047 0720 	orr.w	r7, r7, #32
 8018018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801801a:	601c      	str	r4, [r3, #0]
 801801c:	9b04      	ldr	r3, [sp, #16]
 801801e:	601d      	str	r5, [r3, #0]
 8018020:	e695      	b.n	8017d4e <__gethex+0x12a>
 8018022:	4299      	cmp	r1, r3
 8018024:	f843 cc04 	str.w	ip, [r3, #-4]
 8018028:	d8d8      	bhi.n	8017fdc <__gethex+0x3b8>
 801802a:	68a3      	ldr	r3, [r4, #8]
 801802c:	459b      	cmp	fp, r3
 801802e:	db19      	blt.n	8018064 <__gethex+0x440>
 8018030:	6861      	ldr	r1, [r4, #4]
 8018032:	ee18 0a10 	vmov	r0, s16
 8018036:	3101      	adds	r1, #1
 8018038:	f000 f934 	bl	80182a4 <_Balloc>
 801803c:	4681      	mov	r9, r0
 801803e:	b918      	cbnz	r0, 8018048 <__gethex+0x424>
 8018040:	4b1a      	ldr	r3, [pc, #104]	; (80180ac <__gethex+0x488>)
 8018042:	4602      	mov	r2, r0
 8018044:	2184      	movs	r1, #132	; 0x84
 8018046:	e6a8      	b.n	8017d9a <__gethex+0x176>
 8018048:	6922      	ldr	r2, [r4, #16]
 801804a:	3202      	adds	r2, #2
 801804c:	f104 010c 	add.w	r1, r4, #12
 8018050:	0092      	lsls	r2, r2, #2
 8018052:	300c      	adds	r0, #12
 8018054:	f7fe fbbf 	bl	80167d6 <memcpy>
 8018058:	4621      	mov	r1, r4
 801805a:	ee18 0a10 	vmov	r0, s16
 801805e:	f000 f961 	bl	8018324 <_Bfree>
 8018062:	464c      	mov	r4, r9
 8018064:	6923      	ldr	r3, [r4, #16]
 8018066:	1c5a      	adds	r2, r3, #1
 8018068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801806c:	6122      	str	r2, [r4, #16]
 801806e:	2201      	movs	r2, #1
 8018070:	615a      	str	r2, [r3, #20]
 8018072:	e7bb      	b.n	8017fec <__gethex+0x3c8>
 8018074:	6922      	ldr	r2, [r4, #16]
 8018076:	455a      	cmp	r2, fp
 8018078:	dd0b      	ble.n	8018092 <__gethex+0x46e>
 801807a:	2101      	movs	r1, #1
 801807c:	4620      	mov	r0, r4
 801807e:	f7ff fd69 	bl	8017b54 <rshift>
 8018082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018086:	3501      	adds	r5, #1
 8018088:	42ab      	cmp	r3, r5
 801808a:	f6ff aed0 	blt.w	8017e2e <__gethex+0x20a>
 801808e:	2701      	movs	r7, #1
 8018090:	e7c0      	b.n	8018014 <__gethex+0x3f0>
 8018092:	f016 061f 	ands.w	r6, r6, #31
 8018096:	d0fa      	beq.n	801808e <__gethex+0x46a>
 8018098:	4453      	add	r3, sl
 801809a:	f1c6 0620 	rsb	r6, r6, #32
 801809e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80180a2:	f000 f9f1 	bl	8018488 <__hi0bits>
 80180a6:	42b0      	cmp	r0, r6
 80180a8:	dbe7      	blt.n	801807a <__gethex+0x456>
 80180aa:	e7f0      	b.n	801808e <__gethex+0x46a>
 80180ac:	0801cfe1 	.word	0x0801cfe1

080180b0 <L_shift>:
 80180b0:	f1c2 0208 	rsb	r2, r2, #8
 80180b4:	0092      	lsls	r2, r2, #2
 80180b6:	b570      	push	{r4, r5, r6, lr}
 80180b8:	f1c2 0620 	rsb	r6, r2, #32
 80180bc:	6843      	ldr	r3, [r0, #4]
 80180be:	6804      	ldr	r4, [r0, #0]
 80180c0:	fa03 f506 	lsl.w	r5, r3, r6
 80180c4:	432c      	orrs	r4, r5
 80180c6:	40d3      	lsrs	r3, r2
 80180c8:	6004      	str	r4, [r0, #0]
 80180ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80180ce:	4288      	cmp	r0, r1
 80180d0:	d3f4      	bcc.n	80180bc <L_shift+0xc>
 80180d2:	bd70      	pop	{r4, r5, r6, pc}

080180d4 <__match>:
 80180d4:	b530      	push	{r4, r5, lr}
 80180d6:	6803      	ldr	r3, [r0, #0]
 80180d8:	3301      	adds	r3, #1
 80180da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80180de:	b914      	cbnz	r4, 80180e6 <__match+0x12>
 80180e0:	6003      	str	r3, [r0, #0]
 80180e2:	2001      	movs	r0, #1
 80180e4:	bd30      	pop	{r4, r5, pc}
 80180e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80180ee:	2d19      	cmp	r5, #25
 80180f0:	bf98      	it	ls
 80180f2:	3220      	addls	r2, #32
 80180f4:	42a2      	cmp	r2, r4
 80180f6:	d0f0      	beq.n	80180da <__match+0x6>
 80180f8:	2000      	movs	r0, #0
 80180fa:	e7f3      	b.n	80180e4 <__match+0x10>

080180fc <__hexnan>:
 80180fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018100:	680b      	ldr	r3, [r1, #0]
 8018102:	115e      	asrs	r6, r3, #5
 8018104:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018108:	f013 031f 	ands.w	r3, r3, #31
 801810c:	b087      	sub	sp, #28
 801810e:	bf18      	it	ne
 8018110:	3604      	addne	r6, #4
 8018112:	2500      	movs	r5, #0
 8018114:	1f37      	subs	r7, r6, #4
 8018116:	4690      	mov	r8, r2
 8018118:	6802      	ldr	r2, [r0, #0]
 801811a:	9301      	str	r3, [sp, #4]
 801811c:	4682      	mov	sl, r0
 801811e:	f846 5c04 	str.w	r5, [r6, #-4]
 8018122:	46b9      	mov	r9, r7
 8018124:	463c      	mov	r4, r7
 8018126:	9502      	str	r5, [sp, #8]
 8018128:	46ab      	mov	fp, r5
 801812a:	7851      	ldrb	r1, [r2, #1]
 801812c:	1c53      	adds	r3, r2, #1
 801812e:	9303      	str	r3, [sp, #12]
 8018130:	b341      	cbz	r1, 8018184 <__hexnan+0x88>
 8018132:	4608      	mov	r0, r1
 8018134:	9205      	str	r2, [sp, #20]
 8018136:	9104      	str	r1, [sp, #16]
 8018138:	f7ff fd5e 	bl	8017bf8 <__hexdig_fun>
 801813c:	2800      	cmp	r0, #0
 801813e:	d14f      	bne.n	80181e0 <__hexnan+0xe4>
 8018140:	9904      	ldr	r1, [sp, #16]
 8018142:	9a05      	ldr	r2, [sp, #20]
 8018144:	2920      	cmp	r1, #32
 8018146:	d818      	bhi.n	801817a <__hexnan+0x7e>
 8018148:	9b02      	ldr	r3, [sp, #8]
 801814a:	459b      	cmp	fp, r3
 801814c:	dd13      	ble.n	8018176 <__hexnan+0x7a>
 801814e:	454c      	cmp	r4, r9
 8018150:	d206      	bcs.n	8018160 <__hexnan+0x64>
 8018152:	2d07      	cmp	r5, #7
 8018154:	dc04      	bgt.n	8018160 <__hexnan+0x64>
 8018156:	462a      	mov	r2, r5
 8018158:	4649      	mov	r1, r9
 801815a:	4620      	mov	r0, r4
 801815c:	f7ff ffa8 	bl	80180b0 <L_shift>
 8018160:	4544      	cmp	r4, r8
 8018162:	d950      	bls.n	8018206 <__hexnan+0x10a>
 8018164:	2300      	movs	r3, #0
 8018166:	f1a4 0904 	sub.w	r9, r4, #4
 801816a:	f844 3c04 	str.w	r3, [r4, #-4]
 801816e:	f8cd b008 	str.w	fp, [sp, #8]
 8018172:	464c      	mov	r4, r9
 8018174:	461d      	mov	r5, r3
 8018176:	9a03      	ldr	r2, [sp, #12]
 8018178:	e7d7      	b.n	801812a <__hexnan+0x2e>
 801817a:	2929      	cmp	r1, #41	; 0x29
 801817c:	d156      	bne.n	801822c <__hexnan+0x130>
 801817e:	3202      	adds	r2, #2
 8018180:	f8ca 2000 	str.w	r2, [sl]
 8018184:	f1bb 0f00 	cmp.w	fp, #0
 8018188:	d050      	beq.n	801822c <__hexnan+0x130>
 801818a:	454c      	cmp	r4, r9
 801818c:	d206      	bcs.n	801819c <__hexnan+0xa0>
 801818e:	2d07      	cmp	r5, #7
 8018190:	dc04      	bgt.n	801819c <__hexnan+0xa0>
 8018192:	462a      	mov	r2, r5
 8018194:	4649      	mov	r1, r9
 8018196:	4620      	mov	r0, r4
 8018198:	f7ff ff8a 	bl	80180b0 <L_shift>
 801819c:	4544      	cmp	r4, r8
 801819e:	d934      	bls.n	801820a <__hexnan+0x10e>
 80181a0:	f1a8 0204 	sub.w	r2, r8, #4
 80181a4:	4623      	mov	r3, r4
 80181a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80181aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80181ae:	429f      	cmp	r7, r3
 80181b0:	d2f9      	bcs.n	80181a6 <__hexnan+0xaa>
 80181b2:	1b3b      	subs	r3, r7, r4
 80181b4:	f023 0303 	bic.w	r3, r3, #3
 80181b8:	3304      	adds	r3, #4
 80181ba:	3401      	adds	r4, #1
 80181bc:	3e03      	subs	r6, #3
 80181be:	42b4      	cmp	r4, r6
 80181c0:	bf88      	it	hi
 80181c2:	2304      	movhi	r3, #4
 80181c4:	4443      	add	r3, r8
 80181c6:	2200      	movs	r2, #0
 80181c8:	f843 2b04 	str.w	r2, [r3], #4
 80181cc:	429f      	cmp	r7, r3
 80181ce:	d2fb      	bcs.n	80181c8 <__hexnan+0xcc>
 80181d0:	683b      	ldr	r3, [r7, #0]
 80181d2:	b91b      	cbnz	r3, 80181dc <__hexnan+0xe0>
 80181d4:	4547      	cmp	r7, r8
 80181d6:	d127      	bne.n	8018228 <__hexnan+0x12c>
 80181d8:	2301      	movs	r3, #1
 80181da:	603b      	str	r3, [r7, #0]
 80181dc:	2005      	movs	r0, #5
 80181de:	e026      	b.n	801822e <__hexnan+0x132>
 80181e0:	3501      	adds	r5, #1
 80181e2:	2d08      	cmp	r5, #8
 80181e4:	f10b 0b01 	add.w	fp, fp, #1
 80181e8:	dd06      	ble.n	80181f8 <__hexnan+0xfc>
 80181ea:	4544      	cmp	r4, r8
 80181ec:	d9c3      	bls.n	8018176 <__hexnan+0x7a>
 80181ee:	2300      	movs	r3, #0
 80181f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80181f4:	2501      	movs	r5, #1
 80181f6:	3c04      	subs	r4, #4
 80181f8:	6822      	ldr	r2, [r4, #0]
 80181fa:	f000 000f 	and.w	r0, r0, #15
 80181fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018202:	6022      	str	r2, [r4, #0]
 8018204:	e7b7      	b.n	8018176 <__hexnan+0x7a>
 8018206:	2508      	movs	r5, #8
 8018208:	e7b5      	b.n	8018176 <__hexnan+0x7a>
 801820a:	9b01      	ldr	r3, [sp, #4]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d0df      	beq.n	80181d0 <__hexnan+0xd4>
 8018210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018214:	f1c3 0320 	rsb	r3, r3, #32
 8018218:	fa22 f303 	lsr.w	r3, r2, r3
 801821c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018220:	401a      	ands	r2, r3
 8018222:	f846 2c04 	str.w	r2, [r6, #-4]
 8018226:	e7d3      	b.n	80181d0 <__hexnan+0xd4>
 8018228:	3f04      	subs	r7, #4
 801822a:	e7d1      	b.n	80181d0 <__hexnan+0xd4>
 801822c:	2004      	movs	r0, #4
 801822e:	b007      	add	sp, #28
 8018230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018234 <_lseek_r>:
 8018234:	b538      	push	{r3, r4, r5, lr}
 8018236:	4d07      	ldr	r5, [pc, #28]	; (8018254 <_lseek_r+0x20>)
 8018238:	4604      	mov	r4, r0
 801823a:	4608      	mov	r0, r1
 801823c:	4611      	mov	r1, r2
 801823e:	2200      	movs	r2, #0
 8018240:	602a      	str	r2, [r5, #0]
 8018242:	461a      	mov	r2, r3
 8018244:	f7e9 fa08 	bl	8001658 <_lseek>
 8018248:	1c43      	adds	r3, r0, #1
 801824a:	d102      	bne.n	8018252 <_lseek_r+0x1e>
 801824c:	682b      	ldr	r3, [r5, #0]
 801824e:	b103      	cbz	r3, 8018252 <_lseek_r+0x1e>
 8018250:	6023      	str	r3, [r4, #0]
 8018252:	bd38      	pop	{r3, r4, r5, pc}
 8018254:	20011cb0 	.word	0x20011cb0

08018258 <malloc>:
 8018258:	4b02      	ldr	r3, [pc, #8]	; (8018264 <malloc+0xc>)
 801825a:	4601      	mov	r1, r0
 801825c:	6818      	ldr	r0, [r3, #0]
 801825e:	f7fe bb0b 	b.w	8016878 <_malloc_r>
 8018262:	bf00      	nop
 8018264:	2000002c 	.word	0x2000002c

08018268 <__ascii_mbtowc>:
 8018268:	b082      	sub	sp, #8
 801826a:	b901      	cbnz	r1, 801826e <__ascii_mbtowc+0x6>
 801826c:	a901      	add	r1, sp, #4
 801826e:	b142      	cbz	r2, 8018282 <__ascii_mbtowc+0x1a>
 8018270:	b14b      	cbz	r3, 8018286 <__ascii_mbtowc+0x1e>
 8018272:	7813      	ldrb	r3, [r2, #0]
 8018274:	600b      	str	r3, [r1, #0]
 8018276:	7812      	ldrb	r2, [r2, #0]
 8018278:	1e10      	subs	r0, r2, #0
 801827a:	bf18      	it	ne
 801827c:	2001      	movne	r0, #1
 801827e:	b002      	add	sp, #8
 8018280:	4770      	bx	lr
 8018282:	4610      	mov	r0, r2
 8018284:	e7fb      	b.n	801827e <__ascii_mbtowc+0x16>
 8018286:	f06f 0001 	mvn.w	r0, #1
 801828a:	e7f8      	b.n	801827e <__ascii_mbtowc+0x16>

0801828c <__malloc_lock>:
 801828c:	4801      	ldr	r0, [pc, #4]	; (8018294 <__malloc_lock+0x8>)
 801828e:	f7fe ba90 	b.w	80167b2 <__retarget_lock_acquire_recursive>
 8018292:	bf00      	nop
 8018294:	20011ca4 	.word	0x20011ca4

08018298 <__malloc_unlock>:
 8018298:	4801      	ldr	r0, [pc, #4]	; (80182a0 <__malloc_unlock+0x8>)
 801829a:	f7fe ba8b 	b.w	80167b4 <__retarget_lock_release_recursive>
 801829e:	bf00      	nop
 80182a0:	20011ca4 	.word	0x20011ca4

080182a4 <_Balloc>:
 80182a4:	b570      	push	{r4, r5, r6, lr}
 80182a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80182a8:	4604      	mov	r4, r0
 80182aa:	460d      	mov	r5, r1
 80182ac:	b976      	cbnz	r6, 80182cc <_Balloc+0x28>
 80182ae:	2010      	movs	r0, #16
 80182b0:	f7ff ffd2 	bl	8018258 <malloc>
 80182b4:	4602      	mov	r2, r0
 80182b6:	6260      	str	r0, [r4, #36]	; 0x24
 80182b8:	b920      	cbnz	r0, 80182c4 <_Balloc+0x20>
 80182ba:	4b18      	ldr	r3, [pc, #96]	; (801831c <_Balloc+0x78>)
 80182bc:	4818      	ldr	r0, [pc, #96]	; (8018320 <_Balloc+0x7c>)
 80182be:	2166      	movs	r1, #102	; 0x66
 80182c0:	f7ff fb46 	bl	8017950 <__assert_func>
 80182c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80182c8:	6006      	str	r6, [r0, #0]
 80182ca:	60c6      	str	r6, [r0, #12]
 80182cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80182ce:	68f3      	ldr	r3, [r6, #12]
 80182d0:	b183      	cbz	r3, 80182f4 <_Balloc+0x50>
 80182d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80182d4:	68db      	ldr	r3, [r3, #12]
 80182d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80182da:	b9b8      	cbnz	r0, 801830c <_Balloc+0x68>
 80182dc:	2101      	movs	r1, #1
 80182de:	fa01 f605 	lsl.w	r6, r1, r5
 80182e2:	1d72      	adds	r2, r6, #5
 80182e4:	0092      	lsls	r2, r2, #2
 80182e6:	4620      	mov	r0, r4
 80182e8:	f000 fc9d 	bl	8018c26 <_calloc_r>
 80182ec:	b160      	cbz	r0, 8018308 <_Balloc+0x64>
 80182ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80182f2:	e00e      	b.n	8018312 <_Balloc+0x6e>
 80182f4:	2221      	movs	r2, #33	; 0x21
 80182f6:	2104      	movs	r1, #4
 80182f8:	4620      	mov	r0, r4
 80182fa:	f000 fc94 	bl	8018c26 <_calloc_r>
 80182fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018300:	60f0      	str	r0, [r6, #12]
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d1e4      	bne.n	80182d2 <_Balloc+0x2e>
 8018308:	2000      	movs	r0, #0
 801830a:	bd70      	pop	{r4, r5, r6, pc}
 801830c:	6802      	ldr	r2, [r0, #0]
 801830e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018312:	2300      	movs	r3, #0
 8018314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018318:	e7f7      	b.n	801830a <_Balloc+0x66>
 801831a:	bf00      	nop
 801831c:	0801ce74 	.word	0x0801ce74
 8018320:	0801d06c 	.word	0x0801d06c

08018324 <_Bfree>:
 8018324:	b570      	push	{r4, r5, r6, lr}
 8018326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018328:	4605      	mov	r5, r0
 801832a:	460c      	mov	r4, r1
 801832c:	b976      	cbnz	r6, 801834c <_Bfree+0x28>
 801832e:	2010      	movs	r0, #16
 8018330:	f7ff ff92 	bl	8018258 <malloc>
 8018334:	4602      	mov	r2, r0
 8018336:	6268      	str	r0, [r5, #36]	; 0x24
 8018338:	b920      	cbnz	r0, 8018344 <_Bfree+0x20>
 801833a:	4b09      	ldr	r3, [pc, #36]	; (8018360 <_Bfree+0x3c>)
 801833c:	4809      	ldr	r0, [pc, #36]	; (8018364 <_Bfree+0x40>)
 801833e:	218a      	movs	r1, #138	; 0x8a
 8018340:	f7ff fb06 	bl	8017950 <__assert_func>
 8018344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018348:	6006      	str	r6, [r0, #0]
 801834a:	60c6      	str	r6, [r0, #12]
 801834c:	b13c      	cbz	r4, 801835e <_Bfree+0x3a>
 801834e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018350:	6862      	ldr	r2, [r4, #4]
 8018352:	68db      	ldr	r3, [r3, #12]
 8018354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018358:	6021      	str	r1, [r4, #0]
 801835a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801835e:	bd70      	pop	{r4, r5, r6, pc}
 8018360:	0801ce74 	.word	0x0801ce74
 8018364:	0801d06c 	.word	0x0801d06c

08018368 <__multadd>:
 8018368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801836c:	690d      	ldr	r5, [r1, #16]
 801836e:	4607      	mov	r7, r0
 8018370:	460c      	mov	r4, r1
 8018372:	461e      	mov	r6, r3
 8018374:	f101 0c14 	add.w	ip, r1, #20
 8018378:	2000      	movs	r0, #0
 801837a:	f8dc 3000 	ldr.w	r3, [ip]
 801837e:	b299      	uxth	r1, r3
 8018380:	fb02 6101 	mla	r1, r2, r1, r6
 8018384:	0c1e      	lsrs	r6, r3, #16
 8018386:	0c0b      	lsrs	r3, r1, #16
 8018388:	fb02 3306 	mla	r3, r2, r6, r3
 801838c:	b289      	uxth	r1, r1
 801838e:	3001      	adds	r0, #1
 8018390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018394:	4285      	cmp	r5, r0
 8018396:	f84c 1b04 	str.w	r1, [ip], #4
 801839a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801839e:	dcec      	bgt.n	801837a <__multadd+0x12>
 80183a0:	b30e      	cbz	r6, 80183e6 <__multadd+0x7e>
 80183a2:	68a3      	ldr	r3, [r4, #8]
 80183a4:	42ab      	cmp	r3, r5
 80183a6:	dc19      	bgt.n	80183dc <__multadd+0x74>
 80183a8:	6861      	ldr	r1, [r4, #4]
 80183aa:	4638      	mov	r0, r7
 80183ac:	3101      	adds	r1, #1
 80183ae:	f7ff ff79 	bl	80182a4 <_Balloc>
 80183b2:	4680      	mov	r8, r0
 80183b4:	b928      	cbnz	r0, 80183c2 <__multadd+0x5a>
 80183b6:	4602      	mov	r2, r0
 80183b8:	4b0c      	ldr	r3, [pc, #48]	; (80183ec <__multadd+0x84>)
 80183ba:	480d      	ldr	r0, [pc, #52]	; (80183f0 <__multadd+0x88>)
 80183bc:	21b5      	movs	r1, #181	; 0xb5
 80183be:	f7ff fac7 	bl	8017950 <__assert_func>
 80183c2:	6922      	ldr	r2, [r4, #16]
 80183c4:	3202      	adds	r2, #2
 80183c6:	f104 010c 	add.w	r1, r4, #12
 80183ca:	0092      	lsls	r2, r2, #2
 80183cc:	300c      	adds	r0, #12
 80183ce:	f7fe fa02 	bl	80167d6 <memcpy>
 80183d2:	4621      	mov	r1, r4
 80183d4:	4638      	mov	r0, r7
 80183d6:	f7ff ffa5 	bl	8018324 <_Bfree>
 80183da:	4644      	mov	r4, r8
 80183dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80183e0:	3501      	adds	r5, #1
 80183e2:	615e      	str	r6, [r3, #20]
 80183e4:	6125      	str	r5, [r4, #16]
 80183e6:	4620      	mov	r0, r4
 80183e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ec:	0801cfe1 	.word	0x0801cfe1
 80183f0:	0801d06c 	.word	0x0801d06c

080183f4 <__s2b>:
 80183f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183f8:	460c      	mov	r4, r1
 80183fa:	4615      	mov	r5, r2
 80183fc:	461f      	mov	r7, r3
 80183fe:	2209      	movs	r2, #9
 8018400:	3308      	adds	r3, #8
 8018402:	4606      	mov	r6, r0
 8018404:	fb93 f3f2 	sdiv	r3, r3, r2
 8018408:	2100      	movs	r1, #0
 801840a:	2201      	movs	r2, #1
 801840c:	429a      	cmp	r2, r3
 801840e:	db09      	blt.n	8018424 <__s2b+0x30>
 8018410:	4630      	mov	r0, r6
 8018412:	f7ff ff47 	bl	80182a4 <_Balloc>
 8018416:	b940      	cbnz	r0, 801842a <__s2b+0x36>
 8018418:	4602      	mov	r2, r0
 801841a:	4b19      	ldr	r3, [pc, #100]	; (8018480 <__s2b+0x8c>)
 801841c:	4819      	ldr	r0, [pc, #100]	; (8018484 <__s2b+0x90>)
 801841e:	21ce      	movs	r1, #206	; 0xce
 8018420:	f7ff fa96 	bl	8017950 <__assert_func>
 8018424:	0052      	lsls	r2, r2, #1
 8018426:	3101      	adds	r1, #1
 8018428:	e7f0      	b.n	801840c <__s2b+0x18>
 801842a:	9b08      	ldr	r3, [sp, #32]
 801842c:	6143      	str	r3, [r0, #20]
 801842e:	2d09      	cmp	r5, #9
 8018430:	f04f 0301 	mov.w	r3, #1
 8018434:	6103      	str	r3, [r0, #16]
 8018436:	dd16      	ble.n	8018466 <__s2b+0x72>
 8018438:	f104 0909 	add.w	r9, r4, #9
 801843c:	46c8      	mov	r8, r9
 801843e:	442c      	add	r4, r5
 8018440:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018444:	4601      	mov	r1, r0
 8018446:	3b30      	subs	r3, #48	; 0x30
 8018448:	220a      	movs	r2, #10
 801844a:	4630      	mov	r0, r6
 801844c:	f7ff ff8c 	bl	8018368 <__multadd>
 8018450:	45a0      	cmp	r8, r4
 8018452:	d1f5      	bne.n	8018440 <__s2b+0x4c>
 8018454:	f1a5 0408 	sub.w	r4, r5, #8
 8018458:	444c      	add	r4, r9
 801845a:	1b2d      	subs	r5, r5, r4
 801845c:	1963      	adds	r3, r4, r5
 801845e:	42bb      	cmp	r3, r7
 8018460:	db04      	blt.n	801846c <__s2b+0x78>
 8018462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018466:	340a      	adds	r4, #10
 8018468:	2509      	movs	r5, #9
 801846a:	e7f6      	b.n	801845a <__s2b+0x66>
 801846c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018470:	4601      	mov	r1, r0
 8018472:	3b30      	subs	r3, #48	; 0x30
 8018474:	220a      	movs	r2, #10
 8018476:	4630      	mov	r0, r6
 8018478:	f7ff ff76 	bl	8018368 <__multadd>
 801847c:	e7ee      	b.n	801845c <__s2b+0x68>
 801847e:	bf00      	nop
 8018480:	0801cfe1 	.word	0x0801cfe1
 8018484:	0801d06c 	.word	0x0801d06c

08018488 <__hi0bits>:
 8018488:	0c03      	lsrs	r3, r0, #16
 801848a:	041b      	lsls	r3, r3, #16
 801848c:	b9d3      	cbnz	r3, 80184c4 <__hi0bits+0x3c>
 801848e:	0400      	lsls	r0, r0, #16
 8018490:	2310      	movs	r3, #16
 8018492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018496:	bf04      	itt	eq
 8018498:	0200      	lsleq	r0, r0, #8
 801849a:	3308      	addeq	r3, #8
 801849c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80184a0:	bf04      	itt	eq
 80184a2:	0100      	lsleq	r0, r0, #4
 80184a4:	3304      	addeq	r3, #4
 80184a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80184aa:	bf04      	itt	eq
 80184ac:	0080      	lsleq	r0, r0, #2
 80184ae:	3302      	addeq	r3, #2
 80184b0:	2800      	cmp	r0, #0
 80184b2:	db05      	blt.n	80184c0 <__hi0bits+0x38>
 80184b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80184b8:	f103 0301 	add.w	r3, r3, #1
 80184bc:	bf08      	it	eq
 80184be:	2320      	moveq	r3, #32
 80184c0:	4618      	mov	r0, r3
 80184c2:	4770      	bx	lr
 80184c4:	2300      	movs	r3, #0
 80184c6:	e7e4      	b.n	8018492 <__hi0bits+0xa>

080184c8 <__lo0bits>:
 80184c8:	6803      	ldr	r3, [r0, #0]
 80184ca:	f013 0207 	ands.w	r2, r3, #7
 80184ce:	4601      	mov	r1, r0
 80184d0:	d00b      	beq.n	80184ea <__lo0bits+0x22>
 80184d2:	07da      	lsls	r2, r3, #31
 80184d4:	d423      	bmi.n	801851e <__lo0bits+0x56>
 80184d6:	0798      	lsls	r0, r3, #30
 80184d8:	bf49      	itett	mi
 80184da:	085b      	lsrmi	r3, r3, #1
 80184dc:	089b      	lsrpl	r3, r3, #2
 80184de:	2001      	movmi	r0, #1
 80184e0:	600b      	strmi	r3, [r1, #0]
 80184e2:	bf5c      	itt	pl
 80184e4:	600b      	strpl	r3, [r1, #0]
 80184e6:	2002      	movpl	r0, #2
 80184e8:	4770      	bx	lr
 80184ea:	b298      	uxth	r0, r3
 80184ec:	b9a8      	cbnz	r0, 801851a <__lo0bits+0x52>
 80184ee:	0c1b      	lsrs	r3, r3, #16
 80184f0:	2010      	movs	r0, #16
 80184f2:	b2da      	uxtb	r2, r3
 80184f4:	b90a      	cbnz	r2, 80184fa <__lo0bits+0x32>
 80184f6:	3008      	adds	r0, #8
 80184f8:	0a1b      	lsrs	r3, r3, #8
 80184fa:	071a      	lsls	r2, r3, #28
 80184fc:	bf04      	itt	eq
 80184fe:	091b      	lsreq	r3, r3, #4
 8018500:	3004      	addeq	r0, #4
 8018502:	079a      	lsls	r2, r3, #30
 8018504:	bf04      	itt	eq
 8018506:	089b      	lsreq	r3, r3, #2
 8018508:	3002      	addeq	r0, #2
 801850a:	07da      	lsls	r2, r3, #31
 801850c:	d403      	bmi.n	8018516 <__lo0bits+0x4e>
 801850e:	085b      	lsrs	r3, r3, #1
 8018510:	f100 0001 	add.w	r0, r0, #1
 8018514:	d005      	beq.n	8018522 <__lo0bits+0x5a>
 8018516:	600b      	str	r3, [r1, #0]
 8018518:	4770      	bx	lr
 801851a:	4610      	mov	r0, r2
 801851c:	e7e9      	b.n	80184f2 <__lo0bits+0x2a>
 801851e:	2000      	movs	r0, #0
 8018520:	4770      	bx	lr
 8018522:	2020      	movs	r0, #32
 8018524:	4770      	bx	lr
	...

08018528 <__i2b>:
 8018528:	b510      	push	{r4, lr}
 801852a:	460c      	mov	r4, r1
 801852c:	2101      	movs	r1, #1
 801852e:	f7ff feb9 	bl	80182a4 <_Balloc>
 8018532:	4602      	mov	r2, r0
 8018534:	b928      	cbnz	r0, 8018542 <__i2b+0x1a>
 8018536:	4b05      	ldr	r3, [pc, #20]	; (801854c <__i2b+0x24>)
 8018538:	4805      	ldr	r0, [pc, #20]	; (8018550 <__i2b+0x28>)
 801853a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801853e:	f7ff fa07 	bl	8017950 <__assert_func>
 8018542:	2301      	movs	r3, #1
 8018544:	6144      	str	r4, [r0, #20]
 8018546:	6103      	str	r3, [r0, #16]
 8018548:	bd10      	pop	{r4, pc}
 801854a:	bf00      	nop
 801854c:	0801cfe1 	.word	0x0801cfe1
 8018550:	0801d06c 	.word	0x0801d06c

08018554 <__multiply>:
 8018554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018558:	4691      	mov	r9, r2
 801855a:	690a      	ldr	r2, [r1, #16]
 801855c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018560:	429a      	cmp	r2, r3
 8018562:	bfb8      	it	lt
 8018564:	460b      	movlt	r3, r1
 8018566:	460c      	mov	r4, r1
 8018568:	bfbc      	itt	lt
 801856a:	464c      	movlt	r4, r9
 801856c:	4699      	movlt	r9, r3
 801856e:	6927      	ldr	r7, [r4, #16]
 8018570:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018574:	68a3      	ldr	r3, [r4, #8]
 8018576:	6861      	ldr	r1, [r4, #4]
 8018578:	eb07 060a 	add.w	r6, r7, sl
 801857c:	42b3      	cmp	r3, r6
 801857e:	b085      	sub	sp, #20
 8018580:	bfb8      	it	lt
 8018582:	3101      	addlt	r1, #1
 8018584:	f7ff fe8e 	bl	80182a4 <_Balloc>
 8018588:	b930      	cbnz	r0, 8018598 <__multiply+0x44>
 801858a:	4602      	mov	r2, r0
 801858c:	4b44      	ldr	r3, [pc, #272]	; (80186a0 <__multiply+0x14c>)
 801858e:	4845      	ldr	r0, [pc, #276]	; (80186a4 <__multiply+0x150>)
 8018590:	f240 115d 	movw	r1, #349	; 0x15d
 8018594:	f7ff f9dc 	bl	8017950 <__assert_func>
 8018598:	f100 0514 	add.w	r5, r0, #20
 801859c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80185a0:	462b      	mov	r3, r5
 80185a2:	2200      	movs	r2, #0
 80185a4:	4543      	cmp	r3, r8
 80185a6:	d321      	bcc.n	80185ec <__multiply+0x98>
 80185a8:	f104 0314 	add.w	r3, r4, #20
 80185ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80185b0:	f109 0314 	add.w	r3, r9, #20
 80185b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80185b8:	9202      	str	r2, [sp, #8]
 80185ba:	1b3a      	subs	r2, r7, r4
 80185bc:	3a15      	subs	r2, #21
 80185be:	f022 0203 	bic.w	r2, r2, #3
 80185c2:	3204      	adds	r2, #4
 80185c4:	f104 0115 	add.w	r1, r4, #21
 80185c8:	428f      	cmp	r7, r1
 80185ca:	bf38      	it	cc
 80185cc:	2204      	movcc	r2, #4
 80185ce:	9201      	str	r2, [sp, #4]
 80185d0:	9a02      	ldr	r2, [sp, #8]
 80185d2:	9303      	str	r3, [sp, #12]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d80c      	bhi.n	80185f2 <__multiply+0x9e>
 80185d8:	2e00      	cmp	r6, #0
 80185da:	dd03      	ble.n	80185e4 <__multiply+0x90>
 80185dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d05a      	beq.n	801869a <__multiply+0x146>
 80185e4:	6106      	str	r6, [r0, #16]
 80185e6:	b005      	add	sp, #20
 80185e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ec:	f843 2b04 	str.w	r2, [r3], #4
 80185f0:	e7d8      	b.n	80185a4 <__multiply+0x50>
 80185f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80185f6:	f1ba 0f00 	cmp.w	sl, #0
 80185fa:	d024      	beq.n	8018646 <__multiply+0xf2>
 80185fc:	f104 0e14 	add.w	lr, r4, #20
 8018600:	46a9      	mov	r9, r5
 8018602:	f04f 0c00 	mov.w	ip, #0
 8018606:	f85e 2b04 	ldr.w	r2, [lr], #4
 801860a:	f8d9 1000 	ldr.w	r1, [r9]
 801860e:	fa1f fb82 	uxth.w	fp, r2
 8018612:	b289      	uxth	r1, r1
 8018614:	fb0a 110b 	mla	r1, sl, fp, r1
 8018618:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801861c:	f8d9 2000 	ldr.w	r2, [r9]
 8018620:	4461      	add	r1, ip
 8018622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018626:	fb0a c20b 	mla	r2, sl, fp, ip
 801862a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801862e:	b289      	uxth	r1, r1
 8018630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018634:	4577      	cmp	r7, lr
 8018636:	f849 1b04 	str.w	r1, [r9], #4
 801863a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801863e:	d8e2      	bhi.n	8018606 <__multiply+0xb2>
 8018640:	9a01      	ldr	r2, [sp, #4]
 8018642:	f845 c002 	str.w	ip, [r5, r2]
 8018646:	9a03      	ldr	r2, [sp, #12]
 8018648:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801864c:	3304      	adds	r3, #4
 801864e:	f1b9 0f00 	cmp.w	r9, #0
 8018652:	d020      	beq.n	8018696 <__multiply+0x142>
 8018654:	6829      	ldr	r1, [r5, #0]
 8018656:	f104 0c14 	add.w	ip, r4, #20
 801865a:	46ae      	mov	lr, r5
 801865c:	f04f 0a00 	mov.w	sl, #0
 8018660:	f8bc b000 	ldrh.w	fp, [ip]
 8018664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018668:	fb09 220b 	mla	r2, r9, fp, r2
 801866c:	4492      	add	sl, r2
 801866e:	b289      	uxth	r1, r1
 8018670:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018674:	f84e 1b04 	str.w	r1, [lr], #4
 8018678:	f85c 2b04 	ldr.w	r2, [ip], #4
 801867c:	f8be 1000 	ldrh.w	r1, [lr]
 8018680:	0c12      	lsrs	r2, r2, #16
 8018682:	fb09 1102 	mla	r1, r9, r2, r1
 8018686:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801868a:	4567      	cmp	r7, ip
 801868c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018690:	d8e6      	bhi.n	8018660 <__multiply+0x10c>
 8018692:	9a01      	ldr	r2, [sp, #4]
 8018694:	50a9      	str	r1, [r5, r2]
 8018696:	3504      	adds	r5, #4
 8018698:	e79a      	b.n	80185d0 <__multiply+0x7c>
 801869a:	3e01      	subs	r6, #1
 801869c:	e79c      	b.n	80185d8 <__multiply+0x84>
 801869e:	bf00      	nop
 80186a0:	0801cfe1 	.word	0x0801cfe1
 80186a4:	0801d06c 	.word	0x0801d06c

080186a8 <__pow5mult>:
 80186a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186ac:	4615      	mov	r5, r2
 80186ae:	f012 0203 	ands.w	r2, r2, #3
 80186b2:	4606      	mov	r6, r0
 80186b4:	460f      	mov	r7, r1
 80186b6:	d007      	beq.n	80186c8 <__pow5mult+0x20>
 80186b8:	4c25      	ldr	r4, [pc, #148]	; (8018750 <__pow5mult+0xa8>)
 80186ba:	3a01      	subs	r2, #1
 80186bc:	2300      	movs	r3, #0
 80186be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80186c2:	f7ff fe51 	bl	8018368 <__multadd>
 80186c6:	4607      	mov	r7, r0
 80186c8:	10ad      	asrs	r5, r5, #2
 80186ca:	d03d      	beq.n	8018748 <__pow5mult+0xa0>
 80186cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80186ce:	b97c      	cbnz	r4, 80186f0 <__pow5mult+0x48>
 80186d0:	2010      	movs	r0, #16
 80186d2:	f7ff fdc1 	bl	8018258 <malloc>
 80186d6:	4602      	mov	r2, r0
 80186d8:	6270      	str	r0, [r6, #36]	; 0x24
 80186da:	b928      	cbnz	r0, 80186e8 <__pow5mult+0x40>
 80186dc:	4b1d      	ldr	r3, [pc, #116]	; (8018754 <__pow5mult+0xac>)
 80186de:	481e      	ldr	r0, [pc, #120]	; (8018758 <__pow5mult+0xb0>)
 80186e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80186e4:	f7ff f934 	bl	8017950 <__assert_func>
 80186e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186ec:	6004      	str	r4, [r0, #0]
 80186ee:	60c4      	str	r4, [r0, #12]
 80186f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80186f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80186f8:	b94c      	cbnz	r4, 801870e <__pow5mult+0x66>
 80186fa:	f240 2171 	movw	r1, #625	; 0x271
 80186fe:	4630      	mov	r0, r6
 8018700:	f7ff ff12 	bl	8018528 <__i2b>
 8018704:	2300      	movs	r3, #0
 8018706:	f8c8 0008 	str.w	r0, [r8, #8]
 801870a:	4604      	mov	r4, r0
 801870c:	6003      	str	r3, [r0, #0]
 801870e:	f04f 0900 	mov.w	r9, #0
 8018712:	07eb      	lsls	r3, r5, #31
 8018714:	d50a      	bpl.n	801872c <__pow5mult+0x84>
 8018716:	4639      	mov	r1, r7
 8018718:	4622      	mov	r2, r4
 801871a:	4630      	mov	r0, r6
 801871c:	f7ff ff1a 	bl	8018554 <__multiply>
 8018720:	4639      	mov	r1, r7
 8018722:	4680      	mov	r8, r0
 8018724:	4630      	mov	r0, r6
 8018726:	f7ff fdfd 	bl	8018324 <_Bfree>
 801872a:	4647      	mov	r7, r8
 801872c:	106d      	asrs	r5, r5, #1
 801872e:	d00b      	beq.n	8018748 <__pow5mult+0xa0>
 8018730:	6820      	ldr	r0, [r4, #0]
 8018732:	b938      	cbnz	r0, 8018744 <__pow5mult+0x9c>
 8018734:	4622      	mov	r2, r4
 8018736:	4621      	mov	r1, r4
 8018738:	4630      	mov	r0, r6
 801873a:	f7ff ff0b 	bl	8018554 <__multiply>
 801873e:	6020      	str	r0, [r4, #0]
 8018740:	f8c0 9000 	str.w	r9, [r0]
 8018744:	4604      	mov	r4, r0
 8018746:	e7e4      	b.n	8018712 <__pow5mult+0x6a>
 8018748:	4638      	mov	r0, r7
 801874a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801874e:	bf00      	nop
 8018750:	0801d1b8 	.word	0x0801d1b8
 8018754:	0801ce74 	.word	0x0801ce74
 8018758:	0801d06c 	.word	0x0801d06c

0801875c <__lshift>:
 801875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018760:	460c      	mov	r4, r1
 8018762:	6849      	ldr	r1, [r1, #4]
 8018764:	6923      	ldr	r3, [r4, #16]
 8018766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801876a:	68a3      	ldr	r3, [r4, #8]
 801876c:	4607      	mov	r7, r0
 801876e:	4691      	mov	r9, r2
 8018770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018774:	f108 0601 	add.w	r6, r8, #1
 8018778:	42b3      	cmp	r3, r6
 801877a:	db0b      	blt.n	8018794 <__lshift+0x38>
 801877c:	4638      	mov	r0, r7
 801877e:	f7ff fd91 	bl	80182a4 <_Balloc>
 8018782:	4605      	mov	r5, r0
 8018784:	b948      	cbnz	r0, 801879a <__lshift+0x3e>
 8018786:	4602      	mov	r2, r0
 8018788:	4b2a      	ldr	r3, [pc, #168]	; (8018834 <__lshift+0xd8>)
 801878a:	482b      	ldr	r0, [pc, #172]	; (8018838 <__lshift+0xdc>)
 801878c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018790:	f7ff f8de 	bl	8017950 <__assert_func>
 8018794:	3101      	adds	r1, #1
 8018796:	005b      	lsls	r3, r3, #1
 8018798:	e7ee      	b.n	8018778 <__lshift+0x1c>
 801879a:	2300      	movs	r3, #0
 801879c:	f100 0114 	add.w	r1, r0, #20
 80187a0:	f100 0210 	add.w	r2, r0, #16
 80187a4:	4618      	mov	r0, r3
 80187a6:	4553      	cmp	r3, sl
 80187a8:	db37      	blt.n	801881a <__lshift+0xbe>
 80187aa:	6920      	ldr	r0, [r4, #16]
 80187ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80187b0:	f104 0314 	add.w	r3, r4, #20
 80187b4:	f019 091f 	ands.w	r9, r9, #31
 80187b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80187bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80187c0:	d02f      	beq.n	8018822 <__lshift+0xc6>
 80187c2:	f1c9 0e20 	rsb	lr, r9, #32
 80187c6:	468a      	mov	sl, r1
 80187c8:	f04f 0c00 	mov.w	ip, #0
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	fa02 f209 	lsl.w	r2, r2, r9
 80187d2:	ea42 020c 	orr.w	r2, r2, ip
 80187d6:	f84a 2b04 	str.w	r2, [sl], #4
 80187da:	f853 2b04 	ldr.w	r2, [r3], #4
 80187de:	4298      	cmp	r0, r3
 80187e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80187e4:	d8f2      	bhi.n	80187cc <__lshift+0x70>
 80187e6:	1b03      	subs	r3, r0, r4
 80187e8:	3b15      	subs	r3, #21
 80187ea:	f023 0303 	bic.w	r3, r3, #3
 80187ee:	3304      	adds	r3, #4
 80187f0:	f104 0215 	add.w	r2, r4, #21
 80187f4:	4290      	cmp	r0, r2
 80187f6:	bf38      	it	cc
 80187f8:	2304      	movcc	r3, #4
 80187fa:	f841 c003 	str.w	ip, [r1, r3]
 80187fe:	f1bc 0f00 	cmp.w	ip, #0
 8018802:	d001      	beq.n	8018808 <__lshift+0xac>
 8018804:	f108 0602 	add.w	r6, r8, #2
 8018808:	3e01      	subs	r6, #1
 801880a:	4638      	mov	r0, r7
 801880c:	612e      	str	r6, [r5, #16]
 801880e:	4621      	mov	r1, r4
 8018810:	f7ff fd88 	bl	8018324 <_Bfree>
 8018814:	4628      	mov	r0, r5
 8018816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801881a:	f842 0f04 	str.w	r0, [r2, #4]!
 801881e:	3301      	adds	r3, #1
 8018820:	e7c1      	b.n	80187a6 <__lshift+0x4a>
 8018822:	3904      	subs	r1, #4
 8018824:	f853 2b04 	ldr.w	r2, [r3], #4
 8018828:	f841 2f04 	str.w	r2, [r1, #4]!
 801882c:	4298      	cmp	r0, r3
 801882e:	d8f9      	bhi.n	8018824 <__lshift+0xc8>
 8018830:	e7ea      	b.n	8018808 <__lshift+0xac>
 8018832:	bf00      	nop
 8018834:	0801cfe1 	.word	0x0801cfe1
 8018838:	0801d06c 	.word	0x0801d06c

0801883c <__mcmp>:
 801883c:	b530      	push	{r4, r5, lr}
 801883e:	6902      	ldr	r2, [r0, #16]
 8018840:	690c      	ldr	r4, [r1, #16]
 8018842:	1b12      	subs	r2, r2, r4
 8018844:	d10e      	bne.n	8018864 <__mcmp+0x28>
 8018846:	f100 0314 	add.w	r3, r0, #20
 801884a:	3114      	adds	r1, #20
 801884c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018854:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018858:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801885c:	42a5      	cmp	r5, r4
 801885e:	d003      	beq.n	8018868 <__mcmp+0x2c>
 8018860:	d305      	bcc.n	801886e <__mcmp+0x32>
 8018862:	2201      	movs	r2, #1
 8018864:	4610      	mov	r0, r2
 8018866:	bd30      	pop	{r4, r5, pc}
 8018868:	4283      	cmp	r3, r0
 801886a:	d3f3      	bcc.n	8018854 <__mcmp+0x18>
 801886c:	e7fa      	b.n	8018864 <__mcmp+0x28>
 801886e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018872:	e7f7      	b.n	8018864 <__mcmp+0x28>

08018874 <__mdiff>:
 8018874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018878:	460c      	mov	r4, r1
 801887a:	4606      	mov	r6, r0
 801887c:	4611      	mov	r1, r2
 801887e:	4620      	mov	r0, r4
 8018880:	4690      	mov	r8, r2
 8018882:	f7ff ffdb 	bl	801883c <__mcmp>
 8018886:	1e05      	subs	r5, r0, #0
 8018888:	d110      	bne.n	80188ac <__mdiff+0x38>
 801888a:	4629      	mov	r1, r5
 801888c:	4630      	mov	r0, r6
 801888e:	f7ff fd09 	bl	80182a4 <_Balloc>
 8018892:	b930      	cbnz	r0, 80188a2 <__mdiff+0x2e>
 8018894:	4b3a      	ldr	r3, [pc, #232]	; (8018980 <__mdiff+0x10c>)
 8018896:	4602      	mov	r2, r0
 8018898:	f240 2132 	movw	r1, #562	; 0x232
 801889c:	4839      	ldr	r0, [pc, #228]	; (8018984 <__mdiff+0x110>)
 801889e:	f7ff f857 	bl	8017950 <__assert_func>
 80188a2:	2301      	movs	r3, #1
 80188a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80188a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ac:	bfa4      	itt	ge
 80188ae:	4643      	movge	r3, r8
 80188b0:	46a0      	movge	r8, r4
 80188b2:	4630      	mov	r0, r6
 80188b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80188b8:	bfa6      	itte	ge
 80188ba:	461c      	movge	r4, r3
 80188bc:	2500      	movge	r5, #0
 80188be:	2501      	movlt	r5, #1
 80188c0:	f7ff fcf0 	bl	80182a4 <_Balloc>
 80188c4:	b920      	cbnz	r0, 80188d0 <__mdiff+0x5c>
 80188c6:	4b2e      	ldr	r3, [pc, #184]	; (8018980 <__mdiff+0x10c>)
 80188c8:	4602      	mov	r2, r0
 80188ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80188ce:	e7e5      	b.n	801889c <__mdiff+0x28>
 80188d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80188d4:	6926      	ldr	r6, [r4, #16]
 80188d6:	60c5      	str	r5, [r0, #12]
 80188d8:	f104 0914 	add.w	r9, r4, #20
 80188dc:	f108 0514 	add.w	r5, r8, #20
 80188e0:	f100 0e14 	add.w	lr, r0, #20
 80188e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80188e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80188ec:	f108 0210 	add.w	r2, r8, #16
 80188f0:	46f2      	mov	sl, lr
 80188f2:	2100      	movs	r1, #0
 80188f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80188f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80188fc:	fa1f f883 	uxth.w	r8, r3
 8018900:	fa11 f18b 	uxtah	r1, r1, fp
 8018904:	0c1b      	lsrs	r3, r3, #16
 8018906:	eba1 0808 	sub.w	r8, r1, r8
 801890a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801890e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018912:	fa1f f888 	uxth.w	r8, r8
 8018916:	1419      	asrs	r1, r3, #16
 8018918:	454e      	cmp	r6, r9
 801891a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801891e:	f84a 3b04 	str.w	r3, [sl], #4
 8018922:	d8e7      	bhi.n	80188f4 <__mdiff+0x80>
 8018924:	1b33      	subs	r3, r6, r4
 8018926:	3b15      	subs	r3, #21
 8018928:	f023 0303 	bic.w	r3, r3, #3
 801892c:	3304      	adds	r3, #4
 801892e:	3415      	adds	r4, #21
 8018930:	42a6      	cmp	r6, r4
 8018932:	bf38      	it	cc
 8018934:	2304      	movcc	r3, #4
 8018936:	441d      	add	r5, r3
 8018938:	4473      	add	r3, lr
 801893a:	469e      	mov	lr, r3
 801893c:	462e      	mov	r6, r5
 801893e:	4566      	cmp	r6, ip
 8018940:	d30e      	bcc.n	8018960 <__mdiff+0xec>
 8018942:	f10c 0203 	add.w	r2, ip, #3
 8018946:	1b52      	subs	r2, r2, r5
 8018948:	f022 0203 	bic.w	r2, r2, #3
 801894c:	3d03      	subs	r5, #3
 801894e:	45ac      	cmp	ip, r5
 8018950:	bf38      	it	cc
 8018952:	2200      	movcc	r2, #0
 8018954:	441a      	add	r2, r3
 8018956:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801895a:	b17b      	cbz	r3, 801897c <__mdiff+0x108>
 801895c:	6107      	str	r7, [r0, #16]
 801895e:	e7a3      	b.n	80188a8 <__mdiff+0x34>
 8018960:	f856 8b04 	ldr.w	r8, [r6], #4
 8018964:	fa11 f288 	uxtah	r2, r1, r8
 8018968:	1414      	asrs	r4, r2, #16
 801896a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801896e:	b292      	uxth	r2, r2
 8018970:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018974:	f84e 2b04 	str.w	r2, [lr], #4
 8018978:	1421      	asrs	r1, r4, #16
 801897a:	e7e0      	b.n	801893e <__mdiff+0xca>
 801897c:	3f01      	subs	r7, #1
 801897e:	e7ea      	b.n	8018956 <__mdiff+0xe2>
 8018980:	0801cfe1 	.word	0x0801cfe1
 8018984:	0801d06c 	.word	0x0801d06c

08018988 <__ulp>:
 8018988:	b082      	sub	sp, #8
 801898a:	ed8d 0b00 	vstr	d0, [sp]
 801898e:	9b01      	ldr	r3, [sp, #4]
 8018990:	4912      	ldr	r1, [pc, #72]	; (80189dc <__ulp+0x54>)
 8018992:	4019      	ands	r1, r3
 8018994:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018998:	2900      	cmp	r1, #0
 801899a:	dd05      	ble.n	80189a8 <__ulp+0x20>
 801899c:	2200      	movs	r2, #0
 801899e:	460b      	mov	r3, r1
 80189a0:	ec43 2b10 	vmov	d0, r2, r3
 80189a4:	b002      	add	sp, #8
 80189a6:	4770      	bx	lr
 80189a8:	4249      	negs	r1, r1
 80189aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80189ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 80189b2:	f04f 0200 	mov.w	r2, #0
 80189b6:	f04f 0300 	mov.w	r3, #0
 80189ba:	da04      	bge.n	80189c6 <__ulp+0x3e>
 80189bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80189c0:	fa41 f300 	asr.w	r3, r1, r0
 80189c4:	e7ec      	b.n	80189a0 <__ulp+0x18>
 80189c6:	f1a0 0114 	sub.w	r1, r0, #20
 80189ca:	291e      	cmp	r1, #30
 80189cc:	bfda      	itte	le
 80189ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80189d2:	fa20 f101 	lsrle.w	r1, r0, r1
 80189d6:	2101      	movgt	r1, #1
 80189d8:	460a      	mov	r2, r1
 80189da:	e7e1      	b.n	80189a0 <__ulp+0x18>
 80189dc:	7ff00000 	.word	0x7ff00000

080189e0 <__b2d>:
 80189e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189e2:	6905      	ldr	r5, [r0, #16]
 80189e4:	f100 0714 	add.w	r7, r0, #20
 80189e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80189ec:	1f2e      	subs	r6, r5, #4
 80189ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80189f2:	4620      	mov	r0, r4
 80189f4:	f7ff fd48 	bl	8018488 <__hi0bits>
 80189f8:	f1c0 0320 	rsb	r3, r0, #32
 80189fc:	280a      	cmp	r0, #10
 80189fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018a7c <__b2d+0x9c>
 8018a02:	600b      	str	r3, [r1, #0]
 8018a04:	dc14      	bgt.n	8018a30 <__b2d+0x50>
 8018a06:	f1c0 0e0b 	rsb	lr, r0, #11
 8018a0a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018a0e:	42b7      	cmp	r7, r6
 8018a10:	ea41 030c 	orr.w	r3, r1, ip
 8018a14:	bf34      	ite	cc
 8018a16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a1a:	2100      	movcs	r1, #0
 8018a1c:	3015      	adds	r0, #21
 8018a1e:	fa04 f000 	lsl.w	r0, r4, r0
 8018a22:	fa21 f10e 	lsr.w	r1, r1, lr
 8018a26:	ea40 0201 	orr.w	r2, r0, r1
 8018a2a:	ec43 2b10 	vmov	d0, r2, r3
 8018a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a30:	42b7      	cmp	r7, r6
 8018a32:	bf3a      	itte	cc
 8018a34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a38:	f1a5 0608 	subcc.w	r6, r5, #8
 8018a3c:	2100      	movcs	r1, #0
 8018a3e:	380b      	subs	r0, #11
 8018a40:	d017      	beq.n	8018a72 <__b2d+0x92>
 8018a42:	f1c0 0c20 	rsb	ip, r0, #32
 8018a46:	fa04 f500 	lsl.w	r5, r4, r0
 8018a4a:	42be      	cmp	r6, r7
 8018a4c:	fa21 f40c 	lsr.w	r4, r1, ip
 8018a50:	ea45 0504 	orr.w	r5, r5, r4
 8018a54:	bf8c      	ite	hi
 8018a56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018a5a:	2400      	movls	r4, #0
 8018a5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018a60:	fa01 f000 	lsl.w	r0, r1, r0
 8018a64:	fa24 f40c 	lsr.w	r4, r4, ip
 8018a68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018a6c:	ea40 0204 	orr.w	r2, r0, r4
 8018a70:	e7db      	b.n	8018a2a <__b2d+0x4a>
 8018a72:	ea44 030c 	orr.w	r3, r4, ip
 8018a76:	460a      	mov	r2, r1
 8018a78:	e7d7      	b.n	8018a2a <__b2d+0x4a>
 8018a7a:	bf00      	nop
 8018a7c:	3ff00000 	.word	0x3ff00000

08018a80 <__d2b>:
 8018a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018a84:	4689      	mov	r9, r1
 8018a86:	2101      	movs	r1, #1
 8018a88:	ec57 6b10 	vmov	r6, r7, d0
 8018a8c:	4690      	mov	r8, r2
 8018a8e:	f7ff fc09 	bl	80182a4 <_Balloc>
 8018a92:	4604      	mov	r4, r0
 8018a94:	b930      	cbnz	r0, 8018aa4 <__d2b+0x24>
 8018a96:	4602      	mov	r2, r0
 8018a98:	4b25      	ldr	r3, [pc, #148]	; (8018b30 <__d2b+0xb0>)
 8018a9a:	4826      	ldr	r0, [pc, #152]	; (8018b34 <__d2b+0xb4>)
 8018a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8018aa0:	f7fe ff56 	bl	8017950 <__assert_func>
 8018aa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018aac:	bb35      	cbnz	r5, 8018afc <__d2b+0x7c>
 8018aae:	2e00      	cmp	r6, #0
 8018ab0:	9301      	str	r3, [sp, #4]
 8018ab2:	d028      	beq.n	8018b06 <__d2b+0x86>
 8018ab4:	4668      	mov	r0, sp
 8018ab6:	9600      	str	r6, [sp, #0]
 8018ab8:	f7ff fd06 	bl	80184c8 <__lo0bits>
 8018abc:	9900      	ldr	r1, [sp, #0]
 8018abe:	b300      	cbz	r0, 8018b02 <__d2b+0x82>
 8018ac0:	9a01      	ldr	r2, [sp, #4]
 8018ac2:	f1c0 0320 	rsb	r3, r0, #32
 8018ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8018aca:	430b      	orrs	r3, r1
 8018acc:	40c2      	lsrs	r2, r0
 8018ace:	6163      	str	r3, [r4, #20]
 8018ad0:	9201      	str	r2, [sp, #4]
 8018ad2:	9b01      	ldr	r3, [sp, #4]
 8018ad4:	61a3      	str	r3, [r4, #24]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	bf14      	ite	ne
 8018ada:	2202      	movne	r2, #2
 8018adc:	2201      	moveq	r2, #1
 8018ade:	6122      	str	r2, [r4, #16]
 8018ae0:	b1d5      	cbz	r5, 8018b18 <__d2b+0x98>
 8018ae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018ae6:	4405      	add	r5, r0
 8018ae8:	f8c9 5000 	str.w	r5, [r9]
 8018aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018af0:	f8c8 0000 	str.w	r0, [r8]
 8018af4:	4620      	mov	r0, r4
 8018af6:	b003      	add	sp, #12
 8018af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b00:	e7d5      	b.n	8018aae <__d2b+0x2e>
 8018b02:	6161      	str	r1, [r4, #20]
 8018b04:	e7e5      	b.n	8018ad2 <__d2b+0x52>
 8018b06:	a801      	add	r0, sp, #4
 8018b08:	f7ff fcde 	bl	80184c8 <__lo0bits>
 8018b0c:	9b01      	ldr	r3, [sp, #4]
 8018b0e:	6163      	str	r3, [r4, #20]
 8018b10:	2201      	movs	r2, #1
 8018b12:	6122      	str	r2, [r4, #16]
 8018b14:	3020      	adds	r0, #32
 8018b16:	e7e3      	b.n	8018ae0 <__d2b+0x60>
 8018b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b20:	f8c9 0000 	str.w	r0, [r9]
 8018b24:	6918      	ldr	r0, [r3, #16]
 8018b26:	f7ff fcaf 	bl	8018488 <__hi0bits>
 8018b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018b2e:	e7df      	b.n	8018af0 <__d2b+0x70>
 8018b30:	0801cfe1 	.word	0x0801cfe1
 8018b34:	0801d06c 	.word	0x0801d06c

08018b38 <__ratio>:
 8018b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b3c:	4688      	mov	r8, r1
 8018b3e:	4669      	mov	r1, sp
 8018b40:	4681      	mov	r9, r0
 8018b42:	f7ff ff4d 	bl	80189e0 <__b2d>
 8018b46:	a901      	add	r1, sp, #4
 8018b48:	4640      	mov	r0, r8
 8018b4a:	ec55 4b10 	vmov	r4, r5, d0
 8018b4e:	f7ff ff47 	bl	80189e0 <__b2d>
 8018b52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018b5a:	eba3 0c02 	sub.w	ip, r3, r2
 8018b5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018b62:	1a9b      	subs	r3, r3, r2
 8018b64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018b68:	ec51 0b10 	vmov	r0, r1, d0
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	bfd6      	itet	le
 8018b70:	460a      	movle	r2, r1
 8018b72:	462a      	movgt	r2, r5
 8018b74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018b78:	468b      	mov	fp, r1
 8018b7a:	462f      	mov	r7, r5
 8018b7c:	bfd4      	ite	le
 8018b7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018b82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018b86:	4620      	mov	r0, r4
 8018b88:	ee10 2a10 	vmov	r2, s0
 8018b8c:	465b      	mov	r3, fp
 8018b8e:	4639      	mov	r1, r7
 8018b90:	f7e7 fe7c 	bl	800088c <__aeabi_ddiv>
 8018b94:	ec41 0b10 	vmov	d0, r0, r1
 8018b98:	b003      	add	sp, #12
 8018b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b9e <__copybits>:
 8018b9e:	3901      	subs	r1, #1
 8018ba0:	b570      	push	{r4, r5, r6, lr}
 8018ba2:	1149      	asrs	r1, r1, #5
 8018ba4:	6914      	ldr	r4, [r2, #16]
 8018ba6:	3101      	adds	r1, #1
 8018ba8:	f102 0314 	add.w	r3, r2, #20
 8018bac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018bb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018bb4:	1f05      	subs	r5, r0, #4
 8018bb6:	42a3      	cmp	r3, r4
 8018bb8:	d30c      	bcc.n	8018bd4 <__copybits+0x36>
 8018bba:	1aa3      	subs	r3, r4, r2
 8018bbc:	3b11      	subs	r3, #17
 8018bbe:	f023 0303 	bic.w	r3, r3, #3
 8018bc2:	3211      	adds	r2, #17
 8018bc4:	42a2      	cmp	r2, r4
 8018bc6:	bf88      	it	hi
 8018bc8:	2300      	movhi	r3, #0
 8018bca:	4418      	add	r0, r3
 8018bcc:	2300      	movs	r3, #0
 8018bce:	4288      	cmp	r0, r1
 8018bd0:	d305      	bcc.n	8018bde <__copybits+0x40>
 8018bd2:	bd70      	pop	{r4, r5, r6, pc}
 8018bd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8018bd8:	f845 6f04 	str.w	r6, [r5, #4]!
 8018bdc:	e7eb      	b.n	8018bb6 <__copybits+0x18>
 8018bde:	f840 3b04 	str.w	r3, [r0], #4
 8018be2:	e7f4      	b.n	8018bce <__copybits+0x30>

08018be4 <__any_on>:
 8018be4:	f100 0214 	add.w	r2, r0, #20
 8018be8:	6900      	ldr	r0, [r0, #16]
 8018bea:	114b      	asrs	r3, r1, #5
 8018bec:	4298      	cmp	r0, r3
 8018bee:	b510      	push	{r4, lr}
 8018bf0:	db11      	blt.n	8018c16 <__any_on+0x32>
 8018bf2:	dd0a      	ble.n	8018c0a <__any_on+0x26>
 8018bf4:	f011 011f 	ands.w	r1, r1, #31
 8018bf8:	d007      	beq.n	8018c0a <__any_on+0x26>
 8018bfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018bfe:	fa24 f001 	lsr.w	r0, r4, r1
 8018c02:	fa00 f101 	lsl.w	r1, r0, r1
 8018c06:	428c      	cmp	r4, r1
 8018c08:	d10b      	bne.n	8018c22 <__any_on+0x3e>
 8018c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	d803      	bhi.n	8018c1a <__any_on+0x36>
 8018c12:	2000      	movs	r0, #0
 8018c14:	bd10      	pop	{r4, pc}
 8018c16:	4603      	mov	r3, r0
 8018c18:	e7f7      	b.n	8018c0a <__any_on+0x26>
 8018c1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c1e:	2900      	cmp	r1, #0
 8018c20:	d0f5      	beq.n	8018c0e <__any_on+0x2a>
 8018c22:	2001      	movs	r0, #1
 8018c24:	e7f6      	b.n	8018c14 <__any_on+0x30>

08018c26 <_calloc_r>:
 8018c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c28:	fba1 2402 	umull	r2, r4, r1, r2
 8018c2c:	b94c      	cbnz	r4, 8018c42 <_calloc_r+0x1c>
 8018c2e:	4611      	mov	r1, r2
 8018c30:	9201      	str	r2, [sp, #4]
 8018c32:	f7fd fe21 	bl	8016878 <_malloc_r>
 8018c36:	9a01      	ldr	r2, [sp, #4]
 8018c38:	4605      	mov	r5, r0
 8018c3a:	b930      	cbnz	r0, 8018c4a <_calloc_r+0x24>
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	b003      	add	sp, #12
 8018c40:	bd30      	pop	{r4, r5, pc}
 8018c42:	220c      	movs	r2, #12
 8018c44:	6002      	str	r2, [r0, #0]
 8018c46:	2500      	movs	r5, #0
 8018c48:	e7f8      	b.n	8018c3c <_calloc_r+0x16>
 8018c4a:	4621      	mov	r1, r4
 8018c4c:	f7fd fdeb 	bl	8016826 <memset>
 8018c50:	e7f4      	b.n	8018c3c <_calloc_r+0x16>
	...

08018c54 <_free_r>:
 8018c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c56:	2900      	cmp	r1, #0
 8018c58:	d044      	beq.n	8018ce4 <_free_r+0x90>
 8018c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c5e:	9001      	str	r0, [sp, #4]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f1a1 0404 	sub.w	r4, r1, #4
 8018c66:	bfb8      	it	lt
 8018c68:	18e4      	addlt	r4, r4, r3
 8018c6a:	f7ff fb0f 	bl	801828c <__malloc_lock>
 8018c6e:	4a1e      	ldr	r2, [pc, #120]	; (8018ce8 <_free_r+0x94>)
 8018c70:	9801      	ldr	r0, [sp, #4]
 8018c72:	6813      	ldr	r3, [r2, #0]
 8018c74:	b933      	cbnz	r3, 8018c84 <_free_r+0x30>
 8018c76:	6063      	str	r3, [r4, #4]
 8018c78:	6014      	str	r4, [r2, #0]
 8018c7a:	b003      	add	sp, #12
 8018c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c80:	f7ff bb0a 	b.w	8018298 <__malloc_unlock>
 8018c84:	42a3      	cmp	r3, r4
 8018c86:	d908      	bls.n	8018c9a <_free_r+0x46>
 8018c88:	6825      	ldr	r5, [r4, #0]
 8018c8a:	1961      	adds	r1, r4, r5
 8018c8c:	428b      	cmp	r3, r1
 8018c8e:	bf01      	itttt	eq
 8018c90:	6819      	ldreq	r1, [r3, #0]
 8018c92:	685b      	ldreq	r3, [r3, #4]
 8018c94:	1949      	addeq	r1, r1, r5
 8018c96:	6021      	streq	r1, [r4, #0]
 8018c98:	e7ed      	b.n	8018c76 <_free_r+0x22>
 8018c9a:	461a      	mov	r2, r3
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	b10b      	cbz	r3, 8018ca4 <_free_r+0x50>
 8018ca0:	42a3      	cmp	r3, r4
 8018ca2:	d9fa      	bls.n	8018c9a <_free_r+0x46>
 8018ca4:	6811      	ldr	r1, [r2, #0]
 8018ca6:	1855      	adds	r5, r2, r1
 8018ca8:	42a5      	cmp	r5, r4
 8018caa:	d10b      	bne.n	8018cc4 <_free_r+0x70>
 8018cac:	6824      	ldr	r4, [r4, #0]
 8018cae:	4421      	add	r1, r4
 8018cb0:	1854      	adds	r4, r2, r1
 8018cb2:	42a3      	cmp	r3, r4
 8018cb4:	6011      	str	r1, [r2, #0]
 8018cb6:	d1e0      	bne.n	8018c7a <_free_r+0x26>
 8018cb8:	681c      	ldr	r4, [r3, #0]
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	6053      	str	r3, [r2, #4]
 8018cbe:	4421      	add	r1, r4
 8018cc0:	6011      	str	r1, [r2, #0]
 8018cc2:	e7da      	b.n	8018c7a <_free_r+0x26>
 8018cc4:	d902      	bls.n	8018ccc <_free_r+0x78>
 8018cc6:	230c      	movs	r3, #12
 8018cc8:	6003      	str	r3, [r0, #0]
 8018cca:	e7d6      	b.n	8018c7a <_free_r+0x26>
 8018ccc:	6825      	ldr	r5, [r4, #0]
 8018cce:	1961      	adds	r1, r4, r5
 8018cd0:	428b      	cmp	r3, r1
 8018cd2:	bf04      	itt	eq
 8018cd4:	6819      	ldreq	r1, [r3, #0]
 8018cd6:	685b      	ldreq	r3, [r3, #4]
 8018cd8:	6063      	str	r3, [r4, #4]
 8018cda:	bf04      	itt	eq
 8018cdc:	1949      	addeq	r1, r1, r5
 8018cde:	6021      	streq	r1, [r4, #0]
 8018ce0:	6054      	str	r4, [r2, #4]
 8018ce2:	e7ca      	b.n	8018c7a <_free_r+0x26>
 8018ce4:	b003      	add	sp, #12
 8018ce6:	bd30      	pop	{r4, r5, pc}
 8018ce8:	20011ca8 	.word	0x20011ca8

08018cec <__ssputs_r>:
 8018cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cf0:	688e      	ldr	r6, [r1, #8]
 8018cf2:	429e      	cmp	r6, r3
 8018cf4:	4682      	mov	sl, r0
 8018cf6:	460c      	mov	r4, r1
 8018cf8:	4690      	mov	r8, r2
 8018cfa:	461f      	mov	r7, r3
 8018cfc:	d838      	bhi.n	8018d70 <__ssputs_r+0x84>
 8018cfe:	898a      	ldrh	r2, [r1, #12]
 8018d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018d04:	d032      	beq.n	8018d6c <__ssputs_r+0x80>
 8018d06:	6825      	ldr	r5, [r4, #0]
 8018d08:	6909      	ldr	r1, [r1, #16]
 8018d0a:	eba5 0901 	sub.w	r9, r5, r1
 8018d0e:	6965      	ldr	r5, [r4, #20]
 8018d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018d18:	3301      	adds	r3, #1
 8018d1a:	444b      	add	r3, r9
 8018d1c:	106d      	asrs	r5, r5, #1
 8018d1e:	429d      	cmp	r5, r3
 8018d20:	bf38      	it	cc
 8018d22:	461d      	movcc	r5, r3
 8018d24:	0553      	lsls	r3, r2, #21
 8018d26:	d531      	bpl.n	8018d8c <__ssputs_r+0xa0>
 8018d28:	4629      	mov	r1, r5
 8018d2a:	f7fd fda5 	bl	8016878 <_malloc_r>
 8018d2e:	4606      	mov	r6, r0
 8018d30:	b950      	cbnz	r0, 8018d48 <__ssputs_r+0x5c>
 8018d32:	230c      	movs	r3, #12
 8018d34:	f8ca 3000 	str.w	r3, [sl]
 8018d38:	89a3      	ldrh	r3, [r4, #12]
 8018d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d3e:	81a3      	strh	r3, [r4, #12]
 8018d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d48:	6921      	ldr	r1, [r4, #16]
 8018d4a:	464a      	mov	r2, r9
 8018d4c:	f7fd fd43 	bl	80167d6 <memcpy>
 8018d50:	89a3      	ldrh	r3, [r4, #12]
 8018d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d5a:	81a3      	strh	r3, [r4, #12]
 8018d5c:	6126      	str	r6, [r4, #16]
 8018d5e:	6165      	str	r5, [r4, #20]
 8018d60:	444e      	add	r6, r9
 8018d62:	eba5 0509 	sub.w	r5, r5, r9
 8018d66:	6026      	str	r6, [r4, #0]
 8018d68:	60a5      	str	r5, [r4, #8]
 8018d6a:	463e      	mov	r6, r7
 8018d6c:	42be      	cmp	r6, r7
 8018d6e:	d900      	bls.n	8018d72 <__ssputs_r+0x86>
 8018d70:	463e      	mov	r6, r7
 8018d72:	6820      	ldr	r0, [r4, #0]
 8018d74:	4632      	mov	r2, r6
 8018d76:	4641      	mov	r1, r8
 8018d78:	f7fd fd3b 	bl	80167f2 <memmove>
 8018d7c:	68a3      	ldr	r3, [r4, #8]
 8018d7e:	1b9b      	subs	r3, r3, r6
 8018d80:	60a3      	str	r3, [r4, #8]
 8018d82:	6823      	ldr	r3, [r4, #0]
 8018d84:	4433      	add	r3, r6
 8018d86:	6023      	str	r3, [r4, #0]
 8018d88:	2000      	movs	r0, #0
 8018d8a:	e7db      	b.n	8018d44 <__ssputs_r+0x58>
 8018d8c:	462a      	mov	r2, r5
 8018d8e:	f000 fd4d 	bl	801982c <_realloc_r>
 8018d92:	4606      	mov	r6, r0
 8018d94:	2800      	cmp	r0, #0
 8018d96:	d1e1      	bne.n	8018d5c <__ssputs_r+0x70>
 8018d98:	6921      	ldr	r1, [r4, #16]
 8018d9a:	4650      	mov	r0, sl
 8018d9c:	f7ff ff5a 	bl	8018c54 <_free_r>
 8018da0:	e7c7      	b.n	8018d32 <__ssputs_r+0x46>
	...

08018da4 <_svfiprintf_r>:
 8018da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da8:	4698      	mov	r8, r3
 8018daa:	898b      	ldrh	r3, [r1, #12]
 8018dac:	061b      	lsls	r3, r3, #24
 8018dae:	b09d      	sub	sp, #116	; 0x74
 8018db0:	4607      	mov	r7, r0
 8018db2:	460d      	mov	r5, r1
 8018db4:	4614      	mov	r4, r2
 8018db6:	d50e      	bpl.n	8018dd6 <_svfiprintf_r+0x32>
 8018db8:	690b      	ldr	r3, [r1, #16]
 8018dba:	b963      	cbnz	r3, 8018dd6 <_svfiprintf_r+0x32>
 8018dbc:	2140      	movs	r1, #64	; 0x40
 8018dbe:	f7fd fd5b 	bl	8016878 <_malloc_r>
 8018dc2:	6028      	str	r0, [r5, #0]
 8018dc4:	6128      	str	r0, [r5, #16]
 8018dc6:	b920      	cbnz	r0, 8018dd2 <_svfiprintf_r+0x2e>
 8018dc8:	230c      	movs	r3, #12
 8018dca:	603b      	str	r3, [r7, #0]
 8018dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018dd0:	e0d1      	b.n	8018f76 <_svfiprintf_r+0x1d2>
 8018dd2:	2340      	movs	r3, #64	; 0x40
 8018dd4:	616b      	str	r3, [r5, #20]
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8018dda:	2320      	movs	r3, #32
 8018ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8018de4:	2330      	movs	r3, #48	; 0x30
 8018de6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018f90 <_svfiprintf_r+0x1ec>
 8018dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018dee:	f04f 0901 	mov.w	r9, #1
 8018df2:	4623      	mov	r3, r4
 8018df4:	469a      	mov	sl, r3
 8018df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018dfa:	b10a      	cbz	r2, 8018e00 <_svfiprintf_r+0x5c>
 8018dfc:	2a25      	cmp	r2, #37	; 0x25
 8018dfe:	d1f9      	bne.n	8018df4 <_svfiprintf_r+0x50>
 8018e00:	ebba 0b04 	subs.w	fp, sl, r4
 8018e04:	d00b      	beq.n	8018e1e <_svfiprintf_r+0x7a>
 8018e06:	465b      	mov	r3, fp
 8018e08:	4622      	mov	r2, r4
 8018e0a:	4629      	mov	r1, r5
 8018e0c:	4638      	mov	r0, r7
 8018e0e:	f7ff ff6d 	bl	8018cec <__ssputs_r>
 8018e12:	3001      	adds	r0, #1
 8018e14:	f000 80aa 	beq.w	8018f6c <_svfiprintf_r+0x1c8>
 8018e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e1a:	445a      	add	r2, fp
 8018e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8018e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	f000 80a2 	beq.w	8018f6c <_svfiprintf_r+0x1c8>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e32:	f10a 0a01 	add.w	sl, sl, #1
 8018e36:	9304      	str	r3, [sp, #16]
 8018e38:	9307      	str	r3, [sp, #28]
 8018e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8018e40:	4654      	mov	r4, sl
 8018e42:	2205      	movs	r2, #5
 8018e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e48:	4851      	ldr	r0, [pc, #324]	; (8018f90 <_svfiprintf_r+0x1ec>)
 8018e4a:	f7e7 f9e9 	bl	8000220 <memchr>
 8018e4e:	9a04      	ldr	r2, [sp, #16]
 8018e50:	b9d8      	cbnz	r0, 8018e8a <_svfiprintf_r+0xe6>
 8018e52:	06d0      	lsls	r0, r2, #27
 8018e54:	bf44      	itt	mi
 8018e56:	2320      	movmi	r3, #32
 8018e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e5c:	0711      	lsls	r1, r2, #28
 8018e5e:	bf44      	itt	mi
 8018e60:	232b      	movmi	r3, #43	; 0x2b
 8018e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e66:	f89a 3000 	ldrb.w	r3, [sl]
 8018e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8018e6c:	d015      	beq.n	8018e9a <_svfiprintf_r+0xf6>
 8018e6e:	9a07      	ldr	r2, [sp, #28]
 8018e70:	4654      	mov	r4, sl
 8018e72:	2000      	movs	r0, #0
 8018e74:	f04f 0c0a 	mov.w	ip, #10
 8018e78:	4621      	mov	r1, r4
 8018e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e7e:	3b30      	subs	r3, #48	; 0x30
 8018e80:	2b09      	cmp	r3, #9
 8018e82:	d94e      	bls.n	8018f22 <_svfiprintf_r+0x17e>
 8018e84:	b1b0      	cbz	r0, 8018eb4 <_svfiprintf_r+0x110>
 8018e86:	9207      	str	r2, [sp, #28]
 8018e88:	e014      	b.n	8018eb4 <_svfiprintf_r+0x110>
 8018e8a:	eba0 0308 	sub.w	r3, r0, r8
 8018e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8018e92:	4313      	orrs	r3, r2
 8018e94:	9304      	str	r3, [sp, #16]
 8018e96:	46a2      	mov	sl, r4
 8018e98:	e7d2      	b.n	8018e40 <_svfiprintf_r+0x9c>
 8018e9a:	9b03      	ldr	r3, [sp, #12]
 8018e9c:	1d19      	adds	r1, r3, #4
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	9103      	str	r1, [sp, #12]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	bfbb      	ittet	lt
 8018ea6:	425b      	neglt	r3, r3
 8018ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8018eac:	9307      	strge	r3, [sp, #28]
 8018eae:	9307      	strlt	r3, [sp, #28]
 8018eb0:	bfb8      	it	lt
 8018eb2:	9204      	strlt	r2, [sp, #16]
 8018eb4:	7823      	ldrb	r3, [r4, #0]
 8018eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8018eb8:	d10c      	bne.n	8018ed4 <_svfiprintf_r+0x130>
 8018eba:	7863      	ldrb	r3, [r4, #1]
 8018ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8018ebe:	d135      	bne.n	8018f2c <_svfiprintf_r+0x188>
 8018ec0:	9b03      	ldr	r3, [sp, #12]
 8018ec2:	1d1a      	adds	r2, r3, #4
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	9203      	str	r2, [sp, #12]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	bfb8      	it	lt
 8018ecc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018ed0:	3402      	adds	r4, #2
 8018ed2:	9305      	str	r3, [sp, #20]
 8018ed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018fa0 <_svfiprintf_r+0x1fc>
 8018ed8:	7821      	ldrb	r1, [r4, #0]
 8018eda:	2203      	movs	r2, #3
 8018edc:	4650      	mov	r0, sl
 8018ede:	f7e7 f99f 	bl	8000220 <memchr>
 8018ee2:	b140      	cbz	r0, 8018ef6 <_svfiprintf_r+0x152>
 8018ee4:	2340      	movs	r3, #64	; 0x40
 8018ee6:	eba0 000a 	sub.w	r0, r0, sl
 8018eea:	fa03 f000 	lsl.w	r0, r3, r0
 8018eee:	9b04      	ldr	r3, [sp, #16]
 8018ef0:	4303      	orrs	r3, r0
 8018ef2:	3401      	adds	r4, #1
 8018ef4:	9304      	str	r3, [sp, #16]
 8018ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018efa:	4826      	ldr	r0, [pc, #152]	; (8018f94 <_svfiprintf_r+0x1f0>)
 8018efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f00:	2206      	movs	r2, #6
 8018f02:	f7e7 f98d 	bl	8000220 <memchr>
 8018f06:	2800      	cmp	r0, #0
 8018f08:	d038      	beq.n	8018f7c <_svfiprintf_r+0x1d8>
 8018f0a:	4b23      	ldr	r3, [pc, #140]	; (8018f98 <_svfiprintf_r+0x1f4>)
 8018f0c:	bb1b      	cbnz	r3, 8018f56 <_svfiprintf_r+0x1b2>
 8018f0e:	9b03      	ldr	r3, [sp, #12]
 8018f10:	3307      	adds	r3, #7
 8018f12:	f023 0307 	bic.w	r3, r3, #7
 8018f16:	3308      	adds	r3, #8
 8018f18:	9303      	str	r3, [sp, #12]
 8018f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f1c:	4433      	add	r3, r6
 8018f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f20:	e767      	b.n	8018df2 <_svfiprintf_r+0x4e>
 8018f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f26:	460c      	mov	r4, r1
 8018f28:	2001      	movs	r0, #1
 8018f2a:	e7a5      	b.n	8018e78 <_svfiprintf_r+0xd4>
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	3401      	adds	r4, #1
 8018f30:	9305      	str	r3, [sp, #20]
 8018f32:	4619      	mov	r1, r3
 8018f34:	f04f 0c0a 	mov.w	ip, #10
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f3e:	3a30      	subs	r2, #48	; 0x30
 8018f40:	2a09      	cmp	r2, #9
 8018f42:	d903      	bls.n	8018f4c <_svfiprintf_r+0x1a8>
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d0c5      	beq.n	8018ed4 <_svfiprintf_r+0x130>
 8018f48:	9105      	str	r1, [sp, #20]
 8018f4a:	e7c3      	b.n	8018ed4 <_svfiprintf_r+0x130>
 8018f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f50:	4604      	mov	r4, r0
 8018f52:	2301      	movs	r3, #1
 8018f54:	e7f0      	b.n	8018f38 <_svfiprintf_r+0x194>
 8018f56:	ab03      	add	r3, sp, #12
 8018f58:	9300      	str	r3, [sp, #0]
 8018f5a:	462a      	mov	r2, r5
 8018f5c:	4b0f      	ldr	r3, [pc, #60]	; (8018f9c <_svfiprintf_r+0x1f8>)
 8018f5e:	a904      	add	r1, sp, #16
 8018f60:	4638      	mov	r0, r7
 8018f62:	f3af 8000 	nop.w
 8018f66:	1c42      	adds	r2, r0, #1
 8018f68:	4606      	mov	r6, r0
 8018f6a:	d1d6      	bne.n	8018f1a <_svfiprintf_r+0x176>
 8018f6c:	89ab      	ldrh	r3, [r5, #12]
 8018f6e:	065b      	lsls	r3, r3, #25
 8018f70:	f53f af2c 	bmi.w	8018dcc <_svfiprintf_r+0x28>
 8018f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f76:	b01d      	add	sp, #116	; 0x74
 8018f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f7c:	ab03      	add	r3, sp, #12
 8018f7e:	9300      	str	r3, [sp, #0]
 8018f80:	462a      	mov	r2, r5
 8018f82:	4b06      	ldr	r3, [pc, #24]	; (8018f9c <_svfiprintf_r+0x1f8>)
 8018f84:	a904      	add	r1, sp, #16
 8018f86:	4638      	mov	r0, r7
 8018f88:	f000 f9d4 	bl	8019334 <_printf_i>
 8018f8c:	e7eb      	b.n	8018f66 <_svfiprintf_r+0x1c2>
 8018f8e:	bf00      	nop
 8018f90:	0801d1c4 	.word	0x0801d1c4
 8018f94:	0801d1ce 	.word	0x0801d1ce
 8018f98:	00000000 	.word	0x00000000
 8018f9c:	08018ced 	.word	0x08018ced
 8018fa0:	0801d1ca 	.word	0x0801d1ca

08018fa4 <__sfputc_r>:
 8018fa4:	6893      	ldr	r3, [r2, #8]
 8018fa6:	3b01      	subs	r3, #1
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	b410      	push	{r4}
 8018fac:	6093      	str	r3, [r2, #8]
 8018fae:	da08      	bge.n	8018fc2 <__sfputc_r+0x1e>
 8018fb0:	6994      	ldr	r4, [r2, #24]
 8018fb2:	42a3      	cmp	r3, r4
 8018fb4:	db01      	blt.n	8018fba <__sfputc_r+0x16>
 8018fb6:	290a      	cmp	r1, #10
 8018fb8:	d103      	bne.n	8018fc2 <__sfputc_r+0x1e>
 8018fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fbe:	f000 bafb 	b.w	80195b8 <__swbuf_r>
 8018fc2:	6813      	ldr	r3, [r2, #0]
 8018fc4:	1c58      	adds	r0, r3, #1
 8018fc6:	6010      	str	r0, [r2, #0]
 8018fc8:	7019      	strb	r1, [r3, #0]
 8018fca:	4608      	mov	r0, r1
 8018fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fd0:	4770      	bx	lr

08018fd2 <__sfputs_r>:
 8018fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fd4:	4606      	mov	r6, r0
 8018fd6:	460f      	mov	r7, r1
 8018fd8:	4614      	mov	r4, r2
 8018fda:	18d5      	adds	r5, r2, r3
 8018fdc:	42ac      	cmp	r4, r5
 8018fde:	d101      	bne.n	8018fe4 <__sfputs_r+0x12>
 8018fe0:	2000      	movs	r0, #0
 8018fe2:	e007      	b.n	8018ff4 <__sfputs_r+0x22>
 8018fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fe8:	463a      	mov	r2, r7
 8018fea:	4630      	mov	r0, r6
 8018fec:	f7ff ffda 	bl	8018fa4 <__sfputc_r>
 8018ff0:	1c43      	adds	r3, r0, #1
 8018ff2:	d1f3      	bne.n	8018fdc <__sfputs_r+0xa>
 8018ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ff8 <_vfiprintf_r>:
 8018ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffc:	460d      	mov	r5, r1
 8018ffe:	b09d      	sub	sp, #116	; 0x74
 8019000:	4614      	mov	r4, r2
 8019002:	4698      	mov	r8, r3
 8019004:	4606      	mov	r6, r0
 8019006:	b118      	cbz	r0, 8019010 <_vfiprintf_r+0x18>
 8019008:	6983      	ldr	r3, [r0, #24]
 801900a:	b90b      	cbnz	r3, 8019010 <_vfiprintf_r+0x18>
 801900c:	f7fd fb0e 	bl	801662c <__sinit>
 8019010:	4b89      	ldr	r3, [pc, #548]	; (8019238 <_vfiprintf_r+0x240>)
 8019012:	429d      	cmp	r5, r3
 8019014:	d11b      	bne.n	801904e <_vfiprintf_r+0x56>
 8019016:	6875      	ldr	r5, [r6, #4]
 8019018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801901a:	07d9      	lsls	r1, r3, #31
 801901c:	d405      	bmi.n	801902a <_vfiprintf_r+0x32>
 801901e:	89ab      	ldrh	r3, [r5, #12]
 8019020:	059a      	lsls	r2, r3, #22
 8019022:	d402      	bmi.n	801902a <_vfiprintf_r+0x32>
 8019024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019026:	f7fd fbc4 	bl	80167b2 <__retarget_lock_acquire_recursive>
 801902a:	89ab      	ldrh	r3, [r5, #12]
 801902c:	071b      	lsls	r3, r3, #28
 801902e:	d501      	bpl.n	8019034 <_vfiprintf_r+0x3c>
 8019030:	692b      	ldr	r3, [r5, #16]
 8019032:	b9eb      	cbnz	r3, 8019070 <_vfiprintf_r+0x78>
 8019034:	4629      	mov	r1, r5
 8019036:	4630      	mov	r0, r6
 8019038:	f000 fb1e 	bl	8019678 <__swsetup_r>
 801903c:	b1c0      	cbz	r0, 8019070 <_vfiprintf_r+0x78>
 801903e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019040:	07dc      	lsls	r4, r3, #31
 8019042:	d50e      	bpl.n	8019062 <_vfiprintf_r+0x6a>
 8019044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019048:	b01d      	add	sp, #116	; 0x74
 801904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801904e:	4b7b      	ldr	r3, [pc, #492]	; (801923c <_vfiprintf_r+0x244>)
 8019050:	429d      	cmp	r5, r3
 8019052:	d101      	bne.n	8019058 <_vfiprintf_r+0x60>
 8019054:	68b5      	ldr	r5, [r6, #8]
 8019056:	e7df      	b.n	8019018 <_vfiprintf_r+0x20>
 8019058:	4b79      	ldr	r3, [pc, #484]	; (8019240 <_vfiprintf_r+0x248>)
 801905a:	429d      	cmp	r5, r3
 801905c:	bf08      	it	eq
 801905e:	68f5      	ldreq	r5, [r6, #12]
 8019060:	e7da      	b.n	8019018 <_vfiprintf_r+0x20>
 8019062:	89ab      	ldrh	r3, [r5, #12]
 8019064:	0598      	lsls	r0, r3, #22
 8019066:	d4ed      	bmi.n	8019044 <_vfiprintf_r+0x4c>
 8019068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801906a:	f7fd fba3 	bl	80167b4 <__retarget_lock_release_recursive>
 801906e:	e7e9      	b.n	8019044 <_vfiprintf_r+0x4c>
 8019070:	2300      	movs	r3, #0
 8019072:	9309      	str	r3, [sp, #36]	; 0x24
 8019074:	2320      	movs	r3, #32
 8019076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801907a:	f8cd 800c 	str.w	r8, [sp, #12]
 801907e:	2330      	movs	r3, #48	; 0x30
 8019080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019244 <_vfiprintf_r+0x24c>
 8019084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019088:	f04f 0901 	mov.w	r9, #1
 801908c:	4623      	mov	r3, r4
 801908e:	469a      	mov	sl, r3
 8019090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019094:	b10a      	cbz	r2, 801909a <_vfiprintf_r+0xa2>
 8019096:	2a25      	cmp	r2, #37	; 0x25
 8019098:	d1f9      	bne.n	801908e <_vfiprintf_r+0x96>
 801909a:	ebba 0b04 	subs.w	fp, sl, r4
 801909e:	d00b      	beq.n	80190b8 <_vfiprintf_r+0xc0>
 80190a0:	465b      	mov	r3, fp
 80190a2:	4622      	mov	r2, r4
 80190a4:	4629      	mov	r1, r5
 80190a6:	4630      	mov	r0, r6
 80190a8:	f7ff ff93 	bl	8018fd2 <__sfputs_r>
 80190ac:	3001      	adds	r0, #1
 80190ae:	f000 80aa 	beq.w	8019206 <_vfiprintf_r+0x20e>
 80190b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190b4:	445a      	add	r2, fp
 80190b6:	9209      	str	r2, [sp, #36]	; 0x24
 80190b8:	f89a 3000 	ldrb.w	r3, [sl]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	f000 80a2 	beq.w	8019206 <_vfiprintf_r+0x20e>
 80190c2:	2300      	movs	r3, #0
 80190c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80190c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190cc:	f10a 0a01 	add.w	sl, sl, #1
 80190d0:	9304      	str	r3, [sp, #16]
 80190d2:	9307      	str	r3, [sp, #28]
 80190d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190d8:	931a      	str	r3, [sp, #104]	; 0x68
 80190da:	4654      	mov	r4, sl
 80190dc:	2205      	movs	r2, #5
 80190de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190e2:	4858      	ldr	r0, [pc, #352]	; (8019244 <_vfiprintf_r+0x24c>)
 80190e4:	f7e7 f89c 	bl	8000220 <memchr>
 80190e8:	9a04      	ldr	r2, [sp, #16]
 80190ea:	b9d8      	cbnz	r0, 8019124 <_vfiprintf_r+0x12c>
 80190ec:	06d1      	lsls	r1, r2, #27
 80190ee:	bf44      	itt	mi
 80190f0:	2320      	movmi	r3, #32
 80190f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190f6:	0713      	lsls	r3, r2, #28
 80190f8:	bf44      	itt	mi
 80190fa:	232b      	movmi	r3, #43	; 0x2b
 80190fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019100:	f89a 3000 	ldrb.w	r3, [sl]
 8019104:	2b2a      	cmp	r3, #42	; 0x2a
 8019106:	d015      	beq.n	8019134 <_vfiprintf_r+0x13c>
 8019108:	9a07      	ldr	r2, [sp, #28]
 801910a:	4654      	mov	r4, sl
 801910c:	2000      	movs	r0, #0
 801910e:	f04f 0c0a 	mov.w	ip, #10
 8019112:	4621      	mov	r1, r4
 8019114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019118:	3b30      	subs	r3, #48	; 0x30
 801911a:	2b09      	cmp	r3, #9
 801911c:	d94e      	bls.n	80191bc <_vfiprintf_r+0x1c4>
 801911e:	b1b0      	cbz	r0, 801914e <_vfiprintf_r+0x156>
 8019120:	9207      	str	r2, [sp, #28]
 8019122:	e014      	b.n	801914e <_vfiprintf_r+0x156>
 8019124:	eba0 0308 	sub.w	r3, r0, r8
 8019128:	fa09 f303 	lsl.w	r3, r9, r3
 801912c:	4313      	orrs	r3, r2
 801912e:	9304      	str	r3, [sp, #16]
 8019130:	46a2      	mov	sl, r4
 8019132:	e7d2      	b.n	80190da <_vfiprintf_r+0xe2>
 8019134:	9b03      	ldr	r3, [sp, #12]
 8019136:	1d19      	adds	r1, r3, #4
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	9103      	str	r1, [sp, #12]
 801913c:	2b00      	cmp	r3, #0
 801913e:	bfbb      	ittet	lt
 8019140:	425b      	neglt	r3, r3
 8019142:	f042 0202 	orrlt.w	r2, r2, #2
 8019146:	9307      	strge	r3, [sp, #28]
 8019148:	9307      	strlt	r3, [sp, #28]
 801914a:	bfb8      	it	lt
 801914c:	9204      	strlt	r2, [sp, #16]
 801914e:	7823      	ldrb	r3, [r4, #0]
 8019150:	2b2e      	cmp	r3, #46	; 0x2e
 8019152:	d10c      	bne.n	801916e <_vfiprintf_r+0x176>
 8019154:	7863      	ldrb	r3, [r4, #1]
 8019156:	2b2a      	cmp	r3, #42	; 0x2a
 8019158:	d135      	bne.n	80191c6 <_vfiprintf_r+0x1ce>
 801915a:	9b03      	ldr	r3, [sp, #12]
 801915c:	1d1a      	adds	r2, r3, #4
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	9203      	str	r2, [sp, #12]
 8019162:	2b00      	cmp	r3, #0
 8019164:	bfb8      	it	lt
 8019166:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801916a:	3402      	adds	r4, #2
 801916c:	9305      	str	r3, [sp, #20]
 801916e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019254 <_vfiprintf_r+0x25c>
 8019172:	7821      	ldrb	r1, [r4, #0]
 8019174:	2203      	movs	r2, #3
 8019176:	4650      	mov	r0, sl
 8019178:	f7e7 f852 	bl	8000220 <memchr>
 801917c:	b140      	cbz	r0, 8019190 <_vfiprintf_r+0x198>
 801917e:	2340      	movs	r3, #64	; 0x40
 8019180:	eba0 000a 	sub.w	r0, r0, sl
 8019184:	fa03 f000 	lsl.w	r0, r3, r0
 8019188:	9b04      	ldr	r3, [sp, #16]
 801918a:	4303      	orrs	r3, r0
 801918c:	3401      	adds	r4, #1
 801918e:	9304      	str	r3, [sp, #16]
 8019190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019194:	482c      	ldr	r0, [pc, #176]	; (8019248 <_vfiprintf_r+0x250>)
 8019196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801919a:	2206      	movs	r2, #6
 801919c:	f7e7 f840 	bl	8000220 <memchr>
 80191a0:	2800      	cmp	r0, #0
 80191a2:	d03f      	beq.n	8019224 <_vfiprintf_r+0x22c>
 80191a4:	4b29      	ldr	r3, [pc, #164]	; (801924c <_vfiprintf_r+0x254>)
 80191a6:	bb1b      	cbnz	r3, 80191f0 <_vfiprintf_r+0x1f8>
 80191a8:	9b03      	ldr	r3, [sp, #12]
 80191aa:	3307      	adds	r3, #7
 80191ac:	f023 0307 	bic.w	r3, r3, #7
 80191b0:	3308      	adds	r3, #8
 80191b2:	9303      	str	r3, [sp, #12]
 80191b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191b6:	443b      	add	r3, r7
 80191b8:	9309      	str	r3, [sp, #36]	; 0x24
 80191ba:	e767      	b.n	801908c <_vfiprintf_r+0x94>
 80191bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80191c0:	460c      	mov	r4, r1
 80191c2:	2001      	movs	r0, #1
 80191c4:	e7a5      	b.n	8019112 <_vfiprintf_r+0x11a>
 80191c6:	2300      	movs	r3, #0
 80191c8:	3401      	adds	r4, #1
 80191ca:	9305      	str	r3, [sp, #20]
 80191cc:	4619      	mov	r1, r3
 80191ce:	f04f 0c0a 	mov.w	ip, #10
 80191d2:	4620      	mov	r0, r4
 80191d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191d8:	3a30      	subs	r2, #48	; 0x30
 80191da:	2a09      	cmp	r2, #9
 80191dc:	d903      	bls.n	80191e6 <_vfiprintf_r+0x1ee>
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d0c5      	beq.n	801916e <_vfiprintf_r+0x176>
 80191e2:	9105      	str	r1, [sp, #20]
 80191e4:	e7c3      	b.n	801916e <_vfiprintf_r+0x176>
 80191e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80191ea:	4604      	mov	r4, r0
 80191ec:	2301      	movs	r3, #1
 80191ee:	e7f0      	b.n	80191d2 <_vfiprintf_r+0x1da>
 80191f0:	ab03      	add	r3, sp, #12
 80191f2:	9300      	str	r3, [sp, #0]
 80191f4:	462a      	mov	r2, r5
 80191f6:	4b16      	ldr	r3, [pc, #88]	; (8019250 <_vfiprintf_r+0x258>)
 80191f8:	a904      	add	r1, sp, #16
 80191fa:	4630      	mov	r0, r6
 80191fc:	f3af 8000 	nop.w
 8019200:	4607      	mov	r7, r0
 8019202:	1c78      	adds	r0, r7, #1
 8019204:	d1d6      	bne.n	80191b4 <_vfiprintf_r+0x1bc>
 8019206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019208:	07d9      	lsls	r1, r3, #31
 801920a:	d405      	bmi.n	8019218 <_vfiprintf_r+0x220>
 801920c:	89ab      	ldrh	r3, [r5, #12]
 801920e:	059a      	lsls	r2, r3, #22
 8019210:	d402      	bmi.n	8019218 <_vfiprintf_r+0x220>
 8019212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019214:	f7fd face 	bl	80167b4 <__retarget_lock_release_recursive>
 8019218:	89ab      	ldrh	r3, [r5, #12]
 801921a:	065b      	lsls	r3, r3, #25
 801921c:	f53f af12 	bmi.w	8019044 <_vfiprintf_r+0x4c>
 8019220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019222:	e711      	b.n	8019048 <_vfiprintf_r+0x50>
 8019224:	ab03      	add	r3, sp, #12
 8019226:	9300      	str	r3, [sp, #0]
 8019228:	462a      	mov	r2, r5
 801922a:	4b09      	ldr	r3, [pc, #36]	; (8019250 <_vfiprintf_r+0x258>)
 801922c:	a904      	add	r1, sp, #16
 801922e:	4630      	mov	r0, r6
 8019230:	f000 f880 	bl	8019334 <_printf_i>
 8019234:	e7e4      	b.n	8019200 <_vfiprintf_r+0x208>
 8019236:	bf00      	nop
 8019238:	0801ce30 	.word	0x0801ce30
 801923c:	0801ce50 	.word	0x0801ce50
 8019240:	0801ce10 	.word	0x0801ce10
 8019244:	0801d1c4 	.word	0x0801d1c4
 8019248:	0801d1ce 	.word	0x0801d1ce
 801924c:	00000000 	.word	0x00000000
 8019250:	08018fd3 	.word	0x08018fd3
 8019254:	0801d1ca 	.word	0x0801d1ca

08019258 <_printf_common>:
 8019258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801925c:	4616      	mov	r6, r2
 801925e:	4699      	mov	r9, r3
 8019260:	688a      	ldr	r2, [r1, #8]
 8019262:	690b      	ldr	r3, [r1, #16]
 8019264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019268:	4293      	cmp	r3, r2
 801926a:	bfb8      	it	lt
 801926c:	4613      	movlt	r3, r2
 801926e:	6033      	str	r3, [r6, #0]
 8019270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019274:	4607      	mov	r7, r0
 8019276:	460c      	mov	r4, r1
 8019278:	b10a      	cbz	r2, 801927e <_printf_common+0x26>
 801927a:	3301      	adds	r3, #1
 801927c:	6033      	str	r3, [r6, #0]
 801927e:	6823      	ldr	r3, [r4, #0]
 8019280:	0699      	lsls	r1, r3, #26
 8019282:	bf42      	ittt	mi
 8019284:	6833      	ldrmi	r3, [r6, #0]
 8019286:	3302      	addmi	r3, #2
 8019288:	6033      	strmi	r3, [r6, #0]
 801928a:	6825      	ldr	r5, [r4, #0]
 801928c:	f015 0506 	ands.w	r5, r5, #6
 8019290:	d106      	bne.n	80192a0 <_printf_common+0x48>
 8019292:	f104 0a19 	add.w	sl, r4, #25
 8019296:	68e3      	ldr	r3, [r4, #12]
 8019298:	6832      	ldr	r2, [r6, #0]
 801929a:	1a9b      	subs	r3, r3, r2
 801929c:	42ab      	cmp	r3, r5
 801929e:	dc26      	bgt.n	80192ee <_printf_common+0x96>
 80192a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80192a4:	1e13      	subs	r3, r2, #0
 80192a6:	6822      	ldr	r2, [r4, #0]
 80192a8:	bf18      	it	ne
 80192aa:	2301      	movne	r3, #1
 80192ac:	0692      	lsls	r2, r2, #26
 80192ae:	d42b      	bmi.n	8019308 <_printf_common+0xb0>
 80192b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80192b4:	4649      	mov	r1, r9
 80192b6:	4638      	mov	r0, r7
 80192b8:	47c0      	blx	r8
 80192ba:	3001      	adds	r0, #1
 80192bc:	d01e      	beq.n	80192fc <_printf_common+0xa4>
 80192be:	6823      	ldr	r3, [r4, #0]
 80192c0:	68e5      	ldr	r5, [r4, #12]
 80192c2:	6832      	ldr	r2, [r6, #0]
 80192c4:	f003 0306 	and.w	r3, r3, #6
 80192c8:	2b04      	cmp	r3, #4
 80192ca:	bf08      	it	eq
 80192cc:	1aad      	subeq	r5, r5, r2
 80192ce:	68a3      	ldr	r3, [r4, #8]
 80192d0:	6922      	ldr	r2, [r4, #16]
 80192d2:	bf0c      	ite	eq
 80192d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80192d8:	2500      	movne	r5, #0
 80192da:	4293      	cmp	r3, r2
 80192dc:	bfc4      	itt	gt
 80192de:	1a9b      	subgt	r3, r3, r2
 80192e0:	18ed      	addgt	r5, r5, r3
 80192e2:	2600      	movs	r6, #0
 80192e4:	341a      	adds	r4, #26
 80192e6:	42b5      	cmp	r5, r6
 80192e8:	d11a      	bne.n	8019320 <_printf_common+0xc8>
 80192ea:	2000      	movs	r0, #0
 80192ec:	e008      	b.n	8019300 <_printf_common+0xa8>
 80192ee:	2301      	movs	r3, #1
 80192f0:	4652      	mov	r2, sl
 80192f2:	4649      	mov	r1, r9
 80192f4:	4638      	mov	r0, r7
 80192f6:	47c0      	blx	r8
 80192f8:	3001      	adds	r0, #1
 80192fa:	d103      	bne.n	8019304 <_printf_common+0xac>
 80192fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019304:	3501      	adds	r5, #1
 8019306:	e7c6      	b.n	8019296 <_printf_common+0x3e>
 8019308:	18e1      	adds	r1, r4, r3
 801930a:	1c5a      	adds	r2, r3, #1
 801930c:	2030      	movs	r0, #48	; 0x30
 801930e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019312:	4422      	add	r2, r4
 8019314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801931c:	3302      	adds	r3, #2
 801931e:	e7c7      	b.n	80192b0 <_printf_common+0x58>
 8019320:	2301      	movs	r3, #1
 8019322:	4622      	mov	r2, r4
 8019324:	4649      	mov	r1, r9
 8019326:	4638      	mov	r0, r7
 8019328:	47c0      	blx	r8
 801932a:	3001      	adds	r0, #1
 801932c:	d0e6      	beq.n	80192fc <_printf_common+0xa4>
 801932e:	3601      	adds	r6, #1
 8019330:	e7d9      	b.n	80192e6 <_printf_common+0x8e>
	...

08019334 <_printf_i>:
 8019334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019338:	7e0f      	ldrb	r7, [r1, #24]
 801933a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801933c:	2f78      	cmp	r7, #120	; 0x78
 801933e:	4691      	mov	r9, r2
 8019340:	4680      	mov	r8, r0
 8019342:	460c      	mov	r4, r1
 8019344:	469a      	mov	sl, r3
 8019346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801934a:	d807      	bhi.n	801935c <_printf_i+0x28>
 801934c:	2f62      	cmp	r7, #98	; 0x62
 801934e:	d80a      	bhi.n	8019366 <_printf_i+0x32>
 8019350:	2f00      	cmp	r7, #0
 8019352:	f000 80d8 	beq.w	8019506 <_printf_i+0x1d2>
 8019356:	2f58      	cmp	r7, #88	; 0x58
 8019358:	f000 80a3 	beq.w	80194a2 <_printf_i+0x16e>
 801935c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019364:	e03a      	b.n	80193dc <_printf_i+0xa8>
 8019366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801936a:	2b15      	cmp	r3, #21
 801936c:	d8f6      	bhi.n	801935c <_printf_i+0x28>
 801936e:	a101      	add	r1, pc, #4	; (adr r1, 8019374 <_printf_i+0x40>)
 8019370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019374:	080193cd 	.word	0x080193cd
 8019378:	080193e1 	.word	0x080193e1
 801937c:	0801935d 	.word	0x0801935d
 8019380:	0801935d 	.word	0x0801935d
 8019384:	0801935d 	.word	0x0801935d
 8019388:	0801935d 	.word	0x0801935d
 801938c:	080193e1 	.word	0x080193e1
 8019390:	0801935d 	.word	0x0801935d
 8019394:	0801935d 	.word	0x0801935d
 8019398:	0801935d 	.word	0x0801935d
 801939c:	0801935d 	.word	0x0801935d
 80193a0:	080194ed 	.word	0x080194ed
 80193a4:	08019411 	.word	0x08019411
 80193a8:	080194cf 	.word	0x080194cf
 80193ac:	0801935d 	.word	0x0801935d
 80193b0:	0801935d 	.word	0x0801935d
 80193b4:	0801950f 	.word	0x0801950f
 80193b8:	0801935d 	.word	0x0801935d
 80193bc:	08019411 	.word	0x08019411
 80193c0:	0801935d 	.word	0x0801935d
 80193c4:	0801935d 	.word	0x0801935d
 80193c8:	080194d7 	.word	0x080194d7
 80193cc:	682b      	ldr	r3, [r5, #0]
 80193ce:	1d1a      	adds	r2, r3, #4
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	602a      	str	r2, [r5, #0]
 80193d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80193d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80193dc:	2301      	movs	r3, #1
 80193de:	e0a3      	b.n	8019528 <_printf_i+0x1f4>
 80193e0:	6820      	ldr	r0, [r4, #0]
 80193e2:	6829      	ldr	r1, [r5, #0]
 80193e4:	0606      	lsls	r6, r0, #24
 80193e6:	f101 0304 	add.w	r3, r1, #4
 80193ea:	d50a      	bpl.n	8019402 <_printf_i+0xce>
 80193ec:	680e      	ldr	r6, [r1, #0]
 80193ee:	602b      	str	r3, [r5, #0]
 80193f0:	2e00      	cmp	r6, #0
 80193f2:	da03      	bge.n	80193fc <_printf_i+0xc8>
 80193f4:	232d      	movs	r3, #45	; 0x2d
 80193f6:	4276      	negs	r6, r6
 80193f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193fc:	485e      	ldr	r0, [pc, #376]	; (8019578 <_printf_i+0x244>)
 80193fe:	230a      	movs	r3, #10
 8019400:	e019      	b.n	8019436 <_printf_i+0x102>
 8019402:	680e      	ldr	r6, [r1, #0]
 8019404:	602b      	str	r3, [r5, #0]
 8019406:	f010 0f40 	tst.w	r0, #64	; 0x40
 801940a:	bf18      	it	ne
 801940c:	b236      	sxthne	r6, r6
 801940e:	e7ef      	b.n	80193f0 <_printf_i+0xbc>
 8019410:	682b      	ldr	r3, [r5, #0]
 8019412:	6820      	ldr	r0, [r4, #0]
 8019414:	1d19      	adds	r1, r3, #4
 8019416:	6029      	str	r1, [r5, #0]
 8019418:	0601      	lsls	r1, r0, #24
 801941a:	d501      	bpl.n	8019420 <_printf_i+0xec>
 801941c:	681e      	ldr	r6, [r3, #0]
 801941e:	e002      	b.n	8019426 <_printf_i+0xf2>
 8019420:	0646      	lsls	r6, r0, #25
 8019422:	d5fb      	bpl.n	801941c <_printf_i+0xe8>
 8019424:	881e      	ldrh	r6, [r3, #0]
 8019426:	4854      	ldr	r0, [pc, #336]	; (8019578 <_printf_i+0x244>)
 8019428:	2f6f      	cmp	r7, #111	; 0x6f
 801942a:	bf0c      	ite	eq
 801942c:	2308      	moveq	r3, #8
 801942e:	230a      	movne	r3, #10
 8019430:	2100      	movs	r1, #0
 8019432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019436:	6865      	ldr	r5, [r4, #4]
 8019438:	60a5      	str	r5, [r4, #8]
 801943a:	2d00      	cmp	r5, #0
 801943c:	bfa2      	ittt	ge
 801943e:	6821      	ldrge	r1, [r4, #0]
 8019440:	f021 0104 	bicge.w	r1, r1, #4
 8019444:	6021      	strge	r1, [r4, #0]
 8019446:	b90e      	cbnz	r6, 801944c <_printf_i+0x118>
 8019448:	2d00      	cmp	r5, #0
 801944a:	d04d      	beq.n	80194e8 <_printf_i+0x1b4>
 801944c:	4615      	mov	r5, r2
 801944e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019452:	fb03 6711 	mls	r7, r3, r1, r6
 8019456:	5dc7      	ldrb	r7, [r0, r7]
 8019458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801945c:	4637      	mov	r7, r6
 801945e:	42bb      	cmp	r3, r7
 8019460:	460e      	mov	r6, r1
 8019462:	d9f4      	bls.n	801944e <_printf_i+0x11a>
 8019464:	2b08      	cmp	r3, #8
 8019466:	d10b      	bne.n	8019480 <_printf_i+0x14c>
 8019468:	6823      	ldr	r3, [r4, #0]
 801946a:	07de      	lsls	r6, r3, #31
 801946c:	d508      	bpl.n	8019480 <_printf_i+0x14c>
 801946e:	6923      	ldr	r3, [r4, #16]
 8019470:	6861      	ldr	r1, [r4, #4]
 8019472:	4299      	cmp	r1, r3
 8019474:	bfde      	ittt	le
 8019476:	2330      	movle	r3, #48	; 0x30
 8019478:	f805 3c01 	strble.w	r3, [r5, #-1]
 801947c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019480:	1b52      	subs	r2, r2, r5
 8019482:	6122      	str	r2, [r4, #16]
 8019484:	f8cd a000 	str.w	sl, [sp]
 8019488:	464b      	mov	r3, r9
 801948a:	aa03      	add	r2, sp, #12
 801948c:	4621      	mov	r1, r4
 801948e:	4640      	mov	r0, r8
 8019490:	f7ff fee2 	bl	8019258 <_printf_common>
 8019494:	3001      	adds	r0, #1
 8019496:	d14c      	bne.n	8019532 <_printf_i+0x1fe>
 8019498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801949c:	b004      	add	sp, #16
 801949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194a2:	4835      	ldr	r0, [pc, #212]	; (8019578 <_printf_i+0x244>)
 80194a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80194a8:	6829      	ldr	r1, [r5, #0]
 80194aa:	6823      	ldr	r3, [r4, #0]
 80194ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80194b0:	6029      	str	r1, [r5, #0]
 80194b2:	061d      	lsls	r5, r3, #24
 80194b4:	d514      	bpl.n	80194e0 <_printf_i+0x1ac>
 80194b6:	07df      	lsls	r7, r3, #31
 80194b8:	bf44      	itt	mi
 80194ba:	f043 0320 	orrmi.w	r3, r3, #32
 80194be:	6023      	strmi	r3, [r4, #0]
 80194c0:	b91e      	cbnz	r6, 80194ca <_printf_i+0x196>
 80194c2:	6823      	ldr	r3, [r4, #0]
 80194c4:	f023 0320 	bic.w	r3, r3, #32
 80194c8:	6023      	str	r3, [r4, #0]
 80194ca:	2310      	movs	r3, #16
 80194cc:	e7b0      	b.n	8019430 <_printf_i+0xfc>
 80194ce:	6823      	ldr	r3, [r4, #0]
 80194d0:	f043 0320 	orr.w	r3, r3, #32
 80194d4:	6023      	str	r3, [r4, #0]
 80194d6:	2378      	movs	r3, #120	; 0x78
 80194d8:	4828      	ldr	r0, [pc, #160]	; (801957c <_printf_i+0x248>)
 80194da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194de:	e7e3      	b.n	80194a8 <_printf_i+0x174>
 80194e0:	0659      	lsls	r1, r3, #25
 80194e2:	bf48      	it	mi
 80194e4:	b2b6      	uxthmi	r6, r6
 80194e6:	e7e6      	b.n	80194b6 <_printf_i+0x182>
 80194e8:	4615      	mov	r5, r2
 80194ea:	e7bb      	b.n	8019464 <_printf_i+0x130>
 80194ec:	682b      	ldr	r3, [r5, #0]
 80194ee:	6826      	ldr	r6, [r4, #0]
 80194f0:	6961      	ldr	r1, [r4, #20]
 80194f2:	1d18      	adds	r0, r3, #4
 80194f4:	6028      	str	r0, [r5, #0]
 80194f6:	0635      	lsls	r5, r6, #24
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	d501      	bpl.n	8019500 <_printf_i+0x1cc>
 80194fc:	6019      	str	r1, [r3, #0]
 80194fe:	e002      	b.n	8019506 <_printf_i+0x1d2>
 8019500:	0670      	lsls	r0, r6, #25
 8019502:	d5fb      	bpl.n	80194fc <_printf_i+0x1c8>
 8019504:	8019      	strh	r1, [r3, #0]
 8019506:	2300      	movs	r3, #0
 8019508:	6123      	str	r3, [r4, #16]
 801950a:	4615      	mov	r5, r2
 801950c:	e7ba      	b.n	8019484 <_printf_i+0x150>
 801950e:	682b      	ldr	r3, [r5, #0]
 8019510:	1d1a      	adds	r2, r3, #4
 8019512:	602a      	str	r2, [r5, #0]
 8019514:	681d      	ldr	r5, [r3, #0]
 8019516:	6862      	ldr	r2, [r4, #4]
 8019518:	2100      	movs	r1, #0
 801951a:	4628      	mov	r0, r5
 801951c:	f7e6 fe80 	bl	8000220 <memchr>
 8019520:	b108      	cbz	r0, 8019526 <_printf_i+0x1f2>
 8019522:	1b40      	subs	r0, r0, r5
 8019524:	6060      	str	r0, [r4, #4]
 8019526:	6863      	ldr	r3, [r4, #4]
 8019528:	6123      	str	r3, [r4, #16]
 801952a:	2300      	movs	r3, #0
 801952c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019530:	e7a8      	b.n	8019484 <_printf_i+0x150>
 8019532:	6923      	ldr	r3, [r4, #16]
 8019534:	462a      	mov	r2, r5
 8019536:	4649      	mov	r1, r9
 8019538:	4640      	mov	r0, r8
 801953a:	47d0      	blx	sl
 801953c:	3001      	adds	r0, #1
 801953e:	d0ab      	beq.n	8019498 <_printf_i+0x164>
 8019540:	6823      	ldr	r3, [r4, #0]
 8019542:	079b      	lsls	r3, r3, #30
 8019544:	d413      	bmi.n	801956e <_printf_i+0x23a>
 8019546:	68e0      	ldr	r0, [r4, #12]
 8019548:	9b03      	ldr	r3, [sp, #12]
 801954a:	4298      	cmp	r0, r3
 801954c:	bfb8      	it	lt
 801954e:	4618      	movlt	r0, r3
 8019550:	e7a4      	b.n	801949c <_printf_i+0x168>
 8019552:	2301      	movs	r3, #1
 8019554:	4632      	mov	r2, r6
 8019556:	4649      	mov	r1, r9
 8019558:	4640      	mov	r0, r8
 801955a:	47d0      	blx	sl
 801955c:	3001      	adds	r0, #1
 801955e:	d09b      	beq.n	8019498 <_printf_i+0x164>
 8019560:	3501      	adds	r5, #1
 8019562:	68e3      	ldr	r3, [r4, #12]
 8019564:	9903      	ldr	r1, [sp, #12]
 8019566:	1a5b      	subs	r3, r3, r1
 8019568:	42ab      	cmp	r3, r5
 801956a:	dcf2      	bgt.n	8019552 <_printf_i+0x21e>
 801956c:	e7eb      	b.n	8019546 <_printf_i+0x212>
 801956e:	2500      	movs	r5, #0
 8019570:	f104 0619 	add.w	r6, r4, #25
 8019574:	e7f5      	b.n	8019562 <_printf_i+0x22e>
 8019576:	bf00      	nop
 8019578:	0801d1d5 	.word	0x0801d1d5
 801957c:	0801d1e6 	.word	0x0801d1e6

08019580 <_read_r>:
 8019580:	b538      	push	{r3, r4, r5, lr}
 8019582:	4d07      	ldr	r5, [pc, #28]	; (80195a0 <_read_r+0x20>)
 8019584:	4604      	mov	r4, r0
 8019586:	4608      	mov	r0, r1
 8019588:	4611      	mov	r1, r2
 801958a:	2200      	movs	r2, #0
 801958c:	602a      	str	r2, [r5, #0]
 801958e:	461a      	mov	r2, r3
 8019590:	f7e8 f802 	bl	8001598 <_read>
 8019594:	1c43      	adds	r3, r0, #1
 8019596:	d102      	bne.n	801959e <_read_r+0x1e>
 8019598:	682b      	ldr	r3, [r5, #0]
 801959a:	b103      	cbz	r3, 801959e <_read_r+0x1e>
 801959c:	6023      	str	r3, [r4, #0]
 801959e:	bd38      	pop	{r3, r4, r5, pc}
 80195a0:	20011cb0 	.word	0x20011cb0
 80195a4:	00000000 	.word	0x00000000

080195a8 <nan>:
 80195a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80195b0 <nan+0x8>
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop
 80195b0:	00000000 	.word	0x00000000
 80195b4:	7ff80000 	.word	0x7ff80000

080195b8 <__swbuf_r>:
 80195b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ba:	460e      	mov	r6, r1
 80195bc:	4614      	mov	r4, r2
 80195be:	4605      	mov	r5, r0
 80195c0:	b118      	cbz	r0, 80195ca <__swbuf_r+0x12>
 80195c2:	6983      	ldr	r3, [r0, #24]
 80195c4:	b90b      	cbnz	r3, 80195ca <__swbuf_r+0x12>
 80195c6:	f7fd f831 	bl	801662c <__sinit>
 80195ca:	4b21      	ldr	r3, [pc, #132]	; (8019650 <__swbuf_r+0x98>)
 80195cc:	429c      	cmp	r4, r3
 80195ce:	d12b      	bne.n	8019628 <__swbuf_r+0x70>
 80195d0:	686c      	ldr	r4, [r5, #4]
 80195d2:	69a3      	ldr	r3, [r4, #24]
 80195d4:	60a3      	str	r3, [r4, #8]
 80195d6:	89a3      	ldrh	r3, [r4, #12]
 80195d8:	071a      	lsls	r2, r3, #28
 80195da:	d52f      	bpl.n	801963c <__swbuf_r+0x84>
 80195dc:	6923      	ldr	r3, [r4, #16]
 80195de:	b36b      	cbz	r3, 801963c <__swbuf_r+0x84>
 80195e0:	6923      	ldr	r3, [r4, #16]
 80195e2:	6820      	ldr	r0, [r4, #0]
 80195e4:	1ac0      	subs	r0, r0, r3
 80195e6:	6963      	ldr	r3, [r4, #20]
 80195e8:	b2f6      	uxtb	r6, r6
 80195ea:	4283      	cmp	r3, r0
 80195ec:	4637      	mov	r7, r6
 80195ee:	dc04      	bgt.n	80195fa <__swbuf_r+0x42>
 80195f0:	4621      	mov	r1, r4
 80195f2:	4628      	mov	r0, r5
 80195f4:	f7fe fa60 	bl	8017ab8 <_fflush_r>
 80195f8:	bb30      	cbnz	r0, 8019648 <__swbuf_r+0x90>
 80195fa:	68a3      	ldr	r3, [r4, #8]
 80195fc:	3b01      	subs	r3, #1
 80195fe:	60a3      	str	r3, [r4, #8]
 8019600:	6823      	ldr	r3, [r4, #0]
 8019602:	1c5a      	adds	r2, r3, #1
 8019604:	6022      	str	r2, [r4, #0]
 8019606:	701e      	strb	r6, [r3, #0]
 8019608:	6963      	ldr	r3, [r4, #20]
 801960a:	3001      	adds	r0, #1
 801960c:	4283      	cmp	r3, r0
 801960e:	d004      	beq.n	801961a <__swbuf_r+0x62>
 8019610:	89a3      	ldrh	r3, [r4, #12]
 8019612:	07db      	lsls	r3, r3, #31
 8019614:	d506      	bpl.n	8019624 <__swbuf_r+0x6c>
 8019616:	2e0a      	cmp	r6, #10
 8019618:	d104      	bne.n	8019624 <__swbuf_r+0x6c>
 801961a:	4621      	mov	r1, r4
 801961c:	4628      	mov	r0, r5
 801961e:	f7fe fa4b 	bl	8017ab8 <_fflush_r>
 8019622:	b988      	cbnz	r0, 8019648 <__swbuf_r+0x90>
 8019624:	4638      	mov	r0, r7
 8019626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019628:	4b0a      	ldr	r3, [pc, #40]	; (8019654 <__swbuf_r+0x9c>)
 801962a:	429c      	cmp	r4, r3
 801962c:	d101      	bne.n	8019632 <__swbuf_r+0x7a>
 801962e:	68ac      	ldr	r4, [r5, #8]
 8019630:	e7cf      	b.n	80195d2 <__swbuf_r+0x1a>
 8019632:	4b09      	ldr	r3, [pc, #36]	; (8019658 <__swbuf_r+0xa0>)
 8019634:	429c      	cmp	r4, r3
 8019636:	bf08      	it	eq
 8019638:	68ec      	ldreq	r4, [r5, #12]
 801963a:	e7ca      	b.n	80195d2 <__swbuf_r+0x1a>
 801963c:	4621      	mov	r1, r4
 801963e:	4628      	mov	r0, r5
 8019640:	f000 f81a 	bl	8019678 <__swsetup_r>
 8019644:	2800      	cmp	r0, #0
 8019646:	d0cb      	beq.n	80195e0 <__swbuf_r+0x28>
 8019648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801964c:	e7ea      	b.n	8019624 <__swbuf_r+0x6c>
 801964e:	bf00      	nop
 8019650:	0801ce30 	.word	0x0801ce30
 8019654:	0801ce50 	.word	0x0801ce50
 8019658:	0801ce10 	.word	0x0801ce10

0801965c <__ascii_wctomb>:
 801965c:	b149      	cbz	r1, 8019672 <__ascii_wctomb+0x16>
 801965e:	2aff      	cmp	r2, #255	; 0xff
 8019660:	bf85      	ittet	hi
 8019662:	238a      	movhi	r3, #138	; 0x8a
 8019664:	6003      	strhi	r3, [r0, #0]
 8019666:	700a      	strbls	r2, [r1, #0]
 8019668:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801966c:	bf98      	it	ls
 801966e:	2001      	movls	r0, #1
 8019670:	4770      	bx	lr
 8019672:	4608      	mov	r0, r1
 8019674:	4770      	bx	lr
	...

08019678 <__swsetup_r>:
 8019678:	4b32      	ldr	r3, [pc, #200]	; (8019744 <__swsetup_r+0xcc>)
 801967a:	b570      	push	{r4, r5, r6, lr}
 801967c:	681d      	ldr	r5, [r3, #0]
 801967e:	4606      	mov	r6, r0
 8019680:	460c      	mov	r4, r1
 8019682:	b125      	cbz	r5, 801968e <__swsetup_r+0x16>
 8019684:	69ab      	ldr	r3, [r5, #24]
 8019686:	b913      	cbnz	r3, 801968e <__swsetup_r+0x16>
 8019688:	4628      	mov	r0, r5
 801968a:	f7fc ffcf 	bl	801662c <__sinit>
 801968e:	4b2e      	ldr	r3, [pc, #184]	; (8019748 <__swsetup_r+0xd0>)
 8019690:	429c      	cmp	r4, r3
 8019692:	d10f      	bne.n	80196b4 <__swsetup_r+0x3c>
 8019694:	686c      	ldr	r4, [r5, #4]
 8019696:	89a3      	ldrh	r3, [r4, #12]
 8019698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801969c:	0719      	lsls	r1, r3, #28
 801969e:	d42c      	bmi.n	80196fa <__swsetup_r+0x82>
 80196a0:	06dd      	lsls	r5, r3, #27
 80196a2:	d411      	bmi.n	80196c8 <__swsetup_r+0x50>
 80196a4:	2309      	movs	r3, #9
 80196a6:	6033      	str	r3, [r6, #0]
 80196a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80196ac:	81a3      	strh	r3, [r4, #12]
 80196ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196b2:	e03e      	b.n	8019732 <__swsetup_r+0xba>
 80196b4:	4b25      	ldr	r3, [pc, #148]	; (801974c <__swsetup_r+0xd4>)
 80196b6:	429c      	cmp	r4, r3
 80196b8:	d101      	bne.n	80196be <__swsetup_r+0x46>
 80196ba:	68ac      	ldr	r4, [r5, #8]
 80196bc:	e7eb      	b.n	8019696 <__swsetup_r+0x1e>
 80196be:	4b24      	ldr	r3, [pc, #144]	; (8019750 <__swsetup_r+0xd8>)
 80196c0:	429c      	cmp	r4, r3
 80196c2:	bf08      	it	eq
 80196c4:	68ec      	ldreq	r4, [r5, #12]
 80196c6:	e7e6      	b.n	8019696 <__swsetup_r+0x1e>
 80196c8:	0758      	lsls	r0, r3, #29
 80196ca:	d512      	bpl.n	80196f2 <__swsetup_r+0x7a>
 80196cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196ce:	b141      	cbz	r1, 80196e2 <__swsetup_r+0x6a>
 80196d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196d4:	4299      	cmp	r1, r3
 80196d6:	d002      	beq.n	80196de <__swsetup_r+0x66>
 80196d8:	4630      	mov	r0, r6
 80196da:	f7ff fabb 	bl	8018c54 <_free_r>
 80196de:	2300      	movs	r3, #0
 80196e0:	6363      	str	r3, [r4, #52]	; 0x34
 80196e2:	89a3      	ldrh	r3, [r4, #12]
 80196e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80196e8:	81a3      	strh	r3, [r4, #12]
 80196ea:	2300      	movs	r3, #0
 80196ec:	6063      	str	r3, [r4, #4]
 80196ee:	6923      	ldr	r3, [r4, #16]
 80196f0:	6023      	str	r3, [r4, #0]
 80196f2:	89a3      	ldrh	r3, [r4, #12]
 80196f4:	f043 0308 	orr.w	r3, r3, #8
 80196f8:	81a3      	strh	r3, [r4, #12]
 80196fa:	6923      	ldr	r3, [r4, #16]
 80196fc:	b94b      	cbnz	r3, 8019712 <__swsetup_r+0x9a>
 80196fe:	89a3      	ldrh	r3, [r4, #12]
 8019700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019708:	d003      	beq.n	8019712 <__swsetup_r+0x9a>
 801970a:	4621      	mov	r1, r4
 801970c:	4630      	mov	r0, r6
 801970e:	f000 f84d 	bl	80197ac <__smakebuf_r>
 8019712:	89a0      	ldrh	r0, [r4, #12]
 8019714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019718:	f010 0301 	ands.w	r3, r0, #1
 801971c:	d00a      	beq.n	8019734 <__swsetup_r+0xbc>
 801971e:	2300      	movs	r3, #0
 8019720:	60a3      	str	r3, [r4, #8]
 8019722:	6963      	ldr	r3, [r4, #20]
 8019724:	425b      	negs	r3, r3
 8019726:	61a3      	str	r3, [r4, #24]
 8019728:	6923      	ldr	r3, [r4, #16]
 801972a:	b943      	cbnz	r3, 801973e <__swsetup_r+0xc6>
 801972c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019730:	d1ba      	bne.n	80196a8 <__swsetup_r+0x30>
 8019732:	bd70      	pop	{r4, r5, r6, pc}
 8019734:	0781      	lsls	r1, r0, #30
 8019736:	bf58      	it	pl
 8019738:	6963      	ldrpl	r3, [r4, #20]
 801973a:	60a3      	str	r3, [r4, #8]
 801973c:	e7f4      	b.n	8019728 <__swsetup_r+0xb0>
 801973e:	2000      	movs	r0, #0
 8019740:	e7f7      	b.n	8019732 <__swsetup_r+0xba>
 8019742:	bf00      	nop
 8019744:	2000002c 	.word	0x2000002c
 8019748:	0801ce30 	.word	0x0801ce30
 801974c:	0801ce50 	.word	0x0801ce50
 8019750:	0801ce10 	.word	0x0801ce10

08019754 <abort>:
 8019754:	b508      	push	{r3, lr}
 8019756:	2006      	movs	r0, #6
 8019758:	f000 f8c0 	bl	80198dc <raise>
 801975c:	2001      	movs	r0, #1
 801975e:	f7e7 ff11 	bl	8001584 <_exit>

08019762 <__swhatbuf_r>:
 8019762:	b570      	push	{r4, r5, r6, lr}
 8019764:	460e      	mov	r6, r1
 8019766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801976a:	2900      	cmp	r1, #0
 801976c:	b096      	sub	sp, #88	; 0x58
 801976e:	4614      	mov	r4, r2
 8019770:	461d      	mov	r5, r3
 8019772:	da08      	bge.n	8019786 <__swhatbuf_r+0x24>
 8019774:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019778:	2200      	movs	r2, #0
 801977a:	602a      	str	r2, [r5, #0]
 801977c:	061a      	lsls	r2, r3, #24
 801977e:	d410      	bmi.n	80197a2 <__swhatbuf_r+0x40>
 8019780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019784:	e00e      	b.n	80197a4 <__swhatbuf_r+0x42>
 8019786:	466a      	mov	r2, sp
 8019788:	f000 f8c4 	bl	8019914 <_fstat_r>
 801978c:	2800      	cmp	r0, #0
 801978e:	dbf1      	blt.n	8019774 <__swhatbuf_r+0x12>
 8019790:	9a01      	ldr	r2, [sp, #4]
 8019792:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019796:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801979a:	425a      	negs	r2, r3
 801979c:	415a      	adcs	r2, r3
 801979e:	602a      	str	r2, [r5, #0]
 80197a0:	e7ee      	b.n	8019780 <__swhatbuf_r+0x1e>
 80197a2:	2340      	movs	r3, #64	; 0x40
 80197a4:	2000      	movs	r0, #0
 80197a6:	6023      	str	r3, [r4, #0]
 80197a8:	b016      	add	sp, #88	; 0x58
 80197aa:	bd70      	pop	{r4, r5, r6, pc}

080197ac <__smakebuf_r>:
 80197ac:	898b      	ldrh	r3, [r1, #12]
 80197ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80197b0:	079d      	lsls	r5, r3, #30
 80197b2:	4606      	mov	r6, r0
 80197b4:	460c      	mov	r4, r1
 80197b6:	d507      	bpl.n	80197c8 <__smakebuf_r+0x1c>
 80197b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80197bc:	6023      	str	r3, [r4, #0]
 80197be:	6123      	str	r3, [r4, #16]
 80197c0:	2301      	movs	r3, #1
 80197c2:	6163      	str	r3, [r4, #20]
 80197c4:	b002      	add	sp, #8
 80197c6:	bd70      	pop	{r4, r5, r6, pc}
 80197c8:	ab01      	add	r3, sp, #4
 80197ca:	466a      	mov	r2, sp
 80197cc:	f7ff ffc9 	bl	8019762 <__swhatbuf_r>
 80197d0:	9900      	ldr	r1, [sp, #0]
 80197d2:	4605      	mov	r5, r0
 80197d4:	4630      	mov	r0, r6
 80197d6:	f7fd f84f 	bl	8016878 <_malloc_r>
 80197da:	b948      	cbnz	r0, 80197f0 <__smakebuf_r+0x44>
 80197dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197e0:	059a      	lsls	r2, r3, #22
 80197e2:	d4ef      	bmi.n	80197c4 <__smakebuf_r+0x18>
 80197e4:	f023 0303 	bic.w	r3, r3, #3
 80197e8:	f043 0302 	orr.w	r3, r3, #2
 80197ec:	81a3      	strh	r3, [r4, #12]
 80197ee:	e7e3      	b.n	80197b8 <__smakebuf_r+0xc>
 80197f0:	4b0d      	ldr	r3, [pc, #52]	; (8019828 <__smakebuf_r+0x7c>)
 80197f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80197f4:	89a3      	ldrh	r3, [r4, #12]
 80197f6:	6020      	str	r0, [r4, #0]
 80197f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197fc:	81a3      	strh	r3, [r4, #12]
 80197fe:	9b00      	ldr	r3, [sp, #0]
 8019800:	6163      	str	r3, [r4, #20]
 8019802:	9b01      	ldr	r3, [sp, #4]
 8019804:	6120      	str	r0, [r4, #16]
 8019806:	b15b      	cbz	r3, 8019820 <__smakebuf_r+0x74>
 8019808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801980c:	4630      	mov	r0, r6
 801980e:	f000 f893 	bl	8019938 <_isatty_r>
 8019812:	b128      	cbz	r0, 8019820 <__smakebuf_r+0x74>
 8019814:	89a3      	ldrh	r3, [r4, #12]
 8019816:	f023 0303 	bic.w	r3, r3, #3
 801981a:	f043 0301 	orr.w	r3, r3, #1
 801981e:	81a3      	strh	r3, [r4, #12]
 8019820:	89a0      	ldrh	r0, [r4, #12]
 8019822:	4305      	orrs	r5, r0
 8019824:	81a5      	strh	r5, [r4, #12]
 8019826:	e7cd      	b.n	80197c4 <__smakebuf_r+0x18>
 8019828:	080165c5 	.word	0x080165c5

0801982c <_realloc_r>:
 801982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019830:	4680      	mov	r8, r0
 8019832:	4614      	mov	r4, r2
 8019834:	460e      	mov	r6, r1
 8019836:	b921      	cbnz	r1, 8019842 <_realloc_r+0x16>
 8019838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801983c:	4611      	mov	r1, r2
 801983e:	f7fd b81b 	b.w	8016878 <_malloc_r>
 8019842:	b92a      	cbnz	r2, 8019850 <_realloc_r+0x24>
 8019844:	f7ff fa06 	bl	8018c54 <_free_r>
 8019848:	4625      	mov	r5, r4
 801984a:	4628      	mov	r0, r5
 801984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019850:	f000 f882 	bl	8019958 <_malloc_usable_size_r>
 8019854:	4284      	cmp	r4, r0
 8019856:	4607      	mov	r7, r0
 8019858:	d802      	bhi.n	8019860 <_realloc_r+0x34>
 801985a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801985e:	d812      	bhi.n	8019886 <_realloc_r+0x5a>
 8019860:	4621      	mov	r1, r4
 8019862:	4640      	mov	r0, r8
 8019864:	f7fd f808 	bl	8016878 <_malloc_r>
 8019868:	4605      	mov	r5, r0
 801986a:	2800      	cmp	r0, #0
 801986c:	d0ed      	beq.n	801984a <_realloc_r+0x1e>
 801986e:	42bc      	cmp	r4, r7
 8019870:	4622      	mov	r2, r4
 8019872:	4631      	mov	r1, r6
 8019874:	bf28      	it	cs
 8019876:	463a      	movcs	r2, r7
 8019878:	f7fc ffad 	bl	80167d6 <memcpy>
 801987c:	4631      	mov	r1, r6
 801987e:	4640      	mov	r0, r8
 8019880:	f7ff f9e8 	bl	8018c54 <_free_r>
 8019884:	e7e1      	b.n	801984a <_realloc_r+0x1e>
 8019886:	4635      	mov	r5, r6
 8019888:	e7df      	b.n	801984a <_realloc_r+0x1e>

0801988a <_raise_r>:
 801988a:	291f      	cmp	r1, #31
 801988c:	b538      	push	{r3, r4, r5, lr}
 801988e:	4604      	mov	r4, r0
 8019890:	460d      	mov	r5, r1
 8019892:	d904      	bls.n	801989e <_raise_r+0x14>
 8019894:	2316      	movs	r3, #22
 8019896:	6003      	str	r3, [r0, #0]
 8019898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801989c:	bd38      	pop	{r3, r4, r5, pc}
 801989e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80198a0:	b112      	cbz	r2, 80198a8 <_raise_r+0x1e>
 80198a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80198a6:	b94b      	cbnz	r3, 80198bc <_raise_r+0x32>
 80198a8:	4620      	mov	r0, r4
 80198aa:	f000 f831 	bl	8019910 <_getpid_r>
 80198ae:	462a      	mov	r2, r5
 80198b0:	4601      	mov	r1, r0
 80198b2:	4620      	mov	r0, r4
 80198b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198b8:	f000 b818 	b.w	80198ec <_kill_r>
 80198bc:	2b01      	cmp	r3, #1
 80198be:	d00a      	beq.n	80198d6 <_raise_r+0x4c>
 80198c0:	1c59      	adds	r1, r3, #1
 80198c2:	d103      	bne.n	80198cc <_raise_r+0x42>
 80198c4:	2316      	movs	r3, #22
 80198c6:	6003      	str	r3, [r0, #0]
 80198c8:	2001      	movs	r0, #1
 80198ca:	e7e7      	b.n	801989c <_raise_r+0x12>
 80198cc:	2400      	movs	r4, #0
 80198ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80198d2:	4628      	mov	r0, r5
 80198d4:	4798      	blx	r3
 80198d6:	2000      	movs	r0, #0
 80198d8:	e7e0      	b.n	801989c <_raise_r+0x12>
	...

080198dc <raise>:
 80198dc:	4b02      	ldr	r3, [pc, #8]	; (80198e8 <raise+0xc>)
 80198de:	4601      	mov	r1, r0
 80198e0:	6818      	ldr	r0, [r3, #0]
 80198e2:	f7ff bfd2 	b.w	801988a <_raise_r>
 80198e6:	bf00      	nop
 80198e8:	2000002c 	.word	0x2000002c

080198ec <_kill_r>:
 80198ec:	b538      	push	{r3, r4, r5, lr}
 80198ee:	4d07      	ldr	r5, [pc, #28]	; (801990c <_kill_r+0x20>)
 80198f0:	2300      	movs	r3, #0
 80198f2:	4604      	mov	r4, r0
 80198f4:	4608      	mov	r0, r1
 80198f6:	4611      	mov	r1, r2
 80198f8:	602b      	str	r3, [r5, #0]
 80198fa:	f7e7 fe31 	bl	8001560 <_kill>
 80198fe:	1c43      	adds	r3, r0, #1
 8019900:	d102      	bne.n	8019908 <_kill_r+0x1c>
 8019902:	682b      	ldr	r3, [r5, #0]
 8019904:	b103      	cbz	r3, 8019908 <_kill_r+0x1c>
 8019906:	6023      	str	r3, [r4, #0]
 8019908:	bd38      	pop	{r3, r4, r5, pc}
 801990a:	bf00      	nop
 801990c:	20011cb0 	.word	0x20011cb0

08019910 <_getpid_r>:
 8019910:	f7e7 be1e 	b.w	8001550 <_getpid>

08019914 <_fstat_r>:
 8019914:	b538      	push	{r3, r4, r5, lr}
 8019916:	4d07      	ldr	r5, [pc, #28]	; (8019934 <_fstat_r+0x20>)
 8019918:	2300      	movs	r3, #0
 801991a:	4604      	mov	r4, r0
 801991c:	4608      	mov	r0, r1
 801991e:	4611      	mov	r1, r2
 8019920:	602b      	str	r3, [r5, #0]
 8019922:	f7e7 fe7e 	bl	8001622 <_fstat>
 8019926:	1c43      	adds	r3, r0, #1
 8019928:	d102      	bne.n	8019930 <_fstat_r+0x1c>
 801992a:	682b      	ldr	r3, [r5, #0]
 801992c:	b103      	cbz	r3, 8019930 <_fstat_r+0x1c>
 801992e:	6023      	str	r3, [r4, #0]
 8019930:	bd38      	pop	{r3, r4, r5, pc}
 8019932:	bf00      	nop
 8019934:	20011cb0 	.word	0x20011cb0

08019938 <_isatty_r>:
 8019938:	b538      	push	{r3, r4, r5, lr}
 801993a:	4d06      	ldr	r5, [pc, #24]	; (8019954 <_isatty_r+0x1c>)
 801993c:	2300      	movs	r3, #0
 801993e:	4604      	mov	r4, r0
 8019940:	4608      	mov	r0, r1
 8019942:	602b      	str	r3, [r5, #0]
 8019944:	f7e7 fe7d 	bl	8001642 <_isatty>
 8019948:	1c43      	adds	r3, r0, #1
 801994a:	d102      	bne.n	8019952 <_isatty_r+0x1a>
 801994c:	682b      	ldr	r3, [r5, #0]
 801994e:	b103      	cbz	r3, 8019952 <_isatty_r+0x1a>
 8019950:	6023      	str	r3, [r4, #0]
 8019952:	bd38      	pop	{r3, r4, r5, pc}
 8019954:	20011cb0 	.word	0x20011cb0

08019958 <_malloc_usable_size_r>:
 8019958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801995c:	1f18      	subs	r0, r3, #4
 801995e:	2b00      	cmp	r3, #0
 8019960:	bfbc      	itt	lt
 8019962:	580b      	ldrlt	r3, [r1, r0]
 8019964:	18c0      	addlt	r0, r0, r3
 8019966:	4770      	bx	lr

08019968 <_init>:
 8019968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801996a:	bf00      	nop
 801996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801996e:	bc08      	pop	{r3}
 8019970:	469e      	mov	lr, r3
 8019972:	4770      	bx	lr

08019974 <_fini>:
 8019974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019976:	bf00      	nop
 8019978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801997a:	bc08      	pop	{r3}
 801997c:	469e      	mov	lr, r3
 801997e:	4770      	bx	lr
