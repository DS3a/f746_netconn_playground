
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a340  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b8  0801a510  0801a510  0002a510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ddc8  0801ddc8  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  0801ddc8  0801ddc8  0002ddc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ddd0  0801ddd0  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ddd0  0801ddd0  0002ddd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ddd4  0801ddd4  0002ddd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801ddd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  0801dfd8  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  0801e078  000302a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000119c4  20000340  0801e118  00030340  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011d04  0801e118  00031d04  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033890  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000079f0  00000000  00000000  00063c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002380  00000000  00000000  0006b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000366ab  00000000  00000000  0006d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035f2c  00000000  00000000  000a401b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001116b1  00000000  00000000  000d9f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001eb5f8  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 000021d8  00000000  00000000  001eb648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a4d8  00000000  00000000  001ed820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000340 	.word	0x20000340
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a4f8 	.word	0x0801a4f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000344 	.word	0x20000344
 800020c:	0801a4f8 	.word	0x0801a4f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
}
 8000fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
}
 8000fca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SCB_EnableICache+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
}
 8000ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SCB_EnableDCache+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SCB_EnableDCache+0x84>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001040:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <SCB_EnableDCache+0x84>)
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ef      	bne.n	8001038 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableDCache+0x84>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableDCache+0x84>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001094:	f000 fa3e 	bl	8001514 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001098:	f7ff ff90 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800109c:	f7ff ffb4 	bl	8001008 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 ff76 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f842 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f908 	bl	80012bc <MX_GPIO_Init>
  MX_TIM3_Init();
 80010ac:	f000 f8ac 	bl	8001208 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b0:	f005 f82e 	bl	8006110 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <main+0x6c>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <main+0x70>)
 80010ba:	f005 f8bb 	bl	8006234 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <main+0x74>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <main+0x78>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <main+0x7c>)
 80010ca:	f005 f8b3 	bl	8006234 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <main+0x80>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <main+0x84>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	480f      	ldr	r0, [pc, #60]	; (8001118 <main+0x88>)
 80010da:	f005 f8ab 	bl	8006234 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <main+0x8c>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of control_systems */
  control_systemsHandle = osThreadNew(start_control_systems, NULL, &control_systems_attributes);
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <main+0x90>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <main+0x94>)
 80010ea:	f005 f8a3 	bl	8006234 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <main+0x98>)
 80010f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f4:	f005 f840 	bl	8006178 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0x68>
 80010fa:	bf00      	nop
 80010fc:	0801d718 	.word	0x0801d718
 8001100:	080013dd 	.word	0x080013dd
 8001104:	200003a8 	.word	0x200003a8
 8001108:	0801d73c 	.word	0x0801d73c
 800110c:	080013f5 	.word	0x080013f5
 8001110:	200003ac 	.word	0x200003ac
 8001114:	0801d760 	.word	0x0801d760
 8001118:	08001449 	.word	0x08001449
 800111c:	200003b0 	.word	0x200003b0
 8001120:	0801d784 	.word	0x0801d784
 8001124:	0800146d 	.word	0x0800146d
 8001128:	200003b4 	.word	0x200003b4

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f016 f93b 	bl	80173b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <SystemClock_Config+0xd4>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <SystemClock_Config+0xd4>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <SystemClock_Config+0xd4>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <SystemClock_Config+0xd8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <SystemClock_Config+0xd8>)
 800116e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <SystemClock_Config+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001194:	2319      	movs	r3, #25
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001198:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800119c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fd86 	bl	8003cbc <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011b6:	f000 f9ed 	bl	8001594 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011ba:	f002 fd2f 	bl	8003c1c <HAL_PWREx_EnableOverDrive>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011c4:	f000 f9e6 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2107      	movs	r1, #7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f80c 	bl	8004204 <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011f2:	f000 f9cf 	bl	8001594 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_TIM3_Init+0xac>)
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <MX_TIM3_Init+0xb0>)
 8001230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_TIM3_Init+0xac>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_TIM3_Init+0xac>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001254:	f003 fab4 	bl	80047c0 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800125e:	f000 f999 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001272:	f004 f855 	bl	8005320 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800127c:	f000 f98a 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001298:	f003 fc08 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012a2:	f000 f977 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM3_Init+0xac>)
 80012a8:	f000 f9f0 	bl	800168c <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000035c 	.word	0x2000035c
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <MX_GPIO_Init+0x110>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <MX_GPIO_Init+0x110>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_GPIO_Init+0x110>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <MX_GPIO_Init+0x110>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a37      	ldr	r2, [pc, #220]	; (80013cc <MX_GPIO_Init+0x110>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <MX_GPIO_Init+0x110>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <MX_GPIO_Init+0x110>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a31      	ldr	r2, [pc, #196]	; (80013cc <MX_GPIO_Init+0x110>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_GPIO_Init+0x110>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_GPIO_Init+0x110>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <MX_GPIO_Init+0x110>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_GPIO_Init+0x110>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0x110>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a25      	ldr	r2, [pc, #148]	; (80013cc <MX_GPIO_Init+0x110>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_GPIO_Init+0x110>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2120      	movs	r1, #32
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <MX_GPIO_Init+0x114>)
 8001350:	f002 fc30 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135a:	481e      	ldr	r0, [pc, #120]	; (80013d4 <MX_GPIO_Init+0x118>)
 800135c:	f002 fc2a 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_GPIO_Init+0x11c>)
 8001368:	f002 fc24 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800136c:	2320      	movs	r3, #32
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_GPIO_Init+0x114>)
 8001384:	f002 fa6a 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0x118>)
 80013a2:	f002 fa5b 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_GPIO_Init+0x11c>)
 80013c0:	f002 fa4c 	bl	800385c <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800

080013dc <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80013e4:	f004 f852 	bl	800548c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 80013e8:	f000 fc20 	bl	8001c2c <tcpclient_init>
  for (;;) {
    osDelay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f004 ffc7 	bl	8006380 <osDelay>
 80013f2:	e7fb      	b.n	80013ec <start_conn_handler+0x10>

080013f4 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af06      	add	r7, sp, #24
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */
  /* Infinite loop */
  for(;;)
  {
    set_idx(motor_dir);
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <start_motor_control+0x44>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fb29 	bl	8001a58 <set_idx>
    DC_MOTOR_Start(DC_MOTOR_CfgParam[0], motor_dir, motor_speed);
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <start_motor_control+0x44>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <start_motor_control+0x48>)
 800140c:	8819      	ldrh	r1, [r3, #0]
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <start_motor_control+0x4c>)
 8001410:	9104      	str	r1, [sp, #16]
 8001412:	9203      	str	r2, [sp, #12]
 8001414:	466c      	mov	r4, sp
 8001416:	f103 0210 	add.w	r2, r3, #16
 800141a:	ca07      	ldmia	r2, {r0, r1, r2}
 800141c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001422:	f000 f8bc 	bl	800159e <DC_MOTOR_Start>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <start_motor_control+0x50>)
 800142c:	f002 fbdb 	bl	8003be6 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f004 ffa5 	bl	8006380 <osDelay>
  {
 8001436:	e7e1      	b.n	80013fc <start_motor_control+0x8>
 8001438:	200003b8 	.word	0x200003b8
 800143c:	200003ba 	.word	0x200003ba
 8001440:	0801d6fc 	.word	0x0801d6fc
 8001444:	40020400 	.word	0x40020400

08001448 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 8001450:	f004 f812 	bl	8005478 <get_static_netif>
 8001454:	4603      	mov	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f004 fbb9 	bl	8005bd0 <ethernetif_input>
  sys_check_timeouts();
 800145e:	f013 f96d 	bl	801473c <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f004 ff8c 	bl	8006380 <osDelay>
 8001468:	e7fb      	b.n	8001462 <start_tcp_thread+0x1a>
	...

0800146c <start_control_systems>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_systems */
void start_control_systems(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_control_systems */
  float *linear_x_ptr = get_linear_x();
 8001474:	f000 fb00 	bl	8001a78 <get_linear_x>
 8001478:	4603      	mov	r3, r0
 800147a:	613b      	str	r3, [r7, #16]
  float *angular_z_ptr = get_angular_z();
 800147c:	f000 fb06 	bl	8001a8c <get_angular_z>
 8001480:	4603      	mov	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	float angular_z = *angular_z_ptr;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	617b      	str	r3, [r7, #20]
	if (angular_z > 0) {
 800148a:	edd7 7a05 	vldr	s15, [r7, #20]
 800148e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dd03      	ble.n	80014a0 <start_control_systems+0x34>
		motor_dir = DIR_ACW;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <start_control_systems+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e008      	b.n	80014b2 <start_control_systems+0x46>
	} else {
		motor_dir = DIR_CW;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <start_control_systems+0x98>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
		angular_z *= -1;
 80014a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014aa:	eef1 7a67 	vneg.f32	s15, s15
 80014ae:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (angular_z >= 1){
 80014b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	db02      	blt.n	80014ca <start_control_systems+0x5e>
		angular_z = 1;
 80014c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014c8:	617b      	str	r3, [r7, #20]
	}
	motor_speed = 65535*angular_z;
 80014ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001508 <start_control_systems+0x9c>
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	ee17 3a90 	vmov	r3, s15
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <start_control_systems+0xa0>)
 80014e2:	801a      	strh	r2, [r3, #0]
    int m = (*linear_x_ptr) * 100;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001510 <start_control_systems+0xa4>
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f6:	ee17 3a90 	vmov	r3, s15
 80014fa:	60bb      	str	r3, [r7, #8]

    osDelay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f004 ff3f 	bl	8006380 <osDelay>
  {
 8001502:	e7bf      	b.n	8001484 <start_control_systems+0x18>
 8001504:	200003b8 	.word	0x200003b8
 8001508:	477fff00 	.word	0x477fff00
 800150c:	200003ba 	.word	0x200003ba
 8001510:	42c80000 	.word	0x42c80000

08001514 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001526:	f000 fe6f 	bl	8002208 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800152e:	2300      	movs	r3, #0
 8001530:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MPU_Config+0x58>)
 8001534:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001536:	230e      	movs	r3, #14
 8001538:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800153a:	2300      	movs	r3, #0
 800153c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800153e:	2301      	movs	r3, #1
 8001540:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001542:	2303      	movs	r3, #3
 8001544:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001546:	2301      	movs	r3, #1
 8001548:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001556:	463b      	mov	r3, r7
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fe8d 	bl	8002278 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800155e:	2004      	movs	r0, #4
 8001560:	f000 fe6a 	bl	8002238 <HAL_MPU_Enable>

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20010000 	.word	0x20010000

08001570 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001582:	f000 fd1b 	bl	8001fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40010000 	.word	0x40010000

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>

0800159e <DC_MOTOR_Start>:
	HAL_TIM_MspPostInit(&htim);

	//Start PWM
	HAL_TIM_PWM_Start(&htim, au8_MOTOR_Instance.PWM_TIM_CH);
}
void DC_MOTOR_Start(DC_MOTOR_CfgType au8_MOTOR_Instance,uint8_t au8_DIR,uint16_t au16_SPEED){
 800159e:	b084      	sub	sp, #16
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f107 0c08 	add.w	ip, r7, #8
 80015a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Write to Direction PIN

	if(au8_DIR == DIR_CW){
 80015ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d106      	bne.n	80015c2 <DC_MOTOR_Start+0x24>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 1);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	89b9      	ldrh	r1, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fafa 	bl	8003bb4 <HAL_GPIO_WritePin>
 80015c0:	e009      	b.n	80015d6 <DC_MOTOR_Start+0x38>

	}
	else if(au8_DIR == DIR_ACW){
 80015c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <DC_MOTOR_Start+0x38>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 0);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	89b9      	ldrh	r1, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 faef 	bl	8003bb4 <HAL_GPIO_WritePin>
	}

	//Write Speed -> Duty Cycle Register
	if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_1){
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d103      	bne.n	80015e4 <DC_MOTOR_Start+0x46>
		au8_MOTOR_Instance.TIM_Instance->CCR1 = au16_SPEED;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
	}
}
 80015e2:	e005      	b.n	80015f0 <DC_MOTOR_Start+0x52>
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d102      	bne.n	80015f0 <DC_MOTOR_Start+0x52>
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f8:	b004      	add	sp, #16
 80015fa:	4770      	bx	lr

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_MspInit+0x4c>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fdbb 	bl	80021b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_TIM_PWM_MspInit+0x38>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d10b      	bne.n	8001676 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_TIM_PWM_MspInit+0x3c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_TIM_PWM_MspInit+0x3c>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_TIM_PWM_MspInit+0x3c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40000400 	.word	0x40000400
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_TIM_MspPostInit+0x64>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d11b      	bne.n	80016e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_TIM_MspPostInit+0x6c>)
 80016e2:	f002 f8bb 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40000400 	.word	0x40000400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_InitTick+0xd0>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <HAL_InitTick+0xd0>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6453      	str	r3, [r2, #68]	; 0x44
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_InitTick+0xd0>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f002 ff3a 	bl	80045a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001734:	f002 ff24 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8001738:	4603      	mov	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <HAL_InitTick+0xd4>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	3b01      	subs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_InitTick+0xd8>)
 800174e:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_InitTick+0xdc>)
 8001750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_InitTick+0xd8>)
 8001754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001758:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_InitTick+0xd8>)
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_InitTick+0xd8>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_InitTick+0xd8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_InitTick+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001772:	4818      	ldr	r0, [pc, #96]	; (80017d4 <HAL_InitTick+0xd8>)
 8001774:	f002 ff4a 	bl	800460c <HAL_TIM_Base_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800177e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11b      	bne.n	80017be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001786:	4813      	ldr	r0, [pc, #76]	; (80017d4 <HAL_InitTick+0xd8>)
 8001788:	f002 ffa2 	bl	80046d0 <HAL_TIM_Base_Start_IT>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001796:	2b00      	cmp	r3, #0
 8001798:	d111      	bne.n	80017be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800179a:	2019      	movs	r0, #25
 800179c:	f000 fd26 	bl	80021ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	d808      	bhi.n	80017b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017a6:	2200      	movs	r2, #0
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	2019      	movs	r0, #25
 80017ac:	f000 fd02 	bl	80021b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_InitTick+0xe0>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e002      	b.n	80017be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3730      	adds	r7, #48	; 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	200003bc 	.word	0x200003bc
 80017d8:	40010000 	.word	0x40010000
 80017dc:	20000004 	.word	0x20000004

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001812:	f003 f82c 	bl	800486e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200003bc 	.word	0x200003bc

08001820 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <ETH_IRQHandler+0x10>)
 8001826:	f001 f945 	bl	8002ab4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20004fec 	.word	0x20004fec

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <_kill+0x20>)
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20011d00 	.word	0x20011d00

08001868 <_exit>:

void _exit (int status)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffe5 	bl	8001844 <_kill>
	while (1) {}		/* Make sure we hang here */
 800187a:	e7fe      	b.n	800187a <_exit+0x12>

0800187c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e00a      	b.n	80018a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800188e:	f3af 8000 	nop.w
 8001892:	4601      	mov	r1, r0
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	b2ca      	uxtb	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf0      	blt.n	800188e <_read+0x12>
	}

return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e009      	b.n	80018dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60ba      	str	r2, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf1      	blt.n	80018c8 <_write+0x12>
	}
	return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_close>:

int _close(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	return -1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001916:	605a      	str	r2, [r3, #4]
	return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_isatty>:

int _isatty(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	return 1;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d205      	bcs.n	8001994 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <_sbrk+0x6c>)
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001992:	e009      	b.n	80019a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20050000 	.word	0x20050000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	20000408 	.word	0x20000408
 80019c0:	20011d08 	.word	0x20011d08
 80019c4:	20011d00 	.word	0x20011d00

080019c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <SystemInit+0x24>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	4a06      	ldr	r2, [pc, #24]	; (80019ec <SystemInit+0x24>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SystemInit+0x28>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	40023800 	.word	0x40023800

080019f4 <fun>:
int indx = 0;
float linear_x=0, angular_z=0;


float *fun(char string[])
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    static float res[10];
    char *token;
    int count=0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
    token = strtok(string,",");
 8001a00:	4913      	ldr	r1, [pc, #76]	; (8001a50 <fun+0x5c>)
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f016 fcfe 	bl	8018404 <strtok>
 8001a08:	6178      	str	r0, [r7, #20]
    float x;
    // res[0] = atof(token);
    while (token)
 8001a0a:	e018      	b.n	8001a3e <fun+0x4a>
    {
        x = atof(token);
 8001a0c:	6978      	ldr	r0, [r7, #20]
 8001a0e:	f015 fb79 	bl	8017104 <atof>
 8001a12:	ec53 2b10 	vmov	r2, r3, d0
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f8c7 	bl	8000bac <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60fb      	str	r3, [r7, #12]
        res[count] = x;
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <fun+0x60>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
        // printf("%f ",x);
        count+=1;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3301      	adds	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
        token = strtok(NULL,",");
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <fun+0x5c>)
 8001a36:	2000      	movs	r0, #0
 8001a38:	f016 fce4 	bl	8018404 <strtok>
 8001a3c:	6178      	str	r0, [r7, #20]
    while (token)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e3      	bne.n	8001a0c <fun+0x18>
    }
    return res;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <fun+0x60>)
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0801a54c 	.word	0x0801a54c
 8001a54:	200005bc 	.word	0x200005bc

08001a58 <set_idx>:

// Function to send the data to the server
void tcpsend (char *data);

void set_idx(int ix) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	indx = ix;
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <set_idx+0x1c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200005ac 	.word	0x200005ac

08001a78 <get_linear_x>:

float *get_linear_x() {
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
    return &linear_x;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <get_linear_x+0x10>)
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	200005b0 	.word	0x200005b0

08001a8c <get_angular_z>:

float *get_angular_z() {
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	return &angular_z;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <get_angular_z+0x10>)
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	200005b4 	.word	0x200005b4

08001aa0 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2010      	movs	r0, #16
 8001aae:	f008 fb83 	bl	800a1b8 <netconn_new_with_proto_and_callback>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a39      	ldr	r2, [pc, #228]	; (8001b9c <tcpinit_thread+0xfc>)
 8001ab6:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8001ab8:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <tcpinit_thread+0xfc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d068      	beq.n	8001b92 <tcpinit_thread+0xf2>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <tcpinit_thread+0xfc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <tcpinit_thread+0x100>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f008 fc2f 	bl	800a32c <netconn_bind>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d156      	bne.n	8001b88 <tcpinit_thread+0xe8>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <tcpinit_thread+0x104>)
 8001adc:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <tcpinit_thread+0x108>)
 8001ade:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <tcpinit_thread+0x10c>)
 8001ae2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ae6:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <tcpinit_thread+0xfc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <tcpinit_thread+0x10c>)
 8001aee:	8812      	ldrh	r2, [r2, #0]
 8001af0:	492c      	ldr	r1, [pc, #176]	; (8001ba4 <tcpinit_thread+0x104>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f008 fc52 	bl	800a39c <netconn_connect>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8001afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d136      	bne.n	8001b72 <tcpinit_thread+0xd2>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <tcpinit_thread+0x110>)
 8001b06:	f015 fa49 	bl	8016f9c <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <tcpinit_thread+0xfc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4929      	ldr	r1, [pc, #164]	; (8001bb4 <tcpinit_thread+0x114>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f008 fddf 	bl	800a6d4 <netconn_recv>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f6      	bne.n	8001b0a <tcpinit_thread+0x6a>

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <tcpinit_thread+0x114>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <tcpinit_thread+0x114>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	895b      	ldrh	r3, [r3, #10]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4822      	ldr	r0, [pc, #136]	; (8001bb8 <tcpinit_thread+0x118>)
 8001b30:	f015 fe25 	bl	801777e <strncpy>

							float *linx = fun(msgc);
 8001b34:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <tcpinit_thread+0x118>)
 8001b36:	f7ff ff5d 	bl	80019f4 <fun>
 8001b3a:	60b8      	str	r0, [r7, #8]
							linear_x = *(linx);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <tcpinit_thread+0x11c>)
 8001b42:	6013      	str	r3, [r2, #0]
							angular_z = *(linx+1);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <tcpinit_thread+0x120>)
 8001b4a:	6013      	str	r3, [r2, #0]
//							sys_arch_sem_wait(&tcpsem, 5);
//
//							// send the data to the TCP Server
//							tcpsend (smsgc);

							memset (msgc, '\0', 100);  // clear the buffer
 8001b4c:	2264      	movs	r2, #100	; 0x64
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <tcpinit_thread+0x118>)
 8001b52:	f015 fc30 	bl	80173b6 <memset>
						}
						while (netbuf_next(buf) > 0);
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <tcpinit_thread+0x114>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00a fa68 	bl	800c030 <netbuf_next>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	dcda      	bgt.n	8001b1c <tcpinit_thread+0x7c>

						netbuf_delete(buf);
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <tcpinit_thread+0x114>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00a fa40 	bl	800bff0 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001b70:	e7cb      	b.n	8001b0a <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <tcpinit_thread+0xfc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f008 ff1a 	bl	800a9b0 <netconn_close>
				netconn_delete(conn);
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <tcpinit_thread+0xfc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f008 fbb7 	bl	800a2f4 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001b86:	e004      	b.n	8001b92 <tcpinit_thread+0xf2>
			netconn_delete(conn);
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <tcpinit_thread+0xfc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f008 fbb1 	bl	800a2f4 <netconn_delete>
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000040c 	.word	0x2000040c
 8001ba0:	0801d8d0 	.word	0x0801d8d0
 8001ba4:	20000414 	.word	0x20000414
 8001ba8:	01002a0a 	.word	0x01002a0a
 8001bac:	20000418 	.word	0x20000418
 8001bb0:	200005b8 	.word	0x200005b8
 8001bb4:	20000410 	.word	0x20000410
 8001bb8:	2000041c 	.word	0x2000041c
 8001bbc:	200005b0 	.word	0x200005b0
 8001bc0:	200005b4 	.word	0x200005b4

08001bc4 <tcpsend>:

void tcpsend (char *data)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <tcpsend+0x30>)
 8001bce:	681c      	ldr	r4, [r3, #0]
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7fe fb1d 	bl	8000210 <strlen>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4620      	mov	r0, r4
 8001be2:	f008 fde3 	bl	800a7ac <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 8001be6:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <tcpsend+0x34>)
 8001be8:	f015 f9d8 	bl	8016f9c <sys_sem_signal>
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	2000040c 	.word	0x2000040c
 8001bf8:	200005b8 	.word	0x200005b8

08001bfc <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <tcpsend_thread+0x24>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4906      	ldr	r1, [pc, #24]	; (8001c24 <tcpsend_thread+0x28>)
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <tcpsend_thread+0x2c>)
 8001c0e:	f015 fd3f 	bl	8017690 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
//		sys_arch_sem_wait(&tcpsem, 5);
		// send the data to the server
		tcpsend(smsgc);
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <tcpsend_thread+0x2c>)
 8001c14:	f7ff ffd6 	bl	8001bc4 <tcpsend>
		osDelay(1);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f004 fbb1 	bl	8006380 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx);
 8001c1e:	e7f1      	b.n	8001c04 <tcpsend_thread+0x8>
 8001c20:	200005ac 	.word	0x200005ac
 8001c24:	0801a550 	.word	0x0801a550
 8001c28:	200004e4 	.word	0x200004e4

08001c2c <tcpclient_init>:




void tcpclient_init (void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <tcpclient_init+0x3c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f015 f959 	bl	8016ef0 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001c3e:	2318      	movs	r3, #24
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c46:	2200      	movs	r2, #0
 8001c48:	4908      	ldr	r1, [pc, #32]	; (8001c6c <tcpclient_init+0x40>)
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <tcpclient_init+0x44>)
 8001c4c:	f015 fa1c 	bl	8017088 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001c50:	2318      	movs	r3, #24
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4906      	ldr	r1, [pc, #24]	; (8001c74 <tcpclient_init+0x48>)
 8001c5c:	4806      	ldr	r0, [pc, #24]	; (8001c78 <tcpclient_init+0x4c>)
 8001c5e:	f015 fa13 	bl	8017088 <sys_thread_new>
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200005b8 	.word	0x200005b8
 8001c6c:	08001aa1 	.word	0x08001aa1
 8001c70:	0801a564 	.word	0x0801a564
 8001c74:	08001bfd 	.word	0x08001bfd
 8001c78:	0801a574 	.word	0x0801a574

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c82:	490e      	ldr	r1, [pc, #56]	; (8001cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c98:	4c0b      	ldr	r4, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff fe8f 	bl	80019c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f015 fb25 	bl	80172f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff f9ef 	bl	8001090 <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001cc0:	0801ddd8 	.word	0x0801ddd8
  ldr r2, =_sbss
 8001cc4:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001cc8:	20011d04 	.word	0x20011d04

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>

08001cce <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <LAN8742_RegisterBusIO+0x28>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <LAN8742_RegisterBusIO+0x28>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <LAN8742_RegisterBusIO+0x28>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfa:	e014      	b.n	8001d26 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d17c      	bne.n	8001e4c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e01c      	b.n	8001da6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f107 0208 	add.w	r2, r7, #8
 8001d74:	2112      	movs	r1, #18
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	4798      	blx	r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da03      	bge.n	8001d88 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001d80:	f06f 0304 	mvn.w	r3, #4
 8001d84:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001d86:	e00b      	b.n	8001da0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d105      	bne.n	8001da0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
         break;
 8001d9e:	e005      	b.n	8001dac <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b1f      	cmp	r3, #31
 8001daa:	d9df      	bls.n	8001d6c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b1f      	cmp	r3, #31
 8001db2:	d902      	bls.n	8001dba <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001db4:	f06f 0302 	mvn.w	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d145      	bne.n	8001e4c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6810      	ldr	r0, [r2, #0]
 8001dc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db37      	blt.n	8001e46 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6810      	ldr	r0, [r2, #0]
 8001dde:	f107 0208 	add.w	r2, r7, #8
 8001de2:	2100      	movs	r1, #0
 8001de4:	4798      	blx	r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db28      	blt.n	8001e3e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4798      	blx	r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001df6:	e01c      	b.n	8001e32 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4798      	blx	r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e0a:	d80e      	bhi.n	8001e2a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6810      	ldr	r0, [r2, #0]
 8001e14:	f107 0208 	add.w	r2, r7, #8
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4798      	blx	r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da07      	bge.n	8001e32 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001e22:	f06f 0304 	mvn.w	r3, #4
 8001e26:	613b      	str	r3, [r7, #16]
                 break;
 8001e28:	e010      	b.n	8001e4c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001e2a:	f06f 0301 	mvn.w	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
               break;
 8001e30:	e00c      	b.n	8001e4c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1dd      	bne.n	8001df8 <LAN8742_Init+0xc6>
 8001e3c:	e006      	b.n	8001e4c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001e3e:	f06f 0304 	mvn.w	r3, #4
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e002      	b.n	8001e4c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001e46:	f06f 0303 	mvn.w	r3, #3
 8001e4a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d112      	bne.n	8001e78 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	4798      	blx	r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001e5c:	bf00      	nop
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4798      	blx	r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e70:	d9f5      	bls.n	8001e5e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001e78:	693b      	ldr	r3, [r7, #16]
 }
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6810      	ldr	r0, [r2, #0]
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	4798      	blx	r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da02      	bge.n	8001eaa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ea4:	f06f 0304 	mvn.w	r3, #4
 8001ea8:	e06e      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6810      	ldr	r0, [r2, #0]
 8001eb2:	f107 020c 	add.w	r2, r7, #12
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4798      	blx	r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da02      	bge.n	8001ec6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ec0:	f06f 0304 	mvn.w	r3, #4
 8001ec4:	e060      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e059      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6810      	ldr	r0, [r2, #0]
 8001edc:	f107 020c 	add.w	r2, r7, #12
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da02      	bge.n	8001ef0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001eea:	f06f 0304 	mvn.w	r3, #4
 8001eee:	e04b      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11b      	bne.n	8001f32 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <LAN8742_GetLinkState+0x90>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e03a      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e033      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e02c      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e02a      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6810      	ldr	r0, [r2, #0]
 8001f3a:	f107 020c 	add.w	r2, r7, #12
 8001f3e:	211f      	movs	r1, #31
 8001f40:	4798      	blx	r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da02      	bge.n	8001f4e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f48:	f06f 0304 	mvn.w	r3, #4
 8001f4c:	e01c      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f58:	2306      	movs	r3, #6
 8001f5a:	e015      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 031c 	and.w	r3, r3, #28
 8001f62:	2b18      	cmp	r3, #24
 8001f64:	d101      	bne.n	8001f6a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f66:	2302      	movs	r3, #2
 8001f68:	e00e      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 031c 	and.w	r3, r3, #28
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d101      	bne.n	8001f78 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e007      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 031c 	and.w	r3, r3, #28
 8001f7e:	2b14      	cmp	r3, #20
 8001f80:	d101      	bne.n	8001f86 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f82:	2304      	movs	r3, #4
 8001f84:	e000      	b.n	8001f88 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f86:	2305      	movs	r3, #5
    }				
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_Init+0x28>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_Init+0x28>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f8fc 	bl	800219e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f7ff fba8 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fb26 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	200005e4 	.word	0x200005e4

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200005e4 	.word	0x200005e4

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d005      	beq.n	8002022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_Delay+0x44>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002022:	bf00      	nop
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	429a      	cmp	r2, r3
 8002032:	d8f7      	bhi.n	8002024 <HAL_Delay+0x28>
  {
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000008 	.word	0x20000008

08002044 <__NVIC_SetPriorityGrouping>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <__NVIC_SetPriorityGrouping+0x40>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	4313      	orrs	r3, r2
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x40>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00
 8002088:	05fa0000 	.word	0x05fa0000

0800208c <__NVIC_GetPriorityGrouping>:
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff4c 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c6:	f7ff ff61 	bl	800208c <__NVIC_GetPriorityGrouping>
 80021ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7ff ffb1 	bl	8002138 <NVIC_EncodePriority>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff80 	bl	80020e4 <__NVIC_SetPriority>
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff54 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800220c:	f3bf 8f5f 	dmb	sy
}
 8002210:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_MPU_Disable+0x28>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_MPU_Disable+0x28>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_MPU_Disable+0x2c>)
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	e000ed90 	.word	0xe000ed90

08002238 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_MPU_Enable+0x38>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_MPU_Enable+0x3c>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_MPU_Enable+0x3c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002256:	f3bf 8f4f 	dsb	sy
}
 800225a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800225c:	f3bf 8f6f 	isb	sy
}
 8002260:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed90 	.word	0xe000ed90
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	785a      	ldrb	r2, [r3, #1]
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_MPU_ConfigRegion+0x84>)
 8002286:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d029      	beq.n	80022e4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002290:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_MPU_ConfigRegion+0x84>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7b1b      	ldrb	r3, [r3, #12]
 800229c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7adb      	ldrb	r3, [r3, #11]
 80022a2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a9b      	ldrb	r3, [r3, #10]
 80022aa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7b5b      	ldrb	r3, [r3, #13]
 80022b2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b9b      	ldrb	r3, [r3, #14]
 80022ba:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7bdb      	ldrb	r3, [r3, #15]
 80022c2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7a5b      	ldrb	r3, [r3, #9]
 80022ca:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7a1b      	ldrb	r3, [r3, #8]
 80022d2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022d4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022de:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022e0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80022e2:	e005      	b.n	80022f0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_MPU_ConfigRegion+0x84>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_MPU_ConfigRegion+0x84>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed90 	.word	0xe000ed90

08002300 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06a      	b.n	80023e8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2223      	movs	r2, #35	; 0x23
 8002320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f003 fcd3 	bl	8005cd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_ETH_Init+0xf0>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <HAL_ETH_Init+0xf0>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_ETH_Init+0xf0>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_ETH_Init+0xf4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_ETH_Init+0xf4>)
 8002348:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800234c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_ETH_Init+0xf4>)
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4927      	ldr	r1, [pc, #156]	; (80023f4 <HAL_ETH_Init+0xf4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_ETH_Init+0xf4>)
 800235e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002378:	f7ff fe34 	bl	8001fe4 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800237e:	e011      	b.n	80023a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002380:	f7ff fe30 	bl	8001fe4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800238e:	d909      	bls.n	80023a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2204      	movs	r2, #4
 8002394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	22e0      	movs	r2, #224	; 0xe0
 800239c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e021      	b.n	80023e8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e4      	bne.n	8002380 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 ffac 	bl	8003314 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f001 f853 	bl	8003468 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f001 f8a9 	bl	800351a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	461a      	mov	r2, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 f811 	bl	80033f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2210      	movs	r2, #16
 80023e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800

080023f8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	2b10      	cmp	r3, #16
 8002408:	d150      	bne.n	80024ac <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2223      	movs	r2, #35	; 0x23
 800240e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa7b 	bl	8002914 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0208 	orr.w	r2, r2, #8
 800242c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fde0 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0204 	orr.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fdcd 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fdf3 	bl	8003056 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002486:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800249e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2223      	movs	r2, #35	; 0x23
 80024a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d17b      	bne.n	80025c2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2223      	movs	r2, #35	; 0x23
 80024ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_ETH_Start_IT+0x114>)
 80024f6:	430b      	orrs	r3, r1
 80024f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800250c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2204      	movs	r2, #4
 8002514:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9fc 	bl	8002914 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002534:	2001      	movs	r0, #1
 8002536:	f7ff fd61 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0204 	orr.w	r2, r2, #4
 8002550:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff fd4e 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fd74 	bl	8003056 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002584:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800259c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a6:	69d9      	ldr	r1, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_ETH_Start_IT+0x118>)
 80025ae:	430b      	orrs	r3, r1
 80025b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025b4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2223      	movs	r2, #35	; 0x23
 80025ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	00020060 	.word	0x00020060
 80025d0:	0001a0c1 	.word	0x0001a0c1

080025d4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e2:	2b23      	cmp	r3, #35	; 0x23
 80025e4:	d16e      	bne.n	80026c4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2223      	movs	r2, #35	; 0x23
 80025ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_ETH_Stop_IT+0xfc>)
 80025fe:	400b      	ands	r3, r1
 8002600:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002604:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800261c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002634:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0204 	bic.w	r2, r2, #4
 8002644:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800264e:	2001      	movs	r0, #1
 8002650:	f7ff fcd4 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fcfa 	bl	8003056 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fcbe 	bl	8001ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e00e      	b.n	80026ac <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	3212      	adds	r2, #18
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d9ed      	bls.n	800268e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2210      	movs	r2, #16
 80026bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	fffe5f3e 	.word	0xfffe5f3e

080026d4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e045      	b.n	8002784 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fe:	2b23      	cmp	r3, #35	; 0x23
 8002700:	d13f      	bne.n	8002782 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800270a:	2201      	movs	r2, #1
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ff70 	bl	80035f4 <ETH_Prepare_Tx_Descriptors>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f043 0202 	orr.w	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02a      	b.n	8002784 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800272e:	f3bf 8f4f 	dsb	sy
}
 8002732:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	2b03      	cmp	r3, #3
 8002744:	d904      	bls.n	8002750 <HAL_ETH_Transmit_IT+0x7c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	1f1a      	subs	r2, r3, #4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276a:	461a      	mov	r2, r3
 800276c:	2304      	movs	r3, #4
 800276e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002778:	461a      	mov	r2, r3
 800277a:	2300      	movs	r3, #0
 800277c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0a8      	b.n	800290a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027be:	2b23      	cmp	r3, #35	; 0x23
 80027c0:	d001      	beq.n	80027c6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0a1      	b.n	800290a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	3212      	adds	r2, #18
 80027d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027dc:	f1c3 0304 	rsb	r3, r3, #4
 80027e0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027e2:	e06a      	b.n	80028ba <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <HAL_ETH_ReadData+0x88>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d040      	beq.n	8002896 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002848:	3b04      	subs	r3, #4
 800284a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002870:	461a      	mov	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f003 fbf7 	bl	8006068 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	441a      	add	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d902      	bls.n	80028a8 <HAL_ETH_ReadData+0x11c>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b04      	subs	r3, #4
 80028a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	3212      	adds	r2, #18
 80028ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db06      	blt.n	80028d0 <HAL_ETH_ReadData+0x144>
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d202      	bcs.n	80028d0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d089      	beq.n	80027e4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	441a      	add	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f815 	bl	8002914 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002920:	2301      	movs	r3, #1
 8002922:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002928:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	3212      	adds	r2, #18
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800293c:	e040      	b.n	80029c0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d112      	bne.n	800296c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fb5c 	bl	8006008 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	74fb      	strb	r3, [r7, #19]
 800295a:	e007      	b.n	800296c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	461a      	mov	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d026      	beq.n	80029c0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <ETH_UpdateDescriptor+0xe4>)
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	e003      	b.n	800298a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002988:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 800298a:	f3bf 8f5f 	dmb	sy
}
 800298e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	3301      	adds	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d902      	bls.n	80029ae <ETH_UpdateDescriptor+0x9a>
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3b04      	subs	r3, #4
 80029ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	3212      	adds	r2, #18
 80029b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	3b01      	subs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <ETH_UpdateDescriptor+0xb8>
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1b8      	bne.n	800293e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d00c      	beq.n	80029f0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029de:	461a      	mov	r2, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80029f0:	bf00      	nop
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	800045f8 	.word	0x800045f8

080029fc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3318      	adds	r3, #24
 8002a08:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a1a:	e03f      	b.n	8002a9c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d028      	beq.n	8002a9c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db1b      	blt.n	8002a98 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3304      	adds	r3, #4
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fb3d 	bl	80060ec <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	3304      	adds	r3, #4
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	3301      	adds	r3, #1
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a96:	e001      	b.n	8002a9c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_ETH_ReleaseTxPacket+0xac>
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1b9      	bne.n	8002a1c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d112      	bne.n	8002af4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d109      	bne.n	8002af4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_ETH_IRQHandler+0x178>)
 8002aec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f002 fe50 	bl	8005794 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d113      	bne.n	8002b2e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10a      	bne.n	8002b2e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b20:	461a      	mov	r2, r3
 8002b22:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002b26:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f002 fe43 	bl	80057b4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b40:	d14c      	bne.n	8002bdc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b54:	d142      	bne.n	8002bdc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f043 0208 	orr.w	r2, r3, #8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b78:	d11a      	bne.n	8002bb0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_ETH_IRQHandler+0x17c>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ba4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	22e0      	movs	r2, #224	; 0xe0
 8002baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002bae:	e012      	b.n	8002bd6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	f248 6380 	movw	r3, #34432	; 0x8680
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f248 6380 	movw	r3, #34432	; 0x8680
 8002bd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f002 fdfc 	bl	80057d4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d10e      	bne.n	8002c08 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f81c 	bl	8002c38 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_ETH_IRQHandler+0x180>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d006      	beq.n	8002c22 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_ETH_IRQHandler+0x180>)
 8002c16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c1a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f815 	bl	8002c4c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	00010040 	.word	0x00010040
 8002c30:	007e2000 	.word	0x007e2000
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 031c 	and.w	r3, r3, #28
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	02db      	lsls	r3, r3, #11
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	019b      	lsls	r3, r3, #6
 8002c8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f023 0302 	bic.w	r3, r3, #2
 8002c9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002cb0:	f7ff f998 	bl	8001fe4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cb6:	e00d      	b.n	8002cd4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002cb8:	f7ff f994 	bl	8001fe4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d301      	bcc.n	8002ccc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e010      	b.n	8002cee <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ec      	bne.n	8002cb8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 031c 	and.w	r3, r3, #28
 8002d12:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	02db      	lsls	r3, r3, #11
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	019b      	lsls	r3, r3, #6
 8002d24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d50:	f7ff f948 	bl	8001fe4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d56:	e00d      	b.n	8002d74 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002d58:	f7ff f944 	bl	8001fe4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d301      	bcc.n	8002d6c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e009      	b.n	8002d80 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1ec      	bne.n	8002d58 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d9      	b.n	8002f50 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e00b      	b.n	8002f88 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d105      	bne.n	8002f86 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f88f 	bl	80030a0 <ETH_SetMACConfig>

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 031c 	bic.w	r3, r3, #28
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fa8:	f001 fade 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8002fac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_ETH_SetMDIOClockRange+0x38>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d804      	bhi.n	8002fc8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e027      	b.n	8003018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d908      	bls.n	8002fe2 <HAL_ETH_SetMDIOClockRange+0x52>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	; (8003030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d204      	bcs.n	8002fe2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 030c 	orr.w	r3, r3, #12
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e01a      	b.n	8003018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4a12      	ldr	r2, [pc, #72]	; (8003030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d303      	bcc.n	8002ff2 <HAL_ETH_SetMDIOClockRange+0x62>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d911      	bls.n	8003016 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d908      	bls.n	800300c <HAL_ETH_SetMDIOClockRange+0x7c>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d804      	bhi.n	800300c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e005      	b.n	8003018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f043 0310 	orr.w	r3, r3, #16
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e000      	b.n	8003018 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003016:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	611a      	str	r2, [r3, #16]
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	01312cff 	.word	0x01312cff
 800302c:	02160ebf 	.word	0x02160ebf
 8003030:	03938700 	.word	0x03938700
 8003034:	05f5e0ff 	.word	0x05f5e0ff
 8003038:	08f0d17f 	.word	0x08f0d17f

0800303c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003074:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003078:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003086:	2001      	movs	r0, #1
 8003088:	f7fe ffb8 	bl	8001ffc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003096:	6193      	str	r3, [r2, #24]
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4b51      	ldr	r3, [pc, #324]	; (80031fc <ETH_SetMACConfig+0x15c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	7c1b      	ldrb	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <ETH_SetMACConfig+0x28>
 80030c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030c6:	e000      	b.n	80030ca <ETH_SetMACConfig+0x2a>
 80030c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	7c5b      	ldrb	r3, [r3, #17]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <ETH_SetMACConfig+0x38>
 80030d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d6:	e000      	b.n	80030da <ETH_SetMACConfig+0x3a>
 80030d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	7fdb      	ldrb	r3, [r3, #31]
 80030e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80030e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	7f92      	ldrb	r2, [r2, #30]
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	d102      	bne.n	80030fe <ETH_SetMACConfig+0x5e>
 80030f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030fc:	e000      	b.n	8003100 <ETH_SetMACConfig+0x60>
 80030fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8003100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	7f1b      	ldrb	r3, [r3, #28]
 8003106:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003108:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800310e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800311e:	2a00      	cmp	r2, #0
 8003120:	d102      	bne.n	8003128 <ETH_SetMACConfig+0x88>
 8003122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003126:	e000      	b.n	800312a <ETH_SetMACConfig+0x8a>
 8003128:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800312a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	7bdb      	ldrb	r3, [r3, #15]
 8003130:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003132:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003138:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003140:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003142:	4313      	orrs	r3, r2
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fe ff4e 	bl	8001ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003176:	4013      	ands	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003186:	2a00      	cmp	r2, #0
 8003188:	d101      	bne.n	800318e <ETH_SetMACConfig+0xee>
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	e000      	b.n	8003190 <ETH_SetMACConfig+0xf0>
 800318e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003190:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800319e:	2a01      	cmp	r2, #1
 80031a0:	d101      	bne.n	80031a6 <ETH_SetMACConfig+0x106>
 80031a2:	2208      	movs	r2, #8
 80031a4:	e000      	b.n	80031a8 <ETH_SetMACConfig+0x108>
 80031a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80031a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80031b0:	2a01      	cmp	r2, #1
 80031b2:	d101      	bne.n	80031b8 <ETH_SetMACConfig+0x118>
 80031b4:	2204      	movs	r2, #4
 80031b6:	e000      	b.n	80031ba <ETH_SetMACConfig+0x11a>
 80031b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80031c2:	2a01      	cmp	r2, #1
 80031c4:	d101      	bne.n	80031ca <ETH_SetMACConfig+0x12a>
 80031c6:	2202      	movs	r2, #2
 80031c8:	e000      	b.n	80031cc <ETH_SetMACConfig+0x12c>
 80031ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031cc:	4313      	orrs	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f7fe ff09 	bl	8001ffc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	ff20810f 	.word	0xff20810f

08003200 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <ETH_SetDMAConfig+0x110>)
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	7b1b      	ldrb	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <ETH_SetDMAConfig+0x2c>
 8003226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800322a:	e000      	b.n	800322e <ETH_SetDMAConfig+0x2e>
 800322c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	7b5b      	ldrb	r3, [r3, #13]
 8003232:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003234:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	7f52      	ldrb	r2, [r2, #29]
 800323a:	2a00      	cmp	r2, #0
 800323c:	d102      	bne.n	8003244 <ETH_SetDMAConfig+0x44>
 800323e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003242:	e000      	b.n	8003246 <ETH_SetDMAConfig+0x46>
 8003244:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003246:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	7b9b      	ldrb	r3, [r3, #14]
 800324c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800324e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003254:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7f1b      	ldrb	r3, [r3, #28]
 800325a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800325c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	7f9b      	ldrb	r3, [r3, #30]
 8003262:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003264:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800326a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003272:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003274:	4313      	orrs	r3, r2
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003296:	2001      	movs	r0, #1
 8003298:	f7fe feb0 	bl	8001ffc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a4:	461a      	mov	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	791b      	ldrb	r3, [r3, #4]
 80032ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80032ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80032ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fe fe81 	bl	8001ffc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6013      	str	r3, [r2, #0]
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	f8de3f23 	.word	0xf8de3f23

08003314 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b0a6      	sub	sp, #152	; 0x98
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003328:	2300      	movs	r3, #0
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003350:	2300      	movs	r3, #0
 8003352:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800335a:	2300      	movs	r3, #0
 800335c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800337c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003380:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fe86 	bl	80030a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003394:	2301      	movs	r3, #1
 8003396:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003398:	2301      	movs	r3, #1
 800339a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80033c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80033ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff08 	bl	8003200 <ETH_SetDMAConfig>
}
 80033f0:	bf00      	nop
 80033f2:	3798      	adds	r7, #152	; 0x98
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3305      	adds	r3, #5
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	3204      	adds	r2, #4
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <ETH_MACAddressConfig+0x68>)
 800341a:	4413      	add	r3, r2
 800341c:	461a      	mov	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3303      	adds	r3, #3
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	061a      	lsls	r2, r3, #24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3302      	adds	r3, #2
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3301      	adds	r3, #1
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	4313      	orrs	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	7812      	ldrb	r2, [r2, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <ETH_MACAddressConfig+0x6c>)
 800344a:	4413      	add	r3, r2
 800344c:	461a      	mov	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6013      	str	r3, [r2, #0]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40028040 	.word	0x40028040
 8003464:	40028044 	.word	0x40028044

08003468 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e03e      	b.n	80034f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	3206      	adds	r2, #6
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d80c      	bhi.n	80034d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e004      	b.n	80034e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d9bd      	bls.n	8003476 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	611a      	str	r2, [r3, #16]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e046      	b.n	80035b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6919      	ldr	r1, [r3, #16]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003564:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800356c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	3212      	adds	r2, #18
 8003582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d80c      	bhi.n	80035a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6919      	ldr	r1, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	e004      	b.n	80035b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d9b5      	bls.n	8003528 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e6:	60da      	str	r2, [r3, #12]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b08d      	sub	sp, #52	; 0x34
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3318      	adds	r3, #24
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003636:	d007      	beq.n	8003648 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	3304      	adds	r3, #4
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	e0ff      	b.n	800384c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	3301      	adds	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003662:	4013      	ands	r3, r2
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80036ce:	f3bf 8f5f 	dmb	sy
}
 80036d2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80036e0:	e082      	b.n	80037e8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e005      	b.n	800370e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	3301      	adds	r3, #1
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b03      	cmp	r3, #3
 8003718:	d902      	bls.n	8003720 <ETH_Prepare_Tx_Descriptors+0x12c>
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	3b04      	subs	r3, #4
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003742:	d007      	beq.n	8003754 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	3304      	adds	r3, #4
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d029      	beq.n	80037a8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003762:	2300      	movs	r3, #0
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	e019      	b.n	800379c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003768:	f3bf 8f5f 	dmb	sy
}
 800376c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	3301      	adds	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	2b03      	cmp	r3, #3
 8003784:	d902      	bls.n	800378c <ETH_Prepare_Tx_Descriptors+0x198>
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	3b04      	subs	r3, #4
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003794:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	3301      	adds	r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
 800379c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3e1      	bcc.n	8003768 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80037a4:	2302      	movs	r3, #2
 80037a6:	e051      	b.n	800384c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	3301      	adds	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4b25      	ldr	r3, [pc, #148]	; (8003858 <ETH_Prepare_Tx_Descriptors+0x264>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	6852      	ldr	r2, [r2, #4]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	3301      	adds	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80037d6:	f3bf 8f5f 	dmb	sy
}
 80037da:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f af78 	bne.w	80036e2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e005      	b.n	8003812 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003822:	6979      	ldr	r1, [r7, #20]
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	3304      	adds	r3, #4
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003834:	b672      	cpsid	i
}
 8003836:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003846:	b662      	cpsie	i
}
 8003848:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3734      	adds	r7, #52	; 0x34
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	ffffe000 	.word	0xffffe000

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e175      	b.n	8003b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800387c:	2201      	movs	r2, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8164 	bne.w	8003b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d005      	beq.n	80038b2 <HAL_GPIO_Init+0x56>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d130      	bne.n	8003914 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	2203      	movs	r2, #3
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 0201 	and.w	r2, r3, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d017      	beq.n	8003950 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d123      	bne.n	80039a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80be 	beq.w	8003b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_GPIO_Init+0x324>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_GPIO_Init+0x324>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_GPIO_Init+0x324>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039fe:	4a61      	ldr	r2, [pc, #388]	; (8003b84 <HAL_GPIO_Init+0x328>)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_GPIO_Init+0x32c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d037      	beq.n	8003a9a <HAL_GPIO_Init+0x23e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_GPIO_Init+0x330>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d031      	beq.n	8003a96 <HAL_GPIO_Init+0x23a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a56      	ldr	r2, [pc, #344]	; (8003b90 <HAL_GPIO_Init+0x334>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <HAL_GPIO_Init+0x236>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a55      	ldr	r2, [pc, #340]	; (8003b94 <HAL_GPIO_Init+0x338>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d025      	beq.n	8003a8e <HAL_GPIO_Init+0x232>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a54      	ldr	r2, [pc, #336]	; (8003b98 <HAL_GPIO_Init+0x33c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01f      	beq.n	8003a8a <HAL_GPIO_Init+0x22e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a53      	ldr	r2, [pc, #332]	; (8003b9c <HAL_GPIO_Init+0x340>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_Init+0x22a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_GPIO_Init+0x344>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0x226>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a51      	ldr	r2, [pc, #324]	; (8003ba4 <HAL_GPIO_Init+0x348>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_Init+0x222>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a50      	ldr	r2, [pc, #320]	; (8003ba8 <HAL_GPIO_Init+0x34c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x21e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4f      	ldr	r2, [pc, #316]	; (8003bac <HAL_GPIO_Init+0x350>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_Init+0x21a>
 8003a72:	2309      	movs	r3, #9
 8003a74:	e012      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a76:	230a      	movs	r3, #10
 8003a78:	e010      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	e00e      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00c      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a82:	2306      	movs	r3, #6
 8003a84:	e00a      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a86:	2305      	movs	r3, #5
 8003a88:	e008      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x240>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	f002 0203 	and.w	r2, r2, #3
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003aac:	4935      	ldr	r1, [pc, #212]	; (8003b84 <HAL_GPIO_Init+0x328>)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ade:	4a34      	ldr	r2, [pc, #208]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b0e:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b5c:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <HAL_GPIO_Init+0x354>)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	f67f ae86 	bls.w	800387c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40013800 	.word	0x40013800
 8003b88:	40020000 	.word	0x40020000
 8003b8c:	40020400 	.word	0x40020400
 8003b90:	40020800 	.word	0x40020800
 8003b94:	40020c00 	.word	0x40020c00
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40021400 	.word	0x40021400
 8003ba0:	40021800 	.word	0x40021800
 8003ba4:	40021c00 	.word	0x40021c00
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40022400 	.word	0x40022400
 8003bb0:	40013c00 	.word	0x40013c00

08003bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc4:	787b      	ldrb	r3, [r7, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bf8:	887a      	ldrh	r2, [r7, #2]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	041a      	lsls	r2, r3, #16
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	887b      	ldrh	r3, [r7, #2]
 8003c06:	400b      	ands	r3, r1
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	619a      	str	r2, [r3, #24]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4a:	f7fe f9cb 	bl	8001fe4 <HAL_GetTick>
 8003c4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c50:	e009      	b.n	8003c66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c52:	f7fe f9c7 	bl	8001fe4 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c60:	d901      	bls.n	8003c66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e022      	b.n	8003cac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c72:	d1ee      	bne.n	8003c52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c80:	f7fe f9b0 	bl	8001fe4 <HAL_GetTick>
 8003c84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c86:	e009      	b.n	8003c9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c88:	f7fe f9ac 	bl	8001fe4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c96:	d901      	bls.n	8003c9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e007      	b.n	8003cac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000

08003cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e291      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8087 	beq.w	8003dee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce0:	4b96      	ldr	r3, [pc, #600]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cec:	4b93      	ldr	r3, [pc, #588]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d112      	bne.n	8003d1e <HAL_RCC_OscConfig+0x62>
 8003cf8:	4b90      	ldr	r3, [pc, #576]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d06:	4b8d      	ldr	r3, [pc, #564]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d06c      	beq.n	8003dec <HAL_RCC_OscConfig+0x130>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d168      	bne.n	8003dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e26b      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x7a>
 8003d28:	4b84      	ldr	r3, [pc, #528]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a83      	ldr	r2, [pc, #524]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e02e      	b.n	8003d94 <HAL_RCC_OscConfig+0xd8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x9c>
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7e      	ldr	r2, [pc, #504]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b7c      	ldr	r3, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7b      	ldr	r2, [pc, #492]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01d      	b.n	8003d94 <HAL_RCC_OscConfig+0xd8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0xc0>
 8003d62:	4b76      	ldr	r3, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b73      	ldr	r3, [pc, #460]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a72      	ldr	r2, [pc, #456]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xd8>
 8003d7c:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6e      	ldr	r2, [pc, #440]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b6c      	ldr	r3, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6b      	ldr	r2, [pc, #428]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe f922 	bl	8001fe4 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe f91e 	bl	8001fe4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e21f      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe8>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f90e 	bl	8001fe4 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe f90a 	bl	8001fe4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e20b      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x110>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d069      	beq.n	8003ece <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfa:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e06:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x190>
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1df      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	493d      	ldr	r1, [pc, #244]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	e040      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d023      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e54:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a38      	ldr	r2, [pc, #224]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f8c0 	bl	8001fe4 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fe f8bc 	bl	8001fe4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e1bd      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4929      	ldr	r1, [pc, #164]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
 8003e9a:	e018      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f89c 	bl	8001fe4 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f898 	bl	8001fe4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e199      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d038      	beq.n	8003f4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fe f879 	bl	8001fe4 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fe f875 	bl	8001fe4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e176      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x23a>
 8003f14:	e01a      	b.n	8003f4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fe f85f 	bl	8001fe4 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fe f85b 	bl	8001fe4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d903      	bls.n	8003f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e15c      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
 8003f3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b91      	ldr	r3, [pc, #580]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a4 	beq.w	80040a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5a:	4b8b      	ldr	r3, [pc, #556]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a87      	ldr	r2, [pc, #540]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b85      	ldr	r3, [pc, #532]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f8e:	4b7f      	ldr	r3, [pc, #508]	; (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a7e      	ldr	r2, [pc, #504]	; (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f823 	bl	8001fe4 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe f81f 	bl	8001fe4 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	; 0x64
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e120      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4b75      	ldr	r3, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x31a>
 8003fc8:	4b6f      	ldr	r3, [pc, #444]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	e02d      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x33c>
 8003fde:	4b6a      	ldr	r3, [pc, #424]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a69      	ldr	r2, [pc, #420]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fea:	4b67      	ldr	r3, [pc, #412]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a66      	ldr	r2, [pc, #408]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e01c      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x35e>
 8004000:	4b61      	ldr	r3, [pc, #388]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a60      	ldr	r2, [pc, #384]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a5d      	ldr	r2, [pc, #372]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
 800401a:	4b5b      	ldr	r3, [pc, #364]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a5a      	ldr	r2, [pc, #360]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b58      	ldr	r3, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d015      	beq.n	8004066 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd ffd3 	bl	8001fe4 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd ffcf 	bl	8001fe4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0ce      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCC_OscConfig+0x386>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fd ffbd 	bl	8001fe4 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd ffb9 	bl	8001fe4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0b8      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b40      	ldr	r3, [pc, #256]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a3b      	ldr	r2, [pc, #236]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a4 	beq.w	80041f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ac:	4b36      	ldr	r3, [pc, #216]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d06b      	beq.n	8004190 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d149      	bne.n	8004154 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b31      	ldr	r3, [pc, #196]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a30      	ldr	r2, [pc, #192]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd ff8a 	bl	8001fe4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd ff86 	bl	8001fe4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e087      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	4313      	orrs	r3, r2
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800411a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800411e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd ff5a 	bl	8001fe4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fd ff56 	bl	8001fe4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e057      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x478>
 8004152:	e04f      	b.n	80041f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800415a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd ff40 	bl	8001fe4 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004168:	f7fd ff3c 	bl	8001fe4 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e03d      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <HAL_RCC_OscConfig+0x4cc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x4ac>
 8004186:	e035      	b.n	80041f4 <HAL_RCC_OscConfig+0x538>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004190:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_RCC_OscConfig+0x544>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d028      	beq.n	80041f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d121      	bne.n	80041f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d11a      	bne.n	80041f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d111      	bne.n	80041f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	3b01      	subs	r3, #1
 80041da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800

08004204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0d0      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d910      	bls.n	800424c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b67      	ldr	r3, [pc, #412]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 020f 	bic.w	r2, r3, #15
 8004232:	4965      	ldr	r1, [pc, #404]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0b8      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004264:	4b59      	ldr	r3, [pc, #356]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800427c:	4b53      	ldr	r3, [pc, #332]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a52      	ldr	r2, [pc, #328]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004288:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	494d      	ldr	r1, [pc, #308]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d040      	beq.n	8004328 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d115      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e07f      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b41      	ldr	r3, [pc, #260]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e073      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b3d      	ldr	r3, [pc, #244]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06b      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4936      	ldr	r1, [pc, #216]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fd fe74 	bl	8001fe4 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fd fe70 	bl	8001fe4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e053      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d210      	bcs.n	8004358 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4922      	ldr	r1, [pc, #136]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e032      	b.n	80043be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4916      	ldr	r1, [pc, #88]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	490e      	ldr	r1, [pc, #56]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004396:	f000 f821 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 800439a:	4602      	mov	r2, r0
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	490a      	ldr	r1, [pc, #40]	; (80043d0 <HAL_RCC_ClockConfig+0x1cc>)
 80043a8:	5ccb      	ldrb	r3, [r1, r3]
 80043aa:	fa22 f303 	lsr.w	r3, r2, r3
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1d0>)
 80043b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd f9a0 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00
 80043cc:	40023800 	.word	0x40023800
 80043d0:	0801d7a8 	.word	0x0801d7a8
 80043d4:	20000000 	.word	0x20000000
 80043d8:	20000004 	.word	0x20000004

080043dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e0:	b090      	sub	sp, #64	; 0x40
 80043e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
 80043e8:	2300      	movs	r3, #0
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ec:	2300      	movs	r3, #0
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <HAL_RCC_GetSysClockFreq+0x180>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d00d      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x40>
 8004400:	2b08      	cmp	r3, #8
 8004402:	f200 80a1 	bhi.w	8004548 <HAL_RCC_GetSysClockFreq+0x16c>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x34>
 800440a:	2b04      	cmp	r3, #4
 800440c:	d003      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x3a>
 800440e:	e09b      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b53      	ldr	r3, [pc, #332]	; (8004560 <HAL_RCC_GetSysClockFreq+0x184>)
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004414:	e09b      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004416:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_GetSysClockFreq+0x188>)
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800441a:	e098      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800441c:	4b4f      	ldr	r3, [pc, #316]	; (800455c <HAL_RCC_GetSysClockFreq+0x180>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004426:	4b4d      	ldr	r3, [pc, #308]	; (800455c <HAL_RCC_GetSysClockFreq+0x180>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d028      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004432:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_RCC_GetSysClockFreq+0x180>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	2200      	movs	r2, #0
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	627a      	str	r2, [r7, #36]	; 0x24
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004444:	2100      	movs	r1, #0
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_GetSysClockFreq+0x188>)
 8004448:	fb03 f201 	mul.w	r2, r3, r1
 800444c:	2300      	movs	r3, #0
 800444e:	fb00 f303 	mul.w	r3, r0, r3
 8004452:	4413      	add	r3, r2
 8004454:	4a43      	ldr	r2, [pc, #268]	; (8004564 <HAL_RCC_GetSysClockFreq+0x188>)
 8004456:	fba0 1202 	umull	r1, r2, r0, r2
 800445a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800445c:	460a      	mov	r2, r1
 800445e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004462:	4413      	add	r3, r2
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004468:	2200      	movs	r2, #0
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	61fa      	str	r2, [r7, #28]
 800446e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004476:	f7fc fbe9 	bl	8000c4c <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4613      	mov	r3, r2
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004482:	e053      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <HAL_RCC_GetSysClockFreq+0x180>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	2200      	movs	r2, #0
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	617a      	str	r2, [r7, #20]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004496:	f04f 0b00 	mov.w	fp, #0
 800449a:	4652      	mov	r2, sl
 800449c:	465b      	mov	r3, fp
 800449e:	f04f 0000 	mov.w	r0, #0
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	0159      	lsls	r1, r3, #5
 80044a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ac:	0150      	lsls	r0, r2, #5
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	ebb2 080a 	subs.w	r8, r2, sl
 80044b6:	eb63 090b 	sbc.w	r9, r3, fp
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044ce:	ebb2 0408 	subs.w	r4, r2, r8
 80044d2:	eb63 0509 	sbc.w	r5, r3, r9
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	00eb      	lsls	r3, r5, #3
 80044e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e4:	00e2      	lsls	r2, r4, #3
 80044e6:	4614      	mov	r4, r2
 80044e8:	461d      	mov	r5, r3
 80044ea:	eb14 030a 	adds.w	r3, r4, sl
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	eb45 030b 	adc.w	r3, r5, fp
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004502:	4629      	mov	r1, r5
 8004504:	028b      	lsls	r3, r1, #10
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800450c:	4621      	mov	r1, r4
 800450e:	028a      	lsls	r2, r1, #10
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	2200      	movs	r2, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	60fa      	str	r2, [r7, #12]
 800451c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004520:	f7fc fb94 	bl	8000c4c <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_GetSysClockFreq+0x180>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800453c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetSysClockFreq+0x184>)
 800454a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004550:	4618      	mov	r0, r3
 8004552:	3740      	adds	r7, #64	; 0x40
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	00f42400 	.word	0x00f42400
 8004564:	017d7840 	.word	0x017d7840

08004568 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000000 	.word	0x20000000

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004584:	f7ff fff0 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0b5b      	lsrs	r3, r3, #13
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4903      	ldr	r1, [pc, #12]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	0801d7b8 	.word	0x0801d7b8

080045a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	220f      	movs	r2, #15
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0203 	and.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <HAL_RCC_GetClockConfig+0x60>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	40023c00 	.word	0x40023c00

0800460c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e049      	b.n	80046b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f841 	bl	80046ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f000 fb6a 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d001      	beq.n	80046e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e054      	b.n	8004792 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d022      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d01d      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a22      	ldr	r2, [pc, #136]	; (80047a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d018      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_TIM_Base_Start_IT+0xdc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00e      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x80>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d115      	bne.n	800477c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_TIM_Base_Start_IT+0xec>)
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b06      	cmp	r3, #6
 8004760:	d015      	beq.n	800478e <HAL_TIM_Base_Start_IT+0xbe>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d011      	beq.n	800478e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e008      	b.n	800478e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e000      	b.n	8004790 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40010400 	.word	0x40010400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40001800 	.word	0x40001800
 80047bc:	00010007 	.word	0x00010007

080047c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e049      	b.n	8004866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc ff30 	bl	800164c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f000 fa90 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d122      	bne.n	80048ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d11b      	bne.n	80048ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0202 	mvn.w	r2, #2
 800489a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa19 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 80048b6:	e005      	b.n	80048c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa0b 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa1c 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d122      	bne.n	800491e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d11b      	bne.n	800491e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0204 	mvn.w	r2, #4
 80048ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9ef 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 800490a:	e005      	b.n	8004918 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9e1 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9f2 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d122      	bne.n	8004972 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11b      	bne.n	8004972 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0208 	mvn.w	r2, #8
 8004942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2204      	movs	r2, #4
 8004948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9c5 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 800495e:	e005      	b.n	800496c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f9b7 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9c8 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b10      	cmp	r3, #16
 800497e:	d122      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b10      	cmp	r3, #16
 800498c:	d11b      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f06f 0210 	mvn.w	r2, #16
 8004996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2208      	movs	r2, #8
 800499c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f99b 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 80049b2:	e005      	b.n	80049c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f98d 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f99e 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10e      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0201 	mvn.w	r2, #1
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fc fdbf 	bl	8001570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fd19 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d10e      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fd0c 	bl	8005464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d10e      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f94c 	bl	8004d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0220 	mvn.w	r2, #32
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fccc 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0ff      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b14      	cmp	r3, #20
 8004ad6:	f200 80f0 	bhi.w	8004cba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004cbb 	.word	0x08004cbb
 8004ae8:	08004cbb 	.word	0x08004cbb
 8004aec:	08004cbb 	.word	0x08004cbb
 8004af0:	08004b75 	.word	0x08004b75
 8004af4:	08004cbb 	.word	0x08004cbb
 8004af8:	08004cbb 	.word	0x08004cbb
 8004afc:	08004cbb 	.word	0x08004cbb
 8004b00:	08004bb7 	.word	0x08004bb7
 8004b04:	08004cbb 	.word	0x08004cbb
 8004b08:	08004cbb 	.word	0x08004cbb
 8004b0c:	08004cbb 	.word	0x08004cbb
 8004b10:	08004bf7 	.word	0x08004bf7
 8004b14:	08004cbb 	.word	0x08004cbb
 8004b18:	08004cbb 	.word	0x08004cbb
 8004b1c:	08004cbb 	.word	0x08004cbb
 8004b20:	08004c39 	.word	0x08004c39
 8004b24:	08004cbb 	.word	0x08004cbb
 8004b28:	08004cbb 	.word	0x08004cbb
 8004b2c:	08004cbb 	.word	0x08004cbb
 8004b30:	08004c79 	.word	0x08004c79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f992 	bl	8004e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	619a      	str	r2, [r3, #24]
      break;
 8004b72:	e0a5      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f9e4 	bl	8004f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6999      	ldr	r1, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
      break;
 8004bb4:	e084      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fa3b 	bl	8005038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0208 	orr.w	r2, r2, #8
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0204 	bic.w	r2, r2, #4
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	61da      	str	r2, [r3, #28]
      break;
 8004bf4:	e064      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fa91 	bl	8005124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69d9      	ldr	r1, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	021a      	lsls	r2, r3, #8
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	61da      	str	r2, [r3, #28]
      break;
 8004c36:	e043      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fac8 	bl	80051d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c76:	e023      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fafa 	bl	8005278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop

08004cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a40      	ldr	r2, [pc, #256]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d00f      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3d      	ldr	r2, [pc, #244]	; (8004e3c <TIM_Base_SetConfig+0x118>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3c      	ldr	r2, [pc, #240]	; (8004e40 <TIM_Base_SetConfig+0x11c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3b      	ldr	r2, [pc, #236]	; (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3a      	ldr	r2, [pc, #232]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d027      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <TIM_Base_SetConfig+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d023      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <TIM_Base_SetConfig+0x11c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01f      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d017      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a28      	ldr	r2, [pc, #160]	; (8004e4c <TIM_Base_SetConfig+0x128>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <TIM_Base_SetConfig+0x130>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a25      	ldr	r2, [pc, #148]	; (8004e58 <TIM_Base_SetConfig+0x134>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <TIM_Base_SetConfig+0x138>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40001800 	.word	0x40001800
 8004e5c:	40001c00 	.word	0x40001c00
 8004e60:	40002000 	.word	0x40002000

08004e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x64>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <TIM_OC1_SetConfig+0xe0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC1_SetConfig+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <TIM_OC1_SetConfig+0xe0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	fffeff8f 	.word	0xfffeff8f
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400

08004f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4b2e      	ldr	r3, [pc, #184]	; (800502c <TIM_OC2_SetConfig+0xe4>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0320 	bic.w	r3, r3, #32
 8004f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a23      	ldr	r2, [pc, #140]	; (8005030 <TIM_OC2_SetConfig+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC2_SetConfig+0x68>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a22      	ldr	r2, [pc, #136]	; (8005034 <TIM_OC2_SetConfig+0xec>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a18      	ldr	r2, [pc, #96]	; (8005030 <TIM_OC2_SetConfig+0xe8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC2_SetConfig+0x94>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a17      	ldr	r2, [pc, #92]	; (8005034 <TIM_OC2_SetConfig+0xec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d113      	bne.n	8005004 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	feff8fff 	.word	0xfeff8fff
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400

08005038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <TIM_OC3_SetConfig+0xe0>)
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a22      	ldr	r2, [pc, #136]	; (800511c <TIM_OC3_SetConfig+0xe4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_OC3_SetConfig+0x66>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a21      	ldr	r2, [pc, #132]	; (8005120 <TIM_OC3_SetConfig+0xe8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10d      	bne.n	80050ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC3_SetConfig+0x92>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a16      	ldr	r2, [pc, #88]	; (8005120 <TIM_OC3_SetConfig+0xe8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d113      	bne.n	80050f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	621a      	str	r2, [r3, #32]
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	fffeff8f 	.word	0xfffeff8f
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400

08005124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <TIM_OC4_SetConfig+0xa4>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	031b      	lsls	r3, r3, #12
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <TIM_OC4_SetConfig+0xa8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC4_SetConfig+0x68>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_OC4_SetConfig+0xac>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d109      	bne.n	80051a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	feff8fff 	.word	0xfeff8fff
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40010400 	.word	0x40010400

080051d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4b1b      	ldr	r3, [pc, #108]	; (800526c <TIM_OC5_SetConfig+0x98>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a12      	ldr	r2, [pc, #72]	; (8005270 <TIM_OC5_SetConfig+0x9c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC5_SetConfig+0x5e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <TIM_OC5_SetConfig+0xa0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d109      	bne.n	8005246 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	fffeff8f 	.word	0xfffeff8f
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <TIM_OC6_SetConfig+0x9c>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	051b      	lsls	r3, r3, #20
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a13      	ldr	r2, [pc, #76]	; (8005318 <TIM_OC6_SetConfig+0xa0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC6_SetConfig+0x60>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <TIM_OC6_SetConfig+0xa4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d109      	bne.n	80052ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	029b      	lsls	r3, r3, #10
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	feff8fff 	.word	0xfeff8fff
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400

08005320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e06d      	b.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005372:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a20      	ldr	r2, [pc, #128]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d01d      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1c      	ldr	r2, [pc, #112]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a16      	ldr	r2, [pc, #88]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a15      	ldr	r2, [pc, #84]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10c      	bne.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return &gnetif;
 800547c:	4b02      	ldr	r3, [pc, #8]	; (8005488 <get_static_netif+0x10>)
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	200005e8 	.word	0x200005e8

0800548c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005492:	4b98      	ldr	r3, [pc, #608]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005494:	220a      	movs	r2, #10
 8005496:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8005498:	4b96      	ldr	r3, [pc, #600]	; (80056f4 <MX_LWIP_Init+0x268>)
 800549a:	222a      	movs	r2, #42	; 0x2a
 800549c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800549e:	4b95      	ldr	r3, [pc, #596]	; (80056f4 <MX_LWIP_Init+0x268>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 80054a4:	4b93      	ldr	r3, [pc, #588]	; (80056f4 <MX_LWIP_Init+0x268>)
 80054a6:	2220      	movs	r2, #32
 80054a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80054aa:	4b93      	ldr	r3, [pc, #588]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80054ac:	22ff      	movs	r2, #255	; 0xff
 80054ae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80054b0:	4b91      	ldr	r3, [pc, #580]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80054b6:	4b90      	ldr	r3, [pc, #576]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80054b8:	22ff      	movs	r2, #255	; 0xff
 80054ba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80054bc:	4b8e      	ldr	r3, [pc, #568]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80054be:	2200      	movs	r2, #0
 80054c0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80054c2:	4b8e      	ldr	r3, [pc, #568]	; (80056fc <MX_LWIP_Init+0x270>)
 80054c4:	220a      	movs	r2, #10
 80054c6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 80054c8:	4b8c      	ldr	r3, [pc, #560]	; (80056fc <MX_LWIP_Init+0x270>)
 80054ca:	222a      	movs	r2, #42	; 0x2a
 80054cc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80054ce:	4b8b      	ldr	r3, [pc, #556]	; (80056fc <MX_LWIP_Init+0x270>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80054d4:	4b89      	ldr	r3, [pc, #548]	; (80056fc <MX_LWIP_Init+0x270>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80054da:	2100      	movs	r1, #0
 80054dc:	2000      	movs	r0, #0
 80054de:	f006 ff45 	bl	800c36c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80054e2:	4b84      	ldr	r3, [pc, #528]	; (80056f4 <MX_LWIP_Init+0x268>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	061a      	lsls	r2, r3, #24
 80054e8:	4b82      	ldr	r3, [pc, #520]	; (80056f4 <MX_LWIP_Init+0x268>)
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	431a      	orrs	r2, r3
 80054f0:	4b80      	ldr	r3, [pc, #512]	; (80056f4 <MX_LWIP_Init+0x268>)
 80054f2:	789b      	ldrb	r3, [r3, #2]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	4313      	orrs	r3, r2
 80054f8:	4a7e      	ldr	r2, [pc, #504]	; (80056f4 <MX_LWIP_Init+0x268>)
 80054fa:	78d2      	ldrb	r2, [r2, #3]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	061a      	lsls	r2, r3, #24
 8005500:	4b7c      	ldr	r3, [pc, #496]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	0619      	lsls	r1, r3, #24
 8005506:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	4319      	orrs	r1, r3
 800550e:	4b79      	ldr	r3, [pc, #484]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	430b      	orrs	r3, r1
 8005516:	4977      	ldr	r1, [pc, #476]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005518:	78c9      	ldrb	r1, [r1, #3]
 800551a:	430b      	orrs	r3, r1
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005522:	431a      	orrs	r2, r3
 8005524:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	0619      	lsls	r1, r3, #24
 800552a:	4b72      	ldr	r3, [pc, #456]	; (80056f4 <MX_LWIP_Init+0x268>)
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	4319      	orrs	r1, r3
 8005532:	4b70      	ldr	r3, [pc, #448]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005534:	789b      	ldrb	r3, [r3, #2]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	430b      	orrs	r3, r1
 800553a:	496e      	ldr	r1, [pc, #440]	; (80056f4 <MX_LWIP_Init+0x268>)
 800553c:	78c9      	ldrb	r1, [r1, #3]
 800553e:	430b      	orrs	r3, r1
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005546:	431a      	orrs	r2, r3
 8005548:	4b6a      	ldr	r3, [pc, #424]	; (80056f4 <MX_LWIP_Init+0x268>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	0619      	lsls	r1, r3, #24
 800554e:	4b69      	ldr	r3, [pc, #420]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	4319      	orrs	r1, r3
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005558:	789b      	ldrb	r3, [r3, #2]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	430b      	orrs	r3, r1
 800555e:	4965      	ldr	r1, [pc, #404]	; (80056f4 <MX_LWIP_Init+0x268>)
 8005560:	78c9      	ldrb	r1, [r1, #3]
 8005562:	430b      	orrs	r3, r1
 8005564:	0e1b      	lsrs	r3, r3, #24
 8005566:	4313      	orrs	r3, r2
 8005568:	4a65      	ldr	r2, [pc, #404]	; (8005700 <MX_LWIP_Init+0x274>)
 800556a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800556c:	4b62      	ldr	r3, [pc, #392]	; (80056f8 <MX_LWIP_Init+0x26c>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	061a      	lsls	r2, r3, #24
 8005572:	4b61      	ldr	r3, [pc, #388]	; (80056f8 <MX_LWIP_Init+0x26c>)
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	4b5f      	ldr	r3, [pc, #380]	; (80056f8 <MX_LWIP_Init+0x26c>)
 800557c:	789b      	ldrb	r3, [r3, #2]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4313      	orrs	r3, r2
 8005582:	4a5d      	ldr	r2, [pc, #372]	; (80056f8 <MX_LWIP_Init+0x26c>)
 8005584:	78d2      	ldrb	r2, [r2, #3]
 8005586:	4313      	orrs	r3, r2
 8005588:	061a      	lsls	r2, r3, #24
 800558a:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <MX_LWIP_Init+0x26c>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	0619      	lsls	r1, r3, #24
 8005590:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <MX_LWIP_Init+0x26c>)
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	4319      	orrs	r1, r3
 8005598:	4b57      	ldr	r3, [pc, #348]	; (80056f8 <MX_LWIP_Init+0x26c>)
 800559a:	789b      	ldrb	r3, [r3, #2]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	430b      	orrs	r3, r1
 80055a0:	4955      	ldr	r1, [pc, #340]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055a2:	78c9      	ldrb	r1, [r1, #3]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ac:	431a      	orrs	r2, r3
 80055ae:	4b52      	ldr	r3, [pc, #328]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	0619      	lsls	r1, r3, #24
 80055b4:	4b50      	ldr	r3, [pc, #320]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	4319      	orrs	r1, r3
 80055bc:	4b4e      	ldr	r3, [pc, #312]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055be:	789b      	ldrb	r3, [r3, #2]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	430b      	orrs	r3, r1
 80055c4:	494c      	ldr	r1, [pc, #304]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055c6:	78c9      	ldrb	r1, [r1, #3]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055d0:	431a      	orrs	r2, r3
 80055d2:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	0619      	lsls	r1, r3, #24
 80055d8:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	4319      	orrs	r1, r3
 80055e0:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055e2:	789b      	ldrb	r3, [r3, #2]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	430b      	orrs	r3, r1
 80055e8:	4943      	ldr	r1, [pc, #268]	; (80056f8 <MX_LWIP_Init+0x26c>)
 80055ea:	78c9      	ldrb	r1, [r1, #3]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	0e1b      	lsrs	r3, r3, #24
 80055f0:	4313      	orrs	r3, r2
 80055f2:	4a44      	ldr	r2, [pc, #272]	; (8005704 <MX_LWIP_Init+0x278>)
 80055f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <MX_LWIP_Init+0x270>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	061a      	lsls	r2, r3, #24
 80055fc:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <MX_LWIP_Init+0x270>)
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	431a      	orrs	r2, r3
 8005604:	4b3d      	ldr	r3, [pc, #244]	; (80056fc <MX_LWIP_Init+0x270>)
 8005606:	789b      	ldrb	r3, [r3, #2]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	4313      	orrs	r3, r2
 800560c:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <MX_LWIP_Init+0x270>)
 800560e:	78d2      	ldrb	r2, [r2, #3]
 8005610:	4313      	orrs	r3, r2
 8005612:	061a      	lsls	r2, r3, #24
 8005614:	4b39      	ldr	r3, [pc, #228]	; (80056fc <MX_LWIP_Init+0x270>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	0619      	lsls	r1, r3, #24
 800561a:	4b38      	ldr	r3, [pc, #224]	; (80056fc <MX_LWIP_Init+0x270>)
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	4319      	orrs	r1, r3
 8005622:	4b36      	ldr	r3, [pc, #216]	; (80056fc <MX_LWIP_Init+0x270>)
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	430b      	orrs	r3, r1
 800562a:	4934      	ldr	r1, [pc, #208]	; (80056fc <MX_LWIP_Init+0x270>)
 800562c:	78c9      	ldrb	r1, [r1, #3]
 800562e:	430b      	orrs	r3, r1
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005636:	431a      	orrs	r2, r3
 8005638:	4b30      	ldr	r3, [pc, #192]	; (80056fc <MX_LWIP_Init+0x270>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	0619      	lsls	r1, r3, #24
 800563e:	4b2f      	ldr	r3, [pc, #188]	; (80056fc <MX_LWIP_Init+0x270>)
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	4319      	orrs	r1, r3
 8005646:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <MX_LWIP_Init+0x270>)
 8005648:	789b      	ldrb	r3, [r3, #2]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	430b      	orrs	r3, r1
 800564e:	492b      	ldr	r1, [pc, #172]	; (80056fc <MX_LWIP_Init+0x270>)
 8005650:	78c9      	ldrb	r1, [r1, #3]
 8005652:	430b      	orrs	r3, r1
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800565a:	431a      	orrs	r2, r3
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <MX_LWIP_Init+0x270>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	0619      	lsls	r1, r3, #24
 8005662:	4b26      	ldr	r3, [pc, #152]	; (80056fc <MX_LWIP_Init+0x270>)
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	4319      	orrs	r1, r3
 800566a:	4b24      	ldr	r3, [pc, #144]	; (80056fc <MX_LWIP_Init+0x270>)
 800566c:	789b      	ldrb	r3, [r3, #2]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	430b      	orrs	r3, r1
 8005672:	4922      	ldr	r1, [pc, #136]	; (80056fc <MX_LWIP_Init+0x270>)
 8005674:	78c9      	ldrb	r1, [r1, #3]
 8005676:	430b      	orrs	r3, r1
 8005678:	0e1b      	lsrs	r3, r3, #24
 800567a:	4313      	orrs	r3, r2
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <MX_LWIP_Init+0x27c>)
 800567e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005680:	4b22      	ldr	r3, [pc, #136]	; (800570c <MX_LWIP_Init+0x280>)
 8005682:	9302      	str	r3, [sp, #8]
 8005684:	4b22      	ldr	r3, [pc, #136]	; (8005710 <MX_LWIP_Init+0x284>)
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <MX_LWIP_Init+0x27c>)
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <MX_LWIP_Init+0x278>)
 8005690:	491b      	ldr	r1, [pc, #108]	; (8005700 <MX_LWIP_Init+0x274>)
 8005692:	4820      	ldr	r0, [pc, #128]	; (8005714 <MX_LWIP_Init+0x288>)
 8005694:	f007 fd4c 	bl	800d130 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005698:	481e      	ldr	r0, [pc, #120]	; (8005714 <MX_LWIP_Init+0x288>)
 800569a:	f007 fef7 	bl	800d48c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <MX_LWIP_Init+0x288>)
 80056a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80056b0:	4818      	ldr	r0, [pc, #96]	; (8005714 <MX_LWIP_Init+0x288>)
 80056b2:	f007 fefb 	bl	800d4ac <netif_set_up>
 80056b6:	e002      	b.n	80056be <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80056b8:	4816      	ldr	r0, [pc, #88]	; (8005714 <MX_LWIP_Init+0x288>)
 80056ba:	f007 ff63 	bl	800d584 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80056be:	4916      	ldr	r1, [pc, #88]	; (8005718 <MX_LWIP_Init+0x28c>)
 80056c0:	4814      	ldr	r0, [pc, #80]	; (8005714 <MX_LWIP_Init+0x288>)
 80056c2:	f007 fff5 	bl	800d6b0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80056c6:	2224      	movs	r2, #36	; 0x24
 80056c8:	2100      	movs	r1, #0
 80056ca:	4814      	ldr	r0, [pc, #80]	; (800571c <MX_LWIP_Init+0x290>)
 80056cc:	f011 fe73 	bl	80173b6 <memset>
  attributes.name = "EthLink";
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <MX_LWIP_Init+0x290>)
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <MX_LWIP_Init+0x294>)
 80056d4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <MX_LWIP_Init+0x290>)
 80056d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056dc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80056de:	4b0f      	ldr	r3, [pc, #60]	; (800571c <MX_LWIP_Init+0x290>)
 80056e0:	2210      	movs	r2, #16
 80056e2:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80056e4:	4a0d      	ldr	r2, [pc, #52]	; (800571c <MX_LWIP_Init+0x290>)
 80056e6:	490b      	ldr	r1, [pc, #44]	; (8005714 <MX_LWIP_Init+0x288>)
 80056e8:	480e      	ldr	r0, [pc, #56]	; (8005724 <MX_LWIP_Init+0x298>)
 80056ea:	f000 fda3 	bl	8006234 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80056ee:	bf00      	nop
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000628 	.word	0x20000628
 80056f8:	2000062c 	.word	0x2000062c
 80056fc:	20000630 	.word	0x20000630
 8005700:	2000061c 	.word	0x2000061c
 8005704:	20000620 	.word	0x20000620
 8005708:	20000624 	.word	0x20000624
 800570c:	0800c27d 	.word	0x0800c27d
 8005710:	08005c25 	.word	0x08005c25
 8005714:	200005e8 	.word	0x200005e8
 8005718:	08005729 	.word	0x08005729
 800571c:	20000634 	.word	0x20000634
 8005720:	0801a584 	.word	0x0801a584
 8005724:	08005eed 	.word	0x08005eed

08005728 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800574e:	2320      	movs	r3, #32
 8005750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005752:	f3bf 8f4f 	dsb	sy
}
 8005756:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005758:	e00b      	b.n	8005772 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800575a:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <SCB_InvalidateDCache_by_Addr+0x54>)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	dcf0      	bgt.n	800575a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005778:	f3bf 8f4f 	dsb	sy
}
 800577c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800577e:	f3bf 8f6f 	isb	sy
}
 8005782:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 f865 	bl	8006870 <osSemaphoreRelease>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20004fe4 	.word	0x20004fe4

080057b4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <HAL_ETH_TxCpltCallback+0x1c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 f855 	bl	8006870 <osSemaphoreRelease>
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20004fe8 	.word	0x20004fe8

080057d4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fd fc2d 	bl	800303c <HAL_ETH_GetDMAError>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d104      	bne.n	80057f6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <HAL_ETH_ErrorCallback+0x2c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f83d 	bl	8006870 <osSemaphoreRelease>
  }
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20004fe4 	.word	0x20004fe4

08005804 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b0aa      	sub	sp, #168	; 0xa8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800581e:	f107 0310 	add.w	r3, r7, #16
 8005822:	2264      	movs	r2, #100	; 0x64
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f011 fdc5 	bl	80173b6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800582c:	4b85      	ldr	r3, [pc, #532]	; (8005a44 <low_level_init+0x240>)
 800582e:	4a86      	ldr	r2, [pc, #536]	; (8005a48 <low_level_init+0x244>)
 8005830:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005832:	2300      	movs	r3, #0
 8005834:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800583a:	23e1      	movs	r3, #225	; 0xe1
 800583c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800583e:	2300      	movs	r3, #0
 8005840:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005842:	2300      	movs	r3, #0
 8005844:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005846:	2300      	movs	r3, #0
 8005848:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800584a:	4a7e      	ldr	r2, [pc, #504]	; (8005a44 <low_level_init+0x240>)
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005852:	4b7c      	ldr	r3, [pc, #496]	; (8005a44 <low_level_init+0x240>)
 8005854:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005858:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800585a:	4b7a      	ldr	r3, [pc, #488]	; (8005a44 <low_level_init+0x240>)
 800585c:	4a7b      	ldr	r2, [pc, #492]	; (8005a4c <low_level_init+0x248>)
 800585e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005860:	4b78      	ldr	r3, [pc, #480]	; (8005a44 <low_level_init+0x240>)
 8005862:	4a7b      	ldr	r2, [pc, #492]	; (8005a50 <low_level_init+0x24c>)
 8005864:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005866:	4b77      	ldr	r3, [pc, #476]	; (8005a44 <low_level_init+0x240>)
 8005868:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800586c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800586e:	4875      	ldr	r0, [pc, #468]	; (8005a44 <low_level_init+0x240>)
 8005870:	f7fc fd46 	bl	8002300 <HAL_ETH_Init>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800587a:	2238      	movs	r2, #56	; 0x38
 800587c:	2100      	movs	r1, #0
 800587e:	4875      	ldr	r0, [pc, #468]	; (8005a54 <low_level_init+0x250>)
 8005880:	f011 fd99 	bl	80173b6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005884:	4b73      	ldr	r3, [pc, #460]	; (8005a54 <low_level_init+0x250>)
 8005886:	2221      	movs	r2, #33	; 0x21
 8005888:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800588a:	4b72      	ldr	r3, [pc, #456]	; (8005a54 <low_level_init+0x250>)
 800588c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005890:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005892:	4b70      	ldr	r3, [pc, #448]	; (8005a54 <low_level_init+0x250>)
 8005894:	2200      	movs	r2, #0
 8005896:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005898:	486f      	ldr	r0, [pc, #444]	; (8005a58 <low_level_init+0x254>)
 800589a:	f007 fb03 	bl	800cea4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2206      	movs	r2, #6
 80058a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80058a6:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <low_level_init+0x240>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80058b2:	4b64      	ldr	r3, [pc, #400]	; (8005a44 <low_level_init+0x240>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	785a      	ldrb	r2, [r3, #1]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80058be:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <low_level_init+0x240>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	789a      	ldrb	r2, [r3, #2]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80058ca:	4b5e      	ldr	r3, [pc, #376]	; (8005a44 <low_level_init+0x240>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	78da      	ldrb	r2, [r3, #3]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80058d6:	4b5b      	ldr	r3, [pc, #364]	; (8005a44 <low_level_init+0x240>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	791a      	ldrb	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80058e2:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <low_level_init+0x240>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	795a      	ldrb	r2, [r3, #5]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058f4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058fc:	f043 030a 	orr.w	r3, r3, #10
 8005900:	b2da      	uxtb	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005908:	2200      	movs	r2, #0
 800590a:	2101      	movs	r1, #1
 800590c:	2001      	movs	r0, #1
 800590e:	f000 fead 	bl	800666c <osSemaphoreNew>
 8005912:	4603      	mov	r3, r0
 8005914:	4a51      	ldr	r2, [pc, #324]	; (8005a5c <low_level_init+0x258>)
 8005916:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005918:	2200      	movs	r2, #0
 800591a:	2101      	movs	r1, #1
 800591c:	2001      	movs	r0, #1
 800591e:	f000 fea5 	bl	800666c <osSemaphoreNew>
 8005922:	4603      	mov	r3, r0
 8005924:	4a4e      	ldr	r2, [pc, #312]	; (8005a60 <low_level_init+0x25c>)
 8005926:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005928:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800592c:	2224      	movs	r2, #36	; 0x24
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f011 fd40 	bl	80173b6 <memset>
  attributes.name = "EthIf";
 8005936:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <low_level_init+0x260>)
 8005938:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800593a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800593e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8005942:	2330      	movs	r3, #48	; 0x30
 8005944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005948:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800594c:	461a      	mov	r2, r3
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4845      	ldr	r0, [pc, #276]	; (8005a68 <low_level_init+0x264>)
 8005952:	f000 fc6f 	bl	8006234 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005956:	4945      	ldr	r1, [pc, #276]	; (8005a6c <low_level_init+0x268>)
 8005958:	4845      	ldr	r0, [pc, #276]	; (8005a70 <low_level_init+0x26c>)
 800595a:	f7fc f9b8 	bl	8001cce <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800595e:	4844      	ldr	r0, [pc, #272]	; (8005a70 <low_level_init+0x26c>)
 8005960:	f7fc f9e7 	bl	8001d32 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005964:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005968:	2b00      	cmp	r3, #0
 800596a:	d164      	bne.n	8005a36 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800596c:	4840      	ldr	r0, [pc, #256]	; (8005a70 <low_level_init+0x26c>)
 800596e:	f7fc fa88 	bl	8001e82 <LAN8742_GetLinkState>
 8005972:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800597a:	2b01      	cmp	r3, #1
 800597c:	dc06      	bgt.n	800598c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f007 fe66 	bl	800d650 <netif_set_link_down>
      netif_set_down(netif);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f007 fdfd 	bl	800d584 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800598a:	e056      	b.n	8005a3a <low_level_init+0x236>
      switch (PHYLinkState)
 800598c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005990:	3b02      	subs	r3, #2
 8005992:	2b03      	cmp	r3, #3
 8005994:	d82a      	bhi.n	80059ec <low_level_init+0x1e8>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <low_level_init+0x198>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059bf 	.word	0x080059bf
 80059a4:	080059cf 	.word	0x080059cf
 80059a8:	080059df 	.word	0x080059df
        duplex = ETH_FULLDUPLEX_MODE;
 80059ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80059b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80059bc:	e01f      	b.n	80059fe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80059c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80059cc:	e017      	b.n	80059fe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80059ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80059dc:	e00f      	b.n	80059fe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80059ea:	e008      	b.n	80059fe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80059ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80059f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80059fc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80059fe:	f107 0310 	add.w	r3, r7, #16
 8005a02:	4619      	mov	r1, r3
 8005a04:	480f      	ldr	r0, [pc, #60]	; (8005a44 <low_level_init+0x240>)
 8005a06:	f7fd f9bf 	bl	8002d88 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8005a10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005a16:	f107 0310 	add.w	r3, r7, #16
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4809      	ldr	r0, [pc, #36]	; (8005a44 <low_level_init+0x240>)
 8005a1e:	f7fd fa9d 	bl	8002f5c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005a22:	4808      	ldr	r0, [pc, #32]	; (8005a44 <low_level_init+0x240>)
 8005a24:	f7fc fd48 	bl	80024b8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f007 fd3f 	bl	800d4ac <netif_set_up>
    netif_set_link_up(netif);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f007 fdda 	bl	800d5e8 <netif_set_link_up>
}
 8005a34:	e001      	b.n	8005a3a <low_level_init+0x236>
    Error_Handler();
 8005a36:	f7fb fdad 	bl	8001594 <Error_Handler>
}
 8005a3a:	bf00      	nop
 8005a3c:	37a8      	adds	r7, #168	; 0xa8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20004fec 	.word	0x20004fec
 8005a48:	40028000 	.word	0x40028000
 8005a4c:	200002a0 	.word	0x200002a0
 8005a50:	20000200 	.word	0x20000200
 8005a54:	2000509c 	.word	0x2000509c
 8005a58:	0801d7c0 	.word	0x0801d7c0
 8005a5c:	20004fe4 	.word	0x20004fe4
 8005a60:	20004fe8 	.word	0x20004fe8
 8005a64:	0801a58c 	.word	0x0801a58c
 8005a68:	08005bd1 	.word	0x08005bd1
 8005a6c:	2000000c 	.word	0x2000000c
 8005a70:	200050d4 	.word	0x200050d4

08005a74 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b092      	sub	sp, #72	; 0x48
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	2230      	movs	r2, #48	; 0x30
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f011 fc8e 	bl	80173b6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	2230      	movs	r2, #48	; 0x30
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f011 fc87 	bl	80173b6 <memset>

  for(q = p; q != NULL; q = q->next)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8005aac:	e045      	b.n	8005b3a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d902      	bls.n	8005aba <low_level_output+0x46>
      return ERR_IF;
 8005ab4:	f06f 030b 	mvn.w	r3, #11
 8005ab8:	e065      	b.n	8005b86 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	3348      	adds	r3, #72	; 0x48
 8005aca:	443b      	add	r3, r7
 8005acc:	3b3c      	subs	r3, #60	; 0x3c
 8005ace:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad2:	895b      	ldrh	r3, [r3, #10]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	3348      	adds	r3, #72	; 0x48
 8005ae2:	443b      	add	r3, r7
 8005ae4:	3b38      	subs	r3, #56	; 0x38
 8005ae6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d011      	beq.n	8005b12 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af0:	1e5a      	subs	r2, r3, #1
 8005af2:	f107 000c 	add.w	r0, r7, #12
 8005af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005af8:	460b      	mov	r3, r1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	440b      	add	r3, r1
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	18c1      	adds	r1, r0, r3
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3348      	adds	r3, #72	; 0x48
 8005b0c:	443b      	add	r3, r7
 8005b0e:	3b34      	subs	r3, #52	; 0x34
 8005b10:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	3348      	adds	r3, #72	; 0x48
 8005b26:	443b      	add	r3, r7
 8005b28:	3b34      	subs	r3, #52	; 0x34
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b30:	3301      	adds	r3, #1
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	643b      	str	r3, [r7, #64]	; 0x40
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1b6      	bne.n	8005aae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	891b      	ldrh	r3, [r3, #8]
 8005b44:	461a      	mov	r2, r3
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <low_level_output+0x11c>)
 8005b48:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005b4a:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <low_level_output+0x11c>)
 8005b4c:	f107 030c 	add.w	r3, r7, #12
 8005b50:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005b52:	4a0f      	ldr	r2, [pc, #60]	; (8005b90 <low_level_output+0x11c>)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f008 f9fd 	bl	800df58 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005b5e:	490c      	ldr	r1, [pc, #48]	; (8005b90 <low_level_output+0x11c>)
 8005b60:	480c      	ldr	r0, [pc, #48]	; (8005b94 <low_level_output+0x120>)
 8005b62:	f7fc fdb7 	bl	80026d4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005b66:	bf00      	nop
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <low_level_output+0x124>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fe17 	bl	80067a4 <osSemaphoreAcquire>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f5      	bne.n	8005b68 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005b7c:	4805      	ldr	r0, [pc, #20]	; (8005b94 <low_level_output+0x120>)
 8005b7e:	f7fc ff3d 	bl	80029fc <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005b82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3748      	adds	r7, #72	; 0x48
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000509c 	.word	0x2000509c
 8005b94:	20004fec 	.word	0x20004fec
 8005b98:	20004fe8 	.word	0x20004fe8

08005b9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <low_level_input+0x2c>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005bb0:	f107 030c 	add.w	r3, r7, #12
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4805      	ldr	r0, [pc, #20]	; (8005bcc <low_level_input+0x30>)
 8005bb8:	f7fc fde8 	bl	800278c <HAL_ETH_ReadData>
  }

  return p;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20004fe0 	.word	0x20004fe0
 8005bcc:	20004fec 	.word	0x20004fec

08005bd0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <ethernetif_input+0x50>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fddb 	bl	80067a4 <osSemaphoreAcquire>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f5      	bne.n	8005be0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005bf4:	68b8      	ldr	r0, [r7, #8]
 8005bf6:	f7ff ffd1 	bl	8005b9c <low_level_input>
 8005bfa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	4798      	blx	r3
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f008 f8fa 	bl	800de0c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1ea      	bne.n	8005bf4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c1e:	e7df      	b.n	8005be0 <ethernetif_input+0x10>
 8005c20:	20004fe4 	.word	0x20004fe4

08005c24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <ethernetif_init+0x1c>
 8005c32:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <ethernetif_init+0x48>)
 8005c34:	f44f 720d 	mov.w	r2, #564	; 0x234
 8005c38:	490d      	ldr	r1, [pc, #52]	; (8005c70 <ethernetif_init+0x4c>)
 8005c3a:	480e      	ldr	r0, [pc, #56]	; (8005c74 <ethernetif_init+0x50>)
 8005c3c:	f011 fc58 	bl	80174f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2273      	movs	r2, #115	; 0x73
 8005c44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2274      	movs	r2, #116	; 0x74
 8005c4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <ethernetif_init+0x54>)
 8005c54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <ethernetif_init+0x58>)
 8005c5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fdd1 	bl	8005804 <low_level_init>

  return ERR_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	0801a594 	.word	0x0801a594
 8005c70:	0801a5b0 	.word	0x0801a5b0
 8005c74:	0801a5c0 	.word	0x0801a5c0
 8005c78:	080150b9 	.word	0x080150b9
 8005c7c:	08005a75 	.word	0x08005a75

08005c80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005c8c:	68f9      	ldr	r1, [r7, #12]
 8005c8e:	4809      	ldr	r0, [pc, #36]	; (8005cb4 <pbuf_free_custom+0x34>)
 8005c90:	f007 f9f8 	bl	800d084 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <pbuf_free_custom+0x38>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d107      	bne.n	8005cac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <pbuf_free_custom+0x38>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <pbuf_free_custom+0x3c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fde2 	bl	8006870 <osSemaphoreRelease>
  }
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	0801d7c0 	.word	0x0801d7c0
 8005cb8:	20004fe0 	.word	0x20004fe0
 8005cbc:	20004fe4 	.word	0x20004fe4

08005cc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005cc4:	f7fc f98e 	bl	8001fe4 <HAL_GetTick>
 8005cc8:	4603      	mov	r3, r0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	60da      	str	r2, [r3, #12]
 8005ce6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a52      	ldr	r2, [pc, #328]	; (8005e38 <HAL_ETH_MspInit+0x168>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f040 809e 	bne.w	8005e30 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005cf4:	4b51      	ldr	r3, [pc, #324]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	4a50      	ldr	r2, [pc, #320]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005d00:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	4b4b      	ldr	r3, [pc, #300]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	4a4a      	ldr	r2, [pc, #296]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d16:	6313      	str	r3, [r2, #48]	; 0x30
 8005d18:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4b45      	ldr	r3, [pc, #276]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	4a44      	ldr	r2, [pc, #272]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d30:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d3c:	4b3f      	ldr	r3, [pc, #252]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4a3e      	ldr	r2, [pc, #248]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	6313      	str	r3, [r2, #48]	; 0x30
 8005d48:	4b3c      	ldr	r3, [pc, #240]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d54:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d60:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d6c:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	4a32      	ldr	r2, [pc, #200]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d72:	f043 0302 	orr.w	r3, r3, #2
 8005d76:	6313      	str	r3, [r2, #48]	; 0x30
 8005d78:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d84:	4b2d      	ldr	r3, [pc, #180]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d90:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <HAL_ETH_MspInit+0x16c>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005d9c:	2332      	movs	r3, #50	; 0x32
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da0:	2302      	movs	r3, #2
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005da8:	2303      	movs	r3, #3
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dac:	230b      	movs	r3, #11
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005db4:	4619      	mov	r1, r3
 8005db6:	4822      	ldr	r0, [pc, #136]	; (8005e40 <HAL_ETH_MspInit+0x170>)
 8005db8:	f7fd fd50 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005dbc:	2386      	movs	r3, #134	; 0x86
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dcc:	230b      	movs	r3, #11
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	481b      	ldr	r0, [pc, #108]	; (8005e44 <HAL_ETH_MspInit+0x174>)
 8005dd8:	f7fd fd40 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de2:	2302      	movs	r3, #2
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dea:	2303      	movs	r3, #3
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dee:	230b      	movs	r3, #11
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df6:	4619      	mov	r1, r3
 8005df8:	4813      	ldr	r0, [pc, #76]	; (8005e48 <HAL_ETH_MspInit+0x178>)
 8005dfa:	f7fd fd2f 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005dfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e04:	2302      	movs	r3, #2
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e10:	230b      	movs	r3, #11
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e18:	4619      	mov	r1, r3
 8005e1a:	480c      	ldr	r0, [pc, #48]	; (8005e4c <HAL_ETH_MspInit+0x17c>)
 8005e1c:	f7fd fd1e 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005e20:	2200      	movs	r2, #0
 8005e22:	2105      	movs	r1, #5
 8005e24:	203d      	movs	r0, #61	; 0x3d
 8005e26:	f7fc f9c5 	bl	80021b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005e2a:	203d      	movs	r0, #61	; 0x3d
 8005e2c:	f7fc f9de 	bl	80021ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005e30:	bf00      	nop
 8005e32:	3738      	adds	r7, #56	; 0x38
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40028000 	.word	0x40028000
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	40020800 	.word	0x40020800
 8005e44:	40020000 	.word	0x40020000
 8005e48:	40020400 	.word	0x40020400
 8005e4c:	40021800 	.word	0x40021800

08005e50 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005e54:	4802      	ldr	r0, [pc, #8]	; (8005e60 <ETH_PHY_IO_Init+0x10>)
 8005e56:	f7fd f89b 	bl	8002f90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20004fec 	.word	0x20004fec

08005e64 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return 0;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	4807      	ldr	r0, [pc, #28]	; (8005ea4 <ETH_PHY_IO_ReadReg+0x30>)
 8005e88:	f7fc feea 	bl	8002c60 <HAL_ETH_ReadPHYRegister>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e96:	e000      	b.n	8005e9a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20004fec 	.word	0x20004fec

08005ea8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	68f9      	ldr	r1, [r7, #12]
 8005eba:	4807      	ldr	r0, [pc, #28]	; (8005ed8 <ETH_PHY_IO_WriteReg+0x30>)
 8005ebc:	f7fc ff1b 	bl	8002cf6 <HAL_ETH_WritePHYRegister>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eca:	e000      	b.n	8005ece <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20004fec 	.word	0x20004fec

08005edc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ee0:	f7fc f880 	bl	8001fe4 <HAL_GetTick>
 8005ee4:	4603      	mov	r3, r0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0a0      	sub	sp, #128	; 0x80
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005ef4:	f107 0308 	add.w	r3, r7, #8
 8005ef8:	2264      	movs	r2, #100	; 0x64
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f011 fa5a 	bl	80173b6 <memset>
  int32_t PHYLinkState = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f0e:	2300      	movs	r3, #0
 8005f10:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005f16:	483a      	ldr	r0, [pc, #232]	; (8006000 <ethernet_link_thread+0x114>)
 8005f18:	f7fb ffb3 	bl	8001e82 <LAN8742_GetLinkState>
 8005f1c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <ethernet_link_thread+0x5e>
 8005f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	dc09      	bgt.n	8005f4a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005f36:	4833      	ldr	r0, [pc, #204]	; (8006004 <ethernet_link_thread+0x118>)
 8005f38:	f7fc fb4c 	bl	80025d4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005f3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f3e:	f007 fb21 	bl	800d584 <netif_set_down>
    netif_set_link_down(netif);
 8005f42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f44:	f007 fb84 	bl	800d650 <netif_set_link_down>
 8005f48:	e055      	b.n	8005ff6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d14e      	bne.n	8005ff6 <ethernet_link_thread+0x10a>
 8005f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	dd4b      	ble.n	8005ff6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f60:	3b02      	subs	r3, #2
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d82a      	bhi.n	8005fbc <ethernet_link_thread+0xd0>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <ethernet_link_thread+0x80>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f7d 	.word	0x08005f7d
 8005f70:	08005f8f 	.word	0x08005f8f
 8005f74:	08005f9f 	.word	0x08005f9f
 8005f78:	08005faf 	.word	0x08005faf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f80:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f86:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005f8c:	e017      	b.n	8005fbe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f96:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005f9c:	e00f      	b.n	8005fbe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fa2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005fac:	e007      	b.n	8005fbe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005fba:	e000      	b.n	8005fbe <ethernet_link_thread+0xd2>
    default:
      break;
 8005fbc:	bf00      	nop
    }

    if(linkchanged)
 8005fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d018      	beq.n	8005ff6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005fc4:	f107 0308 	add.w	r3, r7, #8
 8005fc8:	4619      	mov	r1, r3
 8005fca:	480e      	ldr	r0, [pc, #56]	; (8006004 <ethernet_link_thread+0x118>)
 8005fcc:	f7fc fedc 	bl	8002d88 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005fd8:	f107 0308 	add.w	r3, r7, #8
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4809      	ldr	r0, [pc, #36]	; (8006004 <ethernet_link_thread+0x118>)
 8005fe0:	f7fc ffbc 	bl	8002f5c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005fe4:	4807      	ldr	r0, [pc, #28]	; (8006004 <ethernet_link_thread+0x118>)
 8005fe6:	f7fc fa07 	bl	80023f8 <HAL_ETH_Start>
      netif_set_up(netif);
 8005fea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fec:	f007 fa5e 	bl	800d4ac <netif_set_up>
      netif_set_link_up(netif);
 8005ff0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ff2:	f007 faf9 	bl	800d5e8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005ff6:	2064      	movs	r0, #100	; 0x64
 8005ff8:	f000 f9c2 	bl	8006380 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005ffc:	e78b      	b.n	8005f16 <ethernet_link_thread+0x2a>
 8005ffe:	bf00      	nop
 8006000:	200050d4 	.word	0x200050d4
 8006004:	20004fec 	.word	0x20004fec

08006008 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006010:	4812      	ldr	r0, [pc, #72]	; (800605c <HAL_ETH_RxAllocateCallback+0x54>)
 8006012:	f006 ffc3 	bl	800cf9c <memp_malloc_pool>
 8006016:	60f8      	str	r0, [r7, #12]
  if (p)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d014      	beq.n	8006048 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f103 0220 	add.w	r2, r3, #32
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a0d      	ldr	r2, [pc, #52]	; (8006060 <HAL_ETH_RxAllocateCallback+0x58>)
 800602c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006036:	9201      	str	r2, [sp, #4]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2241      	movs	r2, #65	; 0x41
 800603e:	2100      	movs	r1, #0
 8006040:	2000      	movs	r0, #0
 8006042:	f007 fd29 	bl	800da98 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006046:	e005      	b.n	8006054 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_ETH_RxAllocateCallback+0x5c>)
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	0801d7c0 	.word	0x0801d7c0
 8006060:	08005c81 	.word	0x08005c81
 8006064:	20004fe0 	.word	0x20004fe0

08006068 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3b20      	subs	r3, #32
 8006086:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2200      	movs	r2, #0
 8006092:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	887a      	ldrh	r2, [r7, #2]
 8006098:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e003      	b.n	80060b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	e009      	b.n	80060d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	891a      	ldrh	r2, [r3, #8]
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	4413      	add	r3, r2
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f2      	bne.n	80060c0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff fb2c 	bl	800573c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80060e4:	bf00      	nop
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f007 fe89 	bl	800de0c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006116:	f3ef 8305 	mrs	r3, IPSR
 800611a:	60bb      	str	r3, [r7, #8]
  return(result);
 800611c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006122:	f3ef 8310 	mrs	r3, PRIMASK
 8006126:	607b      	str	r3, [r7, #4]
  return(result);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d105      	bne.n	800613a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800612e:	f3ef 8311 	mrs	r3, BASEPRI
 8006132:	603b      	str	r3, [r7, #0]
  return(result);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <osKernelInitialize+0x3a>
 800613a:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <osKernelInitialize+0x64>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d103      	bne.n	800614a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006142:	f06f 0305 	mvn.w	r3, #5
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e00c      	b.n	8006164 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <osKernelInitialize+0x64>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d105      	bne.n	800615e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006152:	4b08      	ldr	r3, [pc, #32]	; (8006174 <osKernelInitialize+0x64>)
 8006154:	2201      	movs	r2, #1
 8006156:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e002      	b.n	8006164 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800615e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	200050f4 	.word	0x200050f4

08006178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800617e:	f3ef 8305 	mrs	r3, IPSR
 8006182:	60bb      	str	r3, [r7, #8]
  return(result);
 8006184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10f      	bne.n	80061aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618a:	f3ef 8310 	mrs	r3, PRIMASK
 800618e:	607b      	str	r3, [r7, #4]
  return(result);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d105      	bne.n	80061a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006196:	f3ef 8311 	mrs	r3, BASEPRI
 800619a:	603b      	str	r3, [r7, #0]
  return(result);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <osKernelStart+0x3a>
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <osKernelStart+0x68>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d103      	bne.n	80061b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80061aa:	f06f 0305 	mvn.w	r3, #5
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e010      	b.n	80061d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061b2:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <osKernelStart+0x68>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d109      	bne.n	80061ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061ba:	f7ff ffa2 	bl	8006102 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061be:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <osKernelStart+0x68>)
 80061c0:	2202      	movs	r2, #2
 80061c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061c4:	f002 f9e4 	bl	8008590 <vTaskStartScheduler>
      stat = osOK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e002      	b.n	80061d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80061ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061d4:	68fb      	ldr	r3, [r7, #12]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200050f4 	.word	0x200050f4

080061e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ea:	f3ef 8305 	mrs	r3, IPSR
 80061ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f6:	f3ef 8310 	mrs	r3, PRIMASK
 80061fa:	607b      	str	r3, [r7, #4]
  return(result);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006202:	f3ef 8311 	mrs	r3, BASEPRI
 8006206:	603b      	str	r3, [r7, #0]
  return(result);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <osKernelGetTickCount+0x3a>
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <osKernelGetTickCount+0x4c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d103      	bne.n	800621e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006216:	f002 faed 	bl	80087f4 <xTaskGetTickCountFromISR>
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	e002      	b.n	8006224 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800621e:	f002 fad9 	bl	80087d4 <xTaskGetTickCount>
 8006222:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200050f4 	.word	0x200050f4

08006234 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b090      	sub	sp, #64	; 0x40
 8006238:	af04      	add	r7, sp, #16
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006244:	f3ef 8305 	mrs	r3, IPSR
 8006248:	61fb      	str	r3, [r7, #28]
  return(result);
 800624a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 808f 	bne.w	8006370 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006252:	f3ef 8310 	mrs	r3, PRIMASK
 8006256:	61bb      	str	r3, [r7, #24]
  return(result);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800625e:	f3ef 8311 	mrs	r3, BASEPRI
 8006262:	617b      	str	r3, [r7, #20]
  return(result);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <osThreadNew+0x3e>
 800626a:	4b44      	ldr	r3, [pc, #272]	; (800637c <osThreadNew+0x148>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d07e      	beq.n	8006370 <osThreadNew+0x13c>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d07b      	beq.n	8006370 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800627c:	2318      	movs	r3, #24
 800627e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006288:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d045      	beq.n	800631c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <osThreadNew+0x6a>
        name = attr->name;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <osThreadNew+0x90>
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2b38      	cmp	r3, #56	; 0x38
 80062b6:	d805      	bhi.n	80062c4 <osThreadNew+0x90>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <osThreadNew+0x94>
        return (NULL);
 80062c4:	2300      	movs	r3, #0
 80062c6:	e054      	b.n	8006372 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <osThreadNew+0xca>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2bbb      	cmp	r3, #187	; 0xbb
 80062e6:	d90a      	bls.n	80062fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d006      	beq.n	80062fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <osThreadNew+0xca>
        mem = 1;
 80062f8:	2301      	movs	r3, #1
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	e010      	b.n	8006320 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <osThreadNew+0xec>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d108      	bne.n	8006320 <osThreadNew+0xec>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <osThreadNew+0xec>
          mem = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	e001      	b.n	8006320 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d110      	bne.n	8006348 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800633a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f001 ff31 	bl	80081a4 <xTaskCreateStatic>
 8006342:	4603      	mov	r3, r0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e013      	b.n	8006370 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d110      	bne.n	8006370 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	b29a      	uxth	r2, r3
 8006352:	f107 0310 	add.w	r3, r7, #16
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f001 ff82 	bl	800826a <xTaskCreate>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d001      	beq.n	8006370 <osThreadNew+0x13c>
          hTask = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006370:	693b      	ldr	r3, [r7, #16]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3730      	adds	r7, #48	; 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	200050f4 	.word	0x200050f4

08006380 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006388:	f3ef 8305 	mrs	r3, IPSR
 800638c:	613b      	str	r3, [r7, #16]
  return(result);
 800638e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10f      	bne.n	80063b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006394:	f3ef 8310 	mrs	r3, PRIMASK
 8006398:	60fb      	str	r3, [r7, #12]
  return(result);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063a0:	f3ef 8311 	mrs	r3, BASEPRI
 80063a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <osDelay+0x3c>
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <osDelay+0x58>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d103      	bne.n	80063bc <osDelay+0x3c>
    stat = osErrorISR;
 80063b4:	f06f 0305 	mvn.w	r3, #5
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e007      	b.n	80063cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f002 f8ac 	bl	8008524 <vTaskDelay>
    }
  }

  return (stat);
 80063cc:	697b      	ldr	r3, [r7, #20]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	200050f4 	.word	0x200050f4

080063dc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e8:	f3ef 8305 	mrs	r3, IPSR
 80063ec:	613b      	str	r3, [r7, #16]
  return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 8085 	bne.w	8006500 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f6:	f3ef 8310 	mrs	r3, PRIMASK
 80063fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006402:	f3ef 8311 	mrs	r3, BASEPRI
 8006406:	60bb      	str	r3, [r7, #8]
  return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osMutexNew+0x3a>
 800640e:	4b3f      	ldr	r3, [pc, #252]	; (800650c <osMutexNew+0x130>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d074      	beq.n	8006500 <osMutexNew+0x124>
    if (attr != NULL) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <osMutexNew+0x48>
      type = attr->attr_bits;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	e001      	b.n	8006428 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <osMutexNew+0x5c>
      rmtx = 1U;
 8006432:	2301      	movs	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
 8006436:	e001      	b.n	800643c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d15c      	bne.n	8006500 <osMutexNew+0x124>
      mem = -1;
 8006446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d015      	beq.n	800647e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <osMutexNew+0x8c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	2b4f      	cmp	r3, #79	; 0x4f
 8006460:	d902      	bls.n	8006468 <osMutexNew+0x8c>
          mem = 1;
 8006462:	2301      	movs	r3, #1
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e00c      	b.n	8006482 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <osMutexNew+0xa6>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <osMutexNew+0xa6>
            mem = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	61bb      	str	r3, [r7, #24]
 800647c:	e001      	b.n	8006482 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d112      	bne.n	80064ae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	4619      	mov	r1, r3
 8006494:	2004      	movs	r0, #4
 8006496:	f000 feb8 	bl	800720a <xQueueCreateMutexStatic>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24
 800649c:	e016      	b.n	80064cc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	4619      	mov	r1, r3
 80064a4:	2001      	movs	r0, #1
 80064a6:	f000 feb0 	bl	800720a <xQueueCreateMutexStatic>
 80064aa:	6278      	str	r0, [r7, #36]	; 0x24
 80064ac:	e00e      	b.n	80064cc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80064ba:	2004      	movs	r0, #4
 80064bc:	f000 fe8d 	bl	80071da <xQueueCreateMutex>
 80064c0:	6278      	str	r0, [r7, #36]	; 0x24
 80064c2:	e003      	b.n	80064cc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80064c4:	2001      	movs	r0, #1
 80064c6:	f000 fe88 	bl	80071da <xQueueCreateMutex>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00c      	beq.n	80064ec <osMutexNew+0x110>
        if (attr != NULL) {
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <osMutexNew+0x104>
          name = attr->name;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e001      	b.n	80064e4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064e8:	f001 fdd4 	bl	8008094 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d006      	beq.n	8006500 <osMutexNew+0x124>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006502:	4618      	mov	r0, r3
 8006504:	3728      	adds	r7, #40	; 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	200050f4 	.word	0x200050f4

08006510 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	613b      	str	r3, [r7, #16]
  return(result);
 8006534:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800653a:	f3ef 8310 	mrs	r3, PRIMASK
 800653e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d105      	bne.n	8006552 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006546:	f3ef 8311 	mrs	r3, BASEPRI
 800654a:	60bb      	str	r3, [r7, #8]
  return(result);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <osMutexAcquire+0x52>
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <osMutexAcquire+0xb8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d103      	bne.n	8006562 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800655a:	f06f 0305 	mvn.w	r3, #5
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e02c      	b.n	80065bc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006568:	f06f 0303 	mvn.w	r3, #3
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	e025      	b.n	80065bc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d011      	beq.n	800659a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	69b8      	ldr	r0, [r7, #24]
 800657a:	f000 fe97 	bl	80072ac <xQueueTakeMutexRecursive>
 800657e:	4603      	mov	r3, r0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d01b      	beq.n	80065bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800658a:	f06f 0301 	mvn.w	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e014      	b.n	80065bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006592:	f06f 0302 	mvn.w	r3, #2
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e010      	b.n	80065bc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	69b8      	ldr	r0, [r7, #24]
 800659e:	f001 fa51 	bl	8007a44 <xQueueSemaphoreTake>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d009      	beq.n	80065bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80065ae:	f06f 0301 	mvn.w	r3, #1
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e002      	b.n	80065bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065b6:	f06f 0302 	mvn.w	r3, #2
 80065ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065bc:	69fb      	ldr	r3, [r7, #28]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200050f4 	.word	0x200050f4

080065cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e8:	f3ef 8305 	mrs	r3, IPSR
 80065ec:	613b      	str	r3, [r7, #16]
  return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f4:	f3ef 8310 	mrs	r3, PRIMASK
 80065f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006600:	f3ef 8311 	mrs	r3, BASEPRI
 8006604:	60bb      	str	r3, [r7, #8]
  return(result);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <osMutexRelease+0x50>
 800660c:	4b16      	ldr	r3, [pc, #88]	; (8006668 <osMutexRelease+0x9c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d103      	bne.n	800661c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006614:	f06f 0305 	mvn.w	r3, #5
 8006618:	61fb      	str	r3, [r7, #28]
 800661a:	e01f      	b.n	800665c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006622:	f06f 0303 	mvn.w	r3, #3
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	e018      	b.n	800665c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d009      	beq.n	8006644 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006630:	69b8      	ldr	r0, [r7, #24]
 8006632:	f000 fe05 	bl	8007240 <xQueueGiveMutexRecursive>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d00f      	beq.n	800665c <osMutexRelease+0x90>
        stat = osErrorResource;
 800663c:	f06f 0302 	mvn.w	r3, #2
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e00b      	b.n	800665c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006644:	2300      	movs	r3, #0
 8006646:	2200      	movs	r2, #0
 8006648:	2100      	movs	r1, #0
 800664a:	69b8      	ldr	r0, [r7, #24]
 800664c:	f000 fed8 	bl	8007400 <xQueueGenericSend>
 8006650:	4603      	mov	r3, r0
 8006652:	2b01      	cmp	r3, #1
 8006654:	d002      	beq.n	800665c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006656:	f06f 0302 	mvn.w	r3, #2
 800665a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800665c:	69fb      	ldr	r3, [r7, #28]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200050f4 	.word	0x200050f4

0800666c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	; 0x30
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667c:	f3ef 8305 	mrs	r3, IPSR
 8006680:	61bb      	str	r3, [r7, #24]
  return(result);
 8006682:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006684:	2b00      	cmp	r3, #0
 8006686:	f040 8086 	bne.w	8006796 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668a:	f3ef 8310 	mrs	r3, PRIMASK
 800668e:	617b      	str	r3, [r7, #20]
  return(result);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006696:	f3ef 8311 	mrs	r3, BASEPRI
 800669a:	613b      	str	r3, [r7, #16]
  return(result);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <osSemaphoreNew+0x3e>
 80066a2:	4b3f      	ldr	r3, [pc, #252]	; (80067a0 <osSemaphoreNew+0x134>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d075      	beq.n	8006796 <osSemaphoreNew+0x12a>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d072      	beq.n	8006796 <osSemaphoreNew+0x12a>
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d86e      	bhi.n	8006796 <osSemaphoreNew+0x12a>
    mem = -1;
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d015      	beq.n	80066f0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d006      	beq.n	80066da <osSemaphoreNew+0x6e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	2b4f      	cmp	r3, #79	; 0x4f
 80066d2:	d902      	bls.n	80066da <osSemaphoreNew+0x6e>
        mem = 1;
 80066d4:	2301      	movs	r3, #1
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	e00c      	b.n	80066f4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <osSemaphoreNew+0x88>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <osSemaphoreNew+0x88>
          mem = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	e001      	b.n	80066f4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fa:	d04c      	beq.n	8006796 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d128      	bne.n	8006754 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d10a      	bne.n	800671e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2203      	movs	r2, #3
 800670e:	9200      	str	r2, [sp, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	2100      	movs	r1, #0
 8006714:	2001      	movs	r0, #1
 8006716:	f000 fc5f 	bl	8006fd8 <xQueueGenericCreateStatic>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24
 800671c:	e005      	b.n	800672a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800671e:	2203      	movs	r2, #3
 8006720:	2100      	movs	r1, #0
 8006722:	2001      	movs	r0, #1
 8006724:	f000 fcda 	bl	80070dc <xQueueGenericCreate>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d022      	beq.n	8006776 <osSemaphoreNew+0x10a>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01f      	beq.n	8006776 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006736:	2300      	movs	r3, #0
 8006738:	2200      	movs	r2, #0
 800673a:	2100      	movs	r1, #0
 800673c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800673e:	f000 fe5f 	bl	8007400 <xQueueGenericSend>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d016      	beq.n	8006776 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800674a:	f001 fb55 	bl	8007df8 <vQueueDelete>
            hSemaphore = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
 8006752:	e010      	b.n	8006776 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d108      	bne.n	800676c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	461a      	mov	r2, r3
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fdda 	bl	800731c <xQueueCreateCountingSemaphoreStatic>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24
 800676a:	e004      	b.n	8006776 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fe0f 	bl	8007392 <xQueueCreateCountingSemaphore>
 8006774:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <osSemaphoreNew+0x11e>
          name = attr->name;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	e001      	b.n	800678e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800678e:	69f9      	ldr	r1, [r7, #28]
 8006790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006792:	f001 fc7f 	bl	8008094 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006798:	4618      	mov	r0, r3
 800679a:	3728      	adds	r7, #40	; 0x28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200050f4 	.word	0x200050f4

080067a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80067bc:	f06f 0303 	mvn.w	r3, #3
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	e04b      	b.n	800685c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c4:	f3ef 8305 	mrs	r3, IPSR
 80067c8:	617b      	str	r3, [r7, #20]
  return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10f      	bne.n	80067f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d0:	f3ef 8310 	mrs	r3, PRIMASK
 80067d4:	613b      	str	r3, [r7, #16]
  return(result);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067dc:	f3ef 8311 	mrs	r3, BASEPRI
 80067e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d026      	beq.n	8006836 <osSemaphoreAcquire+0x92>
 80067e8:	4b1f      	ldr	r3, [pc, #124]	; (8006868 <osSemaphoreAcquire+0xc4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d122      	bne.n	8006836 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80067f6:	f06f 0303 	mvn.w	r3, #3
 80067fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80067fc:	e02d      	b.n	800685a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006802:	f107 0308 	add.w	r3, r7, #8
 8006806:	461a      	mov	r2, r3
 8006808:	2100      	movs	r1, #0
 800680a:	69b8      	ldr	r0, [r7, #24]
 800680c:	f001 fa2e 	bl	8007c6c <xQueueReceiveFromISR>
 8006810:	4603      	mov	r3, r0
 8006812:	2b01      	cmp	r3, #1
 8006814:	d003      	beq.n	800681e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006816:	f06f 0302 	mvn.w	r3, #2
 800681a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800681c:	e01d      	b.n	800685a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01a      	beq.n	800685a <osSemaphoreAcquire+0xb6>
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <osSemaphoreAcquire+0xc8>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006834:	e011      	b.n	800685a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	69b8      	ldr	r0, [r7, #24]
 800683a:	f001 f903 	bl	8007a44 <xQueueSemaphoreTake>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d00b      	beq.n	800685c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800684a:	f06f 0301 	mvn.w	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e004      	b.n	800685c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006852:	f06f 0302 	mvn.w	r3, #2
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e000      	b.n	800685c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800685a:	bf00      	nop
      }
    }
  }

  return (stat);
 800685c:	69fb      	ldr	r3, [r7, #28]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	200050f4 	.word	0x200050f4
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006886:	f06f 0303 	mvn.w	r3, #3
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e03e      	b.n	800690c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	617b      	str	r3, [r7, #20]
  return(result);
 8006894:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10f      	bne.n	80068ba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689a:	f3ef 8310 	mrs	r3, PRIMASK
 800689e:	613b      	str	r3, [r7, #16]
  return(result);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068a6:	f3ef 8311 	mrs	r3, BASEPRI
 80068aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01e      	beq.n	80068f0 <osSemaphoreRelease+0x80>
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <osSemaphoreRelease+0xa8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d11a      	bne.n	80068f0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068be:	f107 0308 	add.w	r3, r7, #8
 80068c2:	4619      	mov	r1, r3
 80068c4:	69b8      	ldr	r0, [r7, #24]
 80068c6:	f000 ff41 	bl	800774c <xQueueGiveFromISR>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d003      	beq.n	80068d8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80068d0:	f06f 0302 	mvn.w	r3, #2
 80068d4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068d6:	e018      	b.n	800690a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d015      	beq.n	800690a <osSemaphoreRelease+0x9a>
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <osSemaphoreRelease+0xac>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068ee:	e00c      	b.n	800690a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80068f0:	2300      	movs	r3, #0
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	69b8      	ldr	r0, [r7, #24]
 80068f8:	f000 fd82 	bl	8007400 <xQueueGenericSend>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d004      	beq.n	800690c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006902:	f06f 0302 	mvn.w	r3, #2
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e000      	b.n	800690c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800690a:	bf00      	nop
    }
  }

  return (stat);
 800690c:	69fb      	ldr	r3, [r7, #28]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200050f4 	.word	0x200050f4
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800692c:	f3ef 8305 	mrs	r3, IPSR
 8006930:	617b      	str	r3, [r7, #20]
  return(result);
 8006932:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10f      	bne.n	8006958 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006938:	f3ef 8310 	mrs	r3, PRIMASK
 800693c:	613b      	str	r3, [r7, #16]
  return(result);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006944:	f3ef 8311 	mrs	r3, BASEPRI
 8006948:	60fb      	str	r3, [r7, #12]
  return(result);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <osSemaphoreDelete+0x40>
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <osSemaphoreDelete+0x68>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d103      	bne.n	8006960 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006958:	f06f 0305 	mvn.w	r3, #5
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e00e      	b.n	800697e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8006966:	f06f 0303 	mvn.w	r3, #3
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e007      	b.n	800697e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800696e:	69b8      	ldr	r0, [r7, #24]
 8006970:	f001 fbba 	bl	80080e8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006978:	69b8      	ldr	r0, [r7, #24]
 800697a:	f001 fa3d 	bl	8007df8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800697e:	69fb      	ldr	r3, [r7, #28]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200050f4 	.word	0x200050f4

0800698c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	; 0x30
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006998:	2300      	movs	r3, #0
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800699c:	f3ef 8305 	mrs	r3, IPSR
 80069a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80069a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d16f      	bne.n	8006a88 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a8:	f3ef 8310 	mrs	r3, PRIMASK
 80069ac:	617b      	str	r3, [r7, #20]
  return(result);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069b4:	f3ef 8311 	mrs	r3, BASEPRI
 80069b8:	613b      	str	r3, [r7, #16]
  return(result);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <osMessageQueueNew+0x3c>
 80069c0:	4b34      	ldr	r3, [pc, #208]	; (8006a94 <osMessageQueueNew+0x108>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d05f      	beq.n	8006a88 <osMessageQueueNew+0xfc>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d05c      	beq.n	8006a88 <osMessageQueueNew+0xfc>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d059      	beq.n	8006a88 <osMessageQueueNew+0xfc>
    mem = -1;
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d029      	beq.n	8006a34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d012      	beq.n	8006a0e <osMessageQueueNew+0x82>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2b4f      	cmp	r3, #79	; 0x4f
 80069ee:	d90e      	bls.n	8006a0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d302      	bcc.n	8006a0e <osMessageQueueNew+0x82>
        mem = 1;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	623b      	str	r3, [r7, #32]
 8006a0c:	e014      	b.n	8006a38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d110      	bne.n	8006a38 <osMessageQueueNew+0xac>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d108      	bne.n	8006a38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <osMessageQueueNew+0xac>
          mem = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	e001      	b.n	8006a38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10b      	bne.n	8006a56 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2100      	movs	r1, #0
 8006a48:	9100      	str	r1, [sp, #0]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fac3 	bl	8006fd8 <xQueueGenericCreateStatic>
 8006a52:	6278      	str	r0, [r7, #36]	; 0x24
 8006a54:	e008      	b.n	8006a68 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 fb3b 	bl	80070dc <xQueueGenericCreate>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <osMessageQueueNew+0xf0>
        name = attr->name;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e001      	b.n	8006a80 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006a80:	69f9      	ldr	r1, [r7, #28]
 8006a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a84:	f001 fb06 	bl	8008094 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3728      	adds	r7, #40	; 0x28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	200050f4 	.word	0x200050f4

08006a98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab0:	f3ef 8305 	mrs	r3, IPSR
 8006ab4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ab6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10f      	bne.n	8006adc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006abc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	617b      	str	r3, [r7, #20]
  return(result);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d02c      	beq.n	8006b2e <osMessageQueuePut+0x96>
 8006ad4:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <osMessageQueuePut+0xe0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d128      	bne.n	8006b2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <osMessageQueuePut+0x56>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <osMessageQueuePut+0x56>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006aee:	f06f 0303 	mvn.w	r3, #3
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006af4:	e039      	b.n	8006b6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006afa:	f107 0210 	add.w	r2, r7, #16
 8006afe:	2300      	movs	r3, #0
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	6a38      	ldr	r0, [r7, #32]
 8006b04:	f000 fd82 	bl	800760c <xQueueGenericSendFromISR>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d003      	beq.n	8006b16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006b0e:	f06f 0302 	mvn.w	r3, #2
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b14:	e029      	b.n	8006b6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d026      	beq.n	8006b6a <osMessageQueuePut+0xd2>
 8006b1c:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <osMessageQueuePut+0xe4>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b2c:	e01d      	b.n	8006b6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <osMessageQueuePut+0xa2>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006b3a:	f06f 0303 	mvn.w	r3, #3
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b40:	e014      	b.n	8006b6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b42:	2300      	movs	r3, #0
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	6a38      	ldr	r0, [r7, #32]
 8006b4a:	f000 fc59 	bl	8007400 <xQueueGenericSend>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d00b      	beq.n	8006b6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006b5a:	f06f 0301 	mvn.w	r3, #1
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b60:	e004      	b.n	8006b6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006b62:	f06f 0302 	mvn.w	r3, #2
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	e000      	b.n	8006b6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3728      	adds	r7, #40	; 0x28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200050f4 	.word	0x200050f4
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	; 0x28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b96:	f3ef 8305 	mrs	r3, IPSR
 8006b9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bae:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d02c      	beq.n	8006c14 <osMessageQueueGet+0x94>
 8006bba:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <osMessageQueueGet+0xdc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d128      	bne.n	8006c14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <osMessageQueueGet+0x54>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <osMessageQueueGet+0x54>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006bd4:	f06f 0303 	mvn.w	r3, #3
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bda:	e038      	b.n	8006c4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006be0:	f107 0310 	add.w	r3, r7, #16
 8006be4:	461a      	mov	r2, r3
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	6a38      	ldr	r0, [r7, #32]
 8006bea:	f001 f83f 	bl	8007c6c <xQueueReceiveFromISR>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d003      	beq.n	8006bfc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006bf4:	f06f 0302 	mvn.w	r3, #2
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bfa:	e028      	b.n	8006c4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d025      	beq.n	8006c4e <osMessageQueueGet+0xce>
 8006c02:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <osMessageQueueGet+0xe0>)
 8006c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c12:	e01c      	b.n	8006c4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <osMessageQueueGet+0xa0>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006c20:	f06f 0303 	mvn.w	r3, #3
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	e013      	b.n	8006c50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	6a38      	ldr	r0, [r7, #32]
 8006c2e:	f000 fe23 	bl	8007878 <xQueueReceive>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d00b      	beq.n	8006c50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006c3e:	f06f 0301 	mvn.w	r3, #1
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
 8006c44:	e004      	b.n	8006c50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006c46:	f06f 0302 	mvn.w	r3, #2
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	e000      	b.n	8006c50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3728      	adds	r7, #40	; 0x28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200050f4 	.word	0x200050f4
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <osMessageQueueGetCount+0x18>
    count = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	e01e      	b.n	8006cba <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7c:	f3ef 8305 	mrs	r3, IPSR
 8006c80:	617b      	str	r3, [r7, #20]
  return(result);
 8006c82:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10f      	bne.n	8006ca8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c88:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c94:	f3ef 8311 	mrs	r3, BASEPRI
 8006c98:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <osMessageQueueGetCount+0x4e>
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <osMessageQueueGetCount+0x60>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d104      	bne.n	8006cb2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006ca8:	69b8      	ldr	r0, [r7, #24]
 8006caa:	f001 f885 	bl	8007db8 <uxQueueMessagesWaitingFromISR>
 8006cae:	61f8      	str	r0, [r7, #28]
 8006cb0:	e003      	b.n	8006cba <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f001 f860 	bl	8007d78 <uxQueueMessagesWaiting>
 8006cb8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006cba:	69fb      	ldr	r3, [r7, #28]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	200050f4 	.word	0x200050f4

08006cc8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd4:	f3ef 8305 	mrs	r3, IPSR
 8006cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8006cda:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cec:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <osMessageQueueDelete+0x40>
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <osMessageQueueDelete+0x68>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d103      	bne.n	8006d08 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006d00:	f06f 0305 	mvn.w	r3, #5
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	e00e      	b.n	8006d26 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d103      	bne.n	8006d16 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006d0e:	f06f 0303 	mvn.w	r3, #3
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e007      	b.n	8006d26 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006d16:	69b8      	ldr	r0, [r7, #24]
 8006d18:	f001 f9e6 	bl	80080e8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006d20:	69b8      	ldr	r0, [r7, #24]
 8006d22:	f001 f869 	bl	8007df8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006d26:	69fb      	ldr	r3, [r7, #28]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	200050f4 	.word	0x200050f4

08006d34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a07      	ldr	r2, [pc, #28]	; (8006d60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a06      	ldr	r2, [pc, #24]	; (8006d64 <vApplicationGetIdleTaskMemory+0x30>)
 8006d4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	200050f8 	.word	0x200050f8
 8006d64:	200051b4 	.word	0x200051b4

08006d68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4a06      	ldr	r2, [pc, #24]	; (8006d98 <vApplicationGetTimerTaskMemory+0x30>)
 8006d7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d86:	601a      	str	r2, [r3, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	200053b4 	.word	0x200053b4
 8006d98:	20005470 	.word	0x20005470

08006d9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f103 0208 	add.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006db4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f103 0208 	add.w	r2, r3, #8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 0208 	add.w	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e54:	d103      	bne.n	8006e5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e00c      	b.n	8006e78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3308      	adds	r3, #8
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e002      	b.n	8006e6c <vListInsert+0x2e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d2f6      	bcs.n	8006e66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6892      	ldr	r2, [r2, #8]
 8006ec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6852      	ldr	r2, [r2, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d103      	bne.n	8006ee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1e5a      	subs	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10c      	bne.n	8006f32 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	b672      	cpsid	i
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	b662      	cpsie	i
 8006f2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006f32:	f002 fe13 	bl	8009b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f42:	fb01 f303 	mul.w	r3, r1, r3
 8006f46:	441a      	add	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	3b01      	subs	r3, #1
 8006f64:	68f9      	ldr	r1, [r7, #12]
 8006f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	441a      	add	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d114      	bne.n	8006fb2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3310      	adds	r3, #16
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 fdb5 	bl	8008b04 <xTaskRemoveFromEventList>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <xQueueGenericReset+0xd0>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	e009      	b.n	8006fc6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fef0 	bl	8006d9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3324      	adds	r3, #36	; 0x24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff feeb 	bl	8006d9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fc6:	f002 fdfd 	bl	8009bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fca:	2301      	movs	r3, #1
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08e      	sub	sp, #56	; 0x38
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10c      	bne.n	8007026 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <xQueueGenericCreateStatic+0x5a>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <xQueueGenericCreateStatic+0x5e>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xQueueGenericCreateStatic+0x60>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	b672      	cpsid	i
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	b662      	cpsie	i
 8007050:	623b      	str	r3, [r7, #32]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <xQueueGenericCreateStatic+0x8a>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <xQueueGenericCreateStatic+0x8e>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <xQueueGenericCreateStatic+0x90>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10c      	bne.n	8007086 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	b672      	cpsid	i
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	b662      	cpsie	i
 8007080:	61fb      	str	r3, [r7, #28]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007086:	2350      	movs	r3, #80	; 0x50
 8007088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b50      	cmp	r3, #80	; 0x50
 800708e:	d00c      	beq.n	80070aa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	b672      	cpsid	i
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	b662      	cpsie	i
 80070a4:	61bb      	str	r3, [r7, #24]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f847 	bl	8007160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10c      	bne.n	800710a <xQueueGenericCreate+0x2e>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	b672      	cpsid	i
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	b662      	cpsie	i
 8007104:	613b      	str	r3, [r7, #16]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	e004      	b.n	8007120 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	fb02 f303 	mul.w	r3, r2, r3
 800711e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	3350      	adds	r3, #80	; 0x50
 8007124:	4618      	mov	r0, r3
 8007126:	f002 fe45 	bl	8009db4 <pvPortMalloc>
 800712a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	3350      	adds	r3, #80	; 0x50
 800713a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007144:	79fa      	ldrb	r2, [r7, #7]
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4613      	mov	r3, r2
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f805 	bl	8007160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007156:	69bb      	ldr	r3, [r7, #24]
	}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e002      	b.n	8007182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800718e:	2101      	movs	r1, #1
 8007190:	69b8      	ldr	r0, [r7, #24]
 8007192:	f7ff feb7 	bl	8006f04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00e      	beq.n	80071d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071c6:	2300      	movs	r3, #0
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f917 	bl	8007400 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	4603      	mov	r3, r0
 80071e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071e4:	2301      	movs	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	461a      	mov	r2, r3
 80071f0:	6939      	ldr	r1, [r7, #16]
 80071f2:	6978      	ldr	r0, [r7, #20]
 80071f4:	f7ff ff72 	bl	80070dc <xQueueGenericCreate>
 80071f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff ffd3 	bl	80071a6 <prvInitialiseMutex>

		return xNewQueue;
 8007200:	68fb      	ldr	r3, [r7, #12]
	}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800720a:	b580      	push	{r7, lr}
 800720c:	b088      	sub	sp, #32
 800720e:	af02      	add	r7, sp, #8
 8007210:	4603      	mov	r3, r0
 8007212:	6039      	str	r1, [r7, #0]
 8007214:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007216:	2301      	movs	r3, #1
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2200      	movs	r2, #0
 8007226:	6939      	ldr	r1, [r7, #16]
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	f7ff fed5 	bl	8006fd8 <xQueueGenericCreateStatic>
 800722e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff ffb8 	bl	80071a6 <prvInitialiseMutex>

		return xNewQueue;
 8007236:	68fb      	ldr	r3, [r7, #12]
	}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10c      	bne.n	800726c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	b672      	cpsid	i
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	b662      	cpsie	i
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	689c      	ldr	r4, [r3, #8]
 8007270:	f001 fe12 	bl	8008e98 <xTaskGetCurrentTaskHandle>
 8007274:	4603      	mov	r3, r0
 8007276:	429c      	cmp	r4, r3
 8007278:	d111      	bne.n	800729e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	1e5a      	subs	r2, r3, #1
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800728c:	2300      	movs	r3, #0
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	6938      	ldr	r0, [r7, #16]
 8007294:	f000 f8b4 	bl	8007400 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007298:	2301      	movs	r3, #1
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e001      	b.n	80072a2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80072a2:	697b      	ldr	r3, [r7, #20]
	}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd90      	pop	{r4, r7, pc}

080072ac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10c      	bne.n	80072da <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	b672      	cpsid	i
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	b662      	cpsie	i
 80072d4:	60fb      	str	r3, [r7, #12]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	689c      	ldr	r4, [r3, #8]
 80072de:	f001 fddb 	bl	8008e98 <xTaskGetCurrentTaskHandle>
 80072e2:	4603      	mov	r3, r0
 80072e4:	429c      	cmp	r4, r3
 80072e6:	d107      	bne.n	80072f8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80072f2:	2301      	movs	r3, #1
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	e00c      	b.n	8007312 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6938      	ldr	r0, [r7, #16]
 80072fc:	f000 fba2 	bl	8007a44 <xQueueSemaphoreTake>
 8007300:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007312:	697b      	ldr	r3, [r7, #20]
	}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	bd90      	pop	{r4, r7, pc}

0800731c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10c      	bne.n	8007348 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	b672      	cpsid	i
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	b662      	cpsie	i
 8007342:	61bb      	str	r3, [r7, #24]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	429a      	cmp	r2, r3
 800734e:	d90c      	bls.n	800736a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	b672      	cpsid	i
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	b662      	cpsie	i
 8007364:	617b      	str	r3, [r7, #20]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800736a:	2302      	movs	r3, #2
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fe2f 	bl	8006fd8 <xQueueGenericCreateStatic>
 800737a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007388:	69fb      	ldr	r3, [r7, #28]
	}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10c      	bne.n	80073bc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	b672      	cpsid	i
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	b662      	cpsie	i
 80073b6:	613b      	str	r3, [r7, #16]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d90c      	bls.n	80073de <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
 80073d8:	60fb      	str	r3, [r7, #12]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80073de:	2202      	movs	r2, #2
 80073e0:	2100      	movs	r1, #0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fe7a 	bl	80070dc <xQueueGenericCreate>
 80073e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073f6:	697b      	ldr	r3, [r7, #20]
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <xQueueGenericSend+0x36>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	b672      	cpsid	i
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	b662      	cpsie	i
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <xQueueGenericSend+0x44>
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <xQueueGenericSend+0x48>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <xQueueGenericSend+0x4a>
 8007448:	2300      	movs	r3, #0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10c      	bne.n	8007468 <xQueueGenericSend+0x68>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	b672      	cpsid	i
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	b662      	cpsie	i
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d103      	bne.n	8007476 <xQueueGenericSend+0x76>
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <xQueueGenericSend+0x7a>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <xQueueGenericSend+0x7c>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <xQueueGenericSend+0x9a>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	b672      	cpsid	i
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	b662      	cpsie	i
 8007494:	623b      	str	r3, [r7, #32]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800749a:	f001 fd0d 	bl	8008eb8 <xTaskGetSchedulerState>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <xQueueGenericSend+0xaa>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <xQueueGenericSend+0xae>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <xQueueGenericSend+0xb0>
 80074ae:	2300      	movs	r3, #0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10c      	bne.n	80074ce <xQueueGenericSend+0xce>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	b672      	cpsid	i
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	b662      	cpsie	i
 80074c8:	61fb      	str	r3, [r7, #28]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ce:	f002 fb45 	bl	8009b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <xQueueGenericSend+0xe4>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d129      	bne.n	8007538 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ea:	f000 fcc2 	bl	8007e72 <prvCopyDataToQueue>
 80074ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d010      	beq.n	800751a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	3324      	adds	r3, #36	; 0x24
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fb01 	bl	8008b04 <xTaskRemoveFromEventList>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d013      	beq.n	8007530 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007508:	4b3f      	ldr	r3, [pc, #252]	; (8007608 <xQueueGenericSend+0x208>)
 800750a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	e00a      	b.n	8007530 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007520:	4b39      	ldr	r3, [pc, #228]	; (8007608 <xQueueGenericSend+0x208>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007530:	f002 fb48 	bl	8009bc4 <vPortExitCritical>
				return pdPASS;
 8007534:	2301      	movs	r3, #1
 8007536:	e063      	b.n	8007600 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800753e:	f002 fb41 	bl	8009bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007542:	2300      	movs	r3, #0
 8007544:	e05c      	b.n	8007600 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800754c:	f107 0314 	add.w	r3, r7, #20
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fb3d 	bl	8008bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800755a:	f002 fb33 	bl	8009bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755e:	f001 f88b 	bl	8008678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007562:	f002 fafb 	bl	8009b5c <vPortEnterCritical>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800756c:	b25b      	sxtb	r3, r3
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007572:	d103      	bne.n	800757c <xQueueGenericSend+0x17c>
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007582:	b25b      	sxtb	r3, r3
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007588:	d103      	bne.n	8007592 <xQueueGenericSend+0x192>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007592:	f002 fb17 	bl	8009bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007596:	1d3a      	adds	r2, r7, #4
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fb2c 	bl	8008bfc <xTaskCheckForTimeOut>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d124      	bne.n	80075f4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ac:	f000 fd59 	bl	8008062 <prvIsQueueFull>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	3310      	adds	r3, #16
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fa4c 	bl	8008a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c6:	f000 fce4 	bl	8007f92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075ca:	f001 f863 	bl	8008694 <xTaskResumeAll>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f47f af7c 	bne.w	80074ce <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80075d6:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <xQueueGenericSend+0x208>)
 80075d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	e772      	b.n	80074ce <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ea:	f000 fcd2 	bl	8007f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ee:	f001 f851 	bl	8008694 <xTaskResumeAll>
 80075f2:	e76c      	b.n	80074ce <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f6:	f000 fccc 	bl	8007f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075fa:	f001 f84b 	bl	8008694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007600:	4618      	mov	r0, r3
 8007602:	3738      	adds	r7, #56	; 0x38
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	; 0x38
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10c      	bne.n	800763e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	b672      	cpsid	i
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	b662      	cpsie	i
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <xQueueGenericSendFromISR+0x40>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueGenericSendFromISR+0x44>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueGenericSendFromISR+0x46>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10c      	bne.n	8007670 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	623b      	str	r3, [r7, #32]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d103      	bne.n	800767e <xQueueGenericSendFromISR+0x72>
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <xQueueGenericSendFromISR+0x76>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <xQueueGenericSendFromISR+0x78>
 8007682:	2300      	movs	r3, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10c      	bne.n	80076a2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	b672      	cpsid	i
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	b662      	cpsie	i
 800769c:	61fb      	str	r3, [r7, #28]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a2:	f002 fb43 	bl	8009d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076a6:	f3ef 8211 	mrs	r2, BASEPRI
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	b672      	cpsid	i
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	b662      	cpsie	i
 80076be:	61ba      	str	r2, [r7, #24]
 80076c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d302      	bcc.n	80076d8 <xQueueGenericSendFromISR+0xcc>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d12c      	bne.n	8007732 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e8:	f000 fbc3 	bl	8007e72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f4:	d112      	bne.n	800771c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	3324      	adds	r3, #36	; 0x24
 8007702:	4618      	mov	r0, r3
 8007704:	f001 f9fe 	bl	8008b04 <xTaskRemoveFromEventList>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e007      	b.n	800772c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800771c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007720:	3301      	adds	r3, #1
 8007722:	b2db      	uxtb	r3, r3
 8007724:	b25a      	sxtb	r2, r3
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800772c:	2301      	movs	r3, #1
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007730:	e001      	b.n	8007736 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007740:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007744:	4618      	mov	r0, r3
 8007746:	3738      	adds	r7, #56	; 0x38
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	; 0x38
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10c      	bne.n	800777a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	b672      	cpsid	i
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	b662      	cpsie	i
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00c      	beq.n	800779c <xQueueGiveFromISR+0x50>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	b672      	cpsid	i
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	b662      	cpsie	i
 8007796:	61fb      	str	r3, [r7, #28]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <xQueueGiveFromISR+0x60>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <xQueueGiveFromISR+0x64>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <xQueueGiveFromISR+0x66>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10c      	bne.n	80077d0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	b672      	cpsid	i
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	b662      	cpsie	i
 80077ca:	61bb      	str	r3, [r7, #24]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077d0:	f002 faac 	bl	8009d2c <vPortValidateInterruptPriority>
	__asm volatile
 80077d4:	f3ef 8211 	mrs	r2, BASEPRI
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	b672      	cpsid	i
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	b662      	cpsie	i
 80077ec:	617a      	str	r2, [r7, #20]
 80077ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80077f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007800:	429a      	cmp	r2, r3
 8007802:	d22b      	bcs.n	800785c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007816:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800781e:	d112      	bne.n	8007846 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d016      	beq.n	8007856 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	3324      	adds	r3, #36	; 0x24
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f969 	bl	8008b04 <xTaskRemoveFromEventList>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00e      	beq.n	8007856 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e007      	b.n	8007856 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800784a:	3301      	adds	r3, #1
 800784c:	b2db      	uxtb	r3, r3
 800784e:	b25a      	sxtb	r2, r3
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007856:	2301      	movs	r3, #1
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
 800785a:	e001      	b.n	8007860 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800785c:	2300      	movs	r3, #0
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f383 8811 	msr	BASEPRI, r3
}
 800786a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800786e:	4618      	mov	r0, r3
 8007870:	3738      	adds	r7, #56	; 0x38
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08c      	sub	sp, #48	; 0x30
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007884:	2300      	movs	r3, #0
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10c      	bne.n	80078ac <xQueueReceive+0x34>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	b672      	cpsid	i
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	b662      	cpsie	i
 80078a6:	623b      	str	r3, [r7, #32]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <xQueueReceive+0x42>
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <xQueueReceive+0x46>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e000      	b.n	80078c0 <xQueueReceive+0x48>
 80078be:	2300      	movs	r3, #0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10c      	bne.n	80078de <xQueueReceive+0x66>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	b672      	cpsid	i
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	b662      	cpsie	i
 80078d8:	61fb      	str	r3, [r7, #28]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078de:	f001 faeb 	bl	8008eb8 <xTaskGetSchedulerState>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <xQueueReceive+0x76>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <xQueueReceive+0x7a>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e000      	b.n	80078f4 <xQueueReceive+0x7c>
 80078f2:	2300      	movs	r3, #0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10c      	bne.n	8007912 <xQueueReceive+0x9a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	61bb      	str	r3, [r7, #24]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007912:	f002 f923 	bl	8009b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01f      	beq.n	8007962 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007926:	f000 fb0e 	bl	8007f46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	1e5a      	subs	r2, r3, #1
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00f      	beq.n	800795a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	3310      	adds	r3, #16
 800793e:	4618      	mov	r0, r3
 8007940:	f001 f8e0 	bl	8008b04 <xTaskRemoveFromEventList>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800794a:	4b3d      	ldr	r3, [pc, #244]	; (8007a40 <xQueueReceive+0x1c8>)
 800794c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800795a:	f002 f933 	bl	8009bc4 <vPortExitCritical>
				return pdPASS;
 800795e:	2301      	movs	r3, #1
 8007960:	e069      	b.n	8007a36 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007968:	f002 f92c 	bl	8009bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800796c:	2300      	movs	r3, #0
 800796e:	e062      	b.n	8007a36 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007976:	f107 0310 	add.w	r3, r7, #16
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f928 	bl	8008bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007980:	2301      	movs	r3, #1
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007984:	f002 f91e 	bl	8009bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007988:	f000 fe76 	bl	8008678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800798c:	f002 f8e6 	bl	8009b5c <vPortEnterCritical>
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007996:	b25b      	sxtb	r3, r3
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800799c:	d103      	bne.n	80079a6 <xQueueReceive+0x12e>
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b2:	d103      	bne.n	80079bc <xQueueReceive+0x144>
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079bc:	f002 f902 	bl	8009bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c0:	1d3a      	adds	r2, r7, #4
 80079c2:	f107 0310 	add.w	r3, r7, #16
 80079c6:	4611      	mov	r1, r2
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 f917 	bl	8008bfc <xTaskCheckForTimeOut>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d123      	bne.n	8007a1c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d6:	f000 fb2e 	bl	8008036 <prvIsQueueEmpty>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d017      	beq.n	8007a10 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	3324      	adds	r3, #36	; 0x24
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 f837 	bl	8008a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f0:	f000 facf 	bl	8007f92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079f4:	f000 fe4e 	bl	8008694 <xTaskResumeAll>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d189      	bne.n	8007912 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80079fe:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <xQueueReceive+0x1c8>)
 8007a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	e780      	b.n	8007912 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a12:	f000 fabe 	bl	8007f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a16:	f000 fe3d 	bl	8008694 <xTaskResumeAll>
 8007a1a:	e77a      	b.n	8007912 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1e:	f000 fab8 	bl	8007f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a22:	f000 fe37 	bl	8008694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a28:	f000 fb05 	bl	8008036 <prvIsQueueEmpty>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f43f af6f 	beq.w	8007912 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3730      	adds	r7, #48	; 0x30
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08e      	sub	sp, #56	; 0x38
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10c      	bne.n	8007a7a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	b672      	cpsid	i
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	b662      	cpsie	i
 8007a74:	623b      	str	r3, [r7, #32]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	b672      	cpsid	i
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	b662      	cpsie	i
 8007a96:	61fb      	str	r3, [r7, #28]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a9c:	f001 fa0c 	bl	8008eb8 <xTaskGetSchedulerState>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <xQueueSemaphoreTake+0x68>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueSemaphoreTake+0x6c>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueSemaphoreTake+0x6e>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10c      	bne.n	8007ad0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	61bb      	str	r3, [r7, #24]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ad0:	f002 f844 	bl	8009b5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d024      	beq.n	8007b2a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	1e5a      	subs	r2, r3, #1
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007af0:	f001 fb60 	bl	80091b4 <pvTaskIncrementMutexHeldCount>
 8007af4:	4602      	mov	r2, r0
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00f      	beq.n	8007b22 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	3310      	adds	r3, #16
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fffc 	bl	8008b04 <xTaskRemoveFromEventList>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b12:	4b55      	ldr	r3, [pc, #340]	; (8007c68 <xQueueSemaphoreTake+0x224>)
 8007b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b22:	f002 f84f 	bl	8009bc4 <vPortExitCritical>
				return pdPASS;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e099      	b.n	8007c5e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d113      	bne.n	8007b58 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	b672      	cpsid	i
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	b662      	cpsie	i
 8007b4a:	617b      	str	r3, [r7, #20]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b50:	f002 f838 	bl	8009bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e082      	b.n	8007c5e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b5e:	f107 030c 	add.w	r3, r7, #12
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f834 	bl	8008bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b6c:	f002 f82a 	bl	8009bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b70:	f000 fd82 	bl	8008678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b74:	f001 fff2 	bl	8009b5c <vPortEnterCritical>
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b7e:	b25b      	sxtb	r3, r3
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b84:	d103      	bne.n	8007b8e <xQueueSemaphoreTake+0x14a>
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9a:	d103      	bne.n	8007ba4 <xQueueSemaphoreTake+0x160>
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba4:	f002 f80e 	bl	8009bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ba8:	463a      	mov	r2, r7
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 f823 	bl	8008bfc <xTaskCheckForTimeOut>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d132      	bne.n	8007c22 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bbe:	f000 fa3a 	bl	8008036 <prvIsQueueEmpty>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d026      	beq.n	8007c16 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d109      	bne.n	8007be4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007bd0:	f001 ffc4 	bl	8009b5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 f98b 	bl	8008ef4 <xTaskPriorityInherit>
 8007bde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007be0:	f001 fff0 	bl	8009bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 ff35 	bl	8008a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf4:	f000 f9cd 	bl	8007f92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bf8:	f000 fd4c 	bl	8008694 <xTaskResumeAll>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f47f af66 	bne.w	8007ad0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007c04:	4b18      	ldr	r3, [pc, #96]	; (8007c68 <xQueueSemaphoreTake+0x224>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	e75c      	b.n	8007ad0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c18:	f000 f9bb 	bl	8007f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c1c:	f000 fd3a 	bl	8008694 <xTaskResumeAll>
 8007c20:	e756      	b.n	8007ad0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c24:	f000 f9b5 	bl	8007f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c28:	f000 fd34 	bl	8008694 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2e:	f000 fa02 	bl	8008036 <prvIsQueueEmpty>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f43f af4b 	beq.w	8007ad0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00d      	beq.n	8007c5c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007c40:	f001 ff8c 	bl	8009b5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c46:	f000 f8fc 	bl	8007e42 <prvGetDisinheritPriorityAfterTimeout>
 8007c4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fa28 	bl	80090a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c58:	f001 ffb4 	bl	8009bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3738      	adds	r7, #56	; 0x38
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	; 0x38
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10c      	bne.n	8007c9c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	b672      	cpsid	i
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	b662      	cpsie	i
 8007c96:	623b      	str	r3, [r7, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <xQueueReceiveFromISR+0x3e>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <xQueueReceiveFromISR+0x42>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueReceiveFromISR+0x44>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10c      	bne.n	8007cce <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	61fb      	str	r3, [r7, #28]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cce:	f002 f82d 	bl	8009d2c <vPortValidateInterruptPriority>
	__asm volatile
 8007cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	61ba      	str	r2, [r7, #24]
 8007cec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007cee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02f      	beq.n	8007d5e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d0c:	f000 f91b 	bl	8007f46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	1e5a      	subs	r2, r3, #1
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d20:	d112      	bne.n	8007d48 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d016      	beq.n	8007d58 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fee8 	bl	8008b04 <xTaskRemoveFromEventList>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e007      	b.n	8007d58 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	b25a      	sxtb	r2, r3
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5c:	e001      	b.n	8007d62 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f383 8811 	msr	BASEPRI, r3
}
 8007d6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3738      	adds	r7, #56	; 0x38
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10c      	bne.n	8007da0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	60bb      	str	r3, [r7, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007da0:	f001 fedc 	bl	8009b5c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007daa:	f001 ff0b 	bl	8009bc4 <vPortExitCritical>

	return uxReturn;
 8007dae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	60fb      	str	r3, [r7, #12]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007dea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007dec:	4618      	mov	r0, r3
 8007dee:	371c      	adds	r7, #28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10c      	bne.n	8007e24 <vQueueDelete+0x2c>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	b672      	cpsid	i
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	b662      	cpsie	i
 8007e1e:	60bb      	str	r3, [r7, #8]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f95f 	bl	80080e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f002 f887 	bl	8009f48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d006      	beq.n	8007e60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e001      	b.n	8007e64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e64:	68fb      	ldr	r3, [r7, #12]
	}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d14d      	bne.n	8007f34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 f891 	bl	8008fc4 <xTaskPriorityDisinherit>
 8007ea2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
 8007eaa:	e043      	b.n	8007f34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d119      	bne.n	8007ee6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6858      	ldr	r0, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	f00f fa52 	bl	8017366 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	441a      	add	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d32b      	bcc.n	8007f34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	605a      	str	r2, [r3, #4]
 8007ee4:	e026      	b.n	8007f34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68d8      	ldr	r0, [r3, #12]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	f00f fa38 	bl	8017366 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	425b      	negs	r3, r3
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d207      	bcs.n	8007f22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	425b      	negs	r3, r3
 8007f1c:	441a      	add	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d105      	bne.n	8007f34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f3c:	697b      	ldr	r3, [r7, #20]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d018      	beq.n	8007f8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	441a      	add	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d303      	bcc.n	8007f7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68d9      	ldr	r1, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	461a      	mov	r2, r3
 8007f84:	6838      	ldr	r0, [r7, #0]
 8007f86:	f00f f9ee 	bl	8017366 <memcpy>
	}
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f9a:	f001 fddf 	bl	8009b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fa6:	e011      	b.n	8007fcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d012      	beq.n	8007fd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3324      	adds	r3, #36	; 0x24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fda5 	bl	8008b04 <xTaskRemoveFromEventList>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fc0:	f000 fe82 	bl	8008cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dce9      	bgt.n	8007fa8 <prvUnlockQueue+0x16>
 8007fd4:	e000      	b.n	8007fd8 <prvUnlockQueue+0x46>
					break;
 8007fd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	22ff      	movs	r2, #255	; 0xff
 8007fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fe0:	f001 fdf0 	bl	8009bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fe4:	f001 fdba 	bl	8009b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ff0:	e011      	b.n	8008016 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d012      	beq.n	8008020 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fd80 	bl	8008b04 <xTaskRemoveFromEventList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800800a:	f000 fe5d 	bl	8008cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	3b01      	subs	r3, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dce9      	bgt.n	8007ff2 <prvUnlockQueue+0x60>
 800801e:	e000      	b.n	8008022 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008020:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	22ff      	movs	r2, #255	; 0xff
 8008026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800802a:	f001 fdcb 	bl	8009bc4 <vPortExitCritical>
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800803e:	f001 fd8d 	bl	8009b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800804a:	2301      	movs	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e001      	b.n	8008054 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008054:	f001 fdb6 	bl	8009bc4 <vPortExitCritical>

	return xReturn;
 8008058:	68fb      	ldr	r3, [r7, #12]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800806a:	f001 fd77 	bl	8009b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	429a      	cmp	r2, r3
 8008078:	d102      	bne.n	8008080 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800807a:	2301      	movs	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	e001      	b.n	8008084 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008084:	f001 fd9e 	bl	8009bc4 <vPortExitCritical>

	return xReturn;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	e014      	b.n	80080ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080a4:	4a0f      	ldr	r2, [pc, #60]	; (80080e4 <vQueueAddToRegistry+0x50>)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080b0:	490c      	ldr	r1, [pc, #48]	; (80080e4 <vQueueAddToRegistry+0x50>)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080ba:	4a0a      	ldr	r2, [pc, #40]	; (80080e4 <vQueueAddToRegistry+0x50>)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080c6:	e006      	b.n	80080d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b07      	cmp	r3, #7
 80080d2:	d9e7      	bls.n	80080a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20005870 	.word	0x20005870

080080e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e016      	b.n	8008124 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80080f6:	4a10      	ldr	r2, [pc, #64]	; (8008138 <vQueueUnregisterQueue+0x50>)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4413      	add	r3, r2
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d10b      	bne.n	800811e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008106:	4a0c      	ldr	r2, [pc, #48]	; (8008138 <vQueueUnregisterQueue+0x50>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2100      	movs	r1, #0
 800810c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008110:	4a09      	ldr	r2, [pc, #36]	; (8008138 <vQueueUnregisterQueue+0x50>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4413      	add	r3, r2
 8008118:	2200      	movs	r2, #0
 800811a:	605a      	str	r2, [r3, #4]
				break;
 800811c:	e006      	b.n	800812c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b07      	cmp	r3, #7
 8008128:	d9e5      	bls.n	80080f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	20005870 	.word	0x20005870

0800813c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800814c:	f001 fd06 	bl	8009b5c <vPortEnterCritical>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008156:	b25b      	sxtb	r3, r3
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815c:	d103      	bne.n	8008166 <vQueueWaitForMessageRestricted+0x2a>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800816c:	b25b      	sxtb	r3, r3
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008172:	d103      	bne.n	800817c <vQueueWaitForMessageRestricted+0x40>
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800817c:	f001 fd22 	bl	8009bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3324      	adds	r3, #36	; 0x24
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fc89 	bl	8008aa8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008196:	6978      	ldr	r0, [r7, #20]
 8008198:	f7ff fefb 	bl	8007f92 <prvUnlockQueue>
	}
 800819c:	bf00      	nop
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	; 0x38
 80081a8:	af04      	add	r7, sp, #16
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10c      	bne.n	80081d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	b672      	cpsid	i
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	b662      	cpsie	i
 80081cc:	623b      	str	r3, [r7, #32]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10c      	bne.n	80081f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	b672      	cpsid	i
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	b662      	cpsie	i
 80081ec:	61fb      	str	r3, [r7, #28]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081f2:	23bc      	movs	r3, #188	; 0xbc
 80081f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2bbc      	cmp	r3, #188	; 0xbc
 80081fa:	d00c      	beq.n	8008216 <xTaskCreateStatic+0x72>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	b672      	cpsid	i
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	b662      	cpsie	i
 8008210:	61bb      	str	r3, [r7, #24]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008216:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01e      	beq.n	800825c <xTaskCreateStatic+0xb8>
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800822c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	2202      	movs	r2, #2
 8008232:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008236:	2300      	movs	r3, #0
 8008238:	9303      	str	r3, [sp, #12]
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	9302      	str	r3, [sp, #8]
 800823e:	f107 0314 	add.w	r3, r7, #20
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f850 	bl	80082f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008256:	f000 f8f5 	bl	8008444 <prvAddNewTaskToReadyList>
 800825a:	e001      	b.n	8008260 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008260:	697b      	ldr	r3, [r7, #20]
	}
 8008262:	4618      	mov	r0, r3
 8008264:	3728      	adds	r7, #40	; 0x28
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800826a:	b580      	push	{r7, lr}
 800826c:	b08c      	sub	sp, #48	; 0x30
 800826e:	af04      	add	r7, sp, #16
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4613      	mov	r3, r2
 8008278:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fd98 	bl	8009db4 <pvPortMalloc>
 8008284:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00e      	beq.n	80082aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800828c:	20bc      	movs	r0, #188	; 0xbc
 800828e:	f001 fd91 	bl	8009db4 <pvPortMalloc>
 8008292:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
 80082a0:	e005      	b.n	80082ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	f001 fe50 	bl	8009f48 <vPortFree>
 80082a8:	e001      	b.n	80082ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d017      	beq.n	80082e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	2300      	movs	r3, #0
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	9302      	str	r3, [sp, #8]
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f80e 	bl	80082f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082d8:	69f8      	ldr	r0, [r7, #28]
 80082da:	f000 f8b3 	bl	8008444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082de:	2301      	movs	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	e002      	b.n	80082ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082ea:	69bb      	ldr	r3, [r7, #24]
	}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	461a      	mov	r2, r3
 800830c:	21a5      	movs	r1, #165	; 0xa5
 800830e:	f00f f852 	bl	80173b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800831c:	440b      	add	r3, r1
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f023 0307 	bic.w	r3, r3, #7
 800832a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	b672      	cpsid	i
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	b662      	cpsie	i
 800834a:	617b      	str	r3, [r7, #20]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01f      	beq.n	8008396 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	e012      	b.n	8008382 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	4413      	add	r3, r2
 8008362:	7819      	ldrb	r1, [r3, #0]
 8008364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	3334      	adds	r3, #52	; 0x34
 800836c:	460a      	mov	r2, r1
 800836e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d006      	beq.n	800838a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	3301      	adds	r3, #1
 8008380:	61fb      	str	r3, [r7, #28]
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	2b0f      	cmp	r3, #15
 8008386:	d9e9      	bls.n	800835c <prvInitialiseNewTask+0x68>
 8008388:	e000      	b.n	800838c <prvInitialiseNewTask+0x98>
			{
				break;
 800838a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008394:	e003      	b.n	800839e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	2b37      	cmp	r3, #55	; 0x37
 80083a2:	d901      	bls.n	80083a8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083a4:	2337      	movs	r3, #55	; 0x37
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	2200      	movs	r2, #0
 80083b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	3304      	adds	r3, #4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fd0c 	bl	8006ddc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	3318      	adds	r3, #24
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fd07 	bl	8006ddc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	3354      	adds	r3, #84	; 0x54
 80083f8:	2260      	movs	r2, #96	; 0x60
 80083fa:	2100      	movs	r1, #0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f00e ffda 	bl	80173b6 <memset>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	4a0c      	ldr	r2, [pc, #48]	; (8008438 <prvInitialiseNewTask+0x144>)
 8008406:	659a      	str	r2, [r3, #88]	; 0x58
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	4a0c      	ldr	r2, [pc, #48]	; (800843c <prvInitialiseNewTask+0x148>)
 800840c:	65da      	str	r2, [r3, #92]	; 0x5c
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	4a0b      	ldr	r2, [pc, #44]	; (8008440 <prvInitialiseNewTask+0x14c>)
 8008412:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	69b8      	ldr	r0, [r7, #24]
 800841a:	f001 fa8f 	bl	800993c <pxPortInitialiseStack>
 800841e:	4602      	mov	r2, r0
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008430:	bf00      	nop
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	0801da04 	.word	0x0801da04
 800843c:	0801da24 	.word	0x0801da24
 8008440:	0801d9e4 	.word	0x0801d9e4

08008444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800844c:	f001 fb86 	bl	8009b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008450:	4b2d      	ldr	r3, [pc, #180]	; (8008508 <prvAddNewTaskToReadyList+0xc4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	4a2c      	ldr	r2, [pc, #176]	; (8008508 <prvAddNewTaskToReadyList+0xc4>)
 8008458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800845a:	4b2c      	ldr	r3, [pc, #176]	; (800850c <prvAddNewTaskToReadyList+0xc8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008462:	4a2a      	ldr	r2, [pc, #168]	; (800850c <prvAddNewTaskToReadyList+0xc8>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008468:	4b27      	ldr	r3, [pc, #156]	; (8008508 <prvAddNewTaskToReadyList+0xc4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d110      	bne.n	8008492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008470:	f000 fc4e 	bl	8008d10 <prvInitialiseTaskLists>
 8008474:	e00d      	b.n	8008492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008476:	4b26      	ldr	r3, [pc, #152]	; (8008510 <prvAddNewTaskToReadyList+0xcc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800847e:	4b23      	ldr	r3, [pc, #140]	; (800850c <prvAddNewTaskToReadyList+0xc8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	429a      	cmp	r2, r3
 800848a:	d802      	bhi.n	8008492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800848c:	4a1f      	ldr	r2, [pc, #124]	; (800850c <prvAddNewTaskToReadyList+0xc8>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008492:	4b20      	ldr	r3, [pc, #128]	; (8008514 <prvAddNewTaskToReadyList+0xd0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3301      	adds	r3, #1
 8008498:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <prvAddNewTaskToReadyList+0xd0>)
 800849a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800849c:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <prvAddNewTaskToReadyList+0xd0>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <prvAddNewTaskToReadyList+0xd4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d903      	bls.n	80084b8 <prvAddNewTaskToReadyList+0x74>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a18      	ldr	r2, [pc, #96]	; (8008518 <prvAddNewTaskToReadyList+0xd4>)
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4a15      	ldr	r2, [pc, #84]	; (800851c <prvAddNewTaskToReadyList+0xd8>)
 80084c6:	441a      	add	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3304      	adds	r3, #4
 80084cc:	4619      	mov	r1, r3
 80084ce:	4610      	mov	r0, r2
 80084d0:	f7fe fc91 	bl	8006df6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084d4:	f001 fb76 	bl	8009bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084d8:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <prvAddNewTaskToReadyList+0xcc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00e      	beq.n	80084fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084e0:	4b0a      	ldr	r3, [pc, #40]	; (800850c <prvAddNewTaskToReadyList+0xc8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d207      	bcs.n	80084fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <prvAddNewTaskToReadyList+0xdc>)
 80084f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20005d84 	.word	0x20005d84
 800850c:	200058b0 	.word	0x200058b0
 8008510:	20005d90 	.word	0x20005d90
 8008514:	20005da0 	.word	0x20005da0
 8008518:	20005d8c 	.word	0x20005d8c
 800851c:	200058b4 	.word	0x200058b4
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d019      	beq.n	800856a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <vTaskDelay+0x64>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <vTaskDelay+0x34>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	60bb      	str	r3, [r7, #8]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008558:	f000 f88e 	bl	8008678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fe3c 	bl	80091dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008564:	f000 f896 	bl	8008694 <xTaskResumeAll>
 8008568:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d107      	bne.n	8008580 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <vTaskDelay+0x68>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20005dac 	.word	0x20005dac
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08a      	sub	sp, #40	; 0x28
 8008594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800859e:	463a      	mov	r2, r7
 80085a0:	1d39      	adds	r1, r7, #4
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fbc4 	bl	8006d34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	9202      	str	r2, [sp, #8]
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	2300      	movs	r3, #0
 80085bc:	460a      	mov	r2, r1
 80085be:	4926      	ldr	r1, [pc, #152]	; (8008658 <vTaskStartScheduler+0xc8>)
 80085c0:	4826      	ldr	r0, [pc, #152]	; (800865c <vTaskStartScheduler+0xcc>)
 80085c2:	f7ff fdef 	bl	80081a4 <xTaskCreateStatic>
 80085c6:	4603      	mov	r3, r0
 80085c8:	4a25      	ldr	r2, [pc, #148]	; (8008660 <vTaskStartScheduler+0xd0>)
 80085ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085cc:	4b24      	ldr	r3, [pc, #144]	; (8008660 <vTaskStartScheduler+0xd0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e001      	b.n	80085de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d102      	bne.n	80085ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085e4:	f000 fe4e 	bl	8009284 <xTimerCreateTimerTask>
 80085e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d11d      	bne.n	800862c <vTaskStartScheduler+0x9c>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	b672      	cpsid	i
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	b662      	cpsie	i
 8008604:	613b      	str	r3, [r7, #16]
}
 8008606:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <vTaskStartScheduler+0xd4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3354      	adds	r3, #84	; 0x54
 800860e:	4a16      	ldr	r2, [pc, #88]	; (8008668 <vTaskStartScheduler+0xd8>)
 8008610:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008612:	4b16      	ldr	r3, [pc, #88]	; (800866c <vTaskStartScheduler+0xdc>)
 8008614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800861a:	4b15      	ldr	r3, [pc, #84]	; (8008670 <vTaskStartScheduler+0xe0>)
 800861c:	2201      	movs	r2, #1
 800861e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008620:	4b14      	ldr	r3, [pc, #80]	; (8008674 <vTaskStartScheduler+0xe4>)
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008626:	f001 fa1b 	bl	8009a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800862a:	e010      	b.n	800864e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008632:	d10c      	bne.n	800864e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	b672      	cpsid	i
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	b662      	cpsie	i
 8008648:	60fb      	str	r3, [r7, #12]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <vTaskStartScheduler+0xbc>
}
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	0801a5e8 	.word	0x0801a5e8
 800865c:	08008ce1 	.word	0x08008ce1
 8008660:	20005da8 	.word	0x20005da8
 8008664:	200058b0 	.word	0x200058b0
 8008668:	2000002c 	.word	0x2000002c
 800866c:	20005da4 	.word	0x20005da4
 8008670:	20005d90 	.word	0x20005d90
 8008674:	20005d88 	.word	0x20005d88

08008678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800867c:	4b04      	ldr	r3, [pc, #16]	; (8008690 <vTaskSuspendAll+0x18>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	4a03      	ldr	r2, [pc, #12]	; (8008690 <vTaskSuspendAll+0x18>)
 8008684:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20005dac 	.word	0x20005dac

08008694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086a2:	4b43      	ldr	r3, [pc, #268]	; (80087b0 <xTaskResumeAll+0x11c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10c      	bne.n	80086c4 <xTaskResumeAll+0x30>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	b672      	cpsid	i
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	b662      	cpsie	i
 80086be:	603b      	str	r3, [r7, #0]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086c4:	f001 fa4a 	bl	8009b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <xTaskResumeAll+0x11c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	4a38      	ldr	r2, [pc, #224]	; (80087b0 <xTaskResumeAll+0x11c>)
 80086d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086d2:	4b37      	ldr	r3, [pc, #220]	; (80087b0 <xTaskResumeAll+0x11c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d162      	bne.n	80087a0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086da:	4b36      	ldr	r3, [pc, #216]	; (80087b4 <xTaskResumeAll+0x120>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d05e      	beq.n	80087a0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086e2:	e02f      	b.n	8008744 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e4:	4b34      	ldr	r3, [pc, #208]	; (80087b8 <xTaskResumeAll+0x124>)
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fbdd 	bl	8006eb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fbd8 	bl	8006eb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <xTaskResumeAll+0x128>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d903      	bls.n	8008714 <xTaskResumeAll+0x80>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	4a2a      	ldr	r2, [pc, #168]	; (80087bc <xTaskResumeAll+0x128>)
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4a27      	ldr	r2, [pc, #156]	; (80087c0 <xTaskResumeAll+0x12c>)
 8008722:	441a      	add	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f7fe fb63 	bl	8006df6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <xTaskResumeAll+0x130>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	429a      	cmp	r2, r3
 800873c:	d302      	bcc.n	8008744 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800873e:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <xTaskResumeAll+0x134>)
 8008740:	2201      	movs	r2, #1
 8008742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008744:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <xTaskResumeAll+0x124>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1cb      	bne.n	80086e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008752:	f000 fb81 	bl	8008e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <xTaskResumeAll+0x138>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d010      	beq.n	8008784 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008762:	f000 f859 	bl	8008818 <xTaskIncrementTick>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800876c:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <xTaskResumeAll+0x134>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3b01      	subs	r3, #1
 8008776:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1f1      	bne.n	8008762 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <xTaskResumeAll+0x138>)
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <xTaskResumeAll+0x134>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <xTaskResumeAll+0x13c>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087a0:	f001 fa10 	bl	8009bc4 <vPortExitCritical>

	return xAlreadyYielded;
 80087a4:	68bb      	ldr	r3, [r7, #8]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20005dac 	.word	0x20005dac
 80087b4:	20005d84 	.word	0x20005d84
 80087b8:	20005d44 	.word	0x20005d44
 80087bc:	20005d8c 	.word	0x20005d8c
 80087c0:	200058b4 	.word	0x200058b4
 80087c4:	200058b0 	.word	0x200058b0
 80087c8:	20005d98 	.word	0x20005d98
 80087cc:	20005d94 	.word	0x20005d94
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <xTaskGetTickCount+0x1c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087e0:	687b      	ldr	r3, [r7, #4]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	20005d88 	.word	0x20005d88

080087f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087fa:	f001 fa97 	bl	8009d2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80087fe:	2300      	movs	r3, #0
 8008800:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008802:	4b04      	ldr	r3, [pc, #16]	; (8008814 <xTaskGetTickCountFromISR+0x20>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008808:	683b      	ldr	r3, [r7, #0]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20005d88 	.word	0x20005d88

08008818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008822:	4b50      	ldr	r3, [pc, #320]	; (8008964 <xTaskIncrementTick+0x14c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f040 808b 	bne.w	8008942 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800882c:	4b4e      	ldr	r3, [pc, #312]	; (8008968 <xTaskIncrementTick+0x150>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008834:	4a4c      	ldr	r2, [pc, #304]	; (8008968 <xTaskIncrementTick+0x150>)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d122      	bne.n	8008886 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008840:	4b4a      	ldr	r3, [pc, #296]	; (800896c <xTaskIncrementTick+0x154>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00c      	beq.n	8008864 <xTaskIncrementTick+0x4c>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	603b      	str	r3, [r7, #0]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xTaskIncrementTick+0x4a>
 8008864:	4b41      	ldr	r3, [pc, #260]	; (800896c <xTaskIncrementTick+0x154>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	4b41      	ldr	r3, [pc, #260]	; (8008970 <xTaskIncrementTick+0x158>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a3f      	ldr	r2, [pc, #252]	; (800896c <xTaskIncrementTick+0x154>)
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	4a3f      	ldr	r2, [pc, #252]	; (8008970 <xTaskIncrementTick+0x158>)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	4b3e      	ldr	r3, [pc, #248]	; (8008974 <xTaskIncrementTick+0x15c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a3d      	ldr	r2, [pc, #244]	; (8008974 <xTaskIncrementTick+0x15c>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	f000 fae9 	bl	8008e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008886:	4b3c      	ldr	r3, [pc, #240]	; (8008978 <xTaskIncrementTick+0x160>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	429a      	cmp	r2, r3
 800888e:	d349      	bcc.n	8008924 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008890:	4b36      	ldr	r3, [pc, #216]	; (800896c <xTaskIncrementTick+0x154>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889a:	4b37      	ldr	r3, [pc, #220]	; (8008978 <xTaskIncrementTick+0x160>)
 800889c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088a0:	601a      	str	r2, [r3, #0]
					break;
 80088a2:	e03f      	b.n	8008924 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a4:	4b31      	ldr	r3, [pc, #196]	; (800896c <xTaskIncrementTick+0x154>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d203      	bcs.n	80088c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088bc:	4a2e      	ldr	r2, [pc, #184]	; (8008978 <xTaskIncrementTick+0x160>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088c2:	e02f      	b.n	8008924 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe faf1 	bl	8006eb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	3318      	adds	r3, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fae8 	bl	8006eb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4b25      	ldr	r3, [pc, #148]	; (800897c <xTaskIncrementTick+0x164>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d903      	bls.n	80088f4 <xTaskIncrementTick+0xdc>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	4a22      	ldr	r2, [pc, #136]	; (800897c <xTaskIncrementTick+0x164>)
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <xTaskIncrementTick+0x168>)
 8008902:	441a      	add	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe fa73 	bl	8006df6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4b1b      	ldr	r3, [pc, #108]	; (8008984 <xTaskIncrementTick+0x16c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	429a      	cmp	r2, r3
 800891c:	d3b8      	bcc.n	8008890 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008922:	e7b5      	b.n	8008890 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008924:	4b17      	ldr	r3, [pc, #92]	; (8008984 <xTaskIncrementTick+0x16c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892a:	4915      	ldr	r1, [pc, #84]	; (8008980 <xTaskIncrementTick+0x168>)
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d907      	bls.n	800894c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	e004      	b.n	800894c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008942:	4b11      	ldr	r3, [pc, #68]	; (8008988 <xTaskIncrementTick+0x170>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3301      	adds	r3, #1
 8008948:	4a0f      	ldr	r2, [pc, #60]	; (8008988 <xTaskIncrementTick+0x170>)
 800894a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800894c:	4b0f      	ldr	r3, [pc, #60]	; (800898c <xTaskIncrementTick+0x174>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008958:	697b      	ldr	r3, [r7, #20]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20005dac 	.word	0x20005dac
 8008968:	20005d88 	.word	0x20005d88
 800896c:	20005d3c 	.word	0x20005d3c
 8008970:	20005d40 	.word	0x20005d40
 8008974:	20005d9c 	.word	0x20005d9c
 8008978:	20005da4 	.word	0x20005da4
 800897c:	20005d8c 	.word	0x20005d8c
 8008980:	200058b4 	.word	0x200058b4
 8008984:	200058b0 	.word	0x200058b0
 8008988:	20005d94 	.word	0x20005d94
 800898c:	20005d98 	.word	0x20005d98

08008990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008996:	4b2b      	ldr	r3, [pc, #172]	; (8008a44 <vTaskSwitchContext+0xb4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800899e:	4b2a      	ldr	r3, [pc, #168]	; (8008a48 <vTaskSwitchContext+0xb8>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089a4:	e048      	b.n	8008a38 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80089a6:	4b28      	ldr	r3, [pc, #160]	; (8008a48 <vTaskSwitchContext+0xb8>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ac:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <vTaskSwitchContext+0xbc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e012      	b.n	80089da <vTaskSwitchContext+0x4a>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10c      	bne.n	80089d4 <vTaskSwitchContext+0x44>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	b672      	cpsid	i
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	b662      	cpsie	i
 80089ce:	607b      	str	r3, [r7, #4]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <vTaskSwitchContext+0x42>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	491d      	ldr	r1, [pc, #116]	; (8008a50 <vTaskSwitchContext+0xc0>)
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0e2      	beq.n	80089b4 <vTaskSwitchContext+0x24>
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4a15      	ldr	r2, [pc, #84]	; (8008a50 <vTaskSwitchContext+0xc0>)
 80089fa:	4413      	add	r3, r2
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	605a      	str	r2, [r3, #4]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d104      	bne.n	8008a1e <vTaskSwitchContext+0x8e>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	4a0b      	ldr	r2, [pc, #44]	; (8008a54 <vTaskSwitchContext+0xc4>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	4a08      	ldr	r2, [pc, #32]	; (8008a4c <vTaskSwitchContext+0xbc>)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <vTaskSwitchContext+0xc4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3354      	adds	r3, #84	; 0x54
 8008a34:	4a08      	ldr	r2, [pc, #32]	; (8008a58 <vTaskSwitchContext+0xc8>)
 8008a36:	6013      	str	r3, [r2, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	20005dac 	.word	0x20005dac
 8008a48:	20005d98 	.word	0x20005d98
 8008a4c:	20005d8c 	.word	0x20005d8c
 8008a50:	200058b4 	.word	0x200058b4
 8008a54:	200058b0 	.word	0x200058b0
 8008a58:	2000002c 	.word	0x2000002c

08008a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10c      	bne.n	8008a86 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	b672      	cpsid	i
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	b662      	cpsie	i
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a86:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <vTaskPlaceOnEventList+0x48>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3318      	adds	r3, #24
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fe f9d5 	bl	8006e3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a94:	2101      	movs	r1, #1
 8008a96:	6838      	ldr	r0, [r7, #0]
 8008a98:	f000 fba0 	bl	80091dc <prvAddCurrentTaskToDelayedList>
}
 8008a9c:	bf00      	nop
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200058b0 	.word	0x200058b0

08008aa8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10c      	bne.n	8008ad4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	b672      	cpsid	i
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	b662      	cpsie	i
 8008ace:	617b      	str	r3, [r7, #20]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ad4:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <vTaskPlaceOnEventListRestricted+0x58>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3318      	adds	r3, #24
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7fe f98a 	bl	8006df6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008aec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	68b8      	ldr	r0, [r7, #8]
 8008af2:	f000 fb73 	bl	80091dc <prvAddCurrentTaskToDelayedList>
	}
 8008af6:	bf00      	nop
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200058b0 	.word	0x200058b0

08008b04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10c      	bne.n	8008b34 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	b672      	cpsid	i
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	b662      	cpsie	i
 8008b2e:	60fb      	str	r3, [r7, #12]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3318      	adds	r3, #24
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f9b9 	bl	8006eb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	; (8008bb8 <xTaskRemoveFromEventList+0xb4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d11d      	bne.n	8008b82 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe f9b0 	bl	8006eb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	4b19      	ldr	r3, [pc, #100]	; (8008bbc <xTaskRemoveFromEventList+0xb8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d903      	bls.n	8008b64 <xTaskRemoveFromEventList+0x60>
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a16      	ldr	r2, [pc, #88]	; (8008bbc <xTaskRemoveFromEventList+0xb8>)
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4a13      	ldr	r2, [pc, #76]	; (8008bc0 <xTaskRemoveFromEventList+0xbc>)
 8008b72:	441a      	add	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7fe f93b 	bl	8006df6 <vListInsertEnd>
 8008b80:	e005      	b.n	8008b8e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3318      	adds	r3, #24
 8008b86:	4619      	mov	r1, r3
 8008b88:	480e      	ldr	r0, [pc, #56]	; (8008bc4 <xTaskRemoveFromEventList+0xc0>)
 8008b8a:	f7fe f934 	bl	8006df6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b92:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <xTaskRemoveFromEventList+0xc4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d905      	bls.n	8008ba8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <xTaskRemoveFromEventList+0xc8>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	e001      	b.n	8008bac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bac:	697b      	ldr	r3, [r7, #20]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20005dac 	.word	0x20005dac
 8008bbc:	20005d8c 	.word	0x20005d8c
 8008bc0:	200058b4 	.word	0x200058b4
 8008bc4:	20005d44 	.word	0x20005d44
 8008bc8:	200058b0 	.word	0x200058b0
 8008bcc:	20005d98 	.word	0x20005d98

08008bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <vTaskInternalSetTimeOutState+0x24>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008be0:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <vTaskInternalSetTimeOutState+0x28>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	605a      	str	r2, [r3, #4]
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20005d9c 	.word	0x20005d9c
 8008bf8:	20005d88 	.word	0x20005d88

08008bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10c      	bne.n	8008c26 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	b672      	cpsid	i
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	b662      	cpsie	i
 8008c20:	613b      	str	r3, [r7, #16]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	b672      	cpsid	i
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	b662      	cpsie	i
 8008c40:	60fb      	str	r3, [r7, #12]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008c46:	f000 ff89 	bl	8009b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c4a:	4b1d      	ldr	r3, [pc, #116]	; (8008cc0 <xTaskCheckForTimeOut+0xc4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c62:	d102      	bne.n	8008c6a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	61fb      	str	r3, [r7, #28]
 8008c68:	e023      	b.n	8008cb2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <xTaskCheckForTimeOut+0xc8>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d007      	beq.n	8008c86 <xTaskCheckForTimeOut+0x8a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d302      	bcc.n	8008c86 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e015      	b.n	8008cb2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d20b      	bcs.n	8008ca8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff97 	bl	8008bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	e004      	b.n	8008cb2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cb2:	f000 ff87 	bl	8009bc4 <vPortExitCritical>

	return xReturn;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3720      	adds	r7, #32
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20005d88 	.word	0x20005d88
 8008cc4:	20005d9c 	.word	0x20005d9c

08008cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ccc:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <vTaskMissedYield+0x14>)
 8008cce:	2201      	movs	r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20005d98 	.word	0x20005d98

08008ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ce8:	f000 f852 	bl	8008d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <prvIdleTask+0x28>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d9f9      	bls.n	8008ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <prvIdleTask+0x2c>)
 8008cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d04:	e7f0      	b.n	8008ce8 <prvIdleTask+0x8>
 8008d06:	bf00      	nop
 8008d08:	200058b4 	.word	0x200058b4
 8008d0c:	e000ed04 	.word	0xe000ed04

08008d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
 8008d1a:	e00c      	b.n	8008d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4a12      	ldr	r2, [pc, #72]	; (8008d70 <prvInitialiseTaskLists+0x60>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe f836 	bl	8006d9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3301      	adds	r3, #1
 8008d34:	607b      	str	r3, [r7, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b37      	cmp	r3, #55	; 0x37
 8008d3a:	d9ef      	bls.n	8008d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d3c:	480d      	ldr	r0, [pc, #52]	; (8008d74 <prvInitialiseTaskLists+0x64>)
 8008d3e:	f7fe f82d 	bl	8006d9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d42:	480d      	ldr	r0, [pc, #52]	; (8008d78 <prvInitialiseTaskLists+0x68>)
 8008d44:	f7fe f82a 	bl	8006d9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d48:	480c      	ldr	r0, [pc, #48]	; (8008d7c <prvInitialiseTaskLists+0x6c>)
 8008d4a:	f7fe f827 	bl	8006d9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d4e:	480c      	ldr	r0, [pc, #48]	; (8008d80 <prvInitialiseTaskLists+0x70>)
 8008d50:	f7fe f824 	bl	8006d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d54:	480b      	ldr	r0, [pc, #44]	; (8008d84 <prvInitialiseTaskLists+0x74>)
 8008d56:	f7fe f821 	bl	8006d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <prvInitialiseTaskLists+0x78>)
 8008d5c:	4a05      	ldr	r2, [pc, #20]	; (8008d74 <prvInitialiseTaskLists+0x64>)
 8008d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <prvInitialiseTaskLists+0x7c>)
 8008d62:	4a05      	ldr	r2, [pc, #20]	; (8008d78 <prvInitialiseTaskLists+0x68>)
 8008d64:	601a      	str	r2, [r3, #0]
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200058b4 	.word	0x200058b4
 8008d74:	20005d14 	.word	0x20005d14
 8008d78:	20005d28 	.word	0x20005d28
 8008d7c:	20005d44 	.word	0x20005d44
 8008d80:	20005d58 	.word	0x20005d58
 8008d84:	20005d70 	.word	0x20005d70
 8008d88:	20005d3c 	.word	0x20005d3c
 8008d8c:	20005d40 	.word	0x20005d40

08008d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d96:	e019      	b.n	8008dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d98:	f000 fee0 	bl	8009b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9c:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <prvCheckTasksWaitingTermination+0x50>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3304      	adds	r3, #4
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe f881 	bl	8006eb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dae:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <prvCheckTasksWaitingTermination+0x54>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	4a0b      	ldr	r2, [pc, #44]	; (8008de4 <prvCheckTasksWaitingTermination+0x54>)
 8008db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <prvCheckTasksWaitingTermination+0x58>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4a0a      	ldr	r2, [pc, #40]	; (8008de8 <prvCheckTasksWaitingTermination+0x58>)
 8008dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dc2:	f000 feff 	bl	8009bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f810 	bl	8008dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <prvCheckTasksWaitingTermination+0x58>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e1      	bne.n	8008d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20005d58 	.word	0x20005d58
 8008de4:	20005d84 	.word	0x20005d84
 8008de8:	20005d6c 	.word	0x20005d6c

08008dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3354      	adds	r3, #84	; 0x54
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f00e fbdd 	bl	80175b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d108      	bne.n	8008e1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f001 f89b 	bl	8009f48 <vPortFree>
				vPortFree( pxTCB );
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 f898 	bl	8009f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e18:	e01a      	b.n	8008e50 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d103      	bne.n	8008e2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f88f 	bl	8009f48 <vPortFree>
	}
 8008e2a:	e011      	b.n	8008e50 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d00c      	beq.n	8008e50 <prvDeleteTCB+0x64>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	b672      	cpsid	i
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	b662      	cpsie	i
 8008e4a:	60fb      	str	r3, [r7, #12]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <prvDeleteTCB+0x62>
	}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <prvResetNextTaskUnblockTime+0x38>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d104      	bne.n	8008e72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <prvResetNextTaskUnblockTime+0x3c>)
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e70:	e008      	b.n	8008e84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e72:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <prvResetNextTaskUnblockTime+0x38>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	4a04      	ldr	r2, [pc, #16]	; (8008e94 <prvResetNextTaskUnblockTime+0x3c>)
 8008e82:	6013      	str	r3, [r2, #0]
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20005d3c 	.word	0x20005d3c
 8008e94:	20005da4 	.word	0x20005da4

08008e98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <xTaskGetCurrentTaskHandle+0x1c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ea4:	687b      	ldr	r3, [r7, #4]
	}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	200058b0 	.word	0x200058b0

08008eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <xTaskGetSchedulerState+0x34>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	e008      	b.n	8008ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ecc:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <xTaskGetSchedulerState+0x38>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	607b      	str	r3, [r7, #4]
 8008ed8:	e001      	b.n	8008ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eda:	2300      	movs	r3, #0
 8008edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ede:	687b      	ldr	r3, [r7, #4]
	}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20005d90 	.word	0x20005d90
 8008ef0:	20005dac 	.word	0x20005dac

08008ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d051      	beq.n	8008fae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	4b2a      	ldr	r3, [pc, #168]	; (8008fb8 <xTaskPriorityInherit+0xc4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d241      	bcs.n	8008f9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	db06      	blt.n	8008f2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f20:	4b25      	ldr	r3, [pc, #148]	; (8008fb8 <xTaskPriorityInherit+0xc4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6959      	ldr	r1, [r3, #20]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <xTaskPriorityInherit+0xc8>)
 8008f40:	4413      	add	r3, r2
 8008f42:	4299      	cmp	r1, r3
 8008f44:	d122      	bne.n	8008f8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fd ffb0 	bl	8006eb0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f50:	4b19      	ldr	r3, [pc, #100]	; (8008fb8 <xTaskPriorityInherit+0xc4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <xTaskPriorityInherit+0xcc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d903      	bls.n	8008f6e <xTaskPriorityInherit+0x7a>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <xTaskPriorityInherit+0xcc>)
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a10      	ldr	r2, [pc, #64]	; (8008fbc <xTaskPriorityInherit+0xc8>)
 8008f7c:	441a      	add	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7fd ff36 	bl	8006df6 <vListInsertEnd>
 8008f8a:	e004      	b.n	8008f96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <xTaskPriorityInherit+0xc4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f96:	2301      	movs	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	e008      	b.n	8008fae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <xTaskPriorityInherit+0xc4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d201      	bcs.n	8008fae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008faa:	2301      	movs	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fae:	68fb      	ldr	r3, [r7, #12]
	}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	200058b0 	.word	0x200058b0
 8008fbc:	200058b4 	.word	0x200058b4
 8008fc0:	20005d8c 	.word	0x20005d8c

08008fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d05a      	beq.n	8009090 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fda:	4b30      	ldr	r3, [pc, #192]	; (800909c <xTaskPriorityDisinherit+0xd8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d00c      	beq.n	8008ffe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	b672      	cpsid	i
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	b662      	cpsie	i
 8008ff8:	60fb      	str	r3, [r7, #12]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10c      	bne.n	8009020 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	b672      	cpsid	i
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	b662      	cpsie	i
 800901a:	60bb      	str	r3, [r7, #8]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009024:	1e5a      	subs	r2, r3, #1
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009032:	429a      	cmp	r2, r3
 8009034:	d02c      	beq.n	8009090 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	2b00      	cmp	r3, #0
 800903c:	d128      	bne.n	8009090 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f7fd ff34 	bl	8006eb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <xTaskPriorityDisinherit+0xdc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d903      	bls.n	8009070 <xTaskPriorityDisinherit+0xac>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4a0c      	ldr	r2, [pc, #48]	; (80090a0 <xTaskPriorityDisinherit+0xdc>)
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <xTaskPriorityDisinherit+0xe0>)
 800907e:	441a      	add	r2, r3
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3304      	adds	r3, #4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fd feb5 	bl	8006df6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009090:	697b      	ldr	r3, [r7, #20]
	}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200058b0 	.word	0x200058b0
 80090a0:	20005d8c 	.word	0x20005d8c
 80090a4:	200058b4 	.word	0x200058b4

080090a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80090b6:	2301      	movs	r3, #1
 80090b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d06e      	beq.n	800919e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10c      	bne.n	80090e2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	b672      	cpsid	i
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	b662      	cpsie	i
 80090dc:	60fb      	str	r3, [r7, #12]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d902      	bls.n	80090f2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	e002      	b.n	80090f8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d04d      	beq.n	800919e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	429a      	cmp	r2, r3
 800910a:	d148      	bne.n	800919e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800910c:	4b26      	ldr	r3, [pc, #152]	; (80091a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	429a      	cmp	r2, r3
 8009114:	d10c      	bne.n	8009130 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	b672      	cpsid	i
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	b662      	cpsie	i
 800912a:	60bb      	str	r3, [r7, #8]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	db04      	blt.n	800914e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	6959      	ldr	r1, [r3, #20]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4a13      	ldr	r2, [pc, #76]	; (80091ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800915e:	4413      	add	r3, r2
 8009160:	4299      	cmp	r1, r3
 8009162:	d11c      	bne.n	800919e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	3304      	adds	r3, #4
 8009168:	4618      	mov	r0, r3
 800916a:	f7fd fea1 	bl	8006eb0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009172:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d903      	bls.n	8009182 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	4a0c      	ldr	r2, [pc, #48]	; (80091b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a07      	ldr	r2, [pc, #28]	; (80091ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009190:	441a      	add	r2, r3
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	3304      	adds	r3, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f7fd fe2c 	bl	8006df6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800919e:	bf00      	nop
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200058b0 	.word	0x200058b0
 80091ac:	200058b4 	.word	0x200058b4
 80091b0:	20005d8c 	.word	0x20005d8c

080091b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091c6:	3201      	adds	r2, #1
 80091c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80091ca:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80091cc:	681b      	ldr	r3, [r3, #0]
	}
 80091ce:	4618      	mov	r0, r3
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	200058b0 	.word	0x200058b0

080091dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091e6:	4b21      	ldr	r3, [pc, #132]	; (800926c <prvAddCurrentTaskToDelayedList+0x90>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ec:	4b20      	ldr	r3, [pc, #128]	; (8009270 <prvAddCurrentTaskToDelayedList+0x94>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3304      	adds	r3, #4
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fd fe5c 	bl	8006eb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fe:	d10a      	bne.n	8009216 <prvAddCurrentTaskToDelayedList+0x3a>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d007      	beq.n	8009216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009206:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <prvAddCurrentTaskToDelayedList+0x94>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4819      	ldr	r0, [pc, #100]	; (8009274 <prvAddCurrentTaskToDelayedList+0x98>)
 8009210:	f7fd fdf1 	bl	8006df6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009214:	e026      	b.n	8009264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800921e:	4b14      	ldr	r3, [pc, #80]	; (8009270 <prvAddCurrentTaskToDelayedList+0x94>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	429a      	cmp	r2, r3
 800922c:	d209      	bcs.n	8009242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800922e:	4b12      	ldr	r3, [pc, #72]	; (8009278 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <prvAddCurrentTaskToDelayedList+0x94>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3304      	adds	r3, #4
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fd fdff 	bl	8006e3e <vListInsert>
}
 8009240:	e010      	b.n	8009264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009242:	4b0e      	ldr	r3, [pc, #56]	; (800927c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <prvAddCurrentTaskToDelayedList+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7fd fdf5 	bl	8006e3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	429a      	cmp	r2, r3
 800925c:	d202      	bcs.n	8009264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800925e:	4a08      	ldr	r2, [pc, #32]	; (8009280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	6013      	str	r3, [r2, #0]
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20005d88 	.word	0x20005d88
 8009270:	200058b0 	.word	0x200058b0
 8009274:	20005d70 	.word	0x20005d70
 8009278:	20005d40 	.word	0x20005d40
 800927c:	20005d3c 	.word	0x20005d3c
 8009280:	20005da4 	.word	0x20005da4

08009284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	; 0x28
 8009288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800928e:	f000 fb15 	bl	80098bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009292:	4b1d      	ldr	r3, [pc, #116]	; (8009308 <xTimerCreateTimerTask+0x84>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d021      	beq.n	80092de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092a2:	1d3a      	adds	r2, r7, #4
 80092a4:	f107 0108 	add.w	r1, r7, #8
 80092a8:	f107 030c 	add.w	r3, r7, #12
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fd fd5b 	bl	8006d68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	9202      	str	r2, [sp, #8]
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	2302      	movs	r3, #2
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2300      	movs	r3, #0
 80092c2:	460a      	mov	r2, r1
 80092c4:	4911      	ldr	r1, [pc, #68]	; (800930c <xTimerCreateTimerTask+0x88>)
 80092c6:	4812      	ldr	r0, [pc, #72]	; (8009310 <xTimerCreateTimerTask+0x8c>)
 80092c8:	f7fe ff6c 	bl	80081a4 <xTaskCreateStatic>
 80092cc:	4603      	mov	r3, r0
 80092ce:	4a11      	ldr	r2, [pc, #68]	; (8009314 <xTimerCreateTimerTask+0x90>)
 80092d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092d2:	4b10      	ldr	r3, [pc, #64]	; (8009314 <xTimerCreateTimerTask+0x90>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092da:	2301      	movs	r3, #1
 80092dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10c      	bne.n	80092fe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	b672      	cpsid	i
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	b662      	cpsie	i
 80092f8:	613b      	str	r3, [r7, #16]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80092fe:	697b      	ldr	r3, [r7, #20]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20005de0 	.word	0x20005de0
 800930c:	0801a5f0 	.word	0x0801a5f0
 8009310:	08009455 	.word	0x08009455
 8009314:	20005de4 	.word	0x20005de4

08009318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08a      	sub	sp, #40	; 0x28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009326:	2300      	movs	r3, #0
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10c      	bne.n	800934a <xTimerGenericCommand+0x32>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	b672      	cpsid	i
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	b662      	cpsie	i
 8009344:	623b      	str	r3, [r7, #32]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800934a:	4b1a      	ldr	r3, [pc, #104]	; (80093b4 <xTimerGenericCommand+0x9c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d02a      	beq.n	80093a8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b05      	cmp	r3, #5
 8009362:	dc18      	bgt.n	8009396 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009364:	f7ff fda8 	bl	8008eb8 <xTaskGetSchedulerState>
 8009368:	4603      	mov	r3, r0
 800936a:	2b02      	cmp	r3, #2
 800936c:	d109      	bne.n	8009382 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800936e:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <xTimerGenericCommand+0x9c>)
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f107 0110 	add.w	r1, r7, #16
 8009376:	2300      	movs	r3, #0
 8009378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937a:	f7fe f841 	bl	8007400 <xQueueGenericSend>
 800937e:	6278      	str	r0, [r7, #36]	; 0x24
 8009380:	e012      	b.n	80093a8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009382:	4b0c      	ldr	r3, [pc, #48]	; (80093b4 <xTimerGenericCommand+0x9c>)
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	f107 0110 	add.w	r1, r7, #16
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	f7fe f837 	bl	8007400 <xQueueGenericSend>
 8009392:	6278      	str	r0, [r7, #36]	; 0x24
 8009394:	e008      	b.n	80093a8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009396:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <xTimerGenericCommand+0x9c>)
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	f107 0110 	add.w	r1, r7, #16
 800939e:	2300      	movs	r3, #0
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	f7fe f933 	bl	800760c <xQueueGenericSendFromISR>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3728      	adds	r7, #40	; 0x28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20005de0 	.word	0x20005de0

080093b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af02      	add	r7, sp, #8
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c2:	4b23      	ldr	r3, [pc, #140]	; (8009450 <prvProcessExpiredTimer+0x98>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fd fd6d 	bl	8006eb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d024      	beq.n	800942e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	18d1      	adds	r1, r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	6978      	ldr	r0, [r7, #20]
 80093f2:	f000 f8d3 	bl	800959c <prvInsertTimerInActiveList>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d021      	beq.n	8009440 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2300      	movs	r3, #0
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	2100      	movs	r1, #0
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f7ff ff86 	bl	8009318 <xTimerGenericCommand>
 800940c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d115      	bne.n	8009440 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	b672      	cpsid	i
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	b662      	cpsie	i
 8009428:	60fb      	str	r3, [r7, #12]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	b2da      	uxtb	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	6a1b      	ldr	r3, [r3, #32]
 8009444:	6978      	ldr	r0, [r7, #20]
 8009446:	4798      	blx	r3
}
 8009448:	bf00      	nop
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20005dd8 	.word	0x20005dd8

08009454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800945c:	f107 0308 	add.w	r3, r7, #8
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f857 	bl	8009514 <prvGetNextExpireTime>
 8009466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	4619      	mov	r1, r3
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f803 	bl	8009478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009472:	f000 f8d5 	bl	8009620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009476:	e7f1      	b.n	800945c <prvTimerTask+0x8>

08009478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009482:	f7ff f8f9 	bl	8008678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009486:	f107 0308 	add.w	r3, r7, #8
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f866 	bl	800955c <prvSampleTimeNow>
 8009490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d130      	bne.n	80094fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <prvProcessTimerOrBlockTask+0x3c>
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d806      	bhi.n	80094b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094a6:	f7ff f8f5 	bl	8008694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff83 	bl	80093b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094b2:	e024      	b.n	80094fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d008      	beq.n	80094cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <prvProcessTimerOrBlockTask+0x90>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <prvProcessTimerOrBlockTask+0x50>
 80094c4:	2301      	movs	r3, #1
 80094c6:	e000      	b.n	80094ca <prvProcessTimerOrBlockTask+0x52>
 80094c8:	2300      	movs	r3, #0
 80094ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094cc:	4b0f      	ldr	r3, [pc, #60]	; (800950c <prvProcessTimerOrBlockTask+0x94>)
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	4619      	mov	r1, r3
 80094da:	f7fe fe2f 	bl	800813c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094de:	f7ff f8d9 	bl	8008694 <xTaskResumeAll>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094e8:	4b09      	ldr	r3, [pc, #36]	; (8009510 <prvProcessTimerOrBlockTask+0x98>)
 80094ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	f3bf 8f6f 	isb	sy
}
 80094f8:	e001      	b.n	80094fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094fa:	f7ff f8cb 	bl	8008694 <xTaskResumeAll>
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20005ddc 	.word	0x20005ddc
 800950c:	20005de0 	.word	0x20005de0
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800951c:	4b0e      	ldr	r3, [pc, #56]	; (8009558 <prvGetNextExpireTime+0x44>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <prvGetNextExpireTime+0x16>
 8009526:	2201      	movs	r2, #1
 8009528:	e000      	b.n	800952c <prvGetNextExpireTime+0x18>
 800952a:	2200      	movs	r2, #0
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d105      	bne.n	8009544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009538:	4b07      	ldr	r3, [pc, #28]	; (8009558 <prvGetNextExpireTime+0x44>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e001      	b.n	8009548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009548:	68fb      	ldr	r3, [r7, #12]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20005dd8 	.word	0x20005dd8

0800955c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009564:	f7ff f936 	bl	80087d4 <xTaskGetTickCount>
 8009568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800956a:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <prvSampleTimeNow+0x3c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	429a      	cmp	r2, r3
 8009572:	d205      	bcs.n	8009580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009574:	f000 f93c 	bl	80097f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	e002      	b.n	8009586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009586:	4a04      	ldr	r2, [pc, #16]	; (8009598 <prvSampleTimeNow+0x3c>)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800958c:	68fb      	ldr	r3, [r7, #12]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20005de8 	.word	0x20005de8

0800959c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d812      	bhi.n	80095e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	1ad2      	subs	r2, r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d302      	bcc.n	80095d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e01b      	b.n	800960e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095d6:	4b10      	ldr	r3, [pc, #64]	; (8009618 <prvInsertTimerInActiveList+0x7c>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3304      	adds	r3, #4
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7fd fc2c 	bl	8006e3e <vListInsert>
 80095e6:	e012      	b.n	800960e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d206      	bcs.n	80095fe <prvInsertTimerInActiveList+0x62>
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d302      	bcc.n	80095fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e007      	b.n	800960e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095fe:	4b07      	ldr	r3, [pc, #28]	; (800961c <prvInsertTimerInActiveList+0x80>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fd fc18 	bl	8006e3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800960e:	697b      	ldr	r3, [r7, #20]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20005ddc 	.word	0x20005ddc
 800961c:	20005dd8 	.word	0x20005dd8

08009620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08e      	sub	sp, #56	; 0x38
 8009624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009626:	e0d0      	b.n	80097ca <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	da1a      	bge.n	8009664 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800962e:	1d3b      	adds	r3, r7, #4
 8009630:	3304      	adds	r3, #4
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10c      	bne.n	8009654 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	b672      	cpsid	i
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	b662      	cpsie	i
 800964e:	61fb      	str	r3, [r7, #28]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800965a:	6850      	ldr	r0, [r2, #4]
 800965c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800965e:	6892      	ldr	r2, [r2, #8]
 8009660:	4611      	mov	r1, r2
 8009662:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f2c0 80ae 	blt.w	80097c8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	3304      	adds	r3, #4
 800967c:	4618      	mov	r0, r3
 800967e:	f7fd fc17 	bl	8006eb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009682:	463b      	mov	r3, r7
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff ff69 	bl	800955c <prvSampleTimeNow>
 800968a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b09      	cmp	r3, #9
 8009690:	f200 809b 	bhi.w	80097ca <prvProcessReceivedCommands+0x1aa>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <prvProcessReceivedCommands+0x7c>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096c5 	.word	0x080096c5
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096c5 	.word	0x080096c5
 80096a8:	0800973d 	.word	0x0800973d
 80096ac:	08009751 	.word	0x08009751
 80096b0:	0800979f 	.word	0x0800979f
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096c5 	.word	0x080096c5
 80096bc:	0800973d 	.word	0x0800973d
 80096c0:	08009751 	.word	0x08009751
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	18d1      	adds	r1, r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e4:	f7ff ff5a 	bl	800959c <prvInsertTimerInActiveList>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d06d      	beq.n	80097ca <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d062      	beq.n	80097ca <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	441a      	add	r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	2100      	movs	r1, #0
 8009714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009716:	f7ff fdff 	bl	8009318 <xTimerGenericCommand>
 800971a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d153      	bne.n	80097ca <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	b672      	cpsid	i
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	b662      	cpsie	i
 8009736:	61bb      	str	r3, [r7, #24]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800974e:	e03c      	b.n	80097ca <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10c      	bne.n	800978a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	b672      	cpsid	i
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	b662      	cpsie	i
 8009784:	617b      	str	r3, [r7, #20]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	18d1      	adds	r1, r2, r3
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009798:	f7ff ff00 	bl	800959c <prvInsertTimerInActiveList>
					break;
 800979c:	e015      	b.n	80097ca <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80097ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ae:	f000 fbcb 	bl	8009f48 <vPortFree>
 80097b2:	e00a      	b.n	80097ca <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097c6:	e000      	b.n	80097ca <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097ca:	4b08      	ldr	r3, [pc, #32]	; (80097ec <prvProcessReceivedCommands+0x1cc>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	1d39      	adds	r1, r7, #4
 80097d0:	2200      	movs	r2, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe f850 	bl	8007878 <xQueueReceive>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f47f af24 	bne.w	8009628 <prvProcessReceivedCommands+0x8>
	}
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	3730      	adds	r7, #48	; 0x30
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20005de0 	.word	0x20005de0

080097f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097f6:	e04a      	b.n	800988e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097f8:	4b2e      	ldr	r3, [pc, #184]	; (80098b4 <prvSwitchTimerLists+0xc4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009802:	4b2c      	ldr	r3, [pc, #176]	; (80098b4 <prvSwitchTimerLists+0xc4>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3304      	adds	r3, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7fd fb4d 	bl	8006eb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d030      	beq.n	800988e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4413      	add	r3, r2
 8009834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	429a      	cmp	r2, r3
 800983c:	d90e      	bls.n	800985c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800984a:	4b1a      	ldr	r3, [pc, #104]	; (80098b4 <prvSwitchTimerLists+0xc4>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3304      	adds	r3, #4
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7fd faf2 	bl	8006e3e <vListInsert>
 800985a:	e018      	b.n	800988e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800985c:	2300      	movs	r3, #0
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	2300      	movs	r3, #0
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	2100      	movs	r1, #0
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff fd56 	bl	8009318 <xTimerGenericCommand>
 800986c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10c      	bne.n	800988e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	b672      	cpsid	i
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	b662      	cpsie	i
 8009888:	603b      	str	r3, [r7, #0]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800988e:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <prvSwitchTimerLists+0xc4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1af      	bne.n	80097f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009898:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <prvSwitchTimerLists+0xc4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <prvSwitchTimerLists+0xc8>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <prvSwitchTimerLists+0xc4>)
 80098a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098a6:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <prvSwitchTimerLists+0xc8>)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	6013      	str	r3, [r2, #0]
}
 80098ac:	bf00      	nop
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20005dd8 	.word	0x20005dd8
 80098b8:	20005ddc 	.word	0x20005ddc

080098bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098c2:	f000 f94b 	bl	8009b5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098c6:	4b15      	ldr	r3, [pc, #84]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d120      	bne.n	8009910 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098ce:	4814      	ldr	r0, [pc, #80]	; (8009920 <prvCheckForValidListAndQueue+0x64>)
 80098d0:	f7fd fa64 	bl	8006d9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098d4:	4813      	ldr	r0, [pc, #76]	; (8009924 <prvCheckForValidListAndQueue+0x68>)
 80098d6:	f7fd fa61 	bl	8006d9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098da:	4b13      	ldr	r3, [pc, #76]	; (8009928 <prvCheckForValidListAndQueue+0x6c>)
 80098dc:	4a10      	ldr	r2, [pc, #64]	; (8009920 <prvCheckForValidListAndQueue+0x64>)
 80098de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098e0:	4b12      	ldr	r3, [pc, #72]	; (800992c <prvCheckForValidListAndQueue+0x70>)
 80098e2:	4a10      	ldr	r2, [pc, #64]	; (8009924 <prvCheckForValidListAndQueue+0x68>)
 80098e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098e6:	2300      	movs	r3, #0
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4b11      	ldr	r3, [pc, #68]	; (8009930 <prvCheckForValidListAndQueue+0x74>)
 80098ec:	4a11      	ldr	r2, [pc, #68]	; (8009934 <prvCheckForValidListAndQueue+0x78>)
 80098ee:	2110      	movs	r1, #16
 80098f0:	200a      	movs	r0, #10
 80098f2:	f7fd fb71 	bl	8006fd8 <xQueueGenericCreateStatic>
 80098f6:	4603      	mov	r3, r0
 80098f8:	4a08      	ldr	r2, [pc, #32]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 80098fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009904:	4b05      	ldr	r3, [pc, #20]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	490b      	ldr	r1, [pc, #44]	; (8009938 <prvCheckForValidListAndQueue+0x7c>)
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fbc2 	bl	8008094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009910:	f000 f958 	bl	8009bc4 <vPortExitCritical>
}
 8009914:	bf00      	nop
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20005de0 	.word	0x20005de0
 8009920:	20005db0 	.word	0x20005db0
 8009924:	20005dc4 	.word	0x20005dc4
 8009928:	20005dd8 	.word	0x20005dd8
 800992c:	20005ddc 	.word	0x20005ddc
 8009930:	20005e8c 	.word	0x20005e8c
 8009934:	20005dec 	.word	0x20005dec
 8009938:	0801a5f8 	.word	0x0801a5f8

0800993c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3b04      	subs	r3, #4
 800994c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3b04      	subs	r3, #4
 800995a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f023 0201 	bic.w	r2, r3, #1
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3b04      	subs	r3, #4
 800996a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800996c:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <pxPortInitialiseStack+0x64>)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3b14      	subs	r3, #20
 8009976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3b04      	subs	r3, #4
 8009982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f06f 0202 	mvn.w	r2, #2
 800998a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3b20      	subs	r3, #32
 8009990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009992:	68fb      	ldr	r3, [r7, #12]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	080099a5 	.word	0x080099a5

080099a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099ae:	4b14      	ldr	r3, [pc, #80]	; (8009a00 <prvTaskExitError+0x5c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099b6:	d00c      	beq.n	80099d2 <prvTaskExitError+0x2e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	b672      	cpsid	i
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	b662      	cpsie	i
 80099cc:	60fb      	str	r3, [r7, #12]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <prvTaskExitError+0x2c>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	b672      	cpsid	i
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	b662      	cpsie	i
 80099e6:	60bb      	str	r3, [r7, #8]
}
 80099e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ea:	bf00      	nop
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0fc      	beq.n	80099ec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	20000020 	.word	0x20000020
	...

08009a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a10:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <pxCurrentTCBConst2>)
 8009a12:	6819      	ldr	r1, [r3, #0]
 8009a14:	6808      	ldr	r0, [r1, #0]
 8009a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	f380 8809 	msr	PSP, r0
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f04f 0000 	mov.w	r0, #0
 8009a26:	f380 8811 	msr	BASEPRI, r0
 8009a2a:	4770      	bx	lr
 8009a2c:	f3af 8000 	nop.w

08009a30 <pxCurrentTCBConst2>:
 8009a30:	200058b0 	.word	0x200058b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop

08009a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a38:	4808      	ldr	r0, [pc, #32]	; (8009a5c <prvPortStartFirstTask+0x24>)
 8009a3a:	6800      	ldr	r0, [r0, #0]
 8009a3c:	6800      	ldr	r0, [r0, #0]
 8009a3e:	f380 8808 	msr	MSP, r0
 8009a42:	f04f 0000 	mov.w	r0, #0
 8009a46:	f380 8814 	msr	CONTROL, r0
 8009a4a:	b662      	cpsie	i
 8009a4c:	b661      	cpsie	f
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	df00      	svc	0
 8009a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed08 	.word	0xe000ed08

08009a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a66:	4b37      	ldr	r3, [pc, #220]	; (8009b44 <xPortStartScheduler+0xe4>)
 8009a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	22ff      	movs	r2, #255	; 0xff
 8009a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	4b2f      	ldr	r3, [pc, #188]	; (8009b48 <xPortStartScheduler+0xe8>)
 8009a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a8e:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <xPortStartScheduler+0xec>)
 8009a90:	2207      	movs	r2, #7
 8009a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a94:	e009      	b.n	8009aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a96:	4b2d      	ldr	r3, [pc, #180]	; (8009b4c <xPortStartScheduler+0xec>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	4a2b      	ldr	r2, [pc, #172]	; (8009b4c <xPortStartScheduler+0xec>)
 8009a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab2:	2b80      	cmp	r3, #128	; 0x80
 8009ab4:	d0ef      	beq.n	8009a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ab6:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <xPortStartScheduler+0xec>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f1c3 0307 	rsb	r3, r3, #7
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d00c      	beq.n	8009adc <xPortStartScheduler+0x7c>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	b672      	cpsid	i
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	b662      	cpsie	i
 8009ad6:	60bb      	str	r3, [r7, #8]
}
 8009ad8:	bf00      	nop
 8009ada:	e7fe      	b.n	8009ada <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <xPortStartScheduler+0xec>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	4a1a      	ldr	r2, [pc, #104]	; (8009b4c <xPortStartScheduler+0xec>)
 8009ae4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ae6:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <xPortStartScheduler+0xec>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aee:	4a17      	ldr	r2, [pc, #92]	; (8009b4c <xPortStartScheduler+0xec>)
 8009af0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009afa:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <xPortStartScheduler+0xf0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a14      	ldr	r2, [pc, #80]	; (8009b50 <xPortStartScheduler+0xf0>)
 8009b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b06:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <xPortStartScheduler+0xf0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a11      	ldr	r2, [pc, #68]	; (8009b50 <xPortStartScheduler+0xf0>)
 8009b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b12:	f000 f8dd 	bl	8009cd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b16:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <xPortStartScheduler+0xf4>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b1c:	f000 f8fc 	bl	8009d18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b20:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <xPortStartScheduler+0xf8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a0c      	ldr	r2, [pc, #48]	; (8009b58 <xPortStartScheduler+0xf8>)
 8009b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b2c:	f7ff ff84 	bl	8009a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b30:	f7fe ff2e 	bl	8008990 <vTaskSwitchContext>
	prvTaskExitError();
 8009b34:	f7ff ff36 	bl	80099a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	e000e400 	.word	0xe000e400
 8009b48:	20005edc 	.word	0x20005edc
 8009b4c:	20005ee0 	.word	0x20005ee0
 8009b50:	e000ed20 	.word	0xe000ed20
 8009b54:	20000020 	.word	0x20000020
 8009b58:	e000ef34 	.word	0xe000ef34

08009b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	b672      	cpsid	i
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	b662      	cpsie	i
 8009b76:	607b      	str	r3, [r7, #4]
}
 8009b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b7a:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <vPortEnterCritical+0x60>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	4a0e      	ldr	r2, [pc, #56]	; (8009bbc <vPortEnterCritical+0x60>)
 8009b82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b84:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <vPortEnterCritical+0x60>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d111      	bne.n	8009bb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <vPortEnterCritical+0x64>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00c      	beq.n	8009bb0 <vPortEnterCritical+0x54>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	b672      	cpsid	i
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	b662      	cpsie	i
 8009baa:	603b      	str	r3, [r7, #0]
}
 8009bac:	bf00      	nop
 8009bae:	e7fe      	b.n	8009bae <vPortEnterCritical+0x52>
	}
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	20000020 	.word	0x20000020
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bca:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <vPortExitCritical+0x54>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10c      	bne.n	8009bec <vPortExitCritical+0x28>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	b672      	cpsid	i
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	b662      	cpsie	i
 8009be6:	607b      	str	r3, [r7, #4]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <vPortExitCritical+0x54>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <vPortExitCritical+0x54>)
 8009bf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bf6:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <vPortExitCritical+0x54>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d105      	bne.n	8009c0a <vPortExitCritical+0x46>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f383 8811 	msr	BASEPRI, r3
}
 8009c08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000020 	.word	0x20000020
 8009c1c:	00000000 	.word	0x00000000

08009c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c20:	f3ef 8009 	mrs	r0, PSP
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <pxCurrentTCBConst>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	f01e 0f10 	tst.w	lr, #16
 8009c30:	bf08      	it	eq
 8009c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	6010      	str	r0, [r2, #0]
 8009c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c44:	b672      	cpsid	i
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	b662      	cpsie	i
 8009c54:	f7fe fe9c 	bl	8008990 <vTaskSwitchContext>
 8009c58:	f04f 0000 	mov.w	r0, #0
 8009c5c:	f380 8811 	msr	BASEPRI, r0
 8009c60:	bc09      	pop	{r0, r3}
 8009c62:	6819      	ldr	r1, [r3, #0]
 8009c64:	6808      	ldr	r0, [r1, #0]
 8009c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	f01e 0f10 	tst.w	lr, #16
 8009c6e:	bf08      	it	eq
 8009c70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c74:	f380 8809 	msr	PSP, r0
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop

08009c80 <pxCurrentTCBConst>:
 8009c80:	200058b0 	.word	0x200058b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	b672      	cpsid	i
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	b662      	cpsie	i
 8009ca2:	607b      	str	r3, [r7, #4]
}
 8009ca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ca6:	f7fe fdb7 	bl	8008818 <xTaskIncrementTick>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <SysTick_Handler+0x44>)
 8009cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	f383 8811 	msr	BASEPRI, r3
}
 8009cc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cd4:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <vPortSetupTimerInterrupt+0x34>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cda:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <vPortSetupTimerInterrupt+0x38>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <vPortSetupTimerInterrupt+0x3c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a0a      	ldr	r2, [pc, #40]	; (8009d10 <vPortSetupTimerInterrupt+0x40>)
 8009ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cea:	099b      	lsrs	r3, r3, #6
 8009cec:	4a09      	ldr	r2, [pc, #36]	; (8009d14 <vPortSetupTimerInterrupt+0x44>)
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cf2:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <vPortSetupTimerInterrupt+0x34>)
 8009cf4:	2207      	movs	r2, #7
 8009cf6:	601a      	str	r2, [r3, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	e000e010 	.word	0xe000e010
 8009d08:	e000e018 	.word	0xe000e018
 8009d0c:	20000000 	.word	0x20000000
 8009d10:	10624dd3 	.word	0x10624dd3
 8009d14:	e000e014 	.word	0xe000e014

08009d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d28 <vPortEnableVFP+0x10>
 8009d1c:	6801      	ldr	r1, [r0, #0]
 8009d1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d22:	6001      	str	r1, [r0, #0]
 8009d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d26:	bf00      	nop
 8009d28:	e000ed88 	.word	0xe000ed88

08009d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d32:	f3ef 8305 	mrs	r3, IPSR
 8009d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b0f      	cmp	r3, #15
 8009d3c:	d916      	bls.n	8009d6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d3e:	4a19      	ldr	r2, [pc, #100]	; (8009da4 <vPortValidateInterruptPriority+0x78>)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d48:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <vPortValidateInterruptPriority+0x7c>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	7afa      	ldrb	r2, [r7, #11]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d20c      	bcs.n	8009d6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	b672      	cpsid	i
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	b662      	cpsie	i
 8009d66:	607b      	str	r3, [r7, #4]
}
 8009d68:	bf00      	nop
 8009d6a:	e7fe      	b.n	8009d6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	; (8009dac <vPortValidateInterruptPriority+0x80>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d74:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <vPortValidateInterruptPriority+0x84>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d90c      	bls.n	8009d96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	b672      	cpsid	i
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	b662      	cpsie	i
 8009d90:	603b      	str	r3, [r7, #0]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <vPortValidateInterruptPriority+0x68>
	}
 8009d96:	bf00      	nop
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	e000e3f0 	.word	0xe000e3f0
 8009da8:	20005edc 	.word	0x20005edc
 8009dac:	e000ed0c 	.word	0xe000ed0c
 8009db0:	20005ee0 	.word	0x20005ee0

08009db4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009dc0:	f7fe fc5a 	bl	8008678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dc4:	4b5b      	ldr	r3, [pc, #364]	; (8009f34 <pvPortMalloc+0x180>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dcc:	f000 f91a 	bl	800a004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dd0:	4b59      	ldr	r3, [pc, #356]	; (8009f38 <pvPortMalloc+0x184>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f040 8092 	bne.w	8009f02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01f      	beq.n	8009e24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009de4:	2208      	movs	r2, #8
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4413      	add	r3, r2
 8009dea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d016      	beq.n	8009e24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f023 0307 	bic.w	r3, r3, #7
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f003 0307 	and.w	r3, r3, #7
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00c      	beq.n	8009e24 <pvPortMalloc+0x70>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	b672      	cpsid	i
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	b662      	cpsie	i
 8009e1e:	617b      	str	r3, [r7, #20]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d06b      	beq.n	8009f02 <pvPortMalloc+0x14e>
 8009e2a:	4b44      	ldr	r3, [pc, #272]	; (8009f3c <pvPortMalloc+0x188>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d866      	bhi.n	8009f02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e34:	4b42      	ldr	r3, [pc, #264]	; (8009f40 <pvPortMalloc+0x18c>)
 8009e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e38:	4b41      	ldr	r3, [pc, #260]	; (8009f40 <pvPortMalloc+0x18c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e3e:	e004      	b.n	8009e4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d903      	bls.n	8009e5c <pvPortMalloc+0xa8>
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1f1      	bne.n	8009e40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e5c:	4b35      	ldr	r3, [pc, #212]	; (8009f34 <pvPortMalloc+0x180>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d04d      	beq.n	8009f02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	4413      	add	r3, r2
 8009e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	2308      	movs	r3, #8
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d921      	bls.n	8009ecc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00c      	beq.n	8009eb4 <pvPortMalloc+0x100>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	b672      	cpsid	i
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	b662      	cpsie	i
 8009eae:	613b      	str	r3, [r7, #16]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	1ad2      	subs	r2, r2, r3
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ec6:	69b8      	ldr	r0, [r7, #24]
 8009ec8:	f000 f8fe 	bl	800a0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ecc:	4b1b      	ldr	r3, [pc, #108]	; (8009f3c <pvPortMalloc+0x188>)
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <pvPortMalloc+0x188>)
 8009ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eda:	4b18      	ldr	r3, [pc, #96]	; (8009f3c <pvPortMalloc+0x188>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <pvPortMalloc+0x190>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d203      	bcs.n	8009eee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ee6:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <pvPortMalloc+0x188>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a16      	ldr	r2, [pc, #88]	; (8009f44 <pvPortMalloc+0x190>)
 8009eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <pvPortMalloc+0x184>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f02:	f7fe fbc7 	bl	8008694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00c      	beq.n	8009f2a <pvPortMalloc+0x176>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	b672      	cpsid	i
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	b662      	cpsie	i
 8009f24:	60fb      	str	r3, [r7, #12]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <pvPortMalloc+0x174>
	return pvReturn;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3728      	adds	r7, #40	; 0x28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20009aec 	.word	0x20009aec
 8009f38:	20009af8 	.word	0x20009af8
 8009f3c:	20009af0 	.word	0x20009af0
 8009f40:	20009ae4 	.word	0x20009ae4
 8009f44:	20009af4 	.word	0x20009af4

08009f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d04c      	beq.n	8009ff4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f5a:	2308      	movs	r3, #8
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	4413      	add	r3, r2
 8009f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <vPortFree+0xb4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10c      	bne.n	8009f90 <vPortFree+0x48>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	b672      	cpsid	i
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	b662      	cpsie	i
 8009f8a:	60fb      	str	r3, [r7, #12]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00c      	beq.n	8009fb2 <vPortFree+0x6a>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	b672      	cpsid	i
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	b662      	cpsie	i
 8009fac:	60bb      	str	r3, [r7, #8]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <vPortFree+0xb4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d019      	beq.n	8009ff4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d115      	bne.n	8009ff4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	4b0b      	ldr	r3, [pc, #44]	; (8009ffc <vPortFree+0xb4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	401a      	ands	r2, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fd8:	f7fe fb4e 	bl	8008678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <vPortFree+0xb8>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4a06      	ldr	r2, [pc, #24]	; (800a000 <vPortFree+0xb8>)
 8009fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fea:	6938      	ldr	r0, [r7, #16]
 8009fec:	f000 f86c 	bl	800a0c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ff0:	f7fe fb50 	bl	8008694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ff4:	bf00      	nop
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20009af8 	.word	0x20009af8
 800a000:	20009af0 	.word	0x20009af0

0800a004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a00a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a010:	4b27      	ldr	r3, [pc, #156]	; (800a0b0 <prvHeapInit+0xac>)
 800a012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f003 0307 	and.w	r3, r3, #7
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00c      	beq.n	800a038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3307      	adds	r3, #7
 800a022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0307 	bic.w	r3, r3, #7
 800a02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <prvHeapInit+0xac>)
 800a034:	4413      	add	r3, r2
 800a036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a03c:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <prvHeapInit+0xb0>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <prvHeapInit+0xb0>)
 800a044:	2200      	movs	r2, #0
 800a046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	4413      	add	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a050:	2208      	movs	r2, #8
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0307 	bic.w	r3, r3, #7
 800a05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <prvHeapInit+0xb4>)
 800a064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <prvHeapInit+0xb4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a06e:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <prvHeapInit+0xb4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a084:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <prvHeapInit+0xb4>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	4a0a      	ldr	r2, [pc, #40]	; (800a0bc <prvHeapInit+0xb8>)
 800a092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	4a09      	ldr	r2, [pc, #36]	; (800a0c0 <prvHeapInit+0xbc>)
 800a09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a09c:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <prvHeapInit+0xc0>)
 800a09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0a2:	601a      	str	r2, [r3, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	20005ee4 	.word	0x20005ee4
 800a0b4:	20009ae4 	.word	0x20009ae4
 800a0b8:	20009aec 	.word	0x20009aec
 800a0bc:	20009af4 	.word	0x20009af4
 800a0c0:	20009af0 	.word	0x20009af0
 800a0c4:	20009af8 	.word	0x20009af8

0800a0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <prvInsertBlockIntoFreeList+0xac>)
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	e002      	b.n	800a0dc <prvInsertBlockIntoFreeList+0x14>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d8f7      	bhi.n	800a0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d108      	bne.n	800a10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	441a      	add	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	441a      	add	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d118      	bne.n	800a150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b15      	ldr	r3, [pc, #84]	; (800a178 <prvInsertBlockIntoFreeList+0xb0>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	429a      	cmp	r2, r3
 800a128:	d00d      	beq.n	800a146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	441a      	add	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	e008      	b.n	800a158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <prvInsertBlockIntoFreeList+0xb0>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e003      	b.n	800a158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d002      	beq.n	800a166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20009ae4 	.word	0x20009ae4
 800a178:	20009aec 	.word	0x20009aec

0800a17c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	330c      	adds	r3, #12
 800a18c:	461a      	mov	r2, r3
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f002 f8d5 	bl	800c340 <tcpip_send_msg_wait_sem>
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d103      	bne.n	800a1aa <netconn_apimsg+0x2e>
    return apimsg->err;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a1a8:	e001      	b.n	800a1ae <netconn_apimsg+0x32>
  }
  return err;
 800a1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08c      	sub	sp, #48	; 0x30
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	603a      	str	r2, [r7, #0]
 800a1c2:	71fb      	strb	r3, [r7, #7]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 ff1b 	bl	800b008 <netconn_alloc>
 800a1d2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d054      	beq.n	800a284 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a1da:	79bb      	ldrb	r3, [r7, #6]
 800a1dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a1e2:	f107 0308 	add.w	r3, r7, #8
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4829      	ldr	r0, [pc, #164]	; (800a290 <netconn_new_with_proto_and_callback+0xd8>)
 800a1ea:	f7ff ffc7 	bl	800a17c <netconn_apimsg>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a1f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d043      	beq.n	800a284 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <netconn_new_with_proto_and_callback+0x58>
 800a204:	4b23      	ldr	r3, [pc, #140]	; (800a294 <netconn_new_with_proto_and_callback+0xdc>)
 800a206:	22a3      	movs	r2, #163	; 0xa3
 800a208:	4923      	ldr	r1, [pc, #140]	; (800a298 <netconn_new_with_proto_and_callback+0xe0>)
 800a20a:	4824      	ldr	r0, [pc, #144]	; (800a29c <netconn_new_with_proto_and_callback+0xe4>)
 800a20c:	f00d f970 	bl	80174f0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a212:	3310      	adds	r3, #16
 800a214:	4618      	mov	r0, r3
 800a216:	f00c fe4d 	bl	8016eb4 <sys_mbox_valid>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d105      	bne.n	800a22c <netconn_new_with_proto_and_callback+0x74>
 800a220:	4b1c      	ldr	r3, [pc, #112]	; (800a294 <netconn_new_with_proto_and_callback+0xdc>)
 800a222:	22a4      	movs	r2, #164	; 0xa4
 800a224:	491e      	ldr	r1, [pc, #120]	; (800a2a0 <netconn_new_with_proto_and_callback+0xe8>)
 800a226:	481d      	ldr	r0, [pc, #116]	; (800a29c <netconn_new_with_proto_and_callback+0xe4>)
 800a228:	f00d f962 	bl	80174f0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	3314      	adds	r3, #20
 800a230:	4618      	mov	r0, r3
 800a232:	f00c fe3f 	bl	8016eb4 <sys_mbox_valid>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <netconn_new_with_proto_and_callback+0x90>
 800a23c:	4b15      	ldr	r3, [pc, #84]	; (800a294 <netconn_new_with_proto_and_callback+0xdc>)
 800a23e:	22a6      	movs	r2, #166	; 0xa6
 800a240:	4918      	ldr	r1, [pc, #96]	; (800a2a4 <netconn_new_with_proto_and_callback+0xec>)
 800a242:	4816      	ldr	r0, [pc, #88]	; (800a29c <netconn_new_with_proto_and_callback+0xe4>)
 800a244:	f00d f954 	bl	80174f0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	330c      	adds	r3, #12
 800a24c:	4618      	mov	r0, r3
 800a24e:	f00c febf 	bl	8016fd0 <sys_sem_valid>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d105      	bne.n	800a264 <netconn_new_with_proto_and_callback+0xac>
 800a258:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <netconn_new_with_proto_and_callback+0xdc>)
 800a25a:	22a9      	movs	r2, #169	; 0xa9
 800a25c:	4912      	ldr	r1, [pc, #72]	; (800a2a8 <netconn_new_with_proto_and_callback+0xf0>)
 800a25e:	480f      	ldr	r0, [pc, #60]	; (800a29c <netconn_new_with_proto_and_callback+0xe4>)
 800a260:	f00d f946 	bl	80174f0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	330c      	adds	r3, #12
 800a268:	4618      	mov	r0, r3
 800a26a:	f00c fea4 	bl	8016fb6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	3310      	adds	r3, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f00c fdaa 	bl	8016dcc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a27a:	2006      	movs	r0, #6
 800a27c:	f002 ff26 	bl	800d0cc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	e000      	b.n	800a286 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a286:	4618      	mov	r0, r3
 800a288:	3730      	adds	r7, #48	; 0x30
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	0800afdd 	.word	0x0800afdd
 800a294:	0801a600 	.word	0x0801a600
 800a298:	0801a634 	.word	0x0801a634
 800a29c:	0801a658 	.word	0x0801a658
 800a2a0:	0801a680 	.word	0x0801a680
 800a2a4:	0801a698 	.word	0x0801a698
 800a2a8:	0801a6bc 	.word	0x0801a6bc

0800a2ac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	; 0x30
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e014      	b.n	800a2e8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a2c2:	2329      	movs	r3, #41	; 0x29
 800a2c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a2c6:	f107 030c 	add.w	r3, r7, #12
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <netconn_prepare_delete+0x44>)
 800a2ce:	f7ff ff55 	bl	800a17c <netconn_apimsg>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a2d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <netconn_prepare_delete+0x3a>
    return err;
 800a2e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2e4:	e000      	b.n	800a2e8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3730      	adds	r7, #48	; 0x30
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	0800b541 	.word	0x0800b541

0800a2f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <netconn_delete+0x12>
    return ERR_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	e00d      	b.n	800a322 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7ff ffd0 	bl	800a2ac <netconn_prepare_delete>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <netconn_delete+0x2a>
    netconn_free(conn);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fedf 	bl	800b0dc <netconn_free>
  }
  return err;
 800a31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	; 0x38
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <netconn_bind+0x28>
 800a340:	4b11      	ldr	r3, [pc, #68]	; (800a388 <netconn_bind+0x5c>)
 800a342:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a346:	4911      	ldr	r1, [pc, #68]	; (800a38c <netconn_bind+0x60>)
 800a348:	4811      	ldr	r0, [pc, #68]	; (800a390 <netconn_bind+0x64>)
 800a34a:	f00d f8d1 	bl	80174f0 <iprintf>
 800a34e:	f06f 030f 	mvn.w	r3, #15
 800a352:	e015      	b.n	800a380 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a35a:	4b0e      	ldr	r3, [pc, #56]	; (800a394 <netconn_bind+0x68>)
 800a35c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a366:	88fb      	ldrh	r3, [r7, #6]
 800a368:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a36a:	f107 0314 	add.w	r3, r7, #20
 800a36e:	4619      	mov	r1, r3
 800a370:	4809      	ldr	r0, [pc, #36]	; (800a398 <netconn_bind+0x6c>)
 800a372:	f7ff ff03 	bl	800a17c <netconn_apimsg>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a37c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a380:	4618      	mov	r0, r3
 800a382:	3738      	adds	r7, #56	; 0x38
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	0801a600 	.word	0x0801a600
 800a38c:	0801a738 	.word	0x0801a738
 800a390:	0801a658 	.word	0x0801a658
 800a394:	0801d8d0 	.word	0x0801d8d0
 800a398:	0800b6ed 	.word	0x0800b6ed

0800a39c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08e      	sub	sp, #56	; 0x38
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <netconn_connect+0x28>
 800a3b0:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <netconn_connect+0x5c>)
 800a3b2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800a3b6:	4911      	ldr	r1, [pc, #68]	; (800a3fc <netconn_connect+0x60>)
 800a3b8:	4811      	ldr	r0, [pc, #68]	; (800a400 <netconn_connect+0x64>)
 800a3ba:	f00d f899 	bl	80174f0 <iprintf>
 800a3be:	f06f 030f 	mvn.w	r3, #15
 800a3c2:	e015      	b.n	800a3f0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800a3ca:	4b0e      	ldr	r3, [pc, #56]	; (800a404 <netconn_connect+0x68>)
 800a3cc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a3d6:	88fb      	ldrh	r3, [r7, #6]
 800a3d8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800a3da:	f107 0314 	add.w	r3, r7, #20
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4809      	ldr	r0, [pc, #36]	; (800a408 <netconn_connect+0x6c>)
 800a3e2:	f7ff fecb 	bl	800a17c <netconn_apimsg>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a3ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3738      	adds	r7, #56	; 0x38
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	0801a600 	.word	0x0801a600
 800a3fc:	0801a774 	.word	0x0801a774
 800a400:	0801a658 	.word	0x0801a658
 800a404:	0801d8d0 	.word	0x0801d8d0
 800a408:	0800b865 	.word	0x0800b865

0800a40c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d109      	bne.n	800a438 <netconn_recv_data+0x2c>
 800a424:	4b4d      	ldr	r3, [pc, #308]	; (800a55c <netconn_recv_data+0x150>)
 800a426:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a42a:	494d      	ldr	r1, [pc, #308]	; (800a560 <netconn_recv_data+0x154>)
 800a42c:	484d      	ldr	r0, [pc, #308]	; (800a564 <netconn_recv_data+0x158>)
 800a42e:	f00d f85f 	bl	80174f0 <iprintf>
 800a432:	f06f 030f 	mvn.w	r3, #15
 800a436:	e08d      	b.n	800a554 <netconn_recv_data+0x148>
  *new_buf = NULL;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d109      	bne.n	800a458 <netconn_recv_data+0x4c>
 800a444:	4b45      	ldr	r3, [pc, #276]	; (800a55c <netconn_recv_data+0x150>)
 800a446:	f240 224a 	movw	r2, #586	; 0x24a
 800a44a:	4947      	ldr	r1, [pc, #284]	; (800a568 <netconn_recv_data+0x15c>)
 800a44c:	4845      	ldr	r0, [pc, #276]	; (800a564 <netconn_recv_data+0x158>)
 800a44e:	f00d f84f 	bl	80174f0 <iprintf>
 800a452:	f06f 030f 	mvn.w	r3, #15
 800a456:	e07d      	b.n	800a554 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3310      	adds	r3, #16
 800a45c:	4618      	mov	r0, r3
 800a45e:	f00c fd29 	bl	8016eb4 <sys_mbox_valid>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10e      	bne.n	800a486 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 faae 	bl	800a9ca <netconn_err>
 800a46e:	4603      	mov	r3, r0
 800a470:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800a472:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a47a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a47e:	e069      	b.n	800a554 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 800a480:	f06f 030a 	mvn.w	r3, #10
 800a484:	e066      	b.n	800a554 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	7f1b      	ldrb	r3, [r3, #28]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10f      	bne.n	800a4b2 <netconn_recv_data+0xa6>
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	7f1b      	ldrb	r3, [r3, #28]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d104      	bne.n	800a4b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d023      	beq.n	800a4fa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	f107 0214 	add.w	r2, r7, #20
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f00c fce2 	bl	8016e86 <sys_arch_mbox_tryfetch>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4c8:	d11f      	bne.n	800a50a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fa7d 	bl	800a9ca <netconn_err>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 800a4d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a4dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a4e0:	e038      	b.n	800a554 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	7f1b      	ldrb	r3, [r3, #28]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a4ee:	f06f 030a 	mvn.w	r3, #10
 800a4f2:	e02f      	b.n	800a554 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 800a4f4:	f06f 0306 	mvn.w	r3, #6
 800a4f8:	e02c      	b.n	800a554 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3310      	adds	r3, #16
 800a4fe:	f107 0114 	add.w	r1, r7, #20
 800a502:	2200      	movs	r2, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f00c fc8d 	bl	8016e24 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f107 0213 	add.w	r2, r7, #19
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f000 faaa 	bl	800aa6c <lwip_netconn_is_err_msg>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d009      	beq.n	800a532 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a51e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a522:	f113 0f0f 	cmn.w	r3, #15
 800a526:	d101      	bne.n	800a52c <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	e013      	b.n	800a554 <netconn_recv_data+0x148>
      }
      return err;
 800a52c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a530:	e010      	b.n	800a554 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	891b      	ldrh	r3, [r3, #8]
 800a536:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <netconn_recv_data+0x140>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	8bba      	ldrh	r2, [r7, #28]
 800a546:	2101      	movs	r1, #1
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	0801a600 	.word	0x0801a600
 800a560:	0801a818 	.word	0x0801a818
 800a564:	0801a658 	.word	0x0801a658
 800a568:	0801a838 	.word	0x0801a838

0800a56c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <netconn_tcp_recvd_msg+0x1e>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a586:	2b10      	cmp	r3, #16
 800a588:	d009      	beq.n	800a59e <netconn_tcp_recvd_msg+0x32>
 800a58a:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <netconn_tcp_recvd_msg+0x50>)
 800a58c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a590:	490b      	ldr	r1, [pc, #44]	; (800a5c0 <netconn_tcp_recvd_msg+0x54>)
 800a592:	480c      	ldr	r0, [pc, #48]	; (800a5c4 <netconn_tcp_recvd_msg+0x58>)
 800a594:	f00c ffac 	bl	80174f0 <iprintf>
 800a598:	f06f 030f 	mvn.w	r3, #15
 800a59c:	e00a      	b.n	800a5b4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	4806      	ldr	r0, [pc, #24]	; (800a5c8 <netconn_tcp_recvd_msg+0x5c>)
 800a5ae:	f7ff fde5 	bl	800a17c <netconn_apimsg>
 800a5b2:	4603      	mov	r3, r0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	0801a600 	.word	0x0801a600
 800a5c0:	0801a854 	.word	0x0801a854
 800a5c4:	0801a658 	.word	0x0801a658
 800a5c8:	0800b9c1 	.word	0x0800b9c1

0800a5cc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b090      	sub	sp, #64	; 0x40
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3310      	adds	r3, #16
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f00c fc68 	bl	8016eb4 <sys_mbox_valid>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a5ea:	f06f 030a 	mvn.w	r3, #10
 800a5ee:	e06d      	b.n	800a6cc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	7f1b      	ldrb	r3, [r3, #28]
 800a5f4:	b25b      	sxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	da07      	bge.n	800a60a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	7f1b      	ldrb	r3, [r3, #28]
 800a5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a602:	b2da      	uxtb	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a608:	e039      	b.n	800a67e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	461a      	mov	r2, r3
 800a60e:	68b9      	ldr	r1, [r7, #8]
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fefb 	bl	800a40c <netconn_recv_data>
 800a616:	4603      	mov	r3, r0
 800a618:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a61c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a624:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a628:	e050      	b.n	800a6cc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	f003 0308 	and.w	r3, r3, #8
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10e      	bne.n	800a658 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <netconn_recv_data_tcp+0x7a>
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	891b      	ldrh	r3, [r3, #8]
 800a644:	e000      	b.n	800a648 <netconn_recv_data_tcp+0x7c>
 800a646:	2301      	movs	r3, #1
 800a648:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a64a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a64c:	f107 0214 	add.w	r2, r7, #20
 800a650:	4619      	mov	r1, r3
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff ff8a 	bl	800a56c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d134      	bne.n	800a6c8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	f003 0310 	and.w	r3, r3, #16
 800a664:	2b00      	cmp	r3, #0
 800a666:	d009      	beq.n	800a67c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	7f1b      	ldrb	r3, [r3, #28]
 800a66c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a670:	b2da      	uxtb	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a676:	f06f 0306 	mvn.w	r3, #6
 800a67a:	e027      	b.n	800a6cc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a67c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <netconn_recv_data_tcp+0xc6>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68a:	2200      	movs	r2, #0
 800a68c:	2101      	movs	r1, #1
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10f      	bne.n	800a6ba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f995 	bl	800a9ca <netconn_err>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a6a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <netconn_recv_data_tcp+0xe8>
          return err;
 800a6ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6b2:	e00b      	b.n	800a6cc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a6b4:	f06f 030d 	mvn.w	r3, #13
 800a6b8:	e008      	b.n	800a6cc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f947 	bl	800a950 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a6c2:	f06f 030e 	mvn.w	r3, #14
 800a6c6:	e001      	b.n	800a6cc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a6c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3740      	adds	r7, #64	; 0x40
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d109      	bne.n	800a6fc <netconn_recv+0x28>
 800a6e8:	4b2b      	ldr	r3, [pc, #172]	; (800a798 <netconn_recv+0xc4>)
 800a6ea:	f240 3263 	movw	r2, #867	; 0x363
 800a6ee:	492b      	ldr	r1, [pc, #172]	; (800a79c <netconn_recv+0xc8>)
 800a6f0:	482b      	ldr	r0, [pc, #172]	; (800a7a0 <netconn_recv+0xcc>)
 800a6f2:	f00c fefd 	bl	80174f0 <iprintf>
 800a6f6:	f06f 030f 	mvn.w	r3, #15
 800a6fa:	e049      	b.n	800a790 <netconn_recv+0xbc>
  *new_buf = NULL;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <netconn_recv+0x48>
 800a708:	4b23      	ldr	r3, [pc, #140]	; (800a798 <netconn_recv+0xc4>)
 800a70a:	f240 3265 	movw	r2, #869	; 0x365
 800a70e:	4925      	ldr	r1, [pc, #148]	; (800a7a4 <netconn_recv+0xd0>)
 800a710:	4823      	ldr	r0, [pc, #140]	; (800a7a0 <netconn_recv+0xcc>)
 800a712:	f00c feed 	bl	80174f0 <iprintf>
 800a716:	f06f 030f 	mvn.w	r3, #15
 800a71a:	e039      	b.n	800a790 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a720:	2005      	movs	r0, #5
 800a722:	f002 fc5d 	bl	800cfe0 <memp_malloc>
 800a726:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <netconn_recv+0x60>
      return ERR_MEM;
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a732:	e02d      	b.n	800a790 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a734:	f107 030c 	add.w	r3, r7, #12
 800a738:	2200      	movs	r2, #0
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7ff ff45 	bl	800a5cc <netconn_recv_data_tcp>
 800a742:	4603      	mov	r3, r0
 800a744:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d006      	beq.n	800a75c <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 800a74e:	6979      	ldr	r1, [r7, #20]
 800a750:	2005      	movs	r0, #5
 800a752:	f002 fcbb 	bl	800d0cc <memp_free>
      return err;
 800a756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a75a:	e019      	b.n	800a790 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <netconn_recv+0x9c>
 800a762:	4b0d      	ldr	r3, [pc, #52]	; (800a798 <netconn_recv+0xc4>)
 800a764:	f240 3279 	movw	r2, #889	; 0x379
 800a768:	490f      	ldr	r1, [pc, #60]	; (800a7a8 <netconn_recv+0xd4>)
 800a76a:	480d      	ldr	r0, [pc, #52]	; (800a7a0 <netconn_recv+0xcc>)
 800a76c:	f00c fec0 	bl	80174f0 <iprintf>

    buf->p = p;
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2200      	movs	r2, #0
 800a786:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a78e:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	0801a600 	.word	0x0801a600
 800a79c:	0801a818 	.word	0x0801a818
 800a7a0:	0801a658 	.word	0x0801a658
 800a7a4:	0801a838 	.word	0x0801a838
 800a7a8:	0801a8a4 	.word	0x0801a8a4

0800a7ac <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a7c2:	78fa      	ldrb	r2, [r7, #3]
 800a7c4:	f107 0110 	add.w	r1, r7, #16
 800a7c8:	6a3b      	ldr	r3, [r7, #32]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 f805 	bl	800a7e0 <netconn_write_vectors_partly>
 800a7d6:	4603      	mov	r3, r0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b092      	sub	sp, #72	; 0x48
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	80fb      	strh	r3, [r7, #6]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <netconn_write_vectors_partly+0x30>
 800a7fc:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <netconn_write_vectors_partly+0x158>)
 800a7fe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a802:	494e      	ldr	r1, [pc, #312]	; (800a93c <netconn_write_vectors_partly+0x15c>)
 800a804:	484e      	ldr	r0, [pc, #312]	; (800a940 <netconn_write_vectors_partly+0x160>)
 800a806:	f00c fe73 	bl	80174f0 <iprintf>
 800a80a:	f06f 030f 	mvn.w	r3, #15
 800a80e:	e08e      	b.n	800a92e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a818:	2b10      	cmp	r3, #16
 800a81a:	d009      	beq.n	800a830 <netconn_write_vectors_partly+0x50>
 800a81c:	4b46      	ldr	r3, [pc, #280]	; (800a938 <netconn_write_vectors_partly+0x158>)
 800a81e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a822:	4948      	ldr	r1, [pc, #288]	; (800a944 <netconn_write_vectors_partly+0x164>)
 800a824:	4846      	ldr	r0, [pc, #280]	; (800a940 <netconn_write_vectors_partly+0x160>)
 800a826:	f00c fe63 	bl	80174f0 <iprintf>
 800a82a:	f06f 0305 	mvn.w	r3, #5
 800a82e:	e07e      	b.n	800a92e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	7f1b      	ldrb	r3, [r3, #28]
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d104      	bne.n	800a846 <netconn_write_vectors_partly+0x66>
 800a83c:	797b      	ldrb	r3, [r7, #5]
 800a83e:	f003 0304 	and.w	r3, r3, #4
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <netconn_write_vectors_partly+0x6a>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <netconn_write_vectors_partly+0x6c>
 800a84a:	2300      	movs	r3, #0
 800a84c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a850:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <netconn_write_vectors_partly+0x84>
 800a858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d102      	bne.n	800a864 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a85e:	f06f 0305 	mvn.w	r3, #5
 800a862:	e064      	b.n	800a92e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a868:	2300      	movs	r3, #0
 800a86a:	643b      	str	r3, [r7, #64]	; 0x40
 800a86c:	e015      	b.n	800a89a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	4413      	add	r3, r2
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a87a:	4413      	add	r3, r2
 800a87c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	4413      	add	r3, r2
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d202      	bcs.n	800a894 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a88e:	f06f 0305 	mvn.w	r3, #5
 800a892:	e04c      	b.n	800a92e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a896:	3301      	adds	r3, #1
 800a898:	643b      	str	r3, [r7, #64]	; 0x40
 800a89a:	88fb      	ldrh	r3, [r7, #6]
 800a89c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	dbe5      	blt.n	800a86e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	e040      	b.n	800a92e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da0a      	bge.n	800a8c8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a8b8:	f06f 0305 	mvn.w	r3, #5
 800a8bc:	e037      	b.n	800a92e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a8be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a8c2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a8d0:	88fb      	ldrh	r3, [r7, #6]
 800a8d2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a8d8:	797b      	ldrb	r3, [r7, #5]
 800a8da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a8e6:	f107 0314 	add.w	r3, r7, #20
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4816      	ldr	r0, [pc, #88]	; (800a948 <netconn_write_vectors_partly+0x168>)
 800a8ee:	f7ff fc45 	bl	800a17c <netconn_apimsg>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a8f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d114      	bne.n	800a92a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a90c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10a      	bne.n	800a92a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a918:	429a      	cmp	r2, r3
 800a91a:	d006      	beq.n	800a92a <netconn_write_vectors_partly+0x14a>
 800a91c:	4b06      	ldr	r3, [pc, #24]	; (800a938 <netconn_write_vectors_partly+0x158>)
 800a91e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a922:	490a      	ldr	r1, [pc, #40]	; (800a94c <netconn_write_vectors_partly+0x16c>)
 800a924:	4806      	ldr	r0, [pc, #24]	; (800a940 <netconn_write_vectors_partly+0x160>)
 800a926:	f00c fde3 	bl	80174f0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a92a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3748      	adds	r7, #72	; 0x48
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	0801a600 	.word	0x0801a600
 800a93c:	0801a8cc 	.word	0x0801a8cc
 800a940:	0801a658 	.word	0x0801a658
 800a944:	0801a8e8 	.word	0x0801a8e8
 800a948:	0800bdc5 	.word	0x0800bdc5
 800a94c:	0801a90c 	.word	0x0801a90c

0800a950 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08c      	sub	sp, #48	; 0x30
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <netconn_close_shutdown+0x26>
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <netconn_close_shutdown+0x50>)
 800a964:	f240 4247 	movw	r2, #1095	; 0x447
 800a968:	490e      	ldr	r1, [pc, #56]	; (800a9a4 <netconn_close_shutdown+0x54>)
 800a96a:	480f      	ldr	r0, [pc, #60]	; (800a9a8 <netconn_close_shutdown+0x58>)
 800a96c:	f00c fdc0 	bl	80174f0 <iprintf>
 800a970:	f06f 030f 	mvn.w	r3, #15
 800a974:	e010      	b.n	800a998 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a97e:	2329      	movs	r3, #41	; 0x29
 800a980:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a982:	f107 030c 	add.w	r3, r7, #12
 800a986:	4619      	mov	r1, r3
 800a988:	4808      	ldr	r0, [pc, #32]	; (800a9ac <netconn_close_shutdown+0x5c>)
 800a98a:	f7ff fbf7 	bl	800a17c <netconn_apimsg>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a994:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3730      	adds	r7, #48	; 0x30
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	0801a600 	.word	0x0801a600
 800a9a4:	0801a930 	.word	0x0801a930
 800a9a8:	0801a658 	.word	0x0801a658
 800a9ac:	0800bed9 	.word	0x0800bed9

0800a9b0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a9b8:	2103      	movs	r1, #3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7ff ffc8 	bl	800a950 <netconn_close_shutdown>
 800a9c0:	4603      	mov	r3, r0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <netconn_err+0x12>
    return ERR_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e00d      	b.n	800a9f8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a9dc:	f00c fb74 	bl	80170c8 <sys_arch_protect>
 800a9e0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	7a1b      	ldrb	r3, [r3, #8]
 800a9e6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f00c fb78 	bl	80170e4 <sys_arch_unprotect>
  return err;
 800a9f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800aa0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa0e:	f113 0f0d 	cmn.w	r3, #13
 800aa12:	d009      	beq.n	800aa28 <lwip_netconn_err_to_msg+0x28>
 800aa14:	f113 0f0d 	cmn.w	r3, #13
 800aa18:	dc0c      	bgt.n	800aa34 <lwip_netconn_err_to_msg+0x34>
 800aa1a:	f113 0f0f 	cmn.w	r3, #15
 800aa1e:	d007      	beq.n	800aa30 <lwip_netconn_err_to_msg+0x30>
 800aa20:	f113 0f0e 	cmn.w	r3, #14
 800aa24:	d002      	beq.n	800aa2c <lwip_netconn_err_to_msg+0x2c>
 800aa26:	e005      	b.n	800aa34 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800aa28:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <lwip_netconn_err_to_msg+0x54>)
 800aa2a:	e00e      	b.n	800aa4a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <lwip_netconn_err_to_msg+0x58>)
 800aa2e:	e00c      	b.n	800aa4a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <lwip_netconn_err_to_msg+0x5c>)
 800aa32:	e00a      	b.n	800aa4a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800aa34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <lwip_netconn_err_to_msg+0x48>
 800aa3c:	4b08      	ldr	r3, [pc, #32]	; (800aa60 <lwip_netconn_err_to_msg+0x60>)
 800aa3e:	227d      	movs	r2, #125	; 0x7d
 800aa40:	4908      	ldr	r1, [pc, #32]	; (800aa64 <lwip_netconn_err_to_msg+0x64>)
 800aa42:	4809      	ldr	r0, [pc, #36]	; (800aa68 <lwip_netconn_err_to_msg+0x68>)
 800aa44:	f00c fd54 	bl	80174f0 <iprintf>
      return NULL;
 800aa48:	2300      	movs	r3, #0
  }
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	0801d7cc 	.word	0x0801d7cc
 800aa58:	0801d7cd 	.word	0x0801d7cd
 800aa5c:	0801d7ce 	.word	0x0801d7ce
 800aa60:	0801a94c 	.word	0x0801a94c
 800aa64:	0801a980 	.word	0x0801a980
 800aa68:	0801a990 	.word	0x0801a990

0800aa6c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d105      	bne.n	800aa88 <lwip_netconn_is_err_msg+0x1c>
 800aa7c:	4b12      	ldr	r3, [pc, #72]	; (800aac8 <lwip_netconn_is_err_msg+0x5c>)
 800aa7e:	2285      	movs	r2, #133	; 0x85
 800aa80:	4912      	ldr	r1, [pc, #72]	; (800aacc <lwip_netconn_is_err_msg+0x60>)
 800aa82:	4813      	ldr	r0, [pc, #76]	; (800aad0 <lwip_netconn_is_err_msg+0x64>)
 800aa84:	f00c fd34 	bl	80174f0 <iprintf>

  if (msg == &netconn_aborted) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a12      	ldr	r2, [pc, #72]	; (800aad4 <lwip_netconn_is_err_msg+0x68>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d104      	bne.n	800aa9a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	22f3      	movs	r2, #243	; 0xf3
 800aa94:	701a      	strb	r2, [r3, #0]
    return 1;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e012      	b.n	800aac0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a0e      	ldr	r2, [pc, #56]	; (800aad8 <lwip_netconn_is_err_msg+0x6c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d104      	bne.n	800aaac <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	22f2      	movs	r2, #242	; 0xf2
 800aaa6:	701a      	strb	r2, [r3, #0]
    return 1;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e009      	b.n	800aac0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a0b      	ldr	r2, [pc, #44]	; (800aadc <lwip_netconn_is_err_msg+0x70>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d104      	bne.n	800aabe <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	22f1      	movs	r2, #241	; 0xf1
 800aab8:	701a      	strb	r2, [r3, #0]
    return 1;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0801a94c 	.word	0x0801a94c
 800aacc:	0801a9b8 	.word	0x0801a9b8
 800aad0:	0801a990 	.word	0x0801a990
 800aad4:	0801d7cc 	.word	0x0801d7cc
 800aad8:	0801d7cd 	.word	0x0801d7cd
 800aadc:	0801d7ce 	.word	0x0801d7ce

0800aae0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d106      	bne.n	800ab02 <recv_tcp+0x22>
 800aaf4:	4b36      	ldr	r3, [pc, #216]	; (800abd0 <recv_tcp+0xf0>)
 800aaf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aafa:	4936      	ldr	r1, [pc, #216]	; (800abd4 <recv_tcp+0xf4>)
 800aafc:	4836      	ldr	r0, [pc, #216]	; (800abd8 <recv_tcp+0xf8>)
 800aafe:	f00c fcf7 	bl	80174f0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d106      	bne.n	800ab16 <recv_tcp+0x36>
 800ab08:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <recv_tcp+0xf0>)
 800ab0a:	f240 122d 	movw	r2, #301	; 0x12d
 800ab0e:	4933      	ldr	r1, [pc, #204]	; (800abdc <recv_tcp+0xfc>)
 800ab10:	4831      	ldr	r0, [pc, #196]	; (800abd8 <recv_tcp+0xf8>)
 800ab12:	f00c fced 	bl	80174f0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ab16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d006      	beq.n	800ab2c <recv_tcp+0x4c>
 800ab1e:	4b2c      	ldr	r3, [pc, #176]	; (800abd0 <recv_tcp+0xf0>)
 800ab20:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ab24:	492e      	ldr	r1, [pc, #184]	; (800abe0 <recv_tcp+0x100>)
 800ab26:	482c      	ldr	r0, [pc, #176]	; (800abd8 <recv_tcp+0xf8>)
 800ab28:	f00c fce2 	bl	80174f0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <recv_tcp+0x5c>
    return ERR_VAL;
 800ab36:	f06f 0305 	mvn.w	r3, #5
 800ab3a:	e045      	b.n	800abc8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d006      	beq.n	800ab54 <recv_tcp+0x74>
 800ab46:	4b22      	ldr	r3, [pc, #136]	; (800abd0 <recv_tcp+0xf0>)
 800ab48:	f240 1235 	movw	r2, #309	; 0x135
 800ab4c:	4925      	ldr	r1, [pc, #148]	; (800abe4 <recv_tcp+0x104>)
 800ab4e:	4822      	ldr	r0, [pc, #136]	; (800abd8 <recv_tcp+0xf8>)
 800ab50:	f00c fcce 	bl	80174f0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	3310      	adds	r3, #16
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f00c f9ab 	bl	8016eb4 <sys_mbox_valid>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10d      	bne.n	800ab80 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d008      	beq.n	800ab7c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	891b      	ldrh	r3, [r3, #8]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68b8      	ldr	r0, [r7, #8]
 800ab72:	f004 f839 	bl	800ebe8 <tcp_recved>
      pbuf_free(p);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f003 f948 	bl	800de0c <pbuf_free>
    }
    return ERR_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e023      	b.n	800abc8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d005      	beq.n	800ab92 <recv_tcp+0xb2>
    msg = p;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	891b      	ldrh	r3, [r3, #8]
 800ab8e:	83fb      	strh	r3, [r7, #30]
 800ab90:	e003      	b.n	800ab9a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <recv_tcp+0x108>)
 800ab94:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	3310      	adds	r3, #16
 800ab9e:	69b9      	ldr	r1, [r7, #24]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f00c f925 	bl	8016df0 <sys_mbox_trypost>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800abac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb0:	e00a      	b.n	800abc8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <recv_tcp+0xe6>
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	8bfa      	ldrh	r2, [r7, #30]
 800abc0:	2100      	movs	r1, #0
 800abc2:	6978      	ldr	r0, [r7, #20]
 800abc4:	4798      	blx	r3
  }

  return ERR_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	0801a94c 	.word	0x0801a94c
 800abd4:	0801a9c4 	.word	0x0801a9c4
 800abd8:	0801a990 	.word	0x0801a990
 800abdc:	0801a9e8 	.word	0x0801a9e8
 800abe0:	0801aa08 	.word	0x0801aa08
 800abe4:	0801aa20 	.word	0x0801aa20
 800abe8:	0801d7ce 	.word	0x0801d7ce

0800abec <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d106      	bne.n	800ac0e <poll_tcp+0x22>
 800ac00:	4b29      	ldr	r3, [pc, #164]	; (800aca8 <poll_tcp+0xbc>)
 800ac02:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ac06:	4929      	ldr	r1, [pc, #164]	; (800acac <poll_tcp+0xc0>)
 800ac08:	4829      	ldr	r0, [pc, #164]	; (800acb0 <poll_tcp+0xc4>)
 800ac0a:	f00c fc71 	bl	80174f0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d104      	bne.n	800ac20 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ac16:	2101      	movs	r1, #1
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 ff07 	bl	800ba2c <lwip_netconn_do_writemore>
 800ac1e:	e016      	b.n	800ac4e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	785b      	ldrb	r3, [r3, #1]
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d112      	bne.n	800ac4e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <poll_tcp+0x5a>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	7a5b      	ldrb	r3, [r3, #9]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d005      	beq.n	800ac46 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	7a5a      	ldrb	r2, [r3, #9]
 800ac40:	3a01      	subs	r2, #1
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ac46:	2101      	movs	r1, #1
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fb0f 	bl	800b26c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	7f1b      	ldrb	r3, [r3, #28]
 800ac52:	f003 0310 	and.w	r3, r3, #16
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d021      	beq.n	800ac9e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01d      	beq.n	800ac9e <poll_tcp+0xb2>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac6a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ac6e:	d316      	bcc.n	800ac9e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d810      	bhi.n	800ac9e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	7f1b      	ldrb	r3, [r3, #28]
 800ac80:	f023 0310 	bic.w	r3, r3, #16
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <poll_tcp+0xb2>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	2200      	movs	r2, #0
 800ac98:	2102      	movs	r1, #2
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	0801a94c 	.word	0x0801a94c
 800acac:	0801aa40 	.word	0x0801aa40
 800acb0:	0801a990 	.word	0x0801a990

0800acb4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d106      	bne.n	800acda <sent_tcp+0x26>
 800accc:	4b20      	ldr	r3, [pc, #128]	; (800ad50 <sent_tcp+0x9c>)
 800acce:	f240 1293 	movw	r2, #403	; 0x193
 800acd2:	4920      	ldr	r1, [pc, #128]	; (800ad54 <sent_tcp+0xa0>)
 800acd4:	4820      	ldr	r0, [pc, #128]	; (800ad58 <sent_tcp+0xa4>)
 800acd6:	f00c fc0b 	bl	80174f0 <iprintf>

  if (conn) {
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d032      	beq.n	800ad46 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d104      	bne.n	800acf2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ace8:	2101      	movs	r1, #1
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	f000 fe9e 	bl	800ba2c <lwip_netconn_do_writemore>
 800acf0:	e007      	b.n	800ad02 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d103      	bne.n	800ad02 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800acfa:	2101      	movs	r1, #1
 800acfc:	6978      	ldr	r0, [r7, #20]
 800acfe:	f000 fab5 	bl	800b26c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d01d      	beq.n	800ad46 <sent_tcp+0x92>
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad12:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ad16:	d316      	bcc.n	800ad46 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d810      	bhi.n	800ad46 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	7f1b      	ldrb	r3, [r3, #28]
 800ad28:	f023 0310 	bic.w	r3, r3, #16
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <sent_tcp+0x92>
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	88fa      	ldrh	r2, [r7, #6]
 800ad40:	2102      	movs	r1, #2
 800ad42:	6978      	ldr	r0, [r7, #20]
 800ad44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	0801a94c 	.word	0x0801a94c
 800ad54:	0801aa40 	.word	0x0801aa40
 800ad58:	0801a990 	.word	0x0801a990

0800ad5c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <err_tcp+0x24>
 800ad72:	4b5f      	ldr	r3, [pc, #380]	; (800aef0 <err_tcp+0x194>)
 800ad74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ad78:	495e      	ldr	r1, [pc, #376]	; (800aef4 <err_tcp+0x198>)
 800ad7a:	485f      	ldr	r0, [pc, #380]	; (800aef8 <err_tcp+0x19c>)
 800ad7c:	f00c fbb8 	bl	80174f0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ad80:	f00c f9a2 	bl	80170c8 <sys_arch_protect>
 800ad84:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	7f1b      	ldrb	r3, [r3, #28]
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	2200      	movs	r2, #0
 800adaa:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800adac:	69b8      	ldr	r0, [r7, #24]
 800adae:	f00c f999 	bl	80170e4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d005      	beq.n	800adc6 <err_tcp+0x6a>
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2200      	movs	r2, #0
 800adc0:	2104      	movs	r1, #4
 800adc2:	69f8      	ldr	r0, [r7, #28]
 800adc4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <err_tcp+0x7e>
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2200      	movs	r2, #0
 800add4:	2100      	movs	r1, #0
 800add6:	69f8      	ldr	r0, [r7, #28]
 800add8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d005      	beq.n	800adee <err_tcp+0x92>
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	2200      	movs	r2, #0
 800ade8:	2102      	movs	r1, #2
 800adea:	69f8      	ldr	r0, [r7, #28]
 800adec:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800adee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fe04 	bl	800aa00 <lwip_netconn_err_to_msg>
 800adf8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	3310      	adds	r3, #16
 800adfe:	4618      	mov	r0, r3
 800ae00:	f00c f858 	bl	8016eb4 <sys_mbox_valid>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	3310      	adds	r3, #16
 800ae0e:	6939      	ldr	r1, [r7, #16]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f00b ffed 	bl	8016df0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	3314      	adds	r3, #20
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f00c f84a 	bl	8016eb4 <sys_mbox_valid>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d005      	beq.n	800ae32 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	3314      	adds	r3, #20
 800ae2a:	6939      	ldr	r1, [r7, #16]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f00b ffdf 	bl	8016df0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d005      	beq.n	800ae44 <err_tcp+0xe8>
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d002      	beq.n	800ae44 <err_tcp+0xe8>
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d143      	bne.n	800aecc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	7f1b      	ldrb	r3, [r3, #28]
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bf14      	ite	ne
 800ae50:	2301      	movne	r3, #1
 800ae52:	2300      	moveq	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	7f1b      	ldrb	r3, [r3, #28]
 800ae5c:	f023 0304 	bic.w	r3, r3, #4
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d13b      	bne.n	800aee4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <err_tcp+0x126>
 800ae74:	4b1e      	ldr	r3, [pc, #120]	; (800aef0 <err_tcp+0x194>)
 800ae76:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ae7a:	4920      	ldr	r1, [pc, #128]	; (800aefc <err_tcp+0x1a0>)
 800ae7c:	481e      	ldr	r0, [pc, #120]	; (800aef8 <err_tcp+0x19c>)
 800ae7e:	f00c fb37 	bl	80174f0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ae82:	7dfb      	ldrb	r3, [r7, #23]
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d104      	bne.n	800ae92 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	711a      	strb	r2, [r3, #4]
 800ae90:	e003      	b.n	800ae9a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	78fa      	ldrb	r2, [r7, #3]
 800ae98:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	330c      	adds	r3, #12
 800aea2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800aea4:	68b8      	ldr	r0, [r7, #8]
 800aea6:	f00c f893 	bl	8016fd0 <sys_sem_valid>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <err_tcp+0x162>
 800aeb0:	4b0f      	ldr	r3, [pc, #60]	; (800aef0 <err_tcp+0x194>)
 800aeb2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800aeb6:	4912      	ldr	r1, [pc, #72]	; (800af00 <err_tcp+0x1a4>)
 800aeb8:	480f      	ldr	r0, [pc, #60]	; (800aef8 <err_tcp+0x19c>)
 800aeba:	f00c fb19 	bl	80174f0 <iprintf>
      conn->current_msg = NULL;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	2200      	movs	r2, #0
 800aec2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800aec4:	68b8      	ldr	r0, [r7, #8]
 800aec6:	f00c f869 	bl	8016f9c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800aeca:	e00b      	b.n	800aee4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d008      	beq.n	800aee6 <err_tcp+0x18a>
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <err_tcp+0x194>)
 800aed6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800aeda:	490a      	ldr	r1, [pc, #40]	; (800af04 <err_tcp+0x1a8>)
 800aedc:	4806      	ldr	r0, [pc, #24]	; (800aef8 <err_tcp+0x19c>)
 800aede:	f00c fb07 	bl	80174f0 <iprintf>
  }
}
 800aee2:	e000      	b.n	800aee6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800aee4:	bf00      	nop
}
 800aee6:	bf00      	nop
 800aee8:	3720      	adds	r7, #32
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	0801a94c 	.word	0x0801a94c
 800aef4:	0801aa40 	.word	0x0801aa40
 800aef8:	0801a990 	.word	0x0801a990
 800aefc:	0801aa50 	.word	0x0801aa50
 800af00:	0801aa6c 	.word	0x0801aa6c
 800af04:	0801aa88 	.word	0x0801aa88

0800af08 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f004 fe43 	bl	800fba4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800af1e:	490a      	ldr	r1, [pc, #40]	; (800af48 <setup_tcp+0x40>)
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f004 fe51 	bl	800fbc8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800af26:	4909      	ldr	r1, [pc, #36]	; (800af4c <setup_tcp+0x44>)
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f004 fe6f 	bl	800fc0c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800af2e:	2202      	movs	r2, #2
 800af30:	4907      	ldr	r1, [pc, #28]	; (800af50 <setup_tcp+0x48>)
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f004 fec6 	bl	800fcc4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800af38:	4906      	ldr	r1, [pc, #24]	; (800af54 <setup_tcp+0x4c>)
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f004 fe88 	bl	800fc50 <tcp_err>
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	0800aae1 	.word	0x0800aae1
 800af4c:	0800acb5 	.word	0x0800acb5
 800af50:	0800abed 	.word	0x0800abed
 800af54:	0800ad5d 	.word	0x0800ad5d

0800af58 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800af58:	b590      	push	{r4, r7, lr}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d006      	beq.n	800af7c <pcb_new+0x24>
 800af6e:	4b18      	ldr	r3, [pc, #96]	; (800afd0 <pcb_new+0x78>)
 800af70:	f240 2265 	movw	r2, #613	; 0x265
 800af74:	4917      	ldr	r1, [pc, #92]	; (800afd4 <pcb_new+0x7c>)
 800af76:	4818      	ldr	r0, [pc, #96]	; (800afd8 <pcb_new+0x80>)
 800af78:	f00c faba 	bl	80174f0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af86:	2b10      	cmp	r3, #16
 800af88:	d112      	bne.n	800afb0 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681c      	ldr	r4, [r3, #0]
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	4618      	mov	r0, r3
 800af92:	f004 fdf9 	bl	800fb88 <tcp_new_ip_type>
 800af96:	4603      	mov	r3, r0
 800af98:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d009      	beq.n	800afb8 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff ffad 	bl	800af08 <setup_tcp>
      }
      break;
 800afae:	e003      	b.n	800afb8 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	22fa      	movs	r2, #250	; 0xfa
 800afb4:	711a      	strb	r2, [r3, #4]
      return;
 800afb6:	e008      	b.n	800afca <pcb_new+0x72>
      break;
 800afb8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <pcb_new+0x72>
    msg->err = ERR_MEM;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	22ff      	movs	r2, #255	; 0xff
 800afc8:	711a      	strb	r2, [r3, #4]
  }
}
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd90      	pop	{r4, r7, pc}
 800afd0:	0801a94c 	.word	0x0801a94c
 800afd4:	0801aacc 	.word	0x0801aacc
 800afd8:	0801a990 	.word	0x0801a990

0800afdc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7ff ffad 	bl	800af58 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800affe:	bf00      	nop
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	6039      	str	r1, [r7, #0]
 800b012:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b018:	2006      	movs	r0, #6
 800b01a:	f001 ffe1 	bl	800cfe0 <memp_malloc>
 800b01e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <netconn_alloc+0x22>
    return NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	e04d      	b.n	800b0c6 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2200      	movs	r2, #0
 800b02e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	79fa      	ldrb	r2, [r7, #7]
 800b034:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2200      	movs	r2, #0
 800b03a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b042:	2b10      	cmp	r3, #16
 800b044:	d10c      	bne.n	800b060 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b046:	2306      	movs	r3, #6
 800b048:	60fb      	str	r3, [r7, #12]
      break;
 800b04a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	3310      	adds	r3, #16
 800b050:	68f9      	ldr	r1, [r7, #12]
 800b052:	4618      	mov	r0, r3
 800b054:	f00b fea0 	bl	8016d98 <sys_mbox_new>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d008      	beq.n	800b070 <netconn_alloc+0x68>
    goto free_and_return;
 800b05e:	e02d      	b.n	800b0bc <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b060:	4b1b      	ldr	r3, [pc, #108]	; (800b0d0 <netconn_alloc+0xc8>)
 800b062:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b066:	491b      	ldr	r1, [pc, #108]	; (800b0d4 <netconn_alloc+0xcc>)
 800b068:	481b      	ldr	r0, [pc, #108]	; (800b0d8 <netconn_alloc+0xd0>)
 800b06a:	f00c fa41 	bl	80174f0 <iprintf>
      goto free_and_return;
 800b06e:	e025      	b.n	800b0bc <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	330c      	adds	r3, #12
 800b074:	2100      	movs	r1, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f00b ff3a 	bl	8016ef0 <sys_sem_new>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3310      	adds	r3, #16
 800b086:	4618      	mov	r0, r3
 800b088:	f00b fea0 	bl	8016dcc <sys_mbox_free>
    goto free_and_return;
 800b08c:	e016      	b.n	800b0bc <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3314      	adds	r3, #20
 800b092:	4618      	mov	r0, r3
 800b094:	f00b ff1f 	bl	8016ed6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2200      	movs	r2, #0
 800b09c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	7dfa      	ldrb	r2, [r7, #23]
 800b0b6:	771a      	strb	r2, [r3, #28]
  return conn;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	e004      	b.n	800b0c6 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b0bc:	6939      	ldr	r1, [r7, #16]
 800b0be:	2006      	movs	r0, #6
 800b0c0:	f002 f804 	bl	800d0cc <memp_free>
  return NULL;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	0801a94c 	.word	0x0801a94c
 800b0d4:	0801aaec 	.word	0x0801aaec
 800b0d8:	0801a990 	.word	0x0801a990

0800b0dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <netconn_free+0x1e>
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <netconn_free+0x80>)
 800b0ee:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b0f2:	491b      	ldr	r1, [pc, #108]	; (800b160 <netconn_free+0x84>)
 800b0f4:	481b      	ldr	r0, [pc, #108]	; (800b164 <netconn_free+0x88>)
 800b0f6:	f00c f9fb 	bl	80174f0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	4618      	mov	r0, r3
 800b100:	f00b fed8 	bl	8016eb4 <sys_mbox_valid>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d006      	beq.n	800b118 <netconn_free+0x3c>
 800b10a:	4b14      	ldr	r3, [pc, #80]	; (800b15c <netconn_free+0x80>)
 800b10c:	f240 3223 	movw	r2, #803	; 0x323
 800b110:	4915      	ldr	r1, [pc, #84]	; (800b168 <netconn_free+0x8c>)
 800b112:	4814      	ldr	r0, [pc, #80]	; (800b164 <netconn_free+0x88>)
 800b114:	f00c f9ec 	bl	80174f0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3314      	adds	r3, #20
 800b11c:	4618      	mov	r0, r3
 800b11e:	f00b fec9 	bl	8016eb4 <sys_mbox_valid>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <netconn_free+0x5a>
 800b128:	4b0c      	ldr	r3, [pc, #48]	; (800b15c <netconn_free+0x80>)
 800b12a:	f240 3226 	movw	r2, #806	; 0x326
 800b12e:	490f      	ldr	r1, [pc, #60]	; (800b16c <netconn_free+0x90>)
 800b130:	480c      	ldr	r0, [pc, #48]	; (800b164 <netconn_free+0x88>)
 800b132:	f00c f9dd 	bl	80174f0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	330c      	adds	r3, #12
 800b13a:	4618      	mov	r0, r3
 800b13c:	f00b ff3b 	bl	8016fb6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	330c      	adds	r3, #12
 800b144:	4618      	mov	r0, r3
 800b146:	f00b ff54 	bl	8016ff2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	2006      	movs	r0, #6
 800b14e:	f001 ffbd 	bl	800d0cc <memp_free>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	0801a94c 	.word	0x0801a94c
 800b160:	0801ab14 	.word	0x0801ab14
 800b164:	0801a990 	.word	0x0801a990
 800b168:	0801ab44 	.word	0x0801ab44
 800b16c:	0801ab80 	.word	0x0801ab80

0800b170 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3310      	adds	r3, #16
 800b17c:	4618      	mov	r0, r3
 800b17e:	f00b fe99 	bl	8016eb4 <sys_mbox_valid>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d02f      	beq.n	800b1e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b188:	e018      	b.n	800b1bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b192:	2b10      	cmp	r3, #16
 800b194:	d10e      	bne.n	800b1b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	f107 020f 	add.w	r2, r7, #15
 800b19c:	4611      	mov	r1, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fc64 	bl	800aa6c <lwip_netconn_is_err_msg>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d108      	bne.n	800b1bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f002 fe2d 	bl	800de0c <pbuf_free>
 800b1b2:	e003      	b.n	800b1bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 ff1a 	bl	800bff0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3310      	adds	r3, #16
 800b1c0:	f107 0210 	add.w	r2, r7, #16
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f00b fe5d 	bl	8016e86 <sys_arch_mbox_tryfetch>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d2:	d1da      	bne.n	800b18a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f00b fdf7 	bl	8016dcc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f00b fe77 	bl	8016ed6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f00b fe61 	bl	8016eb4 <sys_mbox_valid>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d034      	beq.n	800b262 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b1f8:	e01d      	b.n	800b236 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f107 020e 	add.w	r2, r7, #14
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fc32 	bl	800aa6c <lwip_netconn_is_err_msg>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d113      	bne.n	800b236 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f7ff ffac 	bl	800b170 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	4618      	mov	r0, r3
 800b226:	f003 fbe1 	bl	800e9ec <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b230:	6978      	ldr	r0, [r7, #20]
 800b232:	f7ff ff53 	bl	800b0dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3314      	adds	r3, #20
 800b23a:	f107 0210 	add.w	r2, r7, #16
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f00b fe20 	bl	8016e86 <sys_arch_mbox_tryfetch>
 800b246:	4603      	mov	r3, r0
 800b248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b24c:	d1d5      	bne.n	800b1fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3314      	adds	r3, #20
 800b252:	4618      	mov	r0, r3
 800b254:	f00b fdba 	bl	8016dcc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3314      	adds	r3, #20
 800b25c:	4618      	mov	r0, r3
 800b25e:	f00b fe3a 	bl	8016ed6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b262:	bf00      	nop
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <lwip_netconn_do_close_internal+0x24>
 800b282:	4b87      	ldr	r3, [pc, #540]	; (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b284:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b288:	4986      	ldr	r1, [pc, #536]	; (800b4a4 <lwip_netconn_do_close_internal+0x238>)
 800b28a:	4887      	ldr	r0, [pc, #540]	; (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b28c:	f00c f930 	bl	80174f0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b298:	2b10      	cmp	r3, #16
 800b29a:	d006      	beq.n	800b2aa <lwip_netconn_do_close_internal+0x3e>
 800b29c:	4b80      	ldr	r3, [pc, #512]	; (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b29e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b2a2:	4982      	ldr	r1, [pc, #520]	; (800b4ac <lwip_netconn_do_close_internal+0x240>)
 800b2a4:	4880      	ldr	r0, [pc, #512]	; (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2a6:	f00c f923 	bl	80174f0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	785b      	ldrb	r3, [r3, #1]
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d006      	beq.n	800b2c0 <lwip_netconn_do_close_internal+0x54>
 800b2b2:	4b7b      	ldr	r3, [pc, #492]	; (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b2b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b2b8:	497d      	ldr	r1, [pc, #500]	; (800b4b0 <lwip_netconn_do_close_internal+0x244>)
 800b2ba:	487b      	ldr	r0, [pc, #492]	; (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2bc:	f00c f918 	bl	80174f0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d106      	bne.n	800b2d6 <lwip_netconn_do_close_internal+0x6a>
 800b2c8:	4b75      	ldr	r3, [pc, #468]	; (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b2ca:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b2ce:	4979      	ldr	r1, [pc, #484]	; (800b4b4 <lwip_netconn_do_close_internal+0x248>)
 800b2d0:	4875      	ldr	r0, [pc, #468]	; (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2d2:	f00c f90d 	bl	80174f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <lwip_netconn_do_close_internal+0x80>
 800b2de:	4b70      	ldr	r3, [pc, #448]	; (800b4a0 <lwip_netconn_do_close_internal+0x234>)
 800b2e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b2e4:	4974      	ldr	r1, [pc, #464]	; (800b4b8 <lwip_netconn_do_close_internal+0x24c>)
 800b2e6:	4870      	ldr	r0, [pc, #448]	; (800b4a8 <lwip_netconn_do_close_internal+0x23c>)
 800b2e8:	f00c f902 	bl	80174f0 <iprintf>

  tpcb = conn->pcb.tcp;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	7a1b      	ldrb	r3, [r3, #8]
 800b2f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d102      	bne.n	800b316 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b310:	2301      	movs	r3, #1
 800b312:	75bb      	strb	r3, [r7, #22]
 800b314:	e01f      	b.n	800b356 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00e      	beq.n	800b33a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b320:	2b05      	cmp	r3, #5
 800b322:	d007      	beq.n	800b334 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b328:	2b06      	cmp	r3, #6
 800b32a:	d003      	beq.n	800b334 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b330:	2b08      	cmp	r3, #8
 800b332:	d102      	bne.n	800b33a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b334:	2301      	movs	r3, #1
 800b336:	75bb      	strb	r3, [r7, #22]
 800b338:	e00d      	b.n	800b356 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b33a:	7b7b      	ldrb	r3, [r7, #13]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <lwip_netconn_do_close_internal+0xe6>
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	8b5b      	ldrh	r3, [r3, #26]
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75bb      	strb	r3, [r7, #22]
 800b350:	e001      	b.n	800b356 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b356:	7dbb      	ldrb	r3, [r7, #22]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b35c:	2100      	movs	r1, #0
 800b35e:	6938      	ldr	r0, [r7, #16]
 800b360:	f004 fc20 	bl	800fba4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	7d1b      	ldrb	r3, [r3, #20]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d104      	bne.n	800b376 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b36c:	2100      	movs	r1, #0
 800b36e:	6938      	ldr	r0, [r7, #16]
 800b370:	f004 fc90 	bl	800fc94 <tcp_accept>
 800b374:	e01d      	b.n	800b3b2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d007      	beq.n	800b38c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b37c:	2100      	movs	r1, #0
 800b37e:	6938      	ldr	r0, [r7, #16]
 800b380:	f004 fc22 	bl	800fbc8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b384:	2100      	movs	r1, #0
 800b386:	6938      	ldr	r0, [r7, #16]
 800b388:	f004 fc84 	bl	800fc94 <tcp_accept>
    }
    if (shut_tx) {
 800b38c:	7b7b      	ldrb	r3, [r7, #13]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b392:	2100      	movs	r1, #0
 800b394:	6938      	ldr	r0, [r7, #16]
 800b396:	f004 fc39 	bl	800fc0c <tcp_sent>
    }
    if (shut_close) {
 800b39a:	7dbb      	ldrb	r3, [r7, #22]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d008      	beq.n	800b3b2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	6938      	ldr	r0, [r7, #16]
 800b3a6:	f004 fc8d 	bl	800fcc4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	6938      	ldr	r0, [r7, #16]
 800b3ae:	f004 fc4f 	bl	800fc50 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b3b2:	7dbb      	ldrb	r3, [r7, #22]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b3b8:	6938      	ldr	r0, [r7, #16]
 800b3ba:	f003 f9d1 	bl	800e760 <tcp_close>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	75fb      	strb	r3, [r7, #23]
 800b3c2:	e007      	b.n	800b3d4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	7b7a      	ldrb	r2, [r7, #13]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6938      	ldr	r0, [r7, #16]
 800b3cc:	f003 f9f4 	bl	800e7b8 <tcp_shutdown>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	757b      	strb	r3, [r7, #21]
 800b3e0:	e016      	b.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ea:	d10f      	bne.n	800b40c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	7a5b      	ldrb	r3, [r3, #9]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10c      	bne.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b3fa:	7dbb      	ldrb	r3, [r7, #22]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b400:	6938      	ldr	r0, [r7, #16]
 800b402:	f003 faf3 	bl	800e9ec <tcp_abort>
          err = ERR_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
 800b40a:	e001      	b.n	800b410 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b40c:	2301      	movs	r3, #1
 800b40e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b410:	7d7b      	ldrb	r3, [r7, #21]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d052      	beq.n	800b4bc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	330c      	adds	r3, #12
 800b41e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	7dfa      	ldrb	r2, [r7, #23]
 800b426:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d129      	bne.n	800b490 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b43c:	7dbb      	ldrb	r3, [r7, #22]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00c      	beq.n	800b45c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <lwip_netconn_do_close_internal+0x1f0>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	2200      	movs	r2, #0
 800b456:	2104      	movs	r1, #4
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	4798      	blx	r3
      }
      if (shut_rx) {
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <lwip_netconn_do_close_internal+0x20a>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2200      	movs	r2, #0
 800b470:	2100      	movs	r1, #0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
      }
      if (shut_tx) {
 800b476:	7b7b      	ldrb	r3, [r7, #13]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d009      	beq.n	800b490 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <lwip_netconn_do_close_internal+0x224>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	2200      	movs	r2, #0
 800b48a:	2102      	movs	r1, #2
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b496:	68b8      	ldr	r0, [r7, #8]
 800b498:	f00b fd80 	bl	8016f9c <sys_sem_signal>
    }
    return ERR_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e03c      	b.n	800b51a <lwip_netconn_do_close_internal+0x2ae>
 800b4a0:	0801a94c 	.word	0x0801a94c
 800b4a4:	0801abbc 	.word	0x0801abbc
 800b4a8:	0801a990 	.word	0x0801a990
 800b4ac:	0801abcc 	.word	0x0801abcc
 800b4b0:	0801abec 	.word	0x0801abec
 800b4b4:	0801ac10 	.word	0x0801ac10
 800b4b8:	0801aa50 	.word	0x0801aa50
  }
  if (!close_finished) {
 800b4bc:	7d7b      	ldrb	r3, [r7, #21]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d11e      	bne.n	800b500 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	7d1b      	ldrb	r3, [r3, #20]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d106      	bne.n	800b4d8 <lwip_netconn_do_close_internal+0x26c>
 800b4ca:	4b16      	ldr	r3, [pc, #88]	; (800b524 <lwip_netconn_do_close_internal+0x2b8>)
 800b4cc:	f240 4241 	movw	r2, #1089	; 0x441
 800b4d0:	4915      	ldr	r1, [pc, #84]	; (800b528 <lwip_netconn_do_close_internal+0x2bc>)
 800b4d2:	4816      	ldr	r0, [pc, #88]	; (800b52c <lwip_netconn_do_close_internal+0x2c0>)
 800b4d4:	f00c f80c 	bl	80174f0 <iprintf>
    if (shut_tx) {
 800b4d8:	7b7b      	ldrb	r3, [r7, #13]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b4de:	4914      	ldr	r1, [pc, #80]	; (800b530 <lwip_netconn_do_close_internal+0x2c4>)
 800b4e0:	6938      	ldr	r0, [r7, #16]
 800b4e2:	f004 fb93 	bl	800fc0c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4912      	ldr	r1, [pc, #72]	; (800b534 <lwip_netconn_do_close_internal+0x2c8>)
 800b4ea:	6938      	ldr	r0, [r7, #16]
 800b4ec:	f004 fbea 	bl	800fcc4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b4f0:	4911      	ldr	r1, [pc, #68]	; (800b538 <lwip_netconn_do_close_internal+0x2cc>)
 800b4f2:	6938      	ldr	r0, [r7, #16]
 800b4f4:	f004 fbac 	bl	800fc50 <tcp_err>
    tcp_arg(tpcb, conn);
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	6938      	ldr	r0, [r7, #16]
 800b4fc:	f004 fb52 	bl	800fba4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d106      	bne.n	800b516 <lwip_netconn_do_close_internal+0x2aa>
 800b508:	4b06      	ldr	r3, [pc, #24]	; (800b524 <lwip_netconn_do_close_internal+0x2b8>)
 800b50a:	f240 424d 	movw	r2, #1101	; 0x44d
 800b50e:	490b      	ldr	r1, [pc, #44]	; (800b53c <lwip_netconn_do_close_internal+0x2d0>)
 800b510:	4806      	ldr	r0, [pc, #24]	; (800b52c <lwip_netconn_do_close_internal+0x2c0>)
 800b512:	f00b ffed 	bl	80174f0 <iprintf>
  return err;
 800b516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	0801a94c 	.word	0x0801a94c
 800b528:	0801ac24 	.word	0x0801ac24
 800b52c:	0801a990 	.word	0x0801a990
 800b530:	0800acb5 	.word	0x0800acb5
 800b534:	0800abed 	.word	0x0800abed
 800b538:	0800ad5d 	.word	0x0800ad5d
 800b53c:	0801ac48 	.word	0x0801ac48

0800b540 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b554:	7afb      	ldrb	r3, [r7, #11]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00d      	beq.n	800b576 <lwip_netconn_do_delconn+0x36>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b564:	2b10      	cmp	r3, #16
 800b566:	d006      	beq.n	800b576 <lwip_netconn_do_delconn+0x36>
 800b568:	4b59      	ldr	r3, [pc, #356]	; (800b6d0 <lwip_netconn_do_delconn+0x190>)
 800b56a:	f240 425e 	movw	r2, #1118	; 0x45e
 800b56e:	4959      	ldr	r1, [pc, #356]	; (800b6d4 <lwip_netconn_do_delconn+0x194>)
 800b570:	4859      	ldr	r0, [pc, #356]	; (800b6d8 <lwip_netconn_do_delconn+0x198>)
 800b572:	f00b ffbd 	bl	80174f0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <lwip_netconn_do_delconn+0x48>
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d002      	beq.n	800b588 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	2b03      	cmp	r3, #3
 800b586:	d109      	bne.n	800b59c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d10a      	bne.n	800b5a4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	7f1b      	ldrb	r3, [r3, #28]
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d103      	bne.n	800b5a4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	22fb      	movs	r2, #251	; 0xfb
 800b5a0:	711a      	strb	r2, [r3, #4]
 800b5a2:	e089      	b.n	800b6b8 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d10d      	bne.n	800b5c6 <lwip_netconn_do_delconn+0x86>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	7f1b      	ldrb	r3, [r3, #28]
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <lwip_netconn_do_delconn+0x86>
 800b5b8:	4b45      	ldr	r3, [pc, #276]	; (800b6d0 <lwip_netconn_do_delconn+0x190>)
 800b5ba:	f240 427a 	movw	r2, #1146	; 0x47a
 800b5be:	4947      	ldr	r1, [pc, #284]	; (800b6dc <lwip_netconn_do_delconn+0x19c>)
 800b5c0:	4845      	ldr	r0, [pc, #276]	; (800b6d8 <lwip_netconn_do_delconn+0x198>)
 800b5c2:	f00b ff95 	bl	80174f0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff fdcd 	bl	800b170 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d051      	beq.n	800b684 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ea:	2b10      	cmp	r3, #16
 800b5ec:	d145      	bne.n	800b67a <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d006      	beq.n	800b606 <lwip_netconn_do_delconn+0xc6>
 800b5f8:	4b35      	ldr	r3, [pc, #212]	; (800b6d0 <lwip_netconn_do_delconn+0x190>)
 800b5fa:	f240 4294 	movw	r2, #1172	; 0x494
 800b5fe:	4938      	ldr	r1, [pc, #224]	; (800b6e0 <lwip_netconn_do_delconn+0x1a0>)
 800b600:	4835      	ldr	r0, [pc, #212]	; (800b6d8 <lwip_netconn_do_delconn+0x198>)
 800b602:	f00b ff75 	bl	80174f0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2204      	movs	r2, #4
 800b60c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2203      	movs	r2, #3
 800b612:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2100      	movs	r1, #0
 800b622:	4618      	mov	r0, r3
 800b624:	f7ff fe22 	bl	800b26c <lwip_netconn_do_close_internal>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d04b      	beq.n	800b6c6 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	785b      	ldrb	r3, [r3, #1]
 800b634:	2b04      	cmp	r3, #4
 800b636:	d006      	beq.n	800b646 <lwip_netconn_do_delconn+0x106>
 800b638:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <lwip_netconn_do_delconn+0x190>)
 800b63a:	f240 429a 	movw	r2, #1178	; 0x49a
 800b63e:	4929      	ldr	r1, [pc, #164]	; (800b6e4 <lwip_netconn_do_delconn+0x1a4>)
 800b640:	4825      	ldr	r0, [pc, #148]	; (800b6d8 <lwip_netconn_do_delconn+0x198>)
 800b642:	f00b ff55 	bl	80174f0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b646:	4828      	ldr	r0, [pc, #160]	; (800b6e8 <lwip_netconn_do_delconn+0x1a8>)
 800b648:	f00b fd11 	bl	801706e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	330c      	adds	r3, #12
 800b652:	2100      	movs	r1, #0
 800b654:	4618      	mov	r0, r3
 800b656:	f00b fc70 	bl	8016f3a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b65a:	4823      	ldr	r0, [pc, #140]	; (800b6e8 <lwip_netconn_do_delconn+0x1a8>)
 800b65c:	f00b fcf8 	bl	8017050 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	785b      	ldrb	r3, [r3, #1]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d02d      	beq.n	800b6c6 <lwip_netconn_do_delconn+0x186>
 800b66a:	4b19      	ldr	r3, [pc, #100]	; (800b6d0 <lwip_netconn_do_delconn+0x190>)
 800b66c:	f240 429e 	movw	r2, #1182	; 0x49e
 800b670:	491c      	ldr	r1, [pc, #112]	; (800b6e4 <lwip_netconn_do_delconn+0x1a4>)
 800b672:	4819      	ldr	r0, [pc, #100]	; (800b6d8 <lwip_netconn_do_delconn+0x198>)
 800b674:	f00b ff3c 	bl	80174f0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b678:	e025      	b.n	800b6c6 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800b67a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2200      	movs	r2, #0
 800b682:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d007      	beq.n	800b69e <lwip_netconn_do_delconn+0x15e>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	6810      	ldr	r0, [r2, #0]
 800b698:	2200      	movs	r2, #0
 800b69a:	2100      	movs	r1, #0
 800b69c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <lwip_netconn_do_delconn+0x178>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	6810      	ldr	r0, [r2, #0]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2102      	movs	r1, #2
 800b6b6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	330c      	adds	r3, #12
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f00b fc86 	bl	8016fd0 <sys_sem_valid>
 800b6c4:	e000      	b.n	800b6c8 <lwip_netconn_do_delconn+0x188>
          return;
 800b6c6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0801a94c 	.word	0x0801a94c
 800b6d4:	0801ac58 	.word	0x0801ac58
 800b6d8:	0801a990 	.word	0x0801a990
 800b6dc:	0801ac6c 	.word	0x0801ac6c
 800b6e0:	0801ac8c 	.word	0x0801ac8c
 800b6e4:	0801aca8 	.word	0x0801aca8
 800b6e8:	20009b08 	.word	0x20009b08

0800b6ec <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d016      	beq.n	800b730 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b70c:	2b10      	cmp	r3, #16
 800b70e:	d10c      	bne.n	800b72a <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6858      	ldr	r0, [r3, #4]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	6899      	ldr	r1, [r3, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	899b      	ldrh	r3, [r3, #12]
 800b71e:	461a      	mov	r2, r3
 800b720:	f003 f970 	bl	800ea04 <tcp_bind>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]
        break;
 800b728:	e004      	b.n	800b734 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b72a:	23fa      	movs	r3, #250	; 0xfa
 800b72c:	73fb      	strb	r3, [r7, #15]
        break;
 800b72e:	e001      	b.n	800b734 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800b730:	23fa      	movs	r3, #250	; 0xfa
 800b732:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	7bfa      	ldrb	r2, [r7, #15]
 800b738:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	4613      	mov	r3, r2
 800b750:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800b760:	f06f 0305 	mvn.w	r3, #5
 800b764:	e070      	b.n	800b848 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	785b      	ldrb	r3, [r3, #1]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d006      	beq.n	800b77c <lwip_netconn_do_connected+0x38>
 800b76e:	4b38      	ldr	r3, [pc, #224]	; (800b850 <lwip_netconn_do_connected+0x10c>)
 800b770:	f240 5223 	movw	r2, #1315	; 0x523
 800b774:	4937      	ldr	r1, [pc, #220]	; (800b854 <lwip_netconn_do_connected+0x110>)
 800b776:	4838      	ldr	r0, [pc, #224]	; (800b858 <lwip_netconn_do_connected+0x114>)
 800b778:	f00b feba 	bl	80174f0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10c      	bne.n	800b79e <lwip_netconn_do_connected+0x5a>
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	7f1b      	ldrb	r3, [r3, #28]
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <lwip_netconn_do_connected+0x5a>
 800b790:	4b2f      	ldr	r3, [pc, #188]	; (800b850 <lwip_netconn_do_connected+0x10c>)
 800b792:	f240 5224 	movw	r2, #1316	; 0x524
 800b796:	4931      	ldr	r1, [pc, #196]	; (800b85c <lwip_netconn_do_connected+0x118>)
 800b798:	482f      	ldr	r0, [pc, #188]	; (800b858 <lwip_netconn_do_connected+0x114>)
 800b79a:	f00b fea9 	bl	80174f0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d008      	beq.n	800b7b8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	79fa      	ldrb	r2, [r7, #7]
 800b7ac:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7c0:	2b10      	cmp	r3, #16
 800b7c2:	d106      	bne.n	800b7d2 <lwip_netconn_do_connected+0x8e>
 800b7c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800b7cc:	69b8      	ldr	r0, [r7, #24]
 800b7ce:	f7ff fb9b 	bl	800af08 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	7f1b      	ldrb	r3, [r3, #28]
 800b7d6:	f003 0304 	and.w	r3, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bf0c      	ite	eq
 800b7de:	2301      	moveq	r3, #1
 800b7e0:	2300      	movne	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	7f1b      	ldrb	r3, [r3, #28]
 800b7ea:	f023 0304 	bic.w	r3, r3, #4
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <lwip_netconn_do_connected+0xbc>
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10c      	bne.n	800b81a <lwip_netconn_do_connected+0xd6>
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <lwip_netconn_do_connected+0xc8>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d006      	beq.n	800b81a <lwip_netconn_do_connected+0xd6>
 800b80c:	4b10      	ldr	r3, [pc, #64]	; (800b850 <lwip_netconn_do_connected+0x10c>)
 800b80e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800b812:	4913      	ldr	r1, [pc, #76]	; (800b860 <lwip_netconn_do_connected+0x11c>)
 800b814:	4810      	ldr	r0, [pc, #64]	; (800b858 <lwip_netconn_do_connected+0x114>)
 800b816:	f00b fe6b 	bl	80174f0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	2200      	movs	r2, #0
 800b81e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	2200      	movs	r2, #0
 800b824:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <lwip_netconn_do_connected+0xf6>
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2200      	movs	r2, #0
 800b834:	2102      	movs	r1, #2
 800b836:	69b8      	ldr	r0, [r7, #24]
 800b838:	4798      	blx	r3

  if (was_blocking) {
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800b840:	69f8      	ldr	r0, [r7, #28]
 800b842:	f00b fbab 	bl	8016f9c <sys_sem_signal>
  }
  return ERR_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	0801a94c 	.word	0x0801a94c
 800b854:	0801acb0 	.word	0x0801acb0
 800b858:	0801a990 	.word	0x0801a990
 800b85c:	0801acd0 	.word	0x0801acd0
 800b860:	0801ad10 	.word	0x0801ad10

0800b864 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800b87a:	23f1      	movs	r3, #241	; 0xf1
 800b87c:	75fb      	strb	r3, [r7, #23]
 800b87e:	e08b      	b.n	800b998 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b88a:	2b10      	cmp	r3, #16
 800b88c:	d179      	bne.n	800b982 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	785b      	ldrb	r3, [r3, #1]
 800b894:	2b03      	cmp	r3, #3
 800b896:	d102      	bne.n	800b89e <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800b898:	23f7      	movs	r3, #247	; 0xf7
 800b89a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800b89c:	e07b      	b.n	800b996 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800b8a8:	23f6      	movs	r3, #246	; 0xf6
 800b8aa:	75fb      	strb	r3, [r7, #23]
        break;
 800b8ac:	e073      	b.n	800b996 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff fb28 	bl	800af08 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6858      	ldr	r0, [r3, #4]
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6899      	ldr	r1, [r3, #8]
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	899a      	ldrh	r2, [r3, #12]
 800b8c6:	4b38      	ldr	r3, [pc, #224]	; (800b9a8 <lwip_netconn_do_connect+0x144>)
 800b8c8:	f003 fa24 	bl	800ed14 <tcp_connect>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800b8d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d15e      	bne.n	800b996 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	7f1b      	ldrb	r3, [r3, #28]
 800b8de:	f003 0302 	and.w	r3, r3, #2
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf14      	ite	ne
 800b8e6:	2301      	movne	r3, #1
 800b8e8:	2300      	moveq	r3, #0
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d009      	beq.n	800b910 <lwip_netconn_do_connect+0xac>
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	7f1a      	ldrb	r2, [r3, #28]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f042 0204 	orr.w	r2, r2, #4
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	771a      	strb	r2, [r3, #28]
 800b90e:	e008      	b.n	800b922 <lwip_netconn_do_connect+0xbe>
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	7f1a      	ldrb	r2, [r3, #28]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 0204 	bic.w	r2, r2, #4
 800b91e:	b2d2      	uxtb	r2, r2
 800b920:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800b928:	23fb      	movs	r3, #251	; 0xfb
 800b92a:	75fb      	strb	r3, [r7, #23]
        break;
 800b92c:	e033      	b.n	800b996 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d006      	beq.n	800b94e <lwip_netconn_do_connect+0xea>
 800b940:	4b1a      	ldr	r3, [pc, #104]	; (800b9ac <lwip_netconn_do_connect+0x148>)
 800b942:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b946:	491a      	ldr	r1, [pc, #104]	; (800b9b0 <lwip_netconn_do_connect+0x14c>)
 800b948:	481a      	ldr	r0, [pc, #104]	; (800b9b4 <lwip_netconn_do_connect+0x150>)
 800b94a:	f00b fdd1 	bl	80174f0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800b94e:	481a      	ldr	r0, [pc, #104]	; (800b9b8 <lwip_netconn_do_connect+0x154>)
 800b950:	f00b fb8d 	bl	801706e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	2100      	movs	r1, #0
 800b95c:	4618      	mov	r0, r3
 800b95e:	f00b faec 	bl	8016f3a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b962:	4815      	ldr	r0, [pc, #84]	; (800b9b8 <lwip_netconn_do_connect+0x154>)
 800b964:	f00b fb74 	bl	8017050 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d116      	bne.n	800b9a0 <lwip_netconn_do_connect+0x13c>
 800b972:	4b0e      	ldr	r3, [pc, #56]	; (800b9ac <lwip_netconn_do_connect+0x148>)
 800b974:	f240 5274 	movw	r2, #1396	; 0x574
 800b978:	490d      	ldr	r1, [pc, #52]	; (800b9b0 <lwip_netconn_do_connect+0x14c>)
 800b97a:	480e      	ldr	r0, [pc, #56]	; (800b9b4 <lwip_netconn_do_connect+0x150>)
 800b97c:	f00b fdb8 	bl	80174f0 <iprintf>
              return;
 800b980:	e00e      	b.n	800b9a0 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b982:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <lwip_netconn_do_connect+0x148>)
 800b984:	f240 527d 	movw	r2, #1405	; 0x57d
 800b988:	490c      	ldr	r1, [pc, #48]	; (800b9bc <lwip_netconn_do_connect+0x158>)
 800b98a:	480a      	ldr	r0, [pc, #40]	; (800b9b4 <lwip_netconn_do_connect+0x150>)
 800b98c:	f00b fdb0 	bl	80174f0 <iprintf>
 800b990:	23fa      	movs	r3, #250	; 0xfa
 800b992:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b994:	e000      	b.n	800b998 <lwip_netconn_do_connect+0x134>
        break;
 800b996:	bf00      	nop
    }
  }
  msg->err = err;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	7dfa      	ldrb	r2, [r7, #23]
 800b99c:	711a      	strb	r2, [r3, #4]
 800b99e:	e000      	b.n	800b9a2 <lwip_netconn_do_connect+0x13e>
              return;
 800b9a0:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0800b745 	.word	0x0800b745
 800b9ac:	0801a94c 	.word	0x0801a94c
 800b9b0:	0801aca8 	.word	0x0801aca8
 800b9b4:	0801a990 	.word	0x0801a990
 800b9b8:	20009b08 	.word	0x20009b08
 800b9bc:	0801ad30 	.word	0x0801ad30

0800b9c0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d022      	beq.n	800ba22 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9e6:	2b10      	cmp	r3, #16
 800b9e8:	d11b      	bne.n	800ba22 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f6:	d202      	bcs.n	800b9fe <lwip_netconn_do_recv+0x3e>
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	e001      	b.n	800ba02 <lwip_netconn_do_recv+0x42>
 800b9fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba02:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	89fa      	ldrh	r2, [r7, #14]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f003 f8ea 	bl	800ebe8 <tcp_recved>
        remaining -= recved;
 800ba14:	89fb      	ldrh	r3, [r7, #14]
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e6      	bne.n	800b9f0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ba22:	bf00      	nop
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <lwip_netconn_do_writemore+0x24>
 800ba42:	4b96      	ldr	r3, [pc, #600]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800ba44:	f240 6273 	movw	r2, #1651	; 0x673
 800ba48:	4995      	ldr	r1, [pc, #596]	; (800bca0 <lwip_netconn_do_writemore+0x274>)
 800ba4a:	4896      	ldr	r0, [pc, #600]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800ba4c:	f00b fd50 	bl	80174f0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d006      	beq.n	800ba66 <lwip_netconn_do_writemore+0x3a>
 800ba58:	4b90      	ldr	r3, [pc, #576]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800ba5a:	f240 6274 	movw	r2, #1652	; 0x674
 800ba5e:	4992      	ldr	r1, [pc, #584]	; (800bca8 <lwip_netconn_do_writemore+0x27c>)
 800ba60:	4890      	ldr	r0, [pc, #576]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800ba62:	f00b fd45 	bl	80174f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <lwip_netconn_do_writemore+0x50>
 800ba6e:	4b8b      	ldr	r3, [pc, #556]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800ba70:	f240 6275 	movw	r2, #1653	; 0x675
 800ba74:	498d      	ldr	r1, [pc, #564]	; (800bcac <lwip_netconn_do_writemore+0x280>)
 800ba76:	488b      	ldr	r0, [pc, #556]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800ba78:	f00b fd3a 	bl	80174f0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <lwip_netconn_do_writemore+0x66>
 800ba84:	4b85      	ldr	r3, [pc, #532]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800ba86:	f240 6276 	movw	r2, #1654	; 0x676
 800ba8a:	4989      	ldr	r1, [pc, #548]	; (800bcb0 <lwip_netconn_do_writemore+0x284>)
 800ba8c:	4885      	ldr	r0, [pc, #532]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800ba8e:	f00b fd2f 	bl	80174f0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	699a      	ldr	r2, [r3, #24]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d306      	bcc.n	800bab0 <lwip_netconn_do_writemore+0x84>
 800baa2:	4b7e      	ldr	r3, [pc, #504]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800baa4:	f240 6277 	movw	r2, #1655	; 0x677
 800baa8:	4982      	ldr	r1, [pc, #520]	; (800bcb4 <lwip_netconn_do_writemore+0x288>)
 800baaa:	487e      	ldr	r0, [pc, #504]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800baac:	f00b fd20 	bl	80174f0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	899b      	ldrh	r3, [r3, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <lwip_netconn_do_writemore+0x9c>
 800baba:	4b78      	ldr	r3, [pc, #480]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800babc:	f240 6279 	movw	r2, #1657	; 0x679
 800bac0:	497d      	ldr	r1, [pc, #500]	; (800bcb8 <lwip_netconn_do_writemore+0x28c>)
 800bac2:	4878      	ldr	r0, [pc, #480]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800bac4:	f00b fd14 	bl	80174f0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	7f1b      	ldrb	r3, [r3, #28]
 800bace:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	7f1b      	ldrb	r3, [r3, #28]
 800bad4:	f003 0302 	and.w	r3, r3, #2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d104      	bne.n	800bae6 <lwip_netconn_do_writemore+0xba>
 800badc:	7ebb      	ldrb	r3, [r7, #26]
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <lwip_netconn_do_writemore+0xbe>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <lwip_netconn_do_writemore+0xc0>
 800baea:	2300      	movs	r3, #0
 800baec:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	4413      	add	r3, r2
 800bafe:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb18:	d307      	bcc.n	800bb2a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bb1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb1e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bb20:	7ebb      	ldrb	r3, [r7, #26]
 800bb22:	f043 0302 	orr.w	r3, r3, #2
 800bb26:	76bb      	strb	r3, [r7, #26]
 800bb28:	e001      	b.n	800bb2e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb36:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bb38:	89fa      	ldrh	r2, [r7, #14]
 800bb3a:	8bbb      	ldrh	r3, [r7, #28]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d216      	bcs.n	800bb6e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800bb40:	89fb      	ldrh	r3, [r7, #14]
 800bb42:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bb44:	7e3b      	ldrb	r3, [r7, #24]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00d      	beq.n	800bb66 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800bb4a:	8bbb      	ldrh	r3, [r7, #28]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10e      	bne.n	800bb6e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a1b      	ldr	r3, [r3, #32]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d102      	bne.n	800bb60 <lwip_netconn_do_writemore+0x134>
 800bb5a:	f06f 0306 	mvn.w	r3, #6
 800bb5e:	e000      	b.n	800bb62 <lwip_netconn_do_writemore+0x136>
 800bb60:	2300      	movs	r3, #0
 800bb62:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800bb64:	e07d      	b.n	800bc62 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800bb66:	7ebb      	ldrb	r3, [r7, #26]
 800bb68:	f043 0302 	orr.w	r3, r3, #2
 800bb6c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	691a      	ldr	r2, [r3, #16]
 800bb74:	8bbb      	ldrh	r3, [r7, #28]
 800bb76:	441a      	add	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a1b      	ldr	r3, [r3, #32]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d906      	bls.n	800bb92 <lwip_netconn_do_writemore+0x166>
 800bb84:	4b45      	ldr	r3, [pc, #276]	; (800bc9c <lwip_netconn_do_writemore+0x270>)
 800bb86:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800bb8a:	494c      	ldr	r1, [pc, #304]	; (800bcbc <lwip_netconn_do_writemore+0x290>)
 800bb8c:	4845      	ldr	r0, [pc, #276]	; (800bca4 <lwip_netconn_do_writemore+0x278>)
 800bb8e:	f00b fcaf 	bl	80174f0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bb92:	8bbb      	ldrh	r3, [r7, #28]
 800bb94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d103      	bne.n	800bba4 <lwip_netconn_do_writemore+0x178>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba2:	d209      	bcs.n	800bbb8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bba8:	8bba      	ldrh	r2, [r7, #28]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d10b      	bne.n	800bbc6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d906      	bls.n	800bbc6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bbbc:	7ebb      	ldrb	r3, [r7, #26]
 800bbbe:	f043 0302 	orr.w	r3, r3, #2
 800bbc2:	76bb      	strb	r3, [r7, #26]
 800bbc4:	e001      	b.n	800bbca <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6858      	ldr	r0, [r3, #4]
 800bbce:	7ebb      	ldrb	r3, [r7, #26]
 800bbd0:	8bba      	ldrh	r2, [r7, #28]
 800bbd2:	6979      	ldr	r1, [r7, #20]
 800bbd4:	f006 ff28 	bl	8012a28 <tcp_write>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800bbdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d12c      	bne.n	800bc3e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	6999      	ldr	r1, [r3, #24]
 800bbea:	8bba      	ldrh	r2, [r7, #28]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	440a      	add	r2, r1
 800bbf2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	6919      	ldr	r1, [r3, #16]
 800bbfa:	8bba      	ldrh	r2, [r7, #28]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a1b      	ldr	r3, [r3, #32]
 800bc00:	440a      	add	r2, r1
 800bc02:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d113      	bne.n	800bc3e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	899a      	ldrh	r2, [r3, #12]
 800bc1c:	3a01      	subs	r2, #1
 800bc1e:	b292      	uxth	r2, r2
 800bc20:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	899b      	ldrh	r3, [r3, #12]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d008      	beq.n	800bc3e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	3208      	adds	r2, #8
 800bc34:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800bc3e:	7e7b      	ldrb	r3, [r7, #25]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d004      	beq.n	800bc4e <lwip_netconn_do_writemore+0x222>
 800bc44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f43f af50 	beq.w	800baee <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bc4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <lwip_netconn_do_writemore+0x234>
 800bc56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc5e:	d146      	bne.n	800bcee <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800bc60:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bc62:	7e3b      	ldrb	r3, [r7, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d02b      	beq.n	800bcc0 <lwip_netconn_do_writemore+0x294>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d223      	bcs.n	800bcc0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d005      	beq.n	800bc8c <lwip_netconn_do_writemore+0x260>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	2200      	movs	r2, #0
 800bc86:	2103      	movs	r1, #3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	7f1b      	ldrb	r3, [r3, #28]
 800bc90:	f043 0310 	orr.w	r3, r3, #16
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	771a      	strb	r2, [r3, #28]
 800bc9a:	e028      	b.n	800bcee <lwip_netconn_do_writemore+0x2c2>
 800bc9c:	0801a94c 	.word	0x0801a94c
 800bca0:	0801aa40 	.word	0x0801aa40
 800bca4:	0801a990 	.word	0x0801a990
 800bca8:	0801ad48 	.word	0x0801ad48
 800bcac:	0801aa50 	.word	0x0801aa50
 800bcb0:	0801ad68 	.word	0x0801ad68
 800bcb4:	0801ad80 	.word	0x0801ad80
 800bcb8:	0801adc0 	.word	0x0801adc0
 800bcbc:	0801ade8 	.word	0x0801ade8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bcc8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bccc:	d305      	bcc.n	800bcda <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	d909      	bls.n	800bcee <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <lwip_netconn_do_writemore+0x2c2>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2200      	movs	r2, #0
 800bce8:	2103      	movs	r1, #3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bcee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d11d      	bne.n	800bd32 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	699a      	ldr	r2, [r3, #24]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d002      	beq.n	800bd0c <lwip_netconn_do_writemore+0x2e0>
 800bd06:	7e3b      	ldrb	r3, [r7, #24]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f007 fc71 	bl	80135fc <tcp_output>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bd1e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bd22:	f113 0f04 	cmn.w	r3, #4
 800bd26:	d12c      	bne.n	800bd82 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bd28:	7b3b      	ldrb	r3, [r7, #12]
 800bd2a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	76fb      	strb	r3, [r7, #27]
 800bd30:	e027      	b.n	800bd82 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800bd32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd3a:	d120      	bne.n	800bd7e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f007 fc5b 	bl	80135fc <tcp_output>
 800bd46:	4603      	mov	r3, r0
 800bd48:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bd4a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bd4e:	f113 0f04 	cmn.w	r3, #4
 800bd52:	d104      	bne.n	800bd5e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bd54:	7b7b      	ldrb	r3, [r7, #13]
 800bd56:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	76fb      	strb	r3, [r7, #27]
 800bd5c:	e011      	b.n	800bd82 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800bd5e:	7e3b      	ldrb	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00e      	beq.n	800bd82 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <lwip_netconn_do_writemore+0x348>
 800bd6e:	f06f 0306 	mvn.w	r3, #6
 800bd72:	e000      	b.n	800bd76 <lwip_netconn_do_writemore+0x34a>
 800bd74:	2300      	movs	r3, #0
 800bd76:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	76fb      	strb	r3, [r7, #27]
 800bd7c:	e001      	b.n	800bd82 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bd82:	7efb      	ldrb	r3, [r7, #27]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d015      	beq.n	800bdb4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a1b      	ldr	r3, [r3, #32]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	330c      	adds	r3, #12
 800bd90:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	7ffa      	ldrb	r2, [r7, #31]
 800bd98:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d006      	beq.n	800bdba <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bdac:	68b8      	ldr	r0, [r7, #8]
 800bdae:	f00b f8f5 	bl	8016f9c <sys_sem_signal>
 800bdb2:	e002      	b.n	800bdba <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bdb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdb8:	e000      	b.n	800bdbc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fdf8 	bl	800a9ca <netconn_err>
 800bdda:	4603      	mov	r3, r0
 800bddc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bdde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d163      	bne.n	800beae <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdf0:	2b10      	cmp	r3, #16
 800bdf2:	d15c      	bne.n	800beae <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	785b      	ldrb	r3, [r3, #1]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800bdfe:	23fb      	movs	r3, #251	; 0xfb
 800be00:	73fb      	strb	r3, [r7, #15]
 800be02:	e054      	b.n	800beae <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d04d      	beq.n	800beaa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2201      	movs	r2, #1
 800be14:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6a1b      	ldr	r3, [r3, #32]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <lwip_netconn_do_write+0x6a>
 800be20:	4b27      	ldr	r3, [pc, #156]	; (800bec0 <lwip_netconn_do_write+0xfc>)
 800be22:	f240 7223 	movw	r2, #1827	; 0x723
 800be26:	4927      	ldr	r1, [pc, #156]	; (800bec4 <lwip_netconn_do_write+0x100>)
 800be28:	4827      	ldr	r0, [pc, #156]	; (800bec8 <lwip_netconn_do_write+0x104>)
 800be2a:	f00b fb61 	bl	80174f0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <lwip_netconn_do_write+0x80>
 800be36:	4b22      	ldr	r3, [pc, #136]	; (800bec0 <lwip_netconn_do_write+0xfc>)
 800be38:	f240 7224 	movw	r2, #1828	; 0x724
 800be3c:	4923      	ldr	r1, [pc, #140]	; (800becc <lwip_netconn_do_write+0x108>)
 800be3e:	4822      	ldr	r0, [pc, #136]	; (800bec8 <lwip_netconn_do_write+0x104>)
 800be40:	f00b fb56 	bl	80174f0 <iprintf>
        msg->conn->current_msg = msg;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff fdea 	bl	800ba2c <lwip_netconn_do_writemore>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d02b      	beq.n	800beb6 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d006      	beq.n	800be76 <lwip_netconn_do_write+0xb2>
 800be68:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <lwip_netconn_do_write+0xfc>)
 800be6a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800be6e:	4918      	ldr	r1, [pc, #96]	; (800bed0 <lwip_netconn_do_write+0x10c>)
 800be70:	4815      	ldr	r0, [pc, #84]	; (800bec8 <lwip_netconn_do_write+0x104>)
 800be72:	f00b fb3d 	bl	80174f0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800be76:	4817      	ldr	r0, [pc, #92]	; (800bed4 <lwip_netconn_do_write+0x110>)
 800be78:	f00b f8f9 	bl	801706e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	330c      	adds	r3, #12
 800be82:	2100      	movs	r1, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f00b f858 	bl	8016f3a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800be8a:	4812      	ldr	r0, [pc, #72]	; (800bed4 <lwip_netconn_do_write+0x110>)
 800be8c:	f00b f8e0 	bl	8017050 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d10d      	bne.n	800beb6 <lwip_netconn_do_write+0xf2>
 800be9a:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <lwip_netconn_do_write+0xfc>)
 800be9c:	f240 722c 	movw	r2, #1836	; 0x72c
 800bea0:	490b      	ldr	r1, [pc, #44]	; (800bed0 <lwip_netconn_do_write+0x10c>)
 800bea2:	4809      	ldr	r0, [pc, #36]	; (800bec8 <lwip_netconn_do_write+0x104>)
 800bea4:	f00b fb24 	bl	80174f0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800bea8:	e005      	b.n	800beb6 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800beaa:	23f5      	movs	r3, #245	; 0xf5
 800beac:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	7bfa      	ldrb	r2, [r7, #15]
 800beb2:	711a      	strb	r2, [r3, #4]
 800beb4:	e000      	b.n	800beb8 <lwip_netconn_do_write+0xf4>
        return;
 800beb6:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0801a94c 	.word	0x0801a94c
 800bec4:	0801ac8c 	.word	0x0801ac8c
 800bec8:	0801a990 	.word	0x0801a990
 800becc:	0801ae14 	.word	0x0801ae14
 800bed0:	0801aca8 	.word	0x0801aca8
 800bed4:	20009b08 	.word	0x20009b08

0800bed8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	785b      	ldrb	r3, [r3, #1]
 800beea:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d069      	beq.n	800bfca <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800bf00:	2b10      	cmp	r3, #16
 800bf02:	d162      	bne.n	800bfca <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d002      	beq.n	800bf12 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bf0c:	7afb      	ldrb	r3, [r7, #11]
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d05b      	beq.n	800bfca <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bf12:	7afb      	ldrb	r3, [r7, #11]
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d103      	bne.n	800bf20 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	22f5      	movs	r2, #245	; 0xf5
 800bf1c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bf1e:	e059      	b.n	800bfd4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bf20:	7afb      	ldrb	r3, [r7, #11]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d103      	bne.n	800bf2e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	22fb      	movs	r2, #251	; 0xfb
 800bf2a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bf2c:	e052      	b.n	800bfd4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	7a1b      	ldrb	r3, [r3, #8]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d004      	beq.n	800bf44 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff f916 	bl	800b170 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d006      	beq.n	800bf5c <lwip_netconn_do_close+0x84>
 800bf4e:	4b23      	ldr	r3, [pc, #140]	; (800bfdc <lwip_netconn_do_close+0x104>)
 800bf50:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800bf54:	4922      	ldr	r1, [pc, #136]	; (800bfe0 <lwip_netconn_do_close+0x108>)
 800bf56:	4823      	ldr	r0, [pc, #140]	; (800bfe4 <lwip_netconn_do_close+0x10c>)
 800bf58:	f00b faca 	bl	80174f0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2204      	movs	r2, #4
 800bf62:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2100      	movs	r1, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff f97a 	bl	800b26c <lwip_netconn_do_close_internal>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d029      	beq.n	800bfd2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	d006      	beq.n	800bf96 <lwip_netconn_do_close+0xbe>
 800bf88:	4b14      	ldr	r3, [pc, #80]	; (800bfdc <lwip_netconn_do_close+0x104>)
 800bf8a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800bf8e:	4916      	ldr	r1, [pc, #88]	; (800bfe8 <lwip_netconn_do_close+0x110>)
 800bf90:	4814      	ldr	r0, [pc, #80]	; (800bfe4 <lwip_netconn_do_close+0x10c>)
 800bf92:	f00b faad 	bl	80174f0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bf96:	4815      	ldr	r0, [pc, #84]	; (800bfec <lwip_netconn_do_close+0x114>)
 800bf98:	f00b f869 	bl	801706e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f00a ffc8 	bl	8016f3a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bfaa:	4810      	ldr	r0, [pc, #64]	; (800bfec <lwip_netconn_do_close+0x114>)
 800bfac:	f00b f850 	bl	8017050 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	785b      	ldrb	r3, [r3, #1]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00b      	beq.n	800bfd2 <lwip_netconn_do_close+0xfa>
 800bfba:	4b08      	ldr	r3, [pc, #32]	; (800bfdc <lwip_netconn_do_close+0x104>)
 800bfbc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800bfc0:	4909      	ldr	r1, [pc, #36]	; (800bfe8 <lwip_netconn_do_close+0x110>)
 800bfc2:	4808      	ldr	r0, [pc, #32]	; (800bfe4 <lwip_netconn_do_close+0x10c>)
 800bfc4:	f00b fa94 	bl	80174f0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bfc8:	e003      	b.n	800bfd2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	22f5      	movs	r2, #245	; 0xf5
 800bfce:	711a      	strb	r2, [r3, #4]
 800bfd0:	e000      	b.n	800bfd4 <lwip_netconn_do_close+0xfc>
      return;
 800bfd2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	0801a94c 	.word	0x0801a94c
 800bfe0:	0801ac8c 	.word	0x0801ac8c
 800bfe4:	0801a990 	.word	0x0801a990
 800bfe8:	0801aca8 	.word	0x0801aca8
 800bfec:	20009b08 	.word	0x20009b08

0800bff0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d013      	beq.n	800c026 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00b      	beq.n	800c01e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f001 fefe 	bl	800de0c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	2005      	movs	r0, #5
 800c022:	f001 f853 	bl	800d0cc <memp_free>
  }
}
 800c026:	bf00      	nop
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d108      	bne.n	800c050 <netbuf_next+0x20>
 800c03e:	4b11      	ldr	r3, [pc, #68]	; (800c084 <netbuf_next+0x54>)
 800c040:	22e0      	movs	r2, #224	; 0xe0
 800c042:	4911      	ldr	r1, [pc, #68]	; (800c088 <netbuf_next+0x58>)
 800c044:	4811      	ldr	r0, [pc, #68]	; (800c08c <netbuf_next+0x5c>)
 800c046:	f00b fa53 	bl	80174f0 <iprintf>
 800c04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c04e:	e014      	b.n	800c07a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d102      	bne.n	800c060 <netbuf_next+0x30>
    return -1;
 800c05a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c05e:	e00c      	b.n	800c07a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <netbuf_next+0x48>
    return 1;
 800c074:	2301      	movs	r3, #1
 800c076:	e000      	b.n	800c07a <netbuf_next+0x4a>
  }
  return 0;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	0801ae40 	.word	0x0801ae40
 800c088:	0801afa0 	.word	0x0801afa0
 800c08c:	0801ae90 	.word	0x0801ae90

0800c090 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c09a:	f008 fb89 	bl	80147b0 <sys_timeouts_sleeptime>
 800c09e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0a6:	d10b      	bne.n	800c0c0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c0a8:	4813      	ldr	r0, [pc, #76]	; (800c0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0aa:	f00a ffe0 	bl	801706e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f00a feb6 	bl	8016e24 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c0b8:	480f      	ldr	r0, [pc, #60]	; (800c0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0ba:	f00a ffc9 	bl	8017050 <sys_mutex_lock>
    return;
 800c0be:	e018      	b.n	800c0f2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d102      	bne.n	800c0cc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c0c6:	f008 fb39 	bl	801473c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c0ca:	e7e6      	b.n	800c09a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c0cc:	480a      	ldr	r0, [pc, #40]	; (800c0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0ce:	f00a ffce 	bl	801706e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f00a fea4 	bl	8016e24 <sys_arch_mbox_fetch>
 800c0dc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c0de:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0e0:	f00a ffb6 	bl	8017050 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ea:	d102      	bne.n	800c0f2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c0ec:	f008 fb26 	bl	801473c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c0f0:	e7d3      	b.n	800c09a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	20009b08 	.word	0x20009b08

0800c0fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c104:	4810      	ldr	r0, [pc, #64]	; (800c148 <tcpip_thread+0x4c>)
 800c106:	f00a ffa3 	bl	8017050 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c10a:	4b10      	ldr	r3, [pc, #64]	; (800c14c <tcpip_thread+0x50>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d005      	beq.n	800c11e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c112:	4b0e      	ldr	r3, [pc, #56]	; (800c14c <tcpip_thread+0x50>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a0e      	ldr	r2, [pc, #56]	; (800c150 <tcpip_thread+0x54>)
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	4610      	mov	r0, r2
 800c11c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c11e:	f107 030c 	add.w	r3, r7, #12
 800c122:	4619      	mov	r1, r3
 800c124:	480b      	ldr	r0, [pc, #44]	; (800c154 <tcpip_thread+0x58>)
 800c126:	f7ff ffb3 	bl	800c090 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c130:	4b09      	ldr	r3, [pc, #36]	; (800c158 <tcpip_thread+0x5c>)
 800c132:	2291      	movs	r2, #145	; 0x91
 800c134:	4909      	ldr	r1, [pc, #36]	; (800c15c <tcpip_thread+0x60>)
 800c136:	480a      	ldr	r0, [pc, #40]	; (800c160 <tcpip_thread+0x64>)
 800c138:	f00b f9da 	bl	80174f0 <iprintf>
      continue;
 800c13c:	e003      	b.n	800c146 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	4618      	mov	r0, r3
 800c142:	f000 f80f 	bl	800c164 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c146:	e7ea      	b.n	800c11e <tcpip_thread+0x22>
 800c148:	20009b08 	.word	0x20009b08
 800c14c:	20009afc 	.word	0x20009afc
 800c150:	20009b00 	.word	0x20009b00
 800c154:	20009b04 	.word	0x20009b04
 800c158:	0801afd8 	.word	0x0801afd8
 800c15c:	0801b008 	.word	0x0801b008
 800c160:	0801b028 	.word	0x0801b028

0800c164 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d026      	beq.n	800c1c2 <tcpip_thread_handle_msg+0x5e>
 800c174:	2b02      	cmp	r3, #2
 800c176:	dc2b      	bgt.n	800c1d0 <tcpip_thread_handle_msg+0x6c>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d002      	beq.n	800c182 <tcpip_thread_handle_msg+0x1e>
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d015      	beq.n	800c1ac <tcpip_thread_handle_msg+0x48>
 800c180:	e026      	b.n	800c1d0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	6850      	ldr	r0, [r2, #4]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	6892      	ldr	r2, [r2, #8]
 800c18e:	4611      	mov	r1, r2
 800c190:	4798      	blx	r3
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f001 fe35 	bl	800de0c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	2008      	movs	r0, #8
 800c1a6:	f000 ff91 	bl	800d0cc <memp_free>
      break;
 800c1aa:	e018      	b.n	800c1de <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6892      	ldr	r2, [r2, #8]
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	2007      	movs	r0, #7
 800c1bc:	f000 ff86 	bl	800d0cc <memp_free>
      break;
 800c1c0:	e00d      	b.n	800c1de <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	6892      	ldr	r2, [r2, #8]
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	4798      	blx	r3
      break;
 800c1ce:	e006      	b.n	800c1de <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c1d0:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <tcpip_thread_handle_msg+0x84>)
 800c1d2:	22cf      	movs	r2, #207	; 0xcf
 800c1d4:	4905      	ldr	r1, [pc, #20]	; (800c1ec <tcpip_thread_handle_msg+0x88>)
 800c1d6:	4806      	ldr	r0, [pc, #24]	; (800c1f0 <tcpip_thread_handle_msg+0x8c>)
 800c1d8:	f00b f98a 	bl	80174f0 <iprintf>
      break;
 800c1dc:	bf00      	nop
  }
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	0801afd8 	.word	0x0801afd8
 800c1ec:	0801b008 	.word	0x0801b008
 800c1f0:	0801b028 	.word	0x0801b028

0800c1f4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c200:	481a      	ldr	r0, [pc, #104]	; (800c26c <tcpip_inpkt+0x78>)
 800c202:	f00a fe57 	bl	8016eb4 <sys_mbox_valid>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d105      	bne.n	800c218 <tcpip_inpkt+0x24>
 800c20c:	4b18      	ldr	r3, [pc, #96]	; (800c270 <tcpip_inpkt+0x7c>)
 800c20e:	22fc      	movs	r2, #252	; 0xfc
 800c210:	4918      	ldr	r1, [pc, #96]	; (800c274 <tcpip_inpkt+0x80>)
 800c212:	4819      	ldr	r0, [pc, #100]	; (800c278 <tcpip_inpkt+0x84>)
 800c214:	f00b f96c 	bl	80174f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c218:	2008      	movs	r0, #8
 800c21a:	f000 fee1 	bl	800cfe0 <memp_malloc>
 800c21e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d102      	bne.n	800c22c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c22a:	e01a      	b.n	800c262 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c244:	6979      	ldr	r1, [r7, #20]
 800c246:	4809      	ldr	r0, [pc, #36]	; (800c26c <tcpip_inpkt+0x78>)
 800c248:	f00a fdd2 	bl	8016df0 <sys_mbox_trypost>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d006      	beq.n	800c260 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c252:	6979      	ldr	r1, [r7, #20]
 800c254:	2008      	movs	r0, #8
 800c256:	f000 ff39 	bl	800d0cc <memp_free>
    return ERR_MEM;
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c25e:	e000      	b.n	800c262 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c260:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20009b04 	.word	0x20009b04
 800c270:	0801afd8 	.word	0x0801afd8
 800c274:	0801b050 	.word	0x0801b050
 800c278:	0801b028 	.word	0x0801b028

0800c27c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c28c:	f003 0318 	and.w	r3, r3, #24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d006      	beq.n	800c2a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c294:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <tcpip_input+0x3c>)
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff ffab 	bl	800c1f4 <tcpip_inpkt>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	e005      	b.n	800c2ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c2a2:	4a06      	ldr	r2, [pc, #24]	; (800c2bc <tcpip_input+0x40>)
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7ff ffa4 	bl	800c1f4 <tcpip_inpkt>
 800c2ac:	4603      	mov	r3, r0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	08016bed 	.word	0x08016bed
 800c2bc:	08015b09 	.word	0x08015b09

0800c2c0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c2ca:	4819      	ldr	r0, [pc, #100]	; (800c330 <tcpip_try_callback+0x70>)
 800c2cc:	f00a fdf2 	bl	8016eb4 <sys_mbox_valid>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <tcpip_try_callback+0x24>
 800c2d6:	4b17      	ldr	r3, [pc, #92]	; (800c334 <tcpip_try_callback+0x74>)
 800c2d8:	f240 125d 	movw	r2, #349	; 0x15d
 800c2dc:	4916      	ldr	r1, [pc, #88]	; (800c338 <tcpip_try_callback+0x78>)
 800c2de:	4817      	ldr	r0, [pc, #92]	; (800c33c <tcpip_try_callback+0x7c>)
 800c2e0:	f00b f906 	bl	80174f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c2e4:	2007      	movs	r0, #7
 800c2e6:	f000 fe7b 	bl	800cfe0 <memp_malloc>
 800c2ea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2f6:	e017      	b.n	800c328 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c30a:	68f9      	ldr	r1, [r7, #12]
 800c30c:	4808      	ldr	r0, [pc, #32]	; (800c330 <tcpip_try_callback+0x70>)
 800c30e:	f00a fd6f 	bl	8016df0 <sys_mbox_trypost>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c318:	68f9      	ldr	r1, [r7, #12]
 800c31a:	2007      	movs	r0, #7
 800c31c:	f000 fed6 	bl	800d0cc <memp_free>
    return ERR_MEM;
 800c320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c324:	e000      	b.n	800c328 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20009b04 	.word	0x20009b04
 800c334:	0801afd8 	.word	0x0801afd8
 800c338:	0801b050 	.word	0x0801b050
 800c33c:	0801b028 	.word	0x0801b028

0800c340 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c34c:	4806      	ldr	r0, [pc, #24]	; (800c368 <tcpip_send_msg_wait_sem+0x28>)
 800c34e:	f00a fe7f 	bl	8017050 <sys_mutex_lock>
  fn(apimsg);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	68b8      	ldr	r0, [r7, #8]
 800c356:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c358:	4803      	ldr	r0, [pc, #12]	; (800c368 <tcpip_send_msg_wait_sem+0x28>)
 800c35a:	f00a fe88 	bl	801706e <sys_mutex_unlock>
  return ERR_OK;
 800c35e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20009b08 	.word	0x20009b08

0800c36c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af02      	add	r7, sp, #8
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c376:	f000 f98b 	bl	800c690 <lwip_init>

  tcpip_init_done = initfunc;
 800c37a:	4a17      	ldr	r2, [pc, #92]	; (800c3d8 <tcpip_init+0x6c>)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c380:	4a16      	ldr	r2, [pc, #88]	; (800c3dc <tcpip_init+0x70>)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c386:	2106      	movs	r1, #6
 800c388:	4815      	ldr	r0, [pc, #84]	; (800c3e0 <tcpip_init+0x74>)
 800c38a:	f00a fd05 	bl	8016d98 <sys_mbox_new>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d006      	beq.n	800c3a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c394:	4b13      	ldr	r3, [pc, #76]	; (800c3e4 <tcpip_init+0x78>)
 800c396:	f240 2261 	movw	r2, #609	; 0x261
 800c39a:	4913      	ldr	r1, [pc, #76]	; (800c3e8 <tcpip_init+0x7c>)
 800c39c:	4813      	ldr	r0, [pc, #76]	; (800c3ec <tcpip_init+0x80>)
 800c39e:	f00b f8a7 	bl	80174f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c3a2:	4813      	ldr	r0, [pc, #76]	; (800c3f0 <tcpip_init+0x84>)
 800c3a4:	f00a fe3e 	bl	8017024 <sys_mutex_new>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d006      	beq.n	800c3bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c3ae:	4b0d      	ldr	r3, [pc, #52]	; (800c3e4 <tcpip_init+0x78>)
 800c3b0:	f240 2265 	movw	r2, #613	; 0x265
 800c3b4:	490f      	ldr	r1, [pc, #60]	; (800c3f4 <tcpip_init+0x88>)
 800c3b6:	480d      	ldr	r0, [pc, #52]	; (800c3ec <tcpip_init+0x80>)
 800c3b8:	f00b f89a 	bl	80174f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c3bc:	2318      	movs	r3, #24
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	490c      	ldr	r1, [pc, #48]	; (800c3f8 <tcpip_init+0x8c>)
 800c3c8:	480c      	ldr	r0, [pc, #48]	; (800c3fc <tcpip_init+0x90>)
 800c3ca:	f00a fe5d 	bl	8017088 <sys_thread_new>
}
 800c3ce:	bf00      	nop
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20009afc 	.word	0x20009afc
 800c3dc:	20009b00 	.word	0x20009b00
 800c3e0:	20009b04 	.word	0x20009b04
 800c3e4:	0801afd8 	.word	0x0801afd8
 800c3e8:	0801b060 	.word	0x0801b060
 800c3ec:	0801b028 	.word	0x0801b028
 800c3f0:	20009b08 	.word	0x20009b08
 800c3f4:	0801b084 	.word	0x0801b084
 800c3f8:	0800c0fd 	.word	0x0800c0fd
 800c3fc:	0801b0a8 	.word	0x0801b0a8

0800c400 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c40a:	88fb      	ldrh	r3, [r7, #6]
 800c40c:	021b      	lsls	r3, r3, #8
 800c40e:	b21a      	sxth	r2, r3
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	0a1b      	lsrs	r3, r3, #8
 800c414:	b29b      	uxth	r3, r3
 800c416:	b21b      	sxth	r3, r3
 800c418:	4313      	orrs	r3, r2
 800c41a:	b21b      	sxth	r3, r3
 800c41c:	b29b      	uxth	r3, r3
}
 800c41e:	4618      	mov	r0, r3
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	061a      	lsls	r2, r3, #24
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	021b      	lsls	r3, r3, #8
 800c43a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c43e:	431a      	orrs	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	0a1b      	lsrs	r3, r3, #8
 800c444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c448:	431a      	orrs	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	0e1b      	lsrs	r3, r3, #24
 800c44e:	4313      	orrs	r3, r2
}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b089      	sub	sp, #36	; 0x24
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c46e:	2300      	movs	r3, #0
 800c470:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00d      	beq.n	800c49c <lwip_standard_chksum+0x40>
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dd0a      	ble.n	800c49c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	1c53      	adds	r3, r2, #1
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	f107 030e 	add.w	r3, r7, #14
 800c490:	3301      	adds	r3, #1
 800c492:	7812      	ldrb	r2, [r2, #0]
 800c494:	701a      	strb	r2, [r3, #0]
    len--;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	3b01      	subs	r3, #1
 800c49a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c4a0:	e00a      	b.n	800c4b8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	1c9a      	adds	r2, r3, #2
 800c4a6:	61ba      	str	r2, [r7, #24]
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	3b02      	subs	r3, #2
 800c4b6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	dcf1      	bgt.n	800c4a2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	dd04      	ble.n	800c4ce <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c4c4:	f107 030e 	add.w	r3, r7, #14
 800c4c8:	69ba      	ldr	r2, [r7, #24]
 800c4ca:	7812      	ldrb	r2, [r2, #0]
 800c4cc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c4ce:	89fb      	ldrh	r3, [r7, #14]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	0c1a      	lsrs	r2, r3, #16
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	0c1a      	lsrs	r2, r3, #16
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	4413      	add	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d007      	beq.n	800c506 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	021b      	lsls	r3, r3, #8
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	0a1b      	lsrs	r3, r3, #8
 800c500:	b2db      	uxtb	r3, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	b29b      	uxth	r3, r3
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3724      	adds	r7, #36	; 0x24
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b086      	sub	sp, #24
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	60f8      	str	r0, [r7, #12]
 800c51e:	607b      	str	r3, [r7, #4]
 800c520:	460b      	mov	r3, r1
 800c522:	72fb      	strb	r3, [r7, #11]
 800c524:	4613      	mov	r3, r2
 800c526:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e02b      	b.n	800c58a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	895b      	ldrh	r3, [r3, #10]
 800c53a:	4619      	mov	r1, r3
 800c53c:	4610      	mov	r0, r2
 800c53e:	f7ff ff8d 	bl	800c45c <lwip_standard_chksum>
 800c542:	4603      	mov	r3, r0
 800c544:	461a      	mov	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4413      	add	r3, r2
 800c54a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	0c1a      	lsrs	r2, r3, #16
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	b29b      	uxth	r3, r3
 800c554:	4413      	add	r3, r2
 800c556:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	895b      	ldrh	r3, [r3, #10]
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	b29b      	uxth	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00e      	beq.n	800c584 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bf0c      	ite	eq
 800c56c:	2301      	moveq	r3, #1
 800c56e:	2300      	movne	r3, #0
 800c570:	b2db      	uxtb	r3, r3
 800c572:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	021b      	lsls	r3, r3, #8
 800c578:	b29a      	uxth	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	0a1b      	lsrs	r3, r3, #8
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	4313      	orrs	r3, r2
 800c582:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	617b      	str	r3, [r7, #20]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1d0      	bne.n	800c532 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d007      	beq.n	800c5a6 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	0a1b      	lsrs	r3, r3, #8
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff ff28 	bl	800c400 <lwip_htons>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800c5ba:	893b      	ldrh	r3, [r7, #8]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff ff1f 	bl	800c400 <lwip_htons>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	0c1a      	lsrs	r2, r3, #16
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	4413      	add	r3, r2
 800c5d6:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	0c1a      	lsrs	r2, r3, #16
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	4413      	add	r3, r2
 800c5e2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	43db      	mvns	r3, r3
 800c5ea:	b29b      	uxth	r3, r3
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	607b      	str	r3, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	72fb      	strb	r3, [r7, #11]
 800c602:	4613      	mov	r3, r2
 800c604:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	0c1b      	lsrs	r3, r3, #16
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	4413      	add	r3, r2
 800c61a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	b29b      	uxth	r3, r3
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4413      	add	r3, r2
 800c62a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	0c1b      	lsrs	r3, r3, #16
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	4413      	add	r3, r2
 800c634:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	0c1a      	lsrs	r2, r3, #16
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4413      	add	r3, r2
 800c640:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	0c1a      	lsrs	r2, r3, #16
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	4413      	add	r3, r2
 800c64c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800c64e:	893a      	ldrh	r2, [r7, #8]
 800c650:	7af9      	ldrb	r1, [r7, #11]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7ff ff5e 	bl	800c516 <inet_cksum_pseudo_base>
 800c65a:	4603      	mov	r3, r0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af02      	add	r7, sp, #8
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	607b      	str	r3, [r7, #4]
 800c66e:	460b      	mov	r3, r1
 800c670:	72fb      	strb	r3, [r7, #11]
 800c672:	4613      	mov	r3, r2
 800c674:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800c676:	893a      	ldrh	r2, [r7, #8]
 800c678:	7af9      	ldrb	r1, [r7, #11]
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7ff ffb7 	bl	800c5f4 <inet_chksum_pseudo>
 800c686:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c69a:	f00a fcb7 	bl	801700c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c69e:	f000 f8d3 	bl	800c848 <mem_init>
  memp_init();
 800c6a2:	f000 fc2f 	bl	800cf04 <memp_init>
  pbuf_init();
  netif_init();
 800c6a6:	f000 fd3b 	bl	800d120 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6aa:	f001 fe49 	bl	800e340 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c6ae:	f007 fffd 	bl	80146ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c6b2:	bf00      	nop
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
	...

0800c6bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c6c6:	4b05      	ldr	r3, [pc, #20]	; (800c6dc <ptr_to_mem+0x20>)
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	88fb      	ldrh	r3, [r7, #6]
 800c6cc:	4413      	add	r3, r2
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	2000eb38 	.word	0x2000eb38

0800c6e0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c6e8:	4b05      	ldr	r3, [pc, #20]	; (800c700 <mem_to_ptr+0x20>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	b29b      	uxth	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	2000eb38 	.word	0x2000eb38

0800c704 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c704:	b590      	push	{r4, r7, lr}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c70c:	4b45      	ldr	r3, [pc, #276]	; (800c824 <plug_holes+0x120>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	429a      	cmp	r2, r3
 800c714:	d206      	bcs.n	800c724 <plug_holes+0x20>
 800c716:	4b44      	ldr	r3, [pc, #272]	; (800c828 <plug_holes+0x124>)
 800c718:	f240 12df 	movw	r2, #479	; 0x1df
 800c71c:	4943      	ldr	r1, [pc, #268]	; (800c82c <plug_holes+0x128>)
 800c71e:	4844      	ldr	r0, [pc, #272]	; (800c830 <plug_holes+0x12c>)
 800c720:	f00a fee6 	bl	80174f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c724:	4b43      	ldr	r3, [pc, #268]	; (800c834 <plug_holes+0x130>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d306      	bcc.n	800c73c <plug_holes+0x38>
 800c72e:	4b3e      	ldr	r3, [pc, #248]	; (800c828 <plug_holes+0x124>)
 800c730:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c734:	4940      	ldr	r1, [pc, #256]	; (800c838 <plug_holes+0x134>)
 800c736:	483e      	ldr	r0, [pc, #248]	; (800c830 <plug_holes+0x12c>)
 800c738:	f00a feda 	bl	80174f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	791b      	ldrb	r3, [r3, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d006      	beq.n	800c752 <plug_holes+0x4e>
 800c744:	4b38      	ldr	r3, [pc, #224]	; (800c828 <plug_holes+0x124>)
 800c746:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c74a:	493c      	ldr	r1, [pc, #240]	; (800c83c <plug_holes+0x138>)
 800c74c:	4838      	ldr	r0, [pc, #224]	; (800c830 <plug_holes+0x12c>)
 800c74e:	f00a fecf 	bl	80174f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c75a:	d906      	bls.n	800c76a <plug_holes+0x66>
 800c75c:	4b32      	ldr	r3, [pc, #200]	; (800c828 <plug_holes+0x124>)
 800c75e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c762:	4937      	ldr	r1, [pc, #220]	; (800c840 <plug_holes+0x13c>)
 800c764:	4832      	ldr	r0, [pc, #200]	; (800c830 <plug_holes+0x12c>)
 800c766:	f00a fec3 	bl	80174f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff ffa4 	bl	800c6bc <ptr_to_mem>
 800c774:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d024      	beq.n	800c7c8 <plug_holes+0xc4>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	791b      	ldrb	r3, [r3, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d120      	bne.n	800c7c8 <plug_holes+0xc4>
 800c786:	4b2b      	ldr	r3, [pc, #172]	; (800c834 <plug_holes+0x130>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d01b      	beq.n	800c7c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c790:	4b2c      	ldr	r3, [pc, #176]	; (800c844 <plug_holes+0x140>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	429a      	cmp	r2, r3
 800c798:	d102      	bne.n	800c7a0 <plug_holes+0x9c>
      lfree = mem;
 800c79a:	4a2a      	ldr	r2, [pc, #168]	; (800c844 <plug_holes+0x140>)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	881a      	ldrh	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c7b0:	d00a      	beq.n	800c7c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff ff80 	bl	800c6bc <ptr_to_mem>
 800c7bc:	4604      	mov	r4, r0
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7ff ff8e 	bl	800c6e0 <mem_to_ptr>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7ff ff75 	bl	800c6bc <ptr_to_mem>
 800c7d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d01f      	beq.n	800c81c <plug_holes+0x118>
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	791b      	ldrb	r3, [r3, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d11b      	bne.n	800c81c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c7e4:	4b17      	ldr	r3, [pc, #92]	; (800c844 <plug_holes+0x140>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d102      	bne.n	800c7f4 <plug_holes+0xf0>
      lfree = pmem;
 800c7ee:	4a15      	ldr	r2, [pc, #84]	; (800c844 <plug_holes+0x140>)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	881a      	ldrh	r2, [r3, #0]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	881b      	ldrh	r3, [r3, #0]
 800c800:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c804:	d00a      	beq.n	800c81c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff ff56 	bl	800c6bc <ptr_to_mem>
 800c810:	4604      	mov	r4, r0
 800c812:	68b8      	ldr	r0, [r7, #8]
 800c814:	f7ff ff64 	bl	800c6e0 <mem_to_ptr>
 800c818:	4603      	mov	r3, r0
 800c81a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c81c:	bf00      	nop
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	bd90      	pop	{r4, r7, pc}
 800c824:	2000eb38 	.word	0x2000eb38
 800c828:	0801b0b8 	.word	0x0801b0b8
 800c82c:	0801b0e8 	.word	0x0801b0e8
 800c830:	0801b100 	.word	0x0801b100
 800c834:	2000eb3c 	.word	0x2000eb3c
 800c838:	0801b128 	.word	0x0801b128
 800c83c:	0801b144 	.word	0x0801b144
 800c840:	0801b160 	.word	0x0801b160
 800c844:	2000eb44 	.word	0x2000eb44

0800c848 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c84e:	4b1f      	ldr	r3, [pc, #124]	; (800c8cc <mem_init+0x84>)
 800c850:	3303      	adds	r3, #3
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	461a      	mov	r2, r3
 800c858:	4b1d      	ldr	r3, [pc, #116]	; (800c8d0 <mem_init+0x88>)
 800c85a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c85c:	4b1c      	ldr	r3, [pc, #112]	; (800c8d0 <mem_init+0x88>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800c868:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c876:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800c87a:	f7ff ff1f 	bl	800c6bc <ptr_to_mem>
 800c87e:	4603      	mov	r3, r0
 800c880:	4a14      	ldr	r2, [pc, #80]	; (800c8d4 <mem_init+0x8c>)
 800c882:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c884:	4b13      	ldr	r3, [pc, #76]	; (800c8d4 <mem_init+0x8c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2201      	movs	r2, #1
 800c88a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c88c:	4b11      	ldr	r3, [pc, #68]	; (800c8d4 <mem_init+0x8c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800c894:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c896:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <mem_init+0x8c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800c89e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <mem_init+0x88>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a0c      	ldr	r2, [pc, #48]	; (800c8d8 <mem_init+0x90>)
 800c8a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c8a8:	480c      	ldr	r0, [pc, #48]	; (800c8dc <mem_init+0x94>)
 800c8aa:	f00a fbbb 	bl	8017024 <sys_mutex_new>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d006      	beq.n	800c8c2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c8b4:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <mem_init+0x98>)
 800c8b6:	f240 221f 	movw	r2, #543	; 0x21f
 800c8ba:	490a      	ldr	r1, [pc, #40]	; (800c8e4 <mem_init+0x9c>)
 800c8bc:	480a      	ldr	r0, [pc, #40]	; (800c8e8 <mem_init+0xa0>)
 800c8be:	f00a fe17 	bl	80174f0 <iprintf>
  }
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20009b24 	.word	0x20009b24
 800c8d0:	2000eb38 	.word	0x2000eb38
 800c8d4:	2000eb3c 	.word	0x2000eb3c
 800c8d8:	2000eb44 	.word	0x2000eb44
 800c8dc:	2000eb40 	.word	0x2000eb40
 800c8e0:	0801b0b8 	.word	0x0801b0b8
 800c8e4:	0801b18c 	.word	0x0801b18c
 800c8e8:	0801b100 	.word	0x0801b100

0800c8ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff fef3 	bl	800c6e0 <mem_to_ptr>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff feda 	bl	800c6bc <ptr_to_mem>
 800c908:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	885b      	ldrh	r3, [r3, #2]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7ff fed4 	bl	800c6bc <ptr_to_mem>
 800c914:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c91e:	d818      	bhi.n	800c952 <mem_link_valid+0x66>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	885b      	ldrh	r3, [r3, #2]
 800c924:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c928:	d813      	bhi.n	800c952 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c92e:	8afa      	ldrh	r2, [r7, #22]
 800c930:	429a      	cmp	r2, r3
 800c932:	d004      	beq.n	800c93e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	8afa      	ldrh	r2, [r7, #22]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d109      	bne.n	800c952 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c93e:	4b08      	ldr	r3, [pc, #32]	; (800c960 <mem_link_valid+0x74>)
 800c940:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	429a      	cmp	r2, r3
 800c946:	d006      	beq.n	800c956 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	885b      	ldrh	r3, [r3, #2]
 800c94c:	8afa      	ldrh	r2, [r7, #22]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d001      	beq.n	800c956 <mem_link_valid+0x6a>
    return 0;
 800c952:	2300      	movs	r3, #0
 800c954:	e000      	b.n	800c958 <mem_link_valid+0x6c>
  }
  return 1;
 800c956:	2301      	movs	r3, #1
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	2000eb3c 	.word	0x2000eb3c

0800c964 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d070      	beq.n	800ca54 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f003 0303 	and.w	r3, r3, #3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00d      	beq.n	800c998 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c97c:	4b37      	ldr	r3, [pc, #220]	; (800ca5c <mem_free+0xf8>)
 800c97e:	f240 2273 	movw	r2, #627	; 0x273
 800c982:	4937      	ldr	r1, [pc, #220]	; (800ca60 <mem_free+0xfc>)
 800c984:	4837      	ldr	r0, [pc, #220]	; (800ca64 <mem_free+0x100>)
 800c986:	f00a fdb3 	bl	80174f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c98a:	f00a fb9d 	bl	80170c8 <sys_arch_protect>
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f00a fba7 	bl	80170e4 <sys_arch_unprotect>
    return;
 800c996:	e05e      	b.n	800ca56 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3b08      	subs	r3, #8
 800c99c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c99e:	4b32      	ldr	r3, [pc, #200]	; (800ca68 <mem_free+0x104>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	69fa      	ldr	r2, [r7, #28]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d306      	bcc.n	800c9b6 <mem_free+0x52>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f103 020c 	add.w	r2, r3, #12
 800c9ae:	4b2f      	ldr	r3, [pc, #188]	; (800ca6c <mem_free+0x108>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d90d      	bls.n	800c9d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c9b6:	4b29      	ldr	r3, [pc, #164]	; (800ca5c <mem_free+0xf8>)
 800c9b8:	f240 227f 	movw	r2, #639	; 0x27f
 800c9bc:	492c      	ldr	r1, [pc, #176]	; (800ca70 <mem_free+0x10c>)
 800c9be:	4829      	ldr	r0, [pc, #164]	; (800ca64 <mem_free+0x100>)
 800c9c0:	f00a fd96 	bl	80174f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9c4:	f00a fb80 	bl	80170c8 <sys_arch_protect>
 800c9c8:	6138      	str	r0, [r7, #16]
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f00a fb8a 	bl	80170e4 <sys_arch_unprotect>
    return;
 800c9d0:	e041      	b.n	800ca56 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c9d2:	4828      	ldr	r0, [pc, #160]	; (800ca74 <mem_free+0x110>)
 800c9d4:	f00a fb3c 	bl	8017050 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	791b      	ldrb	r3, [r3, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d110      	bne.n	800ca02 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c9e0:	4b1e      	ldr	r3, [pc, #120]	; (800ca5c <mem_free+0xf8>)
 800c9e2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c9e6:	4924      	ldr	r1, [pc, #144]	; (800ca78 <mem_free+0x114>)
 800c9e8:	481e      	ldr	r0, [pc, #120]	; (800ca64 <mem_free+0x100>)
 800c9ea:	f00a fd81 	bl	80174f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c9ee:	4821      	ldr	r0, [pc, #132]	; (800ca74 <mem_free+0x110>)
 800c9f0:	f00a fb3d 	bl	801706e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9f4:	f00a fb68 	bl	80170c8 <sys_arch_protect>
 800c9f8:	6178      	str	r0, [r7, #20]
 800c9fa:	6978      	ldr	r0, [r7, #20]
 800c9fc:	f00a fb72 	bl	80170e4 <sys_arch_unprotect>
    return;
 800ca00:	e029      	b.n	800ca56 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca02:	69f8      	ldr	r0, [r7, #28]
 800ca04:	f7ff ff72 	bl	800c8ec <mem_link_valid>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d110      	bne.n	800ca30 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca0e:	4b13      	ldr	r3, [pc, #76]	; (800ca5c <mem_free+0xf8>)
 800ca10:	f240 2295 	movw	r2, #661	; 0x295
 800ca14:	4919      	ldr	r1, [pc, #100]	; (800ca7c <mem_free+0x118>)
 800ca16:	4813      	ldr	r0, [pc, #76]	; (800ca64 <mem_free+0x100>)
 800ca18:	f00a fd6a 	bl	80174f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca1c:	4815      	ldr	r0, [pc, #84]	; (800ca74 <mem_free+0x110>)
 800ca1e:	f00a fb26 	bl	801706e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca22:	f00a fb51 	bl	80170c8 <sys_arch_protect>
 800ca26:	61b8      	str	r0, [r7, #24]
 800ca28:	69b8      	ldr	r0, [r7, #24]
 800ca2a:	f00a fb5b 	bl	80170e4 <sys_arch_unprotect>
    return;
 800ca2e:	e012      	b.n	800ca56 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2200      	movs	r2, #0
 800ca34:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca36:	4b12      	ldr	r3, [pc, #72]	; (800ca80 <mem_free+0x11c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	69fa      	ldr	r2, [r7, #28]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d202      	bcs.n	800ca46 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca40:	4a0f      	ldr	r2, [pc, #60]	; (800ca80 <mem_free+0x11c>)
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca46:	69f8      	ldr	r0, [r7, #28]
 800ca48:	f7ff fe5c 	bl	800c704 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca4c:	4809      	ldr	r0, [pc, #36]	; (800ca74 <mem_free+0x110>)
 800ca4e:	f00a fb0e 	bl	801706e <sys_mutex_unlock>
 800ca52:	e000      	b.n	800ca56 <mem_free+0xf2>
    return;
 800ca54:	bf00      	nop
}
 800ca56:	3720      	adds	r7, #32
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	0801b0b8 	.word	0x0801b0b8
 800ca60:	0801b1a8 	.word	0x0801b1a8
 800ca64:	0801b100 	.word	0x0801b100
 800ca68:	2000eb38 	.word	0x2000eb38
 800ca6c:	2000eb3c 	.word	0x2000eb3c
 800ca70:	0801b1cc 	.word	0x0801b1cc
 800ca74:	2000eb40 	.word	0x2000eb40
 800ca78:	0801b1e8 	.word	0x0801b1e8
 800ca7c:	0801b210 	.word	0x0801b210
 800ca80:	2000eb44 	.word	0x2000eb44

0800ca84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ca90:	887b      	ldrh	r3, [r7, #2]
 800ca92:	3303      	adds	r3, #3
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ca9c:	8bfb      	ldrh	r3, [r7, #30]
 800ca9e:	2b0b      	cmp	r3, #11
 800caa0:	d801      	bhi.n	800caa6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800caa2:	230c      	movs	r3, #12
 800caa4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800caa6:	8bfb      	ldrh	r3, [r7, #30]
 800caa8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800caac:	d803      	bhi.n	800cab6 <mem_trim+0x32>
 800caae:	8bfa      	ldrh	r2, [r7, #30]
 800cab0:	887b      	ldrh	r3, [r7, #2]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d201      	bcs.n	800caba <mem_trim+0x36>
    return NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e0d8      	b.n	800cc6c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800caba:	4b6e      	ldr	r3, [pc, #440]	; (800cc74 <mem_trim+0x1f0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d304      	bcc.n	800cace <mem_trim+0x4a>
 800cac4:	4b6c      	ldr	r3, [pc, #432]	; (800cc78 <mem_trim+0x1f4>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d306      	bcc.n	800cadc <mem_trim+0x58>
 800cace:	4b6b      	ldr	r3, [pc, #428]	; (800cc7c <mem_trim+0x1f8>)
 800cad0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cad4:	496a      	ldr	r1, [pc, #424]	; (800cc80 <mem_trim+0x1fc>)
 800cad6:	486b      	ldr	r0, [pc, #428]	; (800cc84 <mem_trim+0x200>)
 800cad8:	f00a fd0a 	bl	80174f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cadc:	4b65      	ldr	r3, [pc, #404]	; (800cc74 <mem_trim+0x1f0>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d304      	bcc.n	800caf0 <mem_trim+0x6c>
 800cae6:	4b64      	ldr	r3, [pc, #400]	; (800cc78 <mem_trim+0x1f4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d307      	bcc.n	800cb00 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800caf0:	f00a faea 	bl	80170c8 <sys_arch_protect>
 800caf4:	60b8      	str	r0, [r7, #8]
 800caf6:	68b8      	ldr	r0, [r7, #8]
 800caf8:	f00a faf4 	bl	80170e4 <sys_arch_unprotect>
    return rmem;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	e0b5      	b.n	800cc6c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3b08      	subs	r3, #8
 800cb04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb06:	69b8      	ldr	r0, [r7, #24]
 800cb08:	f7ff fdea 	bl	800c6e0 <mem_to_ptr>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	881a      	ldrh	r2, [r3, #0]
 800cb14:	8afb      	ldrh	r3, [r7, #22]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	3b08      	subs	r3, #8
 800cb1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb1e:	8bfa      	ldrh	r2, [r7, #30]
 800cb20:	8abb      	ldrh	r3, [r7, #20]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d906      	bls.n	800cb34 <mem_trim+0xb0>
 800cb26:	4b55      	ldr	r3, [pc, #340]	; (800cc7c <mem_trim+0x1f8>)
 800cb28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb2c:	4956      	ldr	r1, [pc, #344]	; (800cc88 <mem_trim+0x204>)
 800cb2e:	4855      	ldr	r0, [pc, #340]	; (800cc84 <mem_trim+0x200>)
 800cb30:	f00a fcde 	bl	80174f0 <iprintf>
  if (newsize > size) {
 800cb34:	8bfa      	ldrh	r2, [r7, #30]
 800cb36:	8abb      	ldrh	r3, [r7, #20]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d901      	bls.n	800cb40 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	e095      	b.n	800cc6c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb40:	8bfa      	ldrh	r2, [r7, #30]
 800cb42:	8abb      	ldrh	r3, [r7, #20]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d101      	bne.n	800cb4c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	e08f      	b.n	800cc6c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb4c:	484f      	ldr	r0, [pc, #316]	; (800cc8c <mem_trim+0x208>)
 800cb4e:	f00a fa7f 	bl	8017050 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fdb0 	bl	800c6bc <ptr_to_mem>
 800cb5c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	791b      	ldrb	r3, [r3, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d13f      	bne.n	800cbe6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cb6e:	d106      	bne.n	800cb7e <mem_trim+0xfa>
 800cb70:	4b42      	ldr	r3, [pc, #264]	; (800cc7c <mem_trim+0x1f8>)
 800cb72:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cb76:	4946      	ldr	r1, [pc, #280]	; (800cc90 <mem_trim+0x20c>)
 800cb78:	4842      	ldr	r0, [pc, #264]	; (800cc84 <mem_trim+0x200>)
 800cb7a:	f00a fcb9 	bl	80174f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cb84:	8afa      	ldrh	r2, [r7, #22]
 800cb86:	8bfb      	ldrh	r3, [r7, #30]
 800cb88:	4413      	add	r3, r2
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cb90:	4b40      	ldr	r3, [pc, #256]	; (800cc94 <mem_trim+0x210>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d106      	bne.n	800cba8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cb9a:	89fb      	ldrh	r3, [r7, #14]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff fd8d 	bl	800c6bc <ptr_to_mem>
 800cba2:	4603      	mov	r3, r0
 800cba4:	4a3b      	ldr	r2, [pc, #236]	; (800cc94 <mem_trim+0x210>)
 800cba6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cba8:	89fb      	ldrh	r3, [r7, #14]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fd86 	bl	800c6bc <ptr_to_mem>
 800cbb0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	89ba      	ldrh	r2, [r7, #12]
 800cbbc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	8afa      	ldrh	r2, [r7, #22]
 800cbc2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	89fa      	ldrh	r2, [r7, #14]
 800cbc8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cbd2:	d047      	beq.n	800cc64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff fd6f 	bl	800c6bc <ptr_to_mem>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	89fb      	ldrh	r3, [r7, #14]
 800cbe2:	8053      	strh	r3, [r2, #2]
 800cbe4:	e03e      	b.n	800cc64 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cbe6:	8bfb      	ldrh	r3, [r7, #30]
 800cbe8:	f103 0214 	add.w	r2, r3, #20
 800cbec:	8abb      	ldrh	r3, [r7, #20]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d838      	bhi.n	800cc64 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbf2:	8afa      	ldrh	r2, [r7, #22]
 800cbf4:	8bfb      	ldrh	r3, [r7, #30]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	881b      	ldrh	r3, [r3, #0]
 800cc02:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cc06:	d106      	bne.n	800cc16 <mem_trim+0x192>
 800cc08:	4b1c      	ldr	r3, [pc, #112]	; (800cc7c <mem_trim+0x1f8>)
 800cc0a:	f240 3216 	movw	r2, #790	; 0x316
 800cc0e:	4920      	ldr	r1, [pc, #128]	; (800cc90 <mem_trim+0x20c>)
 800cc10:	481c      	ldr	r0, [pc, #112]	; (800cc84 <mem_trim+0x200>)
 800cc12:	f00a fc6d 	bl	80174f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc16:	89fb      	ldrh	r3, [r7, #14]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff fd4f 	bl	800c6bc <ptr_to_mem>
 800cc1e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc20:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <mem_trim+0x210>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d202      	bcs.n	800cc30 <mem_trim+0x1ac>
      lfree = mem2;
 800cc2a:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <mem_trim+0x210>)
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2200      	movs	r2, #0
 800cc34:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	881a      	ldrh	r2, [r3, #0]
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	8afa      	ldrh	r2, [r7, #22]
 800cc42:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	89fa      	ldrh	r2, [r7, #14]
 800cc48:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cc52:	d007      	beq.n	800cc64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7ff fd2f 	bl	800c6bc <ptr_to_mem>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	89fb      	ldrh	r3, [r7, #14]
 800cc62:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc64:	4809      	ldr	r0, [pc, #36]	; (800cc8c <mem_trim+0x208>)
 800cc66:	f00a fa02 	bl	801706e <sys_mutex_unlock>
  return rmem;
 800cc6a:	687b      	ldr	r3, [r7, #4]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3720      	adds	r7, #32
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	2000eb38 	.word	0x2000eb38
 800cc78:	2000eb3c 	.word	0x2000eb3c
 800cc7c:	0801b0b8 	.word	0x0801b0b8
 800cc80:	0801b244 	.word	0x0801b244
 800cc84:	0801b100 	.word	0x0801b100
 800cc88:	0801b25c 	.word	0x0801b25c
 800cc8c:	2000eb40 	.word	0x2000eb40
 800cc90:	0801b27c 	.word	0x0801b27c
 800cc94:	2000eb44 	.word	0x2000eb44

0800cc98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cca2:	88fb      	ldrh	r3, [r7, #6]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <mem_malloc+0x14>
    return NULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	e0e2      	b.n	800ce72 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ccac:	88fb      	ldrh	r3, [r7, #6]
 800ccae:	3303      	adds	r3, #3
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	f023 0303 	bic.w	r3, r3, #3
 800ccb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ccb8:	8bbb      	ldrh	r3, [r7, #28]
 800ccba:	2b0b      	cmp	r3, #11
 800ccbc:	d801      	bhi.n	800ccc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ccbe:	230c      	movs	r3, #12
 800ccc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ccc2:	8bbb      	ldrh	r3, [r7, #28]
 800ccc4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ccc8:	d803      	bhi.n	800ccd2 <mem_malloc+0x3a>
 800ccca:	8bba      	ldrh	r2, [r7, #28]
 800cccc:	88fb      	ldrh	r3, [r7, #6]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d201      	bcs.n	800ccd6 <mem_malloc+0x3e>
    return NULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	e0cd      	b.n	800ce72 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ccd6:	4869      	ldr	r0, [pc, #420]	; (800ce7c <mem_malloc+0x1e4>)
 800ccd8:	f00a f9ba 	bl	8017050 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ccdc:	4b68      	ldr	r3, [pc, #416]	; (800ce80 <mem_malloc+0x1e8>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7ff fcfd 	bl	800c6e0 <mem_to_ptr>
 800cce6:	4603      	mov	r3, r0
 800cce8:	83fb      	strh	r3, [r7, #30]
 800ccea:	e0b7      	b.n	800ce5c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ccec:	8bfb      	ldrh	r3, [r7, #30]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff fce4 	bl	800c6bc <ptr_to_mem>
 800ccf4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	791b      	ldrb	r3, [r3, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f040 80a7 	bne.w	800ce4e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	461a      	mov	r2, r3
 800cd06:	8bfb      	ldrh	r3, [r7, #30]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	f1a3 0208 	sub.w	r2, r3, #8
 800cd0e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd10:	429a      	cmp	r2, r3
 800cd12:	f0c0 809c 	bcc.w	800ce4e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	881b      	ldrh	r3, [r3, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	8bfb      	ldrh	r3, [r7, #30]
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	f1a3 0208 	sub.w	r2, r3, #8
 800cd24:	8bbb      	ldrh	r3, [r7, #28]
 800cd26:	3314      	adds	r3, #20
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d333      	bcc.n	800cd94 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd2c:	8bfa      	ldrh	r2, [r7, #30]
 800cd2e:	8bbb      	ldrh	r3, [r7, #28]
 800cd30:	4413      	add	r3, r2
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	3308      	adds	r3, #8
 800cd36:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd38:	8a7b      	ldrh	r3, [r7, #18]
 800cd3a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cd3e:	d106      	bne.n	800cd4e <mem_malloc+0xb6>
 800cd40:	4b50      	ldr	r3, [pc, #320]	; (800ce84 <mem_malloc+0x1ec>)
 800cd42:	f240 3287 	movw	r2, #903	; 0x387
 800cd46:	4950      	ldr	r1, [pc, #320]	; (800ce88 <mem_malloc+0x1f0>)
 800cd48:	4850      	ldr	r0, [pc, #320]	; (800ce8c <mem_malloc+0x1f4>)
 800cd4a:	f00a fbd1 	bl	80174f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cd4e:	8a7b      	ldrh	r3, [r7, #18]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff fcb3 	bl	800c6bc <ptr_to_mem>
 800cd56:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	881a      	ldrh	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	8bfa      	ldrh	r2, [r7, #30]
 800cd6a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	8a7a      	ldrh	r2, [r7, #18]
 800cd70:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2201      	movs	r2, #1
 800cd76:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cd80:	d00b      	beq.n	800cd9a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff fc98 	bl	800c6bc <ptr_to_mem>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	8a7b      	ldrh	r3, [r7, #18]
 800cd90:	8053      	strh	r3, [r2, #2]
 800cd92:	e002      	b.n	800cd9a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2201      	movs	r2, #1
 800cd98:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cd9a:	4b39      	ldr	r3, [pc, #228]	; (800ce80 <mem_malloc+0x1e8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d127      	bne.n	800cdf4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cda4:	4b36      	ldr	r3, [pc, #216]	; (800ce80 <mem_malloc+0x1e8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cdaa:	e005      	b.n	800cdb8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff fc83 	bl	800c6bc <ptr_to_mem>
 800cdb6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	791b      	ldrb	r3, [r3, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d004      	beq.n	800cdca <mem_malloc+0x132>
 800cdc0:	4b33      	ldr	r3, [pc, #204]	; (800ce90 <mem_malloc+0x1f8>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d1f0      	bne.n	800cdac <mem_malloc+0x114>
          }
          lfree = cur;
 800cdca:	4a2d      	ldr	r2, [pc, #180]	; (800ce80 <mem_malloc+0x1e8>)
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cdd0:	4b2b      	ldr	r3, [pc, #172]	; (800ce80 <mem_malloc+0x1e8>)
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	4b2e      	ldr	r3, [pc, #184]	; (800ce90 <mem_malloc+0x1f8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d00b      	beq.n	800cdf4 <mem_malloc+0x15c>
 800cddc:	4b28      	ldr	r3, [pc, #160]	; (800ce80 <mem_malloc+0x1e8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	791b      	ldrb	r3, [r3, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d006      	beq.n	800cdf4 <mem_malloc+0x15c>
 800cde6:	4b27      	ldr	r3, [pc, #156]	; (800ce84 <mem_malloc+0x1ec>)
 800cde8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cdec:	4929      	ldr	r1, [pc, #164]	; (800ce94 <mem_malloc+0x1fc>)
 800cdee:	4827      	ldr	r0, [pc, #156]	; (800ce8c <mem_malloc+0x1f4>)
 800cdf0:	f00a fb7e 	bl	80174f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cdf4:	4821      	ldr	r0, [pc, #132]	; (800ce7c <mem_malloc+0x1e4>)
 800cdf6:	f00a f93a 	bl	801706e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cdfa:	8bba      	ldrh	r2, [r7, #28]
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	4413      	add	r3, r2
 800ce00:	3308      	adds	r3, #8
 800ce02:	4a23      	ldr	r2, [pc, #140]	; (800ce90 <mem_malloc+0x1f8>)
 800ce04:	6812      	ldr	r2, [r2, #0]
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d906      	bls.n	800ce18 <mem_malloc+0x180>
 800ce0a:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <mem_malloc+0x1ec>)
 800ce0c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce10:	4921      	ldr	r1, [pc, #132]	; (800ce98 <mem_malloc+0x200>)
 800ce12:	481e      	ldr	r0, [pc, #120]	; (800ce8c <mem_malloc+0x1f4>)
 800ce14:	f00a fb6c 	bl	80174f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f003 0303 	and.w	r3, r3, #3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d006      	beq.n	800ce30 <mem_malloc+0x198>
 800ce22:	4b18      	ldr	r3, [pc, #96]	; (800ce84 <mem_malloc+0x1ec>)
 800ce24:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce28:	491c      	ldr	r1, [pc, #112]	; (800ce9c <mem_malloc+0x204>)
 800ce2a:	4818      	ldr	r0, [pc, #96]	; (800ce8c <mem_malloc+0x1f4>)
 800ce2c:	f00a fb60 	bl	80174f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f003 0303 	and.w	r3, r3, #3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d006      	beq.n	800ce48 <mem_malloc+0x1b0>
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <mem_malloc+0x1ec>)
 800ce3c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ce40:	4917      	ldr	r1, [pc, #92]	; (800cea0 <mem_malloc+0x208>)
 800ce42:	4812      	ldr	r0, [pc, #72]	; (800ce8c <mem_malloc+0x1f4>)
 800ce44:	f00a fb54 	bl	80174f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	e011      	b.n	800ce72 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ce4e:	8bfb      	ldrh	r3, [r7, #30]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fc33 	bl	800c6bc <ptr_to_mem>
 800ce56:	4603      	mov	r3, r0
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce5c:	8bfa      	ldrh	r2, [r7, #30]
 800ce5e:	8bbb      	ldrh	r3, [r7, #28]
 800ce60:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800ce64:	429a      	cmp	r2, r3
 800ce66:	f4ff af41 	bcc.w	800ccec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ce6a:	4804      	ldr	r0, [pc, #16]	; (800ce7c <mem_malloc+0x1e4>)
 800ce6c:	f00a f8ff 	bl	801706e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3720      	adds	r7, #32
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	2000eb40 	.word	0x2000eb40
 800ce80:	2000eb44 	.word	0x2000eb44
 800ce84:	0801b0b8 	.word	0x0801b0b8
 800ce88:	0801b27c 	.word	0x0801b27c
 800ce8c:	0801b100 	.word	0x0801b100
 800ce90:	2000eb3c 	.word	0x2000eb3c
 800ce94:	0801b290 	.word	0x0801b290
 800ce98:	0801b2ac 	.word	0x0801b2ac
 800ce9c:	0801b2dc 	.word	0x0801b2dc
 800cea0:	0801b30c 	.word	0x0801b30c

0800cea4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	3303      	adds	r3, #3
 800ceba:	f023 0303 	bic.w	r3, r3, #3
 800cebe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e011      	b.n	800ceea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	461a      	mov	r2, r3
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	4413      	add	r3, r2
 800cee2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3301      	adds	r3, #1
 800cee8:	60fb      	str	r3, [r7, #12]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	885b      	ldrh	r3, [r3, #2]
 800ceee:	461a      	mov	r2, r3
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	4293      	cmp	r3, r2
 800cef4:	dbe7      	blt.n	800cec6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cef6:	bf00      	nop
 800cef8:	bf00      	nop
 800cefa:	3714      	adds	r7, #20
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	80fb      	strh	r3, [r7, #6]
 800cf0e:	e009      	b.n	800cf24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf10:	88fb      	ldrh	r3, [r7, #6]
 800cf12:	4a08      	ldr	r2, [pc, #32]	; (800cf34 <memp_init+0x30>)
 800cf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff ffc3 	bl	800cea4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf1e:	88fb      	ldrh	r3, [r7, #6]
 800cf20:	3301      	adds	r3, #1
 800cf22:	80fb      	strh	r3, [r7, #6]
 800cf24:	88fb      	ldrh	r3, [r7, #6]
 800cf26:	2b0b      	cmp	r3, #11
 800cf28:	d9f2      	bls.n	800cf10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0801d860 	.word	0x0801d860

0800cf38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf40:	f00a f8c2 	bl	80170c8 <sys_arch_protect>
 800cf44:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d015      	beq.n	800cf80 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	6812      	ldr	r2, [r2, #0]
 800cf5c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f003 0303 	and.w	r3, r3, #3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d006      	beq.n	800cf76 <do_memp_malloc_pool+0x3e>
 800cf68:	4b09      	ldr	r3, [pc, #36]	; (800cf90 <do_memp_malloc_pool+0x58>)
 800cf6a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cf6e:	4909      	ldr	r1, [pc, #36]	; (800cf94 <do_memp_malloc_pool+0x5c>)
 800cf70:	4809      	ldr	r0, [pc, #36]	; (800cf98 <do_memp_malloc_pool+0x60>)
 800cf72:	f00a fabd 	bl	80174f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f00a f8b4 	bl	80170e4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	e003      	b.n	800cf88 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f00a f8af 	bl	80170e4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	0801b330 	.word	0x0801b330
 800cf94:	0801b360 	.word	0x0801b360
 800cf98:	0801b384 	.word	0x0801b384

0800cf9c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <memp_malloc_pool+0x1c>
 800cfaa:	4b0a      	ldr	r3, [pc, #40]	; (800cfd4 <memp_malloc_pool+0x38>)
 800cfac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cfb0:	4909      	ldr	r1, [pc, #36]	; (800cfd8 <memp_malloc_pool+0x3c>)
 800cfb2:	480a      	ldr	r0, [pc, #40]	; (800cfdc <memp_malloc_pool+0x40>)
 800cfb4:	f00a fa9c 	bl	80174f0 <iprintf>
  if (desc == NULL) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <memp_malloc_pool+0x26>
    return NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e003      	b.n	800cfca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff ffb8 	bl	800cf38 <do_memp_malloc_pool>
 800cfc8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	0801b330 	.word	0x0801b330
 800cfd8:	0801b3ac 	.word	0x0801b3ac
 800cfdc:	0801b384 	.word	0x0801b384

0800cfe0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	2b0b      	cmp	r3, #11
 800cfee:	d908      	bls.n	800d002 <memp_malloc+0x22>
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <memp_malloc+0x3c>)
 800cff2:	f240 1257 	movw	r2, #343	; 0x157
 800cff6:	490a      	ldr	r1, [pc, #40]	; (800d020 <memp_malloc+0x40>)
 800cff8:	480a      	ldr	r0, [pc, #40]	; (800d024 <memp_malloc+0x44>)
 800cffa:	f00a fa79 	bl	80174f0 <iprintf>
 800cffe:	2300      	movs	r3, #0
 800d000:	e008      	b.n	800d014 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	4a08      	ldr	r2, [pc, #32]	; (800d028 <memp_malloc+0x48>)
 800d006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff ff94 	bl	800cf38 <do_memp_malloc_pool>
 800d010:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d012:	68fb      	ldr	r3, [r7, #12]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	0801b330 	.word	0x0801b330
 800d020:	0801b3c0 	.word	0x0801b3c0
 800d024:	0801b384 	.word	0x0801b384
 800d028:	0801d860 	.word	0x0801d860

0800d02c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	f003 0303 	and.w	r3, r3, #3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <do_memp_free_pool+0x22>
 800d040:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <do_memp_free_pool+0x4c>)
 800d042:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d046:	490d      	ldr	r1, [pc, #52]	; (800d07c <do_memp_free_pool+0x50>)
 800d048:	480d      	ldr	r0, [pc, #52]	; (800d080 <do_memp_free_pool+0x54>)
 800d04a:	f00a fa51 	bl	80174f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d052:	f00a f839 	bl	80170c8 <sys_arch_protect>
 800d056:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d06a:	68b8      	ldr	r0, [r7, #8]
 800d06c:	f00a f83a 	bl	80170e4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	0801b330 	.word	0x0801b330
 800d07c:	0801b3e0 	.word	0x0801b3e0
 800d080:	0801b384 	.word	0x0801b384

0800d084 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <memp_free_pool+0x1e>
 800d094:	4b0a      	ldr	r3, [pc, #40]	; (800d0c0 <memp_free_pool+0x3c>)
 800d096:	f240 1295 	movw	r2, #405	; 0x195
 800d09a:	490a      	ldr	r1, [pc, #40]	; (800d0c4 <memp_free_pool+0x40>)
 800d09c:	480a      	ldr	r0, [pc, #40]	; (800d0c8 <memp_free_pool+0x44>)
 800d09e:	f00a fa27 	bl	80174f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d007      	beq.n	800d0b8 <memp_free_pool+0x34>
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d004      	beq.n	800d0b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff ffbb 	bl	800d02c <do_memp_free_pool>
 800d0b6:	e000      	b.n	800d0ba <memp_free_pool+0x36>
    return;
 800d0b8:	bf00      	nop
}
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	0801b330 	.word	0x0801b330
 800d0c4:	0801b3ac 	.word	0x0801b3ac
 800d0c8:	0801b384 	.word	0x0801b384

0800d0cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	6039      	str	r1, [r7, #0]
 800d0d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	2b0b      	cmp	r3, #11
 800d0dc:	d907      	bls.n	800d0ee <memp_free+0x22>
 800d0de:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <memp_free+0x44>)
 800d0e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d0e4:	490b      	ldr	r1, [pc, #44]	; (800d114 <memp_free+0x48>)
 800d0e6:	480c      	ldr	r0, [pc, #48]	; (800d118 <memp_free+0x4c>)
 800d0e8:	f00a fa02 	bl	80174f0 <iprintf>
 800d0ec:	e00c      	b.n	800d108 <memp_free+0x3c>

  if (mem == NULL) {
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d008      	beq.n	800d106 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	4a09      	ldr	r2, [pc, #36]	; (800d11c <memp_free+0x50>)
 800d0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff ff94 	bl	800d02c <do_memp_free_pool>
 800d104:	e000      	b.n	800d108 <memp_free+0x3c>
    return;
 800d106:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	0801b330 	.word	0x0801b330
 800d114:	0801b400 	.word	0x0801b400
 800d118:	0801b384 	.word	0x0801b384
 800d11c:	0801d860 	.word	0x0801d860

0800d120 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d120:	b480      	push	{r7}
 800d122:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d124:	bf00      	nop
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
	...

0800d130 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d108      	bne.n	800d156 <netif_add+0x26>
 800d144:	4b57      	ldr	r3, [pc, #348]	; (800d2a4 <netif_add+0x174>)
 800d146:	f240 1227 	movw	r2, #295	; 0x127
 800d14a:	4957      	ldr	r1, [pc, #348]	; (800d2a8 <netif_add+0x178>)
 800d14c:	4857      	ldr	r0, [pc, #348]	; (800d2ac <netif_add+0x17c>)
 800d14e:	f00a f9cf 	bl	80174f0 <iprintf>
 800d152:	2300      	movs	r3, #0
 800d154:	e0a2      	b.n	800d29c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d108      	bne.n	800d16e <netif_add+0x3e>
 800d15c:	4b51      	ldr	r3, [pc, #324]	; (800d2a4 <netif_add+0x174>)
 800d15e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d162:	4953      	ldr	r1, [pc, #332]	; (800d2b0 <netif_add+0x180>)
 800d164:	4851      	ldr	r0, [pc, #324]	; (800d2ac <netif_add+0x17c>)
 800d166:	f00a f9c3 	bl	80174f0 <iprintf>
 800d16a:	2300      	movs	r3, #0
 800d16c:	e096      	b.n	800d29c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d174:	4b4f      	ldr	r3, [pc, #316]	; (800d2b4 <netif_add+0x184>)
 800d176:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d17e:	4b4d      	ldr	r3, [pc, #308]	; (800d2b4 <netif_add+0x184>)
 800d180:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d188:	4b4a      	ldr	r3, [pc, #296]	; (800d2b4 <netif_add+0x184>)
 800d18a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	4a45      	ldr	r2, [pc, #276]	; (800d2b8 <netif_add+0x188>)
 800d1a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a3a      	ldr	r2, [r7, #32]
 800d1bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d1be:	4b3f      	ldr	r3, [pc, #252]	; (800d2bc <netif_add+0x18c>)
 800d1c0:	781a      	ldrb	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f000 f90f 	bl	800d3f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	4798      	blx	r3
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <netif_add+0xba>
    return NULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e058      	b.n	800d29c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f0:	2bff      	cmp	r3, #255	; 0xff
 800d1f2:	d103      	bne.n	800d1fc <netif_add+0xcc>
        netif->num = 0;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d200:	4b2f      	ldr	r3, [pc, #188]	; (800d2c0 <netif_add+0x190>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	e02b      	b.n	800d260 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d106      	bne.n	800d21e <netif_add+0xee>
 800d210:	4b24      	ldr	r3, [pc, #144]	; (800d2a4 <netif_add+0x174>)
 800d212:	f240 128b 	movw	r2, #395	; 0x18b
 800d216:	492b      	ldr	r1, [pc, #172]	; (800d2c4 <netif_add+0x194>)
 800d218:	4824      	ldr	r0, [pc, #144]	; (800d2ac <netif_add+0x17c>)
 800d21a:	f00a f969 	bl	80174f0 <iprintf>
        num_netifs++;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	3301      	adds	r3, #1
 800d222:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	2bff      	cmp	r3, #255	; 0xff
 800d228:	dd06      	ble.n	800d238 <netif_add+0x108>
 800d22a:	4b1e      	ldr	r3, [pc, #120]	; (800d2a4 <netif_add+0x174>)
 800d22c:	f240 128d 	movw	r2, #397	; 0x18d
 800d230:	4925      	ldr	r1, [pc, #148]	; (800d2c8 <netif_add+0x198>)
 800d232:	481e      	ldr	r0, [pc, #120]	; (800d2ac <netif_add+0x17c>)
 800d234:	f00a f95c 	bl	80174f0 <iprintf>
        if (netif2->num == netif->num) {
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d244:	429a      	cmp	r2, r3
 800d246:	d108      	bne.n	800d25a <netif_add+0x12a>
          netif->num++;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d24e:	3301      	adds	r3, #1
 800d250:	b2da      	uxtb	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d258:	e005      	b.n	800d266 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	617b      	str	r3, [r7, #20]
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1d0      	bne.n	800d208 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1be      	bne.n	800d1ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d272:	2bfe      	cmp	r3, #254	; 0xfe
 800d274:	d103      	bne.n	800d27e <netif_add+0x14e>
    netif_num = 0;
 800d276:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <netif_add+0x18c>)
 800d278:	2200      	movs	r2, #0
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	e006      	b.n	800d28c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d284:	3301      	adds	r3, #1
 800d286:	b2da      	uxtb	r2, r3
 800d288:	4b0c      	ldr	r3, [pc, #48]	; (800d2bc <netif_add+0x18c>)
 800d28a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d28c:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <netif_add+0x190>)
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d294:	4a0a      	ldr	r2, [pc, #40]	; (800d2c0 <netif_add+0x190>)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d29a:	68fb      	ldr	r3, [r7, #12]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	0801b41c 	.word	0x0801b41c
 800d2a8:	0801b4b0 	.word	0x0801b4b0
 800d2ac:	0801b46c 	.word	0x0801b46c
 800d2b0:	0801b4cc 	.word	0x0801b4cc
 800d2b4:	0801d8d0 	.word	0x0801d8d0
 800d2b8:	0800d6d3 	.word	0x0800d6d3
 800d2bc:	20011b94 	.word	0x20011b94
 800d2c0:	20011b8c 	.word	0x20011b8c
 800d2c4:	0801b4f0 	.word	0x0801b4f0
 800d2c8:	0801b504 	.word	0x0801b504

0800d2cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f002 fe99 	bl	8010010 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d2de:	bf00      	nop
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <netif_do_set_ipaddr+0x20>
 800d2fa:	4b1d      	ldr	r3, [pc, #116]	; (800d370 <netif_do_set_ipaddr+0x88>)
 800d2fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d300:	491c      	ldr	r1, [pc, #112]	; (800d374 <netif_do_set_ipaddr+0x8c>)
 800d302:	481d      	ldr	r0, [pc, #116]	; (800d378 <netif_do_set_ipaddr+0x90>)
 800d304:	f00a f8f4 	bl	80174f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <netif_do_set_ipaddr+0x34>
 800d30e:	4b18      	ldr	r3, [pc, #96]	; (800d370 <netif_do_set_ipaddr+0x88>)
 800d310:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d314:	4917      	ldr	r1, [pc, #92]	; (800d374 <netif_do_set_ipaddr+0x8c>)
 800d316:	4818      	ldr	r0, [pc, #96]	; (800d378 <netif_do_set_ipaddr+0x90>)
 800d318:	f00a f8ea 	bl	80174f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3304      	adds	r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	429a      	cmp	r2, r3
 800d328:	d01c      	beq.n	800d364 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3304      	adds	r3, #4
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d33a:	f107 0314 	add.w	r3, r7, #20
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ffc3 	bl	800d2cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <netif_do_set_ipaddr+0x6a>
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	e000      	b.n	800d354 <netif_do_set_ipaddr+0x6c>
 800d352:	2300      	movs	r3, #0
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d358:	2101      	movs	r1, #1
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 f8d2 	bl	800d504 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	0801b41c 	.word	0x0801b41c
 800d374:	0801b534 	.word	0x0801b534
 800d378:	0801b46c 	.word	0x0801b46c

0800d37c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3308      	adds	r3, #8
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	429a      	cmp	r2, r3
 800d394:	d00a      	beq.n	800d3ac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <netif_do_set_netmask+0x26>
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	e000      	b.n	800d3a4 <netif_do_set_netmask+0x28>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b085      	sub	sp, #20
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	330c      	adds	r3, #12
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d00a      	beq.n	800d3ea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <netif_do_set_gw+0x26>
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	e000      	b.n	800d3e2 <netif_do_set_gw+0x28>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e000      	b.n	800d3ec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d406:	2300      	movs	r3, #0
 800d408:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d414:	4b1c      	ldr	r3, [pc, #112]	; (800d488 <netif_set_addr+0x90>)
 800d416:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d41e:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <netif_set_addr+0x90>)
 800d420:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d428:	4b17      	ldr	r3, [pc, #92]	; (800d488 <netif_set_addr+0x90>)
 800d42a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <netif_set_addr+0x42>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <netif_set_addr+0x46>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e000      	b.n	800d440 <netif_set_addr+0x48>
 800d43e:	2300      	movs	r3, #0
 800d440:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d448:	f107 0310 	add.w	r3, r7, #16
 800d44c:	461a      	mov	r2, r3
 800d44e:	68b9      	ldr	r1, [r7, #8]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff ff49 	bl	800d2e8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d456:	69fa      	ldr	r2, [r7, #28]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff ff8e 	bl	800d37c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d460:	69ba      	ldr	r2, [r7, #24]
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7ff ffa8 	bl	800d3ba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d106      	bne.n	800d47e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d470:	f107 0310 	add.w	r3, r7, #16
 800d474:	461a      	mov	r2, r3
 800d476:	68b9      	ldr	r1, [r7, #8]
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff ff35 	bl	800d2e8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d47e:	bf00      	nop
 800d480:	3720      	adds	r7, #32
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	0801d8d0 	.word	0x0801d8d0

0800d48c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d494:	4a04      	ldr	r2, [pc, #16]	; (800d4a8 <netif_set_default+0x1c>)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d49a:	bf00      	nop
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	20011b90 	.word	0x20011b90

0800d4ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d107      	bne.n	800d4ca <netif_set_up+0x1e>
 800d4ba:	4b0f      	ldr	r3, [pc, #60]	; (800d4f8 <netif_set_up+0x4c>)
 800d4bc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d4c0:	490e      	ldr	r1, [pc, #56]	; (800d4fc <netif_set_up+0x50>)
 800d4c2:	480f      	ldr	r0, [pc, #60]	; (800d500 <netif_set_up+0x54>)
 800d4c4:	f00a f814 	bl	80174f0 <iprintf>
 800d4c8:	e013      	b.n	800d4f2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10c      	bne.n	800d4f2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4de:	f043 0301 	orr.w	r3, r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d4ea:	2103      	movs	r1, #3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f809 	bl	800d504 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	0801b41c 	.word	0x0801b41c
 800d4fc:	0801b5a4 	.word	0x0801b5a4
 800d500:	0801b46c 	.word	0x0801b46c

0800d504 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d106      	bne.n	800d524 <netif_issue_reports+0x20>
 800d516:	4b18      	ldr	r3, [pc, #96]	; (800d578 <netif_issue_reports+0x74>)
 800d518:	f240 326d 	movw	r2, #877	; 0x36d
 800d51c:	4917      	ldr	r1, [pc, #92]	; (800d57c <netif_issue_reports+0x78>)
 800d51e:	4818      	ldr	r0, [pc, #96]	; (800d580 <netif_issue_reports+0x7c>)
 800d520:	f009 ffe6 	bl	80174f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d52a:	f003 0304 	and.w	r3, r3, #4
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d01e      	beq.n	800d570 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d538:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d017      	beq.n	800d570 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d013      	beq.n	800d572 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3304      	adds	r3, #4
 800d54e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00e      	beq.n	800d572 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d55a:	f003 0308 	and.w	r3, r3, #8
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d007      	beq.n	800d572 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3304      	adds	r3, #4
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f008 f893 	bl	8015694 <etharp_request>
 800d56e:	e000      	b.n	800d572 <netif_issue_reports+0x6e>
    return;
 800d570:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	0801b41c 	.word	0x0801b41c
 800d57c:	0801b5c0 	.word	0x0801b5c0
 800d580:	0801b46c 	.word	0x0801b46c

0800d584 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d107      	bne.n	800d5a2 <netif_set_down+0x1e>
 800d592:	4b12      	ldr	r3, [pc, #72]	; (800d5dc <netif_set_down+0x58>)
 800d594:	f240 329b 	movw	r2, #923	; 0x39b
 800d598:	4911      	ldr	r1, [pc, #68]	; (800d5e0 <netif_set_down+0x5c>)
 800d59a:	4812      	ldr	r0, [pc, #72]	; (800d5e4 <netif_set_down+0x60>)
 800d59c:	f009 ffa8 	bl	80174f0 <iprintf>
 800d5a0:	e019      	b.n	800d5d6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5a8:	f003 0301 	and.w	r3, r3, #1
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d012      	beq.n	800d5d6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5b6:	f023 0301 	bic.w	r3, r3, #1
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5c8:	f003 0308 	and.w	r3, r3, #8
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f007 fc1d 	bl	8014e10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	0801b41c 	.word	0x0801b41c
 800d5e0:	0801b5e4 	.word	0x0801b5e4
 800d5e4:	0801b46c 	.word	0x0801b46c

0800d5e8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d107      	bne.n	800d606 <netif_set_link_up+0x1e>
 800d5f6:	4b13      	ldr	r3, [pc, #76]	; (800d644 <netif_set_link_up+0x5c>)
 800d5f8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d5fc:	4912      	ldr	r1, [pc, #72]	; (800d648 <netif_set_link_up+0x60>)
 800d5fe:	4813      	ldr	r0, [pc, #76]	; (800d64c <netif_set_link_up+0x64>)
 800d600:	f009 ff76 	bl	80174f0 <iprintf>
 800d604:	e01b      	b.n	800d63e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d60c:	f003 0304 	and.w	r3, r3, #4
 800d610:	2b00      	cmp	r3, #0
 800d612:	d114      	bne.n	800d63e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d61a:	f043 0304 	orr.w	r3, r3, #4
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d626:	2103      	movs	r1, #3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7ff ff6b 	bl	800d504 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <netif_set_link_up+0x56>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	0801b41c 	.word	0x0801b41c
 800d648:	0801b604 	.word	0x0801b604
 800d64c:	0801b46c 	.word	0x0801b46c

0800d650 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d107      	bne.n	800d66e <netif_set_link_down+0x1e>
 800d65e:	4b11      	ldr	r3, [pc, #68]	; (800d6a4 <netif_set_link_down+0x54>)
 800d660:	f240 4206 	movw	r2, #1030	; 0x406
 800d664:	4910      	ldr	r1, [pc, #64]	; (800d6a8 <netif_set_link_down+0x58>)
 800d666:	4811      	ldr	r0, [pc, #68]	; (800d6ac <netif_set_link_down+0x5c>)
 800d668:	f009 ff42 	bl	80174f0 <iprintf>
 800d66c:	e017      	b.n	800d69e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d010      	beq.n	800d69e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d682:	f023 0304 	bic.w	r3, r3, #4
 800d686:	b2da      	uxtb	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <netif_set_link_down+0x4e>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	0801b41c 	.word	0x0801b41c
 800d6a8:	0801b628 	.word	0x0801b628
 800d6ac:	0801b46c 	.word	0x0801b46c

0800d6b0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	61da      	str	r2, [r3, #28]
  }
}
 800d6c6:	bf00      	nop
 800d6c8:	370c      	adds	r7, #12
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b085      	sub	sp, #20
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	60b9      	str	r1, [r7, #8]
 800d6dc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d6de:	f06f 030b 	mvn.w	r3, #11
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
	...

0800d6f0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d013      	beq.n	800d728 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d700:	4b0d      	ldr	r3, [pc, #52]	; (800d738 <netif_get_by_index+0x48>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	60fb      	str	r3, [r7, #12]
 800d706:	e00c      	b.n	800d722 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d70e:	3301      	adds	r3, #1
 800d710:	b2db      	uxtb	r3, r3
 800d712:	79fa      	ldrb	r2, [r7, #7]
 800d714:	429a      	cmp	r2, r3
 800d716:	d101      	bne.n	800d71c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	e006      	b.n	800d72a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1ef      	bne.n	800d708 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	20011b8c 	.word	0x20011b8c

0800d73c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d742:	f009 fcc1 	bl	80170c8 <sys_arch_protect>
 800d746:	6038      	str	r0, [r7, #0]
 800d748:	4b0d      	ldr	r3, [pc, #52]	; (800d780 <pbuf_free_ooseq+0x44>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	701a      	strb	r2, [r3, #0]
 800d74e:	6838      	ldr	r0, [r7, #0]
 800d750:	f009 fcc8 	bl	80170e4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d754:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <pbuf_free_ooseq+0x48>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	607b      	str	r3, [r7, #4]
 800d75a:	e00a      	b.n	800d772 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d760:	2b00      	cmp	r3, #0
 800d762:	d003      	beq.n	800d76c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f002 fc91 	bl	801008c <tcp_free_ooseq>
      return;
 800d76a:	e005      	b.n	800d778 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1f1      	bne.n	800d75c <pbuf_free_ooseq+0x20>
    }
  }
}
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20011b95 	.word	0x20011b95
 800d784:	20011ba4 	.word	0x20011ba4

0800d788 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d790:	f7ff ffd4 	bl	800d73c <pbuf_free_ooseq>
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d7a2:	f009 fc91 	bl	80170c8 <sys_arch_protect>
 800d7a6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d7a8:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <pbuf_pool_is_empty+0x4c>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d7ae:	4b0e      	ldr	r3, [pc, #56]	; (800d7e8 <pbuf_pool_is_empty+0x4c>)
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f009 fc95 	bl	80170e4 <sys_arch_unprotect>

  if (!queued) {
 800d7ba:	78fb      	ldrb	r3, [r7, #3]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10f      	bne.n	800d7e0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	480a      	ldr	r0, [pc, #40]	; (800d7ec <pbuf_pool_is_empty+0x50>)
 800d7c4:	f7fe fd7c 	bl	800c2c0 <tcpip_try_callback>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d008      	beq.n	800d7e0 <pbuf_pool_is_empty+0x44>
 800d7ce:	f009 fc7b 	bl	80170c8 <sys_arch_protect>
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <pbuf_pool_is_empty+0x4c>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f009 fc82 	bl	80170e4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	20011b95 	.word	0x20011b95
 800d7ec:	0800d789 	.word	0x0800d789

0800d7f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	460b      	mov	r3, r1
 800d800:	80fb      	strh	r3, [r7, #6]
 800d802:	4613      	mov	r3, r2
 800d804:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	88fa      	ldrh	r2, [r7, #6]
 800d816:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	88ba      	ldrh	r2, [r7, #4]
 800d81c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d81e:	8b3b      	ldrh	r3, [r7, #24]
 800d820:	b2da      	uxtb	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	7f3a      	ldrb	r2, [r7, #28]
 800d82a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2201      	movs	r2, #1
 800d830:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	73da      	strb	r2, [r3, #15]
}
 800d838:	bf00      	nop
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	; 0x30
 800d848:	af02      	add	r7, sp, #8
 800d84a:	4603      	mov	r3, r0
 800d84c:	71fb      	strb	r3, [r7, #7]
 800d84e:	460b      	mov	r3, r1
 800d850:	80bb      	strh	r3, [r7, #4]
 800d852:	4613      	mov	r3, r2
 800d854:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d856:	79fb      	ldrb	r3, [r7, #7]
 800d858:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d85a:	887b      	ldrh	r3, [r7, #2]
 800d85c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d860:	d07f      	beq.n	800d962 <pbuf_alloc+0x11e>
 800d862:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d866:	f300 80c8 	bgt.w	800d9fa <pbuf_alloc+0x1b6>
 800d86a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d86e:	d010      	beq.n	800d892 <pbuf_alloc+0x4e>
 800d870:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d874:	f300 80c1 	bgt.w	800d9fa <pbuf_alloc+0x1b6>
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d002      	beq.n	800d882 <pbuf_alloc+0x3e>
 800d87c:	2b41      	cmp	r3, #65	; 0x41
 800d87e:	f040 80bc 	bne.w	800d9fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d882:	887a      	ldrh	r2, [r7, #2]
 800d884:	88bb      	ldrh	r3, [r7, #4]
 800d886:	4619      	mov	r1, r3
 800d888:	2000      	movs	r0, #0
 800d88a:	f000 f8d1 	bl	800da30 <pbuf_alloc_reference>
 800d88e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d890:	e0bd      	b.n	800da0e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d892:	2300      	movs	r3, #0
 800d894:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d89a:	88bb      	ldrh	r3, [r7, #4]
 800d89c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d89e:	200b      	movs	r0, #11
 800d8a0:	f7ff fb9e 	bl	800cfe0 <memp_malloc>
 800d8a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d109      	bne.n	800d8c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d8ac:	f7ff ff76 	bl	800d79c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <pbuf_alloc+0x78>
            pbuf_free(p);
 800d8b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8b8:	f000 faa8 	bl	800de0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	e0a7      	b.n	800da10 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d8c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8c2:	3303      	adds	r3, #3
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	f023 0303 	bic.w	r3, r3, #3
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	8b7a      	ldrh	r2, [r7, #26]
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	bf28      	it	cs
 800d8d8:	4613      	movcs	r3, r2
 800d8da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d8dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8de:	3310      	adds	r3, #16
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	3303      	adds	r3, #3
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	89f9      	ldrh	r1, [r7, #14]
 800d8ee:	8b7a      	ldrh	r2, [r7, #26]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	9301      	str	r3, [sp, #4]
 800d8f4:	887b      	ldrh	r3, [r7, #2]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4601      	mov	r1, r0
 800d8fc:	6938      	ldr	r0, [r7, #16]
 800d8fe:	f7ff ff77 	bl	800d7f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	f003 0303 	and.w	r3, r3, #3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d006      	beq.n	800d91c <pbuf_alloc+0xd8>
 800d90e:	4b42      	ldr	r3, [pc, #264]	; (800da18 <pbuf_alloc+0x1d4>)
 800d910:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d914:	4941      	ldr	r1, [pc, #260]	; (800da1c <pbuf_alloc+0x1d8>)
 800d916:	4842      	ldr	r0, [pc, #264]	; (800da20 <pbuf_alloc+0x1dc>)
 800d918:	f009 fdea 	bl	80174f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d91c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d91e:	3303      	adds	r3, #3
 800d920:	f023 0303 	bic.w	r3, r3, #3
 800d924:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d928:	d106      	bne.n	800d938 <pbuf_alloc+0xf4>
 800d92a:	4b3b      	ldr	r3, [pc, #236]	; (800da18 <pbuf_alloc+0x1d4>)
 800d92c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d930:	493c      	ldr	r1, [pc, #240]	; (800da24 <pbuf_alloc+0x1e0>)
 800d932:	483b      	ldr	r0, [pc, #236]	; (800da20 <pbuf_alloc+0x1dc>)
 800d934:	f009 fddc 	bl	80174f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d102      	bne.n	800d944 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	627b      	str	r3, [r7, #36]	; 0x24
 800d942:	e002      	b.n	800d94a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d94e:	8b7a      	ldrh	r2, [r7, #26]
 800d950:	89fb      	ldrh	r3, [r7, #14]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d95a:	8b7b      	ldrh	r3, [r7, #26]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d19e      	bne.n	800d89e <pbuf_alloc+0x5a>
      break;
 800d960:	e055      	b.n	800da0e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d964:	3303      	adds	r3, #3
 800d966:	b29b      	uxth	r3, r3
 800d968:	f023 0303 	bic.w	r3, r3, #3
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	88bb      	ldrh	r3, [r7, #4]
 800d970:	3303      	adds	r3, #3
 800d972:	b29b      	uxth	r3, r3
 800d974:	f023 0303 	bic.w	r3, r3, #3
 800d978:	b29b      	uxth	r3, r3
 800d97a:	4413      	add	r3, r2
 800d97c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d97e:	8b3b      	ldrh	r3, [r7, #24]
 800d980:	3310      	adds	r3, #16
 800d982:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d984:	8b3a      	ldrh	r2, [r7, #24]
 800d986:	88bb      	ldrh	r3, [r7, #4]
 800d988:	3303      	adds	r3, #3
 800d98a:	f023 0303 	bic.w	r3, r3, #3
 800d98e:	429a      	cmp	r2, r3
 800d990:	d306      	bcc.n	800d9a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d992:	8afa      	ldrh	r2, [r7, #22]
 800d994:	88bb      	ldrh	r3, [r7, #4]
 800d996:	3303      	adds	r3, #3
 800d998:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d201      	bcs.n	800d9a4 <pbuf_alloc+0x160>
        return NULL;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e035      	b.n	800da10 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d9a4:	8afb      	ldrh	r3, [r7, #22]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff f976 	bl	800cc98 <mem_malloc>
 800d9ac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <pbuf_alloc+0x174>
        return NULL;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e02b      	b.n	800da10 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d9b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9ba:	3310      	adds	r3, #16
 800d9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9be:	4413      	add	r3, r2
 800d9c0:	3303      	adds	r3, #3
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	88b9      	ldrh	r1, [r7, #4]
 800d9ca:	88ba      	ldrh	r2, [r7, #4]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	887b      	ldrh	r3, [r7, #2]
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4601      	mov	r1, r0
 800d9d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9da:	f7ff ff09 	bl	800d7f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d010      	beq.n	800da0c <pbuf_alloc+0x1c8>
 800d9ea:	4b0b      	ldr	r3, [pc, #44]	; (800da18 <pbuf_alloc+0x1d4>)
 800d9ec:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d9f0:	490d      	ldr	r1, [pc, #52]	; (800da28 <pbuf_alloc+0x1e4>)
 800d9f2:	480b      	ldr	r0, [pc, #44]	; (800da20 <pbuf_alloc+0x1dc>)
 800d9f4:	f009 fd7c 	bl	80174f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9f8:	e008      	b.n	800da0c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9fa:	4b07      	ldr	r3, [pc, #28]	; (800da18 <pbuf_alloc+0x1d4>)
 800d9fc:	f240 1227 	movw	r2, #295	; 0x127
 800da00:	490a      	ldr	r1, [pc, #40]	; (800da2c <pbuf_alloc+0x1e8>)
 800da02:	4807      	ldr	r0, [pc, #28]	; (800da20 <pbuf_alloc+0x1dc>)
 800da04:	f009 fd74 	bl	80174f0 <iprintf>
      return NULL;
 800da08:	2300      	movs	r3, #0
 800da0a:	e001      	b.n	800da10 <pbuf_alloc+0x1cc>
      break;
 800da0c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da10:	4618      	mov	r0, r3
 800da12:	3728      	adds	r7, #40	; 0x28
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	0801b64c 	.word	0x0801b64c
 800da1c:	0801b67c 	.word	0x0801b67c
 800da20:	0801b6ac 	.word	0x0801b6ac
 800da24:	0801b6d4 	.word	0x0801b6d4
 800da28:	0801b708 	.word	0x0801b708
 800da2c:	0801b734 	.word	0x0801b734

0800da30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af02      	add	r7, sp, #8
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	807b      	strh	r3, [r7, #2]
 800da3c:	4613      	mov	r3, r2
 800da3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da40:	883b      	ldrh	r3, [r7, #0]
 800da42:	2b41      	cmp	r3, #65	; 0x41
 800da44:	d009      	beq.n	800da5a <pbuf_alloc_reference+0x2a>
 800da46:	883b      	ldrh	r3, [r7, #0]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d006      	beq.n	800da5a <pbuf_alloc_reference+0x2a>
 800da4c:	4b0f      	ldr	r3, [pc, #60]	; (800da8c <pbuf_alloc_reference+0x5c>)
 800da4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da52:	490f      	ldr	r1, [pc, #60]	; (800da90 <pbuf_alloc_reference+0x60>)
 800da54:	480f      	ldr	r0, [pc, #60]	; (800da94 <pbuf_alloc_reference+0x64>)
 800da56:	f009 fd4b 	bl	80174f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da5a:	200a      	movs	r0, #10
 800da5c:	f7ff fac0 	bl	800cfe0 <memp_malloc>
 800da60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	e00b      	b.n	800da84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da6c:	8879      	ldrh	r1, [r7, #2]
 800da6e:	887a      	ldrh	r2, [r7, #2]
 800da70:	2300      	movs	r3, #0
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	883b      	ldrh	r3, [r7, #0]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	460b      	mov	r3, r1
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff feb7 	bl	800d7f0 <pbuf_init_alloced_pbuf>
  return p;
 800da82:	68fb      	ldr	r3, [r7, #12]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	0801b64c 	.word	0x0801b64c
 800da90:	0801b750 	.word	0x0801b750
 800da94:	0801b6ac 	.word	0x0801b6ac

0800da98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b088      	sub	sp, #32
 800da9c:	af02      	add	r7, sp, #8
 800da9e:	607b      	str	r3, [r7, #4]
 800daa0:	4603      	mov	r3, r0
 800daa2:	73fb      	strb	r3, [r7, #15]
 800daa4:	460b      	mov	r3, r1
 800daa6:	81bb      	strh	r3, [r7, #12]
 800daa8:	4613      	mov	r3, r2
 800daaa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800daac:	7bfb      	ldrb	r3, [r7, #15]
 800daae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dab0:	8a7b      	ldrh	r3, [r7, #18]
 800dab2:	3303      	adds	r3, #3
 800dab4:	f023 0203 	bic.w	r2, r3, #3
 800dab8:	89bb      	ldrh	r3, [r7, #12]
 800daba:	441a      	add	r2, r3
 800dabc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d901      	bls.n	800dac6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	e018      	b.n	800daf8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d007      	beq.n	800dadc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dacc:	8a7b      	ldrh	r3, [r7, #18]
 800dace:	3303      	adds	r3, #3
 800dad0:	f023 0303 	bic.w	r3, r3, #3
 800dad4:	6a3a      	ldr	r2, [r7, #32]
 800dad6:	4413      	add	r3, r2
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	e001      	b.n	800dae0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dadc:	2300      	movs	r3, #0
 800dade:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	89b9      	ldrh	r1, [r7, #12]
 800dae4:	89ba      	ldrh	r2, [r7, #12]
 800dae6:	2302      	movs	r3, #2
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	897b      	ldrh	r3, [r7, #10]
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	460b      	mov	r3, r1
 800daf0:	6979      	ldr	r1, [r7, #20]
 800daf2:	f7ff fe7d 	bl	800d7f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800daf6:	687b      	ldr	r3, [r7, #4]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <pbuf_realloc+0x20>
 800db12:	4b3a      	ldr	r3, [pc, #232]	; (800dbfc <pbuf_realloc+0xfc>)
 800db14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800db18:	4939      	ldr	r1, [pc, #228]	; (800dc00 <pbuf_realloc+0x100>)
 800db1a:	483a      	ldr	r0, [pc, #232]	; (800dc04 <pbuf_realloc+0x104>)
 800db1c:	f009 fce8 	bl	80174f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	891b      	ldrh	r3, [r3, #8]
 800db24:	887a      	ldrh	r2, [r7, #2]
 800db26:	429a      	cmp	r2, r3
 800db28:	d263      	bcs.n	800dbf2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	891a      	ldrh	r2, [r3, #8]
 800db2e:	887b      	ldrh	r3, [r7, #2]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db34:	887b      	ldrh	r3, [r7, #2]
 800db36:	817b      	strh	r3, [r7, #10]
  q = p;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db3c:	e018      	b.n	800db70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	895b      	ldrh	r3, [r3, #10]
 800db42:	897a      	ldrh	r2, [r7, #10]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	891a      	ldrh	r2, [r3, #8]
 800db4c:	893b      	ldrh	r3, [r7, #8]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	b29a      	uxth	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d106      	bne.n	800db70 <pbuf_realloc+0x70>
 800db62:	4b26      	ldr	r3, [pc, #152]	; (800dbfc <pbuf_realloc+0xfc>)
 800db64:	f240 12af 	movw	r2, #431	; 0x1af
 800db68:	4927      	ldr	r1, [pc, #156]	; (800dc08 <pbuf_realloc+0x108>)
 800db6a:	4826      	ldr	r0, [pc, #152]	; (800dc04 <pbuf_realloc+0x104>)
 800db6c:	f009 fcc0 	bl	80174f0 <iprintf>
  while (rem_len > q->len) {
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	895b      	ldrh	r3, [r3, #10]
 800db74:	897a      	ldrh	r2, [r7, #10]
 800db76:	429a      	cmp	r2, r3
 800db78:	d8e1      	bhi.n	800db3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	7b1b      	ldrb	r3, [r3, #12]
 800db7e:	f003 030f 	and.w	r3, r3, #15
 800db82:	2b00      	cmp	r3, #0
 800db84:	d121      	bne.n	800dbca <pbuf_realloc+0xca>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	895b      	ldrh	r3, [r3, #10]
 800db8a:	897a      	ldrh	r2, [r7, #10]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d01c      	beq.n	800dbca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	7b5b      	ldrb	r3, [r3, #13]
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d116      	bne.n	800dbca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	685a      	ldr	r2, [r3, #4]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	897b      	ldrh	r3, [r7, #10]
 800dba8:	4413      	add	r3, r2
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4619      	mov	r1, r3
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f7fe ff68 	bl	800ca84 <mem_trim>
 800dbb4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d106      	bne.n	800dbca <pbuf_realloc+0xca>
 800dbbc:	4b0f      	ldr	r3, [pc, #60]	; (800dbfc <pbuf_realloc+0xfc>)
 800dbbe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dbc2:	4912      	ldr	r1, [pc, #72]	; (800dc0c <pbuf_realloc+0x10c>)
 800dbc4:	480f      	ldr	r0, [pc, #60]	; (800dc04 <pbuf_realloc+0x104>)
 800dbc6:	f009 fc93 	bl	80174f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	897a      	ldrh	r2, [r7, #10]
 800dbce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	895a      	ldrh	r2, [r3, #10]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d004      	beq.n	800dbea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f000 f911 	bl	800de0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	e000      	b.n	800dbf4 <pbuf_realloc+0xf4>
    return;
 800dbf2:	bf00      	nop

}
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0801b64c 	.word	0x0801b64c
 800dc00:	0801b764 	.word	0x0801b764
 800dc04:	0801b6ac 	.word	0x0801b6ac
 800dc08:	0801b77c 	.word	0x0801b77c
 800dc0c:	0801b794 	.word	0x0801b794

0800dc10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d106      	bne.n	800dc32 <pbuf_add_header_impl+0x22>
 800dc24:	4b2b      	ldr	r3, [pc, #172]	; (800dcd4 <pbuf_add_header_impl+0xc4>)
 800dc26:	f240 12df 	movw	r2, #479	; 0x1df
 800dc2a:	492b      	ldr	r1, [pc, #172]	; (800dcd8 <pbuf_add_header_impl+0xc8>)
 800dc2c:	482b      	ldr	r0, [pc, #172]	; (800dcdc <pbuf_add_header_impl+0xcc>)
 800dc2e:	f009 fc5f 	bl	80174f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <pbuf_add_header_impl+0x30>
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc3e:	d301      	bcc.n	800dc44 <pbuf_add_header_impl+0x34>
    return 1;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e043      	b.n	800dccc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <pbuf_add_header_impl+0x3e>
    return 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e03e      	b.n	800dccc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	891a      	ldrh	r2, [r3, #8]
 800dc56:	8a7b      	ldrh	r3, [r7, #18]
 800dc58:	4413      	add	r3, r2
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	8a7a      	ldrh	r2, [r7, #18]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d901      	bls.n	800dc66 <pbuf_add_header_impl+0x56>
    return 1;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e032      	b.n	800dccc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	7b1b      	ldrb	r3, [r3, #12]
 800dc6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc6c:	8a3b      	ldrh	r3, [r7, #16]
 800dc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00c      	beq.n	800dc90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	425b      	negs	r3, r3
 800dc7e:	4413      	add	r3, r2
 800dc80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	3310      	adds	r3, #16
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d20d      	bcs.n	800dca8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e01d      	b.n	800dccc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc90:	79fb      	ldrb	r3, [r7, #7]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	685a      	ldr	r2, [r3, #4]
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	425b      	negs	r3, r3
 800dc9e:	4413      	add	r3, r2
 800dca0:	617b      	str	r3, [r7, #20]
 800dca2:	e001      	b.n	800dca8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e011      	b.n	800dccc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	697a      	ldr	r2, [r7, #20]
 800dcac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	895a      	ldrh	r2, [r3, #10]
 800dcb2:	8a7b      	ldrh	r3, [r7, #18]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	891a      	ldrh	r2, [r3, #8]
 800dcc0:	8a7b      	ldrh	r3, [r7, #18]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	811a      	strh	r2, [r3, #8]


  return 0;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	0801b64c 	.word	0x0801b64c
 800dcd8:	0801b7b0 	.word	0x0801b7b0
 800dcdc:	0801b6ac 	.word	0x0801b6ac

0800dce0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dcea:	2200      	movs	r2, #0
 800dcec:	6839      	ldr	r1, [r7, #0]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff ff8e 	bl	800dc10 <pbuf_add_header_impl>
 800dcf4:	4603      	mov	r3, r0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d106      	bne.n	800dd1e <pbuf_remove_header+0x1e>
 800dd10:	4b20      	ldr	r3, [pc, #128]	; (800dd94 <pbuf_remove_header+0x94>)
 800dd12:	f240 224b 	movw	r2, #587	; 0x24b
 800dd16:	4920      	ldr	r1, [pc, #128]	; (800dd98 <pbuf_remove_header+0x98>)
 800dd18:	4820      	ldr	r0, [pc, #128]	; (800dd9c <pbuf_remove_header+0x9c>)
 800dd1a:	f009 fbe9 	bl	80174f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d003      	beq.n	800dd2c <pbuf_remove_header+0x2c>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd2a:	d301      	bcc.n	800dd30 <pbuf_remove_header+0x30>
    return 1;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e02c      	b.n	800dd8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d101      	bne.n	800dd3a <pbuf_remove_header+0x3a>
    return 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	e027      	b.n	800dd8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	89fa      	ldrh	r2, [r7, #14]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d908      	bls.n	800dd5a <pbuf_remove_header+0x5a>
 800dd48:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <pbuf_remove_header+0x94>)
 800dd4a:	f240 2255 	movw	r2, #597	; 0x255
 800dd4e:	4914      	ldr	r1, [pc, #80]	; (800dda0 <pbuf_remove_header+0xa0>)
 800dd50:	4812      	ldr	r0, [pc, #72]	; (800dd9c <pbuf_remove_header+0x9c>)
 800dd52:	f009 fbcd 	bl	80174f0 <iprintf>
 800dd56:	2301      	movs	r3, #1
 800dd58:	e017      	b.n	800dd8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	441a      	add	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	895a      	ldrh	r2, [r3, #10]
 800dd70:	89fb      	ldrh	r3, [r7, #14]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	891a      	ldrh	r2, [r3, #8]
 800dd7e:	89fb      	ldrh	r3, [r7, #14]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	0801b64c 	.word	0x0801b64c
 800dd98:	0801b7b0 	.word	0x0801b7b0
 800dd9c:	0801b6ac 	.word	0x0801b6ac
 800dda0:	0801b7bc 	.word	0x0801b7bc

0800dda4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	807b      	strh	r3, [r7, #2]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ddb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	da08      	bge.n	800ddce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ddbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddc0:	425b      	negs	r3, r3
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7ff ff9b 	bl	800dd00 <pbuf_remove_header>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	e007      	b.n	800ddde <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ddce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddd2:	787a      	ldrb	r2, [r7, #1]
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff ff1a 	bl	800dc10 <pbuf_add_header_impl>
 800dddc:	4603      	mov	r3, r0
  }
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ddf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f7ff ffd2 	bl	800dda4 <pbuf_header_impl>
 800de00:	4603      	mov	r3, r0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b088      	sub	sp, #32
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10b      	bne.n	800de32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <pbuf_free+0x22>
 800de20:	4b3b      	ldr	r3, [pc, #236]	; (800df10 <pbuf_free+0x104>)
 800de22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de26:	493b      	ldr	r1, [pc, #236]	; (800df14 <pbuf_free+0x108>)
 800de28:	483b      	ldr	r0, [pc, #236]	; (800df18 <pbuf_free+0x10c>)
 800de2a:	f009 fb61 	bl	80174f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	e069      	b.n	800df06 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de36:	e062      	b.n	800defe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de38:	f009 f946 	bl	80170c8 <sys_arch_protect>
 800de3c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	7b9b      	ldrb	r3, [r3, #14]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <pbuf_free+0x48>
 800de46:	4b32      	ldr	r3, [pc, #200]	; (800df10 <pbuf_free+0x104>)
 800de48:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de4c:	4933      	ldr	r1, [pc, #204]	; (800df1c <pbuf_free+0x110>)
 800de4e:	4832      	ldr	r0, [pc, #200]	; (800df18 <pbuf_free+0x10c>)
 800de50:	f009 fb4e 	bl	80174f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	7b9b      	ldrb	r3, [r3, #14]
 800de58:	3b01      	subs	r3, #1
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	739a      	strb	r2, [r3, #14]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	7b9b      	ldrb	r3, [r3, #14]
 800de64:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de66:	69b8      	ldr	r0, [r7, #24]
 800de68:	f009 f93c 	bl	80170e4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de6c:	7dfb      	ldrb	r3, [r7, #23]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d143      	bne.n	800defa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7b1b      	ldrb	r3, [r3, #12]
 800de7c:	f003 030f 	and.w	r3, r3, #15
 800de80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	7b5b      	ldrb	r3, [r3, #13]
 800de86:	f003 0302 	and.w	r3, r3, #2
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d011      	beq.n	800deb2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <pbuf_free+0x9c>
 800de9a:	4b1d      	ldr	r3, [pc, #116]	; (800df10 <pbuf_free+0x104>)
 800de9c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dea0:	491f      	ldr	r1, [pc, #124]	; (800df20 <pbuf_free+0x114>)
 800dea2:	481d      	ldr	r0, [pc, #116]	; (800df18 <pbuf_free+0x10c>)
 800dea4:	f009 fb24 	bl	80174f0 <iprintf>
        pc->custom_free_function(p);
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	4798      	blx	r3
 800deb0:	e01d      	b.n	800deee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d104      	bne.n	800dec2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	200b      	movs	r0, #11
 800debc:	f7ff f906 	bl	800d0cc <memp_free>
 800dec0:	e015      	b.n	800deee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d104      	bne.n	800ded2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	200a      	movs	r0, #10
 800decc:	f7ff f8fe 	bl	800d0cc <memp_free>
 800ded0:	e00d      	b.n	800deee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d103      	bne.n	800dee0 <pbuf_free+0xd4>
          mem_free(p);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7fe fd43 	bl	800c964 <mem_free>
 800dede:	e006      	b.n	800deee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dee0:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <pbuf_free+0x104>)
 800dee2:	f240 320f 	movw	r2, #783	; 0x30f
 800dee6:	490f      	ldr	r1, [pc, #60]	; (800df24 <pbuf_free+0x118>)
 800dee8:	480b      	ldr	r0, [pc, #44]	; (800df18 <pbuf_free+0x10c>)
 800deea:	f009 fb01 	bl	80174f0 <iprintf>
        }
      }
      count++;
 800deee:	7ffb      	ldrb	r3, [r7, #31]
 800def0:	3301      	adds	r3, #1
 800def2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	607b      	str	r3, [r7, #4]
 800def8:	e001      	b.n	800defe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d199      	bne.n	800de38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df04:	7ffb      	ldrb	r3, [r7, #31]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3720      	adds	r7, #32
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	0801b64c 	.word	0x0801b64c
 800df14:	0801b7b0 	.word	0x0801b7b0
 800df18:	0801b6ac 	.word	0x0801b6ac
 800df1c:	0801b7dc 	.word	0x0801b7dc
 800df20:	0801b7f4 	.word	0x0801b7f4
 800df24:	0801b818 	.word	0x0801b818

0800df28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df34:	e005      	b.n	800df42 <pbuf_clen+0x1a>
    ++len;
 800df36:	89fb      	ldrh	r3, [r7, #14]
 800df38:	3301      	adds	r3, #1
 800df3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1f6      	bne.n	800df36 <pbuf_clen+0xe>
  }
  return len;
 800df48:	89fb      	ldrh	r3, [r7, #14]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
	...

0800df58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d016      	beq.n	800df94 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df66:	f009 f8af 	bl	80170c8 <sys_arch_protect>
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7b9b      	ldrb	r3, [r3, #14]
 800df70:	3301      	adds	r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	739a      	strb	r2, [r3, #14]
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f009 f8b3 	bl	80170e4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7b9b      	ldrb	r3, [r3, #14]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d106      	bne.n	800df94 <pbuf_ref+0x3c>
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <pbuf_ref+0x44>)
 800df88:	f240 3242 	movw	r2, #834	; 0x342
 800df8c:	4904      	ldr	r1, [pc, #16]	; (800dfa0 <pbuf_ref+0x48>)
 800df8e:	4805      	ldr	r0, [pc, #20]	; (800dfa4 <pbuf_ref+0x4c>)
 800df90:	f009 faae 	bl	80174f0 <iprintf>
  }
}
 800df94:	bf00      	nop
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	0801b64c 	.word	0x0801b64c
 800dfa0:	0801b82c 	.word	0x0801b82c
 800dfa4:	0801b6ac 	.word	0x0801b6ac

0800dfa8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <pbuf_cat+0x16>
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d107      	bne.n	800dfce <pbuf_cat+0x26>
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <pbuf_cat+0x98>)
 800dfc0:	f240 3259 	movw	r2, #857	; 0x359
 800dfc4:	491f      	ldr	r1, [pc, #124]	; (800e044 <pbuf_cat+0x9c>)
 800dfc6:	4820      	ldr	r0, [pc, #128]	; (800e048 <pbuf_cat+0xa0>)
 800dfc8:	f009 fa92 	bl	80174f0 <iprintf>
 800dfcc:	e034      	b.n	800e038 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	60fb      	str	r3, [r7, #12]
 800dfd2:	e00a      	b.n	800dfea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	891a      	ldrh	r2, [r3, #8]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	891b      	ldrh	r3, [r3, #8]
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	60fb      	str	r3, [r7, #12]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f0      	bne.n	800dfd4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	891a      	ldrh	r2, [r3, #8]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	895b      	ldrh	r3, [r3, #10]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d006      	beq.n	800e00c <pbuf_cat+0x64>
 800dffe:	4b10      	ldr	r3, [pc, #64]	; (800e040 <pbuf_cat+0x98>)
 800e000:	f240 3262 	movw	r2, #866	; 0x362
 800e004:	4911      	ldr	r1, [pc, #68]	; (800e04c <pbuf_cat+0xa4>)
 800e006:	4810      	ldr	r0, [pc, #64]	; (800e048 <pbuf_cat+0xa0>)
 800e008:	f009 fa72 	bl	80174f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d006      	beq.n	800e022 <pbuf_cat+0x7a>
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <pbuf_cat+0x98>)
 800e016:	f240 3263 	movw	r2, #867	; 0x363
 800e01a:	490d      	ldr	r1, [pc, #52]	; (800e050 <pbuf_cat+0xa8>)
 800e01c:	480a      	ldr	r0, [pc, #40]	; (800e048 <pbuf_cat+0xa0>)
 800e01e:	f009 fa67 	bl	80174f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	891a      	ldrh	r2, [r3, #8]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	891b      	ldrh	r3, [r3, #8]
 800e02a:	4413      	add	r3, r2
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	0801b64c 	.word	0x0801b64c
 800e044:	0801b840 	.word	0x0801b840
 800e048:	0801b6ac 	.word	0x0801b6ac
 800e04c:	0801b878 	.word	0x0801b878
 800e050:	0801b8a8 	.word	0x0801b8a8

0800e054 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	2300      	movs	r3, #0
 800e064:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d008      	beq.n	800e07e <pbuf_copy+0x2a>
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <pbuf_copy+0x2a>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	891a      	ldrh	r2, [r3, #8]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	891b      	ldrh	r3, [r3, #8]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d209      	bcs.n	800e092 <pbuf_copy+0x3e>
 800e07e:	4b57      	ldr	r3, [pc, #348]	; (800e1dc <pbuf_copy+0x188>)
 800e080:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e084:	4956      	ldr	r1, [pc, #344]	; (800e1e0 <pbuf_copy+0x18c>)
 800e086:	4857      	ldr	r0, [pc, #348]	; (800e1e4 <pbuf_copy+0x190>)
 800e088:	f009 fa32 	bl	80174f0 <iprintf>
 800e08c:	f06f 030f 	mvn.w	r3, #15
 800e090:	e09f      	b.n	800e1d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	895b      	ldrh	r3, [r3, #10]
 800e096:	461a      	mov	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	1ad2      	subs	r2, r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	895b      	ldrh	r3, [r3, #10]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	1acb      	subs	r3, r1, r3
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d306      	bcc.n	800e0b8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	895b      	ldrh	r3, [r3, #10]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	60fb      	str	r3, [r7, #12]
 800e0b6:	e005      	b.n	800e0c4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	895b      	ldrh	r3, [r3, #10]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	18d0      	adds	r0, r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	f009 f945 	bl	8017366 <memcpy>
    offset_to += len;
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	895b      	ldrh	r3, [r3, #10]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d906      	bls.n	800e106 <pbuf_copy+0xb2>
 800e0f8:	4b38      	ldr	r3, [pc, #224]	; (800e1dc <pbuf_copy+0x188>)
 800e0fa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e0fe:	493a      	ldr	r1, [pc, #232]	; (800e1e8 <pbuf_copy+0x194>)
 800e100:	4838      	ldr	r0, [pc, #224]	; (800e1e4 <pbuf_copy+0x190>)
 800e102:	f009 f9f5 	bl	80174f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	895b      	ldrh	r3, [r3, #10]
 800e10a:	461a      	mov	r2, r3
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	4293      	cmp	r3, r2
 800e110:	d906      	bls.n	800e120 <pbuf_copy+0xcc>
 800e112:	4b32      	ldr	r3, [pc, #200]	; (800e1dc <pbuf_copy+0x188>)
 800e114:	f240 32da 	movw	r2, #986	; 0x3da
 800e118:	4934      	ldr	r1, [pc, #208]	; (800e1ec <pbuf_copy+0x198>)
 800e11a:	4832      	ldr	r0, [pc, #200]	; (800e1e4 <pbuf_copy+0x190>)
 800e11c:	f009 f9e8 	bl	80174f0 <iprintf>
    if (offset_from >= p_from->len) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	895b      	ldrh	r3, [r3, #10]
 800e124:	461a      	mov	r2, r3
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	4293      	cmp	r3, r2
 800e12a:	d304      	bcc.n	800e136 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	895b      	ldrh	r3, [r3, #10]
 800e13a:	461a      	mov	r2, r3
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	4293      	cmp	r3, r2
 800e140:	d114      	bne.n	800e16c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10c      	bne.n	800e16c <pbuf_copy+0x118>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d009      	beq.n	800e16c <pbuf_copy+0x118>
 800e158:	4b20      	ldr	r3, [pc, #128]	; (800e1dc <pbuf_copy+0x188>)
 800e15a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e15e:	4924      	ldr	r1, [pc, #144]	; (800e1f0 <pbuf_copy+0x19c>)
 800e160:	4820      	ldr	r0, [pc, #128]	; (800e1e4 <pbuf_copy+0x190>)
 800e162:	f009 f9c5 	bl	80174f0 <iprintf>
 800e166:	f06f 030f 	mvn.w	r3, #15
 800e16a:	e032      	b.n	800e1d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d013      	beq.n	800e19a <pbuf_copy+0x146>
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	895a      	ldrh	r2, [r3, #10]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	891b      	ldrh	r3, [r3, #8]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d10d      	bne.n	800e19a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d009      	beq.n	800e19a <pbuf_copy+0x146>
 800e186:	4b15      	ldr	r3, [pc, #84]	; (800e1dc <pbuf_copy+0x188>)
 800e188:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e18c:	4919      	ldr	r1, [pc, #100]	; (800e1f4 <pbuf_copy+0x1a0>)
 800e18e:	4815      	ldr	r0, [pc, #84]	; (800e1e4 <pbuf_copy+0x190>)
 800e190:	f009 f9ae 	bl	80174f0 <iprintf>
 800e194:	f06f 0305 	mvn.w	r3, #5
 800e198:	e01b      	b.n	800e1d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d013      	beq.n	800e1c8 <pbuf_copy+0x174>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	895a      	ldrh	r2, [r3, #10]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d10d      	bne.n	800e1c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d009      	beq.n	800e1c8 <pbuf_copy+0x174>
 800e1b4:	4b09      	ldr	r3, [pc, #36]	; (800e1dc <pbuf_copy+0x188>)
 800e1b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e1ba:	490e      	ldr	r1, [pc, #56]	; (800e1f4 <pbuf_copy+0x1a0>)
 800e1bc:	4809      	ldr	r0, [pc, #36]	; (800e1e4 <pbuf_copy+0x190>)
 800e1be:	f009 f997 	bl	80174f0 <iprintf>
 800e1c2:	f06f 0305 	mvn.w	r3, #5
 800e1c6:	e004      	b.n	800e1d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f47f af61 	bne.w	800e092 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	0801b64c 	.word	0x0801b64c
 800e1e0:	0801b8f4 	.word	0x0801b8f4
 800e1e4:	0801b6ac 	.word	0x0801b6ac
 800e1e8:	0801b924 	.word	0x0801b924
 800e1ec:	0801b93c 	.word	0x0801b93c
 800e1f0:	0801b958 	.word	0x0801b958
 800e1f4:	0801b968 	.word	0x0801b968

0800e1f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b088      	sub	sp, #32
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	4611      	mov	r1, r2
 800e204:	461a      	mov	r2, r3
 800e206:	460b      	mov	r3, r1
 800e208:	80fb      	strh	r3, [r7, #6]
 800e20a:	4613      	mov	r3, r2
 800e20c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d108      	bne.n	800e22e <pbuf_copy_partial+0x36>
 800e21c:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <pbuf_copy_partial+0xd4>)
 800e21e:	f240 420a 	movw	r2, #1034	; 0x40a
 800e222:	492b      	ldr	r1, [pc, #172]	; (800e2d0 <pbuf_copy_partial+0xd8>)
 800e224:	482b      	ldr	r0, [pc, #172]	; (800e2d4 <pbuf_copy_partial+0xdc>)
 800e226:	f009 f963 	bl	80174f0 <iprintf>
 800e22a:	2300      	movs	r3, #0
 800e22c:	e04a      	b.n	800e2c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d108      	bne.n	800e246 <pbuf_copy_partial+0x4e>
 800e234:	4b25      	ldr	r3, [pc, #148]	; (800e2cc <pbuf_copy_partial+0xd4>)
 800e236:	f240 420b 	movw	r2, #1035	; 0x40b
 800e23a:	4927      	ldr	r1, [pc, #156]	; (800e2d8 <pbuf_copy_partial+0xe0>)
 800e23c:	4825      	ldr	r0, [pc, #148]	; (800e2d4 <pbuf_copy_partial+0xdc>)
 800e23e:	f009 f957 	bl	80174f0 <iprintf>
 800e242:	2300      	movs	r3, #0
 800e244:	e03e      	b.n	800e2c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	61fb      	str	r3, [r7, #28]
 800e24a:	e034      	b.n	800e2b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e24c:	88bb      	ldrh	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <pbuf_copy_partial+0x70>
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	895b      	ldrh	r3, [r3, #10]
 800e256:	88ba      	ldrh	r2, [r7, #4]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d305      	bcc.n	800e268 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	895b      	ldrh	r3, [r3, #10]
 800e260:	88ba      	ldrh	r2, [r7, #4]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	80bb      	strh	r3, [r7, #4]
 800e266:	e023      	b.n	800e2b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	895a      	ldrh	r2, [r3, #10]
 800e26c:	88bb      	ldrh	r3, [r7, #4]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e272:	8b3a      	ldrh	r2, [r7, #24]
 800e274:	88fb      	ldrh	r3, [r7, #6]
 800e276:	429a      	cmp	r2, r3
 800e278:	d901      	bls.n	800e27e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e27a:	88fb      	ldrh	r3, [r7, #6]
 800e27c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e27e:	8b7b      	ldrh	r3, [r7, #26]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	18d0      	adds	r0, r2, r3
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	88bb      	ldrh	r3, [r7, #4]
 800e28a:	4413      	add	r3, r2
 800e28c:	8b3a      	ldrh	r2, [r7, #24]
 800e28e:	4619      	mov	r1, r3
 800e290:	f009 f869 	bl	8017366 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e294:	8afa      	ldrh	r2, [r7, #22]
 800e296:	8b3b      	ldrh	r3, [r7, #24]
 800e298:	4413      	add	r3, r2
 800e29a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e29c:	8b7a      	ldrh	r2, [r7, #26]
 800e29e:	8b3b      	ldrh	r3, [r7, #24]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e2a4:	88fa      	ldrh	r2, [r7, #6]
 800e2a6:	8b3b      	ldrh	r3, [r7, #24]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	61fb      	str	r3, [r7, #28]
 800e2b6:	88fb      	ldrh	r3, [r7, #6]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <pbuf_copy_partial+0xca>
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1c4      	bne.n	800e24c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e2c2:	8afb      	ldrh	r3, [r7, #22]
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3720      	adds	r7, #32
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	0801b64c 	.word	0x0801b64c
 800e2d0:	0801b994 	.word	0x0801b994
 800e2d4:	0801b6ac 	.word	0x0801b6ac
 800e2d8:	0801b9b4 	.word	0x0801b9b4

0800e2dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	603a      	str	r2, [r7, #0]
 800e2e6:	71fb      	strb	r3, [r7, #7]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	8919      	ldrh	r1, [r3, #8]
 800e2f0:	88ba      	ldrh	r2, [r7, #4]
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff faa5 	bl	800d844 <pbuf_alloc>
 800e2fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d101      	bne.n	800e306 <pbuf_clone+0x2a>
    return NULL;
 800e302:	2300      	movs	r3, #0
 800e304:	e011      	b.n	800e32a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fea3 	bl	800e054 <pbuf_copy>
 800e30e:	4603      	mov	r3, r0
 800e310:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e312:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d006      	beq.n	800e328 <pbuf_clone+0x4c>
 800e31a:	4b06      	ldr	r3, [pc, #24]	; (800e334 <pbuf_clone+0x58>)
 800e31c:	f240 5224 	movw	r2, #1316	; 0x524
 800e320:	4905      	ldr	r1, [pc, #20]	; (800e338 <pbuf_clone+0x5c>)
 800e322:	4806      	ldr	r0, [pc, #24]	; (800e33c <pbuf_clone+0x60>)
 800e324:	f009 f8e4 	bl	80174f0 <iprintf>
  return q;
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	0801b64c 	.word	0x0801b64c
 800e338:	0801bac0 	.word	0x0801bac0
 800e33c:	0801b6ac 	.word	0x0801b6ac

0800e340 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e344:	f009 f8ec 	bl	8017520 <rand>
 800e348:	4603      	mov	r3, r0
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e350:	b29b      	uxth	r3, r3
 800e352:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e356:	b29a      	uxth	r2, r3
 800e358:	4b01      	ldr	r3, [pc, #4]	; (800e360 <tcp_init+0x20>)
 800e35a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e35c:	bf00      	nop
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20000024 	.word	0x20000024

0800e364 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	7d1b      	ldrb	r3, [r3, #20]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d105      	bne.n	800e380 <tcp_free+0x1c>
 800e374:	4b06      	ldr	r3, [pc, #24]	; (800e390 <tcp_free+0x2c>)
 800e376:	22d4      	movs	r2, #212	; 0xd4
 800e378:	4906      	ldr	r1, [pc, #24]	; (800e394 <tcp_free+0x30>)
 800e37a:	4807      	ldr	r0, [pc, #28]	; (800e398 <tcp_free+0x34>)
 800e37c:	f009 f8b8 	bl	80174f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e380:	6879      	ldr	r1, [r7, #4]
 800e382:	2000      	movs	r0, #0
 800e384:	f7fe fea2 	bl	800d0cc <memp_free>
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	0801bb4c 	.word	0x0801bb4c
 800e394:	0801bb7c 	.word	0x0801bb7c
 800e398:	0801bb90 	.word	0x0801bb90

0800e39c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7d1b      	ldrb	r3, [r3, #20]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d105      	bne.n	800e3b8 <tcp_free_listen+0x1c>
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <tcp_free_listen+0x2c>)
 800e3ae:	22df      	movs	r2, #223	; 0xdf
 800e3b0:	4906      	ldr	r1, [pc, #24]	; (800e3cc <tcp_free_listen+0x30>)
 800e3b2:	4807      	ldr	r0, [pc, #28]	; (800e3d0 <tcp_free_listen+0x34>)
 800e3b4:	f009 f89c 	bl	80174f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	f7fe fe86 	bl	800d0cc <memp_free>
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	0801bb4c 	.word	0x0801bb4c
 800e3cc:	0801bbb8 	.word	0x0801bbb8
 800e3d0:	0801bb90 	.word	0x0801bb90

0800e3d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e3d8:	f001 f8f4 	bl	800f5c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e3dc:	4b07      	ldr	r3, [pc, #28]	; (800e3fc <tcp_tmr+0x28>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	4b05      	ldr	r3, [pc, #20]	; (800e3fc <tcp_tmr+0x28>)
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	4b04      	ldr	r3, [pc, #16]	; (800e3fc <tcp_tmr+0x28>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e3f4:	f000 fda6 	bl	800ef44 <tcp_slowtmr>
  }
}
 800e3f8:	bf00      	nop
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	20011bad 	.word	0x20011bad

0800e400 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d105      	bne.n	800e41c <tcp_remove_listener+0x1c>
 800e410:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <tcp_remove_listener+0x48>)
 800e412:	22ff      	movs	r2, #255	; 0xff
 800e414:	490d      	ldr	r1, [pc, #52]	; (800e44c <tcp_remove_listener+0x4c>)
 800e416:	480e      	ldr	r0, [pc, #56]	; (800e450 <tcp_remove_listener+0x50>)
 800e418:	f009 f86a 	bl	80174f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	60fb      	str	r3, [r7, #12]
 800e420:	e00a      	b.n	800e438 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d102      	bne.n	800e432 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1f1      	bne.n	800e422 <tcp_remove_listener+0x22>
    }
  }
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	0801bb4c 	.word	0x0801bb4c
 800e44c:	0801bbd4 	.word	0x0801bbd4
 800e450:	0801bb90 	.word	0x0801bb90

0800e454 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <tcp_listen_closed+0x1c>
 800e462:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <tcp_listen_closed+0x60>)
 800e464:	f240 1211 	movw	r2, #273	; 0x111
 800e468:	4913      	ldr	r1, [pc, #76]	; (800e4b8 <tcp_listen_closed+0x64>)
 800e46a:	4814      	ldr	r0, [pc, #80]	; (800e4bc <tcp_listen_closed+0x68>)
 800e46c:	f009 f840 	bl	80174f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	7d1b      	ldrb	r3, [r3, #20]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d006      	beq.n	800e486 <tcp_listen_closed+0x32>
 800e478:	4b0e      	ldr	r3, [pc, #56]	; (800e4b4 <tcp_listen_closed+0x60>)
 800e47a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e47e:	4910      	ldr	r1, [pc, #64]	; (800e4c0 <tcp_listen_closed+0x6c>)
 800e480:	480e      	ldr	r0, [pc, #56]	; (800e4bc <tcp_listen_closed+0x68>)
 800e482:	f009 f835 	bl	80174f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e486:	2301      	movs	r3, #1
 800e488:	60fb      	str	r3, [r7, #12]
 800e48a:	e00b      	b.n	800e4a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e48c:	4a0d      	ldr	r2, [pc, #52]	; (800e4c4 <tcp_listen_closed+0x70>)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6879      	ldr	r1, [r7, #4]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff ffb1 	bl	800e400 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d9f0      	bls.n	800e48c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e4aa:	bf00      	nop
 800e4ac:	bf00      	nop
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	0801bb4c 	.word	0x0801bb4c
 800e4b8:	0801bbfc 	.word	0x0801bbfc
 800e4bc:	0801bb90 	.word	0x0801bb90
 800e4c0:	0801bc08 	.word	0x0801bc08
 800e4c4:	0801d8a8 	.word	0x0801d8a8

0800e4c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e4c8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af04      	add	r7, sp, #16
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <tcp_close_shutdown+0x20>
 800e4da:	4b63      	ldr	r3, [pc, #396]	; (800e668 <tcp_close_shutdown+0x1a0>)
 800e4dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e4e0:	4962      	ldr	r1, [pc, #392]	; (800e66c <tcp_close_shutdown+0x1a4>)
 800e4e2:	4863      	ldr	r0, [pc, #396]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e4e4:	f009 f804 	bl	80174f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d066      	beq.n	800e5bc <tcp_close_shutdown+0xf4>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7d1b      	ldrb	r3, [r3, #20]
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	d003      	beq.n	800e4fe <tcp_close_shutdown+0x36>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	2b07      	cmp	r3, #7
 800e4fc:	d15e      	bne.n	800e5bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e502:	2b00      	cmp	r3, #0
 800e504:	d104      	bne.n	800e510 <tcp_close_shutdown+0x48>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e50a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e50e:	d055      	beq.n	800e5bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8b5b      	ldrh	r3, [r3, #26]
 800e514:	f003 0310 	and.w	r3, r3, #16
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d106      	bne.n	800e52a <tcp_close_shutdown+0x62>
 800e51c:	4b52      	ldr	r3, [pc, #328]	; (800e668 <tcp_close_shutdown+0x1a0>)
 800e51e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e522:	4954      	ldr	r1, [pc, #336]	; (800e674 <tcp_close_shutdown+0x1ac>)
 800e524:	4852      	ldr	r0, [pc, #328]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e526:	f008 ffe3 	bl	80174f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e532:	687d      	ldr	r5, [r7, #4]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3304      	adds	r3, #4
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	8ad2      	ldrh	r2, [r2, #22]
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	8b09      	ldrh	r1, [r1, #24]
 800e540:	9102      	str	r1, [sp, #8]
 800e542:	9201      	str	r2, [sp, #4]
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	462b      	mov	r3, r5
 800e548:	4622      	mov	r2, r4
 800e54a:	4601      	mov	r1, r0
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f005 fe2b 	bl	80141a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f001 fbe6 	bl	800fd24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e558:	4b47      	ldr	r3, [pc, #284]	; (800e678 <tcp_close_shutdown+0x1b0>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d105      	bne.n	800e56e <tcp_close_shutdown+0xa6>
 800e562:	4b45      	ldr	r3, [pc, #276]	; (800e678 <tcp_close_shutdown+0x1b0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	4a43      	ldr	r2, [pc, #268]	; (800e678 <tcp_close_shutdown+0x1b0>)
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	e013      	b.n	800e596 <tcp_close_shutdown+0xce>
 800e56e:	4b42      	ldr	r3, [pc, #264]	; (800e678 <tcp_close_shutdown+0x1b0>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60fb      	str	r3, [r7, #12]
 800e574:	e00c      	b.n	800e590 <tcp_close_shutdown+0xc8>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d104      	bne.n	800e58a <tcp_close_shutdown+0xc2>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68da      	ldr	r2, [r3, #12]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	60da      	str	r2, [r3, #12]
 800e588:	e005      	b.n	800e596 <tcp_close_shutdown+0xce>
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	60fb      	str	r3, [r7, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1ef      	bne.n	800e576 <tcp_close_shutdown+0xae>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	60da      	str	r2, [r3, #12]
 800e59c:	4b37      	ldr	r3, [pc, #220]	; (800e67c <tcp_close_shutdown+0x1b4>)
 800e59e:	2201      	movs	r2, #1
 800e5a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e5a2:	4b37      	ldr	r3, [pc, #220]	; (800e680 <tcp_close_shutdown+0x1b8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d102      	bne.n	800e5b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e5ac:	f004 f87e 	bl	80126ac <tcp_trigger_input_pcb_close>
 800e5b0:	e002      	b.n	800e5b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff fed6 	bl	800e364 <tcp_free>
      }
      return ERR_OK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e050      	b.n	800e65e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	d03b      	beq.n	800e63c <tcp_close_shutdown+0x174>
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	dc44      	bgt.n	800e652 <tcp_close_shutdown+0x18a>
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <tcp_close_shutdown+0x10a>
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d02a      	beq.n	800e626 <tcp_close_shutdown+0x15e>
 800e5d0:	e03f      	b.n	800e652 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	8adb      	ldrh	r3, [r3, #22]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d021      	beq.n	800e61e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5da:	4b2a      	ldr	r3, [pc, #168]	; (800e684 <tcp_close_shutdown+0x1bc>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d105      	bne.n	800e5f0 <tcp_close_shutdown+0x128>
 800e5e4:	4b27      	ldr	r3, [pc, #156]	; (800e684 <tcp_close_shutdown+0x1bc>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	4a26      	ldr	r2, [pc, #152]	; (800e684 <tcp_close_shutdown+0x1bc>)
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	e013      	b.n	800e618 <tcp_close_shutdown+0x150>
 800e5f0:	4b24      	ldr	r3, [pc, #144]	; (800e684 <tcp_close_shutdown+0x1bc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	60bb      	str	r3, [r7, #8]
 800e5f6:	e00c      	b.n	800e612 <tcp_close_shutdown+0x14a>
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d104      	bne.n	800e60c <tcp_close_shutdown+0x144>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	68da      	ldr	r2, [r3, #12]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	60da      	str	r2, [r3, #12]
 800e60a:	e005      	b.n	800e618 <tcp_close_shutdown+0x150>
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	60bb      	str	r3, [r7, #8]
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1ef      	bne.n	800e5f8 <tcp_close_shutdown+0x130>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff fea0 	bl	800e364 <tcp_free>
      break;
 800e624:	e01a      	b.n	800e65c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7ff ff14 	bl	800e454 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e62c:	6879      	ldr	r1, [r7, #4]
 800e62e:	4816      	ldr	r0, [pc, #88]	; (800e688 <tcp_close_shutdown+0x1c0>)
 800e630:	f001 fbc8 	bl	800fdc4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f7ff feb1 	bl	800e39c <tcp_free_listen>
      break;
 800e63a:	e00f      	b.n	800e65c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e63c:	6879      	ldr	r1, [r7, #4]
 800e63e:	480e      	ldr	r0, [pc, #56]	; (800e678 <tcp_close_shutdown+0x1b0>)
 800e640:	f001 fbc0 	bl	800fdc4 <tcp_pcb_remove>
 800e644:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <tcp_close_shutdown+0x1b4>)
 800e646:	2201      	movs	r2, #1
 800e648:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7ff fe8a 	bl	800e364 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e650:	e004      	b.n	800e65c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f81a 	bl	800e68c <tcp_close_shutdown_fin>
 800e658:	4603      	mov	r3, r0
 800e65a:	e000      	b.n	800e65e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bdb0      	pop	{r4, r5, r7, pc}
 800e666:	bf00      	nop
 800e668:	0801bb4c 	.word	0x0801bb4c
 800e66c:	0801bc20 	.word	0x0801bc20
 800e670:	0801bb90 	.word	0x0801bb90
 800e674:	0801bc40 	.word	0x0801bc40
 800e678:	20011ba4 	.word	0x20011ba4
 800e67c:	20011bac 	.word	0x20011bac
 800e680:	20011be4 	.word	0x20011be4
 800e684:	20011b9c 	.word	0x20011b9c
 800e688:	20011ba0 	.word	0x20011ba0

0800e68c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d106      	bne.n	800e6a8 <tcp_close_shutdown_fin+0x1c>
 800e69a:	4b2e      	ldr	r3, [pc, #184]	; (800e754 <tcp_close_shutdown_fin+0xc8>)
 800e69c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e6a0:	492d      	ldr	r1, [pc, #180]	; (800e758 <tcp_close_shutdown_fin+0xcc>)
 800e6a2:	482e      	ldr	r0, [pc, #184]	; (800e75c <tcp_close_shutdown_fin+0xd0>)
 800e6a4:	f008 ff24 	bl	80174f0 <iprintf>

  switch (pcb->state) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	7d1b      	ldrb	r3, [r3, #20]
 800e6ac:	2b07      	cmp	r3, #7
 800e6ae:	d020      	beq.n	800e6f2 <tcp_close_shutdown_fin+0x66>
 800e6b0:	2b07      	cmp	r3, #7
 800e6b2:	dc2b      	bgt.n	800e70c <tcp_close_shutdown_fin+0x80>
 800e6b4:	2b03      	cmp	r3, #3
 800e6b6:	d002      	beq.n	800e6be <tcp_close_shutdown_fin+0x32>
 800e6b8:	2b04      	cmp	r3, #4
 800e6ba:	d00d      	beq.n	800e6d8 <tcp_close_shutdown_fin+0x4c>
 800e6bc:	e026      	b.n	800e70c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f004 fe5e 	bl	8013380 <tcp_send_fin>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d11f      	bne.n	800e710 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2205      	movs	r2, #5
 800e6d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6d6:	e01b      	b.n	800e710 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f004 fe51 	bl	8013380 <tcp_send_fin>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d114      	bne.n	800e714 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2205      	movs	r2, #5
 800e6ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6f0:	e010      	b.n	800e714 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f004 fe44 	bl	8013380 <tcp_send_fin>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d109      	bne.n	800e718 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2209      	movs	r2, #9
 800e708:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e70a:	e005      	b.n	800e718 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	e01c      	b.n	800e74a <tcp_close_shutdown_fin+0xbe>
      break;
 800e710:	bf00      	nop
 800e712:	e002      	b.n	800e71a <tcp_close_shutdown_fin+0x8e>
      break;
 800e714:	bf00      	nop
 800e716:	e000      	b.n	800e71a <tcp_close_shutdown_fin+0x8e>
      break;
 800e718:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d103      	bne.n	800e72a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f004 ff6a 	bl	80135fc <tcp_output>
 800e728:	e00d      	b.n	800e746 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e72e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e732:	d108      	bne.n	800e746 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	8b5b      	ldrh	r3, [r3, #26]
 800e738:	f043 0308 	orr.w	r3, r3, #8
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	e001      	b.n	800e74a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	0801bb4c 	.word	0x0801bb4c
 800e758:	0801bbfc 	.word	0x0801bbfc
 800e75c:	0801bb90 	.word	0x0801bb90

0800e760 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d109      	bne.n	800e782 <tcp_close+0x22>
 800e76e:	4b0f      	ldr	r3, [pc, #60]	; (800e7ac <tcp_close+0x4c>)
 800e770:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e774:	490e      	ldr	r1, [pc, #56]	; (800e7b0 <tcp_close+0x50>)
 800e776:	480f      	ldr	r0, [pc, #60]	; (800e7b4 <tcp_close+0x54>)
 800e778:	f008 feba 	bl	80174f0 <iprintf>
 800e77c:	f06f 030f 	mvn.w	r3, #15
 800e780:	e00f      	b.n	800e7a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	7d1b      	ldrb	r3, [r3, #20]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d006      	beq.n	800e798 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8b5b      	ldrh	r3, [r3, #26]
 800e78e:	f043 0310 	orr.w	r3, r3, #16
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e798:	2101      	movs	r1, #1
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff fe94 	bl	800e4c8 <tcp_close_shutdown>
 800e7a0:	4603      	mov	r3, r0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	0801bb4c 	.word	0x0801bb4c
 800e7b0:	0801bc5c 	.word	0x0801bc5c
 800e7b4:	0801bb90 	.word	0x0801bb90

0800e7b8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d109      	bne.n	800e7de <tcp_shutdown+0x26>
 800e7ca:	4b26      	ldr	r3, [pc, #152]	; (800e864 <tcp_shutdown+0xac>)
 800e7cc:	f240 2207 	movw	r2, #519	; 0x207
 800e7d0:	4925      	ldr	r1, [pc, #148]	; (800e868 <tcp_shutdown+0xb0>)
 800e7d2:	4826      	ldr	r0, [pc, #152]	; (800e86c <tcp_shutdown+0xb4>)
 800e7d4:	f008 fe8c 	bl	80174f0 <iprintf>
 800e7d8:	f06f 030f 	mvn.w	r3, #15
 800e7dc:	e03d      	b.n	800e85a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	7d1b      	ldrb	r3, [r3, #20]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d102      	bne.n	800e7ec <tcp_shutdown+0x34>
    return ERR_CONN;
 800e7e6:	f06f 030a 	mvn.w	r3, #10
 800e7ea:	e036      	b.n	800e85a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d01b      	beq.n	800e82a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	8b5b      	ldrh	r3, [r3, #26]
 800e7f6:	f043 0310 	orr.w	r3, r3, #16
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d005      	beq.n	800e812 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e806:	2101      	movs	r1, #1
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fe5d 	bl	800e4c8 <tcp_close_shutdown>
 800e80e:	4603      	mov	r3, r0
 800e810:	e023      	b.n	800e85a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e816:	2b00      	cmp	r3, #0
 800e818:	d007      	beq.n	800e82a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff faf4 	bl	800de0c <pbuf_free>
      pcb->refused_data = NULL;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d013      	beq.n	800e858 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b04      	cmp	r3, #4
 800e836:	dc02      	bgt.n	800e83e <tcp_shutdown+0x86>
 800e838:	2b03      	cmp	r3, #3
 800e83a:	da02      	bge.n	800e842 <tcp_shutdown+0x8a>
 800e83c:	e009      	b.n	800e852 <tcp_shutdown+0x9a>
 800e83e:	2b07      	cmp	r3, #7
 800e840:	d107      	bne.n	800e852 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	b2db      	uxtb	r3, r3
 800e846:	4619      	mov	r1, r3
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff fe3d 	bl	800e4c8 <tcp_close_shutdown>
 800e84e:	4603      	mov	r3, r0
 800e850:	e003      	b.n	800e85a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e852:	f06f 030a 	mvn.w	r3, #10
 800e856:	e000      	b.n	800e85a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	0801bb4c 	.word	0x0801bb4c
 800e868:	0801bc74 	.word	0x0801bc74
 800e86c:	0801bb90 	.word	0x0801bb90

0800e870 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b08e      	sub	sp, #56	; 0x38
 800e874:	af04      	add	r7, sp, #16
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d107      	bne.n	800e890 <tcp_abandon+0x20>
 800e880:	4b52      	ldr	r3, [pc, #328]	; (800e9cc <tcp_abandon+0x15c>)
 800e882:	f240 223d 	movw	r2, #573	; 0x23d
 800e886:	4952      	ldr	r1, [pc, #328]	; (800e9d0 <tcp_abandon+0x160>)
 800e888:	4852      	ldr	r0, [pc, #328]	; (800e9d4 <tcp_abandon+0x164>)
 800e88a:	f008 fe31 	bl	80174f0 <iprintf>
 800e88e:	e099      	b.n	800e9c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	7d1b      	ldrb	r3, [r3, #20]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d106      	bne.n	800e8a6 <tcp_abandon+0x36>
 800e898:	4b4c      	ldr	r3, [pc, #304]	; (800e9cc <tcp_abandon+0x15c>)
 800e89a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e89e:	494e      	ldr	r1, [pc, #312]	; (800e9d8 <tcp_abandon+0x168>)
 800e8a0:	484c      	ldr	r0, [pc, #304]	; (800e9d4 <tcp_abandon+0x164>)
 800e8a2:	f008 fe25 	bl	80174f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7d1b      	ldrb	r3, [r3, #20]
 800e8aa:	2b0a      	cmp	r3, #10
 800e8ac:	d107      	bne.n	800e8be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e8ae:	6879      	ldr	r1, [r7, #4]
 800e8b0:	484a      	ldr	r0, [pc, #296]	; (800e9dc <tcp_abandon+0x16c>)
 800e8b2:	f001 fa87 	bl	800fdc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff fd54 	bl	800e364 <tcp_free>
 800e8bc:	e082      	b.n	800e9c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	691b      	ldr	r3, [r3, #16]
 800e8de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d126      	bne.n	800e936 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8adb      	ldrh	r3, [r3, #22]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d02e      	beq.n	800e94e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8f0:	4b3b      	ldr	r3, [pc, #236]	; (800e9e0 <tcp_abandon+0x170>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d105      	bne.n	800e906 <tcp_abandon+0x96>
 800e8fa:	4b39      	ldr	r3, [pc, #228]	; (800e9e0 <tcp_abandon+0x170>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	4a37      	ldr	r2, [pc, #220]	; (800e9e0 <tcp_abandon+0x170>)
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	e013      	b.n	800e92e <tcp_abandon+0xbe>
 800e906:	4b36      	ldr	r3, [pc, #216]	; (800e9e0 <tcp_abandon+0x170>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	61fb      	str	r3, [r7, #28]
 800e90c:	e00c      	b.n	800e928 <tcp_abandon+0xb8>
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	429a      	cmp	r2, r3
 800e916:	d104      	bne.n	800e922 <tcp_abandon+0xb2>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	68da      	ldr	r2, [r3, #12]
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	60da      	str	r2, [r3, #12]
 800e920:	e005      	b.n	800e92e <tcp_abandon+0xbe>
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	61fb      	str	r3, [r7, #28]
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1ef      	bne.n	800e90e <tcp_abandon+0x9e>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	60da      	str	r2, [r3, #12]
 800e934:	e00b      	b.n	800e94e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	8adb      	ldrh	r3, [r3, #22]
 800e93e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	4828      	ldr	r0, [pc, #160]	; (800e9e4 <tcp_abandon+0x174>)
 800e944:	f001 fa3e 	bl	800fdc4 <tcp_pcb_remove>
 800e948:	4b27      	ldr	r3, [pc, #156]	; (800e9e8 <tcp_abandon+0x178>)
 800e94a:	2201      	movs	r2, #1
 800e94c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e952:	2b00      	cmp	r3, #0
 800e954:	d004      	beq.n	800e960 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 ff12 	bl	800f784 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e964:	2b00      	cmp	r3, #0
 800e966:	d004      	beq.n	800e972 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 ff09 	bl	800f784 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e976:	2b00      	cmp	r3, #0
 800e978:	d004      	beq.n	800e984 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 ff00 	bl	800f784 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	2b00      	cmp	r3, #0
 800e988:	d00e      	beq.n	800e9a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	3304      	adds	r3, #4
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	8b12      	ldrh	r2, [r2, #24]
 800e994:	9202      	str	r2, [sp, #8]
 800e996:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e998:	9201      	str	r2, [sp, #4]
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	460b      	mov	r3, r1
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	69b9      	ldr	r1, [r7, #24]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f005 fc00 	bl	80141a8 <tcp_rst>
    }
    last_state = pcb->state;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	7d1b      	ldrb	r3, [r3, #20]
 800e9ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7ff fcd8 	bl	800e364 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d004      	beq.n	800e9c4 <tcp_abandon+0x154>
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	f06f 010c 	mvn.w	r1, #12
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	4798      	blx	r3
  }
}
 800e9c4:	3728      	adds	r7, #40	; 0x28
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	0801bb4c 	.word	0x0801bb4c
 800e9d0:	0801bc90 	.word	0x0801bc90
 800e9d4:	0801bb90 	.word	0x0801bb90
 800e9d8:	0801bcac 	.word	0x0801bcac
 800e9dc:	20011ba8 	.word	0x20011ba8
 800e9e0:	20011b9c 	.word	0x20011b9c
 800e9e4:	20011ba4 	.word	0x20011ba4
 800e9e8:	20011bac 	.word	0x20011bac

0800e9ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7ff ff3a 	bl	800e870 <tcp_abandon>
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b088      	sub	sp, #32
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ea12:	2304      	movs	r3, #4
 800ea14:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d101      	bne.n	800ea20 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ea1c:	4b3e      	ldr	r3, [pc, #248]	; (800eb18 <tcp_bind+0x114>)
 800ea1e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d109      	bne.n	800ea3a <tcp_bind+0x36>
 800ea26:	4b3d      	ldr	r3, [pc, #244]	; (800eb1c <tcp_bind+0x118>)
 800ea28:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ea2c:	493c      	ldr	r1, [pc, #240]	; (800eb20 <tcp_bind+0x11c>)
 800ea2e:	483d      	ldr	r0, [pc, #244]	; (800eb24 <tcp_bind+0x120>)
 800ea30:	f008 fd5e 	bl	80174f0 <iprintf>
 800ea34:	f06f 030f 	mvn.w	r3, #15
 800ea38:	e06a      	b.n	800eb10 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	7d1b      	ldrb	r3, [r3, #20]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <tcp_bind+0x52>
 800ea42:	4b36      	ldr	r3, [pc, #216]	; (800eb1c <tcp_bind+0x118>)
 800ea44:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ea48:	4937      	ldr	r1, [pc, #220]	; (800eb28 <tcp_bind+0x124>)
 800ea4a:	4836      	ldr	r0, [pc, #216]	; (800eb24 <tcp_bind+0x120>)
 800ea4c:	f008 fd50 	bl	80174f0 <iprintf>
 800ea50:	f06f 0305 	mvn.w	r3, #5
 800ea54:	e05c      	b.n	800eb10 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ea56:	88fb      	ldrh	r3, [r7, #6]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d109      	bne.n	800ea70 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ea5c:	f000 f914 	bl	800ec88 <tcp_new_port>
 800ea60:	4603      	mov	r3, r0
 800ea62:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea64:	88fb      	ldrh	r3, [r7, #6]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d135      	bne.n	800ead6 <tcp_bind+0xd2>
      return ERR_BUF;
 800ea6a:	f06f 0301 	mvn.w	r3, #1
 800ea6e:	e04f      	b.n	800eb10 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ea70:	2300      	movs	r3, #0
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	e02b      	b.n	800eace <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea76:	4a2d      	ldr	r2, [pc, #180]	; (800eb2c <tcp_bind+0x128>)
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	e01e      	b.n	800eac2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	8adb      	ldrh	r3, [r3, #22]
 800ea88:	88fa      	ldrh	r2, [r7, #6]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d116      	bne.n	800eabc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea8e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d010      	beq.n	800eab6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00c      	beq.n	800eab6 <tcp_bind+0xb2>
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d009      	beq.n	800eab6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d005      	beq.n	800eab6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d102      	bne.n	800eabc <tcp_bind+0xb8>
              return ERR_USE;
 800eab6:	f06f 0307 	mvn.w	r3, #7
 800eaba:	e029      	b.n	800eb10 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	61bb      	str	r3, [r7, #24]
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1dd      	bne.n	800ea84 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	3301      	adds	r3, #1
 800eacc:	61fb      	str	r3, [r7, #28]
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	dbcf      	blt.n	800ea76 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00c      	beq.n	800eaf6 <tcp_bind+0xf2>
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d008      	beq.n	800eaf6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d002      	beq.n	800eaf0 <tcp_bind+0xec>
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	e000      	b.n	800eaf2 <tcp_bind+0xee>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	88fa      	ldrh	r2, [r7, #6]
 800eafa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800eafc:	4b0c      	ldr	r3, [pc, #48]	; (800eb30 <tcp_bind+0x12c>)
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	60da      	str	r2, [r3, #12]
 800eb04:	4a0a      	ldr	r2, [pc, #40]	; (800eb30 <tcp_bind+0x12c>)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6013      	str	r3, [r2, #0]
 800eb0a:	f005 fd0f 	bl	801452c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	0801d8d0 	.word	0x0801d8d0
 800eb1c:	0801bb4c 	.word	0x0801bb4c
 800eb20:	0801bce0 	.word	0x0801bce0
 800eb24:	0801bb90 	.word	0x0801bb90
 800eb28:	0801bcf8 	.word	0x0801bcf8
 800eb2c:	0801d8a8 	.word	0x0801d8a8
 800eb30:	20011b9c 	.word	0x20011b9c

0800eb34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <tcp_update_rcv_ann_wnd+0x1c>
 800eb42:	4b25      	ldr	r3, [pc, #148]	; (800ebd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800eb44:	f240 32a6 	movw	r2, #934	; 0x3a6
 800eb48:	4924      	ldr	r1, [pc, #144]	; (800ebdc <tcp_update_rcv_ann_wnd+0xa8>)
 800eb4a:	4825      	ldr	r0, [pc, #148]	; (800ebe0 <tcp_update_rcv_ann_wnd+0xac>)
 800eb4c:	f008 fcd0 	bl	80174f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800eb58:	4413      	add	r3, r2
 800eb5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800eb64:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800eb68:	bf28      	it	cs
 800eb6a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800eb6e:	b292      	uxth	r2, r2
 800eb70:	4413      	add	r3, r2
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	db08      	blt.n	800eb8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	e020      	b.n	800ebce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dd03      	ble.n	800eba2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eba0:	e014      	b.n	800ebcc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebb4:	d306      	bcc.n	800ebc4 <tcp_update_rcv_ann_wnd+0x90>
 800ebb6:	4b08      	ldr	r3, [pc, #32]	; (800ebd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ebb8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ebbc:	4909      	ldr	r1, [pc, #36]	; (800ebe4 <tcp_update_rcv_ann_wnd+0xb0>)
 800ebbe:	4808      	ldr	r0, [pc, #32]	; (800ebe0 <tcp_update_rcv_ann_wnd+0xac>)
 800ebc0:	f008 fc96 	bl	80174f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ebcc:	2300      	movs	r3, #0
  }
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	0801bb4c 	.word	0x0801bb4c
 800ebdc:	0801bda8 	.word	0x0801bda8
 800ebe0:	0801bb90 	.word	0x0801bb90
 800ebe4:	0801bdcc 	.word	0x0801bdcc

0800ebe8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d107      	bne.n	800ec0a <tcp_recved+0x22>
 800ebfa:	4b1f      	ldr	r3, [pc, #124]	; (800ec78 <tcp_recved+0x90>)
 800ebfc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ec00:	491e      	ldr	r1, [pc, #120]	; (800ec7c <tcp_recved+0x94>)
 800ec02:	481f      	ldr	r0, [pc, #124]	; (800ec80 <tcp_recved+0x98>)
 800ec04:	f008 fc74 	bl	80174f0 <iprintf>
 800ec08:	e032      	b.n	800ec70 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	7d1b      	ldrb	r3, [r3, #20]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d106      	bne.n	800ec20 <tcp_recved+0x38>
 800ec12:	4b19      	ldr	r3, [pc, #100]	; (800ec78 <tcp_recved+0x90>)
 800ec14:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ec18:	491a      	ldr	r1, [pc, #104]	; (800ec84 <tcp_recved+0x9c>)
 800ec1a:	4819      	ldr	r0, [pc, #100]	; (800ec80 <tcp_recved+0x98>)
 800ec1c:	f008 fc68 	bl	80174f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec24:	887b      	ldrh	r3, [r7, #2]
 800ec26:	4413      	add	r3, r2
 800ec28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ec2a:	89fb      	ldrh	r3, [r7, #14]
 800ec2c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec30:	d804      	bhi.n	800ec3c <tcp_recved+0x54>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec36:	89fa      	ldrh	r2, [r7, #14]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d204      	bcs.n	800ec46 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ec42:	851a      	strh	r2, [r3, #40]	; 0x28
 800ec44:	e002      	b.n	800ec4c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	89fa      	ldrh	r2, [r7, #14]
 800ec4a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff ff71 	bl	800eb34 <tcp_update_rcv_ann_wnd>
 800ec52:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ec5a:	d309      	bcc.n	800ec70 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	8b5b      	ldrh	r3, [r3, #26]
 800ec60:	f043 0302 	orr.w	r3, r3, #2
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f004 fcc6 	bl	80135fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	0801bb4c 	.word	0x0801bb4c
 800ec7c:	0801bde8 	.word	0x0801bde8
 800ec80:	0801bb90 	.word	0x0801bb90
 800ec84:	0801be00 	.word	0x0801be00

0800ec88 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ec92:	4b1e      	ldr	r3, [pc, #120]	; (800ed0c <tcp_new_port+0x84>)
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	3301      	adds	r3, #1
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	4b1c      	ldr	r3, [pc, #112]	; (800ed0c <tcp_new_port+0x84>)
 800ec9c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ec9e:	4b1b      	ldr	r3, [pc, #108]	; (800ed0c <tcp_new_port+0x84>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d103      	bne.n	800ecb2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ecaa:	4b18      	ldr	r3, [pc, #96]	; (800ed0c <tcp_new_port+0x84>)
 800ecac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ecb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	71fb      	strb	r3, [r7, #7]
 800ecb6:	e01e      	b.n	800ecf6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ecb8:	79fb      	ldrb	r3, [r7, #7]
 800ecba:	4a15      	ldr	r2, [pc, #84]	; (800ed10 <tcp_new_port+0x88>)
 800ecbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	603b      	str	r3, [r7, #0]
 800ecc4:	e011      	b.n	800ecea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	8ada      	ldrh	r2, [r3, #22]
 800ecca:	4b10      	ldr	r3, [pc, #64]	; (800ed0c <tcp_new_port+0x84>)
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d108      	bne.n	800ece4 <tcp_new_port+0x5c>
        n++;
 800ecd2:	88bb      	ldrh	r3, [r7, #4]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ecd8:	88bb      	ldrh	r3, [r7, #4]
 800ecda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecde:	d3d8      	bcc.n	800ec92 <tcp_new_port+0xa>
          return 0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	e00d      	b.n	800ed00 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	603b      	str	r3, [r7, #0]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1ea      	bne.n	800ecc6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ecf0:	79fb      	ldrb	r3, [r7, #7]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	71fb      	strb	r3, [r7, #7]
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d9dd      	bls.n	800ecb8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ecfc:	4b03      	ldr	r3, [pc, #12]	; (800ed0c <tcp_new_port+0x84>)
 800ecfe:	881b      	ldrh	r3, [r3, #0]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	20000024 	.word	0x20000024
 800ed10:	0801d8a8 	.word	0x0801d8a8

0800ed14 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b08a      	sub	sp, #40	; 0x28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	4613      	mov	r3, r2
 800ed22:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d109      	bne.n	800ed42 <tcp_connect+0x2e>
 800ed2e:	4b7d      	ldr	r3, [pc, #500]	; (800ef24 <tcp_connect+0x210>)
 800ed30:	f240 4235 	movw	r2, #1077	; 0x435
 800ed34:	497c      	ldr	r1, [pc, #496]	; (800ef28 <tcp_connect+0x214>)
 800ed36:	487d      	ldr	r0, [pc, #500]	; (800ef2c <tcp_connect+0x218>)
 800ed38:	f008 fbda 	bl	80174f0 <iprintf>
 800ed3c:	f06f 030f 	mvn.w	r3, #15
 800ed40:	e0ec      	b.n	800ef1c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d109      	bne.n	800ed5c <tcp_connect+0x48>
 800ed48:	4b76      	ldr	r3, [pc, #472]	; (800ef24 <tcp_connect+0x210>)
 800ed4a:	f240 4236 	movw	r2, #1078	; 0x436
 800ed4e:	4978      	ldr	r1, [pc, #480]	; (800ef30 <tcp_connect+0x21c>)
 800ed50:	4876      	ldr	r0, [pc, #472]	; (800ef2c <tcp_connect+0x218>)
 800ed52:	f008 fbcd 	bl	80174f0 <iprintf>
 800ed56:	f06f 030f 	mvn.w	r3, #15
 800ed5a:	e0df      	b.n	800ef1c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	7d1b      	ldrb	r3, [r3, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d009      	beq.n	800ed78 <tcp_connect+0x64>
 800ed64:	4b6f      	ldr	r3, [pc, #444]	; (800ef24 <tcp_connect+0x210>)
 800ed66:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ed6a:	4972      	ldr	r1, [pc, #456]	; (800ef34 <tcp_connect+0x220>)
 800ed6c:	486f      	ldr	r0, [pc, #444]	; (800ef2c <tcp_connect+0x218>)
 800ed6e:	f008 fbbf 	bl	80174f0 <iprintf>
 800ed72:	f06f 0309 	mvn.w	r3, #9
 800ed76:	e0d1      	b.n	800ef1c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d002      	beq.n	800ed84 <tcp_connect+0x70>
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	e000      	b.n	800ed86 <tcp_connect+0x72>
 800ed84:	2300      	movs	r3, #0
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	88fa      	ldrh	r2, [r7, #6]
 800ed8e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	7a1b      	ldrb	r3, [r3, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d006      	beq.n	800eda6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	7a1b      	ldrb	r3, [r3, #8]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe fca7 	bl	800d6f0 <netif_get_by_index>
 800eda2:	6278      	str	r0, [r7, #36]	; 0x24
 800eda4:	e005      	b.n	800edb2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	3304      	adds	r3, #4
 800edaa:	4618      	mov	r0, r3
 800edac:	f006 fe12 	bl	80159d4 <ip4_route>
 800edb0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800edb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800edb8:	f06f 0303 	mvn.w	r3, #3
 800edbc:	e0ae      	b.n	800ef1c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d003      	beq.n	800edcc <tcp_connect+0xb8>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d111      	bne.n	800edf0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <tcp_connect+0xc4>
 800edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd4:	3304      	adds	r3, #4
 800edd6:	e000      	b.n	800edda <tcp_connect+0xc6>
 800edd8:	2300      	movs	r3, #0
 800edda:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d102      	bne.n	800ede8 <tcp_connect+0xd4>
      return ERR_RTE;
 800ede2:	f06f 0303 	mvn.w	r3, #3
 800ede6:	e099      	b.n	800ef1c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	8adb      	ldrh	r3, [r3, #22]
 800edf4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	8adb      	ldrh	r3, [r3, #22]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10c      	bne.n	800ee18 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800edfe:	f7ff ff43 	bl	800ec88 <tcp_new_port>
 800ee02:	4603      	mov	r3, r0
 800ee04:	461a      	mov	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	8adb      	ldrh	r3, [r3, #22]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d102      	bne.n	800ee18 <tcp_connect+0x104>
      return ERR_BUF;
 800ee12:	f06f 0301 	mvn.w	r3, #1
 800ee16:	e081      	b.n	800ef1c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f001 f867 	bl	800feec <tcp_next_iss>
 800ee1e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	1e5a      	subs	r2, r3, #1
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	1e5a      	subs	r2, r3, #1
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	1e5a      	subs	r2, r3, #1
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee6c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3304      	adds	r3, #4
 800ee76:	461a      	mov	r2, r3
 800ee78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee7a:	f001 f85d 	bl	800ff38 <tcp_eff_send_mss_netif>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	461a      	mov	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ee96:	2102      	movs	r1, #2
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f004 fac1 	bl	8013420 <tcp_enqueue_flags>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800eea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d136      	bne.n	800ef18 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2202      	movs	r2, #2
 800eeae:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800eeb0:	8b7b      	ldrh	r3, [r7, #26]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d021      	beq.n	800eefa <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800eeb6:	4b20      	ldr	r3, [pc, #128]	; (800ef38 <tcp_connect+0x224>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	68fa      	ldr	r2, [r7, #12]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d105      	bne.n	800eecc <tcp_connect+0x1b8>
 800eec0:	4b1d      	ldr	r3, [pc, #116]	; (800ef38 <tcp_connect+0x224>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	4a1c      	ldr	r2, [pc, #112]	; (800ef38 <tcp_connect+0x224>)
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	e013      	b.n	800eef4 <tcp_connect+0x1e0>
 800eecc:	4b1a      	ldr	r3, [pc, #104]	; (800ef38 <tcp_connect+0x224>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	623b      	str	r3, [r7, #32]
 800eed2:	e00c      	b.n	800eeee <tcp_connect+0x1da>
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d104      	bne.n	800eee8 <tcp_connect+0x1d4>
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	68da      	ldr	r2, [r3, #12]
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	60da      	str	r2, [r3, #12]
 800eee6:	e005      	b.n	800eef4 <tcp_connect+0x1e0>
 800eee8:	6a3b      	ldr	r3, [r7, #32]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	623b      	str	r3, [r7, #32]
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1ef      	bne.n	800eed4 <tcp_connect+0x1c0>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2200      	movs	r2, #0
 800eef8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800eefa:	4b10      	ldr	r3, [pc, #64]	; (800ef3c <tcp_connect+0x228>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	60da      	str	r2, [r3, #12]
 800ef02:	4a0e      	ldr	r2, [pc, #56]	; (800ef3c <tcp_connect+0x228>)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	f005 fb10 	bl	801452c <tcp_timer_needed>
 800ef0c:	4b0c      	ldr	r3, [pc, #48]	; (800ef40 <tcp_connect+0x22c>)
 800ef0e:	2201      	movs	r2, #1
 800ef10:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f004 fb72 	bl	80135fc <tcp_output>
  }
  return ret;
 800ef18:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3728      	adds	r7, #40	; 0x28
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	0801bb4c 	.word	0x0801bb4c
 800ef28:	0801be28 	.word	0x0801be28
 800ef2c:	0801bb90 	.word	0x0801bb90
 800ef30:	0801be44 	.word	0x0801be44
 800ef34:	0801be60 	.word	0x0801be60
 800ef38:	20011b9c 	.word	0x20011b9c
 800ef3c:	20011ba4 	.word	0x20011ba4
 800ef40:	20011bac 	.word	0x20011bac

0800ef44 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ef44:	b5b0      	push	{r4, r5, r7, lr}
 800ef46:	b090      	sub	sp, #64	; 0x40
 800ef48:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ef50:	4b94      	ldr	r3, [pc, #592]	; (800f1a4 <tcp_slowtmr+0x260>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3301      	adds	r3, #1
 800ef56:	4a93      	ldr	r2, [pc, #588]	; (800f1a4 <tcp_slowtmr+0x260>)
 800ef58:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ef5a:	4b93      	ldr	r3, [pc, #588]	; (800f1a8 <tcp_slowtmr+0x264>)
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	4b91      	ldr	r3, [pc, #580]	; (800f1a8 <tcp_slowtmr+0x264>)
 800ef64:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ef6a:	4b90      	ldr	r3, [pc, #576]	; (800f1ac <tcp_slowtmr+0x268>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ef70:	e29d      	b.n	800f4ae <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	7d1b      	ldrb	r3, [r3, #20]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <tcp_slowtmr+0x44>
 800ef7a:	4b8d      	ldr	r3, [pc, #564]	; (800f1b0 <tcp_slowtmr+0x26c>)
 800ef7c:	f240 42be 	movw	r2, #1214	; 0x4be
 800ef80:	498c      	ldr	r1, [pc, #560]	; (800f1b4 <tcp_slowtmr+0x270>)
 800ef82:	488d      	ldr	r0, [pc, #564]	; (800f1b8 <tcp_slowtmr+0x274>)
 800ef84:	f008 fab4 	bl	80174f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	7d1b      	ldrb	r3, [r3, #20]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d106      	bne.n	800ef9e <tcp_slowtmr+0x5a>
 800ef90:	4b87      	ldr	r3, [pc, #540]	; (800f1b0 <tcp_slowtmr+0x26c>)
 800ef92:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ef96:	4989      	ldr	r1, [pc, #548]	; (800f1bc <tcp_slowtmr+0x278>)
 800ef98:	4887      	ldr	r0, [pc, #540]	; (800f1b8 <tcp_slowtmr+0x274>)
 800ef9a:	f008 faa9 	bl	80174f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	7d1b      	ldrb	r3, [r3, #20]
 800efa2:	2b0a      	cmp	r3, #10
 800efa4:	d106      	bne.n	800efb4 <tcp_slowtmr+0x70>
 800efa6:	4b82      	ldr	r3, [pc, #520]	; (800f1b0 <tcp_slowtmr+0x26c>)
 800efa8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800efac:	4984      	ldr	r1, [pc, #528]	; (800f1c0 <tcp_slowtmr+0x27c>)
 800efae:	4882      	ldr	r0, [pc, #520]	; (800f1b8 <tcp_slowtmr+0x274>)
 800efb0:	f008 fa9e 	bl	80174f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	7f9a      	ldrb	r2, [r3, #30]
 800efb8:	4b7b      	ldr	r3, [pc, #492]	; (800f1a8 <tcp_slowtmr+0x264>)
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d105      	bne.n	800efcc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800efca:	e270      	b.n	800f4ae <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800efcc:	4b76      	ldr	r3, [pc, #472]	; (800f1a8 <tcp_slowtmr+0x264>)
 800efce:	781a      	ldrb	r2, [r3, #0]
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	7d1b      	ldrb	r3, [r3, #20]
 800efe4:	2b02      	cmp	r3, #2
 800efe6:	d10a      	bne.n	800effe <tcp_slowtmr+0xba>
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efee:	2b05      	cmp	r3, #5
 800eff0:	d905      	bls.n	800effe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eff6:	3301      	adds	r3, #1
 800eff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800effc:	e11e      	b.n	800f23c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f004:	2b0b      	cmp	r3, #11
 800f006:	d905      	bls.n	800f014 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f00c:	3301      	adds	r3, #1
 800f00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f012:	e113      	b.n	800f23c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d075      	beq.n	800f10a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <tcp_slowtmr+0xf0>
 800f026:	4b62      	ldr	r3, [pc, #392]	; (800f1b0 <tcp_slowtmr+0x26c>)
 800f028:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f02c:	4965      	ldr	r1, [pc, #404]	; (800f1c4 <tcp_slowtmr+0x280>)
 800f02e:	4862      	ldr	r0, [pc, #392]	; (800f1b8 <tcp_slowtmr+0x274>)
 800f030:	f008 fa5e 	bl	80174f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d106      	bne.n	800f04a <tcp_slowtmr+0x106>
 800f03c:	4b5c      	ldr	r3, [pc, #368]	; (800f1b0 <tcp_slowtmr+0x26c>)
 800f03e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f042:	4961      	ldr	r1, [pc, #388]	; (800f1c8 <tcp_slowtmr+0x284>)
 800f044:	485c      	ldr	r0, [pc, #368]	; (800f1b8 <tcp_slowtmr+0x274>)
 800f046:	f008 fa53 	bl	80174f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f050:	2b0b      	cmp	r3, #11
 800f052:	d905      	bls.n	800f060 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f058:	3301      	adds	r3, #1
 800f05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f05e:	e0ed      	b.n	800f23c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f066:	3b01      	subs	r3, #1
 800f068:	4a58      	ldr	r2, [pc, #352]	; (800f1cc <tcp_slowtmr+0x288>)
 800f06a:	5cd3      	ldrb	r3, [r2, r3]
 800f06c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f074:	7c7a      	ldrb	r2, [r7, #17]
 800f076:	429a      	cmp	r2, r3
 800f078:	d907      	bls.n	800f08a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f080:	3301      	adds	r3, #1
 800f082:	b2da      	uxtb	r2, r3
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f090:	7c7a      	ldrb	r2, [r7, #17]
 800f092:	429a      	cmp	r2, r3
 800f094:	f200 80d2 	bhi.w	800f23c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f098:	2301      	movs	r3, #1
 800f09a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d108      	bne.n	800f0b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f0a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0a8:	f005 f972 	bl	8014390 <tcp_zero_window_probe>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d014      	beq.n	800f0dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	623b      	str	r3, [r7, #32]
 800f0b6:	e011      	b.n	800f0dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0be:	4619      	mov	r1, r3
 800f0c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0c2:	f004 f815 	bl	80130f0 <tcp_split_unsent_seg>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d107      	bne.n	800f0dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f0cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0ce:	f004 fa95 	bl	80135fc <tcp_output>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f000 80ac 	beq.w	800f23c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f0f2:	2b06      	cmp	r3, #6
 800f0f4:	f200 80a2 	bhi.w	800f23c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f0fe:	3301      	adds	r3, #1
 800f100:	b2da      	uxtb	r2, r3
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f108:	e098      	b.n	800f23c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f110:	2b00      	cmp	r3, #0
 800f112:	db0f      	blt.n	800f134 <tcp_slowtmr+0x1f0>
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f11a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f11e:	4293      	cmp	r3, r2
 800f120:	d008      	beq.n	800f134 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f128:	b29b      	uxth	r3, r3
 800f12a:	3301      	adds	r3, #1
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	b21a      	sxth	r2, r3
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f140:	429a      	cmp	r2, r3
 800f142:	db7b      	blt.n	800f23c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f146:	f004 fd5d 	bl	8013c04 <tcp_rexmit_rto_prepare>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d007      	beq.n	800f160 <tcp_slowtmr+0x21c>
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f154:	2b00      	cmp	r3, #0
 800f156:	d171      	bne.n	800f23c <tcp_slowtmr+0x2f8>
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d06d      	beq.n	800f23c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	7d1b      	ldrb	r3, [r3, #20]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d03a      	beq.n	800f1de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f16e:	2b0c      	cmp	r3, #12
 800f170:	bf28      	it	cs
 800f172:	230c      	movcs	r3, #12
 800f174:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f17c:	10db      	asrs	r3, r3, #3
 800f17e:	b21b      	sxth	r3, r3
 800f180:	461a      	mov	r2, r3
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f188:	4413      	add	r3, r2
 800f18a:	7efa      	ldrb	r2, [r7, #27]
 800f18c:	4910      	ldr	r1, [pc, #64]	; (800f1d0 <tcp_slowtmr+0x28c>)
 800f18e:	5c8a      	ldrb	r2, [r1, r2]
 800f190:	4093      	lsls	r3, r2
 800f192:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f19a:	4293      	cmp	r3, r2
 800f19c:	dc1a      	bgt.n	800f1d4 <tcp_slowtmr+0x290>
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	b21a      	sxth	r2, r3
 800f1a2:	e019      	b.n	800f1d8 <tcp_slowtmr+0x294>
 800f1a4:	20011b98 	.word	0x20011b98
 800f1a8:	20011bae 	.word	0x20011bae
 800f1ac:	20011ba4 	.word	0x20011ba4
 800f1b0:	0801bb4c 	.word	0x0801bb4c
 800f1b4:	0801be90 	.word	0x0801be90
 800f1b8:	0801bb90 	.word	0x0801bb90
 800f1bc:	0801bebc 	.word	0x0801bebc
 800f1c0:	0801bee8 	.word	0x0801bee8
 800f1c4:	0801bf18 	.word	0x0801bf18
 800f1c8:	0801bf4c 	.word	0x0801bf4c
 800f1cc:	0801d8a0 	.word	0x0801d8a0
 800f1d0:	0801d890 	.word	0x0801d890
 800f1d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	bf28      	it	cs
 800f1f4:	4613      	movcs	r3, r2
 800f1f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f1f8:	8a7b      	ldrh	r3, [r7, #18]
 800f1fa:	085b      	lsrs	r3, r3, #1
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f20e:	005b      	lsls	r3, r3, #1
 800f210:	b29b      	uxth	r3, r3
 800f212:	429a      	cmp	r2, r3
 800f214:	d206      	bcs.n	800f224 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f226:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f230:	2200      	movs	r2, #0
 800f232:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f238:	f004 fd54 	bl	8013ce4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b06      	cmp	r3, #6
 800f242:	d111      	bne.n	800f268 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f246:	8b5b      	ldrh	r3, [r3, #26]
 800f248:	f003 0310 	and.w	r3, r3, #16
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d00b      	beq.n	800f268 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f250:	4b9c      	ldr	r3, [pc, #624]	; (800f4c4 <tcp_slowtmr+0x580>)
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	2b28      	cmp	r3, #40	; 0x28
 800f25c:	d904      	bls.n	800f268 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f262:	3301      	adds	r3, #1
 800f264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	7a5b      	ldrb	r3, [r3, #9]
 800f26c:	f003 0308 	and.w	r3, r3, #8
 800f270:	2b00      	cmp	r3, #0
 800f272:	d04a      	beq.n	800f30a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d003      	beq.n	800f284 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f280:	2b07      	cmp	r3, #7
 800f282:	d142      	bne.n	800f30a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f284:	4b8f      	ldr	r3, [pc, #572]	; (800f4c4 <tcp_slowtmr+0x580>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	6a1b      	ldr	r3, [r3, #32]
 800f28c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f294:	4b8c      	ldr	r3, [pc, #560]	; (800f4c8 <tcp_slowtmr+0x584>)
 800f296:	440b      	add	r3, r1
 800f298:	498c      	ldr	r1, [pc, #560]	; (800f4cc <tcp_slowtmr+0x588>)
 800f29a:	fba1 1303 	umull	r1, r3, r1, r3
 800f29e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d90a      	bls.n	800f2ba <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f2ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2b8:	e027      	b.n	800f30a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2ba:	4b82      	ldr	r3, [pc, #520]	; (800f4c4 <tcp_slowtmr+0x580>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	4b7f      	ldr	r3, [pc, #508]	; (800f4d0 <tcp_slowtmr+0x58c>)
 800f2d4:	fb00 f303 	mul.w	r3, r0, r3
 800f2d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f2da:	497c      	ldr	r1, [pc, #496]	; (800f4cc <tcp_slowtmr+0x588>)
 800f2dc:	fba1 1303 	umull	r1, r3, r1, r3
 800f2e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d911      	bls.n	800f30a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f2e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2e8:	f005 f812 	bl	8014310 <tcp_keepalive>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f2f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d107      	bne.n	800f30a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f300:	3301      	adds	r3, #1
 800f302:	b2da      	uxtb	r2, r3
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d011      	beq.n	800f336 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f312:	4b6c      	ldr	r3, [pc, #432]	; (800f4c4 <tcp_slowtmr+0x580>)
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	6a1b      	ldr	r3, [r3, #32]
 800f31a:	1ad2      	subs	r2, r2, r3
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f322:	4619      	mov	r1, r3
 800f324:	460b      	mov	r3, r1
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	440b      	add	r3, r1
 800f32a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d302      	bcc.n	800f336 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f332:	f000 feab 	bl	801008c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	7d1b      	ldrb	r3, [r3, #20]
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	d10b      	bne.n	800f356 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f33e:	4b61      	ldr	r3, [pc, #388]	; (800f4c4 <tcp_slowtmr+0x580>)
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	2b28      	cmp	r3, #40	; 0x28
 800f34a:	d904      	bls.n	800f356 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f350:	3301      	adds	r3, #1
 800f352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	7d1b      	ldrb	r3, [r3, #20]
 800f35a:	2b09      	cmp	r3, #9
 800f35c:	d10b      	bne.n	800f376 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f35e:	4b59      	ldr	r3, [pc, #356]	; (800f4c4 <tcp_slowtmr+0x580>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	2bf0      	cmp	r3, #240	; 0xf0
 800f36a:	d904      	bls.n	800f376 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f370:	3301      	adds	r3, #1
 800f372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d060      	beq.n	800f440 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f384:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f388:	f000 fccc 	bl	800fd24 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d010      	beq.n	800f3b4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f392:	4b50      	ldr	r3, [pc, #320]	; (800f4d4 <tcp_slowtmr+0x590>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f398:	429a      	cmp	r2, r3
 800f39a:	d106      	bne.n	800f3aa <tcp_slowtmr+0x466>
 800f39c:	4b4e      	ldr	r3, [pc, #312]	; (800f4d8 <tcp_slowtmr+0x594>)
 800f39e:	f240 526d 	movw	r2, #1389	; 0x56d
 800f3a2:	494e      	ldr	r1, [pc, #312]	; (800f4dc <tcp_slowtmr+0x598>)
 800f3a4:	484e      	ldr	r0, [pc, #312]	; (800f4e0 <tcp_slowtmr+0x59c>)
 800f3a6:	f008 f8a3 	bl	80174f0 <iprintf>
        prev->next = pcb->next;
 800f3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ac:	68da      	ldr	r2, [r3, #12]
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	60da      	str	r2, [r3, #12]
 800f3b2:	e00f      	b.n	800f3d4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f3b4:	4b47      	ldr	r3, [pc, #284]	; (800f4d4 <tcp_slowtmr+0x590>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d006      	beq.n	800f3cc <tcp_slowtmr+0x488>
 800f3be:	4b46      	ldr	r3, [pc, #280]	; (800f4d8 <tcp_slowtmr+0x594>)
 800f3c0:	f240 5271 	movw	r2, #1393	; 0x571
 800f3c4:	4947      	ldr	r1, [pc, #284]	; (800f4e4 <tcp_slowtmr+0x5a0>)
 800f3c6:	4846      	ldr	r0, [pc, #280]	; (800f4e0 <tcp_slowtmr+0x59c>)
 800f3c8:	f008 f892 	bl	80174f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	4a40      	ldr	r2, [pc, #256]	; (800f4d4 <tcp_slowtmr+0x590>)
 800f3d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d013      	beq.n	800f404 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f3e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3ec:	8ad2      	ldrh	r2, [r2, #22]
 800f3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3f0:	8b09      	ldrh	r1, [r1, #24]
 800f3f2:	9102      	str	r1, [sp, #8]
 800f3f4:	9201      	str	r2, [sp, #4]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	462b      	mov	r3, r5
 800f3fa:	4622      	mov	r2, r4
 800f3fc:	4601      	mov	r1, r0
 800f3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f400:	f004 fed2 	bl	80141a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	7d1b      	ldrb	r3, [r3, #20]
 800f40e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f412:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f41a:	6838      	ldr	r0, [r7, #0]
 800f41c:	f7fe ffa2 	bl	800e364 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f420:	4b31      	ldr	r3, [pc, #196]	; (800f4e8 <tcp_slowtmr+0x5a4>)
 800f422:	2200      	movs	r2, #0
 800f424:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d004      	beq.n	800f436 <tcp_slowtmr+0x4f2>
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f06f 010c 	mvn.w	r1, #12
 800f432:	68b8      	ldr	r0, [r7, #8]
 800f434:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f436:	4b2c      	ldr	r3, [pc, #176]	; (800f4e8 <tcp_slowtmr+0x5a4>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d037      	beq.n	800f4ae <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f43e:	e592      	b.n	800ef66 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	7f1b      	ldrb	r3, [r3, #28]
 800f44e:	3301      	adds	r3, #1
 800f450:	b2da      	uxtb	r2, r3
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f458:	7f1a      	ldrb	r2, [r3, #28]
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	7f5b      	ldrb	r3, [r3, #29]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d325      	bcc.n	800f4ae <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	2200      	movs	r2, #0
 800f466:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f468:	4b1f      	ldr	r3, [pc, #124]	; (800f4e8 <tcp_slowtmr+0x5a4>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00b      	beq.n	800f490 <tcp_slowtmr+0x54c>
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f480:	6912      	ldr	r2, [r2, #16]
 800f482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f484:	4610      	mov	r0, r2
 800f486:	4798      	blx	r3
 800f488:	4603      	mov	r3, r0
 800f48a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f48e:	e002      	b.n	800f496 <tcp_slowtmr+0x552>
 800f490:	2300      	movs	r3, #0
 800f492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f496:	4b14      	ldr	r3, [pc, #80]	; (800f4e8 <tcp_slowtmr+0x5a4>)
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d000      	beq.n	800f4a0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f49e:	e562      	b.n	800ef66 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f4a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4aa:	f004 f8a7 	bl	80135fc <tcp_output>
  while (pcb != NULL) {
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f47f ad5e 	bne.w	800ef72 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f4ba:	4b0c      	ldr	r3, [pc, #48]	; (800f4ec <tcp_slowtmr+0x5a8>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4c0:	e069      	b.n	800f596 <tcp_slowtmr+0x652>
 800f4c2:	bf00      	nop
 800f4c4:	20011b98 	.word	0x20011b98
 800f4c8:	000a4cb8 	.word	0x000a4cb8
 800f4cc:	10624dd3 	.word	0x10624dd3
 800f4d0:	000124f8 	.word	0x000124f8
 800f4d4:	20011ba4 	.word	0x20011ba4
 800f4d8:	0801bb4c 	.word	0x0801bb4c
 800f4dc:	0801bf84 	.word	0x0801bf84
 800f4e0:	0801bb90 	.word	0x0801bb90
 800f4e4:	0801bfb0 	.word	0x0801bfb0
 800f4e8:	20011bac 	.word	0x20011bac
 800f4ec:	20011ba8 	.word	0x20011ba8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f2:	7d1b      	ldrb	r3, [r3, #20]
 800f4f4:	2b0a      	cmp	r3, #10
 800f4f6:	d006      	beq.n	800f506 <tcp_slowtmr+0x5c2>
 800f4f8:	4b2b      	ldr	r3, [pc, #172]	; (800f5a8 <tcp_slowtmr+0x664>)
 800f4fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f4fe:	492b      	ldr	r1, [pc, #172]	; (800f5ac <tcp_slowtmr+0x668>)
 800f500:	482b      	ldr	r0, [pc, #172]	; (800f5b0 <tcp_slowtmr+0x66c>)
 800f502:	f007 fff5 	bl	80174f0 <iprintf>
    pcb_remove = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f50c:	4b29      	ldr	r3, [pc, #164]	; (800f5b4 <tcp_slowtmr+0x670>)
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	2bf0      	cmp	r3, #240	; 0xf0
 800f518:	d904      	bls.n	800f524 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f51e:	3301      	adds	r3, #1
 800f520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d02f      	beq.n	800f58c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f52e:	f000 fbf9 	bl	800fd24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	2b00      	cmp	r3, #0
 800f536:	d010      	beq.n	800f55a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f538:	4b1f      	ldr	r3, [pc, #124]	; (800f5b8 <tcp_slowtmr+0x674>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f53e:	429a      	cmp	r2, r3
 800f540:	d106      	bne.n	800f550 <tcp_slowtmr+0x60c>
 800f542:	4b19      	ldr	r3, [pc, #100]	; (800f5a8 <tcp_slowtmr+0x664>)
 800f544:	f240 52af 	movw	r2, #1455	; 0x5af
 800f548:	491c      	ldr	r1, [pc, #112]	; (800f5bc <tcp_slowtmr+0x678>)
 800f54a:	4819      	ldr	r0, [pc, #100]	; (800f5b0 <tcp_slowtmr+0x66c>)
 800f54c:	f007 ffd0 	bl	80174f0 <iprintf>
        prev->next = pcb->next;
 800f550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f552:	68da      	ldr	r2, [r3, #12]
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	60da      	str	r2, [r3, #12]
 800f558:	e00f      	b.n	800f57a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f55a:	4b17      	ldr	r3, [pc, #92]	; (800f5b8 <tcp_slowtmr+0x674>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f560:	429a      	cmp	r2, r3
 800f562:	d006      	beq.n	800f572 <tcp_slowtmr+0x62e>
 800f564:	4b10      	ldr	r3, [pc, #64]	; (800f5a8 <tcp_slowtmr+0x664>)
 800f566:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f56a:	4915      	ldr	r1, [pc, #84]	; (800f5c0 <tcp_slowtmr+0x67c>)
 800f56c:	4810      	ldr	r0, [pc, #64]	; (800f5b0 <tcp_slowtmr+0x66c>)
 800f56e:	f007 ffbf 	bl	80174f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	4a10      	ldr	r2, [pc, #64]	; (800f5b8 <tcp_slowtmr+0x674>)
 800f578:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f584:	69f8      	ldr	r0, [r7, #28]
 800f586:	f7fe feed 	bl	800e364 <tcp_free>
 800f58a:	e004      	b.n	800f596 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d1a9      	bne.n	800f4f0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f59c:	bf00      	nop
 800f59e:	bf00      	nop
 800f5a0:	3730      	adds	r7, #48	; 0x30
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	0801bb4c 	.word	0x0801bb4c
 800f5ac:	0801bfdc 	.word	0x0801bfdc
 800f5b0:	0801bb90 	.word	0x0801bb90
 800f5b4:	20011b98 	.word	0x20011b98
 800f5b8:	20011ba8 	.word	0x20011ba8
 800f5bc:	0801c00c 	.word	0x0801c00c
 800f5c0:	0801c034 	.word	0x0801c034

0800f5c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f5ca:	4b2d      	ldr	r3, [pc, #180]	; (800f680 <tcp_fasttmr+0xbc>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	4b2b      	ldr	r3, [pc, #172]	; (800f680 <tcp_fasttmr+0xbc>)
 800f5d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f5d6:	4b2b      	ldr	r3, [pc, #172]	; (800f684 <tcp_fasttmr+0xc0>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f5dc:	e048      	b.n	800f670 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	7f9a      	ldrb	r2, [r3, #30]
 800f5e2:	4b27      	ldr	r3, [pc, #156]	; (800f680 <tcp_fasttmr+0xbc>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d03f      	beq.n	800f66a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f5ea:	4b25      	ldr	r3, [pc, #148]	; (800f680 <tcp_fasttmr+0xbc>)
 800f5ec:	781a      	ldrb	r2, [r3, #0]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	8b5b      	ldrh	r3, [r3, #26]
 800f5f6:	f003 0301 	and.w	r3, r3, #1
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d010      	beq.n	800f620 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	8b5b      	ldrh	r3, [r3, #26]
 800f602:	f043 0302 	orr.w	r3, r3, #2
 800f606:	b29a      	uxth	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f003 fff5 	bl	80135fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	8b5b      	ldrh	r3, [r3, #26]
 800f616:	f023 0303 	bic.w	r3, r3, #3
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8b5b      	ldrh	r3, [r3, #26]
 800f624:	f003 0308 	and.w	r3, r3, #8
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d009      	beq.n	800f640 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	8b5b      	ldrh	r3, [r3, #26]
 800f630:	f023 0308 	bic.w	r3, r3, #8
 800f634:	b29a      	uxth	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7ff f826 	bl	800e68c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00a      	beq.n	800f664 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f64e:	4b0e      	ldr	r3, [pc, #56]	; (800f688 <tcp_fasttmr+0xc4>)
 800f650:	2200      	movs	r2, #0
 800f652:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 f819 	bl	800f68c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f65a:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <tcp_fasttmr+0xc4>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d000      	beq.n	800f664 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f662:	e7b8      	b.n	800f5d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	607b      	str	r3, [r7, #4]
 800f668:	e002      	b.n	800f670 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1b3      	bne.n	800f5de <tcp_fasttmr+0x1a>
    }
  }
}
 800f676:	bf00      	nop
 800f678:	bf00      	nop
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	20011bae 	.word	0x20011bae
 800f684:	20011ba4 	.word	0x20011ba4
 800f688:	20011bac 	.word	0x20011bac

0800f68c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f68c:	b590      	push	{r4, r7, lr}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d109      	bne.n	800f6ae <tcp_process_refused_data+0x22>
 800f69a:	4b37      	ldr	r3, [pc, #220]	; (800f778 <tcp_process_refused_data+0xec>)
 800f69c:	f240 6209 	movw	r2, #1545	; 0x609
 800f6a0:	4936      	ldr	r1, [pc, #216]	; (800f77c <tcp_process_refused_data+0xf0>)
 800f6a2:	4837      	ldr	r0, [pc, #220]	; (800f780 <tcp_process_refused_data+0xf4>)
 800f6a4:	f007 ff24 	bl	80174f0 <iprintf>
 800f6a8:	f06f 030f 	mvn.w	r3, #15
 800f6ac:	e060      	b.n	800f770 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6b2:	7b5b      	ldrb	r3, [r3, #13]
 800f6b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00b      	beq.n	800f6e4 <tcp_process_refused_data+0x58>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6918      	ldr	r0, [r3, #16]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	6879      	ldr	r1, [r7, #4]
 800f6dc:	47a0      	blx	r4
 800f6de:	4603      	mov	r3, r0
 800f6e0:	73fb      	strb	r3, [r7, #15]
 800f6e2:	e007      	b.n	800f6f4 <tcp_process_refused_data+0x68>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	6879      	ldr	r1, [r7, #4]
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	f000 f8a4 	bl	800f838 <tcp_recv_null>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f6f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d12a      	bne.n	800f752 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f6fc:	7bbb      	ldrb	r3, [r7, #14]
 800f6fe:	f003 0320 	and.w	r3, r3, #32
 800f702:	2b00      	cmp	r3, #0
 800f704:	d033      	beq.n	800f76e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f70a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f70e:	d005      	beq.n	800f71c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f714:	3301      	adds	r3, #1
 800f716:	b29a      	uxth	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00b      	beq.n	800f73e <tcp_process_refused_data+0xb2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6918      	ldr	r0, [r3, #16]
 800f730:	2300      	movs	r3, #0
 800f732:	2200      	movs	r2, #0
 800f734:	6879      	ldr	r1, [r7, #4]
 800f736:	47a0      	blx	r4
 800f738:	4603      	mov	r3, r0
 800f73a:	73fb      	strb	r3, [r7, #15]
 800f73c:	e001      	b.n	800f742 <tcp_process_refused_data+0xb6>
 800f73e:	2300      	movs	r3, #0
 800f740:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f746:	f113 0f0d 	cmn.w	r3, #13
 800f74a:	d110      	bne.n	800f76e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f74c:	f06f 030c 	mvn.w	r3, #12
 800f750:	e00e      	b.n	800f770 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f756:	f113 0f0d 	cmn.w	r3, #13
 800f75a:	d102      	bne.n	800f762 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f75c:	f06f 030c 	mvn.w	r3, #12
 800f760:	e006      	b.n	800f770 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f768:	f06f 0304 	mvn.w	r3, #4
 800f76c:	e000      	b.n	800f770 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3714      	adds	r7, #20
 800f774:	46bd      	mov	sp, r7
 800f776:	bd90      	pop	{r4, r7, pc}
 800f778:	0801bb4c 	.word	0x0801bb4c
 800f77c:	0801c05c 	.word	0x0801c05c
 800f780:	0801bb90 	.word	0x0801bb90

0800f784 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f78c:	e007      	b.n	800f79e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f80a 	bl	800f7ae <tcp_seg_free>
    seg = next;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1f4      	bne.n	800f78e <tcp_segs_free+0xa>
  }
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b082      	sub	sp, #8
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00c      	beq.n	800f7d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d004      	beq.n	800f7ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fe fb1f 	bl	800de0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f7ce:	6879      	ldr	r1, [r7, #4]
 800f7d0:	2002      	movs	r0, #2
 800f7d2:	f7fd fc7b 	bl	800d0cc <memp_free>
  }
}
 800f7d6:	bf00      	nop
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
	...

0800f7e0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <tcp_seg_copy+0x1c>
 800f7ee:	4b0f      	ldr	r3, [pc, #60]	; (800f82c <tcp_seg_copy+0x4c>)
 800f7f0:	f240 6282 	movw	r2, #1666	; 0x682
 800f7f4:	490e      	ldr	r1, [pc, #56]	; (800f830 <tcp_seg_copy+0x50>)
 800f7f6:	480f      	ldr	r0, [pc, #60]	; (800f834 <tcp_seg_copy+0x54>)
 800f7f8:	f007 fe7a 	bl	80174f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f7fc:	2002      	movs	r0, #2
 800f7fe:	f7fd fbef 	bl	800cfe0 <memp_malloc>
 800f802:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d101      	bne.n	800f80e <tcp_seg_copy+0x2e>
    return NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	e00a      	b.n	800f824 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f80e:	2210      	movs	r2, #16
 800f810:	6879      	ldr	r1, [r7, #4]
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f007 fda7 	bl	8017366 <memcpy>
  pbuf_ref(cseg->p);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fb9b 	bl	800df58 <pbuf_ref>
  return cseg;
 800f822:	68fb      	ldr	r3, [r7, #12]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	0801bb4c 	.word	0x0801bb4c
 800f830:	0801c0a0 	.word	0x0801c0a0
 800f834:	0801bb90 	.word	0x0801bb90

0800f838 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
 800f844:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d109      	bne.n	800f860 <tcp_recv_null+0x28>
 800f84c:	4b12      	ldr	r3, [pc, #72]	; (800f898 <tcp_recv_null+0x60>)
 800f84e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f852:	4912      	ldr	r1, [pc, #72]	; (800f89c <tcp_recv_null+0x64>)
 800f854:	4812      	ldr	r0, [pc, #72]	; (800f8a0 <tcp_recv_null+0x68>)
 800f856:	f007 fe4b 	bl	80174f0 <iprintf>
 800f85a:	f06f 030f 	mvn.w	r3, #15
 800f85e:	e016      	b.n	800f88e <tcp_recv_null+0x56>

  if (p != NULL) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d009      	beq.n	800f87a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	891b      	ldrh	r3, [r3, #8]
 800f86a:	4619      	mov	r1, r3
 800f86c:	68b8      	ldr	r0, [r7, #8]
 800f86e:	f7ff f9bb 	bl	800ebe8 <tcp_recved>
    pbuf_free(p);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f7fe faca 	bl	800de0c <pbuf_free>
 800f878:	e008      	b.n	800f88c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f87a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d104      	bne.n	800f88c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f882:	68b8      	ldr	r0, [r7, #8]
 800f884:	f7fe ff6c 	bl	800e760 <tcp_close>
 800f888:	4603      	mov	r3, r0
 800f88a:	e000      	b.n	800f88e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	0801bb4c 	.word	0x0801bb4c
 800f89c:	0801c0bc 	.word	0x0801c0bc
 800f8a0:	0801bb90 	.word	0x0801bb90

0800f8a4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f8ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	db01      	blt.n	800f8ba <tcp_kill_prio+0x16>
 800f8b6:	79fb      	ldrb	r3, [r7, #7]
 800f8b8:	e000      	b.n	800f8bc <tcp_kill_prio+0x18>
 800f8ba:	237f      	movs	r3, #127	; 0x7f
 800f8bc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f8be:	7afb      	ldrb	r3, [r7, #11]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d034      	beq.n	800f92e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f8c4:	7afb      	ldrb	r3, [r7, #11]
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8d2:	4b19      	ldr	r3, [pc, #100]	; (800f938 <tcp_kill_prio+0x94>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	617b      	str	r3, [r7, #20]
 800f8d8:	e01f      	b.n	800f91a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	7d5b      	ldrb	r3, [r3, #21]
 800f8de:	7afa      	ldrb	r2, [r7, #11]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d80c      	bhi.n	800f8fe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f8e8:	7afa      	ldrb	r2, [r7, #11]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d112      	bne.n	800f914 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f8ee:	4b13      	ldr	r3, [pc, #76]	; (800f93c <tcp_kill_prio+0x98>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d80a      	bhi.n	800f914 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f8fe:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <tcp_kill_prio+0x98>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	7d5b      	ldrb	r3, [r3, #21]
 800f912:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	617b      	str	r3, [r7, #20]
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1dc      	bne.n	800f8da <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d004      	beq.n	800f930 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f926:	6938      	ldr	r0, [r7, #16]
 800f928:	f7ff f860 	bl	800e9ec <tcp_abort>
 800f92c:	e000      	b.n	800f930 <tcp_kill_prio+0x8c>
    return;
 800f92e:	bf00      	nop
  }
}
 800f930:	3718      	adds	r7, #24
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20011ba4 	.word	0x20011ba4
 800f93c:	20011b98 	.word	0x20011b98

0800f940 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f94a:	79fb      	ldrb	r3, [r7, #7]
 800f94c:	2b08      	cmp	r3, #8
 800f94e:	d009      	beq.n	800f964 <tcp_kill_state+0x24>
 800f950:	79fb      	ldrb	r3, [r7, #7]
 800f952:	2b09      	cmp	r3, #9
 800f954:	d006      	beq.n	800f964 <tcp_kill_state+0x24>
 800f956:	4b1a      	ldr	r3, [pc, #104]	; (800f9c0 <tcp_kill_state+0x80>)
 800f958:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f95c:	4919      	ldr	r1, [pc, #100]	; (800f9c4 <tcp_kill_state+0x84>)
 800f95e:	481a      	ldr	r0, [pc, #104]	; (800f9c8 <tcp_kill_state+0x88>)
 800f960:	f007 fdc6 	bl	80174f0 <iprintf>

  inactivity = 0;
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f968:	2300      	movs	r3, #0
 800f96a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f96c:	4b17      	ldr	r3, [pc, #92]	; (800f9cc <tcp_kill_state+0x8c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	617b      	str	r3, [r7, #20]
 800f972:	e017      	b.n	800f9a4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	7d1b      	ldrb	r3, [r3, #20]
 800f978:	79fa      	ldrb	r2, [r7, #7]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d10f      	bne.n	800f99e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f97e:	4b14      	ldr	r3, [pc, #80]	; (800f9d0 <tcp_kill_state+0x90>)
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d807      	bhi.n	800f99e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f98e:	4b10      	ldr	r3, [pc, #64]	; (800f9d0 <tcp_kill_state+0x90>)
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	6a1b      	ldr	r3, [r3, #32]
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	617b      	str	r3, [r7, #20]
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1e4      	bne.n	800f974 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d003      	beq.n	800f9b8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	6938      	ldr	r0, [r7, #16]
 800f9b4:	f7fe ff5c 	bl	800e870 <tcp_abandon>
  }
}
 800f9b8:	bf00      	nop
 800f9ba:	3718      	adds	r7, #24
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	0801bb4c 	.word	0x0801bb4c
 800f9c4:	0801c0d8 	.word	0x0801c0d8
 800f9c8:	0801bb90 	.word	0x0801bb90
 800f9cc:	20011ba4 	.word	0x20011ba4
 800f9d0:	20011b98 	.word	0x20011b98

0800f9d4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9e2:	4b12      	ldr	r3, [pc, #72]	; (800fa2c <tcp_kill_timewait+0x58>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	e012      	b.n	800fa10 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f9ea:	4b11      	ldr	r3, [pc, #68]	; (800fa30 <tcp_kill_timewait+0x5c>)
 800f9ec:	681a      	ldr	r2, [r3, #0]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d807      	bhi.n	800fa0a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f9fa:	4b0d      	ldr	r3, [pc, #52]	; (800fa30 <tcp_kill_timewait+0x5c>)
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	60fb      	str	r3, [r7, #12]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1e9      	bne.n	800f9ea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d002      	beq.n	800fa22 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa1c:	68b8      	ldr	r0, [r7, #8]
 800fa1e:	f7fe ffe5 	bl	800e9ec <tcp_abort>
  }
}
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20011ba8 	.word	0x20011ba8
 800fa30:	20011b98 	.word	0x20011b98

0800fa34 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fa3a:	4b10      	ldr	r3, [pc, #64]	; (800fa7c <tcp_handle_closepend+0x48>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fa40:	e014      	b.n	800fa6c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	8b5b      	ldrh	r3, [r3, #26]
 800fa4c:	f003 0308 	and.w	r3, r3, #8
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d009      	beq.n	800fa68 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	8b5b      	ldrh	r3, [r3, #26]
 800fa58:	f023 0308 	bic.w	r3, r3, #8
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7fe fe12 	bl	800e68c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1e7      	bne.n	800fa42 <tcp_handle_closepend+0xe>
  }
}
 800fa72:	bf00      	nop
 800fa74:	bf00      	nop
 800fa76:	3708      	adds	r7, #8
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	20011ba4 	.word	0x20011ba4

0800fa80 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	f7fd faa8 	bl	800cfe0 <memp_malloc>
 800fa90:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d126      	bne.n	800fae6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fa98:	f7ff ffcc 	bl	800fa34 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fa9c:	f7ff ff9a 	bl	800f9d4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800faa0:	2000      	movs	r0, #0
 800faa2:	f7fd fa9d 	bl	800cfe0 <memp_malloc>
 800faa6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d11b      	bne.n	800fae6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800faae:	2009      	movs	r0, #9
 800fab0:	f7ff ff46 	bl	800f940 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fab4:	2000      	movs	r0, #0
 800fab6:	f7fd fa93 	bl	800cfe0 <memp_malloc>
 800faba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d111      	bne.n	800fae6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fac2:	2008      	movs	r0, #8
 800fac4:	f7ff ff3c 	bl	800f940 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fac8:	2000      	movs	r0, #0
 800faca:	f7fd fa89 	bl	800cfe0 <memp_malloc>
 800face:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d107      	bne.n	800fae6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff fee3 	bl	800f8a4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fade:	2000      	movs	r0, #0
 800fae0:	f7fd fa7e 	bl	800cfe0 <memp_malloc>
 800fae4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d03f      	beq.n	800fb6c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800faec:	229c      	movs	r2, #156	; 0x9c
 800faee:	2100      	movs	r1, #0
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f007 fc60 	bl	80173b6 <memset>
    pcb->prio = prio;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	79fa      	ldrb	r2, [r7, #7]
 800fafa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fb02:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fb0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	22ff      	movs	r2, #255	; 0xff
 800fb1a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fb22:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2206      	movs	r2, #6
 800fb28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2206      	movs	r2, #6
 800fb30:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb38:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fb42:	4b0d      	ldr	r3, [pc, #52]	; (800fb78 <tcp_alloc+0xf8>)
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fb4a:	4b0c      	ldr	r3, [pc, #48]	; (800fb7c <tcp_alloc+0xfc>)
 800fb4c:	781a      	ldrb	r2, [r3, #0]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fb58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	4a08      	ldr	r2, [pc, #32]	; (800fb80 <tcp_alloc+0x100>)
 800fb60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	4a07      	ldr	r2, [pc, #28]	; (800fb84 <tcp_alloc+0x104>)
 800fb68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20011b98 	.word	0x20011b98
 800fb7c:	20011bae 	.word	0x20011bae
 800fb80:	0800f839 	.word	0x0800f839
 800fb84:	006ddd00 	.word	0x006ddd00

0800fb88 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	4603      	mov	r3, r0
 800fb90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fb92:	2040      	movs	r0, #64	; 0x40
 800fb94:	f7ff ff74 	bl	800fa80 <tcp_alloc>
 800fb98:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d002      	beq.n	800fbba <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	611a      	str	r2, [r3, #16]
  }
}
 800fbba:	bf00      	nop
 800fbbc:	370c      	adds	r7, #12
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
	...

0800fbc8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00e      	beq.n	800fbf6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	7d1b      	ldrb	r3, [r3, #20]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d106      	bne.n	800fbee <tcp_recv+0x26>
 800fbe0:	4b07      	ldr	r3, [pc, #28]	; (800fc00 <tcp_recv+0x38>)
 800fbe2:	f240 72df 	movw	r2, #2015	; 0x7df
 800fbe6:	4907      	ldr	r1, [pc, #28]	; (800fc04 <tcp_recv+0x3c>)
 800fbe8:	4807      	ldr	r0, [pc, #28]	; (800fc08 <tcp_recv+0x40>)
 800fbea:	f007 fc81 	bl	80174f0 <iprintf>
    pcb->recv = recv;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fbf6:	bf00      	nop
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	0801bb4c 	.word	0x0801bb4c
 800fc04:	0801c0e8 	.word	0x0801c0e8
 800fc08:	0801bb90 	.word	0x0801bb90

0800fc0c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d00e      	beq.n	800fc3a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7d1b      	ldrb	r3, [r3, #20]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d106      	bne.n	800fc32 <tcp_sent+0x26>
 800fc24:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <tcp_sent+0x38>)
 800fc26:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fc2a:	4907      	ldr	r1, [pc, #28]	; (800fc48 <tcp_sent+0x3c>)
 800fc2c:	4807      	ldr	r0, [pc, #28]	; (800fc4c <tcp_sent+0x40>)
 800fc2e:	f007 fc5f 	bl	80174f0 <iprintf>
    pcb->sent = sent;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	683a      	ldr	r2, [r7, #0]
 800fc36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fc3a:	bf00      	nop
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	0801bb4c 	.word	0x0801bb4c
 800fc48:	0801c110 	.word	0x0801c110
 800fc4c:	0801bb90 	.word	0x0801bb90

0800fc50 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d00e      	beq.n	800fc7e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	7d1b      	ldrb	r3, [r3, #20]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d106      	bne.n	800fc76 <tcp_err+0x26>
 800fc68:	4b07      	ldr	r3, [pc, #28]	; (800fc88 <tcp_err+0x38>)
 800fc6a:	f640 020d 	movw	r2, #2061	; 0x80d
 800fc6e:	4907      	ldr	r1, [pc, #28]	; (800fc8c <tcp_err+0x3c>)
 800fc70:	4807      	ldr	r0, [pc, #28]	; (800fc90 <tcp_err+0x40>)
 800fc72:	f007 fc3d 	bl	80174f0 <iprintf>
    pcb->errf = err;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fc7e:	bf00      	nop
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	0801bb4c 	.word	0x0801bb4c
 800fc8c:	0801c138 	.word	0x0801c138
 800fc90:	0801bb90 	.word	0x0801bb90

0800fc94 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b085      	sub	sp, #20
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d008      	beq.n	800fcb6 <tcp_accept+0x22>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	7d1b      	ldrb	r3, [r3, #20]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d104      	bne.n	800fcb6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	683a      	ldr	r2, [r7, #0]
 800fcb4:	619a      	str	r2, [r3, #24]
  }
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
	...

0800fcc4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	4613      	mov	r3, r2
 800fcd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d107      	bne.n	800fce8 <tcp_poll+0x24>
 800fcd8:	4b0e      	ldr	r3, [pc, #56]	; (800fd14 <tcp_poll+0x50>)
 800fcda:	f640 023d 	movw	r2, #2109	; 0x83d
 800fcde:	490e      	ldr	r1, [pc, #56]	; (800fd18 <tcp_poll+0x54>)
 800fce0:	480e      	ldr	r0, [pc, #56]	; (800fd1c <tcp_poll+0x58>)
 800fce2:	f007 fc05 	bl	80174f0 <iprintf>
 800fce6:	e011      	b.n	800fd0c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	7d1b      	ldrb	r3, [r3, #20]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d106      	bne.n	800fcfe <tcp_poll+0x3a>
 800fcf0:	4b08      	ldr	r3, [pc, #32]	; (800fd14 <tcp_poll+0x50>)
 800fcf2:	f640 023e 	movw	r2, #2110	; 0x83e
 800fcf6:	490a      	ldr	r1, [pc, #40]	; (800fd20 <tcp_poll+0x5c>)
 800fcf8:	4808      	ldr	r0, [pc, #32]	; (800fd1c <tcp_poll+0x58>)
 800fcfa:	f007 fbf9 	bl	80174f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	79fa      	ldrb	r2, [r7, #7]
 800fd0a:	775a      	strb	r2, [r3, #29]
}
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	0801bb4c 	.word	0x0801bb4c
 800fd18:	0801c160 	.word	0x0801c160
 800fd1c:	0801bb90 	.word	0x0801bb90
 800fd20:	0801c178 	.word	0x0801c178

0800fd24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d107      	bne.n	800fd42 <tcp_pcb_purge+0x1e>
 800fd32:	4b21      	ldr	r3, [pc, #132]	; (800fdb8 <tcp_pcb_purge+0x94>)
 800fd34:	f640 0251 	movw	r2, #2129	; 0x851
 800fd38:	4920      	ldr	r1, [pc, #128]	; (800fdbc <tcp_pcb_purge+0x98>)
 800fd3a:	4821      	ldr	r0, [pc, #132]	; (800fdc0 <tcp_pcb_purge+0x9c>)
 800fd3c:	f007 fbd8 	bl	80174f0 <iprintf>
 800fd40:	e037      	b.n	800fdb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	7d1b      	ldrb	r3, [r3, #20]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d033      	beq.n	800fdb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fd4e:	2b0a      	cmp	r3, #10
 800fd50:	d02f      	beq.n	800fdb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d02b      	beq.n	800fdb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d007      	beq.n	800fd72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe f850 	bl	800de0c <pbuf_free>
      pcb->refused_data = NULL;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d002      	beq.n	800fd80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 f986 	bl	801008c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd86:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fcf9 	bl	800f784 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff fcf4 	bl	800f784 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	66da      	str	r2, [r3, #108]	; 0x6c
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	0801bb4c 	.word	0x0801bb4c
 800fdbc:	0801c198 	.word	0x0801c198
 800fdc0:	0801bb90 	.word	0x0801bb90

0800fdc4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d106      	bne.n	800fde2 <tcp_pcb_remove+0x1e>
 800fdd4:	4b3e      	ldr	r3, [pc, #248]	; (800fed0 <tcp_pcb_remove+0x10c>)
 800fdd6:	f640 0283 	movw	r2, #2179	; 0x883
 800fdda:	493e      	ldr	r1, [pc, #248]	; (800fed4 <tcp_pcb_remove+0x110>)
 800fddc:	483e      	ldr	r0, [pc, #248]	; (800fed8 <tcp_pcb_remove+0x114>)
 800fdde:	f007 fb87 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d106      	bne.n	800fdf6 <tcp_pcb_remove+0x32>
 800fde8:	4b39      	ldr	r3, [pc, #228]	; (800fed0 <tcp_pcb_remove+0x10c>)
 800fdea:	f640 0284 	movw	r2, #2180	; 0x884
 800fdee:	493b      	ldr	r1, [pc, #236]	; (800fedc <tcp_pcb_remove+0x118>)
 800fdf0:	4839      	ldr	r0, [pc, #228]	; (800fed8 <tcp_pcb_remove+0x114>)
 800fdf2:	f007 fb7d 	bl	80174f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	683a      	ldr	r2, [r7, #0]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d105      	bne.n	800fe0c <tcp_pcb_remove+0x48>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68da      	ldr	r2, [r3, #12]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	e013      	b.n	800fe34 <tcp_pcb_remove+0x70>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	60fb      	str	r3, [r7, #12]
 800fe12:	e00c      	b.n	800fe2e <tcp_pcb_remove+0x6a>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	683a      	ldr	r2, [r7, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d104      	bne.n	800fe28 <tcp_pcb_remove+0x64>
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	68da      	ldr	r2, [r3, #12]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	60da      	str	r2, [r3, #12]
 800fe26:	e005      	b.n	800fe34 <tcp_pcb_remove+0x70>
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	60fb      	str	r3, [r7, #12]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1ef      	bne.n	800fe14 <tcp_pcb_remove+0x50>
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	2200      	movs	r2, #0
 800fe38:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fe3a:	6838      	ldr	r0, [r7, #0]
 800fe3c:	f7ff ff72 	bl	800fd24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	7d1b      	ldrb	r3, [r3, #20]
 800fe44:	2b0a      	cmp	r3, #10
 800fe46:	d013      	beq.n	800fe70 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d00f      	beq.n	800fe70 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	8b5b      	ldrh	r3, [r3, #26]
 800fe54:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d009      	beq.n	800fe70 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	8b5b      	ldrh	r3, [r3, #26]
 800fe60:	f043 0302 	orr.w	r3, r3, #2
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe6a:	6838      	ldr	r0, [r7, #0]
 800fe6c:	f003 fbc6 	bl	80135fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	7d1b      	ldrb	r3, [r3, #20]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d020      	beq.n	800feba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d006      	beq.n	800fe8e <tcp_pcb_remove+0xca>
 800fe80:	4b13      	ldr	r3, [pc, #76]	; (800fed0 <tcp_pcb_remove+0x10c>)
 800fe82:	f640 0293 	movw	r2, #2195	; 0x893
 800fe86:	4916      	ldr	r1, [pc, #88]	; (800fee0 <tcp_pcb_remove+0x11c>)
 800fe88:	4813      	ldr	r0, [pc, #76]	; (800fed8 <tcp_pcb_remove+0x114>)
 800fe8a:	f007 fb31 	bl	80174f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d006      	beq.n	800fea4 <tcp_pcb_remove+0xe0>
 800fe96:	4b0e      	ldr	r3, [pc, #56]	; (800fed0 <tcp_pcb_remove+0x10c>)
 800fe98:	f640 0294 	movw	r2, #2196	; 0x894
 800fe9c:	4911      	ldr	r1, [pc, #68]	; (800fee4 <tcp_pcb_remove+0x120>)
 800fe9e:	480e      	ldr	r0, [pc, #56]	; (800fed8 <tcp_pcb_remove+0x114>)
 800fea0:	f007 fb26 	bl	80174f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d006      	beq.n	800feba <tcp_pcb_remove+0xf6>
 800feac:	4b08      	ldr	r3, [pc, #32]	; (800fed0 <tcp_pcb_remove+0x10c>)
 800feae:	f640 0296 	movw	r2, #2198	; 0x896
 800feb2:	490d      	ldr	r1, [pc, #52]	; (800fee8 <tcp_pcb_remove+0x124>)
 800feb4:	4808      	ldr	r0, [pc, #32]	; (800fed8 <tcp_pcb_remove+0x114>)
 800feb6:	f007 fb1b 	bl	80174f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	2200      	movs	r2, #0
 800febe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	2200      	movs	r2, #0
 800fec4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fec6:	bf00      	nop
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	0801bb4c 	.word	0x0801bb4c
 800fed4:	0801c1b4 	.word	0x0801c1b4
 800fed8:	0801bb90 	.word	0x0801bb90
 800fedc:	0801c1d0 	.word	0x0801c1d0
 800fee0:	0801c1f0 	.word	0x0801c1f0
 800fee4:	0801c208 	.word	0x0801c208
 800fee8:	0801c224 	.word	0x0801c224

0800feec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d106      	bne.n	800ff08 <tcp_next_iss+0x1c>
 800fefa:	4b0a      	ldr	r3, [pc, #40]	; (800ff24 <tcp_next_iss+0x38>)
 800fefc:	f640 02af 	movw	r2, #2223	; 0x8af
 800ff00:	4909      	ldr	r1, [pc, #36]	; (800ff28 <tcp_next_iss+0x3c>)
 800ff02:	480a      	ldr	r0, [pc, #40]	; (800ff2c <tcp_next_iss+0x40>)
 800ff04:	f007 faf4 	bl	80174f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ff08:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <tcp_next_iss+0x44>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <tcp_next_iss+0x48>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4413      	add	r3, r2
 800ff12:	4a07      	ldr	r2, [pc, #28]	; (800ff30 <tcp_next_iss+0x44>)
 800ff14:	6013      	str	r3, [r2, #0]
  return iss;
 800ff16:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <tcp_next_iss+0x44>)
 800ff18:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	0801bb4c 	.word	0x0801bb4c
 800ff28:	0801c23c 	.word	0x0801c23c
 800ff2c:	0801bb90 	.word	0x0801bb90
 800ff30:	20000028 	.word	0x20000028
 800ff34:	20011b98 	.word	0x20011b98

0800ff38 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	4603      	mov	r3, r0
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d106      	bne.n	800ff5a <tcp_eff_send_mss_netif+0x22>
 800ff4c:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <tcp_eff_send_mss_netif+0x68>)
 800ff4e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ff52:	4914      	ldr	r1, [pc, #80]	; (800ffa4 <tcp_eff_send_mss_netif+0x6c>)
 800ff54:	4814      	ldr	r0, [pc, #80]	; (800ffa8 <tcp_eff_send_mss_netif+0x70>)
 800ff56:	f007 facb 	bl	80174f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d101      	bne.n	800ff64 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ff60:	89fb      	ldrh	r3, [r7, #14]
 800ff62:	e019      	b.n	800ff98 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff68:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ff6a:	8afb      	ldrh	r3, [r7, #22]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d012      	beq.n	800ff96 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ff70:	2328      	movs	r3, #40	; 0x28
 800ff72:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ff74:	8afa      	ldrh	r2, [r7, #22]
 800ff76:	8abb      	ldrh	r3, [r7, #20]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d904      	bls.n	800ff86 <tcp_eff_send_mss_netif+0x4e>
 800ff7c:	8afa      	ldrh	r2, [r7, #22]
 800ff7e:	8abb      	ldrh	r3, [r7, #20]
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	e000      	b.n	800ff88 <tcp_eff_send_mss_netif+0x50>
 800ff86:	2300      	movs	r3, #0
 800ff88:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ff8a:	8a7a      	ldrh	r2, [r7, #18]
 800ff8c:	89fb      	ldrh	r3, [r7, #14]
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	bf28      	it	cs
 800ff92:	4613      	movcs	r3, r2
 800ff94:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ff96:	89fb      	ldrh	r3, [r7, #14]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3718      	adds	r7, #24
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	0801bb4c 	.word	0x0801bb4c
 800ffa4:	0801c258 	.word	0x0801c258
 800ffa8:	0801bb90 	.word	0x0801bb90

0800ffac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d119      	bne.n	800fff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ffc0:	4b10      	ldr	r3, [pc, #64]	; (8010004 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ffc2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ffc6:	4910      	ldr	r1, [pc, #64]	; (8010008 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ffc8:	4810      	ldr	r0, [pc, #64]	; (801000c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ffca:	f007 fa91 	bl	80174f0 <iprintf>

  while (pcb != NULL) {
 800ffce:	e011      	b.n	800fff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d108      	bne.n	800ffee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f7fe fd02 	bl	800e9ec <tcp_abort>
      pcb = next;
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	60fb      	str	r3, [r7, #12]
 800ffec:	e002      	b.n	800fff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d1ea      	bne.n	800ffd0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fffa:	bf00      	nop
 800fffc:	bf00      	nop
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	0801bb4c 	.word	0x0801bb4c
 8010008:	0801c280 	.word	0x0801c280
 801000c:	0801bb90 	.word	0x0801bb90

08010010 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d02a      	beq.n	8010076 <tcp_netif_ip_addr_changed+0x66>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d026      	beq.n	8010076 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010028:	4b15      	ldr	r3, [pc, #84]	; (8010080 <tcp_netif_ip_addr_changed+0x70>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4619      	mov	r1, r3
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7ff ffbc 	bl	800ffac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010034:	4b13      	ldr	r3, [pc, #76]	; (8010084 <tcp_netif_ip_addr_changed+0x74>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4619      	mov	r1, r3
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7ff ffb6 	bl	800ffac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d017      	beq.n	8010076 <tcp_netif_ip_addr_changed+0x66>
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d013      	beq.n	8010076 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801004e:	4b0e      	ldr	r3, [pc, #56]	; (8010088 <tcp_netif_ip_addr_changed+0x78>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	60fb      	str	r3, [r7, #12]
 8010054:	e00c      	b.n	8010070 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	429a      	cmp	r2, r3
 8010060:	d103      	bne.n	801006a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d1ef      	bne.n	8010056 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	20011ba4 	.word	0x20011ba4
 8010084:	20011b9c 	.word	0x20011b9c
 8010088:	20011ba0 	.word	0x20011ba0

0801008c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010098:	2b00      	cmp	r3, #0
 801009a:	d007      	beq.n	80100ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff fb6f 	bl	800f784 <tcp_segs_free>
    pcb->ooseq = NULL;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80100ac:	bf00      	nop
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80100b4:	b590      	push	{r4, r7, lr}
 80100b6:	b08d      	sub	sp, #52	; 0x34
 80100b8:	af04      	add	r7, sp, #16
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <tcp_input+0x1c>
 80100c4:	4b9b      	ldr	r3, [pc, #620]	; (8010334 <tcp_input+0x280>)
 80100c6:	2283      	movs	r2, #131	; 0x83
 80100c8:	499b      	ldr	r1, [pc, #620]	; (8010338 <tcp_input+0x284>)
 80100ca:	489c      	ldr	r0, [pc, #624]	; (801033c <tcp_input+0x288>)
 80100cc:	f007 fa10 	bl	80174f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	4a9a      	ldr	r2, [pc, #616]	; (8010340 <tcp_input+0x28c>)
 80100d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	895b      	ldrh	r3, [r3, #10]
 80100dc:	2b13      	cmp	r3, #19
 80100de:	f240 83d1 	bls.w	8010884 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80100e2:	4b98      	ldr	r3, [pc, #608]	; (8010344 <tcp_input+0x290>)
 80100e4:	695b      	ldr	r3, [r3, #20]
 80100e6:	4a97      	ldr	r2, [pc, #604]	; (8010344 <tcp_input+0x290>)
 80100e8:	6812      	ldr	r2, [r2, #0]
 80100ea:	4611      	mov	r1, r2
 80100ec:	4618      	mov	r0, r3
 80100ee:	f005 fefd 	bl	8015eec <ip4_addr_isbroadcast_u32>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f040 83c7 	bne.w	8010888 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80100fa:	4b92      	ldr	r3, [pc, #584]	; (8010344 <tcp_input+0x290>)
 80100fc:	695b      	ldr	r3, [r3, #20]
 80100fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010102:	2be0      	cmp	r3, #224	; 0xe0
 8010104:	f000 83c0 	beq.w	8010888 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010108:	4b8d      	ldr	r3, [pc, #564]	; (8010340 <tcp_input+0x28c>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4618      	mov	r0, r3
 8010112:	f7fc f975 	bl	800c400 <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	0b1b      	lsrs	r3, r3, #12
 801011a:	b29b      	uxth	r3, r3
 801011c:	b2db      	uxtb	r3, r3
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010122:	7cbb      	ldrb	r3, [r7, #18]
 8010124:	2b13      	cmp	r3, #19
 8010126:	f240 83b1 	bls.w	801088c <tcp_input+0x7d8>
 801012a:	7cbb      	ldrb	r3, [r7, #18]
 801012c:	b29a      	uxth	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	891b      	ldrh	r3, [r3, #8]
 8010132:	429a      	cmp	r2, r3
 8010134:	f200 83aa 	bhi.w	801088c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010138:	7cbb      	ldrb	r3, [r7, #18]
 801013a:	b29b      	uxth	r3, r3
 801013c:	3b14      	subs	r3, #20
 801013e:	b29a      	uxth	r2, r3
 8010140:	4b81      	ldr	r3, [pc, #516]	; (8010348 <tcp_input+0x294>)
 8010142:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010144:	4b81      	ldr	r3, [pc, #516]	; (801034c <tcp_input+0x298>)
 8010146:	2200      	movs	r2, #0
 8010148:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	895a      	ldrh	r2, [r3, #10]
 801014e:	7cbb      	ldrb	r3, [r7, #18]
 8010150:	b29b      	uxth	r3, r3
 8010152:	429a      	cmp	r2, r3
 8010154:	d309      	bcc.n	801016a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010156:	4b7c      	ldr	r3, [pc, #496]	; (8010348 <tcp_input+0x294>)
 8010158:	881a      	ldrh	r2, [r3, #0]
 801015a:	4b7d      	ldr	r3, [pc, #500]	; (8010350 <tcp_input+0x29c>)
 801015c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801015e:	7cbb      	ldrb	r3, [r7, #18]
 8010160:	4619      	mov	r1, r3
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f7fd fdcc 	bl	800dd00 <pbuf_remove_header>
 8010168:	e04e      	b.n	8010208 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d105      	bne.n	801017e <tcp_input+0xca>
 8010172:	4b70      	ldr	r3, [pc, #448]	; (8010334 <tcp_input+0x280>)
 8010174:	22c2      	movs	r2, #194	; 0xc2
 8010176:	4977      	ldr	r1, [pc, #476]	; (8010354 <tcp_input+0x2a0>)
 8010178:	4870      	ldr	r0, [pc, #448]	; (801033c <tcp_input+0x288>)
 801017a:	f007 f9b9 	bl	80174f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801017e:	2114      	movs	r1, #20
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7fd fdbd 	bl	800dd00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	895a      	ldrh	r2, [r3, #10]
 801018a:	4b71      	ldr	r3, [pc, #452]	; (8010350 <tcp_input+0x29c>)
 801018c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801018e:	4b6e      	ldr	r3, [pc, #440]	; (8010348 <tcp_input+0x294>)
 8010190:	881a      	ldrh	r2, [r3, #0]
 8010192:	4b6f      	ldr	r3, [pc, #444]	; (8010350 <tcp_input+0x29c>)
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801019a:	4b6d      	ldr	r3, [pc, #436]	; (8010350 <tcp_input+0x29c>)
 801019c:	881b      	ldrh	r3, [r3, #0]
 801019e:	4619      	mov	r1, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7fd fdad 	bl	800dd00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	895b      	ldrh	r3, [r3, #10]
 80101ac:	8a3a      	ldrh	r2, [r7, #16]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	f200 836e 	bhi.w	8010890 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	4a64      	ldr	r2, [pc, #400]	; (801034c <tcp_input+0x298>)
 80101bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	8a3a      	ldrh	r2, [r7, #16]
 80101c4:	4611      	mov	r1, r2
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fd fd9a 	bl	800dd00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	891a      	ldrh	r2, [r3, #8]
 80101d0:	8a3b      	ldrh	r3, [r7, #16]
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	895b      	ldrh	r3, [r3, #10]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d005      	beq.n	80101ee <tcp_input+0x13a>
 80101e2:	4b54      	ldr	r3, [pc, #336]	; (8010334 <tcp_input+0x280>)
 80101e4:	22df      	movs	r2, #223	; 0xdf
 80101e6:	495c      	ldr	r1, [pc, #368]	; (8010358 <tcp_input+0x2a4>)
 80101e8:	4854      	ldr	r0, [pc, #336]	; (801033c <tcp_input+0x288>)
 80101ea:	f007 f981 	bl	80174f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	891a      	ldrh	r2, [r3, #8]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	891b      	ldrh	r3, [r3, #8]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d005      	beq.n	8010208 <tcp_input+0x154>
 80101fc:	4b4d      	ldr	r3, [pc, #308]	; (8010334 <tcp_input+0x280>)
 80101fe:	22e0      	movs	r2, #224	; 0xe0
 8010200:	4956      	ldr	r1, [pc, #344]	; (801035c <tcp_input+0x2a8>)
 8010202:	484e      	ldr	r0, [pc, #312]	; (801033c <tcp_input+0x288>)
 8010204:	f007 f974 	bl	80174f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010208:	4b4d      	ldr	r3, [pc, #308]	; (8010340 <tcp_input+0x28c>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	881b      	ldrh	r3, [r3, #0]
 801020e:	b29b      	uxth	r3, r3
 8010210:	4a4b      	ldr	r2, [pc, #300]	; (8010340 <tcp_input+0x28c>)
 8010212:	6814      	ldr	r4, [r2, #0]
 8010214:	4618      	mov	r0, r3
 8010216:	f7fc f8f3 	bl	800c400 <lwip_htons>
 801021a:	4603      	mov	r3, r0
 801021c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801021e:	4b48      	ldr	r3, [pc, #288]	; (8010340 <tcp_input+0x28c>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	885b      	ldrh	r3, [r3, #2]
 8010224:	b29b      	uxth	r3, r3
 8010226:	4a46      	ldr	r2, [pc, #280]	; (8010340 <tcp_input+0x28c>)
 8010228:	6814      	ldr	r4, [r2, #0]
 801022a:	4618      	mov	r0, r3
 801022c:	f7fc f8e8 	bl	800c400 <lwip_htons>
 8010230:	4603      	mov	r3, r0
 8010232:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010234:	4b42      	ldr	r3, [pc, #264]	; (8010340 <tcp_input+0x28c>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	4a41      	ldr	r2, [pc, #260]	; (8010340 <tcp_input+0x28c>)
 801023c:	6814      	ldr	r4, [r2, #0]
 801023e:	4618      	mov	r0, r3
 8010240:	f7fc f8f3 	bl	800c42a <lwip_htonl>
 8010244:	4603      	mov	r3, r0
 8010246:	6063      	str	r3, [r4, #4]
 8010248:	6863      	ldr	r3, [r4, #4]
 801024a:	4a45      	ldr	r2, [pc, #276]	; (8010360 <tcp_input+0x2ac>)
 801024c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801024e:	4b3c      	ldr	r3, [pc, #240]	; (8010340 <tcp_input+0x28c>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	4a3a      	ldr	r2, [pc, #232]	; (8010340 <tcp_input+0x28c>)
 8010256:	6814      	ldr	r4, [r2, #0]
 8010258:	4618      	mov	r0, r3
 801025a:	f7fc f8e6 	bl	800c42a <lwip_htonl>
 801025e:	4603      	mov	r3, r0
 8010260:	60a3      	str	r3, [r4, #8]
 8010262:	68a3      	ldr	r3, [r4, #8]
 8010264:	4a3f      	ldr	r2, [pc, #252]	; (8010364 <tcp_input+0x2b0>)
 8010266:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010268:	4b35      	ldr	r3, [pc, #212]	; (8010340 <tcp_input+0x28c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	89db      	ldrh	r3, [r3, #14]
 801026e:	b29b      	uxth	r3, r3
 8010270:	4a33      	ldr	r2, [pc, #204]	; (8010340 <tcp_input+0x28c>)
 8010272:	6814      	ldr	r4, [r2, #0]
 8010274:	4618      	mov	r0, r3
 8010276:	f7fc f8c3 	bl	800c400 <lwip_htons>
 801027a:	4603      	mov	r3, r0
 801027c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801027e:	4b30      	ldr	r3, [pc, #192]	; (8010340 <tcp_input+0x28c>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	899b      	ldrh	r3, [r3, #12]
 8010284:	b29b      	uxth	r3, r3
 8010286:	4618      	mov	r0, r3
 8010288:	f7fc f8ba 	bl	800c400 <lwip_htons>
 801028c:	4603      	mov	r3, r0
 801028e:	b2db      	uxtb	r3, r3
 8010290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010294:	b2da      	uxtb	r2, r3
 8010296:	4b34      	ldr	r3, [pc, #208]	; (8010368 <tcp_input+0x2b4>)
 8010298:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	891a      	ldrh	r2, [r3, #8]
 801029e:	4b33      	ldr	r3, [pc, #204]	; (801036c <tcp_input+0x2b8>)
 80102a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80102a2:	4b31      	ldr	r3, [pc, #196]	; (8010368 <tcp_input+0x2b4>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	f003 0303 	and.w	r3, r3, #3
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00c      	beq.n	80102c8 <tcp_input+0x214>
    tcplen++;
 80102ae:	4b2f      	ldr	r3, [pc, #188]	; (801036c <tcp_input+0x2b8>)
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	3301      	adds	r3, #1
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	4b2d      	ldr	r3, [pc, #180]	; (801036c <tcp_input+0x2b8>)
 80102b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	891a      	ldrh	r2, [r3, #8]
 80102be:	4b2b      	ldr	r3, [pc, #172]	; (801036c <tcp_input+0x2b8>)
 80102c0:	881b      	ldrh	r3, [r3, #0]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	f200 82e6 	bhi.w	8010894 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80102c8:	2300      	movs	r3, #0
 80102ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102cc:	4b28      	ldr	r3, [pc, #160]	; (8010370 <tcp_input+0x2bc>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	61fb      	str	r3, [r7, #28]
 80102d2:	e09d      	b.n	8010410 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	7d1b      	ldrb	r3, [r3, #20]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d105      	bne.n	80102e8 <tcp_input+0x234>
 80102dc:	4b15      	ldr	r3, [pc, #84]	; (8010334 <tcp_input+0x280>)
 80102de:	22fb      	movs	r2, #251	; 0xfb
 80102e0:	4924      	ldr	r1, [pc, #144]	; (8010374 <tcp_input+0x2c0>)
 80102e2:	4816      	ldr	r0, [pc, #88]	; (801033c <tcp_input+0x288>)
 80102e4:	f007 f904 	bl	80174f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	7d1b      	ldrb	r3, [r3, #20]
 80102ec:	2b0a      	cmp	r3, #10
 80102ee:	d105      	bne.n	80102fc <tcp_input+0x248>
 80102f0:	4b10      	ldr	r3, [pc, #64]	; (8010334 <tcp_input+0x280>)
 80102f2:	22fc      	movs	r2, #252	; 0xfc
 80102f4:	4920      	ldr	r1, [pc, #128]	; (8010378 <tcp_input+0x2c4>)
 80102f6:	4811      	ldr	r0, [pc, #68]	; (801033c <tcp_input+0x288>)
 80102f8:	f007 f8fa 	bl	80174f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	7d1b      	ldrb	r3, [r3, #20]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d105      	bne.n	8010310 <tcp_input+0x25c>
 8010304:	4b0b      	ldr	r3, [pc, #44]	; (8010334 <tcp_input+0x280>)
 8010306:	22fd      	movs	r2, #253	; 0xfd
 8010308:	491c      	ldr	r1, [pc, #112]	; (801037c <tcp_input+0x2c8>)
 801030a:	480c      	ldr	r0, [pc, #48]	; (801033c <tcp_input+0x288>)
 801030c:	f007 f8f0 	bl	80174f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	7a1b      	ldrb	r3, [r3, #8]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d033      	beq.n	8010380 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	7a1a      	ldrb	r2, [r3, #8]
 801031c:	4b09      	ldr	r3, [pc, #36]	; (8010344 <tcp_input+0x290>)
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010324:	3301      	adds	r3, #1
 8010326:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010328:	429a      	cmp	r2, r3
 801032a:	d029      	beq.n	8010380 <tcp_input+0x2cc>
      prev = pcb;
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	61bb      	str	r3, [r7, #24]
      continue;
 8010330:	e06b      	b.n	801040a <tcp_input+0x356>
 8010332:	bf00      	nop
 8010334:	0801c2b4 	.word	0x0801c2b4
 8010338:	0801c2e8 	.word	0x0801c2e8
 801033c:	0801c300 	.word	0x0801c300
 8010340:	20011bc0 	.word	0x20011bc0
 8010344:	20009b0c 	.word	0x20009b0c
 8010348:	20011bc4 	.word	0x20011bc4
 801034c:	20011bc8 	.word	0x20011bc8
 8010350:	20011bc6 	.word	0x20011bc6
 8010354:	0801c328 	.word	0x0801c328
 8010358:	0801c338 	.word	0x0801c338
 801035c:	0801c344 	.word	0x0801c344
 8010360:	20011bd0 	.word	0x20011bd0
 8010364:	20011bd4 	.word	0x20011bd4
 8010368:	20011bdc 	.word	0x20011bdc
 801036c:	20011bda 	.word	0x20011bda
 8010370:	20011ba4 	.word	0x20011ba4
 8010374:	0801c364 	.word	0x0801c364
 8010378:	0801c38c 	.word	0x0801c38c
 801037c:	0801c3b8 	.word	0x0801c3b8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	8b1a      	ldrh	r2, [r3, #24]
 8010384:	4b72      	ldr	r3, [pc, #456]	; (8010550 <tcp_input+0x49c>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	881b      	ldrh	r3, [r3, #0]
 801038a:	b29b      	uxth	r3, r3
 801038c:	429a      	cmp	r2, r3
 801038e:	d13a      	bne.n	8010406 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	8ada      	ldrh	r2, [r3, #22]
 8010394:	4b6e      	ldr	r3, [pc, #440]	; (8010550 <tcp_input+0x49c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	885b      	ldrh	r3, [r3, #2]
 801039a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801039c:	429a      	cmp	r2, r3
 801039e:	d132      	bne.n	8010406 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	685a      	ldr	r2, [r3, #4]
 80103a4:	4b6b      	ldr	r3, [pc, #428]	; (8010554 <tcp_input+0x4a0>)
 80103a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d12c      	bne.n	8010406 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	4b68      	ldr	r3, [pc, #416]	; (8010554 <tcp_input+0x4a0>)
 80103b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d126      	bne.n	8010406 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	69fa      	ldr	r2, [r7, #28]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d106      	bne.n	80103d0 <tcp_input+0x31c>
 80103c2:	4b65      	ldr	r3, [pc, #404]	; (8010558 <tcp_input+0x4a4>)
 80103c4:	f240 120d 	movw	r2, #269	; 0x10d
 80103c8:	4964      	ldr	r1, [pc, #400]	; (801055c <tcp_input+0x4a8>)
 80103ca:	4865      	ldr	r0, [pc, #404]	; (8010560 <tcp_input+0x4ac>)
 80103cc:	f007 f890 	bl	80174f0 <iprintf>
      if (prev != NULL) {
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00a      	beq.n	80103ec <tcp_input+0x338>
        prev->next = pcb->next;
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	68da      	ldr	r2, [r3, #12]
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80103de:	4b61      	ldr	r3, [pc, #388]	; (8010564 <tcp_input+0x4b0>)
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80103e6:	4a5f      	ldr	r2, [pc, #380]	; (8010564 <tcp_input+0x4b0>)
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	69fa      	ldr	r2, [r7, #28]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d111      	bne.n	801041a <tcp_input+0x366>
 80103f6:	4b58      	ldr	r3, [pc, #352]	; (8010558 <tcp_input+0x4a4>)
 80103f8:	f240 1215 	movw	r2, #277	; 0x115
 80103fc:	495a      	ldr	r1, [pc, #360]	; (8010568 <tcp_input+0x4b4>)
 80103fe:	4858      	ldr	r0, [pc, #352]	; (8010560 <tcp_input+0x4ac>)
 8010400:	f007 f876 	bl	80174f0 <iprintf>
      break;
 8010404:	e009      	b.n	801041a <tcp_input+0x366>
    }
    prev = pcb;
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	61fb      	str	r3, [r7, #28]
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	2b00      	cmp	r3, #0
 8010414:	f47f af5e 	bne.w	80102d4 <tcp_input+0x220>
 8010418:	e000      	b.n	801041c <tcp_input+0x368>
      break;
 801041a:	bf00      	nop
  }

  if (pcb == NULL) {
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	2b00      	cmp	r3, #0
 8010420:	f040 80aa 	bne.w	8010578 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010424:	4b51      	ldr	r3, [pc, #324]	; (801056c <tcp_input+0x4b8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	61fb      	str	r3, [r7, #28]
 801042a:	e03f      	b.n	80104ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	7d1b      	ldrb	r3, [r3, #20]
 8010430:	2b0a      	cmp	r3, #10
 8010432:	d006      	beq.n	8010442 <tcp_input+0x38e>
 8010434:	4b48      	ldr	r3, [pc, #288]	; (8010558 <tcp_input+0x4a4>)
 8010436:	f240 121f 	movw	r2, #287	; 0x11f
 801043a:	494d      	ldr	r1, [pc, #308]	; (8010570 <tcp_input+0x4bc>)
 801043c:	4848      	ldr	r0, [pc, #288]	; (8010560 <tcp_input+0x4ac>)
 801043e:	f007 f857 	bl	80174f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	7a1b      	ldrb	r3, [r3, #8]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d009      	beq.n	801045e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	7a1a      	ldrb	r2, [r3, #8]
 801044e:	4b41      	ldr	r3, [pc, #260]	; (8010554 <tcp_input+0x4a0>)
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010456:	3301      	adds	r3, #1
 8010458:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801045a:	429a      	cmp	r2, r3
 801045c:	d122      	bne.n	80104a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	8b1a      	ldrh	r2, [r3, #24]
 8010462:	4b3b      	ldr	r3, [pc, #236]	; (8010550 <tcp_input+0x49c>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	b29b      	uxth	r3, r3
 801046a:	429a      	cmp	r2, r3
 801046c:	d11b      	bne.n	80104a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	8ada      	ldrh	r2, [r3, #22]
 8010472:	4b37      	ldr	r3, [pc, #220]	; (8010550 <tcp_input+0x49c>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	885b      	ldrh	r3, [r3, #2]
 8010478:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801047a:	429a      	cmp	r2, r3
 801047c:	d113      	bne.n	80104a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	685a      	ldr	r2, [r3, #4]
 8010482:	4b34      	ldr	r3, [pc, #208]	; (8010554 <tcp_input+0x4a0>)
 8010484:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010486:	429a      	cmp	r2, r3
 8010488:	d10d      	bne.n	80104a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	4b31      	ldr	r3, [pc, #196]	; (8010554 <tcp_input+0x4a0>)
 8010490:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010492:	429a      	cmp	r2, r3
 8010494:	d107      	bne.n	80104a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010496:	69f8      	ldr	r0, [r7, #28]
 8010498:	f000 fb56 	bl	8010b48 <tcp_timewait_input>
        }
        pbuf_free(p);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7fd fcb5 	bl	800de0c <pbuf_free>
        return;
 80104a2:	e1fd      	b.n	80108a0 <tcp_input+0x7ec>
        continue;
 80104a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	61fb      	str	r3, [r7, #28]
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1bc      	bne.n	801042c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80104b2:	2300      	movs	r3, #0
 80104b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80104b6:	4b2f      	ldr	r3, [pc, #188]	; (8010574 <tcp_input+0x4c0>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	617b      	str	r3, [r7, #20]
 80104bc:	e02a      	b.n	8010514 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	7a1b      	ldrb	r3, [r3, #8]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00c      	beq.n	80104e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	7a1a      	ldrb	r2, [r3, #8]
 80104ca:	4b22      	ldr	r3, [pc, #136]	; (8010554 <tcp_input+0x4a0>)
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104d2:	3301      	adds	r3, #1
 80104d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d002      	beq.n	80104e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	61bb      	str	r3, [r7, #24]
        continue;
 80104de:	e016      	b.n	801050e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	8ada      	ldrh	r2, [r3, #22]
 80104e4:	4b1a      	ldr	r3, [pc, #104]	; (8010550 <tcp_input+0x49c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	885b      	ldrh	r3, [r3, #2]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d10c      	bne.n	801050a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	4b17      	ldr	r3, [pc, #92]	; (8010554 <tcp_input+0x4a0>)
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d00f      	beq.n	801051c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00d      	beq.n	801051e <tcp_input+0x46a>
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d009      	beq.n	801051e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	68db      	ldr	r3, [r3, #12]
 8010512:	617b      	str	r3, [r7, #20]
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1d1      	bne.n	80104be <tcp_input+0x40a>
 801051a:	e000      	b.n	801051e <tcp_input+0x46a>
            break;
 801051c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d029      	beq.n	8010578 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00a      	beq.n	8010540 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	68da      	ldr	r2, [r3, #12]
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010532:	4b10      	ldr	r3, [pc, #64]	; (8010574 <tcp_input+0x4c0>)
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801053a:	4a0e      	ldr	r2, [pc, #56]	; (8010574 <tcp_input+0x4c0>)
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010540:	6978      	ldr	r0, [r7, #20]
 8010542:	f000 fa03 	bl	801094c <tcp_listen_input>
      }
      pbuf_free(p);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7fd fc60 	bl	800de0c <pbuf_free>
      return;
 801054c:	e1a8      	b.n	80108a0 <tcp_input+0x7ec>
 801054e:	bf00      	nop
 8010550:	20011bc0 	.word	0x20011bc0
 8010554:	20009b0c 	.word	0x20009b0c
 8010558:	0801c2b4 	.word	0x0801c2b4
 801055c:	0801c3e0 	.word	0x0801c3e0
 8010560:	0801c300 	.word	0x0801c300
 8010564:	20011ba4 	.word	0x20011ba4
 8010568:	0801c40c 	.word	0x0801c40c
 801056c:	20011ba8 	.word	0x20011ba8
 8010570:	0801c438 	.word	0x0801c438
 8010574:	20011ba0 	.word	0x20011ba0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 8158 	beq.w	8010830 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010580:	4b95      	ldr	r3, [pc, #596]	; (80107d8 <tcp_input+0x724>)
 8010582:	2200      	movs	r2, #0
 8010584:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	891a      	ldrh	r2, [r3, #8]
 801058a:	4b93      	ldr	r3, [pc, #588]	; (80107d8 <tcp_input+0x724>)
 801058c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801058e:	4a92      	ldr	r2, [pc, #584]	; (80107d8 <tcp_input+0x724>)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010594:	4b91      	ldr	r3, [pc, #580]	; (80107dc <tcp_input+0x728>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4a8f      	ldr	r2, [pc, #572]	; (80107d8 <tcp_input+0x724>)
 801059a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801059c:	4b90      	ldr	r3, [pc, #576]	; (80107e0 <tcp_input+0x72c>)
 801059e:	2200      	movs	r2, #0
 80105a0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80105a2:	4b90      	ldr	r3, [pc, #576]	; (80107e4 <tcp_input+0x730>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80105a8:	4b8f      	ldr	r3, [pc, #572]	; (80107e8 <tcp_input+0x734>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80105ae:	4b8f      	ldr	r3, [pc, #572]	; (80107ec <tcp_input+0x738>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0308 	and.w	r3, r3, #8
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d006      	beq.n	80105c8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	7b5b      	ldrb	r3, [r3, #13]
 80105be:	f043 0301 	orr.w	r3, r3, #1
 80105c2:	b2da      	uxtb	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d017      	beq.n	8010600 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80105d0:	69f8      	ldr	r0, [r7, #28]
 80105d2:	f7ff f85b 	bl	800f68c <tcp_process_refused_data>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f113 0f0d 	cmn.w	r3, #13
 80105dc:	d007      	beq.n	80105ee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00c      	beq.n	8010600 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80105e6:	4b82      	ldr	r3, [pc, #520]	; (80107f0 <tcp_input+0x73c>)
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d008      	beq.n	8010600 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f040 80e3 	bne.w	80107be <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80105f8:	69f8      	ldr	r0, [r7, #28]
 80105fa:	f003 fe27 	bl	801424c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80105fe:	e0de      	b.n	80107be <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010600:	4a7c      	ldr	r2, [pc, #496]	; (80107f4 <tcp_input+0x740>)
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010606:	69f8      	ldr	r0, [r7, #28]
 8010608:	f000 fb18 	bl	8010c3c <tcp_process>
 801060c:	4603      	mov	r3, r0
 801060e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010614:	f113 0f0d 	cmn.w	r3, #13
 8010618:	f000 80d3 	beq.w	80107c2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801061c:	4b71      	ldr	r3, [pc, #452]	; (80107e4 <tcp_input+0x730>)
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	f003 0308 	and.w	r3, r3, #8
 8010624:	2b00      	cmp	r3, #0
 8010626:	d015      	beq.n	8010654 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801062e:	2b00      	cmp	r3, #0
 8010630:	d008      	beq.n	8010644 <tcp_input+0x590>
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010638:	69fa      	ldr	r2, [r7, #28]
 801063a:	6912      	ldr	r2, [r2, #16]
 801063c:	f06f 010d 	mvn.w	r1, #13
 8010640:	4610      	mov	r0, r2
 8010642:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010644:	69f9      	ldr	r1, [r7, #28]
 8010646:	486c      	ldr	r0, [pc, #432]	; (80107f8 <tcp_input+0x744>)
 8010648:	f7ff fbbc 	bl	800fdc4 <tcp_pcb_remove>
        tcp_free(pcb);
 801064c:	69f8      	ldr	r0, [r7, #28]
 801064e:	f7fd fe89 	bl	800e364 <tcp_free>
 8010652:	e0da      	b.n	801080a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010654:	2300      	movs	r3, #0
 8010656:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010658:	4b63      	ldr	r3, [pc, #396]	; (80107e8 <tcp_input+0x734>)
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d01d      	beq.n	801069c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010660:	4b61      	ldr	r3, [pc, #388]	; (80107e8 <tcp_input+0x734>)
 8010662:	881b      	ldrh	r3, [r3, #0]
 8010664:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00a      	beq.n	8010686 <tcp_input+0x5d2>
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010676:	69fa      	ldr	r2, [r7, #28]
 8010678:	6910      	ldr	r0, [r2, #16]
 801067a:	89fa      	ldrh	r2, [r7, #14]
 801067c:	69f9      	ldr	r1, [r7, #28]
 801067e:	4798      	blx	r3
 8010680:	4603      	mov	r3, r0
 8010682:	74fb      	strb	r3, [r7, #19]
 8010684:	e001      	b.n	801068a <tcp_input+0x5d6>
 8010686:	2300      	movs	r3, #0
 8010688:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801068a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801068e:	f113 0f0d 	cmn.w	r3, #13
 8010692:	f000 8098 	beq.w	80107c6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010696:	4b54      	ldr	r3, [pc, #336]	; (80107e8 <tcp_input+0x734>)
 8010698:	2200      	movs	r2, #0
 801069a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801069c:	69f8      	ldr	r0, [r7, #28]
 801069e:	f000 f915 	bl	80108cc <tcp_input_delayed_close>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f040 8090 	bne.w	80107ca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80106aa:	4b4d      	ldr	r3, [pc, #308]	; (80107e0 <tcp_input+0x72c>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d041      	beq.n	8010736 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d006      	beq.n	80106c8 <tcp_input+0x614>
 80106ba:	4b50      	ldr	r3, [pc, #320]	; (80107fc <tcp_input+0x748>)
 80106bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80106c0:	494f      	ldr	r1, [pc, #316]	; (8010800 <tcp_input+0x74c>)
 80106c2:	4850      	ldr	r0, [pc, #320]	; (8010804 <tcp_input+0x750>)
 80106c4:	f006 ff14 	bl	80174f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	8b5b      	ldrh	r3, [r3, #26]
 80106cc:	f003 0310 	and.w	r3, r3, #16
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d008      	beq.n	80106e6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80106d4:	4b42      	ldr	r3, [pc, #264]	; (80107e0 <tcp_input+0x72c>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fd fb97 	bl	800de0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80106de:	69f8      	ldr	r0, [r7, #28]
 80106e0:	f7fe f984 	bl	800e9ec <tcp_abort>
            goto aborted;
 80106e4:	e091      	b.n	801080a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00c      	beq.n	801070a <tcp_input+0x656>
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	6918      	ldr	r0, [r3, #16]
 80106fa:	4b39      	ldr	r3, [pc, #228]	; (80107e0 <tcp_input+0x72c>)
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	2300      	movs	r3, #0
 8010700:	69f9      	ldr	r1, [r7, #28]
 8010702:	47a0      	blx	r4
 8010704:	4603      	mov	r3, r0
 8010706:	74fb      	strb	r3, [r7, #19]
 8010708:	e008      	b.n	801071c <tcp_input+0x668>
 801070a:	4b35      	ldr	r3, [pc, #212]	; (80107e0 <tcp_input+0x72c>)
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	2300      	movs	r3, #0
 8010710:	69f9      	ldr	r1, [r7, #28]
 8010712:	2000      	movs	r0, #0
 8010714:	f7ff f890 	bl	800f838 <tcp_recv_null>
 8010718:	4603      	mov	r3, r0
 801071a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801071c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010720:	f113 0f0d 	cmn.w	r3, #13
 8010724:	d053      	beq.n	80107ce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d003      	beq.n	8010736 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801072e:	4b2c      	ldr	r3, [pc, #176]	; (80107e0 <tcp_input+0x72c>)
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010736:	4b2b      	ldr	r3, [pc, #172]	; (80107e4 <tcp_input+0x730>)
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	f003 0320 	and.w	r3, r3, #32
 801073e:	2b00      	cmp	r3, #0
 8010740:	d030      	beq.n	80107a4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010746:	2b00      	cmp	r3, #0
 8010748:	d009      	beq.n	801075e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801074e:	7b5a      	ldrb	r2, [r3, #13]
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010754:	f042 0220 	orr.w	r2, r2, #32
 8010758:	b2d2      	uxtb	r2, r2
 801075a:	735a      	strb	r2, [r3, #13]
 801075c:	e022      	b.n	80107a4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010762:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010766:	d005      	beq.n	8010774 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801076c:	3301      	adds	r3, #1
 801076e:	b29a      	uxth	r2, r3
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00b      	beq.n	8010796 <tcp_input+0x6e2>
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	6918      	ldr	r0, [r3, #16]
 8010788:	2300      	movs	r3, #0
 801078a:	2200      	movs	r2, #0
 801078c:	69f9      	ldr	r1, [r7, #28]
 801078e:	47a0      	blx	r4
 8010790:	4603      	mov	r3, r0
 8010792:	74fb      	strb	r3, [r7, #19]
 8010794:	e001      	b.n	801079a <tcp_input+0x6e6>
 8010796:	2300      	movs	r3, #0
 8010798:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801079a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801079e:	f113 0f0d 	cmn.w	r3, #13
 80107a2:	d016      	beq.n	80107d2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80107a4:	4b13      	ldr	r3, [pc, #76]	; (80107f4 <tcp_input+0x740>)
 80107a6:	2200      	movs	r2, #0
 80107a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80107aa:	69f8      	ldr	r0, [r7, #28]
 80107ac:	f000 f88e 	bl	80108cc <tcp_input_delayed_close>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d128      	bne.n	8010808 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80107b6:	69f8      	ldr	r0, [r7, #28]
 80107b8:	f002 ff20 	bl	80135fc <tcp_output>
 80107bc:	e025      	b.n	801080a <tcp_input+0x756>
        goto aborted;
 80107be:	bf00      	nop
 80107c0:	e023      	b.n	801080a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80107c2:	bf00      	nop
 80107c4:	e021      	b.n	801080a <tcp_input+0x756>
              goto aborted;
 80107c6:	bf00      	nop
 80107c8:	e01f      	b.n	801080a <tcp_input+0x756>
          goto aborted;
 80107ca:	bf00      	nop
 80107cc:	e01d      	b.n	801080a <tcp_input+0x756>
            goto aborted;
 80107ce:	bf00      	nop
 80107d0:	e01b      	b.n	801080a <tcp_input+0x756>
              goto aborted;
 80107d2:	bf00      	nop
 80107d4:	e019      	b.n	801080a <tcp_input+0x756>
 80107d6:	bf00      	nop
 80107d8:	20011bb0 	.word	0x20011bb0
 80107dc:	20011bc0 	.word	0x20011bc0
 80107e0:	20011be0 	.word	0x20011be0
 80107e4:	20011bdd 	.word	0x20011bdd
 80107e8:	20011bd8 	.word	0x20011bd8
 80107ec:	20011bdc 	.word	0x20011bdc
 80107f0:	20011bda 	.word	0x20011bda
 80107f4:	20011be4 	.word	0x20011be4
 80107f8:	20011ba4 	.word	0x20011ba4
 80107fc:	0801c2b4 	.word	0x0801c2b4
 8010800:	0801c468 	.word	0x0801c468
 8010804:	0801c300 	.word	0x0801c300
          goto aborted;
 8010808:	bf00      	nop
    tcp_input_pcb = NULL;
 801080a:	4b27      	ldr	r3, [pc, #156]	; (80108a8 <tcp_input+0x7f4>)
 801080c:	2200      	movs	r2, #0
 801080e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010810:	4b26      	ldr	r3, [pc, #152]	; (80108ac <tcp_input+0x7f8>)
 8010812:	2200      	movs	r2, #0
 8010814:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010816:	4b26      	ldr	r3, [pc, #152]	; (80108b0 <tcp_input+0x7fc>)
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d03f      	beq.n	801089e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801081e:	4b24      	ldr	r3, [pc, #144]	; (80108b0 <tcp_input+0x7fc>)
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	4618      	mov	r0, r3
 8010824:	f7fd faf2 	bl	800de0c <pbuf_free>
      inseg.p = NULL;
 8010828:	4b21      	ldr	r3, [pc, #132]	; (80108b0 <tcp_input+0x7fc>)
 801082a:	2200      	movs	r2, #0
 801082c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801082e:	e036      	b.n	801089e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010830:	4b20      	ldr	r3, [pc, #128]	; (80108b4 <tcp_input+0x800>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	899b      	ldrh	r3, [r3, #12]
 8010836:	b29b      	uxth	r3, r3
 8010838:	4618      	mov	r0, r3
 801083a:	f7fb fde1 	bl	800c400 <lwip_htons>
 801083e:	4603      	mov	r3, r0
 8010840:	b2db      	uxtb	r3, r3
 8010842:	f003 0304 	and.w	r3, r3, #4
 8010846:	2b00      	cmp	r3, #0
 8010848:	d118      	bne.n	801087c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801084a:	4b1b      	ldr	r3, [pc, #108]	; (80108b8 <tcp_input+0x804>)
 801084c:	6819      	ldr	r1, [r3, #0]
 801084e:	4b1b      	ldr	r3, [pc, #108]	; (80108bc <tcp_input+0x808>)
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	461a      	mov	r2, r3
 8010854:	4b1a      	ldr	r3, [pc, #104]	; (80108c0 <tcp_input+0x80c>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801085a:	4b16      	ldr	r3, [pc, #88]	; (80108b4 <tcp_input+0x800>)
 801085c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801085e:	885b      	ldrh	r3, [r3, #2]
 8010860:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010862:	4a14      	ldr	r2, [pc, #80]	; (80108b4 <tcp_input+0x800>)
 8010864:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010866:	8812      	ldrh	r2, [r2, #0]
 8010868:	b292      	uxth	r2, r2
 801086a:	9202      	str	r2, [sp, #8]
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	4b15      	ldr	r3, [pc, #84]	; (80108c4 <tcp_input+0x810>)
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	4b15      	ldr	r3, [pc, #84]	; (80108c8 <tcp_input+0x814>)
 8010874:	4602      	mov	r2, r0
 8010876:	2000      	movs	r0, #0
 8010878:	f003 fc96 	bl	80141a8 <tcp_rst>
    pbuf_free(p);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f7fd fac5 	bl	800de0c <pbuf_free>
  return;
 8010882:	e00c      	b.n	801089e <tcp_input+0x7ea>
    goto dropped;
 8010884:	bf00      	nop
 8010886:	e006      	b.n	8010896 <tcp_input+0x7e2>
    goto dropped;
 8010888:	bf00      	nop
 801088a:	e004      	b.n	8010896 <tcp_input+0x7e2>
    goto dropped;
 801088c:	bf00      	nop
 801088e:	e002      	b.n	8010896 <tcp_input+0x7e2>
      goto dropped;
 8010890:	bf00      	nop
 8010892:	e000      	b.n	8010896 <tcp_input+0x7e2>
      goto dropped;
 8010894:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7fd fab8 	bl	800de0c <pbuf_free>
 801089c:	e000      	b.n	80108a0 <tcp_input+0x7ec>
  return;
 801089e:	bf00      	nop
}
 80108a0:	3724      	adds	r7, #36	; 0x24
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd90      	pop	{r4, r7, pc}
 80108a6:	bf00      	nop
 80108a8:	20011be4 	.word	0x20011be4
 80108ac:	20011be0 	.word	0x20011be0
 80108b0:	20011bb0 	.word	0x20011bb0
 80108b4:	20011bc0 	.word	0x20011bc0
 80108b8:	20011bd4 	.word	0x20011bd4
 80108bc:	20011bda 	.word	0x20011bda
 80108c0:	20011bd0 	.word	0x20011bd0
 80108c4:	20009b1c 	.word	0x20009b1c
 80108c8:	20009b20 	.word	0x20009b20

080108cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d106      	bne.n	80108e8 <tcp_input_delayed_close+0x1c>
 80108da:	4b17      	ldr	r3, [pc, #92]	; (8010938 <tcp_input_delayed_close+0x6c>)
 80108dc:	f240 225a 	movw	r2, #602	; 0x25a
 80108e0:	4916      	ldr	r1, [pc, #88]	; (801093c <tcp_input_delayed_close+0x70>)
 80108e2:	4817      	ldr	r0, [pc, #92]	; (8010940 <tcp_input_delayed_close+0x74>)
 80108e4:	f006 fe04 	bl	80174f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80108e8:	4b16      	ldr	r3, [pc, #88]	; (8010944 <tcp_input_delayed_close+0x78>)
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	f003 0310 	and.w	r3, r3, #16
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d01c      	beq.n	801092e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	8b5b      	ldrh	r3, [r3, #26]
 80108f8:	f003 0310 	and.w	r3, r3, #16
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10d      	bne.n	801091c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010906:	2b00      	cmp	r3, #0
 8010908:	d008      	beq.n	801091c <tcp_input_delayed_close+0x50>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	6912      	ldr	r2, [r2, #16]
 8010914:	f06f 010e 	mvn.w	r1, #14
 8010918:	4610      	mov	r0, r2
 801091a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801091c:	6879      	ldr	r1, [r7, #4]
 801091e:	480a      	ldr	r0, [pc, #40]	; (8010948 <tcp_input_delayed_close+0x7c>)
 8010920:	f7ff fa50 	bl	800fdc4 <tcp_pcb_remove>
    tcp_free(pcb);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7fd fd1d 	bl	800e364 <tcp_free>
    return 1;
 801092a:	2301      	movs	r3, #1
 801092c:	e000      	b.n	8010930 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	0801c2b4 	.word	0x0801c2b4
 801093c:	0801c484 	.word	0x0801c484
 8010940:	0801c300 	.word	0x0801c300
 8010944:	20011bdd 	.word	0x20011bdd
 8010948:	20011ba4 	.word	0x20011ba4

0801094c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801094c:	b590      	push	{r4, r7, lr}
 801094e:	b08b      	sub	sp, #44	; 0x2c
 8010950:	af04      	add	r7, sp, #16
 8010952:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010954:	4b6f      	ldr	r3, [pc, #444]	; (8010b14 <tcp_listen_input+0x1c8>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	f003 0304 	and.w	r3, r3, #4
 801095c:	2b00      	cmp	r3, #0
 801095e:	f040 80d2 	bne.w	8010b06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d106      	bne.n	8010976 <tcp_listen_input+0x2a>
 8010968:	4b6b      	ldr	r3, [pc, #428]	; (8010b18 <tcp_listen_input+0x1cc>)
 801096a:	f240 2281 	movw	r2, #641	; 0x281
 801096e:	496b      	ldr	r1, [pc, #428]	; (8010b1c <tcp_listen_input+0x1d0>)
 8010970:	486b      	ldr	r0, [pc, #428]	; (8010b20 <tcp_listen_input+0x1d4>)
 8010972:	f006 fdbd 	bl	80174f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010976:	4b67      	ldr	r3, [pc, #412]	; (8010b14 <tcp_listen_input+0x1c8>)
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	f003 0310 	and.w	r3, r3, #16
 801097e:	2b00      	cmp	r3, #0
 8010980:	d019      	beq.n	80109b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010982:	4b68      	ldr	r3, [pc, #416]	; (8010b24 <tcp_listen_input+0x1d8>)
 8010984:	6819      	ldr	r1, [r3, #0]
 8010986:	4b68      	ldr	r3, [pc, #416]	; (8010b28 <tcp_listen_input+0x1dc>)
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	461a      	mov	r2, r3
 801098c:	4b67      	ldr	r3, [pc, #412]	; (8010b2c <tcp_listen_input+0x1e0>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010992:	4b67      	ldr	r3, [pc, #412]	; (8010b30 <tcp_listen_input+0x1e4>)
 8010994:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010996:	885b      	ldrh	r3, [r3, #2]
 8010998:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801099a:	4a65      	ldr	r2, [pc, #404]	; (8010b30 <tcp_listen_input+0x1e4>)
 801099c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801099e:	8812      	ldrh	r2, [r2, #0]
 80109a0:	b292      	uxth	r2, r2
 80109a2:	9202      	str	r2, [sp, #8]
 80109a4:	9301      	str	r3, [sp, #4]
 80109a6:	4b63      	ldr	r3, [pc, #396]	; (8010b34 <tcp_listen_input+0x1e8>)
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	4b63      	ldr	r3, [pc, #396]	; (8010b38 <tcp_listen_input+0x1ec>)
 80109ac:	4602      	mov	r2, r0
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f003 fbfa 	bl	80141a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80109b4:	e0a9      	b.n	8010b0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80109b6:	4b57      	ldr	r3, [pc, #348]	; (8010b14 <tcp_listen_input+0x1c8>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	f003 0302 	and.w	r3, r3, #2
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f000 80a3 	beq.w	8010b0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7d5b      	ldrb	r3, [r3, #21]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7ff f859 	bl	800fa80 <tcp_alloc>
 80109ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d111      	bne.n	80109fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	699b      	ldr	r3, [r3, #24]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00a      	beq.n	80109f4 <tcp_listen_input+0xa8>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	6910      	ldr	r0, [r2, #16]
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109ea:	2100      	movs	r1, #0
 80109ec:	4798      	blx	r3
 80109ee:	4603      	mov	r3, r0
 80109f0:	73bb      	strb	r3, [r7, #14]
      return;
 80109f2:	e08b      	b.n	8010b0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80109f4:	23f0      	movs	r3, #240	; 0xf0
 80109f6:	73bb      	strb	r3, [r7, #14]
      return;
 80109f8:	e088      	b.n	8010b0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80109fa:	4b50      	ldr	r3, [pc, #320]	; (8010b3c <tcp_listen_input+0x1f0>)
 80109fc:	695a      	ldr	r2, [r3, #20]
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010a02:	4b4e      	ldr	r3, [pc, #312]	; (8010b3c <tcp_listen_input+0x1f0>)
 8010a04:	691a      	ldr	r2, [r3, #16]
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	8ada      	ldrh	r2, [r3, #22]
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010a12:	4b47      	ldr	r3, [pc, #284]	; (8010b30 <tcp_listen_input+0x1e4>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	2203      	movs	r2, #3
 8010a22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010a24:	4b41      	ldr	r3, [pc, #260]	; (8010b2c <tcp_listen_input+0x1e0>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	1c5a      	adds	r2, r3, #1
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010a36:	6978      	ldr	r0, [r7, #20]
 8010a38:	f7ff fa58 	bl	800feec <tcp_next_iss>
 8010a3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	693a      	ldr	r2, [r7, #16]
 8010a42:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	693a      	ldr	r2, [r7, #16]
 8010a48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	693a      	ldr	r2, [r7, #16]
 8010a54:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010a56:	4b35      	ldr	r3, [pc, #212]	; (8010b2c <tcp_listen_input+0x1e0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	1e5a      	subs	r2, r3, #1
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	691a      	ldr	r2, [r3, #16]
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	7a5b      	ldrb	r3, [r3, #9]
 8010a72:	f003 030c 	and.w	r3, r3, #12
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	7a1a      	ldrb	r2, [r3, #8]
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010a84:	4b2e      	ldr	r3, [pc, #184]	; (8010b40 <tcp_listen_input+0x1f4>)
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	60da      	str	r2, [r3, #12]
 8010a8c:	4a2c      	ldr	r2, [pc, #176]	; (8010b40 <tcp_listen_input+0x1f4>)
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	6013      	str	r3, [r2, #0]
 8010a92:	f003 fd4b 	bl	801452c <tcp_timer_needed>
 8010a96:	4b2b      	ldr	r3, [pc, #172]	; (8010b44 <tcp_listen_input+0x1f8>)
 8010a98:	2201      	movs	r2, #1
 8010a9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010a9c:	6978      	ldr	r0, [r7, #20]
 8010a9e:	f001 fd8f 	bl	80125c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010aa2:	4b23      	ldr	r3, [pc, #140]	; (8010b30 <tcp_listen_input+0x1e4>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	89db      	ldrh	r3, [r3, #14]
 8010aa8:	b29a      	uxth	r2, r3
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f004 ff85 	bl	80159d4 <ip4_route>
 8010aca:	4601      	mov	r1, r0
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	3304      	adds	r3, #4
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f7ff fa30 	bl	800ff38 <tcp_eff_send_mss_netif>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	461a      	mov	r2, r3
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010ae0:	2112      	movs	r1, #18
 8010ae2:	6978      	ldr	r0, [r7, #20]
 8010ae4:	f002 fc9c 	bl	8013420 <tcp_enqueue_flags>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d004      	beq.n	8010afe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010af4:	2100      	movs	r1, #0
 8010af6:	6978      	ldr	r0, [r7, #20]
 8010af8:	f7fd feba 	bl	800e870 <tcp_abandon>
      return;
 8010afc:	e006      	b.n	8010b0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010afe:	6978      	ldr	r0, [r7, #20]
 8010b00:	f002 fd7c 	bl	80135fc <tcp_output>
  return;
 8010b04:	e001      	b.n	8010b0a <tcp_listen_input+0x1be>
    return;
 8010b06:	bf00      	nop
 8010b08:	e000      	b.n	8010b0c <tcp_listen_input+0x1c0>
  return;
 8010b0a:	bf00      	nop
}
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}
 8010b12:	bf00      	nop
 8010b14:	20011bdc 	.word	0x20011bdc
 8010b18:	0801c2b4 	.word	0x0801c2b4
 8010b1c:	0801c4ac 	.word	0x0801c4ac
 8010b20:	0801c300 	.word	0x0801c300
 8010b24:	20011bd4 	.word	0x20011bd4
 8010b28:	20011bda 	.word	0x20011bda
 8010b2c:	20011bd0 	.word	0x20011bd0
 8010b30:	20011bc0 	.word	0x20011bc0
 8010b34:	20009b1c 	.word	0x20009b1c
 8010b38:	20009b20 	.word	0x20009b20
 8010b3c:	20009b0c 	.word	0x20009b0c
 8010b40:	20011ba4 	.word	0x20011ba4
 8010b44:	20011bac 	.word	0x20011bac

08010b48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b086      	sub	sp, #24
 8010b4c:	af04      	add	r7, sp, #16
 8010b4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010b50:	4b2f      	ldr	r3, [pc, #188]	; (8010c10 <tcp_timewait_input+0xc8>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	f003 0304 	and.w	r3, r3, #4
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d153      	bne.n	8010c04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d106      	bne.n	8010b70 <tcp_timewait_input+0x28>
 8010b62:	4b2c      	ldr	r3, [pc, #176]	; (8010c14 <tcp_timewait_input+0xcc>)
 8010b64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010b68:	492b      	ldr	r1, [pc, #172]	; (8010c18 <tcp_timewait_input+0xd0>)
 8010b6a:	482c      	ldr	r0, [pc, #176]	; (8010c1c <tcp_timewait_input+0xd4>)
 8010b6c:	f006 fcc0 	bl	80174f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010b70:	4b27      	ldr	r3, [pc, #156]	; (8010c10 <tcp_timewait_input+0xc8>)
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	f003 0302 	and.w	r3, r3, #2
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d02a      	beq.n	8010bd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010b7c:	4b28      	ldr	r3, [pc, #160]	; (8010c20 <tcp_timewait_input+0xd8>)
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	db2d      	blt.n	8010be6 <tcp_timewait_input+0x9e>
 8010b8a:	4b25      	ldr	r3, [pc, #148]	; (8010c20 <tcp_timewait_input+0xd8>)
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b92:	6879      	ldr	r1, [r7, #4]
 8010b94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b96:	440b      	add	r3, r1
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	dc23      	bgt.n	8010be6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b9e:	4b21      	ldr	r3, [pc, #132]	; (8010c24 <tcp_timewait_input+0xdc>)
 8010ba0:	6819      	ldr	r1, [r3, #0]
 8010ba2:	4b21      	ldr	r3, [pc, #132]	; (8010c28 <tcp_timewait_input+0xe0>)
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	4b1d      	ldr	r3, [pc, #116]	; (8010c20 <tcp_timewait_input+0xd8>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bae:	4b1f      	ldr	r3, [pc, #124]	; (8010c2c <tcp_timewait_input+0xe4>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bb2:	885b      	ldrh	r3, [r3, #2]
 8010bb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bb6:	4a1d      	ldr	r2, [pc, #116]	; (8010c2c <tcp_timewait_input+0xe4>)
 8010bb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bba:	8812      	ldrh	r2, [r2, #0]
 8010bbc:	b292      	uxth	r2, r2
 8010bbe:	9202      	str	r2, [sp, #8]
 8010bc0:	9301      	str	r3, [sp, #4]
 8010bc2:	4b1b      	ldr	r3, [pc, #108]	; (8010c30 <tcp_timewait_input+0xe8>)
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	4b1b      	ldr	r3, [pc, #108]	; (8010c34 <tcp_timewait_input+0xec>)
 8010bc8:	4602      	mov	r2, r0
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f003 faec 	bl	80141a8 <tcp_rst>
      return;
 8010bd0:	e01b      	b.n	8010c0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010bd2:	4b0f      	ldr	r3, [pc, #60]	; (8010c10 <tcp_timewait_input+0xc8>)
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	f003 0301 	and.w	r3, r3, #1
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d003      	beq.n	8010be6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010bde:	4b16      	ldr	r3, [pc, #88]	; (8010c38 <tcp_timewait_input+0xf0>)
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010be6:	4b10      	ldr	r3, [pc, #64]	; (8010c28 <tcp_timewait_input+0xe0>)
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00c      	beq.n	8010c08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	8b5b      	ldrh	r3, [r3, #26]
 8010bf2:	f043 0302 	orr.w	r3, r3, #2
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f002 fcfd 	bl	80135fc <tcp_output>
  }
  return;
 8010c02:	e001      	b.n	8010c08 <tcp_timewait_input+0xc0>
    return;
 8010c04:	bf00      	nop
 8010c06:	e000      	b.n	8010c0a <tcp_timewait_input+0xc2>
  return;
 8010c08:	bf00      	nop
}
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	20011bdc 	.word	0x20011bdc
 8010c14:	0801c2b4 	.word	0x0801c2b4
 8010c18:	0801c4cc 	.word	0x0801c4cc
 8010c1c:	0801c300 	.word	0x0801c300
 8010c20:	20011bd0 	.word	0x20011bd0
 8010c24:	20011bd4 	.word	0x20011bd4
 8010c28:	20011bda 	.word	0x20011bda
 8010c2c:	20011bc0 	.word	0x20011bc0
 8010c30:	20009b1c 	.word	0x20009b1c
 8010c34:	20009b20 	.word	0x20009b20
 8010c38:	20011b98 	.word	0x20011b98

08010c3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010c3c:	b590      	push	{r4, r7, lr}
 8010c3e:	b08d      	sub	sp, #52	; 0x34
 8010c40:	af04      	add	r7, sp, #16
 8010c42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d106      	bne.n	8010c60 <tcp_process+0x24>
 8010c52:	4b9d      	ldr	r3, [pc, #628]	; (8010ec8 <tcp_process+0x28c>)
 8010c54:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010c58:	499c      	ldr	r1, [pc, #624]	; (8010ecc <tcp_process+0x290>)
 8010c5a:	489d      	ldr	r0, [pc, #628]	; (8010ed0 <tcp_process+0x294>)
 8010c5c:	f006 fc48 	bl	80174f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010c60:	4b9c      	ldr	r3, [pc, #624]	; (8010ed4 <tcp_process+0x298>)
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	f003 0304 	and.w	r3, r3, #4
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d04e      	beq.n	8010d0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	7d1b      	ldrb	r3, [r3, #20]
 8010c70:	2b02      	cmp	r3, #2
 8010c72:	d108      	bne.n	8010c86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c78:	4b97      	ldr	r3, [pc, #604]	; (8010ed8 <tcp_process+0x29c>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d123      	bne.n	8010cc8 <tcp_process+0x8c>
        acceptable = 1;
 8010c80:	2301      	movs	r3, #1
 8010c82:	76fb      	strb	r3, [r7, #27]
 8010c84:	e020      	b.n	8010cc8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c8a:	4b94      	ldr	r3, [pc, #592]	; (8010edc <tcp_process+0x2a0>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d102      	bne.n	8010c98 <tcp_process+0x5c>
        acceptable = 1;
 8010c92:	2301      	movs	r3, #1
 8010c94:	76fb      	strb	r3, [r7, #27]
 8010c96:	e017      	b.n	8010cc8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c98:	4b90      	ldr	r3, [pc, #576]	; (8010edc <tcp_process+0x2a0>)
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	db10      	blt.n	8010cc8 <tcp_process+0x8c>
 8010ca6:	4b8d      	ldr	r3, [pc, #564]	; (8010edc <tcp_process+0x2a0>)
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cae:	6879      	ldr	r1, [r7, #4]
 8010cb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cb2:	440b      	add	r3, r1
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	dc06      	bgt.n	8010cc8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	8b5b      	ldrh	r3, [r3, #26]
 8010cbe:	f043 0302 	orr.w	r3, r3, #2
 8010cc2:	b29a      	uxth	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010cc8:	7efb      	ldrb	r3, [r7, #27]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d01b      	beq.n	8010d06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	7d1b      	ldrb	r3, [r3, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d106      	bne.n	8010ce4 <tcp_process+0xa8>
 8010cd6:	4b7c      	ldr	r3, [pc, #496]	; (8010ec8 <tcp_process+0x28c>)
 8010cd8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010cdc:	4980      	ldr	r1, [pc, #512]	; (8010ee0 <tcp_process+0x2a4>)
 8010cde:	487c      	ldr	r0, [pc, #496]	; (8010ed0 <tcp_process+0x294>)
 8010ce0:	f006 fc06 	bl	80174f0 <iprintf>
      recv_flags |= TF_RESET;
 8010ce4:	4b7f      	ldr	r3, [pc, #508]	; (8010ee4 <tcp_process+0x2a8>)
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	f043 0308 	orr.w	r3, r3, #8
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b7d      	ldr	r3, [pc, #500]	; (8010ee4 <tcp_process+0x2a8>)
 8010cf0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8b5b      	ldrh	r3, [r3, #26]
 8010cf6:	f023 0301 	bic.w	r3, r3, #1
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010d00:	f06f 030d 	mvn.w	r3, #13
 8010d04:	e37a      	b.n	80113fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e378      	b.n	80113fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010d0a:	4b72      	ldr	r3, [pc, #456]	; (8010ed4 <tcp_process+0x298>)
 8010d0c:	781b      	ldrb	r3, [r3, #0]
 8010d0e:	f003 0302 	and.w	r3, r3, #2
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d010      	beq.n	8010d38 <tcp_process+0xfc>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	7d1b      	ldrb	r3, [r3, #20]
 8010d1a:	2b02      	cmp	r3, #2
 8010d1c:	d00c      	beq.n	8010d38 <tcp_process+0xfc>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	7d1b      	ldrb	r3, [r3, #20]
 8010d22:	2b03      	cmp	r3, #3
 8010d24:	d008      	beq.n	8010d38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8b5b      	ldrh	r3, [r3, #26]
 8010d2a:	f043 0302 	orr.w	r3, r3, #2
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	e361      	b.n	80113fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	8b5b      	ldrh	r3, [r3, #26]
 8010d3c:	f003 0310 	and.w	r3, r3, #16
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d103      	bne.n	8010d4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010d44:	4b68      	ldr	r3, [pc, #416]	; (8010ee8 <tcp_process+0x2ac>)
 8010d46:	681a      	ldr	r2, [r3, #0]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f001 fc2f 	bl	80125c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	7d1b      	ldrb	r3, [r3, #20]
 8010d66:	3b02      	subs	r3, #2
 8010d68:	2b07      	cmp	r3, #7
 8010d6a:	f200 8337 	bhi.w	80113dc <tcp_process+0x7a0>
 8010d6e:	a201      	add	r2, pc, #4	; (adr r2, 8010d74 <tcp_process+0x138>)
 8010d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d74:	08010d95 	.word	0x08010d95
 8010d78:	08010fc5 	.word	0x08010fc5
 8010d7c:	0801113d 	.word	0x0801113d
 8010d80:	08011167 	.word	0x08011167
 8010d84:	0801128b 	.word	0x0801128b
 8010d88:	0801113d 	.word	0x0801113d
 8010d8c:	08011317 	.word	0x08011317
 8010d90:	080113a7 	.word	0x080113a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010d94:	4b4f      	ldr	r3, [pc, #316]	; (8010ed4 <tcp_process+0x298>)
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	f003 0310 	and.w	r3, r3, #16
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f000 80e4 	beq.w	8010f6a <tcp_process+0x32e>
 8010da2:	4b4c      	ldr	r3, [pc, #304]	; (8010ed4 <tcp_process+0x298>)
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f003 0302 	and.w	r3, r3, #2
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 80dd 	beq.w	8010f6a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010db4:	1c5a      	adds	r2, r3, #1
 8010db6:	4b48      	ldr	r3, [pc, #288]	; (8010ed8 <tcp_process+0x29c>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	f040 80d5 	bne.w	8010f6a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010dc0:	4b46      	ldr	r3, [pc, #280]	; (8010edc <tcp_process+0x2a0>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	1c5a      	adds	r2, r3, #1
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010dd2:	4b41      	ldr	r3, [pc, #260]	; (8010ed8 <tcp_process+0x29c>)
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010dda:	4b44      	ldr	r3, [pc, #272]	; (8010eec <tcp_process+0x2b0>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	89db      	ldrh	r3, [r3, #14]
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010df4:	4b39      	ldr	r3, [pc, #228]	; (8010edc <tcp_process+0x2a0>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	1e5a      	subs	r2, r3, #1
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2204      	movs	r2, #4
 8010e02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	3304      	adds	r3, #4
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f004 fde1 	bl	80159d4 <ip4_route>
 8010e12:	4601      	mov	r1, r0
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	3304      	adds	r3, #4
 8010e18:	461a      	mov	r2, r3
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f7ff f88c 	bl	800ff38 <tcp_eff_send_mss_netif>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e2c:	009a      	lsls	r2, r3, #2
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	f241 111c 	movw	r1, #4380	; 0x111c
 8010e38:	428b      	cmp	r3, r1
 8010e3a:	bf38      	it	cc
 8010e3c:	460b      	movcc	r3, r1
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d204      	bcs.n	8010e4c <tcp_process+0x210>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	e00d      	b.n	8010e68 <tcp_process+0x22c>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	f241 121c 	movw	r2, #4380	; 0x111c
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d904      	bls.n	8010e64 <tcp_process+0x228>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e5e:	005b      	lsls	r3, r3, #1
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	e001      	b.n	8010e68 <tcp_process+0x22c>
 8010e64:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d106      	bne.n	8010e86 <tcp_process+0x24a>
 8010e78:	4b13      	ldr	r3, [pc, #76]	; (8010ec8 <tcp_process+0x28c>)
 8010e7a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010e7e:	491c      	ldr	r1, [pc, #112]	; (8010ef0 <tcp_process+0x2b4>)
 8010e80:	4813      	ldr	r0, [pc, #76]	; (8010ed0 <tcp_process+0x294>)
 8010e82:	f006 fb35 	bl	80174f0 <iprintf>
        --pcb->snd_queuelen;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d12a      	bne.n	8010ef8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ea6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d106      	bne.n	8010ebc <tcp_process+0x280>
 8010eae:	4b06      	ldr	r3, [pc, #24]	; (8010ec8 <tcp_process+0x28c>)
 8010eb0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010eb4:	490f      	ldr	r1, [pc, #60]	; (8010ef4 <tcp_process+0x2b8>)
 8010eb6:	4806      	ldr	r0, [pc, #24]	; (8010ed0 <tcp_process+0x294>)
 8010eb8:	f006 fb1a 	bl	80174f0 <iprintf>
          pcb->unsent = rseg->next;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ec4:	e01c      	b.n	8010f00 <tcp_process+0x2c4>
 8010ec6:	bf00      	nop
 8010ec8:	0801c2b4 	.word	0x0801c2b4
 8010ecc:	0801c4ec 	.word	0x0801c4ec
 8010ed0:	0801c300 	.word	0x0801c300
 8010ed4:	20011bdc 	.word	0x20011bdc
 8010ed8:	20011bd4 	.word	0x20011bd4
 8010edc:	20011bd0 	.word	0x20011bd0
 8010ee0:	0801c508 	.word	0x0801c508
 8010ee4:	20011bdd 	.word	0x20011bdd
 8010ee8:	20011b98 	.word	0x20011b98
 8010eec:	20011bc0 	.word	0x20011bc0
 8010ef0:	0801c528 	.word	0x0801c528
 8010ef4:	0801c540 	.word	0x0801c540
        } else {
          pcb->unacked = rseg->next;
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010f00:	69f8      	ldr	r0, [r7, #28]
 8010f02:	f7fe fc54 	bl	800f7ae <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d104      	bne.n	8010f18 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f14:	861a      	strh	r2, [r3, #48]	; 0x30
 8010f16:	e006      	b.n	8010f26 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00a      	beq.n	8010f46 <tcp_process+0x30a>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	6910      	ldr	r0, [r2, #16]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	6879      	ldr	r1, [r7, #4]
 8010f3e:	4798      	blx	r3
 8010f40:	4603      	mov	r3, r0
 8010f42:	76bb      	strb	r3, [r7, #26]
 8010f44:	e001      	b.n	8010f4a <tcp_process+0x30e>
 8010f46:	2300      	movs	r3, #0
 8010f48:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010f4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f4e:	f113 0f0d 	cmn.w	r3, #13
 8010f52:	d102      	bne.n	8010f5a <tcp_process+0x31e>
          return ERR_ABRT;
 8010f54:	f06f 030c 	mvn.w	r3, #12
 8010f58:	e250      	b.n	80113fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	8b5b      	ldrh	r3, [r3, #26]
 8010f5e:	f043 0302 	orr.w	r3, r3, #2
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010f68:	e23a      	b.n	80113e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010f6a:	4b98      	ldr	r3, [pc, #608]	; (80111cc <tcp_process+0x590>)
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	f003 0310 	and.w	r3, r3, #16
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	f000 8234 	beq.w	80113e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f78:	4b95      	ldr	r3, [pc, #596]	; (80111d0 <tcp_process+0x594>)
 8010f7a:	6819      	ldr	r1, [r3, #0]
 8010f7c:	4b95      	ldr	r3, [pc, #596]	; (80111d4 <tcp_process+0x598>)
 8010f7e:	881b      	ldrh	r3, [r3, #0]
 8010f80:	461a      	mov	r2, r3
 8010f82:	4b95      	ldr	r3, [pc, #596]	; (80111d8 <tcp_process+0x59c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f88:	4b94      	ldr	r3, [pc, #592]	; (80111dc <tcp_process+0x5a0>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f8c:	885b      	ldrh	r3, [r3, #2]
 8010f8e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f90:	4a92      	ldr	r2, [pc, #584]	; (80111dc <tcp_process+0x5a0>)
 8010f92:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f94:	8812      	ldrh	r2, [r2, #0]
 8010f96:	b292      	uxth	r2, r2
 8010f98:	9202      	str	r2, [sp, #8]
 8010f9a:	9301      	str	r3, [sp, #4]
 8010f9c:	4b90      	ldr	r3, [pc, #576]	; (80111e0 <tcp_process+0x5a4>)
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	4b90      	ldr	r3, [pc, #576]	; (80111e4 <tcp_process+0x5a8>)
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f003 f8ff 	bl	80141a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fb0:	2b05      	cmp	r3, #5
 8010fb2:	f200 8215 	bhi.w	80113e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f002 feb9 	bl	8013d34 <tcp_rexmit_rto>
      break;
 8010fc2:	e20d      	b.n	80113e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010fc4:	4b81      	ldr	r3, [pc, #516]	; (80111cc <tcp_process+0x590>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 0310 	and.w	r3, r3, #16
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f000 80a1 	beq.w	8011114 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fd2:	4b7f      	ldr	r3, [pc, #508]	; (80111d0 <tcp_process+0x594>)
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	db7e      	blt.n	80110e0 <tcp_process+0x4a4>
 8010fe2:	4b7b      	ldr	r3, [pc, #492]	; (80111d0 <tcp_process+0x594>)
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	dc77      	bgt.n	80110e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2204      	movs	r2, #4
 8010ff4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d102      	bne.n	8011004 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010ffe:	23fa      	movs	r3, #250	; 0xfa
 8011000:	76bb      	strb	r3, [r7, #26]
 8011002:	e01d      	b.n	8011040 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d106      	bne.n	801101c <tcp_process+0x3e0>
 801100e:	4b76      	ldr	r3, [pc, #472]	; (80111e8 <tcp_process+0x5ac>)
 8011010:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011014:	4975      	ldr	r1, [pc, #468]	; (80111ec <tcp_process+0x5b0>)
 8011016:	4876      	ldr	r0, [pc, #472]	; (80111f0 <tcp_process+0x5b4>)
 8011018:	f006 fa6a 	bl	80174f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00a      	beq.n	801103c <tcp_process+0x400>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801102a:	699b      	ldr	r3, [r3, #24]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	6910      	ldr	r0, [r2, #16]
 8011030:	2200      	movs	r2, #0
 8011032:	6879      	ldr	r1, [r7, #4]
 8011034:	4798      	blx	r3
 8011036:	4603      	mov	r3, r0
 8011038:	76bb      	strb	r3, [r7, #26]
 801103a:	e001      	b.n	8011040 <tcp_process+0x404>
 801103c:	23f0      	movs	r3, #240	; 0xf0
 801103e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011040:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00a      	beq.n	801105e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011048:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801104c:	f113 0f0d 	cmn.w	r3, #13
 8011050:	d002      	beq.n	8011058 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7fd fcca 	bl	800e9ec <tcp_abort>
            }
            return ERR_ABRT;
 8011058:	f06f 030c 	mvn.w	r3, #12
 801105c:	e1ce      	b.n	80113fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fae0 	bl	8011624 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011064:	4b63      	ldr	r3, [pc, #396]	; (80111f4 <tcp_process+0x5b8>)
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d005      	beq.n	8011078 <tcp_process+0x43c>
            recv_acked--;
 801106c:	4b61      	ldr	r3, [pc, #388]	; (80111f4 <tcp_process+0x5b8>)
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	3b01      	subs	r3, #1
 8011072:	b29a      	uxth	r2, r3
 8011074:	4b5f      	ldr	r3, [pc, #380]	; (80111f4 <tcp_process+0x5b8>)
 8011076:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801107c:	009a      	lsls	r2, r3, #2
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011082:	005b      	lsls	r3, r3, #1
 8011084:	f241 111c 	movw	r1, #4380	; 0x111c
 8011088:	428b      	cmp	r3, r1
 801108a:	bf38      	it	cc
 801108c:	460b      	movcc	r3, r1
 801108e:	429a      	cmp	r2, r3
 8011090:	d204      	bcs.n	801109c <tcp_process+0x460>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	b29b      	uxth	r3, r3
 801109a:	e00d      	b.n	80110b8 <tcp_process+0x47c>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110a0:	005b      	lsls	r3, r3, #1
 80110a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d904      	bls.n	80110b4 <tcp_process+0x478>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	e001      	b.n	80110b8 <tcp_process+0x47c>
 80110b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80110be:	4b4e      	ldr	r3, [pc, #312]	; (80111f8 <tcp_process+0x5bc>)
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	f003 0320 	and.w	r3, r3, #32
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d037      	beq.n	801113a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8b5b      	ldrh	r3, [r3, #26]
 80110ce:	f043 0302 	orr.w	r3, r3, #2
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2207      	movs	r2, #7
 80110dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80110de:	e02c      	b.n	801113a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110e0:	4b3b      	ldr	r3, [pc, #236]	; (80111d0 <tcp_process+0x594>)
 80110e2:	6819      	ldr	r1, [r3, #0]
 80110e4:	4b3b      	ldr	r3, [pc, #236]	; (80111d4 <tcp_process+0x598>)
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	461a      	mov	r2, r3
 80110ea:	4b3b      	ldr	r3, [pc, #236]	; (80111d8 <tcp_process+0x59c>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110f0:	4b3a      	ldr	r3, [pc, #232]	; (80111dc <tcp_process+0x5a0>)
 80110f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110f4:	885b      	ldrh	r3, [r3, #2]
 80110f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110f8:	4a38      	ldr	r2, [pc, #224]	; (80111dc <tcp_process+0x5a0>)
 80110fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110fc:	8812      	ldrh	r2, [r2, #0]
 80110fe:	b292      	uxth	r2, r2
 8011100:	9202      	str	r2, [sp, #8]
 8011102:	9301      	str	r3, [sp, #4]
 8011104:	4b36      	ldr	r3, [pc, #216]	; (80111e0 <tcp_process+0x5a4>)
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	4b36      	ldr	r3, [pc, #216]	; (80111e4 <tcp_process+0x5a8>)
 801110a:	4602      	mov	r2, r0
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f003 f84b 	bl	80141a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011112:	e167      	b.n	80113e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011114:	4b2d      	ldr	r3, [pc, #180]	; (80111cc <tcp_process+0x590>)
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 0302 	and.w	r3, r3, #2
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 8161 	beq.w	80113e4 <tcp_process+0x7a8>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011126:	1e5a      	subs	r2, r3, #1
 8011128:	4b2b      	ldr	r3, [pc, #172]	; (80111d8 <tcp_process+0x59c>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	429a      	cmp	r2, r3
 801112e:	f040 8159 	bne.w	80113e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f002 fe20 	bl	8013d78 <tcp_rexmit>
      break;
 8011138:	e154      	b.n	80113e4 <tcp_process+0x7a8>
 801113a:	e153      	b.n	80113e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 fa71 	bl	8011624 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011142:	4b2d      	ldr	r3, [pc, #180]	; (80111f8 <tcp_process+0x5bc>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 0320 	and.w	r3, r3, #32
 801114a:	2b00      	cmp	r3, #0
 801114c:	f000 814c 	beq.w	80113e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	8b5b      	ldrh	r3, [r3, #26]
 8011154:	f043 0302 	orr.w	r3, r3, #2
 8011158:	b29a      	uxth	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2207      	movs	r2, #7
 8011162:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011164:	e140      	b.n	80113e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f000 fa5c 	bl	8011624 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801116c:	4b22      	ldr	r3, [pc, #136]	; (80111f8 <tcp_process+0x5bc>)
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	f003 0320 	and.w	r3, r3, #32
 8011174:	2b00      	cmp	r3, #0
 8011176:	d071      	beq.n	801125c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011178:	4b14      	ldr	r3, [pc, #80]	; (80111cc <tcp_process+0x590>)
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	f003 0310 	and.w	r3, r3, #16
 8011180:	2b00      	cmp	r3, #0
 8011182:	d060      	beq.n	8011246 <tcp_process+0x60a>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011188:	4b11      	ldr	r3, [pc, #68]	; (80111d0 <tcp_process+0x594>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	429a      	cmp	r2, r3
 801118e:	d15a      	bne.n	8011246 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011194:	2b00      	cmp	r3, #0
 8011196:	d156      	bne.n	8011246 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8b5b      	ldrh	r3, [r3, #26]
 801119c:	f043 0302 	orr.w	r3, r3, #2
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f7fe fdbc 	bl	800fd24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80111ac:	4b13      	ldr	r3, [pc, #76]	; (80111fc <tcp_process+0x5c0>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d105      	bne.n	80111c2 <tcp_process+0x586>
 80111b6:	4b11      	ldr	r3, [pc, #68]	; (80111fc <tcp_process+0x5c0>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	4a0f      	ldr	r2, [pc, #60]	; (80111fc <tcp_process+0x5c0>)
 80111be:	6013      	str	r3, [r2, #0]
 80111c0:	e02e      	b.n	8011220 <tcp_process+0x5e4>
 80111c2:	4b0e      	ldr	r3, [pc, #56]	; (80111fc <tcp_process+0x5c0>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	617b      	str	r3, [r7, #20]
 80111c8:	e027      	b.n	801121a <tcp_process+0x5de>
 80111ca:	bf00      	nop
 80111cc:	20011bdc 	.word	0x20011bdc
 80111d0:	20011bd4 	.word	0x20011bd4
 80111d4:	20011bda 	.word	0x20011bda
 80111d8:	20011bd0 	.word	0x20011bd0
 80111dc:	20011bc0 	.word	0x20011bc0
 80111e0:	20009b1c 	.word	0x20009b1c
 80111e4:	20009b20 	.word	0x20009b20
 80111e8:	0801c2b4 	.word	0x0801c2b4
 80111ec:	0801c554 	.word	0x0801c554
 80111f0:	0801c300 	.word	0x0801c300
 80111f4:	20011bd8 	.word	0x20011bd8
 80111f8:	20011bdd 	.word	0x20011bdd
 80111fc:	20011ba4 	.word	0x20011ba4
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	687a      	ldr	r2, [r7, #4]
 8011206:	429a      	cmp	r2, r3
 8011208:	d104      	bne.n	8011214 <tcp_process+0x5d8>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	68da      	ldr	r2, [r3, #12]
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	60da      	str	r2, [r3, #12]
 8011212:	e005      	b.n	8011220 <tcp_process+0x5e4>
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	617b      	str	r3, [r7, #20]
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1ef      	bne.n	8011200 <tcp_process+0x5c4>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	60da      	str	r2, [r3, #12]
 8011226:	4b77      	ldr	r3, [pc, #476]	; (8011404 <tcp_process+0x7c8>)
 8011228:	2201      	movs	r2, #1
 801122a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	220a      	movs	r2, #10
 8011230:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011232:	4b75      	ldr	r3, [pc, #468]	; (8011408 <tcp_process+0x7cc>)
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	60da      	str	r2, [r3, #12]
 801123a:	4a73      	ldr	r2, [pc, #460]	; (8011408 <tcp_process+0x7cc>)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6013      	str	r3, [r2, #0]
 8011240:	f003 f974 	bl	801452c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011244:	e0d2      	b.n	80113ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	8b5b      	ldrh	r3, [r3, #26]
 801124a:	f043 0302 	orr.w	r3, r3, #2
 801124e:	b29a      	uxth	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2208      	movs	r2, #8
 8011258:	751a      	strb	r2, [r3, #20]
      break;
 801125a:	e0c7      	b.n	80113ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801125c:	4b6b      	ldr	r3, [pc, #428]	; (801140c <tcp_process+0x7d0>)
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	f003 0310 	and.w	r3, r3, #16
 8011264:	2b00      	cmp	r3, #0
 8011266:	f000 80c1 	beq.w	80113ec <tcp_process+0x7b0>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801126e:	4b68      	ldr	r3, [pc, #416]	; (8011410 <tcp_process+0x7d4>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	f040 80ba 	bne.w	80113ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801127c:	2b00      	cmp	r3, #0
 801127e:	f040 80b5 	bne.w	80113ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2206      	movs	r2, #6
 8011286:	751a      	strb	r2, [r3, #20]
      break;
 8011288:	e0b0      	b.n	80113ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 f9ca 	bl	8011624 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011290:	4b60      	ldr	r3, [pc, #384]	; (8011414 <tcp_process+0x7d8>)
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	f003 0320 	and.w	r3, r3, #32
 8011298:	2b00      	cmp	r3, #0
 801129a:	f000 80a9 	beq.w	80113f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8b5b      	ldrh	r3, [r3, #26]
 80112a2:	f043 0302 	orr.w	r3, r3, #2
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7fe fd39 	bl	800fd24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80112b2:	4b59      	ldr	r3, [pc, #356]	; (8011418 <tcp_process+0x7dc>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d105      	bne.n	80112c8 <tcp_process+0x68c>
 80112bc:	4b56      	ldr	r3, [pc, #344]	; (8011418 <tcp_process+0x7dc>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	4a55      	ldr	r2, [pc, #340]	; (8011418 <tcp_process+0x7dc>)
 80112c4:	6013      	str	r3, [r2, #0]
 80112c6:	e013      	b.n	80112f0 <tcp_process+0x6b4>
 80112c8:	4b53      	ldr	r3, [pc, #332]	; (8011418 <tcp_process+0x7dc>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	613b      	str	r3, [r7, #16]
 80112ce:	e00c      	b.n	80112ea <tcp_process+0x6ae>
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d104      	bne.n	80112e4 <tcp_process+0x6a8>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	68da      	ldr	r2, [r3, #12]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	60da      	str	r2, [r3, #12]
 80112e2:	e005      	b.n	80112f0 <tcp_process+0x6b4>
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	613b      	str	r3, [r7, #16]
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1ef      	bne.n	80112d0 <tcp_process+0x694>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	60da      	str	r2, [r3, #12]
 80112f6:	4b43      	ldr	r3, [pc, #268]	; (8011404 <tcp_process+0x7c8>)
 80112f8:	2201      	movs	r2, #1
 80112fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	220a      	movs	r2, #10
 8011300:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011302:	4b41      	ldr	r3, [pc, #260]	; (8011408 <tcp_process+0x7cc>)
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	60da      	str	r2, [r3, #12]
 801130a:	4a3f      	ldr	r2, [pc, #252]	; (8011408 <tcp_process+0x7cc>)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6013      	str	r3, [r2, #0]
 8011310:	f003 f90c 	bl	801452c <tcp_timer_needed>
      }
      break;
 8011314:	e06c      	b.n	80113f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 f984 	bl	8011624 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801131c:	4b3b      	ldr	r3, [pc, #236]	; (801140c <tcp_process+0x7d0>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	f003 0310 	and.w	r3, r3, #16
 8011324:	2b00      	cmp	r3, #0
 8011326:	d065      	beq.n	80113f4 <tcp_process+0x7b8>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801132c:	4b38      	ldr	r3, [pc, #224]	; (8011410 <tcp_process+0x7d4>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d15f      	bne.n	80113f4 <tcp_process+0x7b8>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011338:	2b00      	cmp	r3, #0
 801133a:	d15b      	bne.n	80113f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7fe fcf1 	bl	800fd24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011342:	4b35      	ldr	r3, [pc, #212]	; (8011418 <tcp_process+0x7dc>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	429a      	cmp	r2, r3
 801134a:	d105      	bne.n	8011358 <tcp_process+0x71c>
 801134c:	4b32      	ldr	r3, [pc, #200]	; (8011418 <tcp_process+0x7dc>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	4a31      	ldr	r2, [pc, #196]	; (8011418 <tcp_process+0x7dc>)
 8011354:	6013      	str	r3, [r2, #0]
 8011356:	e013      	b.n	8011380 <tcp_process+0x744>
 8011358:	4b2f      	ldr	r3, [pc, #188]	; (8011418 <tcp_process+0x7dc>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	60fb      	str	r3, [r7, #12]
 801135e:	e00c      	b.n	801137a <tcp_process+0x73e>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	429a      	cmp	r2, r3
 8011368:	d104      	bne.n	8011374 <tcp_process+0x738>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	68da      	ldr	r2, [r3, #12]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	60da      	str	r2, [r3, #12]
 8011372:	e005      	b.n	8011380 <tcp_process+0x744>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	60fb      	str	r3, [r7, #12]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d1ef      	bne.n	8011360 <tcp_process+0x724>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	60da      	str	r2, [r3, #12]
 8011386:	4b1f      	ldr	r3, [pc, #124]	; (8011404 <tcp_process+0x7c8>)
 8011388:	2201      	movs	r2, #1
 801138a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	220a      	movs	r2, #10
 8011390:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011392:	4b1d      	ldr	r3, [pc, #116]	; (8011408 <tcp_process+0x7cc>)
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	60da      	str	r2, [r3, #12]
 801139a:	4a1b      	ldr	r2, [pc, #108]	; (8011408 <tcp_process+0x7cc>)
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6013      	str	r3, [r2, #0]
 80113a0:	f003 f8c4 	bl	801452c <tcp_timer_needed>
      }
      break;
 80113a4:	e026      	b.n	80113f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f000 f93c 	bl	8011624 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80113ac:	4b17      	ldr	r3, [pc, #92]	; (801140c <tcp_process+0x7d0>)
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	f003 0310 	and.w	r3, r3, #16
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d01f      	beq.n	80113f8 <tcp_process+0x7bc>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113bc:	4b14      	ldr	r3, [pc, #80]	; (8011410 <tcp_process+0x7d4>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d119      	bne.n	80113f8 <tcp_process+0x7bc>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d115      	bne.n	80113f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80113cc:	4b11      	ldr	r3, [pc, #68]	; (8011414 <tcp_process+0x7d8>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f043 0310 	orr.w	r3, r3, #16
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	4b0f      	ldr	r3, [pc, #60]	; (8011414 <tcp_process+0x7d8>)
 80113d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80113da:	e00d      	b.n	80113f8 <tcp_process+0x7bc>
    default:
      break;
 80113dc:	bf00      	nop
 80113de:	e00c      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113e0:	bf00      	nop
 80113e2:	e00a      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113e4:	bf00      	nop
 80113e6:	e008      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113e8:	bf00      	nop
 80113ea:	e006      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113ec:	bf00      	nop
 80113ee:	e004      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113f0:	bf00      	nop
 80113f2:	e002      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113f4:	bf00      	nop
 80113f6:	e000      	b.n	80113fa <tcp_process+0x7be>
      break;
 80113f8:	bf00      	nop
  }
  return ERR_OK;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3724      	adds	r7, #36	; 0x24
 8011400:	46bd      	mov	sp, r7
 8011402:	bd90      	pop	{r4, r7, pc}
 8011404:	20011bac 	.word	0x20011bac
 8011408:	20011ba8 	.word	0x20011ba8
 801140c:	20011bdc 	.word	0x20011bdc
 8011410:	20011bd4 	.word	0x20011bd4
 8011414:	20011bdd 	.word	0x20011bdd
 8011418:	20011ba4 	.word	0x20011ba4

0801141c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801141c:	b590      	push	{r4, r7, lr}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d106      	bne.n	801143a <tcp_oos_insert_segment+0x1e>
 801142c:	4b3b      	ldr	r3, [pc, #236]	; (801151c <tcp_oos_insert_segment+0x100>)
 801142e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011432:	493b      	ldr	r1, [pc, #236]	; (8011520 <tcp_oos_insert_segment+0x104>)
 8011434:	483b      	ldr	r0, [pc, #236]	; (8011524 <tcp_oos_insert_segment+0x108>)
 8011436:	f006 f85b 	bl	80174f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	899b      	ldrh	r3, [r3, #12]
 8011440:	b29b      	uxth	r3, r3
 8011442:	4618      	mov	r0, r3
 8011444:	f7fa ffdc 	bl	800c400 <lwip_htons>
 8011448:	4603      	mov	r3, r0
 801144a:	b2db      	uxtb	r3, r3
 801144c:	f003 0301 	and.w	r3, r3, #1
 8011450:	2b00      	cmp	r3, #0
 8011452:	d028      	beq.n	80114a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011454:	6838      	ldr	r0, [r7, #0]
 8011456:	f7fe f995 	bl	800f784 <tcp_segs_free>
    next = NULL;
 801145a:	2300      	movs	r3, #0
 801145c:	603b      	str	r3, [r7, #0]
 801145e:	e056      	b.n	801150e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	899b      	ldrh	r3, [r3, #12]
 8011466:	b29b      	uxth	r3, r3
 8011468:	4618      	mov	r0, r3
 801146a:	f7fa ffc9 	bl	800c400 <lwip_htons>
 801146e:	4603      	mov	r3, r0
 8011470:	b2db      	uxtb	r3, r3
 8011472:	f003 0301 	and.w	r3, r3, #1
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00d      	beq.n	8011496 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	899b      	ldrh	r3, [r3, #12]
 8011480:	b29c      	uxth	r4, r3
 8011482:	2001      	movs	r0, #1
 8011484:	f7fa ffbc 	bl	800c400 <lwip_htons>
 8011488:	4603      	mov	r3, r0
 801148a:	461a      	mov	r2, r3
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	4322      	orrs	r2, r4
 8011492:	b292      	uxth	r2, r2
 8011494:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f7fe f984 	bl	800f7ae <tcp_seg_free>
    while (next &&
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00e      	beq.n	80114ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	891b      	ldrh	r3, [r3, #8]
 80114b0:	461a      	mov	r2, r3
 80114b2:	4b1d      	ldr	r3, [pc, #116]	; (8011528 <tcp_oos_insert_segment+0x10c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	441a      	add	r2, r3
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	6839      	ldr	r1, [r7, #0]
 80114c0:	8909      	ldrh	r1, [r1, #8]
 80114c2:	440b      	add	r3, r1
 80114c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	daca      	bge.n	8011460 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d01e      	beq.n	801150e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	891b      	ldrh	r3, [r3, #8]
 80114d4:	461a      	mov	r2, r3
 80114d6:	4b14      	ldr	r3, [pc, #80]	; (8011528 <tcp_oos_insert_segment+0x10c>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	441a      	add	r2, r3
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	dd12      	ble.n	801150e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	4b0d      	ldr	r3, [pc, #52]	; (8011528 <tcp_oos_insert_segment+0x10c>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	891b      	ldrh	r3, [r3, #8]
 8011506:	4619      	mov	r1, r3
 8011508:	4610      	mov	r0, r2
 801150a:	f7fc faf9 	bl	800db00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	683a      	ldr	r2, [r7, #0]
 8011512:	601a      	str	r2, [r3, #0]
}
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	bd90      	pop	{r4, r7, pc}
 801151c:	0801c2b4 	.word	0x0801c2b4
 8011520:	0801c574 	.word	0x0801c574
 8011524:	0801c300 	.word	0x0801c300
 8011528:	20011bd0 	.word	0x20011bd0

0801152c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801152c:	b5b0      	push	{r4, r5, r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
 8011538:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801153a:	e03e      	b.n	80115ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	4618      	mov	r0, r3
 801154c:	f7fc fcec 	bl	800df28 <pbuf_clen>
 8011550:	4603      	mov	r3, r0
 8011552:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801155a:	8a7a      	ldrh	r2, [r7, #18]
 801155c:	429a      	cmp	r2, r3
 801155e:	d906      	bls.n	801156e <tcp_free_acked_segments+0x42>
 8011560:	4b2a      	ldr	r3, [pc, #168]	; (801160c <tcp_free_acked_segments+0xe0>)
 8011562:	f240 4257 	movw	r2, #1111	; 0x457
 8011566:	492a      	ldr	r1, [pc, #168]	; (8011610 <tcp_free_acked_segments+0xe4>)
 8011568:	482a      	ldr	r0, [pc, #168]	; (8011614 <tcp_free_acked_segments+0xe8>)
 801156a:	f005 ffc1 	bl	80174f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011574:	8a7b      	ldrh	r3, [r7, #18]
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	b29a      	uxth	r2, r3
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	891a      	ldrh	r2, [r3, #8]
 8011584:	4b24      	ldr	r3, [pc, #144]	; (8011618 <tcp_free_acked_segments+0xec>)
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	4413      	add	r3, r2
 801158a:	b29a      	uxth	r2, r3
 801158c:	4b22      	ldr	r3, [pc, #136]	; (8011618 <tcp_free_acked_segments+0xec>)
 801158e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011590:	6978      	ldr	r0, [r7, #20]
 8011592:	f7fe f90c 	bl	800f7ae <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00c      	beq.n	80115ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d109      	bne.n	80115ba <tcp_free_acked_segments+0x8e>
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d106      	bne.n	80115ba <tcp_free_acked_segments+0x8e>
 80115ac:	4b17      	ldr	r3, [pc, #92]	; (801160c <tcp_free_acked_segments+0xe0>)
 80115ae:	f240 4261 	movw	r2, #1121	; 0x461
 80115b2:	491a      	ldr	r1, [pc, #104]	; (801161c <tcp_free_acked_segments+0xf0>)
 80115b4:	4817      	ldr	r0, [pc, #92]	; (8011614 <tcp_free_acked_segments+0xe8>)
 80115b6:	f005 ff9b 	bl	80174f0 <iprintf>
  while (seg_list != NULL &&
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d020      	beq.n	8011602 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fa ff2f 	bl	800c42a <lwip_htonl>
 80115cc:	4604      	mov	r4, r0
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	891b      	ldrh	r3, [r3, #8]
 80115d2:	461d      	mov	r5, r3
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	899b      	ldrh	r3, [r3, #12]
 80115da:	b29b      	uxth	r3, r3
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fa ff0f 	bl	800c400 <lwip_htons>
 80115e2:	4603      	mov	r3, r0
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	f003 0303 	and.w	r3, r3, #3
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d001      	beq.n	80115f2 <tcp_free_acked_segments+0xc6>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e000      	b.n	80115f4 <tcp_free_acked_segments+0xc8>
 80115f2:	2300      	movs	r3, #0
 80115f4:	442b      	add	r3, r5
 80115f6:	18e2      	adds	r2, r4, r3
 80115f8:	4b09      	ldr	r3, [pc, #36]	; (8011620 <tcp_free_acked_segments+0xf4>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80115fe:	2b00      	cmp	r3, #0
 8011600:	dd9c      	ble.n	801153c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011602:	68bb      	ldr	r3, [r7, #8]
}
 8011604:	4618      	mov	r0, r3
 8011606:	3718      	adds	r7, #24
 8011608:	46bd      	mov	sp, r7
 801160a:	bdb0      	pop	{r4, r5, r7, pc}
 801160c:	0801c2b4 	.word	0x0801c2b4
 8011610:	0801c59c 	.word	0x0801c59c
 8011614:	0801c300 	.word	0x0801c300
 8011618:	20011bd8 	.word	0x20011bd8
 801161c:	0801c5c4 	.word	0x0801c5c4
 8011620:	20011bd4 	.word	0x20011bd4

08011624 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011624:	b5b0      	push	{r4, r5, r7, lr}
 8011626:	b094      	sub	sp, #80	; 0x50
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801162c:	2300      	movs	r3, #0
 801162e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d106      	bne.n	8011644 <tcp_receive+0x20>
 8011636:	4b91      	ldr	r3, [pc, #580]	; (801187c <tcp_receive+0x258>)
 8011638:	f240 427b 	movw	r2, #1147	; 0x47b
 801163c:	4990      	ldr	r1, [pc, #576]	; (8011880 <tcp_receive+0x25c>)
 801163e:	4891      	ldr	r0, [pc, #580]	; (8011884 <tcp_receive+0x260>)
 8011640:	f005 ff56 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	7d1b      	ldrb	r3, [r3, #20]
 8011648:	2b03      	cmp	r3, #3
 801164a:	d806      	bhi.n	801165a <tcp_receive+0x36>
 801164c:	4b8b      	ldr	r3, [pc, #556]	; (801187c <tcp_receive+0x258>)
 801164e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011652:	498d      	ldr	r1, [pc, #564]	; (8011888 <tcp_receive+0x264>)
 8011654:	488b      	ldr	r0, [pc, #556]	; (8011884 <tcp_receive+0x260>)
 8011656:	f005 ff4b 	bl	80174f0 <iprintf>

  if (flags & TCP_ACK) {
 801165a:	4b8c      	ldr	r3, [pc, #560]	; (801188c <tcp_receive+0x268>)
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	f003 0310 	and.w	r3, r3, #16
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 8264 	beq.w	8011b30 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801166e:	461a      	mov	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011674:	4413      	add	r3, r2
 8011676:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801167c:	4b84      	ldr	r3, [pc, #528]	; (8011890 <tcp_receive+0x26c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	1ad3      	subs	r3, r2, r3
 8011682:	2b00      	cmp	r3, #0
 8011684:	db1b      	blt.n	80116be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801168a:	4b81      	ldr	r3, [pc, #516]	; (8011890 <tcp_receive+0x26c>)
 801168c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801168e:	429a      	cmp	r2, r3
 8011690:	d106      	bne.n	80116a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011696:	4b7f      	ldr	r3, [pc, #508]	; (8011894 <tcp_receive+0x270>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	2b00      	cmp	r3, #0
 801169e:	db0e      	blt.n	80116be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80116a4:	4b7b      	ldr	r3, [pc, #492]	; (8011894 <tcp_receive+0x270>)
 80116a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d125      	bne.n	80116f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80116ac:	4b7a      	ldr	r3, [pc, #488]	; (8011898 <tcp_receive+0x274>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	89db      	ldrh	r3, [r3, #14]
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d91c      	bls.n	80116f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80116be:	4b76      	ldr	r3, [pc, #472]	; (8011898 <tcp_receive+0x274>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	89db      	ldrh	r3, [r3, #14]
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116d8:	429a      	cmp	r2, r3
 80116da:	d205      	bcs.n	80116e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80116e8:	4b69      	ldr	r3, [pc, #420]	; (8011890 <tcp_receive+0x26c>)
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80116f0:	4b68      	ldr	r3, [pc, #416]	; (8011894 <tcp_receive+0x270>)
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80116f8:	4b66      	ldr	r3, [pc, #408]	; (8011894 <tcp_receive+0x270>)
 80116fa:	681a      	ldr	r2, [r3, #0]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	2b00      	cmp	r3, #0
 8011704:	dc58      	bgt.n	80117b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011706:	4b65      	ldr	r3, [pc, #404]	; (801189c <tcp_receive+0x278>)
 8011708:	881b      	ldrh	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d14b      	bne.n	80117a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011718:	4413      	add	r3, r2
 801171a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801171c:	429a      	cmp	r2, r3
 801171e:	d142      	bne.n	80117a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011726:	2b00      	cmp	r3, #0
 8011728:	db3d      	blt.n	80117a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801172e:	4b59      	ldr	r3, [pc, #356]	; (8011894 <tcp_receive+0x270>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	429a      	cmp	r2, r3
 8011734:	d137      	bne.n	80117a6 <tcp_receive+0x182>
              found_dupack = 1;
 8011736:	2301      	movs	r3, #1
 8011738:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011740:	2bff      	cmp	r3, #255	; 0xff
 8011742:	d007      	beq.n	8011754 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801174a:	3301      	adds	r3, #1
 801174c:	b2da      	uxtb	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801175a:	2b03      	cmp	r3, #3
 801175c:	d91b      	bls.n	8011796 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011768:	4413      	add	r3, r2
 801176a:	b29a      	uxth	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011772:	429a      	cmp	r2, r3
 8011774:	d30a      	bcc.n	801178c <tcp_receive+0x168>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011780:	4413      	add	r3, r2
 8011782:	b29a      	uxth	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801178a:	e004      	b.n	8011796 <tcp_receive+0x172>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011792:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801179c:	2b02      	cmp	r3, #2
 801179e:	d902      	bls.n	80117a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f002 fb55 	bl	8013e50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80117a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f040 8161 	bne.w	8011a70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80117b6:	e15b      	b.n	8011a70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117b8:	4b36      	ldr	r3, [pc, #216]	; (8011894 <tcp_receive+0x270>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	3b01      	subs	r3, #1
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f2c0 814e 	blt.w	8011a66 <tcp_receive+0x442>
 80117ca:	4b32      	ldr	r3, [pc, #200]	; (8011894 <tcp_receive+0x270>)
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f300 8146 	bgt.w	8011a66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8b5b      	ldrh	r3, [r3, #26]
 80117de:	f003 0304 	and.w	r3, r3, #4
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d010      	beq.n	8011808 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	8b5b      	ldrh	r3, [r3, #26]
 80117ea:	f023 0304 	bic.w	r3, r3, #4
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2200      	movs	r2, #0
 8011804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011816:	10db      	asrs	r3, r3, #3
 8011818:	b21b      	sxth	r3, r3
 801181a:	b29a      	uxth	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011822:	b29b      	uxth	r3, r3
 8011824:	4413      	add	r3, r2
 8011826:	b29b      	uxth	r3, r3
 8011828:	b21a      	sxth	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011830:	4b18      	ldr	r3, [pc, #96]	; (8011894 <tcp_receive+0x270>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	b29a      	uxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801183a:	b29b      	uxth	r3, r3
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011848:	4b12      	ldr	r3, [pc, #72]	; (8011894 <tcp_receive+0x270>)
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	7d1b      	ldrb	r3, [r3, #20]
 8011854:	2b03      	cmp	r3, #3
 8011856:	f240 8097 	bls.w	8011988 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011866:	429a      	cmp	r2, r3
 8011868:	d245      	bcs.n	80118f6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	8b5b      	ldrh	r3, [r3, #26]
 801186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011872:	2b00      	cmp	r3, #0
 8011874:	d014      	beq.n	80118a0 <tcp_receive+0x27c>
 8011876:	2301      	movs	r3, #1
 8011878:	e013      	b.n	80118a2 <tcp_receive+0x27e>
 801187a:	bf00      	nop
 801187c:	0801c2b4 	.word	0x0801c2b4
 8011880:	0801c5e4 	.word	0x0801c5e4
 8011884:	0801c300 	.word	0x0801c300
 8011888:	0801c600 	.word	0x0801c600
 801188c:	20011bdc 	.word	0x20011bdc
 8011890:	20011bd0 	.word	0x20011bd0
 8011894:	20011bd4 	.word	0x20011bd4
 8011898:	20011bc0 	.word	0x20011bc0
 801189c:	20011bda 	.word	0x20011bda
 80118a0:	2302      	movs	r3, #2
 80118a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80118a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b0:	fb12 f303 	smulbb	r3, r2, r3
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80118b8:	4293      	cmp	r3, r2
 80118ba:	bf28      	it	cs
 80118bc:	4613      	movcs	r3, r2
 80118be:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118c8:	4413      	add	r3, r2
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d309      	bcc.n	80118ea <tcp_receive+0x2c6>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118de:	4413      	add	r3, r2
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118e8:	e04e      	b.n	8011988 <tcp_receive+0x364>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118f4:	e048      	b.n	8011988 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80118fe:	4413      	add	r3, r2
 8011900:	b29a      	uxth	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011908:	429a      	cmp	r2, r3
 801190a:	d309      	bcc.n	8011920 <tcp_receive+0x2fc>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011914:	4413      	add	r3, r2
 8011916:	b29a      	uxth	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801191e:	e004      	b.n	801192a <tcp_receive+0x306>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011936:	429a      	cmp	r2, r3
 8011938:	d326      	bcc.n	8011988 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011946:	1ad3      	subs	r3, r2, r3
 8011948:	b29a      	uxth	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801195a:	4413      	add	r3, r2
 801195c:	b29a      	uxth	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011964:	429a      	cmp	r2, r3
 8011966:	d30a      	bcc.n	801197e <tcp_receive+0x35a>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011972:	4413      	add	r3, r2
 8011974:	b29a      	uxth	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801197c:	e004      	b.n	8011988 <tcp_receive+0x364>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011990:	4a98      	ldr	r2, [pc, #608]	; (8011bf4 <tcp_receive+0x5d0>)
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7ff fdca 	bl	801152c <tcp_free_acked_segments>
 8011998:	4602      	mov	r2, r0
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119a6:	4a94      	ldr	r2, [pc, #592]	; (8011bf8 <tcp_receive+0x5d4>)
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7ff fdbf 	bl	801152c <tcp_free_acked_segments>
 80119ae:	4602      	mov	r2, r0
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d104      	bne.n	80119c6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119c2:	861a      	strh	r2, [r3, #48]	; 0x30
 80119c4:	e002      	b.n	80119cc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2200      	movs	r2, #0
 80119ca:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2200      	movs	r2, #0
 80119d0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d103      	bne.n	80119e2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2200      	movs	r2, #0
 80119de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80119e8:	4b84      	ldr	r3, [pc, #528]	; (8011bfc <tcp_receive+0x5d8>)
 80119ea:	881b      	ldrh	r3, [r3, #0]
 80119ec:	4413      	add	r3, r2
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	8b5b      	ldrh	r3, [r3, #26]
 80119fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d035      	beq.n	8011a6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d118      	bne.n	8011a3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d00c      	beq.n	8011a2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fa fd03 	bl	800c42a <lwip_htonl>
 8011a24:	4603      	mov	r3, r0
 8011a26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	dc20      	bgt.n	8011a6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	8b5b      	ldrh	r3, [r3, #26]
 8011a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a3a:	e018      	b.n	8011a6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7fa fcee 	bl	800c42a <lwip_htonl>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	1ae3      	subs	r3, r4, r3
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	dc0b      	bgt.n	8011a6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8b5b      	ldrh	r3, [r3, #26]
 8011a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a64:	e003      	b.n	8011a6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f002 fbf0 	bl	801424c <tcp_send_empty_ack>
 8011a6c:	e000      	b.n	8011a70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d05b      	beq.n	8011b30 <tcp_receive+0x50c>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a7c:	4b60      	ldr	r3, [pc, #384]	; (8011c00 <tcp_receive+0x5dc>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	da54      	bge.n	8011b30 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011a86:	4b5f      	ldr	r3, [pc, #380]	; (8011c04 <tcp_receive+0x5e0>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	1ad3      	subs	r3, r2, r3
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011a9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011aa4:	10db      	asrs	r3, r3, #3
 8011aa6:	b21b      	sxth	r3, r3
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011abe:	4413      	add	r3, r2
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	b21a      	sxth	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011ac8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	da05      	bge.n	8011adc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011ad0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011ad4:	425b      	negs	r3, r3
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011adc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ae6:	109b      	asrs	r3, r3, #2
 8011ae8:	b21b      	sxth	r3, r3
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	1ad3      	subs	r3, r2, r3
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011b00:	4413      	add	r3, r2
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	b21a      	sxth	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011b10:	10db      	asrs	r3, r3, #3
 8011b12:	b21b      	sxth	r3, r3
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	4413      	add	r3, r2
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	b21a      	sxth	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011b30:	4b35      	ldr	r3, [pc, #212]	; (8011c08 <tcp_receive+0x5e4>)
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f000 84e2 	beq.w	80124fe <tcp_receive+0xeda>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	7d1b      	ldrb	r3, [r3, #20]
 8011b3e:	2b06      	cmp	r3, #6
 8011b40:	f200 84dd 	bhi.w	80124fe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b48:	4b30      	ldr	r3, [pc, #192]	; (8011c0c <tcp_receive+0x5e8>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	1ad3      	subs	r3, r2, r3
 8011b4e:	3b01      	subs	r3, #1
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	f2c0 808f 	blt.w	8011c74 <tcp_receive+0x650>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b5a:	4b2b      	ldr	r3, [pc, #172]	; (8011c08 <tcp_receive+0x5e4>)
 8011b5c:	881b      	ldrh	r3, [r3, #0]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	4b2a      	ldr	r3, [pc, #168]	; (8011c0c <tcp_receive+0x5e8>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	440b      	add	r3, r1
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	3301      	adds	r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f300 8082 	bgt.w	8011c74 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011b70:	4b27      	ldr	r3, [pc, #156]	; (8011c10 <tcp_receive+0x5ec>)
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b7a:	4b24      	ldr	r3, [pc, #144]	; (8011c0c <tcp_receive+0x5e8>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011b82:	4b23      	ldr	r3, [pc, #140]	; (8011c10 <tcp_receive+0x5ec>)
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <tcp_receive+0x574>
 8011b8a:	4b22      	ldr	r3, [pc, #136]	; (8011c14 <tcp_receive+0x5f0>)
 8011b8c:	f240 5294 	movw	r2, #1428	; 0x594
 8011b90:	4921      	ldr	r1, [pc, #132]	; (8011c18 <tcp_receive+0x5f4>)
 8011b92:	4822      	ldr	r0, [pc, #136]	; (8011c1c <tcp_receive+0x5f8>)
 8011b94:	f005 fcac 	bl	80174f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d906      	bls.n	8011bb0 <tcp_receive+0x58c>
 8011ba2:	4b1c      	ldr	r3, [pc, #112]	; (8011c14 <tcp_receive+0x5f0>)
 8011ba4:	f240 5295 	movw	r2, #1429	; 0x595
 8011ba8:	491d      	ldr	r1, [pc, #116]	; (8011c20 <tcp_receive+0x5fc>)
 8011baa:	481c      	ldr	r0, [pc, #112]	; (8011c1c <tcp_receive+0x5f8>)
 8011bac:	f005 fca0 	bl	80174f0 <iprintf>
      off = (u16_t)off32;
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011bb6:	4b16      	ldr	r3, [pc, #88]	; (8011c10 <tcp_receive+0x5ec>)
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	891b      	ldrh	r3, [r3, #8]
 8011bbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d906      	bls.n	8011bd2 <tcp_receive+0x5ae>
 8011bc4:	4b13      	ldr	r3, [pc, #76]	; (8011c14 <tcp_receive+0x5f0>)
 8011bc6:	f240 5297 	movw	r2, #1431	; 0x597
 8011bca:	4916      	ldr	r1, [pc, #88]	; (8011c24 <tcp_receive+0x600>)
 8011bcc:	4813      	ldr	r0, [pc, #76]	; (8011c1c <tcp_receive+0x5f8>)
 8011bce:	f005 fc8f 	bl	80174f0 <iprintf>
      inseg.len -= off;
 8011bd2:	4b0f      	ldr	r3, [pc, #60]	; (8011c10 <tcp_receive+0x5ec>)
 8011bd4:	891a      	ldrh	r2, [r3, #8]
 8011bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	4b0c      	ldr	r3, [pc, #48]	; (8011c10 <tcp_receive+0x5ec>)
 8011be0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011be2:	4b0b      	ldr	r3, [pc, #44]	; (8011c10 <tcp_receive+0x5ec>)
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	891a      	ldrh	r2, [r3, #8]
 8011be8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011bf0:	e02a      	b.n	8011c48 <tcp_receive+0x624>
 8011bf2:	bf00      	nop
 8011bf4:	0801c61c 	.word	0x0801c61c
 8011bf8:	0801c624 	.word	0x0801c624
 8011bfc:	20011bd8 	.word	0x20011bd8
 8011c00:	20011bd4 	.word	0x20011bd4
 8011c04:	20011b98 	.word	0x20011b98
 8011c08:	20011bda 	.word	0x20011bda
 8011c0c:	20011bd0 	.word	0x20011bd0
 8011c10:	20011bb0 	.word	0x20011bb0
 8011c14:	0801c2b4 	.word	0x0801c2b4
 8011c18:	0801c62c 	.word	0x0801c62c
 8011c1c:	0801c300 	.word	0x0801c300
 8011c20:	0801c63c 	.word	0x0801c63c
 8011c24:	0801c64c 	.word	0x0801c64c
        off -= p->len;
 8011c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c2a:	895b      	ldrh	r3, [r3, #10]
 8011c2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011c3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c3e:	2200      	movs	r2, #0
 8011c40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c4a:	895b      	ldrh	r3, [r3, #10]
 8011c4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d8e9      	bhi.n	8011c28 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011c54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c58:	4619      	mov	r1, r3
 8011c5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c5c:	f7fc f850 	bl	800dd00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c64:	4a91      	ldr	r2, [pc, #580]	; (8011eac <tcp_receive+0x888>)
 8011c66:	6013      	str	r3, [r2, #0]
 8011c68:	4b91      	ldr	r3, [pc, #580]	; (8011eb0 <tcp_receive+0x88c>)
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	4a8f      	ldr	r2, [pc, #572]	; (8011eac <tcp_receive+0x888>)
 8011c6e:	6812      	ldr	r2, [r2, #0]
 8011c70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011c72:	e00d      	b.n	8011c90 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011c74:	4b8d      	ldr	r3, [pc, #564]	; (8011eac <tcp_receive+0x888>)
 8011c76:	681a      	ldr	r2, [r3, #0]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	da06      	bge.n	8011c90 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	8b5b      	ldrh	r3, [r3, #26]
 8011c86:	f043 0302 	orr.w	r3, r3, #2
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c90:	4b86      	ldr	r3, [pc, #536]	; (8011eac <tcp_receive+0x888>)
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	f2c0 842a 	blt.w	80124f4 <tcp_receive+0xed0>
 8011ca0:	4b82      	ldr	r3, [pc, #520]	; (8011eac <tcp_receive+0x888>)
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca8:	6879      	ldr	r1, [r7, #4]
 8011caa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cac:	440b      	add	r3, r1
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	f300 841e 	bgt.w	80124f4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cbc:	4b7b      	ldr	r3, [pc, #492]	; (8011eac <tcp_receive+0x888>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	f040 829a 	bne.w	80121fa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011cc6:	4b7a      	ldr	r3, [pc, #488]	; (8011eb0 <tcp_receive+0x88c>)
 8011cc8:	891c      	ldrh	r4, [r3, #8]
 8011cca:	4b79      	ldr	r3, [pc, #484]	; (8011eb0 <tcp_receive+0x88c>)
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	899b      	ldrh	r3, [r3, #12]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fa fb94 	bl	800c400 <lwip_htons>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	f003 0303 	and.w	r3, r3, #3
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d001      	beq.n	8011ce8 <tcp_receive+0x6c4>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	e000      	b.n	8011cea <tcp_receive+0x6c6>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4423      	add	r3, r4
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	4b71      	ldr	r3, [pc, #452]	; (8011eb4 <tcp_receive+0x890>)
 8011cf0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011cf6:	4b6f      	ldr	r3, [pc, #444]	; (8011eb4 <tcp_receive+0x890>)
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d275      	bcs.n	8011dea <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cfe:	4b6c      	ldr	r3, [pc, #432]	; (8011eb0 <tcp_receive+0x88c>)
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	899b      	ldrh	r3, [r3, #12]
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fa fb7a 	bl	800c400 <lwip_htons>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	f003 0301 	and.w	r3, r3, #1
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d01f      	beq.n	8011d58 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011d18:	4b65      	ldr	r3, [pc, #404]	; (8011eb0 <tcp_receive+0x88c>)
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	899b      	ldrh	r3, [r3, #12]
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	b21b      	sxth	r3, r3
 8011d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d26:	b21c      	sxth	r4, r3
 8011d28:	4b61      	ldr	r3, [pc, #388]	; (8011eb0 <tcp_receive+0x88c>)
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	899b      	ldrh	r3, [r3, #12]
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fa fb65 	bl	800c400 <lwip_htons>
 8011d36:	4603      	mov	r3, r0
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fa fb5c 	bl	800c400 <lwip_htons>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	b21b      	sxth	r3, r3
 8011d4c:	4323      	orrs	r3, r4
 8011d4e:	b21a      	sxth	r2, r3
 8011d50:	4b57      	ldr	r3, [pc, #348]	; (8011eb0 <tcp_receive+0x88c>)
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	b292      	uxth	r2, r2
 8011d56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d5c:	4b54      	ldr	r3, [pc, #336]	; (8011eb0 <tcp_receive+0x88c>)
 8011d5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011d60:	4b53      	ldr	r3, [pc, #332]	; (8011eb0 <tcp_receive+0x88c>)
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	899b      	ldrh	r3, [r3, #12]
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7fa fb49 	bl	800c400 <lwip_htons>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	f003 0302 	and.w	r3, r3, #2
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d005      	beq.n	8011d86 <tcp_receive+0x762>
            inseg.len -= 1;
 8011d7a:	4b4d      	ldr	r3, [pc, #308]	; (8011eb0 <tcp_receive+0x88c>)
 8011d7c:	891b      	ldrh	r3, [r3, #8]
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	4b4b      	ldr	r3, [pc, #300]	; (8011eb0 <tcp_receive+0x88c>)
 8011d84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011d86:	4b4a      	ldr	r3, [pc, #296]	; (8011eb0 <tcp_receive+0x88c>)
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	4a49      	ldr	r2, [pc, #292]	; (8011eb0 <tcp_receive+0x88c>)
 8011d8c:	8912      	ldrh	r2, [r2, #8]
 8011d8e:	4611      	mov	r1, r2
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fb feb5 	bl	800db00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011d96:	4b46      	ldr	r3, [pc, #280]	; (8011eb0 <tcp_receive+0x88c>)
 8011d98:	891c      	ldrh	r4, [r3, #8]
 8011d9a:	4b45      	ldr	r3, [pc, #276]	; (8011eb0 <tcp_receive+0x88c>)
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	899b      	ldrh	r3, [r3, #12]
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fa fb2c 	bl	800c400 <lwip_htons>
 8011da8:	4603      	mov	r3, r0
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	f003 0303 	and.w	r3, r3, #3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d001      	beq.n	8011db8 <tcp_receive+0x794>
 8011db4:	2301      	movs	r3, #1
 8011db6:	e000      	b.n	8011dba <tcp_receive+0x796>
 8011db8:	2300      	movs	r3, #0
 8011dba:	4423      	add	r3, r4
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	4b3d      	ldr	r3, [pc, #244]	; (8011eb4 <tcp_receive+0x890>)
 8011dc0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011dc2:	4b3c      	ldr	r3, [pc, #240]	; (8011eb4 <tcp_receive+0x890>)
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	4b38      	ldr	r3, [pc, #224]	; (8011eac <tcp_receive+0x888>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	441a      	add	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd2:	6879      	ldr	r1, [r7, #4]
 8011dd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011dd6:	440b      	add	r3, r1
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d006      	beq.n	8011dea <tcp_receive+0x7c6>
 8011ddc:	4b36      	ldr	r3, [pc, #216]	; (8011eb8 <tcp_receive+0x894>)
 8011dde:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011de2:	4936      	ldr	r1, [pc, #216]	; (8011ebc <tcp_receive+0x898>)
 8011de4:	4836      	ldr	r0, [pc, #216]	; (8011ec0 <tcp_receive+0x89c>)
 8011de6:	f005 fb83 	bl	80174f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f000 80e7 	beq.w	8011fc2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011df4:	4b2e      	ldr	r3, [pc, #184]	; (8011eb0 <tcp_receive+0x88c>)
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	899b      	ldrh	r3, [r3, #12]
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fa faff 	bl	800c400 <lwip_htons>
 8011e02:	4603      	mov	r3, r0
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	f003 0301 	and.w	r3, r3, #1
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d010      	beq.n	8011e30 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011e0e:	e00a      	b.n	8011e26 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e14:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011e20:	68f8      	ldr	r0, [r7, #12]
 8011e22:	f7fd fcc4 	bl	800f7ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f0      	bne.n	8011e10 <tcp_receive+0x7ec>
 8011e2e:	e0c8      	b.n	8011fc2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e34:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011e36:	e052      	b.n	8011ede <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	899b      	ldrh	r3, [r3, #12]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fa fadd 	bl	800c400 <lwip_htons>
 8011e46:	4603      	mov	r3, r0
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d03d      	beq.n	8011ece <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011e52:	4b17      	ldr	r3, [pc, #92]	; (8011eb0 <tcp_receive+0x88c>)
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	899b      	ldrh	r3, [r3, #12]
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fa fad0 	bl	800c400 <lwip_htons>
 8011e60:	4603      	mov	r3, r0
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d130      	bne.n	8011ece <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011e6c:	4b10      	ldr	r3, [pc, #64]	; (8011eb0 <tcp_receive+0x88c>)
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	899b      	ldrh	r3, [r3, #12]
 8011e72:	b29c      	uxth	r4, r3
 8011e74:	2001      	movs	r0, #1
 8011e76:	f7fa fac3 	bl	800c400 <lwip_htons>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	4b0c      	ldr	r3, [pc, #48]	; (8011eb0 <tcp_receive+0x88c>)
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	4322      	orrs	r2, r4
 8011e84:	b292      	uxth	r2, r2
 8011e86:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011e88:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <tcp_receive+0x88c>)
 8011e8a:	891c      	ldrh	r4, [r3, #8]
 8011e8c:	4b08      	ldr	r3, [pc, #32]	; (8011eb0 <tcp_receive+0x88c>)
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	899b      	ldrh	r3, [r3, #12]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fa fab3 	bl	800c400 <lwip_htons>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	f003 0303 	and.w	r3, r3, #3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d00e      	beq.n	8011ec4 <tcp_receive+0x8a0>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e00d      	b.n	8011ec6 <tcp_receive+0x8a2>
 8011eaa:	bf00      	nop
 8011eac:	20011bd0 	.word	0x20011bd0
 8011eb0:	20011bb0 	.word	0x20011bb0
 8011eb4:	20011bda 	.word	0x20011bda
 8011eb8:	0801c2b4 	.word	0x0801c2b4
 8011ebc:	0801c65c 	.word	0x0801c65c
 8011ec0:	0801c300 	.word	0x0801c300
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	4423      	add	r3, r4
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	4b98      	ldr	r3, [pc, #608]	; (801212c <tcp_receive+0xb08>)
 8011ecc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011ed8:	6938      	ldr	r0, [r7, #16]
 8011eda:	f7fd fc68 	bl	800f7ae <tcp_seg_free>
            while (next &&
 8011ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00e      	beq.n	8011f02 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011ee4:	4b91      	ldr	r3, [pc, #580]	; (801212c <tcp_receive+0xb08>)
 8011ee6:	881b      	ldrh	r3, [r3, #0]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	4b91      	ldr	r3, [pc, #580]	; (8012130 <tcp_receive+0xb0c>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	441a      	add	r2, r3
 8011ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ef8:	8909      	ldrh	r1, [r1, #8]
 8011efa:	440b      	add	r3, r1
 8011efc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	da9a      	bge.n	8011e38 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d059      	beq.n	8011fbc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011f08:	4b88      	ldr	r3, [pc, #544]	; (801212c <tcp_receive+0xb08>)
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	4b88      	ldr	r3, [pc, #544]	; (8012130 <tcp_receive+0xb0c>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	441a      	add	r2, r3
 8011f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	dd4d      	ble.n	8011fbc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	4b81      	ldr	r3, [pc, #516]	; (8012130 <tcp_receive+0xb0c>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	4b80      	ldr	r3, [pc, #512]	; (8012134 <tcp_receive+0xb10>)
 8011f34:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f36:	4b7f      	ldr	r3, [pc, #508]	; (8012134 <tcp_receive+0xb10>)
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	899b      	ldrh	r3, [r3, #12]
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fa fa5e 	bl	800c400 <lwip_htons>
 8011f44:	4603      	mov	r3, r0
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	f003 0302 	and.w	r3, r3, #2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d005      	beq.n	8011f5c <tcp_receive+0x938>
                inseg.len -= 1;
 8011f50:	4b78      	ldr	r3, [pc, #480]	; (8012134 <tcp_receive+0xb10>)
 8011f52:	891b      	ldrh	r3, [r3, #8]
 8011f54:	3b01      	subs	r3, #1
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	4b76      	ldr	r3, [pc, #472]	; (8012134 <tcp_receive+0xb10>)
 8011f5a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011f5c:	4b75      	ldr	r3, [pc, #468]	; (8012134 <tcp_receive+0xb10>)
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	4a74      	ldr	r2, [pc, #464]	; (8012134 <tcp_receive+0xb10>)
 8011f62:	8912      	ldrh	r2, [r2, #8]
 8011f64:	4611      	mov	r1, r2
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fb fdca 	bl	800db00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011f6c:	4b71      	ldr	r3, [pc, #452]	; (8012134 <tcp_receive+0xb10>)
 8011f6e:	891c      	ldrh	r4, [r3, #8]
 8011f70:	4b70      	ldr	r3, [pc, #448]	; (8012134 <tcp_receive+0xb10>)
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	899b      	ldrh	r3, [r3, #12]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fa fa41 	bl	800c400 <lwip_htons>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	f003 0303 	and.w	r3, r3, #3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <tcp_receive+0x96a>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e000      	b.n	8011f90 <tcp_receive+0x96c>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	4423      	add	r3, r4
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	4b65      	ldr	r3, [pc, #404]	; (801212c <tcp_receive+0xb08>)
 8011f96:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011f98:	4b64      	ldr	r3, [pc, #400]	; (801212c <tcp_receive+0xb08>)
 8011f9a:	881b      	ldrh	r3, [r3, #0]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	4b64      	ldr	r3, [pc, #400]	; (8012130 <tcp_receive+0xb0c>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	441a      	add	r2, r3
 8011fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d006      	beq.n	8011fbc <tcp_receive+0x998>
 8011fae:	4b62      	ldr	r3, [pc, #392]	; (8012138 <tcp_receive+0xb14>)
 8011fb0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011fb4:	4961      	ldr	r1, [pc, #388]	; (801213c <tcp_receive+0xb18>)
 8011fb6:	4862      	ldr	r0, [pc, #392]	; (8012140 <tcp_receive+0xb1c>)
 8011fb8:	f005 fa9a 	bl	80174f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fc0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011fc2:	4b5a      	ldr	r3, [pc, #360]	; (801212c <tcp_receive+0xb08>)
 8011fc4:	881b      	ldrh	r3, [r3, #0]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	4b59      	ldr	r3, [pc, #356]	; (8012130 <tcp_receive+0xb0c>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	441a      	add	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fd6:	4b55      	ldr	r3, [pc, #340]	; (801212c <tcp_receive+0xb08>)
 8011fd8:	881b      	ldrh	r3, [r3, #0]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d206      	bcs.n	8011fec <tcp_receive+0x9c8>
 8011fde:	4b56      	ldr	r3, [pc, #344]	; (8012138 <tcp_receive+0xb14>)
 8011fe0:	f240 6207 	movw	r2, #1543	; 0x607
 8011fe4:	4957      	ldr	r1, [pc, #348]	; (8012144 <tcp_receive+0xb20>)
 8011fe6:	4856      	ldr	r0, [pc, #344]	; (8012140 <tcp_receive+0xb1c>)
 8011fe8:	f005 fa82 	bl	80174f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ff0:	4b4e      	ldr	r3, [pc, #312]	; (801212c <tcp_receive+0xb08>)
 8011ff2:	881b      	ldrh	r3, [r3, #0]
 8011ff4:	1ad3      	subs	r3, r2, r3
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f7fc fd99 	bl	800eb34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012002:	4b4c      	ldr	r3, [pc, #304]	; (8012134 <tcp_receive+0xb10>)
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	891b      	ldrh	r3, [r3, #8]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d006      	beq.n	801201a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801200c:	4b49      	ldr	r3, [pc, #292]	; (8012134 <tcp_receive+0xb10>)
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	4a4d      	ldr	r2, [pc, #308]	; (8012148 <tcp_receive+0xb24>)
 8012012:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012014:	4b47      	ldr	r3, [pc, #284]	; (8012134 <tcp_receive+0xb10>)
 8012016:	2200      	movs	r2, #0
 8012018:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801201a:	4b46      	ldr	r3, [pc, #280]	; (8012134 <tcp_receive+0xb10>)
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	899b      	ldrh	r3, [r3, #12]
 8012020:	b29b      	uxth	r3, r3
 8012022:	4618      	mov	r0, r3
 8012024:	f7fa f9ec 	bl	800c400 <lwip_htons>
 8012028:	4603      	mov	r3, r0
 801202a:	b2db      	uxtb	r3, r3
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 80b8 	beq.w	80121a6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012036:	4b45      	ldr	r3, [pc, #276]	; (801214c <tcp_receive+0xb28>)
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	f043 0320 	orr.w	r3, r3, #32
 801203e:	b2da      	uxtb	r2, r3
 8012040:	4b42      	ldr	r3, [pc, #264]	; (801214c <tcp_receive+0xb28>)
 8012042:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012044:	e0af      	b.n	80121a6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801204a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012050:	68db      	ldr	r3, [r3, #12]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	4a36      	ldr	r2, [pc, #216]	; (8012130 <tcp_receive+0xb0c>)
 8012056:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	891b      	ldrh	r3, [r3, #8]
 801205c:	461c      	mov	r4, r3
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	899b      	ldrh	r3, [r3, #12]
 8012064:	b29b      	uxth	r3, r3
 8012066:	4618      	mov	r0, r3
 8012068:	f7fa f9ca 	bl	800c400 <lwip_htons>
 801206c:	4603      	mov	r3, r0
 801206e:	b2db      	uxtb	r3, r3
 8012070:	f003 0303 	and.w	r3, r3, #3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <tcp_receive+0xa58>
 8012078:	2301      	movs	r3, #1
 801207a:	e000      	b.n	801207e <tcp_receive+0xa5a>
 801207c:	2300      	movs	r3, #0
 801207e:	191a      	adds	r2, r3, r4
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012084:	441a      	add	r2, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801208e:	461c      	mov	r4, r3
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	891b      	ldrh	r3, [r3, #8]
 8012094:	461d      	mov	r5, r3
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	899b      	ldrh	r3, [r3, #12]
 801209c:	b29b      	uxth	r3, r3
 801209e:	4618      	mov	r0, r3
 80120a0:	f7fa f9ae 	bl	800c400 <lwip_htons>
 80120a4:	4603      	mov	r3, r0
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	f003 0303 	and.w	r3, r3, #3
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d001      	beq.n	80120b4 <tcp_receive+0xa90>
 80120b0:	2301      	movs	r3, #1
 80120b2:	e000      	b.n	80120b6 <tcp_receive+0xa92>
 80120b4:	2300      	movs	r3, #0
 80120b6:	442b      	add	r3, r5
 80120b8:	429c      	cmp	r4, r3
 80120ba:	d206      	bcs.n	80120ca <tcp_receive+0xaa6>
 80120bc:	4b1e      	ldr	r3, [pc, #120]	; (8012138 <tcp_receive+0xb14>)
 80120be:	f240 622b 	movw	r2, #1579	; 0x62b
 80120c2:	4923      	ldr	r1, [pc, #140]	; (8012150 <tcp_receive+0xb2c>)
 80120c4:	481e      	ldr	r0, [pc, #120]	; (8012140 <tcp_receive+0xb1c>)
 80120c6:	f005 fa13 	bl	80174f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	891b      	ldrh	r3, [r3, #8]
 80120ce:	461c      	mov	r4, r3
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	68db      	ldr	r3, [r3, #12]
 80120d4:	899b      	ldrh	r3, [r3, #12]
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fa f991 	bl	800c400 <lwip_htons>
 80120de:	4603      	mov	r3, r0
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	f003 0303 	and.w	r3, r3, #3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <tcp_receive+0xaca>
 80120ea:	2301      	movs	r3, #1
 80120ec:	e000      	b.n	80120f0 <tcp_receive+0xacc>
 80120ee:	2300      	movs	r3, #0
 80120f0:	1919      	adds	r1, r3, r4
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80120f6:	b28b      	uxth	r3, r1
 80120f8:	1ad3      	subs	r3, r2, r3
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7fc fd17 	bl	800eb34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	891b      	ldrh	r3, [r3, #8]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d028      	beq.n	8012162 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012110:	4b0d      	ldr	r3, [pc, #52]	; (8012148 <tcp_receive+0xb24>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d01d      	beq.n	8012154 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012118:	4b0b      	ldr	r3, [pc, #44]	; (8012148 <tcp_receive+0xb24>)
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	4619      	mov	r1, r3
 8012122:	4610      	mov	r0, r2
 8012124:	f7fb ff40 	bl	800dfa8 <pbuf_cat>
 8012128:	e018      	b.n	801215c <tcp_receive+0xb38>
 801212a:	bf00      	nop
 801212c:	20011bda 	.word	0x20011bda
 8012130:	20011bd0 	.word	0x20011bd0
 8012134:	20011bb0 	.word	0x20011bb0
 8012138:	0801c2b4 	.word	0x0801c2b4
 801213c:	0801c694 	.word	0x0801c694
 8012140:	0801c300 	.word	0x0801c300
 8012144:	0801c6d0 	.word	0x0801c6d0
 8012148:	20011be0 	.word	0x20011be0
 801214c:	20011bdd 	.word	0x20011bdd
 8012150:	0801c6f0 	.word	0x0801c6f0
            } else {
              recv_data = cseg->p;
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	4a70      	ldr	r2, [pc, #448]	; (801231c <tcp_receive+0xcf8>)
 801215a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	2200      	movs	r2, #0
 8012160:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	899b      	ldrh	r3, [r3, #12]
 8012168:	b29b      	uxth	r3, r3
 801216a:	4618      	mov	r0, r3
 801216c:	f7fa f948 	bl	800c400 <lwip_htons>
 8012170:	4603      	mov	r3, r0
 8012172:	b2db      	uxtb	r3, r3
 8012174:	f003 0301 	and.w	r3, r3, #1
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00d      	beq.n	8012198 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801217c:	4b68      	ldr	r3, [pc, #416]	; (8012320 <tcp_receive+0xcfc>)
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	f043 0320 	orr.w	r3, r3, #32
 8012184:	b2da      	uxtb	r2, r3
 8012186:	4b66      	ldr	r3, [pc, #408]	; (8012320 <tcp_receive+0xcfc>)
 8012188:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	7d1b      	ldrb	r3, [r3, #20]
 801218e:	2b04      	cmp	r3, #4
 8012190:	d102      	bne.n	8012198 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2207      	movs	r2, #7
 8012196:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80121a0:	68b8      	ldr	r0, [r7, #8]
 80121a2:	f7fd fb04 	bl	800f7ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d008      	beq.n	80121c0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80121ba:	429a      	cmp	r2, r3
 80121bc:	f43f af43 	beq.w	8012046 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	8b5b      	ldrh	r3, [r3, #26]
 80121c4:	f003 0301 	and.w	r3, r3, #1
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00e      	beq.n	80121ea <tcp_receive+0xbc6>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	8b5b      	ldrh	r3, [r3, #26]
 80121d0:	f023 0301 	bic.w	r3, r3, #1
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	835a      	strh	r2, [r3, #26]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8b5b      	ldrh	r3, [r3, #26]
 80121de:	f043 0302 	orr.w	r3, r3, #2
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80121e8:	e188      	b.n	80124fc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	8b5b      	ldrh	r3, [r3, #26]
 80121ee:	f043 0301 	orr.w	r3, r3, #1
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80121f8:	e180      	b.n	80124fc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d106      	bne.n	8012210 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012202:	4848      	ldr	r0, [pc, #288]	; (8012324 <tcp_receive+0xd00>)
 8012204:	f7fd faec 	bl	800f7e0 <tcp_seg_copy>
 8012208:	4602      	mov	r2, r0
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	675a      	str	r2, [r3, #116]	; 0x74
 801220e:	e16d      	b.n	80124ec <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012210:	2300      	movs	r3, #0
 8012212:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012218:	63bb      	str	r3, [r7, #56]	; 0x38
 801221a:	e157      	b.n	80124cc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	685a      	ldr	r2, [r3, #4]
 8012222:	4b41      	ldr	r3, [pc, #260]	; (8012328 <tcp_receive+0xd04>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	429a      	cmp	r2, r3
 8012228:	d11d      	bne.n	8012266 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801222a:	4b3e      	ldr	r3, [pc, #248]	; (8012324 <tcp_receive+0xd00>)
 801222c:	891a      	ldrh	r2, [r3, #8]
 801222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012230:	891b      	ldrh	r3, [r3, #8]
 8012232:	429a      	cmp	r2, r3
 8012234:	f240 814f 	bls.w	80124d6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012238:	483a      	ldr	r0, [pc, #232]	; (8012324 <tcp_receive+0xd00>)
 801223a:	f7fd fad1 	bl	800f7e0 <tcp_seg_copy>
 801223e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	2b00      	cmp	r3, #0
 8012244:	f000 8149 	beq.w	80124da <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224a:	2b00      	cmp	r3, #0
 801224c:	d003      	beq.n	8012256 <tcp_receive+0xc32>
                    prev->next = cseg;
 801224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012250:	697a      	ldr	r2, [r7, #20]
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	e002      	b.n	801225c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801225c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801225e:	6978      	ldr	r0, [r7, #20]
 8012260:	f7ff f8dc 	bl	801141c <tcp_oos_insert_segment>
                }
                break;
 8012264:	e139      	b.n	80124da <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012268:	2b00      	cmp	r3, #0
 801226a:	d117      	bne.n	801229c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801226c:	4b2e      	ldr	r3, [pc, #184]	; (8012328 <tcp_receive+0xd04>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	1ad3      	subs	r3, r2, r3
 8012278:	2b00      	cmp	r3, #0
 801227a:	da57      	bge.n	801232c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801227c:	4829      	ldr	r0, [pc, #164]	; (8012324 <tcp_receive+0xd00>)
 801227e:	f7fd faaf 	bl	800f7e0 <tcp_seg_copy>
 8012282:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	2b00      	cmp	r3, #0
 8012288:	f000 8129 	beq.w	80124de <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012294:	69b8      	ldr	r0, [r7, #24]
 8012296:	f7ff f8c1 	bl	801141c <tcp_oos_insert_segment>
                  }
                  break;
 801229a:	e120      	b.n	80124de <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801229c:	4b22      	ldr	r3, [pc, #136]	; (8012328 <tcp_receive+0xd04>)
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	1ad3      	subs	r3, r2, r3
 80122a8:	3b01      	subs	r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	db3e      	blt.n	801232c <tcp_receive+0xd08>
 80122ae:	4b1e      	ldr	r3, [pc, #120]	; (8012328 <tcp_receive+0xd04>)
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b4:	68db      	ldr	r3, [r3, #12]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	1ad3      	subs	r3, r2, r3
 80122ba:	3301      	adds	r3, #1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dc35      	bgt.n	801232c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122c0:	4818      	ldr	r0, [pc, #96]	; (8012324 <tcp_receive+0xd00>)
 80122c2:	f7fd fa8d 	bl	800f7e0 <tcp_seg_copy>
 80122c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f000 8109 	beq.w	80124e2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80122d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122d8:	8912      	ldrh	r2, [r2, #8]
 80122da:	441a      	add	r2, r3
 80122dc:	4b12      	ldr	r3, [pc, #72]	; (8012328 <tcp_receive+0xd04>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	1ad3      	subs	r3, r2, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	dd12      	ble.n	801230c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80122e6:	4b10      	ldr	r3, [pc, #64]	; (8012328 <tcp_receive+0xd04>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	1ad3      	subs	r3, r2, r3
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80122fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fe:	685a      	ldr	r2, [r3, #4]
 8012300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012302:	891b      	ldrh	r3, [r3, #8]
 8012304:	4619      	mov	r1, r3
 8012306:	4610      	mov	r0, r2
 8012308:	f7fb fbfa 	bl	800db00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801230e:	69fa      	ldr	r2, [r7, #28]
 8012310:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012314:	69f8      	ldr	r0, [r7, #28]
 8012316:	f7ff f881 	bl	801141c <tcp_oos_insert_segment>
                  }
                  break;
 801231a:	e0e2      	b.n	80124e2 <tcp_receive+0xebe>
 801231c:	20011be0 	.word	0x20011be0
 8012320:	20011bdd 	.word	0x20011bdd
 8012324:	20011bb0 	.word	0x20011bb0
 8012328:	20011bd0 	.word	0x20011bd0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	f040 80c6 	bne.w	80124c6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801233a:	4b80      	ldr	r3, [pc, #512]	; (801253c <tcp_receive+0xf18>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012346:	2b00      	cmp	r3, #0
 8012348:	f340 80bd 	ble.w	80124c6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	899b      	ldrh	r3, [r3, #12]
 8012352:	b29b      	uxth	r3, r3
 8012354:	4618      	mov	r0, r3
 8012356:	f7fa f853 	bl	800c400 <lwip_htons>
 801235a:	4603      	mov	r3, r0
 801235c:	b2db      	uxtb	r3, r3
 801235e:	f003 0301 	and.w	r3, r3, #1
 8012362:	2b00      	cmp	r3, #0
 8012364:	f040 80bf 	bne.w	80124e6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012368:	4875      	ldr	r0, [pc, #468]	; (8012540 <tcp_receive+0xf1c>)
 801236a:	f7fd fa39 	bl	800f7e0 <tcp_seg_copy>
 801236e:	4602      	mov	r2, r0
 8012370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012372:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	f000 80b6 	beq.w	80124ea <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012386:	8912      	ldrh	r2, [r2, #8]
 8012388:	441a      	add	r2, r3
 801238a:	4b6c      	ldr	r3, [pc, #432]	; (801253c <tcp_receive+0xf18>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	2b00      	cmp	r3, #0
 8012392:	dd12      	ble.n	80123ba <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012394:	4b69      	ldr	r3, [pc, #420]	; (801253c <tcp_receive+0xf18>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	b29a      	uxth	r2, r3
 801239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	1ad3      	subs	r3, r2, r3
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	685a      	ldr	r2, [r3, #4]
 80123ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b0:	891b      	ldrh	r3, [r3, #8]
 80123b2:	4619      	mov	r1, r3
 80123b4:	4610      	mov	r0, r2
 80123b6:	f7fb fba3 	bl	800db00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80123ba:	4b62      	ldr	r3, [pc, #392]	; (8012544 <tcp_receive+0xf20>)
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	461a      	mov	r2, r3
 80123c0:	4b5e      	ldr	r3, [pc, #376]	; (801253c <tcp_receive+0xf18>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	441a      	add	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123ce:	440b      	add	r3, r1
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	f340 8089 	ble.w	80124ea <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80123d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	899b      	ldrh	r3, [r3, #12]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fa f80c 	bl	800c400 <lwip_htons>
 80123e8:	4603      	mov	r3, r0
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f003 0301 	and.w	r3, r3, #1
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d022      	beq.n	801243a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80123f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	899b      	ldrh	r3, [r3, #12]
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	b21b      	sxth	r3, r3
 8012400:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012404:	b21c      	sxth	r4, r3
 8012406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	899b      	ldrh	r3, [r3, #12]
 801240e:	b29b      	uxth	r3, r3
 8012410:	4618      	mov	r0, r3
 8012412:	f7f9 fff5 	bl	800c400 <lwip_htons>
 8012416:	4603      	mov	r3, r0
 8012418:	b2db      	uxtb	r3, r3
 801241a:	b29b      	uxth	r3, r3
 801241c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012420:	b29b      	uxth	r3, r3
 8012422:	4618      	mov	r0, r3
 8012424:	f7f9 ffec 	bl	800c400 <lwip_htons>
 8012428:	4603      	mov	r3, r0
 801242a:	b21b      	sxth	r3, r3
 801242c:	4323      	orrs	r3, r4
 801242e:	b21a      	sxth	r2, r3
 8012430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	b292      	uxth	r2, r2
 8012438:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243e:	b29a      	uxth	r2, r3
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012444:	4413      	add	r3, r2
 8012446:	b299      	uxth	r1, r3
 8012448:	4b3c      	ldr	r3, [pc, #240]	; (801253c <tcp_receive+0xf18>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	b29a      	uxth	r2, r3
 801244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	1a8a      	subs	r2, r1, r2
 8012454:	b292      	uxth	r2, r2
 8012456:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	685a      	ldr	r2, [r3, #4]
 801245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	891b      	ldrh	r3, [r3, #8]
 8012464:	4619      	mov	r1, r3
 8012466:	4610      	mov	r0, r2
 8012468:	f7fb fb4a 	bl	800db00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	891c      	ldrh	r4, [r3, #8]
 8012472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	899b      	ldrh	r3, [r3, #12]
 801247a:	b29b      	uxth	r3, r3
 801247c:	4618      	mov	r0, r3
 801247e:	f7f9 ffbf 	bl	800c400 <lwip_htons>
 8012482:	4603      	mov	r3, r0
 8012484:	b2db      	uxtb	r3, r3
 8012486:	f003 0303 	and.w	r3, r3, #3
 801248a:	2b00      	cmp	r3, #0
 801248c:	d001      	beq.n	8012492 <tcp_receive+0xe6e>
 801248e:	2301      	movs	r3, #1
 8012490:	e000      	b.n	8012494 <tcp_receive+0xe70>
 8012492:	2300      	movs	r3, #0
 8012494:	4423      	add	r3, r4
 8012496:	b29a      	uxth	r2, r3
 8012498:	4b2a      	ldr	r3, [pc, #168]	; (8012544 <tcp_receive+0xf20>)
 801249a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801249c:	4b29      	ldr	r3, [pc, #164]	; (8012544 <tcp_receive+0xf20>)
 801249e:	881b      	ldrh	r3, [r3, #0]
 80124a0:	461a      	mov	r2, r3
 80124a2:	4b26      	ldr	r3, [pc, #152]	; (801253c <tcp_receive+0xf18>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	441a      	add	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ac:	6879      	ldr	r1, [r7, #4]
 80124ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124b0:	440b      	add	r3, r1
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d019      	beq.n	80124ea <tcp_receive+0xec6>
 80124b6:	4b24      	ldr	r3, [pc, #144]	; (8012548 <tcp_receive+0xf24>)
 80124b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80124bc:	4923      	ldr	r1, [pc, #140]	; (801254c <tcp_receive+0xf28>)
 80124be:	4824      	ldr	r0, [pc, #144]	; (8012550 <tcp_receive+0xf2c>)
 80124c0:	f005 f816 	bl	80174f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80124c4:	e011      	b.n	80124ea <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80124c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80124cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f47f aea4 	bne.w	801221c <tcp_receive+0xbf8>
 80124d4:	e00a      	b.n	80124ec <tcp_receive+0xec8>
                break;
 80124d6:	bf00      	nop
 80124d8:	e008      	b.n	80124ec <tcp_receive+0xec8>
                break;
 80124da:	bf00      	nop
 80124dc:	e006      	b.n	80124ec <tcp_receive+0xec8>
                  break;
 80124de:	bf00      	nop
 80124e0:	e004      	b.n	80124ec <tcp_receive+0xec8>
                  break;
 80124e2:	bf00      	nop
 80124e4:	e002      	b.n	80124ec <tcp_receive+0xec8>
                  break;
 80124e6:	bf00      	nop
 80124e8:	e000      	b.n	80124ec <tcp_receive+0xec8>
                break;
 80124ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f001 fead 	bl	801424c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80124f2:	e003      	b.n	80124fc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f001 fea9 	bl	801424c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80124fa:	e01a      	b.n	8012532 <tcp_receive+0xf0e>
 80124fc:	e019      	b.n	8012532 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80124fe:	4b0f      	ldr	r3, [pc, #60]	; (801253c <tcp_receive+0xf18>)
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012506:	1ad3      	subs	r3, r2, r3
 8012508:	2b00      	cmp	r3, #0
 801250a:	db0a      	blt.n	8012522 <tcp_receive+0xefe>
 801250c:	4b0b      	ldr	r3, [pc, #44]	; (801253c <tcp_receive+0xf18>)
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012514:	6879      	ldr	r1, [r7, #4]
 8012516:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012518:	440b      	add	r3, r1
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	3301      	adds	r3, #1
 801251e:	2b00      	cmp	r3, #0
 8012520:	dd07      	ble.n	8012532 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	8b5b      	ldrh	r3, [r3, #26]
 8012526:	f043 0302 	orr.w	r3, r3, #2
 801252a:	b29a      	uxth	r2, r3
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012530:	e7ff      	b.n	8012532 <tcp_receive+0xf0e>
 8012532:	bf00      	nop
 8012534:	3750      	adds	r7, #80	; 0x50
 8012536:	46bd      	mov	sp, r7
 8012538:	bdb0      	pop	{r4, r5, r7, pc}
 801253a:	bf00      	nop
 801253c:	20011bd0 	.word	0x20011bd0
 8012540:	20011bb0 	.word	0x20011bb0
 8012544:	20011bda 	.word	0x20011bda
 8012548:	0801c2b4 	.word	0x0801c2b4
 801254c:	0801c65c 	.word	0x0801c65c
 8012550:	0801c300 	.word	0x0801c300

08012554 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801255a:	4b15      	ldr	r3, [pc, #84]	; (80125b0 <tcp_get_next_optbyte+0x5c>)
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	b291      	uxth	r1, r2
 8012562:	4a13      	ldr	r2, [pc, #76]	; (80125b0 <tcp_get_next_optbyte+0x5c>)
 8012564:	8011      	strh	r1, [r2, #0]
 8012566:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012568:	4b12      	ldr	r3, [pc, #72]	; (80125b4 <tcp_get_next_optbyte+0x60>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d004      	beq.n	801257a <tcp_get_next_optbyte+0x26>
 8012570:	4b11      	ldr	r3, [pc, #68]	; (80125b8 <tcp_get_next_optbyte+0x64>)
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	88fa      	ldrh	r2, [r7, #6]
 8012576:	429a      	cmp	r2, r3
 8012578:	d208      	bcs.n	801258c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801257a:	4b10      	ldr	r3, [pc, #64]	; (80125bc <tcp_get_next_optbyte+0x68>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	3314      	adds	r3, #20
 8012580:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012582:	88fb      	ldrh	r3, [r7, #6]
 8012584:	683a      	ldr	r2, [r7, #0]
 8012586:	4413      	add	r3, r2
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	e00b      	b.n	80125a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801258c:	88fb      	ldrh	r3, [r7, #6]
 801258e:	b2da      	uxtb	r2, r3
 8012590:	4b09      	ldr	r3, [pc, #36]	; (80125b8 <tcp_get_next_optbyte+0x64>)
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	b2db      	uxtb	r3, r3
 8012596:	1ad3      	subs	r3, r2, r3
 8012598:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801259a:	4b06      	ldr	r3, [pc, #24]	; (80125b4 <tcp_get_next_optbyte+0x60>)
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	797b      	ldrb	r3, [r7, #5]
 80125a0:	4413      	add	r3, r2
 80125a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr
 80125b0:	20011bcc 	.word	0x20011bcc
 80125b4:	20011bc8 	.word	0x20011bc8
 80125b8:	20011bc6 	.word	0x20011bc6
 80125bc:	20011bc0 	.word	0x20011bc0

080125c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d106      	bne.n	80125dc <tcp_parseopt+0x1c>
 80125ce:	4b32      	ldr	r3, [pc, #200]	; (8012698 <tcp_parseopt+0xd8>)
 80125d0:	f240 727d 	movw	r2, #1917	; 0x77d
 80125d4:	4931      	ldr	r1, [pc, #196]	; (801269c <tcp_parseopt+0xdc>)
 80125d6:	4832      	ldr	r0, [pc, #200]	; (80126a0 <tcp_parseopt+0xe0>)
 80125d8:	f004 ff8a 	bl	80174f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80125dc:	4b31      	ldr	r3, [pc, #196]	; (80126a4 <tcp_parseopt+0xe4>)
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d055      	beq.n	8012690 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80125e4:	4b30      	ldr	r3, [pc, #192]	; (80126a8 <tcp_parseopt+0xe8>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	801a      	strh	r2, [r3, #0]
 80125ea:	e045      	b.n	8012678 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80125ec:	f7ff ffb2 	bl	8012554 <tcp_get_next_optbyte>
 80125f0:	4603      	mov	r3, r0
 80125f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80125f4:	7bfb      	ldrb	r3, [r7, #15]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	d006      	beq.n	8012608 <tcp_parseopt+0x48>
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	dc2b      	bgt.n	8012656 <tcp_parseopt+0x96>
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d041      	beq.n	8012686 <tcp_parseopt+0xc6>
 8012602:	2b01      	cmp	r3, #1
 8012604:	d127      	bne.n	8012656 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012606:	e037      	b.n	8012678 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012608:	f7ff ffa4 	bl	8012554 <tcp_get_next_optbyte>
 801260c:	4603      	mov	r3, r0
 801260e:	2b04      	cmp	r3, #4
 8012610:	d13b      	bne.n	801268a <tcp_parseopt+0xca>
 8012612:	4b25      	ldr	r3, [pc, #148]	; (80126a8 <tcp_parseopt+0xe8>)
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	3301      	adds	r3, #1
 8012618:	4a22      	ldr	r2, [pc, #136]	; (80126a4 <tcp_parseopt+0xe4>)
 801261a:	8812      	ldrh	r2, [r2, #0]
 801261c:	4293      	cmp	r3, r2
 801261e:	da34      	bge.n	801268a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012620:	f7ff ff98 	bl	8012554 <tcp_get_next_optbyte>
 8012624:	4603      	mov	r3, r0
 8012626:	b29b      	uxth	r3, r3
 8012628:	021b      	lsls	r3, r3, #8
 801262a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801262c:	f7ff ff92 	bl	8012554 <tcp_get_next_optbyte>
 8012630:	4603      	mov	r3, r0
 8012632:	b29a      	uxth	r2, r3
 8012634:	89bb      	ldrh	r3, [r7, #12]
 8012636:	4313      	orrs	r3, r2
 8012638:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801263a:	89bb      	ldrh	r3, [r7, #12]
 801263c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012640:	d804      	bhi.n	801264c <tcp_parseopt+0x8c>
 8012642:	89bb      	ldrh	r3, [r7, #12]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d001      	beq.n	801264c <tcp_parseopt+0x8c>
 8012648:	89ba      	ldrh	r2, [r7, #12]
 801264a:	e001      	b.n	8012650 <tcp_parseopt+0x90>
 801264c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012654:	e010      	b.n	8012678 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012656:	f7ff ff7d 	bl	8012554 <tcp_get_next_optbyte>
 801265a:	4603      	mov	r3, r0
 801265c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801265e:	7afb      	ldrb	r3, [r7, #11]
 8012660:	2b01      	cmp	r3, #1
 8012662:	d914      	bls.n	801268e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012664:	7afb      	ldrb	r3, [r7, #11]
 8012666:	b29a      	uxth	r2, r3
 8012668:	4b0f      	ldr	r3, [pc, #60]	; (80126a8 <tcp_parseopt+0xe8>)
 801266a:	881b      	ldrh	r3, [r3, #0]
 801266c:	4413      	add	r3, r2
 801266e:	b29b      	uxth	r3, r3
 8012670:	3b02      	subs	r3, #2
 8012672:	b29a      	uxth	r2, r3
 8012674:	4b0c      	ldr	r3, [pc, #48]	; (80126a8 <tcp_parseopt+0xe8>)
 8012676:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012678:	4b0b      	ldr	r3, [pc, #44]	; (80126a8 <tcp_parseopt+0xe8>)
 801267a:	881a      	ldrh	r2, [r3, #0]
 801267c:	4b09      	ldr	r3, [pc, #36]	; (80126a4 <tcp_parseopt+0xe4>)
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	429a      	cmp	r2, r3
 8012682:	d3b3      	bcc.n	80125ec <tcp_parseopt+0x2c>
 8012684:	e004      	b.n	8012690 <tcp_parseopt+0xd0>
          return;
 8012686:	bf00      	nop
 8012688:	e002      	b.n	8012690 <tcp_parseopt+0xd0>
            return;
 801268a:	bf00      	nop
 801268c:	e000      	b.n	8012690 <tcp_parseopt+0xd0>
            return;
 801268e:	bf00      	nop
      }
    }
  }
}
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	0801c2b4 	.word	0x0801c2b4
 801269c:	0801c718 	.word	0x0801c718
 80126a0:	0801c300 	.word	0x0801c300
 80126a4:	20011bc4 	.word	0x20011bc4
 80126a8:	20011bcc 	.word	0x20011bcc

080126ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80126ac:	b480      	push	{r7}
 80126ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80126b0:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <tcp_trigger_input_pcb_close+0x1c>)
 80126b2:	781b      	ldrb	r3, [r3, #0]
 80126b4:	f043 0310 	orr.w	r3, r3, #16
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	4b03      	ldr	r3, [pc, #12]	; (80126c8 <tcp_trigger_input_pcb_close+0x1c>)
 80126bc:	701a      	strb	r2, [r3, #0]
}
 80126be:	bf00      	nop
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr
 80126c8:	20011bdd 	.word	0x20011bdd

080126cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	60f8      	str	r0, [r7, #12]
 80126d4:	60b9      	str	r1, [r7, #8]
 80126d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00a      	beq.n	80126f4 <tcp_route+0x28>
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	7a1b      	ldrb	r3, [r3, #8]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d006      	beq.n	80126f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	7a1b      	ldrb	r3, [r3, #8]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fb f800 	bl	800d6f0 <netif_get_by_index>
 80126f0:	4603      	mov	r3, r0
 80126f2:	e003      	b.n	80126fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f003 f96d 	bl	80159d4 <ip4_route>
 80126fa:	4603      	mov	r3, r0
  }
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012704:	b590      	push	{r4, r7, lr}
 8012706:	b087      	sub	sp, #28
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	603b      	str	r3, [r7, #0]
 8012710:	4613      	mov	r3, r2
 8012712:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d105      	bne.n	8012726 <tcp_create_segment+0x22>
 801271a:	4b44      	ldr	r3, [pc, #272]	; (801282c <tcp_create_segment+0x128>)
 801271c:	22a3      	movs	r2, #163	; 0xa3
 801271e:	4944      	ldr	r1, [pc, #272]	; (8012830 <tcp_create_segment+0x12c>)
 8012720:	4844      	ldr	r0, [pc, #272]	; (8012834 <tcp_create_segment+0x130>)
 8012722:	f004 fee5 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d105      	bne.n	8012738 <tcp_create_segment+0x34>
 801272c:	4b3f      	ldr	r3, [pc, #252]	; (801282c <tcp_create_segment+0x128>)
 801272e:	22a4      	movs	r2, #164	; 0xa4
 8012730:	4941      	ldr	r1, [pc, #260]	; (8012838 <tcp_create_segment+0x134>)
 8012732:	4840      	ldr	r0, [pc, #256]	; (8012834 <tcp_create_segment+0x130>)
 8012734:	f004 fedc 	bl	80174f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012738:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	b2db      	uxtb	r3, r3
 8012740:	f003 0304 	and.w	r3, r3, #4
 8012744:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012746:	2002      	movs	r0, #2
 8012748:	f7fa fc4a 	bl	800cfe0 <memp_malloc>
 801274c:	6138      	str	r0, [r7, #16]
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d104      	bne.n	801275e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012754:	68b8      	ldr	r0, [r7, #8]
 8012756:	f7fb fb59 	bl	800de0c <pbuf_free>
    return NULL;
 801275a:	2300      	movs	r3, #0
 801275c:	e061      	b.n	8012822 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012764:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	2200      	movs	r2, #0
 801276a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	891a      	ldrh	r2, [r3, #8]
 8012776:	7dfb      	ldrb	r3, [r7, #23]
 8012778:	b29b      	uxth	r3, r3
 801277a:	429a      	cmp	r2, r3
 801277c:	d205      	bcs.n	801278a <tcp_create_segment+0x86>
 801277e:	4b2b      	ldr	r3, [pc, #172]	; (801282c <tcp_create_segment+0x128>)
 8012780:	22b0      	movs	r2, #176	; 0xb0
 8012782:	492e      	ldr	r1, [pc, #184]	; (801283c <tcp_create_segment+0x138>)
 8012784:	482b      	ldr	r0, [pc, #172]	; (8012834 <tcp_create_segment+0x130>)
 8012786:	f004 feb3 	bl	80174f0 <iprintf>
  seg->len = p->tot_len - optlen;
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	891a      	ldrh	r2, [r3, #8]
 801278e:	7dfb      	ldrb	r3, [r7, #23]
 8012790:	b29b      	uxth	r3, r3
 8012792:	1ad3      	subs	r3, r2, r3
 8012794:	b29a      	uxth	r2, r3
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801279a:	2114      	movs	r1, #20
 801279c:	68b8      	ldr	r0, [r7, #8]
 801279e:	f7fb fa9f 	bl	800dce0 <pbuf_add_header>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d004      	beq.n	80127b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80127a8:	6938      	ldr	r0, [r7, #16]
 80127aa:	f7fd f800 	bl	800f7ae <tcp_seg_free>
    return NULL;
 80127ae:	2300      	movs	r3, #0
 80127b0:	e037      	b.n	8012822 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	685a      	ldr	r2, [r3, #4]
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	8ada      	ldrh	r2, [r3, #22]
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	68dc      	ldr	r4, [r3, #12]
 80127c4:	4610      	mov	r0, r2
 80127c6:	f7f9 fe1b 	bl	800c400 <lwip_htons>
 80127ca:	4603      	mov	r3, r0
 80127cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	8b1a      	ldrh	r2, [r3, #24]
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	68dc      	ldr	r4, [r3, #12]
 80127d6:	4610      	mov	r0, r2
 80127d8:	f7f9 fe12 	bl	800c400 <lwip_htons>
 80127dc:	4603      	mov	r3, r0
 80127de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	68dc      	ldr	r4, [r3, #12]
 80127e4:	6838      	ldr	r0, [r7, #0]
 80127e6:	f7f9 fe20 	bl	800c42a <lwip_htonl>
 80127ea:	4603      	mov	r3, r0
 80127ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80127ee:	7dfb      	ldrb	r3, [r7, #23]
 80127f0:	089b      	lsrs	r3, r3, #2
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	3305      	adds	r3, #5
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	031b      	lsls	r3, r3, #12
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	79fb      	ldrb	r3, [r7, #7]
 8012800:	b29b      	uxth	r3, r3
 8012802:	4313      	orrs	r3, r2
 8012804:	b29a      	uxth	r2, r3
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	68dc      	ldr	r4, [r3, #12]
 801280a:	4610      	mov	r0, r2
 801280c:	f7f9 fdf8 	bl	800c400 <lwip_htons>
 8012810:	4603      	mov	r3, r0
 8012812:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	749a      	strb	r2, [r3, #18]
 801281c:	2200      	movs	r2, #0
 801281e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012820:	693b      	ldr	r3, [r7, #16]
}
 8012822:	4618      	mov	r0, r3
 8012824:	371c      	adds	r7, #28
 8012826:	46bd      	mov	sp, r7
 8012828:	bd90      	pop	{r4, r7, pc}
 801282a:	bf00      	nop
 801282c:	0801c734 	.word	0x0801c734
 8012830:	0801c768 	.word	0x0801c768
 8012834:	0801c788 	.word	0x0801c788
 8012838:	0801c7b0 	.word	0x0801c7b0
 801283c:	0801c7d4 	.word	0x0801c7d4

08012840 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	607b      	str	r3, [r7, #4]
 8012848:	4603      	mov	r3, r0
 801284a:	73fb      	strb	r3, [r7, #15]
 801284c:	460b      	mov	r3, r1
 801284e:	81bb      	strh	r3, [r7, #12]
 8012850:	4613      	mov	r3, r2
 8012852:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012854:	89bb      	ldrh	r3, [r7, #12]
 8012856:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d105      	bne.n	801286a <tcp_pbuf_prealloc+0x2a>
 801285e:	4b30      	ldr	r3, [pc, #192]	; (8012920 <tcp_pbuf_prealloc+0xe0>)
 8012860:	22e8      	movs	r2, #232	; 0xe8
 8012862:	4930      	ldr	r1, [pc, #192]	; (8012924 <tcp_pbuf_prealloc+0xe4>)
 8012864:	4830      	ldr	r0, [pc, #192]	; (8012928 <tcp_pbuf_prealloc+0xe8>)
 8012866:	f004 fe43 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801286a:	6a3b      	ldr	r3, [r7, #32]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d105      	bne.n	801287c <tcp_pbuf_prealloc+0x3c>
 8012870:	4b2b      	ldr	r3, [pc, #172]	; (8012920 <tcp_pbuf_prealloc+0xe0>)
 8012872:	22e9      	movs	r2, #233	; 0xe9
 8012874:	492d      	ldr	r1, [pc, #180]	; (801292c <tcp_pbuf_prealloc+0xec>)
 8012876:	482c      	ldr	r0, [pc, #176]	; (8012928 <tcp_pbuf_prealloc+0xe8>)
 8012878:	f004 fe3a 	bl	80174f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801287c:	89ba      	ldrh	r2, [r7, #12]
 801287e:	897b      	ldrh	r3, [r7, #10]
 8012880:	429a      	cmp	r2, r3
 8012882:	d221      	bcs.n	80128c8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012888:	f003 0302 	and.w	r3, r3, #2
 801288c:	2b00      	cmp	r3, #0
 801288e:	d111      	bne.n	80128b4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012890:	6a3b      	ldr	r3, [r7, #32]
 8012892:	8b5b      	ldrh	r3, [r3, #26]
 8012894:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012898:	2b00      	cmp	r3, #0
 801289a:	d115      	bne.n	80128c8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801289c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d007      	beq.n	80128b4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80128a4:	6a3b      	ldr	r3, [r7, #32]
 80128a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d103      	bne.n	80128b4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80128ac:	6a3b      	ldr	r3, [r7, #32]
 80128ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d009      	beq.n	80128c8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80128b4:	89bb      	ldrh	r3, [r7, #12]
 80128b6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80128ba:	f023 0203 	bic.w	r2, r3, #3
 80128be:	897b      	ldrh	r3, [r7, #10]
 80128c0:	4293      	cmp	r3, r2
 80128c2:	bf28      	it	cs
 80128c4:	4613      	movcs	r3, r2
 80128c6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80128c8:	8af9      	ldrh	r1, [r7, #22]
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fa ffb7 	bl	800d844 <pbuf_alloc>
 80128d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80128de:	2300      	movs	r3, #0
 80128e0:	e019      	b.n	8012916 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d006      	beq.n	80128f8 <tcp_pbuf_prealloc+0xb8>
 80128ea:	4b0d      	ldr	r3, [pc, #52]	; (8012920 <tcp_pbuf_prealloc+0xe0>)
 80128ec:	f240 120b 	movw	r2, #267	; 0x10b
 80128f0:	490f      	ldr	r1, [pc, #60]	; (8012930 <tcp_pbuf_prealloc+0xf0>)
 80128f2:	480d      	ldr	r0, [pc, #52]	; (8012928 <tcp_pbuf_prealloc+0xe8>)
 80128f4:	f004 fdfc 	bl	80174f0 <iprintf>
  *oversize = p->len - length;
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	895a      	ldrh	r2, [r3, #10]
 80128fc:	89bb      	ldrh	r3, [r7, #12]
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	b29a      	uxth	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	89ba      	ldrh	r2, [r7, #12]
 801290a:	811a      	strh	r2, [r3, #8]
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	891a      	ldrh	r2, [r3, #8]
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	815a      	strh	r2, [r3, #10]
  return p;
 8012914:	693b      	ldr	r3, [r7, #16]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	0801c734 	.word	0x0801c734
 8012924:	0801c7ec 	.word	0x0801c7ec
 8012928:	0801c788 	.word	0x0801c788
 801292c:	0801c810 	.word	0x0801c810
 8012930:	0801c830 	.word	0x0801c830

08012934 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d106      	bne.n	8012954 <tcp_write_checks+0x20>
 8012946:	4b33      	ldr	r3, [pc, #204]	; (8012a14 <tcp_write_checks+0xe0>)
 8012948:	f240 1233 	movw	r2, #307	; 0x133
 801294c:	4932      	ldr	r1, [pc, #200]	; (8012a18 <tcp_write_checks+0xe4>)
 801294e:	4833      	ldr	r0, [pc, #204]	; (8012a1c <tcp_write_checks+0xe8>)
 8012950:	f004 fdce 	bl	80174f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	7d1b      	ldrb	r3, [r3, #20]
 8012958:	2b04      	cmp	r3, #4
 801295a:	d00e      	beq.n	801297a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012960:	2b07      	cmp	r3, #7
 8012962:	d00a      	beq.n	801297a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012968:	2b02      	cmp	r3, #2
 801296a:	d006      	beq.n	801297a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012970:	2b03      	cmp	r3, #3
 8012972:	d002      	beq.n	801297a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012974:	f06f 030a 	mvn.w	r3, #10
 8012978:	e048      	b.n	8012a0c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801297a:	887b      	ldrh	r3, [r7, #2]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <tcp_write_checks+0x50>
    return ERR_OK;
 8012980:	2300      	movs	r3, #0
 8012982:	e043      	b.n	8012a0c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801298a:	887a      	ldrh	r2, [r7, #2]
 801298c:	429a      	cmp	r2, r3
 801298e:	d909      	bls.n	80129a4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	8b5b      	ldrh	r3, [r3, #26]
 8012994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012998:	b29a      	uxth	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801299e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129a2:	e033      	b.n	8012a0c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129aa:	2b08      	cmp	r3, #8
 80129ac:	d909      	bls.n	80129c2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	8b5b      	ldrh	r3, [r3, #26]
 80129b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80129bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129c0:	e024      	b.n	8012a0c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d00f      	beq.n	80129ec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d11a      	bne.n	8012a0a <tcp_write_checks+0xd6>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d116      	bne.n	8012a0a <tcp_write_checks+0xd6>
 80129dc:	4b0d      	ldr	r3, [pc, #52]	; (8012a14 <tcp_write_checks+0xe0>)
 80129de:	f240 1255 	movw	r2, #341	; 0x155
 80129e2:	490f      	ldr	r1, [pc, #60]	; (8012a20 <tcp_write_checks+0xec>)
 80129e4:	480d      	ldr	r0, [pc, #52]	; (8012a1c <tcp_write_checks+0xe8>)
 80129e6:	f004 fd83 	bl	80174f0 <iprintf>
 80129ea:	e00e      	b.n	8012a0a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d103      	bne.n	80129fc <tcp_write_checks+0xc8>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d006      	beq.n	8012a0a <tcp_write_checks+0xd6>
 80129fc:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <tcp_write_checks+0xe0>)
 80129fe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012a02:	4908      	ldr	r1, [pc, #32]	; (8012a24 <tcp_write_checks+0xf0>)
 8012a04:	4805      	ldr	r0, [pc, #20]	; (8012a1c <tcp_write_checks+0xe8>)
 8012a06:	f004 fd73 	bl	80174f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012a0a:	2300      	movs	r3, #0
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	0801c734 	.word	0x0801c734
 8012a18:	0801c844 	.word	0x0801c844
 8012a1c:	0801c788 	.word	0x0801c788
 8012a20:	0801c864 	.word	0x0801c864
 8012a24:	0801c8a0 	.word	0x0801c8a0

08012a28 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b09b      	sub	sp, #108	; 0x6c
 8012a2c:	af04      	add	r7, sp, #16
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	4611      	mov	r1, r2
 8012a34:	461a      	mov	r2, r3
 8012a36:	460b      	mov	r3, r1
 8012a38:	80fb      	strh	r3, [r7, #6]
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	653b      	str	r3, [r7, #80]	; 0x50
 8012a46:	2300      	movs	r3, #0
 8012a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a4e:	2300      	movs	r3, #0
 8012a50:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012a52:	2300      	movs	r3, #0
 8012a54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012a66:	2300      	movs	r3, #0
 8012a68:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d109      	bne.n	8012a84 <tcp_write+0x5c>
 8012a70:	4ba4      	ldr	r3, [pc, #656]	; (8012d04 <tcp_write+0x2dc>)
 8012a72:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012a76:	49a4      	ldr	r1, [pc, #656]	; (8012d08 <tcp_write+0x2e0>)
 8012a78:	48a4      	ldr	r0, [pc, #656]	; (8012d0c <tcp_write+0x2e4>)
 8012a7a:	f004 fd39 	bl	80174f0 <iprintf>
 8012a7e:	f06f 030f 	mvn.w	r3, #15
 8012a82:	e32a      	b.n	80130da <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012a8a:	085b      	lsrs	r3, r3, #1
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a92:	4293      	cmp	r3, r2
 8012a94:	bf28      	it	cs
 8012a96:	4613      	movcs	r3, r2
 8012a98:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <tcp_write+0x7e>
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012aa4:	e000      	b.n	8012aa8 <tcp_write+0x80>
 8012aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d109      	bne.n	8012ac4 <tcp_write+0x9c>
 8012ab0:	4b94      	ldr	r3, [pc, #592]	; (8012d04 <tcp_write+0x2dc>)
 8012ab2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012ab6:	4996      	ldr	r1, [pc, #600]	; (8012d10 <tcp_write+0x2e8>)
 8012ab8:	4894      	ldr	r0, [pc, #592]	; (8012d0c <tcp_write+0x2e4>)
 8012aba:	f004 fd19 	bl	80174f0 <iprintf>
 8012abe:	f06f 030f 	mvn.w	r3, #15
 8012ac2:	e30a      	b.n	80130da <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012ac4:	88fb      	ldrh	r3, [r7, #6]
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	f7ff ff33 	bl	8012934 <tcp_write_checks>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012ad4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <tcp_write+0xba>
    return err;
 8012adc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012ae0:	e2fb      	b.n	80130da <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ae8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012aec:	2300      	movs	r3, #0
 8012aee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f000 80f6 	beq.w	8012ce8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b00:	653b      	str	r3, [r7, #80]	; 0x50
 8012b02:	e002      	b.n	8012b0a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f8      	bne.n	8012b04 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b14:	7a9b      	ldrb	r3, [r3, #10]
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	f003 0304 	and.w	r3, r3, #4
 8012b1e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b24:	891b      	ldrh	r3, [r3, #8]
 8012b26:	4619      	mov	r1, r3
 8012b28:	8c3b      	ldrh	r3, [r7, #32]
 8012b2a:	440b      	add	r3, r1
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	da06      	bge.n	8012b3e <tcp_write+0x116>
 8012b30:	4b74      	ldr	r3, [pc, #464]	; (8012d04 <tcp_write+0x2dc>)
 8012b32:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012b36:	4977      	ldr	r1, [pc, #476]	; (8012d14 <tcp_write+0x2ec>)
 8012b38:	4874      	ldr	r0, [pc, #464]	; (8012d0c <tcp_write+0x2e4>)
 8012b3a:	f004 fcd9 	bl	80174f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b40:	891a      	ldrh	r2, [r3, #8]
 8012b42:	8c3b      	ldrh	r3, [r7, #32]
 8012b44:	4413      	add	r3, r2
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b4a:	1ad3      	subs	r3, r2, r3
 8012b4c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b54:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012b56:	8a7b      	ldrh	r3, [r7, #18]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d026      	beq.n	8012baa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012b5c:	8a7b      	ldrh	r3, [r7, #18]
 8012b5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d206      	bcs.n	8012b72 <tcp_write+0x14a>
 8012b64:	4b67      	ldr	r3, [pc, #412]	; (8012d04 <tcp_write+0x2dc>)
 8012b66:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012b6a:	496b      	ldr	r1, [pc, #428]	; (8012d18 <tcp_write+0x2f0>)
 8012b6c:	4867      	ldr	r0, [pc, #412]	; (8012d0c <tcp_write+0x2e4>)
 8012b6e:	f004 fcbf 	bl	80174f0 <iprintf>
      seg = last_unsent;
 8012b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b74:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012b76:	8a7b      	ldrh	r3, [r7, #18]
 8012b78:	88fa      	ldrh	r2, [r7, #6]
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	bf28      	it	cs
 8012b7e:	4613      	movcs	r3, r2
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b84:	4293      	cmp	r3, r2
 8012b86:	bf28      	it	cs
 8012b88:	4613      	movcs	r3, r2
 8012b8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012b8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b92:	4413      	add	r3, r2
 8012b94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012b98:	8a7a      	ldrh	r2, [r7, #18]
 8012b9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b9c:	1ad3      	subs	r3, r2, r3
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012ba2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012baa:	8a7b      	ldrh	r3, [r7, #18]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00b      	beq.n	8012bc8 <tcp_write+0x1a0>
 8012bb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bb4:	88fb      	ldrh	r3, [r7, #6]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d006      	beq.n	8012bc8 <tcp_write+0x1a0>
 8012bba:	4b52      	ldr	r3, [pc, #328]	; (8012d04 <tcp_write+0x2dc>)
 8012bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bc0:	4956      	ldr	r1, [pc, #344]	; (8012d1c <tcp_write+0x2f4>)
 8012bc2:	4852      	ldr	r0, [pc, #328]	; (8012d0c <tcp_write+0x2e4>)
 8012bc4:	f004 fc94 	bl	80174f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012bc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bcc:	88fb      	ldrh	r3, [r7, #6]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	f080 8167 	bcs.w	8012ea2 <tcp_write+0x47a>
 8012bd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	f000 8163 	beq.w	8012ea2 <tcp_write+0x47a>
 8012bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bde:	891b      	ldrh	r3, [r3, #8]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f000 815e 	beq.w	8012ea2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012be6:	88fa      	ldrh	r2, [r7, #6]
 8012be8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bec:	1ad2      	subs	r2, r2, r3
 8012bee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	bfa8      	it	ge
 8012bf4:	4613      	movge	r3, r2
 8012bf6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bfa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012bfc:	797b      	ldrb	r3, [r7, #5]
 8012bfe:	f003 0301 	and.w	r3, r3, #1
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d027      	beq.n	8012c56 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012c06:	f107 0012 	add.w	r0, r7, #18
 8012c0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c0c:	8bf9      	ldrh	r1, [r7, #30]
 8012c0e:	2301      	movs	r3, #1
 8012c10:	9302      	str	r3, [sp, #8]
 8012c12:	797b      	ldrb	r3, [r7, #5]
 8012c14:	9301      	str	r3, [sp, #4]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	f7ff fe0f 	bl	8012840 <tcp_pbuf_prealloc>
 8012c22:	6578      	str	r0, [r7, #84]	; 0x54
 8012c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f000 8225 	beq.w	8013076 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c2e:	6858      	ldr	r0, [r3, #4]
 8012c30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	4413      	add	r3, r2
 8012c38:	8bfa      	ldrh	r2, [r7, #30]
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	f004 fb93 	bl	8017366 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012c40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c42:	f7fb f971 	bl	800df28 <pbuf_clen>
 8012c46:	4603      	mov	r3, r0
 8012c48:	461a      	mov	r2, r3
 8012c4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c4e:	4413      	add	r3, r2
 8012c50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012c54:	e041      	b.n	8012cda <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8012c5c:	e002      	b.n	8012c64 <tcp_write+0x23c>
 8012c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	637b      	str	r3, [r7, #52]	; 0x34
 8012c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d1f8      	bne.n	8012c5e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c6e:	7b1b      	ldrb	r3, [r3, #12]
 8012c70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d115      	bne.n	8012ca4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c7e:	8952      	ldrh	r2, [r2, #10]
 8012c80:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c82:	68ba      	ldr	r2, [r7, #8]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d10d      	bne.n	8012ca4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012c88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d006      	beq.n	8012c9e <tcp_write+0x276>
 8012c90:	4b1c      	ldr	r3, [pc, #112]	; (8012d04 <tcp_write+0x2dc>)
 8012c92:	f240 2231 	movw	r2, #561	; 0x231
 8012c96:	4922      	ldr	r1, [pc, #136]	; (8012d20 <tcp_write+0x2f8>)
 8012c98:	481c      	ldr	r0, [pc, #112]	; (8012d0c <tcp_write+0x2e4>)
 8012c9a:	f004 fc29 	bl	80174f0 <iprintf>
          extendlen = seglen;
 8012c9e:	8bfb      	ldrh	r3, [r7, #30]
 8012ca0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012ca2:	e01a      	b.n	8012cda <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012ca4:	8bfb      	ldrh	r3, [r7, #30]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	4619      	mov	r1, r3
 8012caa:	2000      	movs	r0, #0
 8012cac:	f7fa fdca 	bl	800d844 <pbuf_alloc>
 8012cb0:	6578      	str	r0, [r7, #84]	; 0x54
 8012cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f000 81e0 	beq.w	801307a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012cba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cbe:	68ba      	ldr	r2, [r7, #8]
 8012cc0:	441a      	add	r2, r3
 8012cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cc4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012cc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012cc8:	f7fb f92e 	bl	800df28 <pbuf_clen>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	461a      	mov	r2, r3
 8012cd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012cd4:	4413      	add	r3, r2
 8012cd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012cda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cde:	8bfb      	ldrh	r3, [r7, #30]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012ce6:	e0dc      	b.n	8012ea2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f000 80d7 	beq.w	8012ea2 <tcp_write+0x47a>
 8012cf4:	4b03      	ldr	r3, [pc, #12]	; (8012d04 <tcp_write+0x2dc>)
 8012cf6:	f240 224a 	movw	r2, #586	; 0x24a
 8012cfa:	490a      	ldr	r1, [pc, #40]	; (8012d24 <tcp_write+0x2fc>)
 8012cfc:	4803      	ldr	r0, [pc, #12]	; (8012d0c <tcp_write+0x2e4>)
 8012cfe:	f004 fbf7 	bl	80174f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012d02:	e0ce      	b.n	8012ea2 <tcp_write+0x47a>
 8012d04:	0801c734 	.word	0x0801c734
 8012d08:	0801c8d4 	.word	0x0801c8d4
 8012d0c:	0801c788 	.word	0x0801c788
 8012d10:	0801c8ec 	.word	0x0801c8ec
 8012d14:	0801c920 	.word	0x0801c920
 8012d18:	0801c938 	.word	0x0801c938
 8012d1c:	0801c958 	.word	0x0801c958
 8012d20:	0801c978 	.word	0x0801c978
 8012d24:	0801c9a4 	.word	0x0801c9a4
    struct pbuf *p;
    u16_t left = len - pos;
 8012d28:	88fa      	ldrh	r2, [r7, #6]
 8012d2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012d32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012d3e:	8b7a      	ldrh	r2, [r7, #26]
 8012d40:	8bbb      	ldrh	r3, [r7, #28]
 8012d42:	4293      	cmp	r3, r2
 8012d44:	bf28      	it	cs
 8012d46:	4613      	movcs	r3, r2
 8012d48:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012d4a:	797b      	ldrb	r3, [r7, #5]
 8012d4c:	f003 0301 	and.w	r3, r3, #1
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d036      	beq.n	8012dc2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	8b3b      	ldrh	r3, [r7, #24]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	b299      	uxth	r1, r3
 8012d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	bf0c      	ite	eq
 8012d66:	2301      	moveq	r3, #1
 8012d68:	2300      	movne	r3, #0
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	f107 0012 	add.w	r0, r7, #18
 8012d70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d72:	9302      	str	r3, [sp, #8]
 8012d74:	797b      	ldrb	r3, [r7, #5]
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2036      	movs	r0, #54	; 0x36
 8012d80:	f7ff fd5e 	bl	8012840 <tcp_pbuf_prealloc>
 8012d84:	6338      	str	r0, [r7, #48]	; 0x30
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	f000 8178 	beq.w	801307e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	895b      	ldrh	r3, [r3, #10]
 8012d92:	8b3a      	ldrh	r2, [r7, #24]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d906      	bls.n	8012da6 <tcp_write+0x37e>
 8012d98:	4b8c      	ldr	r3, [pc, #560]	; (8012fcc <tcp_write+0x5a4>)
 8012d9a:	f240 2266 	movw	r2, #614	; 0x266
 8012d9e:	498c      	ldr	r1, [pc, #560]	; (8012fd0 <tcp_write+0x5a8>)
 8012da0:	488c      	ldr	r0, [pc, #560]	; (8012fd4 <tcp_write+0x5ac>)
 8012da2:	f004 fba5 	bl	80174f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012dae:	18d0      	adds	r0, r2, r3
 8012db0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012db4:	68ba      	ldr	r2, [r7, #8]
 8012db6:	4413      	add	r3, r2
 8012db8:	8b3a      	ldrh	r2, [r7, #24]
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f004 fad3 	bl	8017366 <memcpy>
 8012dc0:	e02f      	b.n	8012e22 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012dc2:	8a7b      	ldrh	r3, [r7, #18]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d006      	beq.n	8012dd6 <tcp_write+0x3ae>
 8012dc8:	4b80      	ldr	r3, [pc, #512]	; (8012fcc <tcp_write+0x5a4>)
 8012dca:	f240 2271 	movw	r2, #625	; 0x271
 8012dce:	4982      	ldr	r1, [pc, #520]	; (8012fd8 <tcp_write+0x5b0>)
 8012dd0:	4880      	ldr	r0, [pc, #512]	; (8012fd4 <tcp_write+0x5ac>)
 8012dd2:	f004 fb8d 	bl	80174f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012dd6:	8b3b      	ldrh	r3, [r7, #24]
 8012dd8:	2201      	movs	r2, #1
 8012dda:	4619      	mov	r1, r3
 8012ddc:	2036      	movs	r0, #54	; 0x36
 8012dde:	f7fa fd31 	bl	800d844 <pbuf_alloc>
 8012de2:	6178      	str	r0, [r7, #20]
 8012de4:	697b      	ldr	r3, [r7, #20]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	f000 814b 	beq.w	8013082 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012dec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012df0:	68ba      	ldr	r2, [r7, #8]
 8012df2:	441a      	add	r2, r3
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e02:	4619      	mov	r1, r3
 8012e04:	2036      	movs	r0, #54	; 0x36
 8012e06:	f7fa fd1d 	bl	800d844 <pbuf_alloc>
 8012e0a:	6338      	str	r0, [r7, #48]	; 0x30
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d103      	bne.n	8012e1a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012e12:	6978      	ldr	r0, [r7, #20]
 8012e14:	f7fa fffa 	bl	800de0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012e18:	e136      	b.n	8013088 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012e1a:	6979      	ldr	r1, [r7, #20]
 8012e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e1e:	f7fb f8c3 	bl	800dfa8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e24:	f7fb f880 	bl	800df28 <pbuf_clen>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e30:	4413      	add	r3, r2
 8012e32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e3a:	2b09      	cmp	r3, #9
 8012e3c:	d903      	bls.n	8012e46 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e40:	f7fa ffe4 	bl	800de0c <pbuf_free>
      goto memerr;
 8012e44:	e120      	b.n	8013088 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012e4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e4e:	441a      	add	r2, r3
 8012e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	4613      	mov	r3, r2
 8012e58:	2200      	movs	r2, #0
 8012e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e5c:	68f8      	ldr	r0, [r7, #12]
 8012e5e:	f7ff fc51 	bl	8012704 <tcp_create_segment>
 8012e62:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f000 810d 	beq.w	8013086 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d102      	bne.n	8012e78 <tcp_write+0x450>
      queue = seg;
 8012e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e74:	647b      	str	r3, [r7, #68]	; 0x44
 8012e76:	e00c      	b.n	8012e92 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <tcp_write+0x464>
 8012e7e:	4b53      	ldr	r3, [pc, #332]	; (8012fcc <tcp_write+0x5a4>)
 8012e80:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012e84:	4955      	ldr	r1, [pc, #340]	; (8012fdc <tcp_write+0x5b4>)
 8012e86:	4853      	ldr	r0, [pc, #332]	; (8012fd4 <tcp_write+0x5ac>)
 8012e88:	f004 fb32 	bl	80174f0 <iprintf>
      prev_seg->next = seg;
 8012e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e90:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e94:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012e96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e9a:	8b3b      	ldrh	r3, [r7, #24]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012ea2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ea6:	88fb      	ldrh	r3, [r7, #6]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	f4ff af3d 	bcc.w	8012d28 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012eae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d02c      	beq.n	8012f0e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012eba:	e01e      	b.n	8012efa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ebe:	891a      	ldrh	r2, [r3, #8]
 8012ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ec2:	4413      	add	r3, r2
 8012ec4:	b29a      	uxth	r2, r3
 8012ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d110      	bne.n	8012ef4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ed8:	8952      	ldrh	r2, [r2, #10]
 8012eda:	4413      	add	r3, r2
 8012edc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012ede:	68b9      	ldr	r1, [r7, #8]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f004 fa40 	bl	8017366 <memcpy>
        p->len += oversize_used;
 8012ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee8:	895a      	ldrh	r2, [r3, #10]
 8012eea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012eec:	4413      	add	r3, r2
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d1dd      	bne.n	8012ebc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f02:	891a      	ldrh	r2, [r3, #8]
 8012f04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f06:	4413      	add	r3, r2
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f0c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012f0e:	8a7a      	ldrh	r2, [r7, #18]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d018      	beq.n	8012f4e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d106      	bne.n	8012f30 <tcp_write+0x508>
 8012f22:	4b2a      	ldr	r3, [pc, #168]	; (8012fcc <tcp_write+0x5a4>)
 8012f24:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012f28:	492d      	ldr	r1, [pc, #180]	; (8012fe0 <tcp_write+0x5b8>)
 8012f2a:	482a      	ldr	r0, [pc, #168]	; (8012fd4 <tcp_write+0x5ac>)
 8012f2c:	f004 fae0 	bl	80174f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fb f836 	bl	800dfa8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f3e:	891a      	ldrh	r2, [r3, #8]
 8012f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f42:	891b      	ldrh	r3, [r3, #8]
 8012f44:	4413      	add	r3, r2
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f4a:	811a      	strh	r2, [r3, #8]
 8012f4c:	e037      	b.n	8012fbe <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012f4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d034      	beq.n	8012fbe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d003      	beq.n	8012f62 <tcp_write+0x53a>
 8012f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d106      	bne.n	8012f70 <tcp_write+0x548>
 8012f62:	4b1a      	ldr	r3, [pc, #104]	; (8012fcc <tcp_write+0x5a4>)
 8012f64:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012f68:	491e      	ldr	r1, [pc, #120]	; (8012fe4 <tcp_write+0x5bc>)
 8012f6a:	481a      	ldr	r0, [pc, #104]	; (8012fd4 <tcp_write+0x5ac>)
 8012f6c:	f004 fac0 	bl	80174f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f76:	e009      	b.n	8012f8c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7a:	891a      	ldrh	r2, [r3, #8]
 8012f7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f7e:	4413      	add	r3, r2
 8012f80:	b29a      	uxth	r2, r3
 8012f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f84:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d1f1      	bne.n	8012f78 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f96:	891a      	ldrh	r2, [r3, #8]
 8012f98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f9a:	4413      	add	r3, r2
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa4:	895a      	ldrh	r2, [r3, #10]
 8012fa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fa8:	4413      	add	r3, r2
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fae:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fb2:	891a      	ldrh	r2, [r3, #8]
 8012fb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fb6:	4413      	add	r3, r2
 8012fb8:	b29a      	uxth	r2, r3
 8012fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fbc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d111      	bne.n	8012fe8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fc8:	66da      	str	r2, [r3, #108]	; 0x6c
 8012fca:	e010      	b.n	8012fee <tcp_write+0x5c6>
 8012fcc:	0801c734 	.word	0x0801c734
 8012fd0:	0801c9d4 	.word	0x0801c9d4
 8012fd4:	0801c788 	.word	0x0801c788
 8012fd8:	0801ca14 	.word	0x0801ca14
 8012fdc:	0801ca24 	.word	0x0801ca24
 8012fe0:	0801ca38 	.word	0x0801ca38
 8012fe4:	0801ca70 	.word	0x0801ca70
  } else {
    last_unsent->next = queue;
 8012fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ff2:	88fb      	ldrh	r3, [r7, #6]
 8012ff4:	441a      	add	r2, r3
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013000:	88fb      	ldrh	r3, [r7, #6]
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	b29a      	uxth	r2, r3
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013012:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00e      	beq.n	801303e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013024:	2b00      	cmp	r3, #0
 8013026:	d10a      	bne.n	801303e <tcp_write+0x616>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801302c:	2b00      	cmp	r3, #0
 801302e:	d106      	bne.n	801303e <tcp_write+0x616>
 8013030:	4b2c      	ldr	r3, [pc, #176]	; (80130e4 <tcp_write+0x6bc>)
 8013032:	f240 3212 	movw	r2, #786	; 0x312
 8013036:	492c      	ldr	r1, [pc, #176]	; (80130e8 <tcp_write+0x6c0>)
 8013038:	482c      	ldr	r0, [pc, #176]	; (80130ec <tcp_write+0x6c4>)
 801303a:	f004 fa59 	bl	80174f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013040:	2b00      	cmp	r3, #0
 8013042:	d016      	beq.n	8013072 <tcp_write+0x64a>
 8013044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d012      	beq.n	8013072 <tcp_write+0x64a>
 801304c:	797b      	ldrb	r3, [r7, #5]
 801304e:	f003 0302 	and.w	r3, r3, #2
 8013052:	2b00      	cmp	r3, #0
 8013054:	d10d      	bne.n	8013072 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	899b      	ldrh	r3, [r3, #12]
 801305c:	b29c      	uxth	r4, r3
 801305e:	2008      	movs	r0, #8
 8013060:	f7f9 f9ce 	bl	800c400 <lwip_htons>
 8013064:	4603      	mov	r3, r0
 8013066:	461a      	mov	r2, r3
 8013068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	4322      	orrs	r2, r4
 801306e:	b292      	uxth	r2, r2
 8013070:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013072:	2300      	movs	r3, #0
 8013074:	e031      	b.n	80130da <tcp_write+0x6b2>
          goto memerr;
 8013076:	bf00      	nop
 8013078:	e006      	b.n	8013088 <tcp_write+0x660>
            goto memerr;
 801307a:	bf00      	nop
 801307c:	e004      	b.n	8013088 <tcp_write+0x660>
        goto memerr;
 801307e:	bf00      	nop
 8013080:	e002      	b.n	8013088 <tcp_write+0x660>
        goto memerr;
 8013082:	bf00      	nop
 8013084:	e000      	b.n	8013088 <tcp_write+0x660>
      goto memerr;
 8013086:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	8b5b      	ldrh	r3, [r3, #26]
 801308c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013090:	b29a      	uxth	r2, r3
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013098:	2b00      	cmp	r3, #0
 801309a:	d002      	beq.n	80130a2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801309c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801309e:	f7fa feb5 	bl	800de0c <pbuf_free>
  }
  if (queue != NULL) {
 80130a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d002      	beq.n	80130ae <tcp_write+0x686>
    tcp_segs_free(queue);
 80130a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80130aa:	f7fc fb6b 	bl	800f784 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00e      	beq.n	80130d6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d10a      	bne.n	80130d6 <tcp_write+0x6ae>
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d106      	bne.n	80130d6 <tcp_write+0x6ae>
 80130c8:	4b06      	ldr	r3, [pc, #24]	; (80130e4 <tcp_write+0x6bc>)
 80130ca:	f240 3227 	movw	r2, #807	; 0x327
 80130ce:	4906      	ldr	r1, [pc, #24]	; (80130e8 <tcp_write+0x6c0>)
 80130d0:	4806      	ldr	r0, [pc, #24]	; (80130ec <tcp_write+0x6c4>)
 80130d2:	f004 fa0d 	bl	80174f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80130d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80130da:	4618      	mov	r0, r3
 80130dc:	375c      	adds	r7, #92	; 0x5c
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd90      	pop	{r4, r7, pc}
 80130e2:	bf00      	nop
 80130e4:	0801c734 	.word	0x0801c734
 80130e8:	0801caa8 	.word	0x0801caa8
 80130ec:	0801c788 	.word	0x0801c788

080130f0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80130f0:	b590      	push	{r4, r7, lr}
 80130f2:	b08b      	sub	sp, #44	; 0x2c
 80130f4:	af02      	add	r7, sp, #8
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	460b      	mov	r3, r1
 80130fa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80130fc:	2300      	movs	r3, #0
 80130fe:	61fb      	str	r3, [r7, #28]
 8013100:	2300      	movs	r3, #0
 8013102:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013104:	2300      	movs	r3, #0
 8013106:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d106      	bne.n	801311c <tcp_split_unsent_seg+0x2c>
 801310e:	4b95      	ldr	r3, [pc, #596]	; (8013364 <tcp_split_unsent_seg+0x274>)
 8013110:	f240 324b 	movw	r2, #843	; 0x34b
 8013114:	4994      	ldr	r1, [pc, #592]	; (8013368 <tcp_split_unsent_seg+0x278>)
 8013116:	4895      	ldr	r0, [pc, #596]	; (801336c <tcp_split_unsent_seg+0x27c>)
 8013118:	f004 f9ea 	bl	80174f0 <iprintf>

  useg = pcb->unsent;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013120:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d102      	bne.n	801312e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801312c:	e116      	b.n	801335c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801312e:	887b      	ldrh	r3, [r7, #2]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d109      	bne.n	8013148 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013134:	4b8b      	ldr	r3, [pc, #556]	; (8013364 <tcp_split_unsent_seg+0x274>)
 8013136:	f240 3253 	movw	r2, #851	; 0x353
 801313a:	498d      	ldr	r1, [pc, #564]	; (8013370 <tcp_split_unsent_seg+0x280>)
 801313c:	488b      	ldr	r0, [pc, #556]	; (801336c <tcp_split_unsent_seg+0x27c>)
 801313e:	f004 f9d7 	bl	80174f0 <iprintf>
    return ERR_VAL;
 8013142:	f06f 0305 	mvn.w	r3, #5
 8013146:	e109      	b.n	801335c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	891b      	ldrh	r3, [r3, #8]
 801314c:	887a      	ldrh	r2, [r7, #2]
 801314e:	429a      	cmp	r2, r3
 8013150:	d301      	bcc.n	8013156 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013152:	2300      	movs	r3, #0
 8013154:	e102      	b.n	801335c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801315a:	887a      	ldrh	r2, [r7, #2]
 801315c:	429a      	cmp	r2, r3
 801315e:	d906      	bls.n	801316e <tcp_split_unsent_seg+0x7e>
 8013160:	4b80      	ldr	r3, [pc, #512]	; (8013364 <tcp_split_unsent_seg+0x274>)
 8013162:	f240 325b 	movw	r2, #859	; 0x35b
 8013166:	4983      	ldr	r1, [pc, #524]	; (8013374 <tcp_split_unsent_seg+0x284>)
 8013168:	4880      	ldr	r0, [pc, #512]	; (801336c <tcp_split_unsent_seg+0x27c>)
 801316a:	f004 f9c1 	bl	80174f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	891b      	ldrh	r3, [r3, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <tcp_split_unsent_seg+0x94>
 8013176:	4b7b      	ldr	r3, [pc, #492]	; (8013364 <tcp_split_unsent_seg+0x274>)
 8013178:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801317c:	497e      	ldr	r1, [pc, #504]	; (8013378 <tcp_split_unsent_seg+0x288>)
 801317e:	487b      	ldr	r0, [pc, #492]	; (801336c <tcp_split_unsent_seg+0x27c>)
 8013180:	f004 f9b6 	bl	80174f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	7a9b      	ldrb	r3, [r3, #10]
 8013188:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801318a:	7bfb      	ldrb	r3, [r7, #15]
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	b2db      	uxtb	r3, r3
 8013190:	f003 0304 	and.w	r3, r3, #4
 8013194:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	891a      	ldrh	r2, [r3, #8]
 801319a:	887b      	ldrh	r3, [r7, #2]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80131a0:	7bbb      	ldrb	r3, [r7, #14]
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	89bb      	ldrh	r3, [r7, #12]
 80131a6:	4413      	add	r3, r2
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131ae:	4619      	mov	r1, r3
 80131b0:	2036      	movs	r0, #54	; 0x36
 80131b2:	f7fa fb47 	bl	800d844 <pbuf_alloc>
 80131b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	f000 80b7 	beq.w	801332e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	891a      	ldrh	r2, [r3, #8]
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	891b      	ldrh	r3, [r3, #8]
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	887b      	ldrh	r3, [r7, #2]
 80131d0:	4413      	add	r3, r2
 80131d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	6858      	ldr	r0, [r3, #4]
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	685a      	ldr	r2, [r3, #4]
 80131dc:	7bbb      	ldrb	r3, [r7, #14]
 80131de:	18d1      	adds	r1, r2, r3
 80131e0:	897b      	ldrh	r3, [r7, #10]
 80131e2:	89ba      	ldrh	r2, [r7, #12]
 80131e4:	f7fb f808 	bl	800e1f8 <pbuf_copy_partial>
 80131e8:	4603      	mov	r3, r0
 80131ea:	461a      	mov	r2, r3
 80131ec:	89bb      	ldrh	r3, [r7, #12]
 80131ee:	4293      	cmp	r3, r2
 80131f0:	f040 809f 	bne.w	8013332 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	68db      	ldr	r3, [r3, #12]
 80131f8:	899b      	ldrh	r3, [r3, #12]
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f9 f8ff 	bl	800c400 <lwip_htons>
 8013202:	4603      	mov	r3, r0
 8013204:	b2db      	uxtb	r3, r3
 8013206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801320a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801320c:	2300      	movs	r3, #0
 801320e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013210:	7efb      	ldrb	r3, [r7, #27]
 8013212:	f003 0308 	and.w	r3, r3, #8
 8013216:	2b00      	cmp	r3, #0
 8013218:	d007      	beq.n	801322a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801321a:	7efb      	ldrb	r3, [r7, #27]
 801321c:	f023 0308 	bic.w	r3, r3, #8
 8013220:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013222:	7ebb      	ldrb	r3, [r7, #26]
 8013224:	f043 0308 	orr.w	r3, r3, #8
 8013228:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801322a:	7efb      	ldrb	r3, [r7, #27]
 801322c:	f003 0301 	and.w	r3, r3, #1
 8013230:	2b00      	cmp	r3, #0
 8013232:	d007      	beq.n	8013244 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013234:	7efb      	ldrb	r3, [r7, #27]
 8013236:	f023 0301 	bic.w	r3, r3, #1
 801323a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801323c:	7ebb      	ldrb	r3, [r7, #26]
 801323e:	f043 0301 	orr.w	r3, r3, #1
 8013242:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	68db      	ldr	r3, [r3, #12]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	4618      	mov	r0, r3
 801324c:	f7f9 f8ed 	bl	800c42a <lwip_htonl>
 8013250:	4602      	mov	r2, r0
 8013252:	887b      	ldrh	r3, [r7, #2]
 8013254:	18d1      	adds	r1, r2, r3
 8013256:	7eba      	ldrb	r2, [r7, #26]
 8013258:	7bfb      	ldrb	r3, [r7, #15]
 801325a:	9300      	str	r3, [sp, #0]
 801325c:	460b      	mov	r3, r1
 801325e:	6939      	ldr	r1, [r7, #16]
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f7ff fa4f 	bl	8012704 <tcp_create_segment>
 8013266:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d063      	beq.n	8013336 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	f7fa fe58 	bl	800df28 <pbuf_clen>
 8013278:	4603      	mov	r3, r0
 801327a:	461a      	mov	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013282:	1a9b      	subs	r3, r3, r2
 8013284:	b29a      	uxth	r2, r3
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	6858      	ldr	r0, [r3, #4]
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	891a      	ldrh	r2, [r3, #8]
 8013296:	89bb      	ldrh	r3, [r7, #12]
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	b29b      	uxth	r3, r3
 801329c:	4619      	mov	r1, r3
 801329e:	f7fa fc2f 	bl	800db00 <pbuf_realloc>
  useg->len -= remainder;
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	891a      	ldrh	r2, [r3, #8]
 80132a6:	89bb      	ldrh	r3, [r7, #12]
 80132a8:	1ad3      	subs	r3, r2, r3
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	899b      	ldrh	r3, [r3, #12]
 80132b6:	b29c      	uxth	r4, r3
 80132b8:	7efb      	ldrb	r3, [r7, #27]
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	4618      	mov	r0, r3
 80132be:	f7f9 f89f 	bl	800c400 <lwip_htons>
 80132c2:	4603      	mov	r3, r0
 80132c4:	461a      	mov	r2, r3
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	68db      	ldr	r3, [r3, #12]
 80132ca:	4322      	orrs	r2, r4
 80132cc:	b292      	uxth	r2, r2
 80132ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7fa fe27 	bl	800df28 <pbuf_clen>
 80132da:	4603      	mov	r3, r0
 80132dc:	461a      	mov	r2, r3
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132e4:	4413      	add	r3, r2
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	685b      	ldr	r3, [r3, #4]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fa fe18 	bl	800df28 <pbuf_clen>
 80132f8:	4603      	mov	r3, r0
 80132fa:	461a      	mov	r2, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013302:	4413      	add	r3, r2
 8013304:	b29a      	uxth	r2, r3
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	69fa      	ldr	r2, [r7, #28]
 8013318:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d103      	bne.n	801332a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2200      	movs	r2, #0
 8013326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	e016      	b.n	801335c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801332e:	bf00      	nop
 8013330:	e002      	b.n	8013338 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013332:	bf00      	nop
 8013334:	e000      	b.n	8013338 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013336:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013338:	69fb      	ldr	r3, [r7, #28]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d006      	beq.n	801334c <tcp_split_unsent_seg+0x25c>
 801333e:	4b09      	ldr	r3, [pc, #36]	; (8013364 <tcp_split_unsent_seg+0x274>)
 8013340:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013344:	490d      	ldr	r1, [pc, #52]	; (801337c <tcp_split_unsent_seg+0x28c>)
 8013346:	4809      	ldr	r0, [pc, #36]	; (801336c <tcp_split_unsent_seg+0x27c>)
 8013348:	f004 f8d2 	bl	80174f0 <iprintf>
  if (p != NULL) {
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013352:	6938      	ldr	r0, [r7, #16]
 8013354:	f7fa fd5a 	bl	800de0c <pbuf_free>
  }

  return ERR_MEM;
 8013358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801335c:	4618      	mov	r0, r3
 801335e:	3724      	adds	r7, #36	; 0x24
 8013360:	46bd      	mov	sp, r7
 8013362:	bd90      	pop	{r4, r7, pc}
 8013364:	0801c734 	.word	0x0801c734
 8013368:	0801cac8 	.word	0x0801cac8
 801336c:	0801c788 	.word	0x0801c788
 8013370:	0801caec 	.word	0x0801caec
 8013374:	0801cb10 	.word	0x0801cb10
 8013378:	0801cb20 	.word	0x0801cb20
 801337c:	0801cb30 	.word	0x0801cb30

08013380 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013380:	b590      	push	{r4, r7, lr}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d106      	bne.n	801339c <tcp_send_fin+0x1c>
 801338e:	4b21      	ldr	r3, [pc, #132]	; (8013414 <tcp_send_fin+0x94>)
 8013390:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013394:	4920      	ldr	r1, [pc, #128]	; (8013418 <tcp_send_fin+0x98>)
 8013396:	4821      	ldr	r0, [pc, #132]	; (801341c <tcp_send_fin+0x9c>)
 8013398:	f004 f8aa 	bl	80174f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d02e      	beq.n	8013402 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133a8:	60fb      	str	r3, [r7, #12]
 80133aa:	e002      	b.n	80133b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1f8      	bne.n	80133ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	899b      	ldrh	r3, [r3, #12]
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f9 f81c 	bl	800c400 <lwip_htons>
 80133c8:	4603      	mov	r3, r0
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	f003 0307 	and.w	r3, r3, #7
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d116      	bne.n	8013402 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	899b      	ldrh	r3, [r3, #12]
 80133da:	b29c      	uxth	r4, r3
 80133dc:	2001      	movs	r0, #1
 80133de:	f7f9 f80f 	bl	800c400 <lwip_htons>
 80133e2:	4603      	mov	r3, r0
 80133e4:	461a      	mov	r2, r3
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	4322      	orrs	r2, r4
 80133ec:	b292      	uxth	r2, r2
 80133ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	8b5b      	ldrh	r3, [r3, #26]
 80133f4:	f043 0320 	orr.w	r3, r3, #32
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80133fe:	2300      	movs	r3, #0
 8013400:	e004      	b.n	801340c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013402:	2101      	movs	r1, #1
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f000 f80b 	bl	8013420 <tcp_enqueue_flags>
 801340a:	4603      	mov	r3, r0
}
 801340c:	4618      	mov	r0, r3
 801340e:	3714      	adds	r7, #20
 8013410:	46bd      	mov	sp, r7
 8013412:	bd90      	pop	{r4, r7, pc}
 8013414:	0801c734 	.word	0x0801c734
 8013418:	0801cb3c 	.word	0x0801cb3c
 801341c:	0801c788 	.word	0x0801c788

08013420 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b08a      	sub	sp, #40	; 0x28
 8013424:	af02      	add	r7, sp, #8
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	460b      	mov	r3, r1
 801342a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801342c:	2300      	movs	r3, #0
 801342e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013430:	2300      	movs	r3, #0
 8013432:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013434:	78fb      	ldrb	r3, [r7, #3]
 8013436:	f003 0303 	and.w	r3, r3, #3
 801343a:	2b00      	cmp	r3, #0
 801343c:	d106      	bne.n	801344c <tcp_enqueue_flags+0x2c>
 801343e:	4b67      	ldr	r3, [pc, #412]	; (80135dc <tcp_enqueue_flags+0x1bc>)
 8013440:	f240 4211 	movw	r2, #1041	; 0x411
 8013444:	4966      	ldr	r1, [pc, #408]	; (80135e0 <tcp_enqueue_flags+0x1c0>)
 8013446:	4867      	ldr	r0, [pc, #412]	; (80135e4 <tcp_enqueue_flags+0x1c4>)
 8013448:	f004 f852 	bl	80174f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d106      	bne.n	8013460 <tcp_enqueue_flags+0x40>
 8013452:	4b62      	ldr	r3, [pc, #392]	; (80135dc <tcp_enqueue_flags+0x1bc>)
 8013454:	f240 4213 	movw	r2, #1043	; 0x413
 8013458:	4963      	ldr	r1, [pc, #396]	; (80135e8 <tcp_enqueue_flags+0x1c8>)
 801345a:	4862      	ldr	r0, [pc, #392]	; (80135e4 <tcp_enqueue_flags+0x1c4>)
 801345c:	f004 f848 	bl	80174f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013460:	78fb      	ldrb	r3, [r7, #3]
 8013462:	f003 0302 	and.w	r3, r3, #2
 8013466:	2b00      	cmp	r3, #0
 8013468:	d001      	beq.n	801346e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801346a:	2301      	movs	r3, #1
 801346c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801346e:	7ffb      	ldrb	r3, [r7, #31]
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	b2db      	uxtb	r3, r3
 8013474:	f003 0304 	and.w	r3, r3, #4
 8013478:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801347a:	7dfb      	ldrb	r3, [r7, #23]
 801347c:	b29b      	uxth	r3, r3
 801347e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013482:	4619      	mov	r1, r3
 8013484:	2036      	movs	r0, #54	; 0x36
 8013486:	f7fa f9dd 	bl	800d844 <pbuf_alloc>
 801348a:	6138      	str	r0, [r7, #16]
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d109      	bne.n	80134a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	8b5b      	ldrh	r3, [r3, #26]
 8013496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801349a:	b29a      	uxth	r2, r3
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80134a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134a4:	e095      	b.n	80135d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	895a      	ldrh	r2, [r3, #10]
 80134aa:	7dfb      	ldrb	r3, [r7, #23]
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d206      	bcs.n	80134c0 <tcp_enqueue_flags+0xa0>
 80134b2:	4b4a      	ldr	r3, [pc, #296]	; (80135dc <tcp_enqueue_flags+0x1bc>)
 80134b4:	f240 4239 	movw	r2, #1081	; 0x439
 80134b8:	494c      	ldr	r1, [pc, #304]	; (80135ec <tcp_enqueue_flags+0x1cc>)
 80134ba:	484a      	ldr	r0, [pc, #296]	; (80135e4 <tcp_enqueue_flags+0x1c4>)
 80134bc:	f004 f818 	bl	80174f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80134c4:	78fa      	ldrb	r2, [r7, #3]
 80134c6:	7ffb      	ldrb	r3, [r7, #31]
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	460b      	mov	r3, r1
 80134cc:	6939      	ldr	r1, [r7, #16]
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f7ff f918 	bl	8012704 <tcp_create_segment>
 80134d4:	60f8      	str	r0, [r7, #12]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d109      	bne.n	80134f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	8b5b      	ldrh	r3, [r3, #26]
 80134e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80134ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ee:	e070      	b.n	80135d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	68db      	ldr	r3, [r3, #12]
 80134f4:	f003 0303 	and.w	r3, r3, #3
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d006      	beq.n	801350a <tcp_enqueue_flags+0xea>
 80134fc:	4b37      	ldr	r3, [pc, #220]	; (80135dc <tcp_enqueue_flags+0x1bc>)
 80134fe:	f240 4242 	movw	r2, #1090	; 0x442
 8013502:	493b      	ldr	r1, [pc, #236]	; (80135f0 <tcp_enqueue_flags+0x1d0>)
 8013504:	4837      	ldr	r0, [pc, #220]	; (80135e4 <tcp_enqueue_flags+0x1c4>)
 8013506:	f003 fff3 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	891b      	ldrh	r3, [r3, #8]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d006      	beq.n	8013520 <tcp_enqueue_flags+0x100>
 8013512:	4b32      	ldr	r3, [pc, #200]	; (80135dc <tcp_enqueue_flags+0x1bc>)
 8013514:	f240 4243 	movw	r2, #1091	; 0x443
 8013518:	4936      	ldr	r1, [pc, #216]	; (80135f4 <tcp_enqueue_flags+0x1d4>)
 801351a:	4832      	ldr	r0, [pc, #200]	; (80135e4 <tcp_enqueue_flags+0x1c4>)
 801351c:	f003 ffe8 	bl	80174f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013524:	2b00      	cmp	r3, #0
 8013526:	d103      	bne.n	8013530 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	66da      	str	r2, [r3, #108]	; 0x6c
 801352e:	e00d      	b.n	801354c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013534:	61bb      	str	r3, [r7, #24]
 8013536:	e002      	b.n	801353e <tcp_enqueue_flags+0x11e>
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	61bb      	str	r3, [r7, #24]
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1f8      	bne.n	8013538 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013554:	78fb      	ldrb	r3, [r7, #3]
 8013556:	f003 0302 	and.w	r3, r3, #2
 801355a:	2b00      	cmp	r3, #0
 801355c:	d104      	bne.n	8013568 <tcp_enqueue_flags+0x148>
 801355e:	78fb      	ldrb	r3, [r7, #3]
 8013560:	f003 0301 	and.w	r3, r3, #1
 8013564:	2b00      	cmp	r3, #0
 8013566:	d004      	beq.n	8013572 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801356c:	1c5a      	adds	r2, r3, #1
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013572:	78fb      	ldrb	r3, [r7, #3]
 8013574:	f003 0301 	and.w	r3, r3, #1
 8013578:	2b00      	cmp	r3, #0
 801357a:	d006      	beq.n	801358a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	8b5b      	ldrh	r3, [r3, #26]
 8013580:	f043 0320 	orr.w	r3, r3, #32
 8013584:	b29a      	uxth	r2, r3
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	4618      	mov	r0, r3
 8013590:	f7fa fcca 	bl	800df28 <pbuf_clen>
 8013594:	4603      	mov	r3, r0
 8013596:	461a      	mov	r2, r3
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801359e:	4413      	add	r3, r2
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d00e      	beq.n	80135d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d10a      	bne.n	80135d0 <tcp_enqueue_flags+0x1b0>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d106      	bne.n	80135d0 <tcp_enqueue_flags+0x1b0>
 80135c2:	4b06      	ldr	r3, [pc, #24]	; (80135dc <tcp_enqueue_flags+0x1bc>)
 80135c4:	f240 4265 	movw	r2, #1125	; 0x465
 80135c8:	490b      	ldr	r1, [pc, #44]	; (80135f8 <tcp_enqueue_flags+0x1d8>)
 80135ca:	4806      	ldr	r0, [pc, #24]	; (80135e4 <tcp_enqueue_flags+0x1c4>)
 80135cc:	f003 ff90 	bl	80174f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3720      	adds	r7, #32
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	0801c734 	.word	0x0801c734
 80135e0:	0801cb58 	.word	0x0801cb58
 80135e4:	0801c788 	.word	0x0801c788
 80135e8:	0801cbb0 	.word	0x0801cbb0
 80135ec:	0801cbd0 	.word	0x0801cbd0
 80135f0:	0801cc0c 	.word	0x0801cc0c
 80135f4:	0801cc24 	.word	0x0801cc24
 80135f8:	0801cc50 	.word	0x0801cc50

080135fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80135fc:	b5b0      	push	{r4, r5, r7, lr}
 80135fe:	b08a      	sub	sp, #40	; 0x28
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d106      	bne.n	8013618 <tcp_output+0x1c>
 801360a:	4b8a      	ldr	r3, [pc, #552]	; (8013834 <tcp_output+0x238>)
 801360c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013610:	4989      	ldr	r1, [pc, #548]	; (8013838 <tcp_output+0x23c>)
 8013612:	488a      	ldr	r0, [pc, #552]	; (801383c <tcp_output+0x240>)
 8013614:	f003 ff6c 	bl	80174f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	7d1b      	ldrb	r3, [r3, #20]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d106      	bne.n	801362e <tcp_output+0x32>
 8013620:	4b84      	ldr	r3, [pc, #528]	; (8013834 <tcp_output+0x238>)
 8013622:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013626:	4986      	ldr	r1, [pc, #536]	; (8013840 <tcp_output+0x244>)
 8013628:	4884      	ldr	r0, [pc, #528]	; (801383c <tcp_output+0x240>)
 801362a:	f003 ff61 	bl	80174f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801362e:	4b85      	ldr	r3, [pc, #532]	; (8013844 <tcp_output+0x248>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	429a      	cmp	r2, r3
 8013636:	d101      	bne.n	801363c <tcp_output+0x40>
    return ERR_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	e1ce      	b.n	80139da <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013648:	4293      	cmp	r3, r2
 801364a:	bf28      	it	cs
 801364c:	4613      	movcs	r3, r2
 801364e:	b29b      	uxth	r3, r3
 8013650:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013656:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365a:	2b00      	cmp	r3, #0
 801365c:	d10b      	bne.n	8013676 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	8b5b      	ldrh	r3, [r3, #26]
 8013662:	f003 0302 	and.w	r3, r3, #2
 8013666:	2b00      	cmp	r3, #0
 8013668:	f000 81aa 	beq.w	80139c0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 fded 	bl	801424c <tcp_send_empty_ack>
 8013672:	4603      	mov	r3, r0
 8013674:	e1b1      	b.n	80139da <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013676:	6879      	ldr	r1, [r7, #4]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3304      	adds	r3, #4
 801367c:	461a      	mov	r2, r3
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f7ff f824 	bl	80126cc <tcp_route>
 8013684:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d102      	bne.n	8013692 <tcp_output+0x96>
    return ERR_RTE;
 801368c:	f06f 0303 	mvn.w	r3, #3
 8013690:	e1a3      	b.n	80139da <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d003      	beq.n	80136a0 <tcp_output+0xa4>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d111      	bne.n	80136c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d002      	beq.n	80136ac <tcp_output+0xb0>
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	3304      	adds	r3, #4
 80136aa:	e000      	b.n	80136ae <tcp_output+0xb2>
 80136ac:	2300      	movs	r3, #0
 80136ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d102      	bne.n	80136bc <tcp_output+0xc0>
      return ERR_RTE;
 80136b6:	f06f 0303 	mvn.w	r3, #3
 80136ba:	e18e      	b.n	80139da <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	681a      	ldr	r2, [r3, #0]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80136c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7f8 fead 	bl	800c42a <lwip_htonl>
 80136d0:	4602      	mov	r2, r0
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136da:	8912      	ldrh	r2, [r2, #8]
 80136dc:	4413      	add	r3, r2
 80136de:	69ba      	ldr	r2, [r7, #24]
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d227      	bcs.n	8013734 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80136ea:	461a      	mov	r2, r3
 80136ec:	69bb      	ldr	r3, [r7, #24]
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d114      	bne.n	801371c <tcp_output+0x120>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d110      	bne.n	801371c <tcp_output+0x120>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013700:	2b00      	cmp	r3, #0
 8013702:	d10b      	bne.n	801371c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2200      	movs	r2, #0
 8013708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2201      	movs	r2, #1
 8013710:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2200      	movs	r2, #0
 8013718:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8b5b      	ldrh	r3, [r3, #26]
 8013720:	f003 0302 	and.w	r3, r3, #2
 8013724:	2b00      	cmp	r3, #0
 8013726:	f000 814d 	beq.w	80139c4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 fd8e 	bl	801424c <tcp_send_empty_ack>
 8013730:	4603      	mov	r3, r0
 8013732:	e152      	b.n	80139da <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013740:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013742:	6a3b      	ldr	r3, [r7, #32]
 8013744:	2b00      	cmp	r3, #0
 8013746:	f000 811c 	beq.w	8013982 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801374a:	e002      	b.n	8013752 <tcp_output+0x156>
 801374c:	6a3b      	ldr	r3, [r7, #32]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	623b      	str	r3, [r7, #32]
 8013752:	6a3b      	ldr	r3, [r7, #32]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d1f8      	bne.n	801374c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801375a:	e112      	b.n	8013982 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	899b      	ldrh	r3, [r3, #12]
 8013762:	b29b      	uxth	r3, r3
 8013764:	4618      	mov	r0, r3
 8013766:	f7f8 fe4b 	bl	800c400 <lwip_htons>
 801376a:	4603      	mov	r3, r0
 801376c:	b2db      	uxtb	r3, r3
 801376e:	f003 0304 	and.w	r3, r3, #4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d006      	beq.n	8013784 <tcp_output+0x188>
 8013776:	4b2f      	ldr	r3, [pc, #188]	; (8013834 <tcp_output+0x238>)
 8013778:	f240 5236 	movw	r2, #1334	; 0x536
 801377c:	4932      	ldr	r1, [pc, #200]	; (8013848 <tcp_output+0x24c>)
 801377e:	482f      	ldr	r0, [pc, #188]	; (801383c <tcp_output+0x240>)
 8013780:	f003 feb6 	bl	80174f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013788:	2b00      	cmp	r3, #0
 801378a:	d01f      	beq.n	80137cc <tcp_output+0x1d0>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	8b5b      	ldrh	r3, [r3, #26]
 8013790:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013794:	2b00      	cmp	r3, #0
 8013796:	d119      	bne.n	80137cc <tcp_output+0x1d0>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00b      	beq.n	80137b8 <tcp_output+0x1bc>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d110      	bne.n	80137cc <tcp_output+0x1d0>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137ae:	891a      	ldrh	r2, [r3, #8]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d209      	bcs.n	80137cc <tcp_output+0x1d0>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d004      	beq.n	80137cc <tcp_output+0x1d0>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137c8:	2b08      	cmp	r3, #8
 80137ca:	d901      	bls.n	80137d0 <tcp_output+0x1d4>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e000      	b.n	80137d2 <tcp_output+0x1d6>
 80137d0:	2300      	movs	r3, #0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d106      	bne.n	80137e4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	8b5b      	ldrh	r3, [r3, #26]
 80137da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80137de:	2b00      	cmp	r3, #0
 80137e0:	f000 80e4 	beq.w	80139ac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	7d1b      	ldrb	r3, [r3, #20]
 80137e8:	2b02      	cmp	r3, #2
 80137ea:	d00d      	beq.n	8013808 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	899b      	ldrh	r3, [r3, #12]
 80137f2:	b29c      	uxth	r4, r3
 80137f4:	2010      	movs	r0, #16
 80137f6:	f7f8 fe03 	bl	800c400 <lwip_htons>
 80137fa:	4603      	mov	r3, r0
 80137fc:	461a      	mov	r2, r3
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	4322      	orrs	r2, r4
 8013804:	b292      	uxth	r2, r2
 8013806:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013808:	697a      	ldr	r2, [r7, #20]
 801380a:	6879      	ldr	r1, [r7, #4]
 801380c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801380e:	f000 f909 	bl	8013a24 <tcp_output_segment>
 8013812:	4603      	mov	r3, r0
 8013814:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d016      	beq.n	801384c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	8b5b      	ldrh	r3, [r3, #26]
 8013822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013826:	b29a      	uxth	r2, r3
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	835a      	strh	r2, [r3, #26]
      return err;
 801382c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013830:	e0d3      	b.n	80139da <tcp_output+0x3de>
 8013832:	bf00      	nop
 8013834:	0801c734 	.word	0x0801c734
 8013838:	0801cc78 	.word	0x0801cc78
 801383c:	0801c788 	.word	0x0801c788
 8013840:	0801cc90 	.word	0x0801cc90
 8013844:	20011be4 	.word	0x20011be4
 8013848:	0801ccb8 	.word	0x0801ccb8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	7d1b      	ldrb	r3, [r3, #20]
 8013858:	2b02      	cmp	r3, #2
 801385a:	d006      	beq.n	801386a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	8b5b      	ldrh	r3, [r3, #26]
 8013860:	f023 0303 	bic.w	r3, r3, #3
 8013864:	b29a      	uxth	r2, r3
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	4618      	mov	r0, r3
 8013872:	f7f8 fdda 	bl	800c42a <lwip_htonl>
 8013876:	4604      	mov	r4, r0
 8013878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387a:	891b      	ldrh	r3, [r3, #8]
 801387c:	461d      	mov	r5, r3
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	899b      	ldrh	r3, [r3, #12]
 8013884:	b29b      	uxth	r3, r3
 8013886:	4618      	mov	r0, r3
 8013888:	f7f8 fdba 	bl	800c400 <lwip_htons>
 801388c:	4603      	mov	r3, r0
 801388e:	b2db      	uxtb	r3, r3
 8013890:	f003 0303 	and.w	r3, r3, #3
 8013894:	2b00      	cmp	r3, #0
 8013896:	d001      	beq.n	801389c <tcp_output+0x2a0>
 8013898:	2301      	movs	r3, #1
 801389a:	e000      	b.n	801389e <tcp_output+0x2a2>
 801389c:	2300      	movs	r3, #0
 801389e:	442b      	add	r3, r5
 80138a0:	4423      	add	r3, r4
 80138a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	1ad3      	subs	r3, r2, r3
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	da02      	bge.n	80138b6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	68ba      	ldr	r2, [r7, #8]
 80138b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80138b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b8:	891b      	ldrh	r3, [r3, #8]
 80138ba:	461c      	mov	r4, r3
 80138bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	899b      	ldrh	r3, [r3, #12]
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7f8 fd9b 	bl	800c400 <lwip_htons>
 80138ca:	4603      	mov	r3, r0
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	f003 0303 	and.w	r3, r3, #3
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d001      	beq.n	80138da <tcp_output+0x2de>
 80138d6:	2301      	movs	r3, #1
 80138d8:	e000      	b.n	80138dc <tcp_output+0x2e0>
 80138da:	2300      	movs	r3, #0
 80138dc:	4423      	add	r3, r4
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d049      	beq.n	8013976 <tcp_output+0x37a>
      seg->next = NULL;
 80138e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e4:	2200      	movs	r2, #0
 80138e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d105      	bne.n	80138fc <tcp_output+0x300>
        pcb->unacked = seg;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138f4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80138f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f8:	623b      	str	r3, [r7, #32]
 80138fa:	e03f      	b.n	801397c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80138fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	4618      	mov	r0, r3
 8013904:	f7f8 fd91 	bl	800c42a <lwip_htonl>
 8013908:	4604      	mov	r4, r0
 801390a:	6a3b      	ldr	r3, [r7, #32]
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	4618      	mov	r0, r3
 8013912:	f7f8 fd8a 	bl	800c42a <lwip_htonl>
 8013916:	4603      	mov	r3, r0
 8013918:	1ae3      	subs	r3, r4, r3
 801391a:	2b00      	cmp	r3, #0
 801391c:	da24      	bge.n	8013968 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	3370      	adds	r3, #112	; 0x70
 8013922:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013924:	e002      	b.n	801392c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d011      	beq.n	8013958 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	4618      	mov	r0, r3
 801393e:	f7f8 fd74 	bl	800c42a <lwip_htonl>
 8013942:	4604      	mov	r4, r0
 8013944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	4618      	mov	r0, r3
 801394c:	f7f8 fd6d 	bl	800c42a <lwip_htonl>
 8013950:	4603      	mov	r3, r0
 8013952:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013954:	2b00      	cmp	r3, #0
 8013956:	dbe6      	blt.n	8013926 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801395e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013964:	601a      	str	r2, [r3, #0]
 8013966:	e009      	b.n	801397c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013968:	6a3b      	ldr	r3, [r7, #32]
 801396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801396c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	623b      	str	r3, [r7, #32]
 8013974:	e002      	b.n	801397c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013978:	f7fb ff19 	bl	800f7ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013980:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013984:	2b00      	cmp	r3, #0
 8013986:	d012      	beq.n	80139ae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	4618      	mov	r0, r3
 8013990:	f7f8 fd4b 	bl	800c42a <lwip_htonl>
 8013994:	4602      	mov	r2, r0
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801399e:	8912      	ldrh	r2, [r2, #8]
 80139a0:	4413      	add	r3, r2
  while (seg != NULL &&
 80139a2:	69ba      	ldr	r2, [r7, #24]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	f4bf aed9 	bcs.w	801375c <tcp_output+0x160>
 80139aa:	e000      	b.n	80139ae <tcp_output+0x3b2>
      break;
 80139ac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d108      	bne.n	80139c8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80139be:	e004      	b.n	80139ca <tcp_output+0x3ce>
    goto output_done;
 80139c0:	bf00      	nop
 80139c2:	e002      	b.n	80139ca <tcp_output+0x3ce>
    goto output_done;
 80139c4:	bf00      	nop
 80139c6:	e000      	b.n	80139ca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80139c8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8b5b      	ldrh	r3, [r3, #26]
 80139ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80139d8:	2300      	movs	r3, #0
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3728      	adds	r7, #40	; 0x28
 80139de:	46bd      	mov	sp, r7
 80139e0:	bdb0      	pop	{r4, r5, r7, pc}
 80139e2:	bf00      	nop

080139e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d106      	bne.n	8013a00 <tcp_output_segment_busy+0x1c>
 80139f2:	4b09      	ldr	r3, [pc, #36]	; (8013a18 <tcp_output_segment_busy+0x34>)
 80139f4:	f240 529a 	movw	r2, #1434	; 0x59a
 80139f8:	4908      	ldr	r1, [pc, #32]	; (8013a1c <tcp_output_segment_busy+0x38>)
 80139fa:	4809      	ldr	r0, [pc, #36]	; (8013a20 <tcp_output_segment_busy+0x3c>)
 80139fc:	f003 fd78 	bl	80174f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	7b9b      	ldrb	r3, [r3, #14]
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d001      	beq.n	8013a0e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e000      	b.n	8013a10 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013a0e:	2300      	movs	r3, #0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	0801c734 	.word	0x0801c734
 8013a1c:	0801ccd0 	.word	0x0801ccd0
 8013a20:	0801c788 	.word	0x0801c788

08013a24 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013a24:	b5b0      	push	{r4, r5, r7, lr}
 8013a26:	b08c      	sub	sp, #48	; 0x30
 8013a28:	af04      	add	r7, sp, #16
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d106      	bne.n	8013a44 <tcp_output_segment+0x20>
 8013a36:	4b6c      	ldr	r3, [pc, #432]	; (8013be8 <tcp_output_segment+0x1c4>)
 8013a38:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013a3c:	496b      	ldr	r1, [pc, #428]	; (8013bec <tcp_output_segment+0x1c8>)
 8013a3e:	486c      	ldr	r0, [pc, #432]	; (8013bf0 <tcp_output_segment+0x1cc>)
 8013a40:	f003 fd56 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d106      	bne.n	8013a58 <tcp_output_segment+0x34>
 8013a4a:	4b67      	ldr	r3, [pc, #412]	; (8013be8 <tcp_output_segment+0x1c4>)
 8013a4c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013a50:	4968      	ldr	r1, [pc, #416]	; (8013bf4 <tcp_output_segment+0x1d0>)
 8013a52:	4867      	ldr	r0, [pc, #412]	; (8013bf0 <tcp_output_segment+0x1cc>)
 8013a54:	f003 fd4c 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d106      	bne.n	8013a6c <tcp_output_segment+0x48>
 8013a5e:	4b62      	ldr	r3, [pc, #392]	; (8013be8 <tcp_output_segment+0x1c4>)
 8013a60:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013a64:	4964      	ldr	r1, [pc, #400]	; (8013bf8 <tcp_output_segment+0x1d4>)
 8013a66:	4862      	ldr	r0, [pc, #392]	; (8013bf0 <tcp_output_segment+0x1cc>)
 8013a68:	f003 fd42 	bl	80174f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f7ff ffb9 	bl	80139e4 <tcp_output_segment_busy>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d001      	beq.n	8013a7c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	e0b1      	b.n	8013be0 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	68dc      	ldr	r4, [r3, #12]
 8013a84:	4610      	mov	r0, r2
 8013a86:	f7f8 fcd0 	bl	800c42a <lwip_htonl>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	68dc      	ldr	r4, [r3, #12]
 8013a96:	4610      	mov	r0, r2
 8013a98:	f7f8 fcb2 	bl	800c400 <lwip_htons>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa4:	68ba      	ldr	r2, [r7, #8]
 8013aa6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013aa8:	441a      	add	r2, r3
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	3314      	adds	r3, #20
 8013ab4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	7a9b      	ldrb	r3, [r3, #10]
 8013aba:	f003 0301 	and.w	r3, r3, #1
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d015      	beq.n	8013aee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	3304      	adds	r3, #4
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	6879      	ldr	r1, [r7, #4]
 8013aca:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013ace:	f7fc fa33 	bl	800ff38 <tcp_eff_send_mss_netif>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013ad6:	8b7b      	ldrh	r3, [r7, #26]
 8013ad8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7f8 fca4 	bl	800c42a <lwip_htonl>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	3304      	adds	r3, #4
 8013aec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	da02      	bge.n	8013afe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	2200      	movs	r2, #0
 8013afc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10c      	bne.n	8013b20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013b06:	4b3d      	ldr	r3, [pc, #244]	; (8013bfc <tcp_output_segment+0x1d8>)
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7f8 fc88 	bl	800c42a <lwip_htonl>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	68da      	ldr	r2, [r3, #12]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	1ad3      	subs	r3, r2, r3
 8013b2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	8959      	ldrh	r1, [r3, #10]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	8b3a      	ldrh	r2, [r7, #24]
 8013b3a:	1a8a      	subs	r2, r1, r2
 8013b3c:	b292      	uxth	r2, r2
 8013b3e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	8919      	ldrh	r1, [r3, #8]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	8b3a      	ldrh	r2, [r7, #24]
 8013b4c:	1a8a      	subs	r2, r1, r2
 8013b4e:	b292      	uxth	r2, r2
 8013b50:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	68fa      	ldr	r2, [r7, #12]
 8013b58:	68d2      	ldr	r2, [r2, #12]
 8013b5a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	2200      	movs	r2, #0
 8013b62:	741a      	strb	r2, [r3, #16]
 8013b64:	2200      	movs	r2, #0
 8013b66:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	f103 0214 	add.w	r2, r3, #20
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	7a9b      	ldrb	r3, [r3, #10]
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	f003 0304 	and.w	r3, r3, #4
 8013b7a:	4413      	add	r3, r2
 8013b7c:	69fa      	ldr	r2, [r7, #28]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d006      	beq.n	8013b90 <tcp_output_segment+0x16c>
 8013b82:	4b19      	ldr	r3, [pc, #100]	; (8013be8 <tcp_output_segment+0x1c4>)
 8013b84:	f240 621c 	movw	r2, #1564	; 0x61c
 8013b88:	491d      	ldr	r1, [pc, #116]	; (8013c00 <tcp_output_segment+0x1dc>)
 8013b8a:	4819      	ldr	r0, [pc, #100]	; (8013bf0 <tcp_output_segment+0x1cc>)
 8013b8c:	f003 fcb0 	bl	80174f0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013b98:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013b9a:	68bd      	ldr	r5, [r7, #8]
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013ba0:	68fa      	ldr	r2, [r7, #12]
 8013ba2:	68d4      	ldr	r4, [r2, #12]
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	462b      	mov	r3, r5
 8013ba8:	460a      	mov	r2, r1
 8013baa:	2106      	movs	r1, #6
 8013bac:	f7f8 fd5a 	bl	800c664 <ip_chksum_pseudo>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6858      	ldr	r0, [r3, #4]
 8013bb8:	68b9      	ldr	r1, [r7, #8]
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	1d1c      	adds	r4, r3, #4
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	7add      	ldrb	r5, [r3, #11]
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	7a9b      	ldrb	r3, [r3, #10]
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	9202      	str	r2, [sp, #8]
 8013bca:	2206      	movs	r2, #6
 8013bcc:	9201      	str	r2, [sp, #4]
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	462b      	mov	r3, r5
 8013bd2:	4622      	mov	r2, r4
 8013bd4:	f002 f8b2 	bl	8015d3c <ip4_output_if>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3720      	adds	r7, #32
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bdb0      	pop	{r4, r5, r7, pc}
 8013be8:	0801c734 	.word	0x0801c734
 8013bec:	0801ccf8 	.word	0x0801ccf8
 8013bf0:	0801c788 	.word	0x0801c788
 8013bf4:	0801cd18 	.word	0x0801cd18
 8013bf8:	0801cd38 	.word	0x0801cd38
 8013bfc:	20011b98 	.word	0x20011b98
 8013c00:	0801cd5c 	.word	0x0801cd5c

08013c04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d106      	bne.n	8013c20 <tcp_rexmit_rto_prepare+0x1c>
 8013c12:	4b31      	ldr	r3, [pc, #196]	; (8013cd8 <tcp_rexmit_rto_prepare+0xd4>)
 8013c14:	f240 6263 	movw	r2, #1635	; 0x663
 8013c18:	4930      	ldr	r1, [pc, #192]	; (8013cdc <tcp_rexmit_rto_prepare+0xd8>)
 8013c1a:	4831      	ldr	r0, [pc, #196]	; (8013ce0 <tcp_rexmit_rto_prepare+0xdc>)
 8013c1c:	f003 fc68 	bl	80174f0 <iprintf>

  if (pcb->unacked == NULL) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d102      	bne.n	8013c2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013c28:	f06f 0305 	mvn.w	r3, #5
 8013c2c:	e050      	b.n	8013cd0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c32:	60fb      	str	r3, [r7, #12]
 8013c34:	e00b      	b.n	8013c4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013c36:	68f8      	ldr	r0, [r7, #12]
 8013c38:	f7ff fed4 	bl	80139e4 <tcp_output_segment_busy>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d002      	beq.n	8013c48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013c42:	f06f 0305 	mvn.w	r3, #5
 8013c46:	e043      	b.n	8013cd0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	60fb      	str	r3, [r7, #12]
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d1ef      	bne.n	8013c36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f7ff fec4 	bl	80139e4 <tcp_output_segment_busy>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d002      	beq.n	8013c68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013c62:	f06f 0305 	mvn.w	r3, #5
 8013c66:	e033      	b.n	8013cd0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	8b5b      	ldrh	r3, [r3, #26]
 8013c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7f8 fbc9 	bl	800c42a <lwip_htonl>
 8013c98:	4604      	mov	r4, r0
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	891b      	ldrh	r3, [r3, #8]
 8013c9e:	461d      	mov	r5, r3
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	899b      	ldrh	r3, [r3, #12]
 8013ca6:	b29b      	uxth	r3, r3
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7f8 fba9 	bl	800c400 <lwip_htons>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	f003 0303 	and.w	r3, r3, #3
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d001      	beq.n	8013cbe <tcp_rexmit_rto_prepare+0xba>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	e000      	b.n	8013cc0 <tcp_rexmit_rto_prepare+0xbc>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	442b      	add	r3, r5
 8013cc2:	18e2      	adds	r2, r4, r3
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013cce:	2300      	movs	r3, #0
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3710      	adds	r7, #16
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8013cd8:	0801c734 	.word	0x0801c734
 8013cdc:	0801cd70 	.word	0x0801cd70
 8013ce0:	0801c788 	.word	0x0801c788

08013ce4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d106      	bne.n	8013d00 <tcp_rexmit_rto_commit+0x1c>
 8013cf2:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <tcp_rexmit_rto_commit+0x44>)
 8013cf4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013cf8:	490c      	ldr	r1, [pc, #48]	; (8013d2c <tcp_rexmit_rto_commit+0x48>)
 8013cfa:	480d      	ldr	r0, [pc, #52]	; (8013d30 <tcp_rexmit_rto_commit+0x4c>)
 8013cfc:	f003 fbf8 	bl	80174f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d06:	2bff      	cmp	r3, #255	; 0xff
 8013d08:	d007      	beq.n	8013d1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d10:	3301      	adds	r3, #1
 8013d12:	b2da      	uxtb	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff fc6e 	bl	80135fc <tcp_output>
}
 8013d20:	bf00      	nop
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	0801c734 	.word	0x0801c734
 8013d2c:	0801cd94 	.word	0x0801cd94
 8013d30:	0801c788 	.word	0x0801c788

08013d34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <tcp_rexmit_rto+0x1c>
 8013d42:	4b0a      	ldr	r3, [pc, #40]	; (8013d6c <tcp_rexmit_rto+0x38>)
 8013d44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013d48:	4909      	ldr	r1, [pc, #36]	; (8013d70 <tcp_rexmit_rto+0x3c>)
 8013d4a:	480a      	ldr	r0, [pc, #40]	; (8013d74 <tcp_rexmit_rto+0x40>)
 8013d4c:	f003 fbd0 	bl	80174f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ff ff57 	bl	8013c04 <tcp_rexmit_rto_prepare>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7ff ffc1 	bl	8013ce4 <tcp_rexmit_rto_commit>
  }
}
 8013d62:	bf00      	nop
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	0801c734 	.word	0x0801c734
 8013d70:	0801cdb8 	.word	0x0801cdb8
 8013d74:	0801c788 	.word	0x0801c788

08013d78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013d78:	b590      	push	{r4, r7, lr}
 8013d7a:	b085      	sub	sp, #20
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d106      	bne.n	8013d94 <tcp_rexmit+0x1c>
 8013d86:	4b2f      	ldr	r3, [pc, #188]	; (8013e44 <tcp_rexmit+0xcc>)
 8013d88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013d8c:	492e      	ldr	r1, [pc, #184]	; (8013e48 <tcp_rexmit+0xd0>)
 8013d8e:	482f      	ldr	r0, [pc, #188]	; (8013e4c <tcp_rexmit+0xd4>)
 8013d90:	f003 fbae 	bl	80174f0 <iprintf>

  if (pcb->unacked == NULL) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d102      	bne.n	8013da2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013d9c:	f06f 0305 	mvn.w	r3, #5
 8013da0:	e04c      	b.n	8013e3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013da6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013da8:	68b8      	ldr	r0, [r7, #8]
 8013daa:	f7ff fe1b 	bl	80139e4 <tcp_output_segment_busy>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d002      	beq.n	8013dba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013db4:	f06f 0305 	mvn.w	r3, #5
 8013db8:	e040      	b.n	8013e3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	336c      	adds	r3, #108	; 0x6c
 8013dc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013dc8:	e002      	b.n	8013dd0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d011      	beq.n	8013dfc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	68db      	ldr	r3, [r3, #12]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7f8 fb22 	bl	800c42a <lwip_htonl>
 8013de6:	4604      	mov	r4, r0
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	68db      	ldr	r3, [r3, #12]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7f8 fb1b 	bl	800c42a <lwip_htonl>
 8013df4:	4603      	mov	r3, r0
 8013df6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	dbe6      	blt.n	8013dca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	68ba      	ldr	r2, [r7, #8]
 8013e08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d103      	bne.n	8013e1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2200      	movs	r2, #0
 8013e16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e20:	2bff      	cmp	r3, #255	; 0xff
 8013e22:	d007      	beq.n	8013e34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	b2da      	uxtb	r2, r3
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2200      	movs	r2, #0
 8013e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013e3a:	2300      	movs	r3, #0
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3714      	adds	r7, #20
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd90      	pop	{r4, r7, pc}
 8013e44:	0801c734 	.word	0x0801c734
 8013e48:	0801cdd4 	.word	0x0801cdd4
 8013e4c:	0801c788 	.word	0x0801c788

08013e50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <tcp_rexmit_fast+0x1c>
 8013e5e:	4b2a      	ldr	r3, [pc, #168]	; (8013f08 <tcp_rexmit_fast+0xb8>)
 8013e60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013e64:	4929      	ldr	r1, [pc, #164]	; (8013f0c <tcp_rexmit_fast+0xbc>)
 8013e66:	482a      	ldr	r0, [pc, #168]	; (8013f10 <tcp_rexmit_fast+0xc0>)
 8013e68:	f003 fb42 	bl	80174f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d045      	beq.n	8013f00 <tcp_rexmit_fast+0xb0>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	8b5b      	ldrh	r3, [r3, #26]
 8013e78:	f003 0304 	and.w	r3, r3, #4
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d13f      	bne.n	8013f00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7ff ff79 	bl	8013d78 <tcp_rexmit>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d139      	bne.n	8013f00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	bf28      	it	cs
 8013e9c:	4613      	movcs	r3, r2
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	da00      	bge.n	8013ea6 <tcp_rexmit_fast+0x56>
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	105b      	asrs	r3, r3, #1
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d206      	bcs.n	8013ed0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ec6:	005b      	lsls	r3, r3, #1
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013eda:	4619      	mov	r1, r3
 8013edc:	0049      	lsls	r1, r1, #1
 8013ede:	440b      	add	r3, r1
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	4413      	add	r3, r2
 8013ee4:	b29a      	uxth	r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	8b5b      	ldrh	r3, [r3, #26]
 8013ef0:	f043 0304 	orr.w	r3, r3, #4
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2200      	movs	r2, #0
 8013efe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013f00:	bf00      	nop
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	0801c734 	.word	0x0801c734
 8013f0c:	0801cdec 	.word	0x0801cdec
 8013f10:	0801c788 	.word	0x0801c788

08013f14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b086      	sub	sp, #24
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	607b      	str	r3, [r7, #4]
 8013f1e:	460b      	mov	r3, r1
 8013f20:	817b      	strh	r3, [r7, #10]
 8013f22:	4613      	mov	r3, r2
 8013f24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013f26:	897a      	ldrh	r2, [r7, #10]
 8013f28:	893b      	ldrh	r3, [r7, #8]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	3314      	adds	r3, #20
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f36:	4619      	mov	r1, r3
 8013f38:	2022      	movs	r0, #34	; 0x22
 8013f3a:	f7f9 fc83 	bl	800d844 <pbuf_alloc>
 8013f3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d04d      	beq.n	8013fe2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013f46:	897b      	ldrh	r3, [r7, #10]
 8013f48:	3313      	adds	r3, #19
 8013f4a:	697a      	ldr	r2, [r7, #20]
 8013f4c:	8952      	ldrh	r2, [r2, #10]
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	db06      	blt.n	8013f60 <tcp_output_alloc_header_common+0x4c>
 8013f52:	4b26      	ldr	r3, [pc, #152]	; (8013fec <tcp_output_alloc_header_common+0xd8>)
 8013f54:	f240 7223 	movw	r2, #1827	; 0x723
 8013f58:	4925      	ldr	r1, [pc, #148]	; (8013ff0 <tcp_output_alloc_header_common+0xdc>)
 8013f5a:	4826      	ldr	r0, [pc, #152]	; (8013ff4 <tcp_output_alloc_header_common+0xe0>)
 8013f5c:	f003 fac8 	bl	80174f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013f66:	8c3b      	ldrh	r3, [r7, #32]
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7f8 fa49 	bl	800c400 <lwip_htons>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	461a      	mov	r2, r3
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7f8 fa41 	bl	800c400 <lwip_htons>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	461a      	mov	r2, r3
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f7f8 fa4c 	bl	800c42a <lwip_htonl>
 8013f92:	4602      	mov	r2, r0
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013f98:	897b      	ldrh	r3, [r7, #10]
 8013f9a:	089b      	lsrs	r3, r3, #2
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	3305      	adds	r3, #5
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	031b      	lsls	r3, r3, #12
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	4313      	orrs	r3, r2
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7f8 fa25 	bl	800c400 <lwip_htons>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	461a      	mov	r2, r3
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013fbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7f8 fa1d 	bl	800c400 <lwip_htons>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	461a      	mov	r2, r3
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	741a      	strb	r2, [r3, #16]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	749a      	strb	r2, [r3, #18]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013fe2:	697b      	ldr	r3, [r7, #20]
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3718      	adds	r7, #24
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}
 8013fec:	0801c734 	.word	0x0801c734
 8013ff0:	0801ce0c 	.word	0x0801ce0c
 8013ff4:	0801c788 	.word	0x0801c788

08013ff8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013ff8:	b5b0      	push	{r4, r5, r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af04      	add	r7, sp, #16
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	607b      	str	r3, [r7, #4]
 8014002:	460b      	mov	r3, r1
 8014004:	817b      	strh	r3, [r7, #10]
 8014006:	4613      	mov	r3, r2
 8014008:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d106      	bne.n	801401e <tcp_output_alloc_header+0x26>
 8014010:	4b15      	ldr	r3, [pc, #84]	; (8014068 <tcp_output_alloc_header+0x70>)
 8014012:	f240 7242 	movw	r2, #1858	; 0x742
 8014016:	4915      	ldr	r1, [pc, #84]	; (801406c <tcp_output_alloc_header+0x74>)
 8014018:	4815      	ldr	r0, [pc, #84]	; (8014070 <tcp_output_alloc_header+0x78>)
 801401a:	f003 fa69 	bl	80174f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	8adb      	ldrh	r3, [r3, #22]
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	8b12      	ldrh	r2, [r2, #24]
 801402a:	68f9      	ldr	r1, [r7, #12]
 801402c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801402e:	893d      	ldrh	r5, [r7, #8]
 8014030:	897c      	ldrh	r4, [r7, #10]
 8014032:	9103      	str	r1, [sp, #12]
 8014034:	2110      	movs	r1, #16
 8014036:	9102      	str	r1, [sp, #8]
 8014038:	9201      	str	r2, [sp, #4]
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	462a      	mov	r2, r5
 8014040:	4621      	mov	r1, r4
 8014042:	f7ff ff67 	bl	8013f14 <tcp_output_alloc_header_common>
 8014046:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d006      	beq.n	801405c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014052:	68fa      	ldr	r2, [r7, #12]
 8014054:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014056:	441a      	add	r2, r3
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801405c:	697b      	ldr	r3, [r7, #20]
}
 801405e:	4618      	mov	r0, r3
 8014060:	3718      	adds	r7, #24
 8014062:	46bd      	mov	sp, r7
 8014064:	bdb0      	pop	{r4, r5, r7, pc}
 8014066:	bf00      	nop
 8014068:	0801c734 	.word	0x0801c734
 801406c:	0801ce3c 	.word	0x0801ce3c
 8014070:	0801c788 	.word	0x0801c788

08014074 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b088      	sub	sp, #32
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	4611      	mov	r1, r2
 8014080:	461a      	mov	r2, r3
 8014082:	460b      	mov	r3, r1
 8014084:	71fb      	strb	r3, [r7, #7]
 8014086:	4613      	mov	r3, r2
 8014088:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801408a:	2300      	movs	r3, #0
 801408c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d106      	bne.n	80140a2 <tcp_output_fill_options+0x2e>
 8014094:	4b13      	ldr	r3, [pc, #76]	; (80140e4 <tcp_output_fill_options+0x70>)
 8014096:	f240 7256 	movw	r2, #1878	; 0x756
 801409a:	4913      	ldr	r1, [pc, #76]	; (80140e8 <tcp_output_fill_options+0x74>)
 801409c:	4813      	ldr	r0, [pc, #76]	; (80140ec <tcp_output_fill_options+0x78>)
 801409e:	f003 fa27 	bl	80174f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80140a8:	69bb      	ldr	r3, [r7, #24]
 80140aa:	3314      	adds	r3, #20
 80140ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	f103 0214 	add.w	r2, r3, #20
 80140b4:	8bfb      	ldrh	r3, [r7, #30]
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	4619      	mov	r1, r3
 80140ba:	79fb      	ldrb	r3, [r7, #7]
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	f003 0304 	and.w	r3, r3, #4
 80140c2:	440b      	add	r3, r1
 80140c4:	4413      	add	r3, r2
 80140c6:	697a      	ldr	r2, [r7, #20]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d006      	beq.n	80140da <tcp_output_fill_options+0x66>
 80140cc:	4b05      	ldr	r3, [pc, #20]	; (80140e4 <tcp_output_fill_options+0x70>)
 80140ce:	f240 7275 	movw	r2, #1909	; 0x775
 80140d2:	4907      	ldr	r1, [pc, #28]	; (80140f0 <tcp_output_fill_options+0x7c>)
 80140d4:	4805      	ldr	r0, [pc, #20]	; (80140ec <tcp_output_fill_options+0x78>)
 80140d6:	f003 fa0b 	bl	80174f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80140da:	bf00      	nop
 80140dc:	3720      	adds	r7, #32
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	0801c734 	.word	0x0801c734
 80140e8:	0801ce64 	.word	0x0801ce64
 80140ec:	0801c788 	.word	0x0801c788
 80140f0:	0801cd5c 	.word	0x0801cd5c

080140f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b08c      	sub	sp, #48	; 0x30
 80140f8:	af04      	add	r7, sp, #16
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	607a      	str	r2, [r7, #4]
 8014100:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d106      	bne.n	8014116 <tcp_output_control_segment+0x22>
 8014108:	4b24      	ldr	r3, [pc, #144]	; (801419c <tcp_output_control_segment+0xa8>)
 801410a:	f240 7287 	movw	r2, #1927	; 0x787
 801410e:	4924      	ldr	r1, [pc, #144]	; (80141a0 <tcp_output_control_segment+0xac>)
 8014110:	4824      	ldr	r0, [pc, #144]	; (80141a4 <tcp_output_control_segment+0xb0>)
 8014112:	f003 f9ed 	bl	80174f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014116:	683a      	ldr	r2, [r7, #0]
 8014118:	6879      	ldr	r1, [r7, #4]
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	f7fe fad6 	bl	80126cc <tcp_route>
 8014120:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d102      	bne.n	801412e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014128:	23fc      	movs	r3, #252	; 0xfc
 801412a:	77fb      	strb	r3, [r7, #31]
 801412c:	e02c      	b.n	8014188 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	685b      	ldr	r3, [r3, #4]
 8014132:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	891a      	ldrh	r2, [r3, #8]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	9300      	str	r3, [sp, #0]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2106      	movs	r1, #6
 8014140:	68b8      	ldr	r0, [r7, #8]
 8014142:	f7f8 fa8f 	bl	800c664 <ip_chksum_pseudo>
 8014146:	4603      	mov	r3, r0
 8014148:	461a      	mov	r2, r3
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d006      	beq.n	8014162 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	7adb      	ldrb	r3, [r3, #11]
 8014158:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	7a9b      	ldrb	r3, [r3, #10]
 801415e:	777b      	strb	r3, [r7, #29]
 8014160:	e003      	b.n	801416a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014162:	23ff      	movs	r3, #255	; 0xff
 8014164:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014166:	2300      	movs	r3, #0
 8014168:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801416a:	7fba      	ldrb	r2, [r7, #30]
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	9302      	str	r3, [sp, #8]
 8014170:	2306      	movs	r3, #6
 8014172:	9301      	str	r3, [sp, #4]
 8014174:	7f7b      	ldrb	r3, [r7, #29]
 8014176:	9300      	str	r3, [sp, #0]
 8014178:	4613      	mov	r3, r2
 801417a:	683a      	ldr	r2, [r7, #0]
 801417c:	6879      	ldr	r1, [r7, #4]
 801417e:	68b8      	ldr	r0, [r7, #8]
 8014180:	f001 fddc 	bl	8015d3c <ip4_output_if>
 8014184:	4603      	mov	r3, r0
 8014186:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014188:	68b8      	ldr	r0, [r7, #8]
 801418a:	f7f9 fe3f 	bl	800de0c <pbuf_free>
  return err;
 801418e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014192:	4618      	mov	r0, r3
 8014194:	3720      	adds	r7, #32
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	0801c734 	.word	0x0801c734
 80141a0:	0801ce8c 	.word	0x0801ce8c
 80141a4:	0801c788 	.word	0x0801c788

080141a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80141a8:	b590      	push	{r4, r7, lr}
 80141aa:	b08b      	sub	sp, #44	; 0x2c
 80141ac:	af04      	add	r7, sp, #16
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
 80141b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d106      	bne.n	80141ca <tcp_rst+0x22>
 80141bc:	4b1f      	ldr	r3, [pc, #124]	; (801423c <tcp_rst+0x94>)
 80141be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80141c2:	491f      	ldr	r1, [pc, #124]	; (8014240 <tcp_rst+0x98>)
 80141c4:	481f      	ldr	r0, [pc, #124]	; (8014244 <tcp_rst+0x9c>)
 80141c6:	f003 f993 	bl	80174f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80141ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d106      	bne.n	80141de <tcp_rst+0x36>
 80141d0:	4b1a      	ldr	r3, [pc, #104]	; (801423c <tcp_rst+0x94>)
 80141d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80141d6:	491c      	ldr	r1, [pc, #112]	; (8014248 <tcp_rst+0xa0>)
 80141d8:	481a      	ldr	r0, [pc, #104]	; (8014244 <tcp_rst+0x9c>)
 80141da:	f003 f989 	bl	80174f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80141de:	2300      	movs	r3, #0
 80141e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80141e2:	f246 0308 	movw	r3, #24584	; 0x6008
 80141e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80141e8:	7dfb      	ldrb	r3, [r7, #23]
 80141ea:	b29c      	uxth	r4, r3
 80141ec:	68b8      	ldr	r0, [r7, #8]
 80141ee:	f7f8 f91c 	bl	800c42a <lwip_htonl>
 80141f2:	4602      	mov	r2, r0
 80141f4:	8abb      	ldrh	r3, [r7, #20]
 80141f6:	9303      	str	r3, [sp, #12]
 80141f8:	2314      	movs	r3, #20
 80141fa:	9302      	str	r3, [sp, #8]
 80141fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80141fe:	9301      	str	r3, [sp, #4]
 8014200:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	4613      	mov	r3, r2
 8014206:	2200      	movs	r2, #0
 8014208:	4621      	mov	r1, r4
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff fe82 	bl	8013f14 <tcp_output_alloc_header_common>
 8014210:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00c      	beq.n	8014232 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014218:	7dfb      	ldrb	r3, [r7, #23]
 801421a:	2200      	movs	r2, #0
 801421c:	6939      	ldr	r1, [r7, #16]
 801421e:	68f8      	ldr	r0, [r7, #12]
 8014220:	f7ff ff28 	bl	8014074 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014226:	683a      	ldr	r2, [r7, #0]
 8014228:	6939      	ldr	r1, [r7, #16]
 801422a:	68f8      	ldr	r0, [r7, #12]
 801422c:	f7ff ff62 	bl	80140f4 <tcp_output_control_segment>
 8014230:	e000      	b.n	8014234 <tcp_rst+0x8c>
    return;
 8014232:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014234:	371c      	adds	r7, #28
 8014236:	46bd      	mov	sp, r7
 8014238:	bd90      	pop	{r4, r7, pc}
 801423a:	bf00      	nop
 801423c:	0801c734 	.word	0x0801c734
 8014240:	0801ceb8 	.word	0x0801ceb8
 8014244:	0801c788 	.word	0x0801c788
 8014248:	0801ced4 	.word	0x0801ced4

0801424c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801424c:	b590      	push	{r4, r7, lr}
 801424e:	b087      	sub	sp, #28
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014254:	2300      	movs	r3, #0
 8014256:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014258:	2300      	movs	r3, #0
 801425a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d106      	bne.n	8014270 <tcp_send_empty_ack+0x24>
 8014262:	4b28      	ldr	r3, [pc, #160]	; (8014304 <tcp_send_empty_ack+0xb8>)
 8014264:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014268:	4927      	ldr	r1, [pc, #156]	; (8014308 <tcp_send_empty_ack+0xbc>)
 801426a:	4828      	ldr	r0, [pc, #160]	; (801430c <tcp_send_empty_ack+0xc0>)
 801426c:	f003 f940 	bl	80174f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014270:	7dfb      	ldrb	r3, [r7, #23]
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	b2db      	uxtb	r3, r3
 8014276:	f003 0304 	and.w	r3, r3, #4
 801427a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801427c:	7d7b      	ldrb	r3, [r7, #21]
 801427e:	b29c      	uxth	r4, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014284:	4618      	mov	r0, r3
 8014286:	f7f8 f8d0 	bl	800c42a <lwip_htonl>
 801428a:	4603      	mov	r3, r0
 801428c:	2200      	movs	r2, #0
 801428e:	4621      	mov	r1, r4
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f7ff feb1 	bl	8013ff8 <tcp_output_alloc_header>
 8014296:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d109      	bne.n	80142b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	8b5b      	ldrh	r3, [r3, #26]
 80142a2:	f043 0303 	orr.w	r3, r3, #3
 80142a6:	b29a      	uxth	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80142ac:	f06f 0301 	mvn.w	r3, #1
 80142b0:	e023      	b.n	80142fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80142b2:	7dbb      	ldrb	r3, [r7, #22]
 80142b4:	7dfa      	ldrb	r2, [r7, #23]
 80142b6:	6939      	ldr	r1, [r7, #16]
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f7ff fedb 	bl	8014074 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	3304      	adds	r3, #4
 80142c4:	6939      	ldr	r1, [r7, #16]
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f7ff ff14 	bl	80140f4 <tcp_output_control_segment>
 80142cc:	4603      	mov	r3, r0
 80142ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80142d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d007      	beq.n	80142e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8b5b      	ldrh	r3, [r3, #26]
 80142dc:	f043 0303 	orr.w	r3, r3, #3
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	835a      	strh	r2, [r3, #26]
 80142e6:	e006      	b.n	80142f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	8b5b      	ldrh	r3, [r3, #26]
 80142ec:	f023 0303 	bic.w	r3, r3, #3
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80142f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	371c      	adds	r7, #28
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd90      	pop	{r4, r7, pc}
 8014302:	bf00      	nop
 8014304:	0801c734 	.word	0x0801c734
 8014308:	0801cef0 	.word	0x0801cef0
 801430c:	0801c788 	.word	0x0801c788

08014310 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014310:	b590      	push	{r4, r7, lr}
 8014312:	b087      	sub	sp, #28
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014318:	2300      	movs	r3, #0
 801431a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d106      	bne.n	8014330 <tcp_keepalive+0x20>
 8014322:	4b18      	ldr	r3, [pc, #96]	; (8014384 <tcp_keepalive+0x74>)
 8014324:	f640 0224 	movw	r2, #2084	; 0x824
 8014328:	4917      	ldr	r1, [pc, #92]	; (8014388 <tcp_keepalive+0x78>)
 801432a:	4818      	ldr	r0, [pc, #96]	; (801438c <tcp_keepalive+0x7c>)
 801432c:	f003 f8e0 	bl	80174f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014330:	7dfb      	ldrb	r3, [r7, #23]
 8014332:	b29c      	uxth	r4, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014338:	3b01      	subs	r3, #1
 801433a:	4618      	mov	r0, r3
 801433c:	f7f8 f875 	bl	800c42a <lwip_htonl>
 8014340:	4603      	mov	r3, r0
 8014342:	2200      	movs	r2, #0
 8014344:	4621      	mov	r1, r4
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f7ff fe56 	bl	8013ff8 <tcp_output_alloc_header>
 801434c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d102      	bne.n	801435a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014358:	e010      	b.n	801437c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801435a:	7dfb      	ldrb	r3, [r7, #23]
 801435c:	2200      	movs	r2, #0
 801435e:	6939      	ldr	r1, [r7, #16]
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7ff fe87 	bl	8014074 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	3304      	adds	r3, #4
 801436c:	6939      	ldr	r1, [r7, #16]
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f7ff fec0 	bl	80140f4 <tcp_output_control_segment>
 8014374:	4603      	mov	r3, r0
 8014376:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801437c:	4618      	mov	r0, r3
 801437e:	371c      	adds	r7, #28
 8014380:	46bd      	mov	sp, r7
 8014382:	bd90      	pop	{r4, r7, pc}
 8014384:	0801c734 	.word	0x0801c734
 8014388:	0801cf10 	.word	0x0801cf10
 801438c:	0801c788 	.word	0x0801c788

08014390 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014390:	b590      	push	{r4, r7, lr}
 8014392:	b08b      	sub	sp, #44	; 0x2c
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014398:	2300      	movs	r3, #0
 801439a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d106      	bne.n	80143b2 <tcp_zero_window_probe+0x22>
 80143a4:	4b4c      	ldr	r3, [pc, #304]	; (80144d8 <tcp_zero_window_probe+0x148>)
 80143a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80143aa:	494c      	ldr	r1, [pc, #304]	; (80144dc <tcp_zero_window_probe+0x14c>)
 80143ac:	484c      	ldr	r0, [pc, #304]	; (80144e0 <tcp_zero_window_probe+0x150>)
 80143ae:	f003 f89f 	bl	80174f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80143b8:	6a3b      	ldr	r3, [r7, #32]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80143be:	2300      	movs	r3, #0
 80143c0:	e086      	b.n	80144d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80143c8:	2bff      	cmp	r3, #255	; 0xff
 80143ca:	d007      	beq.n	80143dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80143d2:	3301      	adds	r3, #1
 80143d4:	b2da      	uxtb	r2, r3
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80143dc:	6a3b      	ldr	r3, [r7, #32]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	899b      	ldrh	r3, [r3, #12]
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7f8 f80b 	bl	800c400 <lwip_htons>
 80143ea:	4603      	mov	r3, r0
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	f003 0301 	and.w	r3, r3, #1
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d005      	beq.n	8014402 <tcp_zero_window_probe+0x72>
 80143f6:	6a3b      	ldr	r3, [r7, #32]
 80143f8:	891b      	ldrh	r3, [r3, #8]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d101      	bne.n	8014402 <tcp_zero_window_probe+0x72>
 80143fe:	2301      	movs	r3, #1
 8014400:	e000      	b.n	8014404 <tcp_zero_window_probe+0x74>
 8014402:	2300      	movs	r3, #0
 8014404:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014406:	7ffb      	ldrb	r3, [r7, #31]
 8014408:	2b00      	cmp	r3, #0
 801440a:	bf0c      	ite	eq
 801440c:	2301      	moveq	r3, #1
 801440e:	2300      	movne	r3, #0
 8014410:	b2db      	uxtb	r3, r3
 8014412:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014418:	b299      	uxth	r1, r3
 801441a:	6a3b      	ldr	r3, [r7, #32]
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	8bba      	ldrh	r2, [r7, #28]
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f7ff fde8 	bl	8013ff8 <tcp_output_alloc_header>
 8014428:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d102      	bne.n	8014436 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014434:	e04c      	b.n	80144d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801443c:	7ffb      	ldrb	r3, [r7, #31]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d011      	beq.n	8014466 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	899b      	ldrh	r3, [r3, #12]
 8014446:	b29b      	uxth	r3, r3
 8014448:	b21b      	sxth	r3, r3
 801444a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801444e:	b21c      	sxth	r4, r3
 8014450:	2011      	movs	r0, #17
 8014452:	f7f7 ffd5 	bl	800c400 <lwip_htons>
 8014456:	4603      	mov	r3, r0
 8014458:	b21b      	sxth	r3, r3
 801445a:	4323      	orrs	r3, r4
 801445c:	b21b      	sxth	r3, r3
 801445e:	b29a      	uxth	r2, r3
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	819a      	strh	r2, [r3, #12]
 8014464:	e010      	b.n	8014488 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	3314      	adds	r3, #20
 801446c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801446e:	6a3b      	ldr	r3, [r7, #32]
 8014470:	6858      	ldr	r0, [r3, #4]
 8014472:	6a3b      	ldr	r3, [r7, #32]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	891a      	ldrh	r2, [r3, #8]
 8014478:	6a3b      	ldr	r3, [r7, #32]
 801447a:	891b      	ldrh	r3, [r3, #8]
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	b29b      	uxth	r3, r3
 8014480:	2201      	movs	r2, #1
 8014482:	6939      	ldr	r1, [r7, #16]
 8014484:	f7f9 feb8 	bl	800e1f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014488:	6a3b      	ldr	r3, [r7, #32]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	4618      	mov	r0, r3
 8014490:	f7f7 ffcb 	bl	800c42a <lwip_htonl>
 8014494:	4603      	mov	r3, r0
 8014496:	3301      	adds	r3, #1
 8014498:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	1ad3      	subs	r3, r2, r3
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	da02      	bge.n	80144ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	68fa      	ldr	r2, [r7, #12]
 80144aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80144ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144b0:	2200      	movs	r2, #0
 80144b2:	69b9      	ldr	r1, [r7, #24]
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7ff fddd 	bl	8014074 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	3304      	adds	r3, #4
 80144c0:	69b9      	ldr	r1, [r7, #24]
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7ff fe16 	bl	80140f4 <tcp_output_control_segment>
 80144c8:	4603      	mov	r3, r0
 80144ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80144cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	372c      	adds	r7, #44	; 0x2c
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd90      	pop	{r4, r7, pc}
 80144d8:	0801c734 	.word	0x0801c734
 80144dc:	0801cf2c 	.word	0x0801cf2c
 80144e0:	0801c788 	.word	0x0801c788

080144e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80144ec:	f7f9 ff72 	bl	800e3d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80144f0:	4b0a      	ldr	r3, [pc, #40]	; (801451c <tcpip_tcp_timer+0x38>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d103      	bne.n	8014500 <tcpip_tcp_timer+0x1c>
 80144f8:	4b09      	ldr	r3, [pc, #36]	; (8014520 <tcpip_tcp_timer+0x3c>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d005      	beq.n	801450c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014500:	2200      	movs	r2, #0
 8014502:	4908      	ldr	r1, [pc, #32]	; (8014524 <tcpip_tcp_timer+0x40>)
 8014504:	20fa      	movs	r0, #250	; 0xfa
 8014506:	f000 f8f3 	bl	80146f0 <sys_timeout>
 801450a:	e003      	b.n	8014514 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801450c:	4b06      	ldr	r3, [pc, #24]	; (8014528 <tcpip_tcp_timer+0x44>)
 801450e:	2200      	movs	r2, #0
 8014510:	601a      	str	r2, [r3, #0]
  }
}
 8014512:	bf00      	nop
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	20011ba4 	.word	0x20011ba4
 8014520:	20011ba8 	.word	0x20011ba8
 8014524:	080144e5 	.word	0x080144e5
 8014528:	20011bf0 	.word	0x20011bf0

0801452c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014530:	4b0a      	ldr	r3, [pc, #40]	; (801455c <tcp_timer_needed+0x30>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d10f      	bne.n	8014558 <tcp_timer_needed+0x2c>
 8014538:	4b09      	ldr	r3, [pc, #36]	; (8014560 <tcp_timer_needed+0x34>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d103      	bne.n	8014548 <tcp_timer_needed+0x1c>
 8014540:	4b08      	ldr	r3, [pc, #32]	; (8014564 <tcp_timer_needed+0x38>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d007      	beq.n	8014558 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014548:	4b04      	ldr	r3, [pc, #16]	; (801455c <tcp_timer_needed+0x30>)
 801454a:	2201      	movs	r2, #1
 801454c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801454e:	2200      	movs	r2, #0
 8014550:	4905      	ldr	r1, [pc, #20]	; (8014568 <tcp_timer_needed+0x3c>)
 8014552:	20fa      	movs	r0, #250	; 0xfa
 8014554:	f000 f8cc 	bl	80146f0 <sys_timeout>
  }
}
 8014558:	bf00      	nop
 801455a:	bd80      	pop	{r7, pc}
 801455c:	20011bf0 	.word	0x20011bf0
 8014560:	20011ba4 	.word	0x20011ba4
 8014564:	20011ba8 	.word	0x20011ba8
 8014568:	080144e5 	.word	0x080144e5

0801456c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014578:	2009      	movs	r0, #9
 801457a:	f7f8 fd31 	bl	800cfe0 <memp_malloc>
 801457e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d109      	bne.n	801459a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d151      	bne.n	8014630 <sys_timeout_abs+0xc4>
 801458c:	4b2a      	ldr	r3, [pc, #168]	; (8014638 <sys_timeout_abs+0xcc>)
 801458e:	22be      	movs	r2, #190	; 0xbe
 8014590:	492a      	ldr	r1, [pc, #168]	; (801463c <sys_timeout_abs+0xd0>)
 8014592:	482b      	ldr	r0, [pc, #172]	; (8014640 <sys_timeout_abs+0xd4>)
 8014594:	f002 ffac 	bl	80174f0 <iprintf>
    return;
 8014598:	e04a      	b.n	8014630 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	2200      	movs	r2, #0
 801459e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	68ba      	ldr	r2, [r7, #8]
 80145a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80145b2:	4b24      	ldr	r3, [pc, #144]	; (8014644 <sys_timeout_abs+0xd8>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d103      	bne.n	80145c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80145ba:	4a22      	ldr	r2, [pc, #136]	; (8014644 <sys_timeout_abs+0xd8>)
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	6013      	str	r3, [r2, #0]
    return;
 80145c0:	e037      	b.n	8014632 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	685a      	ldr	r2, [r3, #4]
 80145c6:	4b1f      	ldr	r3, [pc, #124]	; (8014644 <sys_timeout_abs+0xd8>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	1ad3      	subs	r3, r2, r3
 80145ce:	0fdb      	lsrs	r3, r3, #31
 80145d0:	f003 0301 	and.w	r3, r3, #1
 80145d4:	b2db      	uxtb	r3, r3
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d007      	beq.n	80145ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80145da:	4b1a      	ldr	r3, [pc, #104]	; (8014644 <sys_timeout_abs+0xd8>)
 80145dc:	681a      	ldr	r2, [r3, #0]
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80145e2:	4a18      	ldr	r2, [pc, #96]	; (8014644 <sys_timeout_abs+0xd8>)
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	6013      	str	r3, [r2, #0]
 80145e8:	e023      	b.n	8014632 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80145ea:	4b16      	ldr	r3, [pc, #88]	; (8014644 <sys_timeout_abs+0xd8>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	617b      	str	r3, [r7, #20]
 80145f0:	e01a      	b.n	8014628 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00b      	beq.n	8014612 <sys_timeout_abs+0xa6>
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	685a      	ldr	r2, [r3, #4]
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	1ad3      	subs	r3, r2, r3
 8014606:	0fdb      	lsrs	r3, r3, #31
 8014608:	f003 0301 	and.w	r3, r3, #1
 801460c:	b2db      	uxtb	r3, r3
 801460e:	2b00      	cmp	r3, #0
 8014610:	d007      	beq.n	8014622 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	681a      	ldr	r2, [r3, #0]
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	693a      	ldr	r2, [r7, #16]
 801461e:	601a      	str	r2, [r3, #0]
        break;
 8014620:	e007      	b.n	8014632 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	617b      	str	r3, [r7, #20]
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1e1      	bne.n	80145f2 <sys_timeout_abs+0x86>
 801462e:	e000      	b.n	8014632 <sys_timeout_abs+0xc6>
    return;
 8014630:	bf00      	nop
      }
    }
  }
}
 8014632:	3718      	adds	r7, #24
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}
 8014638:	0801cf50 	.word	0x0801cf50
 801463c:	0801cf84 	.word	0x0801cf84
 8014640:	0801cfc4 	.word	0x0801cfc4
 8014644:	20011be8 	.word	0x20011be8

08014648 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b086      	sub	sp, #24
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4798      	blx	r3

  now = sys_now();
 801465a:	f7f1 fb31 	bl	8005cc0 <sys_now>
 801465e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	4b0f      	ldr	r3, [pc, #60]	; (80146a4 <lwip_cyclic_timer+0x5c>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4413      	add	r3, r2
 801466a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	0fdb      	lsrs	r3, r3, #31
 8014674:	f003 0301 	and.w	r3, r3, #1
 8014678:	b2db      	uxtb	r3, r3
 801467a:	2b00      	cmp	r3, #0
 801467c:	d009      	beq.n	8014692 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	681a      	ldr	r2, [r3, #0]
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	4413      	add	r3, r2
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	4907      	ldr	r1, [pc, #28]	; (80146a8 <lwip_cyclic_timer+0x60>)
 801468a:	4618      	mov	r0, r3
 801468c:	f7ff ff6e 	bl	801456c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014690:	e004      	b.n	801469c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	4904      	ldr	r1, [pc, #16]	; (80146a8 <lwip_cyclic_timer+0x60>)
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f7ff ff68 	bl	801456c <sys_timeout_abs>
}
 801469c:	bf00      	nop
 801469e:	3718      	adds	r7, #24
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	20011bec 	.word	0x20011bec
 80146a8:	08014649 	.word	0x08014649

080146ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80146b2:	2301      	movs	r3, #1
 80146b4:	607b      	str	r3, [r7, #4]
 80146b6:	e00e      	b.n	80146d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80146b8:	4a0b      	ldr	r2, [pc, #44]	; (80146e8 <sys_timeouts_init+0x3c>)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	00db      	lsls	r3, r3, #3
 80146c4:	4a08      	ldr	r2, [pc, #32]	; (80146e8 <sys_timeouts_init+0x3c>)
 80146c6:	4413      	add	r3, r2
 80146c8:	461a      	mov	r2, r3
 80146ca:	4908      	ldr	r1, [pc, #32]	; (80146ec <sys_timeouts_init+0x40>)
 80146cc:	f000 f810 	bl	80146f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	3301      	adds	r3, #1
 80146d4:	607b      	str	r3, [r7, #4]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2b02      	cmp	r3, #2
 80146da:	d9ed      	bls.n	80146b8 <sys_timeouts_init+0xc>
  }
}
 80146dc:	bf00      	nop
 80146de:	bf00      	nop
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	0801d8b8 	.word	0x0801d8b8
 80146ec:	08014649 	.word	0x08014649

080146f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014702:	d306      	bcc.n	8014712 <sys_timeout+0x22>
 8014704:	4b0a      	ldr	r3, [pc, #40]	; (8014730 <sys_timeout+0x40>)
 8014706:	f240 1229 	movw	r2, #297	; 0x129
 801470a:	490a      	ldr	r1, [pc, #40]	; (8014734 <sys_timeout+0x44>)
 801470c:	480a      	ldr	r0, [pc, #40]	; (8014738 <sys_timeout+0x48>)
 801470e:	f002 feef 	bl	80174f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014712:	f7f1 fad5 	bl	8005cc0 <sys_now>
 8014716:	4602      	mov	r2, r0
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	4413      	add	r3, r2
 801471c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	68b9      	ldr	r1, [r7, #8]
 8014722:	6978      	ldr	r0, [r7, #20]
 8014724:	f7ff ff22 	bl	801456c <sys_timeout_abs>
#endif
}
 8014728:	bf00      	nop
 801472a:	3718      	adds	r7, #24
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	0801cf50 	.word	0x0801cf50
 8014734:	0801cfec 	.word	0x0801cfec
 8014738:	0801cfc4 	.word	0x0801cfc4

0801473c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014742:	f7f1 fabd 	bl	8005cc0 <sys_now>
 8014746:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014748:	4b17      	ldr	r3, [pc, #92]	; (80147a8 <sys_check_timeouts+0x6c>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d022      	beq.n	801479a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	68fa      	ldr	r2, [r7, #12]
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	0fdb      	lsrs	r3, r3, #31
 801475e:	f003 0301 	and.w	r3, r3, #1
 8014762:	b2db      	uxtb	r3, r3
 8014764:	2b00      	cmp	r3, #0
 8014766:	d11a      	bne.n	801479e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	4a0e      	ldr	r2, [pc, #56]	; (80147a8 <sys_check_timeouts+0x6c>)
 801476e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	689b      	ldr	r3, [r3, #8]
 8014774:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	68db      	ldr	r3, [r3, #12]
 801477a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	4a0a      	ldr	r2, [pc, #40]	; (80147ac <sys_check_timeouts+0x70>)
 8014782:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014784:	68b9      	ldr	r1, [r7, #8]
 8014786:	2009      	movs	r0, #9
 8014788:	f7f8 fca0 	bl	800d0cc <memp_free>
    if (handler != NULL) {
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d0da      	beq.n	8014748 <sys_check_timeouts+0xc>
      handler(arg);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6838      	ldr	r0, [r7, #0]
 8014796:	4798      	blx	r3
  do {
 8014798:	e7d6      	b.n	8014748 <sys_check_timeouts+0xc>
      return;
 801479a:	bf00      	nop
 801479c:	e000      	b.n	80147a0 <sys_check_timeouts+0x64>
      return;
 801479e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	20011be8 	.word	0x20011be8
 80147ac:	20011bec 	.word	0x20011bec

080147b0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80147b6:	4b16      	ldr	r3, [pc, #88]	; (8014810 <sys_timeouts_sleeptime+0x60>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d102      	bne.n	80147c4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80147be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147c2:	e020      	b.n	8014806 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80147c4:	f7f1 fa7c 	bl	8005cc0 <sys_now>
 80147c8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80147ca:	4b11      	ldr	r3, [pc, #68]	; (8014810 <sys_timeouts_sleeptime+0x60>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	685a      	ldr	r2, [r3, #4]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	0fdb      	lsrs	r3, r3, #31
 80147d6:	f003 0301 	and.w	r3, r3, #1
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d001      	beq.n	80147e4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80147e0:	2300      	movs	r3, #0
 80147e2:	e010      	b.n	8014806 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80147e4:	4b0a      	ldr	r3, [pc, #40]	; (8014810 <sys_timeouts_sleeptime+0x60>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	1ad3      	subs	r3, r2, r3
 80147ee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	da06      	bge.n	8014804 <sys_timeouts_sleeptime+0x54>
 80147f6:	4b07      	ldr	r3, [pc, #28]	; (8014814 <sys_timeouts_sleeptime+0x64>)
 80147f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80147fc:	4906      	ldr	r1, [pc, #24]	; (8014818 <sys_timeouts_sleeptime+0x68>)
 80147fe:	4807      	ldr	r0, [pc, #28]	; (801481c <sys_timeouts_sleeptime+0x6c>)
 8014800:	f002 fe76 	bl	80174f0 <iprintf>
    return ret;
 8014804:	683b      	ldr	r3, [r7, #0]
  }
}
 8014806:	4618      	mov	r0, r3
 8014808:	3708      	adds	r7, #8
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	20011be8 	.word	0x20011be8
 8014814:	0801cf50 	.word	0x0801cf50
 8014818:	0801d024 	.word	0x0801d024
 801481c:	0801cfc4 	.word	0x0801cfc4

08014820 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014828:	4915      	ldr	r1, [pc, #84]	; (8014880 <etharp_free_entry+0x60>)
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	4613      	mov	r3, r2
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	4413      	add	r3, r2
 8014832:	00db      	lsls	r3, r3, #3
 8014834:	440b      	add	r3, r1
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d013      	beq.n	8014864 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801483c:	4910      	ldr	r1, [pc, #64]	; (8014880 <etharp_free_entry+0x60>)
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	4613      	mov	r3, r2
 8014842:	005b      	lsls	r3, r3, #1
 8014844:	4413      	add	r3, r2
 8014846:	00db      	lsls	r3, r3, #3
 8014848:	440b      	add	r3, r1
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	4618      	mov	r0, r3
 801484e:	f7f9 fadd 	bl	800de0c <pbuf_free>
    arp_table[i].q = NULL;
 8014852:	490b      	ldr	r1, [pc, #44]	; (8014880 <etharp_free_entry+0x60>)
 8014854:	687a      	ldr	r2, [r7, #4]
 8014856:	4613      	mov	r3, r2
 8014858:	005b      	lsls	r3, r3, #1
 801485a:	4413      	add	r3, r2
 801485c:	00db      	lsls	r3, r3, #3
 801485e:	440b      	add	r3, r1
 8014860:	2200      	movs	r2, #0
 8014862:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014864:	4906      	ldr	r1, [pc, #24]	; (8014880 <etharp_free_entry+0x60>)
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	4613      	mov	r3, r2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	4413      	add	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	440b      	add	r3, r1
 8014872:	3314      	adds	r3, #20
 8014874:	2200      	movs	r2, #0
 8014876:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014878:	bf00      	nop
 801487a:	3708      	adds	r7, #8
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	20011bf4 	.word	0x20011bf4

08014884 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801488a:	2300      	movs	r3, #0
 801488c:	607b      	str	r3, [r7, #4]
 801488e:	e096      	b.n	80149be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014890:	494f      	ldr	r1, [pc, #316]	; (80149d0 <etharp_tmr+0x14c>)
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	4613      	mov	r3, r2
 8014896:	005b      	lsls	r3, r3, #1
 8014898:	4413      	add	r3, r2
 801489a:	00db      	lsls	r3, r3, #3
 801489c:	440b      	add	r3, r1
 801489e:	3314      	adds	r3, #20
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80148a4:	78fb      	ldrb	r3, [r7, #3]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	f000 8086 	beq.w	80149b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80148ac:	4948      	ldr	r1, [pc, #288]	; (80149d0 <etharp_tmr+0x14c>)
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	4613      	mov	r3, r2
 80148b2:	005b      	lsls	r3, r3, #1
 80148b4:	4413      	add	r3, r2
 80148b6:	00db      	lsls	r3, r3, #3
 80148b8:	440b      	add	r3, r1
 80148ba:	3312      	adds	r3, #18
 80148bc:	881b      	ldrh	r3, [r3, #0]
 80148be:	3301      	adds	r3, #1
 80148c0:	b298      	uxth	r0, r3
 80148c2:	4943      	ldr	r1, [pc, #268]	; (80149d0 <etharp_tmr+0x14c>)
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	4613      	mov	r3, r2
 80148c8:	005b      	lsls	r3, r3, #1
 80148ca:	4413      	add	r3, r2
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	440b      	add	r3, r1
 80148d0:	3312      	adds	r3, #18
 80148d2:	4602      	mov	r2, r0
 80148d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80148d6:	493e      	ldr	r1, [pc, #248]	; (80149d0 <etharp_tmr+0x14c>)
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	4613      	mov	r3, r2
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	4413      	add	r3, r2
 80148e0:	00db      	lsls	r3, r3, #3
 80148e2:	440b      	add	r3, r1
 80148e4:	3312      	adds	r3, #18
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80148ec:	d215      	bcs.n	801491a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80148ee:	4938      	ldr	r1, [pc, #224]	; (80149d0 <etharp_tmr+0x14c>)
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	4613      	mov	r3, r2
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	4413      	add	r3, r2
 80148f8:	00db      	lsls	r3, r3, #3
 80148fa:	440b      	add	r3, r1
 80148fc:	3314      	adds	r3, #20
 80148fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014900:	2b01      	cmp	r3, #1
 8014902:	d10e      	bne.n	8014922 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014904:	4932      	ldr	r1, [pc, #200]	; (80149d0 <etharp_tmr+0x14c>)
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	4613      	mov	r3, r2
 801490a:	005b      	lsls	r3, r3, #1
 801490c:	4413      	add	r3, r2
 801490e:	00db      	lsls	r3, r3, #3
 8014910:	440b      	add	r3, r1
 8014912:	3312      	adds	r3, #18
 8014914:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014916:	2b04      	cmp	r3, #4
 8014918:	d903      	bls.n	8014922 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ff ff80 	bl	8014820 <etharp_free_entry>
 8014920:	e04a      	b.n	80149b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014922:	492b      	ldr	r1, [pc, #172]	; (80149d0 <etharp_tmr+0x14c>)
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	4613      	mov	r3, r2
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	4413      	add	r3, r2
 801492c:	00db      	lsls	r3, r3, #3
 801492e:	440b      	add	r3, r1
 8014930:	3314      	adds	r3, #20
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	2b03      	cmp	r3, #3
 8014936:	d10a      	bne.n	801494e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014938:	4925      	ldr	r1, [pc, #148]	; (80149d0 <etharp_tmr+0x14c>)
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	4613      	mov	r3, r2
 801493e:	005b      	lsls	r3, r3, #1
 8014940:	4413      	add	r3, r2
 8014942:	00db      	lsls	r3, r3, #3
 8014944:	440b      	add	r3, r1
 8014946:	3314      	adds	r3, #20
 8014948:	2204      	movs	r2, #4
 801494a:	701a      	strb	r2, [r3, #0]
 801494c:	e034      	b.n	80149b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801494e:	4920      	ldr	r1, [pc, #128]	; (80149d0 <etharp_tmr+0x14c>)
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	4613      	mov	r3, r2
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	4413      	add	r3, r2
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	440b      	add	r3, r1
 801495c:	3314      	adds	r3, #20
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	2b04      	cmp	r3, #4
 8014962:	d10a      	bne.n	801497a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014964:	491a      	ldr	r1, [pc, #104]	; (80149d0 <etharp_tmr+0x14c>)
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	4613      	mov	r3, r2
 801496a:	005b      	lsls	r3, r3, #1
 801496c:	4413      	add	r3, r2
 801496e:	00db      	lsls	r3, r3, #3
 8014970:	440b      	add	r3, r1
 8014972:	3314      	adds	r3, #20
 8014974:	2202      	movs	r2, #2
 8014976:	701a      	strb	r2, [r3, #0]
 8014978:	e01e      	b.n	80149b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801497a:	4915      	ldr	r1, [pc, #84]	; (80149d0 <etharp_tmr+0x14c>)
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	4613      	mov	r3, r2
 8014980:	005b      	lsls	r3, r3, #1
 8014982:	4413      	add	r3, r2
 8014984:	00db      	lsls	r3, r3, #3
 8014986:	440b      	add	r3, r1
 8014988:	3314      	adds	r3, #20
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	2b01      	cmp	r3, #1
 801498e:	d113      	bne.n	80149b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014990:	490f      	ldr	r1, [pc, #60]	; (80149d0 <etharp_tmr+0x14c>)
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	4613      	mov	r3, r2
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	440b      	add	r3, r1
 801499e:	3308      	adds	r3, #8
 80149a0:	6818      	ldr	r0, [r3, #0]
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	4613      	mov	r3, r2
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	4a08      	ldr	r2, [pc, #32]	; (80149d0 <etharp_tmr+0x14c>)
 80149ae:	4413      	add	r3, r2
 80149b0:	3304      	adds	r3, #4
 80149b2:	4619      	mov	r1, r3
 80149b4:	f000 fe6e 	bl	8015694 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	3301      	adds	r3, #1
 80149bc:	607b      	str	r3, [r7, #4]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2b09      	cmp	r3, #9
 80149c2:	f77f af65 	ble.w	8014890 <etharp_tmr+0xc>
      }
    }
  }
}
 80149c6:	bf00      	nop
 80149c8:	bf00      	nop
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	20011bf4 	.word	0x20011bf4

080149d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b08a      	sub	sp, #40	; 0x28
 80149d8:	af00      	add	r7, sp, #0
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	460b      	mov	r3, r1
 80149de:	607a      	str	r2, [r7, #4]
 80149e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80149e2:	230a      	movs	r3, #10
 80149e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80149e6:	230a      	movs	r3, #10
 80149e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80149ea:	230a      	movs	r3, #10
 80149ec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80149ee:	2300      	movs	r3, #0
 80149f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80149f2:	230a      	movs	r3, #10
 80149f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80149f6:	2300      	movs	r3, #0
 80149f8:	83bb      	strh	r3, [r7, #28]
 80149fa:	2300      	movs	r3, #0
 80149fc:	837b      	strh	r3, [r7, #26]
 80149fe:	2300      	movs	r3, #0
 8014a00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a02:	2300      	movs	r3, #0
 8014a04:	843b      	strh	r3, [r7, #32]
 8014a06:	e0ae      	b.n	8014b66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a0c:	49a6      	ldr	r1, [pc, #664]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014a0e:	4613      	mov	r3, r2
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	4413      	add	r3, r2
 8014a14:	00db      	lsls	r3, r3, #3
 8014a16:	440b      	add	r3, r1
 8014a18:	3314      	adds	r3, #20
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014a1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014a22:	2b0a      	cmp	r3, #10
 8014a24:	d105      	bne.n	8014a32 <etharp_find_entry+0x5e>
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d102      	bne.n	8014a32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014a2c:	8c3b      	ldrh	r3, [r7, #32]
 8014a2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014a30:	e095      	b.n	8014b5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014a32:	7dfb      	ldrb	r3, [r7, #23]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f000 8092 	beq.w	8014b5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014a3a:	7dfb      	ldrb	r3, [r7, #23]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d009      	beq.n	8014a54 <etharp_find_entry+0x80>
 8014a40:	7dfb      	ldrb	r3, [r7, #23]
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d806      	bhi.n	8014a54 <etharp_find_entry+0x80>
 8014a46:	4b99      	ldr	r3, [pc, #612]	; (8014cac <etharp_find_entry+0x2d8>)
 8014a48:	f240 1223 	movw	r2, #291	; 0x123
 8014a4c:	4998      	ldr	r1, [pc, #608]	; (8014cb0 <etharp_find_entry+0x2dc>)
 8014a4e:	4899      	ldr	r0, [pc, #612]	; (8014cb4 <etharp_find_entry+0x2e0>)
 8014a50:	f002 fd4e 	bl	80174f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d020      	beq.n	8014a9c <etharp_find_entry+0xc8>
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	6819      	ldr	r1, [r3, #0]
 8014a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a62:	4891      	ldr	r0, [pc, #580]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014a64:	4613      	mov	r3, r2
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	4413      	add	r3, r2
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	4403      	add	r3, r0
 8014a6e:	3304      	adds	r3, #4
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4299      	cmp	r1, r3
 8014a74:	d112      	bne.n	8014a9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00c      	beq.n	8014a96 <etharp_find_entry+0xc2>
 8014a7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a80:	4989      	ldr	r1, [pc, #548]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	440b      	add	r3, r1
 8014a8c:	3308      	adds	r3, #8
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d102      	bne.n	8014a9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014a96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a9a:	e100      	b.n	8014c9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014a9c:	7dfb      	ldrb	r3, [r7, #23]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d140      	bne.n	8014b24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aa6:	4980      	ldr	r1, [pc, #512]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	4413      	add	r3, r2
 8014aae:	00db      	lsls	r3, r3, #3
 8014ab0:	440b      	add	r3, r1
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d01a      	beq.n	8014aee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014ab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014abc:	497a      	ldr	r1, [pc, #488]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014abe:	4613      	mov	r3, r2
 8014ac0:	005b      	lsls	r3, r3, #1
 8014ac2:	4413      	add	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	440b      	add	r3, r1
 8014ac8:	3312      	adds	r3, #18
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	8bba      	ldrh	r2, [r7, #28]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d845      	bhi.n	8014b5e <etharp_find_entry+0x18a>
            old_queue = i;
 8014ad2:	8c3b      	ldrh	r3, [r7, #32]
 8014ad4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014ad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ada:	4973      	ldr	r1, [pc, #460]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014adc:	4613      	mov	r3, r2
 8014ade:	005b      	lsls	r3, r3, #1
 8014ae0:	4413      	add	r3, r2
 8014ae2:	00db      	lsls	r3, r3, #3
 8014ae4:	440b      	add	r3, r1
 8014ae6:	3312      	adds	r3, #18
 8014ae8:	881b      	ldrh	r3, [r3, #0]
 8014aea:	83bb      	strh	r3, [r7, #28]
 8014aec:	e037      	b.n	8014b5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014af2:	496d      	ldr	r1, [pc, #436]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014af4:	4613      	mov	r3, r2
 8014af6:	005b      	lsls	r3, r3, #1
 8014af8:	4413      	add	r3, r2
 8014afa:	00db      	lsls	r3, r3, #3
 8014afc:	440b      	add	r3, r1
 8014afe:	3312      	adds	r3, #18
 8014b00:	881b      	ldrh	r3, [r3, #0]
 8014b02:	8b7a      	ldrh	r2, [r7, #26]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d82a      	bhi.n	8014b5e <etharp_find_entry+0x18a>
            old_pending = i;
 8014b08:	8c3b      	ldrh	r3, [r7, #32]
 8014b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b10:	4965      	ldr	r1, [pc, #404]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3312      	adds	r3, #18
 8014b1e:	881b      	ldrh	r3, [r3, #0]
 8014b20:	837b      	strh	r3, [r7, #26]
 8014b22:	e01c      	b.n	8014b5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014b24:	7dfb      	ldrb	r3, [r7, #23]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d919      	bls.n	8014b5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b2e:	495e      	ldr	r1, [pc, #376]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014b30:	4613      	mov	r3, r2
 8014b32:	005b      	lsls	r3, r3, #1
 8014b34:	4413      	add	r3, r2
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	440b      	add	r3, r1
 8014b3a:	3312      	adds	r3, #18
 8014b3c:	881b      	ldrh	r3, [r3, #0]
 8014b3e:	8b3a      	ldrh	r2, [r7, #24]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d80c      	bhi.n	8014b5e <etharp_find_entry+0x18a>
            old_stable = i;
 8014b44:	8c3b      	ldrh	r3, [r7, #32]
 8014b46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014b48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b4c:	4956      	ldr	r1, [pc, #344]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014b4e:	4613      	mov	r3, r2
 8014b50:	005b      	lsls	r3, r3, #1
 8014b52:	4413      	add	r3, r2
 8014b54:	00db      	lsls	r3, r3, #3
 8014b56:	440b      	add	r3, r1
 8014b58:	3312      	adds	r3, #18
 8014b5a:	881b      	ldrh	r3, [r3, #0]
 8014b5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b5e:	8c3b      	ldrh	r3, [r7, #32]
 8014b60:	3301      	adds	r3, #1
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	843b      	strh	r3, [r7, #32]
 8014b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b6a:	2b09      	cmp	r3, #9
 8014b6c:	f77f af4c 	ble.w	8014a08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014b70:	7afb      	ldrb	r3, [r7, #11]
 8014b72:	f003 0302 	and.w	r3, r3, #2
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d108      	bne.n	8014b8c <etharp_find_entry+0x1b8>
 8014b7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b7e:	2b0a      	cmp	r3, #10
 8014b80:	d107      	bne.n	8014b92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014b82:	7afb      	ldrb	r3, [r7, #11]
 8014b84:	f003 0301 	and.w	r3, r3, #1
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d102      	bne.n	8014b92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b90:	e085      	b.n	8014c9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b96:	2b09      	cmp	r3, #9
 8014b98:	dc02      	bgt.n	8014ba0 <etharp_find_entry+0x1cc>
    i = empty;
 8014b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b9c:	843b      	strh	r3, [r7, #32]
 8014b9e:	e039      	b.n	8014c14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014ba4:	2b09      	cmp	r3, #9
 8014ba6:	dc14      	bgt.n	8014bd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014baa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bb0:	493d      	ldr	r1, [pc, #244]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d018      	beq.n	8014bf4 <etharp_find_entry+0x220>
 8014bc2:	4b3a      	ldr	r3, [pc, #232]	; (8014cac <etharp_find_entry+0x2d8>)
 8014bc4:	f240 126d 	movw	r2, #365	; 0x16d
 8014bc8:	493b      	ldr	r1, [pc, #236]	; (8014cb8 <etharp_find_entry+0x2e4>)
 8014bca:	483a      	ldr	r0, [pc, #232]	; (8014cb4 <etharp_find_entry+0x2e0>)
 8014bcc:	f002 fc90 	bl	80174f0 <iprintf>
 8014bd0:	e010      	b.n	8014bf4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014bd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014bd6:	2b09      	cmp	r3, #9
 8014bd8:	dc02      	bgt.n	8014be0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014bdc:	843b      	strh	r3, [r7, #32]
 8014bde:	e009      	b.n	8014bf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014be0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014be4:	2b09      	cmp	r3, #9
 8014be6:	dc02      	bgt.n	8014bee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014be8:	8bfb      	ldrh	r3, [r7, #30]
 8014bea:	843b      	strh	r3, [r7, #32]
 8014bec:	e002      	b.n	8014bf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bf2:	e054      	b.n	8014c9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014bf4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014bf8:	2b09      	cmp	r3, #9
 8014bfa:	dd06      	ble.n	8014c0a <etharp_find_entry+0x236>
 8014bfc:	4b2b      	ldr	r3, [pc, #172]	; (8014cac <etharp_find_entry+0x2d8>)
 8014bfe:	f240 127f 	movw	r2, #383	; 0x17f
 8014c02:	492e      	ldr	r1, [pc, #184]	; (8014cbc <etharp_find_entry+0x2e8>)
 8014c04:	482b      	ldr	r0, [pc, #172]	; (8014cb4 <etharp_find_entry+0x2e0>)
 8014c06:	f002 fc73 	bl	80174f0 <iprintf>
    etharp_free_entry(i);
 8014c0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7ff fe06 	bl	8014820 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c18:	2b09      	cmp	r3, #9
 8014c1a:	dd06      	ble.n	8014c2a <etharp_find_entry+0x256>
 8014c1c:	4b23      	ldr	r3, [pc, #140]	; (8014cac <etharp_find_entry+0x2d8>)
 8014c1e:	f240 1283 	movw	r2, #387	; 0x183
 8014c22:	4926      	ldr	r1, [pc, #152]	; (8014cbc <etharp_find_entry+0x2e8>)
 8014c24:	4823      	ldr	r0, [pc, #140]	; (8014cb4 <etharp_find_entry+0x2e0>)
 8014c26:	f002 fc63 	bl	80174f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c2e:	491e      	ldr	r1, [pc, #120]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014c30:	4613      	mov	r3, r2
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	4413      	add	r3, r2
 8014c36:	00db      	lsls	r3, r3, #3
 8014c38:	440b      	add	r3, r1
 8014c3a:	3314      	adds	r3, #20
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d006      	beq.n	8014c50 <etharp_find_entry+0x27c>
 8014c42:	4b1a      	ldr	r3, [pc, #104]	; (8014cac <etharp_find_entry+0x2d8>)
 8014c44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014c48:	491d      	ldr	r1, [pc, #116]	; (8014cc0 <etharp_find_entry+0x2ec>)
 8014c4a:	481a      	ldr	r0, [pc, #104]	; (8014cb4 <etharp_find_entry+0x2e0>)
 8014c4c:	f002 fc50 	bl	80174f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d00b      	beq.n	8014c6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	6819      	ldr	r1, [r3, #0]
 8014c5e:	4812      	ldr	r0, [pc, #72]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014c60:	4613      	mov	r3, r2
 8014c62:	005b      	lsls	r3, r3, #1
 8014c64:	4413      	add	r3, r2
 8014c66:	00db      	lsls	r3, r3, #3
 8014c68:	4403      	add	r3, r0
 8014c6a:	3304      	adds	r3, #4
 8014c6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014c6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c72:	490d      	ldr	r1, [pc, #52]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014c74:	4613      	mov	r3, r2
 8014c76:	005b      	lsls	r3, r3, #1
 8014c78:	4413      	add	r3, r2
 8014c7a:	00db      	lsls	r3, r3, #3
 8014c7c:	440b      	add	r3, r1
 8014c7e:	3312      	adds	r3, #18
 8014c80:	2200      	movs	r2, #0
 8014c82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014c84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c88:	4907      	ldr	r1, [pc, #28]	; (8014ca8 <etharp_find_entry+0x2d4>)
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	4413      	add	r3, r2
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	440b      	add	r3, r1
 8014c94:	3308      	adds	r3, #8
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014c9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3728      	adds	r7, #40	; 0x28
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	20011bf4 	.word	0x20011bf4
 8014cac:	0801d038 	.word	0x0801d038
 8014cb0:	0801d070 	.word	0x0801d070
 8014cb4:	0801d0b0 	.word	0x0801d0b0
 8014cb8:	0801d0d8 	.word	0x0801d0d8
 8014cbc:	0801d0f0 	.word	0x0801d0f0
 8014cc0:	0801d104 	.word	0x0801d104

08014cc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b088      	sub	sp, #32
 8014cc8:	af02      	add	r7, sp, #8
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014cd8:	2b06      	cmp	r3, #6
 8014cda:	d006      	beq.n	8014cea <etharp_update_arp_entry+0x26>
 8014cdc:	4b48      	ldr	r3, [pc, #288]	; (8014e00 <etharp_update_arp_entry+0x13c>)
 8014cde:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014ce2:	4948      	ldr	r1, [pc, #288]	; (8014e04 <etharp_update_arp_entry+0x140>)
 8014ce4:	4848      	ldr	r0, [pc, #288]	; (8014e08 <etharp_update_arp_entry+0x144>)
 8014ce6:	f002 fc03 	bl	80174f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d012      	beq.n	8014d16 <etharp_update_arp_entry+0x52>
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d00e      	beq.n	8014d16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	68f9      	ldr	r1, [r7, #12]
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f001 f8f4 	bl	8015eec <ip4_addr_isbroadcast_u32>
 8014d04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d105      	bne.n	8014d16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d12:	2be0      	cmp	r3, #224	; 0xe0
 8014d14:	d102      	bne.n	8014d1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d16:	f06f 030f 	mvn.w	r3, #15
 8014d1a:	e06c      	b.n	8014df6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014d1c:	78fb      	ldrb	r3, [r7, #3]
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	4619      	mov	r1, r3
 8014d22:	68b8      	ldr	r0, [r7, #8]
 8014d24:	f7ff fe56 	bl	80149d4 <etharp_find_entry>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014d2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	da02      	bge.n	8014d3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014d34:	8afb      	ldrh	r3, [r7, #22]
 8014d36:	b25b      	sxtb	r3, r3
 8014d38:	e05d      	b.n	8014df6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d3e:	4933      	ldr	r1, [pc, #204]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014d40:	4613      	mov	r3, r2
 8014d42:	005b      	lsls	r3, r3, #1
 8014d44:	4413      	add	r3, r2
 8014d46:	00db      	lsls	r3, r3, #3
 8014d48:	440b      	add	r3, r1
 8014d4a:	3314      	adds	r3, #20
 8014d4c:	2202      	movs	r2, #2
 8014d4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014d50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d54:	492d      	ldr	r1, [pc, #180]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014d56:	4613      	mov	r3, r2
 8014d58:	005b      	lsls	r3, r3, #1
 8014d5a:	4413      	add	r3, r2
 8014d5c:	00db      	lsls	r3, r3, #3
 8014d5e:	440b      	add	r3, r1
 8014d60:	3308      	adds	r3, #8
 8014d62:	68fa      	ldr	r2, [r7, #12]
 8014d64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014d66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	3308      	adds	r3, #8
 8014d74:	4a25      	ldr	r2, [pc, #148]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014d76:	4413      	add	r3, r2
 8014d78:	3304      	adds	r3, #4
 8014d7a:	2206      	movs	r2, #6
 8014d7c:	6879      	ldr	r1, [r7, #4]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f002 faf1 	bl	8017366 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014d84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d88:	4920      	ldr	r1, [pc, #128]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	005b      	lsls	r3, r3, #1
 8014d8e:	4413      	add	r3, r2
 8014d90:	00db      	lsls	r3, r3, #3
 8014d92:	440b      	add	r3, r1
 8014d94:	3312      	adds	r3, #18
 8014d96:	2200      	movs	r2, #0
 8014d98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014d9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d9e:	491b      	ldr	r1, [pc, #108]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014da0:	4613      	mov	r3, r2
 8014da2:	005b      	lsls	r3, r3, #1
 8014da4:	4413      	add	r3, r2
 8014da6:	00db      	lsls	r3, r3, #3
 8014da8:	440b      	add	r3, r1
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d021      	beq.n	8014df4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014db0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014db4:	4915      	ldr	r1, [pc, #84]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014db6:	4613      	mov	r3, r2
 8014db8:	005b      	lsls	r3, r3, #1
 8014dba:	4413      	add	r3, r2
 8014dbc:	00db      	lsls	r3, r3, #3
 8014dbe:	440b      	add	r3, r1
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dc8:	4910      	ldr	r1, [pc, #64]	; (8014e0c <etharp_update_arp_entry+0x148>)
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	440b      	add	r3, r1
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6939      	ldr	r1, [r7, #16]
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	f001 ff8d 	bl	8016d08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014dee:	6938      	ldr	r0, [r7, #16]
 8014df0:	f7f9 f80c 	bl	800de0c <pbuf_free>
  }
  return ERR_OK;
 8014df4:	2300      	movs	r3, #0
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3718      	adds	r7, #24
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	0801d038 	.word	0x0801d038
 8014e04:	0801d130 	.word	0x0801d130
 8014e08:	0801d0b0 	.word	0x0801d0b0
 8014e0c:	20011bf4 	.word	0x20011bf4

08014e10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e18:	2300      	movs	r3, #0
 8014e1a:	60fb      	str	r3, [r7, #12]
 8014e1c:	e01e      	b.n	8014e5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014e1e:	4913      	ldr	r1, [pc, #76]	; (8014e6c <etharp_cleanup_netif+0x5c>)
 8014e20:	68fa      	ldr	r2, [r7, #12]
 8014e22:	4613      	mov	r3, r2
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	4413      	add	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	440b      	add	r3, r1
 8014e2c:	3314      	adds	r3, #20
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014e32:	7afb      	ldrb	r3, [r7, #11]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d00e      	beq.n	8014e56 <etharp_cleanup_netif+0x46>
 8014e38:	490c      	ldr	r1, [pc, #48]	; (8014e6c <etharp_cleanup_netif+0x5c>)
 8014e3a:	68fa      	ldr	r2, [r7, #12]
 8014e3c:	4613      	mov	r3, r2
 8014e3e:	005b      	lsls	r3, r3, #1
 8014e40:	4413      	add	r3, r2
 8014e42:	00db      	lsls	r3, r3, #3
 8014e44:	440b      	add	r3, r1
 8014e46:	3308      	adds	r3, #8
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d102      	bne.n	8014e56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	f7ff fce5 	bl	8014820 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	60fb      	str	r3, [r7, #12]
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2b09      	cmp	r3, #9
 8014e60:	dddd      	ble.n	8014e1e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014e62:	bf00      	nop
 8014e64:	bf00      	nop
 8014e66:	3710      	adds	r7, #16
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	20011bf4 	.word	0x20011bf4

08014e70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014e70:	b5b0      	push	{r4, r5, r7, lr}
 8014e72:	b08a      	sub	sp, #40	; 0x28
 8014e74:	af04      	add	r7, sp, #16
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d107      	bne.n	8014e90 <etharp_input+0x20>
 8014e80:	4b3d      	ldr	r3, [pc, #244]	; (8014f78 <etharp_input+0x108>)
 8014e82:	f240 228a 	movw	r2, #650	; 0x28a
 8014e86:	493d      	ldr	r1, [pc, #244]	; (8014f7c <etharp_input+0x10c>)
 8014e88:	483d      	ldr	r0, [pc, #244]	; (8014f80 <etharp_input+0x110>)
 8014e8a:	f002 fb31 	bl	80174f0 <iprintf>
 8014e8e:	e06f      	b.n	8014f70 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	881b      	ldrh	r3, [r3, #0]
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ea0:	d10c      	bne.n	8014ebc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014ea6:	2b06      	cmp	r3, #6
 8014ea8:	d108      	bne.n	8014ebc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014eae:	2b04      	cmp	r3, #4
 8014eb0:	d104      	bne.n	8014ebc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	885b      	ldrh	r3, [r3, #2]
 8014eb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014eb8:	2b08      	cmp	r3, #8
 8014eba:	d003      	beq.n	8014ec4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7f8 ffa5 	bl	800de0c <pbuf_free>
    return;
 8014ec2:	e055      	b.n	8014f70 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	330e      	adds	r3, #14
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	3318      	adds	r3, #24
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	3304      	adds	r3, #4
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d102      	bne.n	8014ee4 <etharp_input+0x74>
    for_us = 0;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	75fb      	strb	r3, [r7, #23]
 8014ee2:	e009      	b.n	8014ef8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	3304      	adds	r3, #4
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	bf0c      	ite	eq
 8014ef0:	2301      	moveq	r3, #1
 8014ef2:	2300      	movne	r3, #0
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	f103 0208 	add.w	r2, r3, #8
 8014efe:	7dfb      	ldrb	r3, [r7, #23]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d001      	beq.n	8014f08 <etharp_input+0x98>
 8014f04:	2301      	movs	r3, #1
 8014f06:	e000      	b.n	8014f0a <etharp_input+0x9a>
 8014f08:	2302      	movs	r3, #2
 8014f0a:	f107 010c 	add.w	r1, r7, #12
 8014f0e:	6838      	ldr	r0, [r7, #0]
 8014f10:	f7ff fed8 	bl	8014cc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	88db      	ldrh	r3, [r3, #6]
 8014f18:	b29b      	uxth	r3, r3
 8014f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f1e:	d003      	beq.n	8014f28 <etharp_input+0xb8>
 8014f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f24:	d01e      	beq.n	8014f64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014f26:	e020      	b.n	8014f6a <etharp_input+0xfa>
      if (for_us) {
 8014f28:	7dfb      	ldrb	r3, [r7, #23]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d01c      	beq.n	8014f68 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014f44:	693a      	ldr	r2, [r7, #16]
 8014f46:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014f48:	2102      	movs	r1, #2
 8014f4a:	9103      	str	r1, [sp, #12]
 8014f4c:	f107 010c 	add.w	r1, r7, #12
 8014f50:	9102      	str	r1, [sp, #8]
 8014f52:	9201      	str	r2, [sp, #4]
 8014f54:	9300      	str	r3, [sp, #0]
 8014f56:	462b      	mov	r3, r5
 8014f58:	4622      	mov	r2, r4
 8014f5a:	4601      	mov	r1, r0
 8014f5c:	6838      	ldr	r0, [r7, #0]
 8014f5e:	f000 faeb 	bl	8015538 <etharp_raw>
      break;
 8014f62:	e001      	b.n	8014f68 <etharp_input+0xf8>
      break;
 8014f64:	bf00      	nop
 8014f66:	e000      	b.n	8014f6a <etharp_input+0xfa>
      break;
 8014f68:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f7f8 ff4e 	bl	800de0c <pbuf_free>
}
 8014f70:	3718      	adds	r7, #24
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bdb0      	pop	{r4, r5, r7, pc}
 8014f76:	bf00      	nop
 8014f78:	0801d038 	.word	0x0801d038
 8014f7c:	0801d188 	.word	0x0801d188
 8014f80:	0801d0b0 	.word	0x0801d0b0

08014f84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b086      	sub	sp, #24
 8014f88:	af02      	add	r7, sp, #8
 8014f8a:	60f8      	str	r0, [r7, #12]
 8014f8c:	60b9      	str	r1, [r7, #8]
 8014f8e:	4613      	mov	r3, r2
 8014f90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014f92:	79fa      	ldrb	r2, [r7, #7]
 8014f94:	4944      	ldr	r1, [pc, #272]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8014f96:	4613      	mov	r3, r2
 8014f98:	005b      	lsls	r3, r3, #1
 8014f9a:	4413      	add	r3, r2
 8014f9c:	00db      	lsls	r3, r3, #3
 8014f9e:	440b      	add	r3, r1
 8014fa0:	3314      	adds	r3, #20
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b01      	cmp	r3, #1
 8014fa6:	d806      	bhi.n	8014fb6 <etharp_output_to_arp_index+0x32>
 8014fa8:	4b40      	ldr	r3, [pc, #256]	; (80150ac <etharp_output_to_arp_index+0x128>)
 8014faa:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014fae:	4940      	ldr	r1, [pc, #256]	; (80150b0 <etharp_output_to_arp_index+0x12c>)
 8014fb0:	4840      	ldr	r0, [pc, #256]	; (80150b4 <etharp_output_to_arp_index+0x130>)
 8014fb2:	f002 fa9d 	bl	80174f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014fb6:	79fa      	ldrb	r2, [r7, #7]
 8014fb8:	493b      	ldr	r1, [pc, #236]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8014fba:	4613      	mov	r3, r2
 8014fbc:	005b      	lsls	r3, r3, #1
 8014fbe:	4413      	add	r3, r2
 8014fc0:	00db      	lsls	r3, r3, #3
 8014fc2:	440b      	add	r3, r1
 8014fc4:	3314      	adds	r3, #20
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d153      	bne.n	8015074 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014fcc:	79fa      	ldrb	r2, [r7, #7]
 8014fce:	4936      	ldr	r1, [pc, #216]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8014fd0:	4613      	mov	r3, r2
 8014fd2:	005b      	lsls	r3, r3, #1
 8014fd4:	4413      	add	r3, r2
 8014fd6:	00db      	lsls	r3, r3, #3
 8014fd8:	440b      	add	r3, r1
 8014fda:	3312      	adds	r3, #18
 8014fdc:	881b      	ldrh	r3, [r3, #0]
 8014fde:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014fe2:	d919      	bls.n	8015018 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014fe4:	79fa      	ldrb	r2, [r7, #7]
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	005b      	lsls	r3, r3, #1
 8014fea:	4413      	add	r3, r2
 8014fec:	00db      	lsls	r3, r3, #3
 8014fee:	4a2e      	ldr	r2, [pc, #184]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8014ff0:	4413      	add	r3, r2
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f000 fb4c 	bl	8015694 <etharp_request>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d138      	bne.n	8015074 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015002:	79fa      	ldrb	r2, [r7, #7]
 8015004:	4928      	ldr	r1, [pc, #160]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8015006:	4613      	mov	r3, r2
 8015008:	005b      	lsls	r3, r3, #1
 801500a:	4413      	add	r3, r2
 801500c:	00db      	lsls	r3, r3, #3
 801500e:	440b      	add	r3, r1
 8015010:	3314      	adds	r3, #20
 8015012:	2203      	movs	r2, #3
 8015014:	701a      	strb	r2, [r3, #0]
 8015016:	e02d      	b.n	8015074 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015018:	79fa      	ldrb	r2, [r7, #7]
 801501a:	4923      	ldr	r1, [pc, #140]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	3312      	adds	r3, #18
 8015028:	881b      	ldrh	r3, [r3, #0]
 801502a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801502e:	d321      	bcc.n	8015074 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015030:	79fa      	ldrb	r2, [r7, #7]
 8015032:	4613      	mov	r3, r2
 8015034:	005b      	lsls	r3, r3, #1
 8015036:	4413      	add	r3, r2
 8015038:	00db      	lsls	r3, r3, #3
 801503a:	4a1b      	ldr	r2, [pc, #108]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 801503c:	4413      	add	r3, r2
 801503e:	1d19      	adds	r1, r3, #4
 8015040:	79fa      	ldrb	r2, [r7, #7]
 8015042:	4613      	mov	r3, r2
 8015044:	005b      	lsls	r3, r3, #1
 8015046:	4413      	add	r3, r2
 8015048:	00db      	lsls	r3, r3, #3
 801504a:	3308      	adds	r3, #8
 801504c:	4a16      	ldr	r2, [pc, #88]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 801504e:	4413      	add	r3, r2
 8015050:	3304      	adds	r3, #4
 8015052:	461a      	mov	r2, r3
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f000 fafb 	bl	8015650 <etharp_request_dst>
 801505a:	4603      	mov	r3, r0
 801505c:	2b00      	cmp	r3, #0
 801505e:	d109      	bne.n	8015074 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015060:	79fa      	ldrb	r2, [r7, #7]
 8015062:	4911      	ldr	r1, [pc, #68]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8015064:	4613      	mov	r3, r2
 8015066:	005b      	lsls	r3, r3, #1
 8015068:	4413      	add	r3, r2
 801506a:	00db      	lsls	r3, r3, #3
 801506c:	440b      	add	r3, r1
 801506e:	3314      	adds	r3, #20
 8015070:	2203      	movs	r2, #3
 8015072:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801507a:	79fa      	ldrb	r2, [r7, #7]
 801507c:	4613      	mov	r3, r2
 801507e:	005b      	lsls	r3, r3, #1
 8015080:	4413      	add	r3, r2
 8015082:	00db      	lsls	r3, r3, #3
 8015084:	3308      	adds	r3, #8
 8015086:	4a08      	ldr	r2, [pc, #32]	; (80150a8 <etharp_output_to_arp_index+0x124>)
 8015088:	4413      	add	r3, r2
 801508a:	3304      	adds	r3, #4
 801508c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015090:	9200      	str	r2, [sp, #0]
 8015092:	460a      	mov	r2, r1
 8015094:	68b9      	ldr	r1, [r7, #8]
 8015096:	68f8      	ldr	r0, [r7, #12]
 8015098:	f001 fe36 	bl	8016d08 <ethernet_output>
 801509c:	4603      	mov	r3, r0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	20011bf4 	.word	0x20011bf4
 80150ac:	0801d038 	.word	0x0801d038
 80150b0:	0801d1a8 	.word	0x0801d1a8
 80150b4:	0801d0b0 	.word	0x0801d0b0

080150b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b08a      	sub	sp, #40	; 0x28
 80150bc:	af02      	add	r7, sp, #8
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d106      	bne.n	80150dc <etharp_output+0x24>
 80150ce:	4b73      	ldr	r3, [pc, #460]	; (801529c <etharp_output+0x1e4>)
 80150d0:	f240 321e 	movw	r2, #798	; 0x31e
 80150d4:	4972      	ldr	r1, [pc, #456]	; (80152a0 <etharp_output+0x1e8>)
 80150d6:	4873      	ldr	r0, [pc, #460]	; (80152a4 <etharp_output+0x1ec>)
 80150d8:	f002 fa0a 	bl	80174f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d106      	bne.n	80150f0 <etharp_output+0x38>
 80150e2:	4b6e      	ldr	r3, [pc, #440]	; (801529c <etharp_output+0x1e4>)
 80150e4:	f240 321f 	movw	r2, #799	; 0x31f
 80150e8:	496f      	ldr	r1, [pc, #444]	; (80152a8 <etharp_output+0x1f0>)
 80150ea:	486e      	ldr	r0, [pc, #440]	; (80152a4 <etharp_output+0x1ec>)
 80150ec:	f002 fa00 	bl	80174f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d106      	bne.n	8015104 <etharp_output+0x4c>
 80150f6:	4b69      	ldr	r3, [pc, #420]	; (801529c <etharp_output+0x1e4>)
 80150f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80150fc:	496b      	ldr	r1, [pc, #428]	; (80152ac <etharp_output+0x1f4>)
 80150fe:	4869      	ldr	r0, [pc, #420]	; (80152a4 <etharp_output+0x1ec>)
 8015100:	f002 f9f6 	bl	80174f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	68f9      	ldr	r1, [r7, #12]
 801510a:	4618      	mov	r0, r3
 801510c:	f000 feee 	bl	8015eec <ip4_addr_isbroadcast_u32>
 8015110:	4603      	mov	r3, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d002      	beq.n	801511c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015116:	4b66      	ldr	r3, [pc, #408]	; (80152b0 <etharp_output+0x1f8>)
 8015118:	61fb      	str	r3, [r7, #28]
 801511a:	e0af      	b.n	801527c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015124:	2be0      	cmp	r3, #224	; 0xe0
 8015126:	d118      	bne.n	801515a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015128:	2301      	movs	r3, #1
 801512a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801512c:	2300      	movs	r3, #0
 801512e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015130:	235e      	movs	r3, #94	; 0x5e
 8015132:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	3301      	adds	r3, #1
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801513e:	b2db      	uxtb	r3, r3
 8015140:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	3302      	adds	r3, #2
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	3303      	adds	r3, #3
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015152:	f107 0310 	add.w	r3, r7, #16
 8015156:	61fb      	str	r3, [r7, #28]
 8015158:	e090      	b.n	801527c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681a      	ldr	r2, [r3, #0]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	3304      	adds	r3, #4
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	405a      	eors	r2, r3
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	3308      	adds	r3, #8
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	4013      	ands	r3, r2
 801516e:	2b00      	cmp	r3, #0
 8015170:	d012      	beq.n	8015198 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015178:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801517c:	4293      	cmp	r3, r2
 801517e:	d00b      	beq.n	8015198 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	330c      	adds	r3, #12
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d003      	beq.n	8015192 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	330c      	adds	r3, #12
 801518e:	61bb      	str	r3, [r7, #24]
 8015190:	e002      	b.n	8015198 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015192:	f06f 0303 	mvn.w	r3, #3
 8015196:	e07d      	b.n	8015294 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015198:	4b46      	ldr	r3, [pc, #280]	; (80152b4 <etharp_output+0x1fc>)
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	4619      	mov	r1, r3
 801519e:	4a46      	ldr	r2, [pc, #280]	; (80152b8 <etharp_output+0x200>)
 80151a0:	460b      	mov	r3, r1
 80151a2:	005b      	lsls	r3, r3, #1
 80151a4:	440b      	add	r3, r1
 80151a6:	00db      	lsls	r3, r3, #3
 80151a8:	4413      	add	r3, r2
 80151aa:	3314      	adds	r3, #20
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d925      	bls.n	80151fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80151b2:	4b40      	ldr	r3, [pc, #256]	; (80152b4 <etharp_output+0x1fc>)
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	4619      	mov	r1, r3
 80151b8:	4a3f      	ldr	r2, [pc, #252]	; (80152b8 <etharp_output+0x200>)
 80151ba:	460b      	mov	r3, r1
 80151bc:	005b      	lsls	r3, r3, #1
 80151be:	440b      	add	r3, r1
 80151c0:	00db      	lsls	r3, r3, #3
 80151c2:	4413      	add	r3, r2
 80151c4:	3308      	adds	r3, #8
 80151c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80151c8:	68fa      	ldr	r2, [r7, #12]
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d117      	bne.n	80151fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	681a      	ldr	r2, [r3, #0]
 80151d2:	4b38      	ldr	r3, [pc, #224]	; (80152b4 <etharp_output+0x1fc>)
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	4618      	mov	r0, r3
 80151d8:	4937      	ldr	r1, [pc, #220]	; (80152b8 <etharp_output+0x200>)
 80151da:	4603      	mov	r3, r0
 80151dc:	005b      	lsls	r3, r3, #1
 80151de:	4403      	add	r3, r0
 80151e0:	00db      	lsls	r3, r3, #3
 80151e2:	440b      	add	r3, r1
 80151e4:	3304      	adds	r3, #4
 80151e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d108      	bne.n	80151fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80151ec:	4b31      	ldr	r3, [pc, #196]	; (80152b4 <etharp_output+0x1fc>)
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	461a      	mov	r2, r3
 80151f2:	68b9      	ldr	r1, [r7, #8]
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f7ff fec5 	bl	8014f84 <etharp_output_to_arp_index>
 80151fa:	4603      	mov	r3, r0
 80151fc:	e04a      	b.n	8015294 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80151fe:	2300      	movs	r3, #0
 8015200:	75fb      	strb	r3, [r7, #23]
 8015202:	e031      	b.n	8015268 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015204:	7dfa      	ldrb	r2, [r7, #23]
 8015206:	492c      	ldr	r1, [pc, #176]	; (80152b8 <etharp_output+0x200>)
 8015208:	4613      	mov	r3, r2
 801520a:	005b      	lsls	r3, r3, #1
 801520c:	4413      	add	r3, r2
 801520e:	00db      	lsls	r3, r3, #3
 8015210:	440b      	add	r3, r1
 8015212:	3314      	adds	r3, #20
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	2b01      	cmp	r3, #1
 8015218:	d923      	bls.n	8015262 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801521a:	7dfa      	ldrb	r2, [r7, #23]
 801521c:	4926      	ldr	r1, [pc, #152]	; (80152b8 <etharp_output+0x200>)
 801521e:	4613      	mov	r3, r2
 8015220:	005b      	lsls	r3, r3, #1
 8015222:	4413      	add	r3, r2
 8015224:	00db      	lsls	r3, r3, #3
 8015226:	440b      	add	r3, r1
 8015228:	3308      	adds	r3, #8
 801522a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801522c:	68fa      	ldr	r2, [r7, #12]
 801522e:	429a      	cmp	r2, r3
 8015230:	d117      	bne.n	8015262 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	6819      	ldr	r1, [r3, #0]
 8015236:	7dfa      	ldrb	r2, [r7, #23]
 8015238:	481f      	ldr	r0, [pc, #124]	; (80152b8 <etharp_output+0x200>)
 801523a:	4613      	mov	r3, r2
 801523c:	005b      	lsls	r3, r3, #1
 801523e:	4413      	add	r3, r2
 8015240:	00db      	lsls	r3, r3, #3
 8015242:	4403      	add	r3, r0
 8015244:	3304      	adds	r3, #4
 8015246:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015248:	4299      	cmp	r1, r3
 801524a:	d10a      	bne.n	8015262 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801524c:	4a19      	ldr	r2, [pc, #100]	; (80152b4 <etharp_output+0x1fc>)
 801524e:	7dfb      	ldrb	r3, [r7, #23]
 8015250:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015252:	7dfb      	ldrb	r3, [r7, #23]
 8015254:	461a      	mov	r2, r3
 8015256:	68b9      	ldr	r1, [r7, #8]
 8015258:	68f8      	ldr	r0, [r7, #12]
 801525a:	f7ff fe93 	bl	8014f84 <etharp_output_to_arp_index>
 801525e:	4603      	mov	r3, r0
 8015260:	e018      	b.n	8015294 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015262:	7dfb      	ldrb	r3, [r7, #23]
 8015264:	3301      	adds	r3, #1
 8015266:	75fb      	strb	r3, [r7, #23]
 8015268:	7dfb      	ldrb	r3, [r7, #23]
 801526a:	2b09      	cmp	r3, #9
 801526c:	d9ca      	bls.n	8015204 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801526e:	68ba      	ldr	r2, [r7, #8]
 8015270:	69b9      	ldr	r1, [r7, #24]
 8015272:	68f8      	ldr	r0, [r7, #12]
 8015274:	f000 f822 	bl	80152bc <etharp_query>
 8015278:	4603      	mov	r3, r0
 801527a:	e00b      	b.n	8015294 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015286:	9300      	str	r3, [sp, #0]
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	68b9      	ldr	r1, [r7, #8]
 801528c:	68f8      	ldr	r0, [r7, #12]
 801528e:	f001 fd3b 	bl	8016d08 <ethernet_output>
 8015292:	4603      	mov	r3, r0
}
 8015294:	4618      	mov	r0, r3
 8015296:	3720      	adds	r7, #32
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	0801d038 	.word	0x0801d038
 80152a0:	0801d188 	.word	0x0801d188
 80152a4:	0801d0b0 	.word	0x0801d0b0
 80152a8:	0801d1d8 	.word	0x0801d1d8
 80152ac:	0801d178 	.word	0x0801d178
 80152b0:	0801d8d4 	.word	0x0801d8d4
 80152b4:	20011ce4 	.word	0x20011ce4
 80152b8:	20011bf4 	.word	0x20011bf4

080152bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b08c      	sub	sp, #48	; 0x30
 80152c0:	af02      	add	r7, sp, #8
 80152c2:	60f8      	str	r0, [r7, #12]
 80152c4:	60b9      	str	r1, [r7, #8]
 80152c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	3326      	adds	r3, #38	; 0x26
 80152cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80152ce:	23ff      	movs	r3, #255	; 0xff
 80152d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80152d4:	2300      	movs	r3, #0
 80152d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	68f9      	ldr	r1, [r7, #12]
 80152de:	4618      	mov	r0, r3
 80152e0:	f000 fe04 	bl	8015eec <ip4_addr_isbroadcast_u32>
 80152e4:	4603      	mov	r3, r0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d10c      	bne.n	8015304 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80152f2:	2be0      	cmp	r3, #224	; 0xe0
 80152f4:	d006      	beq.n	8015304 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d003      	beq.n	8015304 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d102      	bne.n	801530a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015304:	f06f 030f 	mvn.w	r3, #15
 8015308:	e101      	b.n	801550e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801530a:	68fa      	ldr	r2, [r7, #12]
 801530c:	2101      	movs	r1, #1
 801530e:	68b8      	ldr	r0, [r7, #8]
 8015310:	f7ff fb60 	bl	80149d4 <etharp_find_entry>
 8015314:	4603      	mov	r3, r0
 8015316:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015318:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801531c:	2b00      	cmp	r3, #0
 801531e:	da02      	bge.n	8015326 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015320:	8a7b      	ldrh	r3, [r7, #18]
 8015322:	b25b      	sxtb	r3, r3
 8015324:	e0f3      	b.n	801550e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015326:	8a7b      	ldrh	r3, [r7, #18]
 8015328:	2b7e      	cmp	r3, #126	; 0x7e
 801532a:	d906      	bls.n	801533a <etharp_query+0x7e>
 801532c:	4b7a      	ldr	r3, [pc, #488]	; (8015518 <etharp_query+0x25c>)
 801532e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015332:	497a      	ldr	r1, [pc, #488]	; (801551c <etharp_query+0x260>)
 8015334:	487a      	ldr	r0, [pc, #488]	; (8015520 <etharp_query+0x264>)
 8015336:	f002 f8db 	bl	80174f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801533a:	8a7b      	ldrh	r3, [r7, #18]
 801533c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801533e:	7c7a      	ldrb	r2, [r7, #17]
 8015340:	4978      	ldr	r1, [pc, #480]	; (8015524 <etharp_query+0x268>)
 8015342:	4613      	mov	r3, r2
 8015344:	005b      	lsls	r3, r3, #1
 8015346:	4413      	add	r3, r2
 8015348:	00db      	lsls	r3, r3, #3
 801534a:	440b      	add	r3, r1
 801534c:	3314      	adds	r3, #20
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d115      	bne.n	8015380 <etharp_query+0xc4>
    is_new_entry = 1;
 8015354:	2301      	movs	r3, #1
 8015356:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015358:	7c7a      	ldrb	r2, [r7, #17]
 801535a:	4972      	ldr	r1, [pc, #456]	; (8015524 <etharp_query+0x268>)
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	3314      	adds	r3, #20
 8015368:	2201      	movs	r2, #1
 801536a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801536c:	7c7a      	ldrb	r2, [r7, #17]
 801536e:	496d      	ldr	r1, [pc, #436]	; (8015524 <etharp_query+0x268>)
 8015370:	4613      	mov	r3, r2
 8015372:	005b      	lsls	r3, r3, #1
 8015374:	4413      	add	r3, r2
 8015376:	00db      	lsls	r3, r3, #3
 8015378:	440b      	add	r3, r1
 801537a:	3308      	adds	r3, #8
 801537c:	68fa      	ldr	r2, [r7, #12]
 801537e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015380:	7c7a      	ldrb	r2, [r7, #17]
 8015382:	4968      	ldr	r1, [pc, #416]	; (8015524 <etharp_query+0x268>)
 8015384:	4613      	mov	r3, r2
 8015386:	005b      	lsls	r3, r3, #1
 8015388:	4413      	add	r3, r2
 801538a:	00db      	lsls	r3, r3, #3
 801538c:	440b      	add	r3, r1
 801538e:	3314      	adds	r3, #20
 8015390:	781b      	ldrb	r3, [r3, #0]
 8015392:	2b01      	cmp	r3, #1
 8015394:	d011      	beq.n	80153ba <etharp_query+0xfe>
 8015396:	7c7a      	ldrb	r2, [r7, #17]
 8015398:	4962      	ldr	r1, [pc, #392]	; (8015524 <etharp_query+0x268>)
 801539a:	4613      	mov	r3, r2
 801539c:	005b      	lsls	r3, r3, #1
 801539e:	4413      	add	r3, r2
 80153a0:	00db      	lsls	r3, r3, #3
 80153a2:	440b      	add	r3, r1
 80153a4:	3314      	adds	r3, #20
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	2b01      	cmp	r3, #1
 80153aa:	d806      	bhi.n	80153ba <etharp_query+0xfe>
 80153ac:	4b5a      	ldr	r3, [pc, #360]	; (8015518 <etharp_query+0x25c>)
 80153ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 80153b2:	495d      	ldr	r1, [pc, #372]	; (8015528 <etharp_query+0x26c>)
 80153b4:	485a      	ldr	r0, [pc, #360]	; (8015520 <etharp_query+0x264>)
 80153b6:	f002 f89b 	bl	80174f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80153ba:	6a3b      	ldr	r3, [r7, #32]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <etharp_query+0x10a>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d10c      	bne.n	80153e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80153c6:	68b9      	ldr	r1, [r7, #8]
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f000 f963 	bl	8015694 <etharp_request>
 80153ce:	4603      	mov	r3, r0
 80153d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d102      	bne.n	80153e0 <etharp_query+0x124>
      return result;
 80153da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80153de:	e096      	b.n	801550e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d106      	bne.n	80153f4 <etharp_query+0x138>
 80153e6:	4b4c      	ldr	r3, [pc, #304]	; (8015518 <etharp_query+0x25c>)
 80153e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80153ec:	494f      	ldr	r1, [pc, #316]	; (801552c <etharp_query+0x270>)
 80153ee:	484c      	ldr	r0, [pc, #304]	; (8015520 <etharp_query+0x264>)
 80153f0:	f002 f87e 	bl	80174f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80153f4:	7c7a      	ldrb	r2, [r7, #17]
 80153f6:	494b      	ldr	r1, [pc, #300]	; (8015524 <etharp_query+0x268>)
 80153f8:	4613      	mov	r3, r2
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	4413      	add	r3, r2
 80153fe:	00db      	lsls	r3, r3, #3
 8015400:	440b      	add	r3, r1
 8015402:	3314      	adds	r3, #20
 8015404:	781b      	ldrb	r3, [r3, #0]
 8015406:	2b01      	cmp	r3, #1
 8015408:	d917      	bls.n	801543a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801540a:	4a49      	ldr	r2, [pc, #292]	; (8015530 <etharp_query+0x274>)
 801540c:	7c7b      	ldrb	r3, [r7, #17]
 801540e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015410:	7c7a      	ldrb	r2, [r7, #17]
 8015412:	4613      	mov	r3, r2
 8015414:	005b      	lsls	r3, r3, #1
 8015416:	4413      	add	r3, r2
 8015418:	00db      	lsls	r3, r3, #3
 801541a:	3308      	adds	r3, #8
 801541c:	4a41      	ldr	r2, [pc, #260]	; (8015524 <etharp_query+0x268>)
 801541e:	4413      	add	r3, r2
 8015420:	3304      	adds	r3, #4
 8015422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015426:	9200      	str	r2, [sp, #0]
 8015428:	697a      	ldr	r2, [r7, #20]
 801542a:	6879      	ldr	r1, [r7, #4]
 801542c:	68f8      	ldr	r0, [r7, #12]
 801542e:	f001 fc6b 	bl	8016d08 <ethernet_output>
 8015432:	4603      	mov	r3, r0
 8015434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015438:	e067      	b.n	801550a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801543a:	7c7a      	ldrb	r2, [r7, #17]
 801543c:	4939      	ldr	r1, [pc, #228]	; (8015524 <etharp_query+0x268>)
 801543e:	4613      	mov	r3, r2
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	4413      	add	r3, r2
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	440b      	add	r3, r1
 8015448:	3314      	adds	r3, #20
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	2b01      	cmp	r3, #1
 801544e:	d15c      	bne.n	801550a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015450:	2300      	movs	r3, #0
 8015452:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015458:	e01c      	b.n	8015494 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	895a      	ldrh	r2, [r3, #10]
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	891b      	ldrh	r3, [r3, #8]
 8015462:	429a      	cmp	r2, r3
 8015464:	d10a      	bne.n	801547c <etharp_query+0x1c0>
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d006      	beq.n	801547c <etharp_query+0x1c0>
 801546e:	4b2a      	ldr	r3, [pc, #168]	; (8015518 <etharp_query+0x25c>)
 8015470:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015474:	492f      	ldr	r1, [pc, #188]	; (8015534 <etharp_query+0x278>)
 8015476:	482a      	ldr	r0, [pc, #168]	; (8015520 <etharp_query+0x264>)
 8015478:	f002 f83a 	bl	80174f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	7b1b      	ldrb	r3, [r3, #12]
 8015480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015484:	2b00      	cmp	r3, #0
 8015486:	d002      	beq.n	801548e <etharp_query+0x1d2>
        copy_needed = 1;
 8015488:	2301      	movs	r3, #1
 801548a:	61bb      	str	r3, [r7, #24]
        break;
 801548c:	e005      	b.n	801549a <etharp_query+0x1de>
      }
      p = p->next;
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015494:	69fb      	ldr	r3, [r7, #28]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d1df      	bne.n	801545a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d007      	beq.n	80154b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80154a6:	200e      	movs	r0, #14
 80154a8:	f7f8 ff18 	bl	800e2dc <pbuf_clone>
 80154ac:	61f8      	str	r0, [r7, #28]
 80154ae:	e004      	b.n	80154ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80154b4:	69f8      	ldr	r0, [r7, #28]
 80154b6:	f7f8 fd4f 	bl	800df58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d021      	beq.n	8015504 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80154c0:	7c7a      	ldrb	r2, [r7, #17]
 80154c2:	4918      	ldr	r1, [pc, #96]	; (8015524 <etharp_query+0x268>)
 80154c4:	4613      	mov	r3, r2
 80154c6:	005b      	lsls	r3, r3, #1
 80154c8:	4413      	add	r3, r2
 80154ca:	00db      	lsls	r3, r3, #3
 80154cc:	440b      	add	r3, r1
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d00a      	beq.n	80154ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80154d4:	7c7a      	ldrb	r2, [r7, #17]
 80154d6:	4913      	ldr	r1, [pc, #76]	; (8015524 <etharp_query+0x268>)
 80154d8:	4613      	mov	r3, r2
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	4413      	add	r3, r2
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	440b      	add	r3, r1
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7f8 fc91 	bl	800de0c <pbuf_free>
      }
      arp_table[i].q = p;
 80154ea:	7c7a      	ldrb	r2, [r7, #17]
 80154ec:	490d      	ldr	r1, [pc, #52]	; (8015524 <etharp_query+0x268>)
 80154ee:	4613      	mov	r3, r2
 80154f0:	005b      	lsls	r3, r3, #1
 80154f2:	4413      	add	r3, r2
 80154f4:	00db      	lsls	r3, r3, #3
 80154f6:	440b      	add	r3, r1
 80154f8:	69fa      	ldr	r2, [r7, #28]
 80154fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80154fc:	2300      	movs	r3, #0
 80154fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015502:	e002      	b.n	801550a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015504:	23ff      	movs	r3, #255	; 0xff
 8015506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801550a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801550e:	4618      	mov	r0, r3
 8015510:	3728      	adds	r7, #40	; 0x28
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	0801d038 	.word	0x0801d038
 801551c:	0801d1e4 	.word	0x0801d1e4
 8015520:	0801d0b0 	.word	0x0801d0b0
 8015524:	20011bf4 	.word	0x20011bf4
 8015528:	0801d1f4 	.word	0x0801d1f4
 801552c:	0801d1d8 	.word	0x0801d1d8
 8015530:	20011ce4 	.word	0x20011ce4
 8015534:	0801d21c 	.word	0x0801d21c

08015538 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b08a      	sub	sp, #40	; 0x28
 801553c:	af02      	add	r7, sp, #8
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	607a      	str	r2, [r7, #4]
 8015544:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015546:	2300      	movs	r3, #0
 8015548:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d106      	bne.n	801555e <etharp_raw+0x26>
 8015550:	4b3a      	ldr	r3, [pc, #232]	; (801563c <etharp_raw+0x104>)
 8015552:	f240 4257 	movw	r2, #1111	; 0x457
 8015556:	493a      	ldr	r1, [pc, #232]	; (8015640 <etharp_raw+0x108>)
 8015558:	483a      	ldr	r0, [pc, #232]	; (8015644 <etharp_raw+0x10c>)
 801555a:	f001 ffc9 	bl	80174f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801555e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015562:	211c      	movs	r1, #28
 8015564:	200e      	movs	r0, #14
 8015566:	f7f8 f96d 	bl	800d844 <pbuf_alloc>
 801556a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801556c:	69bb      	ldr	r3, [r7, #24]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d102      	bne.n	8015578 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015576:	e05d      	b.n	8015634 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015578:	69bb      	ldr	r3, [r7, #24]
 801557a:	895b      	ldrh	r3, [r3, #10]
 801557c:	2b1b      	cmp	r3, #27
 801557e:	d806      	bhi.n	801558e <etharp_raw+0x56>
 8015580:	4b2e      	ldr	r3, [pc, #184]	; (801563c <etharp_raw+0x104>)
 8015582:	f240 4262 	movw	r2, #1122	; 0x462
 8015586:	4930      	ldr	r1, [pc, #192]	; (8015648 <etharp_raw+0x110>)
 8015588:	482e      	ldr	r0, [pc, #184]	; (8015644 <etharp_raw+0x10c>)
 801558a:	f001 ffb1 	bl	80174f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015594:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015596:	4618      	mov	r0, r3
 8015598:	f7f6 ff32 	bl	800c400 <lwip_htons>
 801559c:	4603      	mov	r3, r0
 801559e:	461a      	mov	r2, r3
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80155aa:	2b06      	cmp	r3, #6
 80155ac:	d006      	beq.n	80155bc <etharp_raw+0x84>
 80155ae:	4b23      	ldr	r3, [pc, #140]	; (801563c <etharp_raw+0x104>)
 80155b0:	f240 4269 	movw	r2, #1129	; 0x469
 80155b4:	4925      	ldr	r1, [pc, #148]	; (801564c <etharp_raw+0x114>)
 80155b6:	4823      	ldr	r0, [pc, #140]	; (8015644 <etharp_raw+0x10c>)
 80155b8:	f001 ff9a 	bl	80174f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	3308      	adds	r3, #8
 80155c0:	2206      	movs	r2, #6
 80155c2:	6839      	ldr	r1, [r7, #0]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f001 fece 	bl	8017366 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	3312      	adds	r3, #18
 80155ce:	2206      	movs	r2, #6
 80155d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155d2:	4618      	mov	r0, r3
 80155d4:	f001 fec7 	bl	8017366 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	330e      	adds	r3, #14
 80155dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155de:	6812      	ldr	r2, [r2, #0]
 80155e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	3318      	adds	r3, #24
 80155e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155e8:	6812      	ldr	r2, [r2, #0]
 80155ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	2200      	movs	r2, #0
 80155f0:	701a      	strb	r2, [r3, #0]
 80155f2:	2200      	movs	r2, #0
 80155f4:	f042 0201 	orr.w	r2, r2, #1
 80155f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	2200      	movs	r2, #0
 80155fe:	f042 0208 	orr.w	r2, r2, #8
 8015602:	709a      	strb	r2, [r3, #2]
 8015604:	2200      	movs	r2, #0
 8015606:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	2206      	movs	r2, #6
 801560c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	2204      	movs	r2, #4
 8015612:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015614:	f640 0306 	movw	r3, #2054	; 0x806
 8015618:	9300      	str	r3, [sp, #0]
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	68ba      	ldr	r2, [r7, #8]
 801561e:	69b9      	ldr	r1, [r7, #24]
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	f001 fb71 	bl	8016d08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015626:	69b8      	ldr	r0, [r7, #24]
 8015628:	f7f8 fbf0 	bl	800de0c <pbuf_free>
  p = NULL;
 801562c:	2300      	movs	r3, #0
 801562e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015630:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015634:	4618      	mov	r0, r3
 8015636:	3720      	adds	r7, #32
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}
 801563c:	0801d038 	.word	0x0801d038
 8015640:	0801d188 	.word	0x0801d188
 8015644:	0801d0b0 	.word	0x0801d0b0
 8015648:	0801d238 	.word	0x0801d238
 801564c:	0801d26c 	.word	0x0801d26c

08015650 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b088      	sub	sp, #32
 8015654:	af04      	add	r7, sp, #16
 8015656:	60f8      	str	r0, [r7, #12]
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801566c:	2201      	movs	r2, #1
 801566e:	9203      	str	r2, [sp, #12]
 8015670:	68ba      	ldr	r2, [r7, #8]
 8015672:	9202      	str	r2, [sp, #8]
 8015674:	4a06      	ldr	r2, [pc, #24]	; (8015690 <etharp_request_dst+0x40>)
 8015676:	9201      	str	r2, [sp, #4]
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	4603      	mov	r3, r0
 801567c:	687a      	ldr	r2, [r7, #4]
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	f7ff ff5a 	bl	8015538 <etharp_raw>
 8015684:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015686:	4618      	mov	r0, r3
 8015688:	3710      	adds	r7, #16
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}
 801568e:	bf00      	nop
 8015690:	0801d8dc 	.word	0x0801d8dc

08015694 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801569e:	4a05      	ldr	r2, [pc, #20]	; (80156b4 <etharp_request+0x20>)
 80156a0:	6839      	ldr	r1, [r7, #0]
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7ff ffd4 	bl	8015650 <etharp_request_dst>
 80156a8:	4603      	mov	r3, r0
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
 80156b2:	bf00      	nop
 80156b4:	0801d8d4 	.word	0x0801d8d4

080156b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b08e      	sub	sp, #56	; 0x38
 80156bc:	af04      	add	r7, sp, #16
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80156c2:	4b79      	ldr	r3, [pc, #484]	; (80158a8 <icmp_input+0x1f0>)
 80156c4:	689b      	ldr	r3, [r3, #8]
 80156c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	f003 030f 	and.w	r3, r3, #15
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	009b      	lsls	r3, r3, #2
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80156d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156da:	2b13      	cmp	r3, #19
 80156dc:	f240 80cd 	bls.w	801587a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	895b      	ldrh	r3, [r3, #10]
 80156e4:	2b03      	cmp	r3, #3
 80156e6:	f240 80ca 	bls.w	801587e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80156f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	f000 80b7 	beq.w	801586c <icmp_input+0x1b4>
 80156fe:	2b08      	cmp	r3, #8
 8015700:	f040 80b7 	bne.w	8015872 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015704:	4b69      	ldr	r3, [pc, #420]	; (80158ac <icmp_input+0x1f4>)
 8015706:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015708:	4b67      	ldr	r3, [pc, #412]	; (80158a8 <icmp_input+0x1f0>)
 801570a:	695b      	ldr	r3, [r3, #20]
 801570c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015710:	2be0      	cmp	r3, #224	; 0xe0
 8015712:	f000 80bb 	beq.w	801588c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015716:	4b64      	ldr	r3, [pc, #400]	; (80158a8 <icmp_input+0x1f0>)
 8015718:	695b      	ldr	r3, [r3, #20]
 801571a:	4a63      	ldr	r2, [pc, #396]	; (80158a8 <icmp_input+0x1f0>)
 801571c:	6812      	ldr	r2, [r2, #0]
 801571e:	4611      	mov	r1, r2
 8015720:	4618      	mov	r0, r3
 8015722:	f000 fbe3 	bl	8015eec <ip4_addr_isbroadcast_u32>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	f040 80b1 	bne.w	8015890 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	891b      	ldrh	r3, [r3, #8]
 8015732:	2b07      	cmp	r3, #7
 8015734:	f240 80a5 	bls.w	8015882 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801573a:	330e      	adds	r3, #14
 801573c:	4619      	mov	r1, r3
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7f8 face 	bl	800dce0 <pbuf_add_header>
 8015744:	4603      	mov	r3, r0
 8015746:	2b00      	cmp	r3, #0
 8015748:	d04b      	beq.n	80157e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	891a      	ldrh	r2, [r3, #8]
 801574e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015750:	4413      	add	r3, r2
 8015752:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	891b      	ldrh	r3, [r3, #8]
 8015758:	8b7a      	ldrh	r2, [r7, #26]
 801575a:	429a      	cmp	r2, r3
 801575c:	f0c0 809a 	bcc.w	8015894 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015760:	8b7b      	ldrh	r3, [r7, #26]
 8015762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015766:	4619      	mov	r1, r3
 8015768:	200e      	movs	r0, #14
 801576a:	f7f8 f86b 	bl	800d844 <pbuf_alloc>
 801576e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	2b00      	cmp	r3, #0
 8015774:	f000 8090 	beq.w	8015898 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	895b      	ldrh	r3, [r3, #10]
 801577c:	461a      	mov	r2, r3
 801577e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015780:	3308      	adds	r3, #8
 8015782:	429a      	cmp	r2, r3
 8015784:	d203      	bcs.n	801578e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015786:	6978      	ldr	r0, [r7, #20]
 8015788:	f7f8 fb40 	bl	800de0c <pbuf_free>
          goto icmperr;
 801578c:	e085      	b.n	801589a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015796:	4618      	mov	r0, r3
 8015798:	f001 fde5 	bl	8017366 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801579c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801579e:	4619      	mov	r1, r3
 80157a0:	6978      	ldr	r0, [r7, #20]
 80157a2:	f7f8 faad 	bl	800dd00 <pbuf_remove_header>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d009      	beq.n	80157c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80157ac:	4b40      	ldr	r3, [pc, #256]	; (80158b0 <icmp_input+0x1f8>)
 80157ae:	22b6      	movs	r2, #182	; 0xb6
 80157b0:	4940      	ldr	r1, [pc, #256]	; (80158b4 <icmp_input+0x1fc>)
 80157b2:	4841      	ldr	r0, [pc, #260]	; (80158b8 <icmp_input+0x200>)
 80157b4:	f001 fe9c 	bl	80174f0 <iprintf>
          pbuf_free(r);
 80157b8:	6978      	ldr	r0, [r7, #20]
 80157ba:	f7f8 fb27 	bl	800de0c <pbuf_free>
          goto icmperr;
 80157be:	e06c      	b.n	801589a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80157c0:	6879      	ldr	r1, [r7, #4]
 80157c2:	6978      	ldr	r0, [r7, #20]
 80157c4:	f7f8 fc46 	bl	800e054 <pbuf_copy>
 80157c8:	4603      	mov	r3, r0
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d003      	beq.n	80157d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80157ce:	6978      	ldr	r0, [r7, #20]
 80157d0:	f7f8 fb1c 	bl	800de0c <pbuf_free>
          goto icmperr;
 80157d4:	e061      	b.n	801589a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f7f8 fb18 	bl	800de0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	607b      	str	r3, [r7, #4]
 80157e0:	e00f      	b.n	8015802 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80157e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157e4:	330e      	adds	r3, #14
 80157e6:	4619      	mov	r1, r3
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f7f8 fa89 	bl	800dd00 <pbuf_remove_header>
 80157ee:	4603      	mov	r3, r0
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d006      	beq.n	8015802 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80157f4:	4b2e      	ldr	r3, [pc, #184]	; (80158b0 <icmp_input+0x1f8>)
 80157f6:	22c7      	movs	r2, #199	; 0xc7
 80157f8:	4930      	ldr	r1, [pc, #192]	; (80158bc <icmp_input+0x204>)
 80157fa:	482f      	ldr	r0, [pc, #188]	; (80158b8 <icmp_input+0x200>)
 80157fc:	f001 fe78 	bl	80174f0 <iprintf>
          goto icmperr;
 8015800:	e04b      	b.n	801589a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801580a:	4619      	mov	r1, r3
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f7f8 fa67 	bl	800dce0 <pbuf_add_header>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d12b      	bne.n	8015870 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	685b      	ldr	r3, [r3, #4]
 801581c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801581e:	69fb      	ldr	r3, [r7, #28]
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015826:	4b20      	ldr	r3, [pc, #128]	; (80158a8 <icmp_input+0x1f0>)
 8015828:	691a      	ldr	r2, [r3, #16]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	2200      	movs	r2, #0
 8015832:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015834:	693b      	ldr	r3, [r7, #16]
 8015836:	2200      	movs	r2, #0
 8015838:	709a      	strb	r2, [r3, #2]
 801583a:	2200      	movs	r2, #0
 801583c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	22ff      	movs	r2, #255	; 0xff
 8015842:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	2200      	movs	r2, #0
 8015848:	729a      	strb	r2, [r3, #10]
 801584a:	2200      	movs	r2, #0
 801584c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	9302      	str	r3, [sp, #8]
 8015852:	2301      	movs	r3, #1
 8015854:	9301      	str	r3, [sp, #4]
 8015856:	2300      	movs	r3, #0
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	23ff      	movs	r3, #255	; 0xff
 801585c:	2200      	movs	r2, #0
 801585e:	69f9      	ldr	r1, [r7, #28]
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f000 fa6b 	bl	8015d3c <ip4_output_if>
 8015866:	4603      	mov	r3, r0
 8015868:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801586a:	e001      	b.n	8015870 <icmp_input+0x1b8>
      break;
 801586c:	bf00      	nop
 801586e:	e000      	b.n	8015872 <icmp_input+0x1ba>
      break;
 8015870:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f7f8 faca 	bl	800de0c <pbuf_free>
  return;
 8015878:	e013      	b.n	80158a2 <icmp_input+0x1ea>
    goto lenerr;
 801587a:	bf00      	nop
 801587c:	e002      	b.n	8015884 <icmp_input+0x1cc>
    goto lenerr;
 801587e:	bf00      	nop
 8015880:	e000      	b.n	8015884 <icmp_input+0x1cc>
        goto lenerr;
 8015882:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f7f8 fac1 	bl	800de0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801588a:	e00a      	b.n	80158a2 <icmp_input+0x1ea>
        goto icmperr;
 801588c:	bf00      	nop
 801588e:	e004      	b.n	801589a <icmp_input+0x1e2>
        goto icmperr;
 8015890:	bf00      	nop
 8015892:	e002      	b.n	801589a <icmp_input+0x1e2>
          goto icmperr;
 8015894:	bf00      	nop
 8015896:	e000      	b.n	801589a <icmp_input+0x1e2>
          goto icmperr;
 8015898:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f7f8 fab6 	bl	800de0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80158a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80158a2:	3728      	adds	r7, #40	; 0x28
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	20009b0c 	.word	0x20009b0c
 80158ac:	20009b20 	.word	0x20009b20
 80158b0:	0801d2b0 	.word	0x0801d2b0
 80158b4:	0801d2e8 	.word	0x0801d2e8
 80158b8:	0801d320 	.word	0x0801d320
 80158bc:	0801d348 	.word	0x0801d348

080158c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	460b      	mov	r3, r1
 80158ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80158cc:	78fb      	ldrb	r3, [r7, #3]
 80158ce:	461a      	mov	r2, r3
 80158d0:	2103      	movs	r1, #3
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 f814 	bl	8015900 <icmp_send_response>
}
 80158d8:	bf00      	nop
 80158da:	3708      	adds	r7, #8
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	460b      	mov	r3, r1
 80158ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80158ec:	78fb      	ldrb	r3, [r7, #3]
 80158ee:	461a      	mov	r2, r3
 80158f0:	210b      	movs	r1, #11
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 f804 	bl	8015900 <icmp_send_response>
}
 80158f8:	bf00      	nop
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08c      	sub	sp, #48	; 0x30
 8015904:	af04      	add	r7, sp, #16
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	460b      	mov	r3, r1
 801590a:	70fb      	strb	r3, [r7, #3]
 801590c:	4613      	mov	r3, r2
 801590e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015910:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015914:	2124      	movs	r1, #36	; 0x24
 8015916:	2022      	movs	r0, #34	; 0x22
 8015918:	f7f7 ff94 	bl	800d844 <pbuf_alloc>
 801591c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d04c      	beq.n	80159be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015924:	69fb      	ldr	r3, [r7, #28]
 8015926:	895b      	ldrh	r3, [r3, #10]
 8015928:	2b23      	cmp	r3, #35	; 0x23
 801592a:	d806      	bhi.n	801593a <icmp_send_response+0x3a>
 801592c:	4b26      	ldr	r3, [pc, #152]	; (80159c8 <icmp_send_response+0xc8>)
 801592e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015932:	4926      	ldr	r1, [pc, #152]	; (80159cc <icmp_send_response+0xcc>)
 8015934:	4826      	ldr	r0, [pc, #152]	; (80159d0 <icmp_send_response+0xd0>)
 8015936:	f001 fddb 	bl	80174f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	78fa      	ldrb	r2, [r7, #3]
 801594a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	78ba      	ldrb	r2, [r7, #2]
 8015950:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	2200      	movs	r2, #0
 8015956:	711a      	strb	r2, [r3, #4]
 8015958:	2200      	movs	r2, #0
 801595a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	2200      	movs	r2, #0
 8015960:	719a      	strb	r2, [r3, #6]
 8015962:	2200      	movs	r2, #0
 8015964:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015966:	69fb      	ldr	r3, [r7, #28]
 8015968:	685b      	ldr	r3, [r3, #4]
 801596a:	f103 0008 	add.w	r0, r3, #8
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	685b      	ldr	r3, [r3, #4]
 8015972:	221c      	movs	r2, #28
 8015974:	4619      	mov	r1, r3
 8015976:	f001 fcf6 	bl	8017366 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	68db      	ldr	r3, [r3, #12]
 801597e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015980:	f107 030c 	add.w	r3, r7, #12
 8015984:	4618      	mov	r0, r3
 8015986:	f000 f825 	bl	80159d4 <ip4_route>
 801598a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d011      	beq.n	80159b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	2200      	movs	r2, #0
 8015996:	709a      	strb	r2, [r3, #2]
 8015998:	2200      	movs	r2, #0
 801599a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801599c:	f107 020c 	add.w	r2, r7, #12
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	9302      	str	r3, [sp, #8]
 80159a4:	2301      	movs	r3, #1
 80159a6:	9301      	str	r3, [sp, #4]
 80159a8:	2300      	movs	r3, #0
 80159aa:	9300      	str	r3, [sp, #0]
 80159ac:	23ff      	movs	r3, #255	; 0xff
 80159ae:	2100      	movs	r1, #0
 80159b0:	69f8      	ldr	r0, [r7, #28]
 80159b2:	f000 f9c3 	bl	8015d3c <ip4_output_if>
  }
  pbuf_free(q);
 80159b6:	69f8      	ldr	r0, [r7, #28]
 80159b8:	f7f8 fa28 	bl	800de0c <pbuf_free>
 80159bc:	e000      	b.n	80159c0 <icmp_send_response+0xc0>
    return;
 80159be:	bf00      	nop
}
 80159c0:	3720      	adds	r7, #32
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	0801d2b0 	.word	0x0801d2b0
 80159cc:	0801d37c 	.word	0x0801d37c
 80159d0:	0801d320 	.word	0x0801d320

080159d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80159d4:	b480      	push	{r7}
 80159d6:	b085      	sub	sp, #20
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80159dc:	4b33      	ldr	r3, [pc, #204]	; (8015aac <ip4_route+0xd8>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	60fb      	str	r3, [r7, #12]
 80159e2:	e036      	b.n	8015a52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159ea:	f003 0301 	and.w	r3, r3, #1
 80159ee:	b2db      	uxtb	r3, r3
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d02b      	beq.n	8015a4c <ip4_route+0x78>
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159fa:	089b      	lsrs	r3, r3, #2
 80159fc:	f003 0301 	and.w	r3, r3, #1
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d022      	beq.n	8015a4c <ip4_route+0x78>
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	3304      	adds	r3, #4
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d01d      	beq.n	8015a4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	3304      	adds	r3, #4
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	405a      	eors	r2, r3
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	3308      	adds	r3, #8
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	4013      	ands	r3, r2
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d101      	bne.n	8015a2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	e038      	b.n	8015a9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a32:	f003 0302 	and.w	r3, r3, #2
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d108      	bne.n	8015a4c <ip4_route+0x78>
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	330c      	adds	r3, #12
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d101      	bne.n	8015a4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	e028      	b.n	8015a9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	60fb      	str	r3, [r7, #12]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d1c5      	bne.n	80159e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015a58:	4b15      	ldr	r3, [pc, #84]	; (8015ab0 <ip4_route+0xdc>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d01a      	beq.n	8015a96 <ip4_route+0xc2>
 8015a60:	4b13      	ldr	r3, [pc, #76]	; (8015ab0 <ip4_route+0xdc>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a68:	f003 0301 	and.w	r3, r3, #1
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d012      	beq.n	8015a96 <ip4_route+0xc2>
 8015a70:	4b0f      	ldr	r3, [pc, #60]	; (8015ab0 <ip4_route+0xdc>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a78:	f003 0304 	and.w	r3, r3, #4
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00a      	beq.n	8015a96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015a80:	4b0b      	ldr	r3, [pc, #44]	; (8015ab0 <ip4_route+0xdc>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	3304      	adds	r3, #4
 8015a86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d004      	beq.n	8015a96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b7f      	cmp	r3, #127	; 0x7f
 8015a94:	d101      	bne.n	8015a9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015a96:	2300      	movs	r3, #0
 8015a98:	e001      	b.n	8015a9e <ip4_route+0xca>
  }

  return netif_default;
 8015a9a:	4b05      	ldr	r3, [pc, #20]	; (8015ab0 <ip4_route+0xdc>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3714      	adds	r7, #20
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa8:	4770      	bx	lr
 8015aaa:	bf00      	nop
 8015aac:	20011b8c 	.word	0x20011b8c
 8015ab0:	20011b90 	.word	0x20011b90

08015ab4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ac2:	f003 0301 	and.w	r3, r3, #1
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d016      	beq.n	8015afa <ip4_input_accept+0x46>
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	3304      	adds	r3, #4
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d011      	beq.n	8015afa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015ad6:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <ip4_input_accept+0x50>)
 8015ad8:	695a      	ldr	r2, [r3, #20]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	3304      	adds	r3, #4
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d008      	beq.n	8015af6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015ae4:	4b07      	ldr	r3, [pc, #28]	; (8015b04 <ip4_input_accept+0x50>)
 8015ae6:	695b      	ldr	r3, [r3, #20]
 8015ae8:	6879      	ldr	r1, [r7, #4]
 8015aea:	4618      	mov	r0, r3
 8015aec:	f000 f9fe 	bl	8015eec <ip4_addr_isbroadcast_u32>
 8015af0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d001      	beq.n	8015afa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015af6:	2301      	movs	r3, #1
 8015af8:	e000      	b.n	8015afc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015afa:	2300      	movs	r3, #0
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	20009b0c 	.word	0x20009b0c

08015b08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b086      	sub	sp, #24
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	091b      	lsrs	r3, r3, #4
 8015b1e:	b2db      	uxtb	r3, r3
 8015b20:	2b04      	cmp	r3, #4
 8015b22:	d004      	beq.n	8015b2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7f8 f971 	bl	800de0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	e0fd      	b.n	8015d2a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	f003 030f 	and.w	r3, r3, #15
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	885b      	ldrh	r3, [r3, #2]
 8015b42:	b29b      	uxth	r3, r3
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7f6 fc5b 	bl	800c400 <lwip_htons>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	891b      	ldrh	r3, [r3, #8]
 8015b52:	89ba      	ldrh	r2, [r7, #12]
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d204      	bcs.n	8015b62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015b58:	89bb      	ldrh	r3, [r7, #12]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f7f7 ffcf 	bl	800db00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	895b      	ldrh	r3, [r3, #10]
 8015b66:	89fa      	ldrh	r2, [r7, #14]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d807      	bhi.n	8015b7c <ip4_input+0x74>
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	891b      	ldrh	r3, [r3, #8]
 8015b70:	89ba      	ldrh	r2, [r7, #12]
 8015b72:	429a      	cmp	r2, r3
 8015b74:	d802      	bhi.n	8015b7c <ip4_input+0x74>
 8015b76:	89fb      	ldrh	r3, [r7, #14]
 8015b78:	2b13      	cmp	r3, #19
 8015b7a:	d804      	bhi.n	8015b86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7f8 f945 	bl	800de0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015b82:	2300      	movs	r3, #0
 8015b84:	e0d1      	b.n	8015d2a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	691b      	ldr	r3, [r3, #16]
 8015b8a:	4a6a      	ldr	r2, [pc, #424]	; (8015d34 <ip4_input+0x22c>)
 8015b8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	4a68      	ldr	r2, [pc, #416]	; (8015d34 <ip4_input+0x22c>)
 8015b94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b96:	4b67      	ldr	r3, [pc, #412]	; (8015d34 <ip4_input+0x22c>)
 8015b98:	695b      	ldr	r3, [r3, #20]
 8015b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b9e:	2be0      	cmp	r3, #224	; 0xe0
 8015ba0:	d112      	bne.n	8015bc8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ba8:	f003 0301 	and.w	r3, r3, #1
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d007      	beq.n	8015bc2 <ip4_input+0xba>
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d002      	beq.n	8015bc2 <ip4_input+0xba>
      netif = inp;
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	613b      	str	r3, [r7, #16]
 8015bc0:	e02a      	b.n	8015c18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	613b      	str	r3, [r7, #16]
 8015bc6:	e027      	b.n	8015c18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015bc8:	6838      	ldr	r0, [r7, #0]
 8015bca:	f7ff ff73 	bl	8015ab4 <ip4_input_accept>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d002      	beq.n	8015bda <ip4_input+0xd2>
      netif = inp;
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	613b      	str	r3, [r7, #16]
 8015bd8:	e01e      	b.n	8015c18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015bde:	4b55      	ldr	r3, [pc, #340]	; (8015d34 <ip4_input+0x22c>)
 8015be0:	695b      	ldr	r3, [r3, #20]
 8015be2:	b2db      	uxtb	r3, r3
 8015be4:	2b7f      	cmp	r3, #127	; 0x7f
 8015be6:	d017      	beq.n	8015c18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015be8:	4b53      	ldr	r3, [pc, #332]	; (8015d38 <ip4_input+0x230>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	613b      	str	r3, [r7, #16]
 8015bee:	e00e      	b.n	8015c0e <ip4_input+0x106>
          if (netif == inp) {
 8015bf0:	693a      	ldr	r2, [r7, #16]
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d006      	beq.n	8015c06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015bf8:	6938      	ldr	r0, [r7, #16]
 8015bfa:	f7ff ff5b 	bl	8015ab4 <ip4_input_accept>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d108      	bne.n	8015c16 <ip4_input+0x10e>
 8015c04:	e000      	b.n	8015c08 <ip4_input+0x100>
            continue;
 8015c06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	613b      	str	r3, [r7, #16]
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d1ed      	bne.n	8015bf0 <ip4_input+0xe8>
 8015c14:	e000      	b.n	8015c18 <ip4_input+0x110>
            break;
 8015c16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015c18:	4b46      	ldr	r3, [pc, #280]	; (8015d34 <ip4_input+0x22c>)
 8015c1a:	691b      	ldr	r3, [r3, #16]
 8015c1c:	6839      	ldr	r1, [r7, #0]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f000 f964 	bl	8015eec <ip4_addr_isbroadcast_u32>
 8015c24:	4603      	mov	r3, r0
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d105      	bne.n	8015c36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015c2a:	4b42      	ldr	r3, [pc, #264]	; (8015d34 <ip4_input+0x22c>)
 8015c2c:	691b      	ldr	r3, [r3, #16]
 8015c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015c32:	2be0      	cmp	r3, #224	; 0xe0
 8015c34:	d104      	bne.n	8015c40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	f7f8 f8e8 	bl	800de0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	e074      	b.n	8015d2a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d104      	bne.n	8015c50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f7f8 f8e0 	bl	800de0c <pbuf_free>
    return ERR_OK;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	e06c      	b.n	8015d2a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	88db      	ldrh	r3, [r3, #6]
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	461a      	mov	r2, r3
 8015c58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015c5c:	4013      	ands	r3, r2
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d00b      	beq.n	8015c7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 fc88 	bl	8016578 <ip4_reass>
 8015c68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d101      	bne.n	8015c74 <ip4_input+0x16c>
      return ERR_OK;
 8015c70:	2300      	movs	r3, #0
 8015c72:	e05a      	b.n	8015d2a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015c7a:	4a2e      	ldr	r2, [pc, #184]	; (8015d34 <ip4_input+0x22c>)
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015c80:	4a2c      	ldr	r2, [pc, #176]	; (8015d34 <ip4_input+0x22c>)
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015c86:	4a2b      	ldr	r2, [pc, #172]	; (8015d34 <ip4_input+0x22c>)
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	f003 030f 	and.w	r3, r3, #15
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	4b25      	ldr	r3, [pc, #148]	; (8015d34 <ip4_input+0x22c>)
 8015c9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015ca0:	89fb      	ldrh	r3, [r7, #14]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f7f8 f82b 	bl	800dd00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	7a5b      	ldrb	r3, [r3, #9]
 8015cae:	2b01      	cmp	r3, #1
 8015cb0:	d006      	beq.n	8015cc0 <ip4_input+0x1b8>
 8015cb2:	2b06      	cmp	r3, #6
 8015cb4:	d109      	bne.n	8015cca <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015cb6:	6839      	ldr	r1, [r7, #0]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f7fa f9fb 	bl	80100b4 <tcp_input>
        break;
 8015cbe:	e021      	b.n	8015d04 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015cc0:	6839      	ldr	r1, [r7, #0]
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f7ff fcf8 	bl	80156b8 <icmp_input>
        break;
 8015cc8:	e01c      	b.n	8015d04 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015cca:	4b1a      	ldr	r3, [pc, #104]	; (8015d34 <ip4_input+0x22c>)
 8015ccc:	695b      	ldr	r3, [r3, #20]
 8015cce:	6939      	ldr	r1, [r7, #16]
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f000 f90b 	bl	8015eec <ip4_addr_isbroadcast_u32>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d10f      	bne.n	8015cfc <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015cdc:	4b15      	ldr	r3, [pc, #84]	; (8015d34 <ip4_input+0x22c>)
 8015cde:	695b      	ldr	r3, [r3, #20]
 8015ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ce4:	2be0      	cmp	r3, #224	; 0xe0
 8015ce6:	d009      	beq.n	8015cfc <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015cec:	4619      	mov	r1, r3
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f7f8 f879 	bl	800dde6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015cf4:	2102      	movs	r1, #2
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f7ff fde2 	bl	80158c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f7f8 f885 	bl	800de0c <pbuf_free>
        break;
 8015d02:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015d04:	4b0b      	ldr	r3, [pc, #44]	; (8015d34 <ip4_input+0x22c>)
 8015d06:	2200      	movs	r2, #0
 8015d08:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015d0a:	4b0a      	ldr	r3, [pc, #40]	; (8015d34 <ip4_input+0x22c>)
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015d10:	4b08      	ldr	r3, [pc, #32]	; (8015d34 <ip4_input+0x22c>)
 8015d12:	2200      	movs	r2, #0
 8015d14:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015d16:	4b07      	ldr	r3, [pc, #28]	; (8015d34 <ip4_input+0x22c>)
 8015d18:	2200      	movs	r2, #0
 8015d1a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015d1c:	4b05      	ldr	r3, [pc, #20]	; (8015d34 <ip4_input+0x22c>)
 8015d1e:	2200      	movs	r2, #0
 8015d20:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015d22:	4b04      	ldr	r3, [pc, #16]	; (8015d34 <ip4_input+0x22c>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015d28:	2300      	movs	r3, #0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3718      	adds	r7, #24
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	20009b0c 	.word	0x20009b0c
 8015d38:	20011b8c 	.word	0x20011b8c

08015d3c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b08a      	sub	sp, #40	; 0x28
 8015d40:	af04      	add	r7, sp, #16
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	607a      	str	r2, [r7, #4]
 8015d48:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d009      	beq.n	8015d68 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d003      	beq.n	8015d62 <ip4_output_if+0x26>
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d102      	bne.n	8015d68 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d64:	3304      	adds	r3, #4
 8015d66:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015d68:	78fa      	ldrb	r2, [r7, #3]
 8015d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6c:	9302      	str	r3, [sp, #8]
 8015d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d72:	9301      	str	r3, [sp, #4]
 8015d74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d78:	9300      	str	r3, [sp, #0]
 8015d7a:	4613      	mov	r3, r2
 8015d7c:	687a      	ldr	r2, [r7, #4]
 8015d7e:	6979      	ldr	r1, [r7, #20]
 8015d80:	68f8      	ldr	r0, [r7, #12]
 8015d82:	f000 f805 	bl	8015d90 <ip4_output_if_src>
 8015d86:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3718      	adds	r7, #24
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b088      	sub	sp, #32
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
 8015d9c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	7b9b      	ldrb	r3, [r3, #14]
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	d006      	beq.n	8015db4 <ip4_output_if_src+0x24>
 8015da6:	4b4b      	ldr	r3, [pc, #300]	; (8015ed4 <ip4_output_if_src+0x144>)
 8015da8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015dac:	494a      	ldr	r1, [pc, #296]	; (8015ed8 <ip4_output_if_src+0x148>)
 8015dae:	484b      	ldr	r0, [pc, #300]	; (8015edc <ip4_output_if_src+0x14c>)
 8015db0:	f001 fb9e 	bl	80174f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d060      	beq.n	8015e7c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015dba:	2314      	movs	r3, #20
 8015dbc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015dbe:	2114      	movs	r1, #20
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	f7f7 ff8d 	bl	800dce0 <pbuf_add_header>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d002      	beq.n	8015dd2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015dcc:	f06f 0301 	mvn.w	r3, #1
 8015dd0:	e07c      	b.n	8015ecc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	895b      	ldrh	r3, [r3, #10]
 8015ddc:	2b13      	cmp	r3, #19
 8015dde:	d806      	bhi.n	8015dee <ip4_output_if_src+0x5e>
 8015de0:	4b3c      	ldr	r3, [pc, #240]	; (8015ed4 <ip4_output_if_src+0x144>)
 8015de2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015de6:	493e      	ldr	r1, [pc, #248]	; (8015ee0 <ip4_output_if_src+0x150>)
 8015de8:	483c      	ldr	r0, [pc, #240]	; (8015edc <ip4_output_if_src+0x14c>)
 8015dea:	f001 fb81 	bl	80174f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	78fa      	ldrb	r2, [r7, #3]
 8015df2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015dfa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015e04:	8b7b      	ldrh	r3, [r7, #26]
 8015e06:	089b      	lsrs	r3, r3, #2
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e10:	b2da      	uxtb	r2, r3
 8015e12:	69fb      	ldr	r3, [r7, #28]
 8015e14:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015e16:	69fb      	ldr	r3, [r7, #28]
 8015e18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015e1c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	891b      	ldrh	r3, [r3, #8]
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7f6 faec 	bl	800c400 <lwip_htons>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	69fb      	ldr	r3, [r7, #28]
 8015e2e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	2200      	movs	r2, #0
 8015e34:	719a      	strb	r2, [r3, #6]
 8015e36:	2200      	movs	r2, #0
 8015e38:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015e3a:	4b2a      	ldr	r3, [pc, #168]	; (8015ee4 <ip4_output_if_src+0x154>)
 8015e3c:	881b      	ldrh	r3, [r3, #0]
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7f6 fade 	bl	800c400 <lwip_htons>
 8015e44:	4603      	mov	r3, r0
 8015e46:	461a      	mov	r2, r3
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015e4c:	4b25      	ldr	r3, [pc, #148]	; (8015ee4 <ip4_output_if_src+0x154>)
 8015e4e:	881b      	ldrh	r3, [r3, #0]
 8015e50:	3301      	adds	r3, #1
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	4b23      	ldr	r3, [pc, #140]	; (8015ee4 <ip4_output_if_src+0x154>)
 8015e56:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d104      	bne.n	8015e68 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015e5e:	4b22      	ldr	r3, [pc, #136]	; (8015ee8 <ip4_output_if_src+0x158>)
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	60da      	str	r2, [r3, #12]
 8015e66:	e003      	b.n	8015e70 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	2200      	movs	r2, #0
 8015e74:	729a      	strb	r2, [r3, #10]
 8015e76:	2200      	movs	r2, #0
 8015e78:	72da      	strb	r2, [r3, #11]
 8015e7a:	e00f      	b.n	8015e9c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	895b      	ldrh	r3, [r3, #10]
 8015e80:	2b13      	cmp	r3, #19
 8015e82:	d802      	bhi.n	8015e8a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e84:	f06f 0301 	mvn.w	r3, #1
 8015e88:	e020      	b.n	8015ecc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015e90:	69fb      	ldr	r3, [r7, #28]
 8015e92:	691b      	ldr	r3, [r3, #16]
 8015e94:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015e96:	f107 0314 	add.w	r3, r7, #20
 8015e9a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d00c      	beq.n	8015ebe <ip4_output_if_src+0x12e>
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	891a      	ldrh	r2, [r3, #8]
 8015ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d906      	bls.n	8015ebe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015eb0:	687a      	ldr	r2, [r7, #4]
 8015eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015eb4:	68f8      	ldr	r0, [r7, #12]
 8015eb6:	f000 fd53 	bl	8016960 <ip4_frag>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	e006      	b.n	8015ecc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec0:	695b      	ldr	r3, [r3, #20]
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	68f9      	ldr	r1, [r7, #12]
 8015ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ec8:	4798      	blx	r3
 8015eca:	4603      	mov	r3, r0
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	3720      	adds	r7, #32
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}
 8015ed4:	0801d3a8 	.word	0x0801d3a8
 8015ed8:	0801d3dc 	.word	0x0801d3dc
 8015edc:	0801d3e8 	.word	0x0801d3e8
 8015ee0:	0801d410 	.word	0x0801d410
 8015ee4:	20011ce6 	.word	0x20011ce6
 8015ee8:	0801d8d0 	.word	0x0801d8d0

08015eec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b085      	sub	sp, #20
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f00:	d002      	beq.n	8015f08 <ip4_addr_isbroadcast_u32+0x1c>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d101      	bne.n	8015f0c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015f08:	2301      	movs	r3, #1
 8015f0a:	e02a      	b.n	8015f62 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f12:	f003 0302 	and.w	r3, r3, #2
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d101      	bne.n	8015f1e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	e021      	b.n	8015f62 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	3304      	adds	r3, #4
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d101      	bne.n	8015f2e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	e019      	b.n	8015f62 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	3304      	adds	r3, #4
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	405a      	eors	r2, r3
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	3308      	adds	r3, #8
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	4013      	ands	r3, r2
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d10d      	bne.n	8015f60 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	3308      	adds	r3, #8
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	43da      	mvns	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	3308      	adds	r3, #8
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d101      	bne.n	8015f60 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	e000      	b.n	8015f62 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015f60:	2300      	movs	r3, #0
  }
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3714      	adds	r7, #20
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr
	...

08015f70 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b084      	sub	sp, #16
 8015f74:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015f76:	2300      	movs	r3, #0
 8015f78:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015f7a:	4b12      	ldr	r3, [pc, #72]	; (8015fc4 <ip_reass_tmr+0x54>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015f80:	e018      	b.n	8015fb4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	7fdb      	ldrb	r3, [r3, #31]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d00b      	beq.n	8015fa2 <ip_reass_tmr+0x32>
      r->timer--;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	7fdb      	ldrb	r3, [r3, #31]
 8015f8e:	3b01      	subs	r3, #1
 8015f90:	b2da      	uxtb	r2, r3
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	60fb      	str	r3, [r7, #12]
 8015fa0:	e008      	b.n	8015fb4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015fac:	68b9      	ldr	r1, [r7, #8]
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 f80a 	bl	8015fc8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d1e3      	bne.n	8015f82 <ip_reass_tmr+0x12>
    }
  }
}
 8015fba:	bf00      	nop
 8015fbc:	bf00      	nop
 8015fbe:	3710      	adds	r7, #16
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	20011ce8 	.word	0x20011ce8

08015fc8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b088      	sub	sp, #32
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
 8015fd0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015fd6:	683a      	ldr	r2, [r7, #0]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d105      	bne.n	8015fea <ip_reass_free_complete_datagram+0x22>
 8015fde:	4b45      	ldr	r3, [pc, #276]	; (80160f4 <ip_reass_free_complete_datagram+0x12c>)
 8015fe0:	22ab      	movs	r2, #171	; 0xab
 8015fe2:	4945      	ldr	r1, [pc, #276]	; (80160f8 <ip_reass_free_complete_datagram+0x130>)
 8015fe4:	4845      	ldr	r0, [pc, #276]	; (80160fc <ip_reass_free_complete_datagram+0x134>)
 8015fe6:	f001 fa83 	bl	80174f0 <iprintf>
  if (prev != NULL) {
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d00a      	beq.n	8016006 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d005      	beq.n	8016006 <ip_reass_free_complete_datagram+0x3e>
 8015ffa:	4b3e      	ldr	r3, [pc, #248]	; (80160f4 <ip_reass_free_complete_datagram+0x12c>)
 8015ffc:	22ad      	movs	r2, #173	; 0xad
 8015ffe:	4940      	ldr	r1, [pc, #256]	; (8016100 <ip_reass_free_complete_datagram+0x138>)
 8016000:	483e      	ldr	r0, [pc, #248]	; (80160fc <ip_reass_free_complete_datagram+0x134>)
 8016002:	f001 fa75 	bl	80174f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	889b      	ldrh	r3, [r3, #4]
 8016012:	b29b      	uxth	r3, r3
 8016014:	2b00      	cmp	r3, #0
 8016016:	d12a      	bne.n	801606e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016026:	69bb      	ldr	r3, [r7, #24]
 8016028:	6858      	ldr	r0, [r3, #4]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	3308      	adds	r3, #8
 801602e:	2214      	movs	r2, #20
 8016030:	4619      	mov	r1, r3
 8016032:	f001 f998 	bl	8017366 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016036:	2101      	movs	r1, #1
 8016038:	69b8      	ldr	r0, [r7, #24]
 801603a:	f7ff fc51 	bl	80158e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801603e:	69b8      	ldr	r0, [r7, #24]
 8016040:	f7f7 ff72 	bl	800df28 <pbuf_clen>
 8016044:	4603      	mov	r3, r0
 8016046:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016048:	8bfa      	ldrh	r2, [r7, #30]
 801604a:	8a7b      	ldrh	r3, [r7, #18]
 801604c:	4413      	add	r3, r2
 801604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016052:	db05      	blt.n	8016060 <ip_reass_free_complete_datagram+0x98>
 8016054:	4b27      	ldr	r3, [pc, #156]	; (80160f4 <ip_reass_free_complete_datagram+0x12c>)
 8016056:	22bc      	movs	r2, #188	; 0xbc
 8016058:	492a      	ldr	r1, [pc, #168]	; (8016104 <ip_reass_free_complete_datagram+0x13c>)
 801605a:	4828      	ldr	r0, [pc, #160]	; (80160fc <ip_reass_free_complete_datagram+0x134>)
 801605c:	f001 fa48 	bl	80174f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016060:	8bfa      	ldrh	r2, [r7, #30]
 8016062:	8a7b      	ldrh	r3, [r7, #18]
 8016064:	4413      	add	r3, r2
 8016066:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016068:	69b8      	ldr	r0, [r7, #24]
 801606a:	f7f7 fecf 	bl	800de0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016074:	e01f      	b.n	80160b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801607c:	69bb      	ldr	r3, [r7, #24]
 801607e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016086:	68f8      	ldr	r0, [r7, #12]
 8016088:	f7f7 ff4e 	bl	800df28 <pbuf_clen>
 801608c:	4603      	mov	r3, r0
 801608e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016090:	8bfa      	ldrh	r2, [r7, #30]
 8016092:	8a7b      	ldrh	r3, [r7, #18]
 8016094:	4413      	add	r3, r2
 8016096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801609a:	db05      	blt.n	80160a8 <ip_reass_free_complete_datagram+0xe0>
 801609c:	4b15      	ldr	r3, [pc, #84]	; (80160f4 <ip_reass_free_complete_datagram+0x12c>)
 801609e:	22cc      	movs	r2, #204	; 0xcc
 80160a0:	4918      	ldr	r1, [pc, #96]	; (8016104 <ip_reass_free_complete_datagram+0x13c>)
 80160a2:	4816      	ldr	r0, [pc, #88]	; (80160fc <ip_reass_free_complete_datagram+0x134>)
 80160a4:	f001 fa24 	bl	80174f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80160a8:	8bfa      	ldrh	r2, [r7, #30]
 80160aa:	8a7b      	ldrh	r3, [r7, #18]
 80160ac:	4413      	add	r3, r2
 80160ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	f7f7 feab 	bl	800de0c <pbuf_free>
  while (p != NULL) {
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1dc      	bne.n	8016076 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80160bc:	6839      	ldr	r1, [r7, #0]
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f000 f8c2 	bl	8016248 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80160c4:	4b10      	ldr	r3, [pc, #64]	; (8016108 <ip_reass_free_complete_datagram+0x140>)
 80160c6:	881b      	ldrh	r3, [r3, #0]
 80160c8:	8bfa      	ldrh	r2, [r7, #30]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d905      	bls.n	80160da <ip_reass_free_complete_datagram+0x112>
 80160ce:	4b09      	ldr	r3, [pc, #36]	; (80160f4 <ip_reass_free_complete_datagram+0x12c>)
 80160d0:	22d2      	movs	r2, #210	; 0xd2
 80160d2:	490e      	ldr	r1, [pc, #56]	; (801610c <ip_reass_free_complete_datagram+0x144>)
 80160d4:	4809      	ldr	r0, [pc, #36]	; (80160fc <ip_reass_free_complete_datagram+0x134>)
 80160d6:	f001 fa0b 	bl	80174f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80160da:	4b0b      	ldr	r3, [pc, #44]	; (8016108 <ip_reass_free_complete_datagram+0x140>)
 80160dc:	881a      	ldrh	r2, [r3, #0]
 80160de:	8bfb      	ldrh	r3, [r7, #30]
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	b29a      	uxth	r2, r3
 80160e4:	4b08      	ldr	r3, [pc, #32]	; (8016108 <ip_reass_free_complete_datagram+0x140>)
 80160e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80160e8:	8bfb      	ldrh	r3, [r7, #30]
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3720      	adds	r7, #32
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	0801d440 	.word	0x0801d440
 80160f8:	0801d47c 	.word	0x0801d47c
 80160fc:	0801d488 	.word	0x0801d488
 8016100:	0801d4b0 	.word	0x0801d4b0
 8016104:	0801d4c4 	.word	0x0801d4c4
 8016108:	20011cec 	.word	0x20011cec
 801610c:	0801d4e4 	.word	0x0801d4e4

08016110 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b08a      	sub	sp, #40	; 0x28
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801611a:	2300      	movs	r3, #0
 801611c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801611e:	2300      	movs	r3, #0
 8016120:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016122:	2300      	movs	r3, #0
 8016124:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016126:	2300      	movs	r3, #0
 8016128:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801612a:	2300      	movs	r3, #0
 801612c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801612e:	4b28      	ldr	r3, [pc, #160]	; (80161d0 <ip_reass_remove_oldest_datagram+0xc0>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016134:	e030      	b.n	8016198 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016138:	695a      	ldr	r2, [r3, #20]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	68db      	ldr	r3, [r3, #12]
 801613e:	429a      	cmp	r2, r3
 8016140:	d10c      	bne.n	801615c <ip_reass_remove_oldest_datagram+0x4c>
 8016142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016144:	699a      	ldr	r2, [r3, #24]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	691b      	ldr	r3, [r3, #16]
 801614a:	429a      	cmp	r2, r3
 801614c:	d106      	bne.n	801615c <ip_reass_remove_oldest_datagram+0x4c>
 801614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016150:	899a      	ldrh	r2, [r3, #12]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	889b      	ldrh	r3, [r3, #4]
 8016156:	b29b      	uxth	r3, r3
 8016158:	429a      	cmp	r2, r3
 801615a:	d014      	beq.n	8016186 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	3301      	adds	r3, #1
 8016160:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016162:	6a3b      	ldr	r3, [r7, #32]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d104      	bne.n	8016172 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	61bb      	str	r3, [r7, #24]
 8016170:	e009      	b.n	8016186 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016174:	7fda      	ldrb	r2, [r3, #31]
 8016176:	6a3b      	ldr	r3, [r7, #32]
 8016178:	7fdb      	ldrb	r3, [r3, #31]
 801617a:	429a      	cmp	r2, r3
 801617c:	d803      	bhi.n	8016186 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016180:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016182:	69fb      	ldr	r3, [r7, #28]
 8016184:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d001      	beq.n	8016192 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016190:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619a:	2b00      	cmp	r3, #0
 801619c:	d1cb      	bne.n	8016136 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801619e:	6a3b      	ldr	r3, [r7, #32]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d008      	beq.n	80161b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80161a4:	69b9      	ldr	r1, [r7, #24]
 80161a6:	6a38      	ldr	r0, [r7, #32]
 80161a8:	f7ff ff0e 	bl	8015fc8 <ip_reass_free_complete_datagram>
 80161ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80161ae:	697a      	ldr	r2, [r7, #20]
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	4413      	add	r3, r2
 80161b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80161b6:	697a      	ldr	r2, [r7, #20]
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	da02      	bge.n	80161c4 <ip_reass_remove_oldest_datagram+0xb4>
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	2b01      	cmp	r3, #1
 80161c2:	dcac      	bgt.n	801611e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80161c4:	697b      	ldr	r3, [r7, #20]
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3728      	adds	r7, #40	; 0x28
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
 80161ce:	bf00      	nop
 80161d0:	20011ce8 	.word	0x20011ce8

080161d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b084      	sub	sp, #16
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161de:	2003      	movs	r0, #3
 80161e0:	f7f6 fefe 	bl	800cfe0 <memp_malloc>
 80161e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d110      	bne.n	801620e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80161ec:	6839      	ldr	r1, [r7, #0]
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f7ff ff8e 	bl	8016110 <ip_reass_remove_oldest_datagram>
 80161f4:	4602      	mov	r2, r0
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	4293      	cmp	r3, r2
 80161fa:	dc03      	bgt.n	8016204 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161fc:	2003      	movs	r0, #3
 80161fe:	f7f6 feef 	bl	800cfe0 <memp_malloc>
 8016202:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d101      	bne.n	801620e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801620a:	2300      	movs	r3, #0
 801620c:	e016      	b.n	801623c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801620e:	2220      	movs	r2, #32
 8016210:	2100      	movs	r1, #0
 8016212:	68f8      	ldr	r0, [r7, #12]
 8016214:	f001 f8cf 	bl	80173b6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	220f      	movs	r2, #15
 801621c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801621e:	4b09      	ldr	r3, [pc, #36]	; (8016244 <ip_reass_enqueue_new_datagram+0x70>)
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016226:	4a07      	ldr	r2, [pc, #28]	; (8016244 <ip_reass_enqueue_new_datagram+0x70>)
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	3308      	adds	r3, #8
 8016230:	2214      	movs	r2, #20
 8016232:	6879      	ldr	r1, [r7, #4]
 8016234:	4618      	mov	r0, r3
 8016236:	f001 f896 	bl	8017366 <memcpy>
  return ipr;
 801623a:	68fb      	ldr	r3, [r7, #12]
}
 801623c:	4618      	mov	r0, r3
 801623e:	3710      	adds	r7, #16
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}
 8016244:	20011ce8 	.word	0x20011ce8

08016248 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
 8016250:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016252:	4b10      	ldr	r3, [pc, #64]	; (8016294 <ip_reass_dequeue_datagram+0x4c>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	687a      	ldr	r2, [r7, #4]
 8016258:	429a      	cmp	r2, r3
 801625a:	d104      	bne.n	8016266 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4a0c      	ldr	r2, [pc, #48]	; (8016294 <ip_reass_dequeue_datagram+0x4c>)
 8016262:	6013      	str	r3, [r2, #0]
 8016264:	e00d      	b.n	8016282 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d106      	bne.n	801627a <ip_reass_dequeue_datagram+0x32>
 801626c:	4b0a      	ldr	r3, [pc, #40]	; (8016298 <ip_reass_dequeue_datagram+0x50>)
 801626e:	f240 1245 	movw	r2, #325	; 0x145
 8016272:	490a      	ldr	r1, [pc, #40]	; (801629c <ip_reass_dequeue_datagram+0x54>)
 8016274:	480a      	ldr	r0, [pc, #40]	; (80162a0 <ip_reass_dequeue_datagram+0x58>)
 8016276:	f001 f93b 	bl	80174f0 <iprintf>
    prev->next = ipr->next;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016282:	6879      	ldr	r1, [r7, #4]
 8016284:	2003      	movs	r0, #3
 8016286:	f7f6 ff21 	bl	800d0cc <memp_free>
}
 801628a:	bf00      	nop
 801628c:	3708      	adds	r7, #8
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}
 8016292:	bf00      	nop
 8016294:	20011ce8 	.word	0x20011ce8
 8016298:	0801d440 	.word	0x0801d440
 801629c:	0801d508 	.word	0x0801d508
 80162a0:	0801d488 	.word	0x0801d488

080162a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b08c      	sub	sp, #48	; 0x30
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80162b0:	2300      	movs	r3, #0
 80162b2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80162b4:	2301      	movs	r3, #1
 80162b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	885b      	ldrh	r3, [r3, #2]
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f6 f89b 	bl	800c400 <lwip_htons>
 80162ca:	4603      	mov	r3, r0
 80162cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	f003 030f 	and.w	r3, r3, #15
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80162dc:	7e7b      	ldrb	r3, [r7, #25]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	8b7a      	ldrh	r2, [r7, #26]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d202      	bcs.n	80162ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162ea:	e135      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80162ec:	7e7b      	ldrb	r3, [r7, #25]
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	8b7a      	ldrh	r2, [r7, #26]
 80162f2:	1ad3      	subs	r3, r2, r3
 80162f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	88db      	ldrh	r3, [r3, #6]
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f6 f87f 	bl	800c400 <lwip_htons>
 8016302:	4603      	mov	r3, r0
 8016304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016308:	b29b      	uxth	r3, r3
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016316:	2200      	movs	r2, #0
 8016318:	701a      	strb	r2, [r3, #0]
 801631a:	2200      	movs	r2, #0
 801631c:	705a      	strb	r2, [r3, #1]
 801631e:	2200      	movs	r2, #0
 8016320:	709a      	strb	r2, [r3, #2]
 8016322:	2200      	movs	r2, #0
 8016324:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016328:	8afa      	ldrh	r2, [r7, #22]
 801632a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801632c:	8afa      	ldrh	r2, [r7, #22]
 801632e:	8b7b      	ldrh	r3, [r7, #26]
 8016330:	4413      	add	r3, r2
 8016332:	b29a      	uxth	r2, r3
 8016334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016336:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633a:	88db      	ldrh	r3, [r3, #6]
 801633c:	b29b      	uxth	r3, r3
 801633e:	8afa      	ldrh	r2, [r7, #22]
 8016340:	429a      	cmp	r2, r3
 8016342:	d902      	bls.n	801634a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016348:	e106      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	627b      	str	r3, [r7, #36]	; 0x24
 8016350:	e068      	b.n	8016424 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635a:	889b      	ldrh	r3, [r3, #4]
 801635c:	b29a      	uxth	r2, r3
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	889b      	ldrh	r3, [r3, #4]
 8016362:	b29b      	uxth	r3, r3
 8016364:	429a      	cmp	r2, r3
 8016366:	d235      	bcs.n	80163d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801636c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016370:	2b00      	cmp	r3, #0
 8016372:	d020      	beq.n	80163b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016376:	889b      	ldrh	r3, [r3, #4]
 8016378:	b29a      	uxth	r2, r3
 801637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637c:	88db      	ldrh	r3, [r3, #6]
 801637e:	b29b      	uxth	r3, r3
 8016380:	429a      	cmp	r2, r3
 8016382:	d307      	bcc.n	8016394 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016386:	88db      	ldrh	r3, [r3, #6]
 8016388:	b29a      	uxth	r2, r3
 801638a:	693b      	ldr	r3, [r7, #16]
 801638c:	889b      	ldrh	r3, [r3, #4]
 801638e:	b29b      	uxth	r3, r3
 8016390:	429a      	cmp	r2, r3
 8016392:	d902      	bls.n	801639a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016398:	e0de      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801639c:	68ba      	ldr	r2, [r7, #8]
 801639e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80163a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a2:	88db      	ldrh	r3, [r3, #6]
 80163a4:	b29a      	uxth	r2, r3
 80163a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a8:	889b      	ldrh	r3, [r3, #4]
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d03d      	beq.n	801642c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80163b0:	2300      	movs	r3, #0
 80163b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80163b4:	e03a      	b.n	801642c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80163b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b8:	88db      	ldrh	r3, [r3, #6]
 80163ba:	b29a      	uxth	r2, r3
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	889b      	ldrh	r3, [r3, #4]
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d902      	bls.n	80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163ca:	e0c5      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	605a      	str	r2, [r3, #4]
      break;
 80163d2:	e02b      	b.n	801642c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80163d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d6:	889b      	ldrh	r3, [r3, #4]
 80163d8:	b29a      	uxth	r2, r3
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d102      	bne.n	80163ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163e8:	e0b6      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80163ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ec:	889b      	ldrh	r3, [r3, #4]
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	88db      	ldrh	r3, [r3, #6]
 80163f4:	b29b      	uxth	r3, r3
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d202      	bcs.n	8016400 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163fe:	e0ab      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016402:	2b00      	cmp	r3, #0
 8016404:	d009      	beq.n	801641a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016408:	88db      	ldrh	r3, [r3, #6]
 801640a:	b29a      	uxth	r2, r3
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	889b      	ldrh	r3, [r3, #4]
 8016410:	b29b      	uxth	r3, r3
 8016412:	429a      	cmp	r2, r3
 8016414:	d001      	beq.n	801641a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016416:	2300      	movs	r3, #0
 8016418:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801641a:	693b      	ldr	r3, [r7, #16]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016420:	693b      	ldr	r3, [r7, #16]
 8016422:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016426:	2b00      	cmp	r3, #0
 8016428:	d193      	bne.n	8016352 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801642a:	e000      	b.n	801642e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801642c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016430:	2b00      	cmp	r3, #0
 8016432:	d12d      	bne.n	8016490 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016436:	2b00      	cmp	r3, #0
 8016438:	d01c      	beq.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801643c:	88db      	ldrh	r3, [r3, #6]
 801643e:	b29a      	uxth	r2, r3
 8016440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016442:	889b      	ldrh	r3, [r3, #4]
 8016444:	b29b      	uxth	r3, r3
 8016446:	429a      	cmp	r2, r3
 8016448:	d906      	bls.n	8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801644a:	4b45      	ldr	r3, [pc, #276]	; (8016560 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801644c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016450:	4944      	ldr	r1, [pc, #272]	; (8016564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016452:	4845      	ldr	r0, [pc, #276]	; (8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016454:	f001 f84c 	bl	80174f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645a:	68ba      	ldr	r2, [r7, #8]
 801645c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016460:	88db      	ldrh	r3, [r3, #6]
 8016462:	b29a      	uxth	r2, r3
 8016464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016466:	889b      	ldrh	r3, [r3, #4]
 8016468:	b29b      	uxth	r3, r3
 801646a:	429a      	cmp	r2, r3
 801646c:	d010      	beq.n	8016490 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801646e:	2300      	movs	r3, #0
 8016470:	623b      	str	r3, [r7, #32]
 8016472:	e00d      	b.n	8016490 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d006      	beq.n	801648a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801647c:	4b38      	ldr	r3, [pc, #224]	; (8016560 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801647e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016482:	493a      	ldr	r1, [pc, #232]	; (801656c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016484:	4838      	ldr	r0, [pc, #224]	; (8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016486:	f001 f833 	bl	80174f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	68ba      	ldr	r2, [r7, #8]
 801648e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d105      	bne.n	80164a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	7f9b      	ldrb	r3, [r3, #30]
 801649a:	f003 0301 	and.w	r3, r3, #1
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d059      	beq.n	8016556 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80164a2:	6a3b      	ldr	r3, [r7, #32]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d04f      	beq.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d006      	beq.n	80164be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	685b      	ldr	r3, [r3, #4]
 80164b4:	685b      	ldr	r3, [r3, #4]
 80164b6:	889b      	ldrh	r3, [r3, #4]
 80164b8:	b29b      	uxth	r3, r3
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d002      	beq.n	80164c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	623b      	str	r3, [r7, #32]
 80164c2:	e041      	b.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80164c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80164c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80164ce:	e012      	b.n	80164f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80164d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80164d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d8:	88db      	ldrh	r3, [r3, #6]
 80164da:	b29a      	uxth	r2, r3
 80164dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164de:	889b      	ldrh	r3, [r3, #4]
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d002      	beq.n	80164ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	623b      	str	r3, [r7, #32]
            break;
 80164ea:	e007      	b.n	80164fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80164ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80164f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80164f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d1e9      	bne.n	80164d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80164fc:	6a3b      	ldr	r3, [r7, #32]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d022      	beq.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d106      	bne.n	8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801650a:	4b15      	ldr	r3, [pc, #84]	; (8016560 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801650c:	f240 12df 	movw	r2, #479	; 0x1df
 8016510:	4917      	ldr	r1, [pc, #92]	; (8016570 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016512:	4815      	ldr	r0, [pc, #84]	; (8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016514:	f000 ffec 	bl	80174f0 <iprintf>
          LWIP_ASSERT("sanity check",
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016520:	429a      	cmp	r2, r3
 8016522:	d106      	bne.n	8016532 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016524:	4b0e      	ldr	r3, [pc, #56]	; (8016560 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016526:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801652a:	4911      	ldr	r1, [pc, #68]	; (8016570 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801652c:	480e      	ldr	r0, [pc, #56]	; (8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801652e:	f000 ffdf 	bl	80174f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d006      	beq.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801653a:	4b09      	ldr	r3, [pc, #36]	; (8016560 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801653c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016540:	490c      	ldr	r1, [pc, #48]	; (8016574 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016542:	4809      	ldr	r0, [pc, #36]	; (8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016544:	f000 ffd4 	bl	80174f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016548:	6a3b      	ldr	r3, [r7, #32]
 801654a:	2b00      	cmp	r3, #0
 801654c:	bf14      	ite	ne
 801654e:	2301      	movne	r3, #1
 8016550:	2300      	moveq	r3, #0
 8016552:	b2db      	uxtb	r3, r3
 8016554:	e000      	b.n	8016558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016556:	2300      	movs	r3, #0
}
 8016558:	4618      	mov	r0, r3
 801655a:	3730      	adds	r7, #48	; 0x30
 801655c:	46bd      	mov	sp, r7
 801655e:	bd80      	pop	{r7, pc}
 8016560:	0801d440 	.word	0x0801d440
 8016564:	0801d524 	.word	0x0801d524
 8016568:	0801d488 	.word	0x0801d488
 801656c:	0801d544 	.word	0x0801d544
 8016570:	0801d57c 	.word	0x0801d57c
 8016574:	0801d58c 	.word	0x0801d58c

08016578 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b08e      	sub	sp, #56	; 0x38
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	f003 030f 	and.w	r3, r3, #15
 801658e:	b2db      	uxtb	r3, r3
 8016590:	009b      	lsls	r3, r3, #2
 8016592:	b2db      	uxtb	r3, r3
 8016594:	2b14      	cmp	r3, #20
 8016596:	f040 8171 	bne.w	801687c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659c:	88db      	ldrh	r3, [r3, #6]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7f5 ff2d 	bl	800c400 <lwip_htons>
 80165a6:	4603      	mov	r3, r0
 80165a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	00db      	lsls	r3, r3, #3
 80165b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80165b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b4:	885b      	ldrh	r3, [r3, #2]
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7f5 ff21 	bl	800c400 <lwip_htons>
 80165be:	4603      	mov	r3, r0
 80165c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80165c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	f003 030f 	and.w	r3, r3, #15
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	009b      	lsls	r3, r3, #2
 80165ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80165d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165da:	429a      	cmp	r2, r3
 80165dc:	f0c0 8150 	bcc.w	8016880 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80165e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165e8:	1ad3      	subs	r3, r2, r3
 80165ea:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f7f7 fc9b 	bl	800df28 <pbuf_clen>
 80165f2:	4603      	mov	r3, r0
 80165f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80165f6:	4b8c      	ldr	r3, [pc, #560]	; (8016828 <ip4_reass+0x2b0>)
 80165f8:	881b      	ldrh	r3, [r3, #0]
 80165fa:	461a      	mov	r2, r3
 80165fc:	8c3b      	ldrh	r3, [r7, #32]
 80165fe:	4413      	add	r3, r2
 8016600:	2b0a      	cmp	r3, #10
 8016602:	dd10      	ble.n	8016626 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016604:	8c3b      	ldrh	r3, [r7, #32]
 8016606:	4619      	mov	r1, r3
 8016608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801660a:	f7ff fd81 	bl	8016110 <ip_reass_remove_oldest_datagram>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	f000 8137 	beq.w	8016884 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016616:	4b84      	ldr	r3, [pc, #528]	; (8016828 <ip4_reass+0x2b0>)
 8016618:	881b      	ldrh	r3, [r3, #0]
 801661a:	461a      	mov	r2, r3
 801661c:	8c3b      	ldrh	r3, [r7, #32]
 801661e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016620:	2b0a      	cmp	r3, #10
 8016622:	f300 812f 	bgt.w	8016884 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016626:	4b81      	ldr	r3, [pc, #516]	; (801682c <ip4_reass+0x2b4>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	633b      	str	r3, [r7, #48]	; 0x30
 801662c:	e015      	b.n	801665a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016630:	695a      	ldr	r2, [r3, #20]
 8016632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016634:	68db      	ldr	r3, [r3, #12]
 8016636:	429a      	cmp	r2, r3
 8016638:	d10c      	bne.n	8016654 <ip4_reass+0xdc>
 801663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801663c:	699a      	ldr	r2, [r3, #24]
 801663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016640:	691b      	ldr	r3, [r3, #16]
 8016642:	429a      	cmp	r2, r3
 8016644:	d106      	bne.n	8016654 <ip4_reass+0xdc>
 8016646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016648:	899a      	ldrh	r2, [r3, #12]
 801664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801664c:	889b      	ldrh	r3, [r3, #4]
 801664e:	b29b      	uxth	r3, r3
 8016650:	429a      	cmp	r2, r3
 8016652:	d006      	beq.n	8016662 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	633b      	str	r3, [r7, #48]	; 0x30
 801665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665c:	2b00      	cmp	r3, #0
 801665e:	d1e6      	bne.n	801662e <ip4_reass+0xb6>
 8016660:	e000      	b.n	8016664 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016662:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016666:	2b00      	cmp	r3, #0
 8016668:	d109      	bne.n	801667e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801666a:	8c3b      	ldrh	r3, [r7, #32]
 801666c:	4619      	mov	r1, r3
 801666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016670:	f7ff fdb0 	bl	80161d4 <ip_reass_enqueue_new_datagram>
 8016674:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016678:	2b00      	cmp	r3, #0
 801667a:	d11c      	bne.n	80166b6 <ip4_reass+0x13e>
      goto nullreturn;
 801667c:	e105      	b.n	801688a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016680:	88db      	ldrh	r3, [r3, #6]
 8016682:	b29b      	uxth	r3, r3
 8016684:	4618      	mov	r0, r3
 8016686:	f7f5 febb 	bl	800c400 <lwip_htons>
 801668a:	4603      	mov	r3, r0
 801668c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016690:	2b00      	cmp	r3, #0
 8016692:	d110      	bne.n	80166b6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016696:	89db      	ldrh	r3, [r3, #14]
 8016698:	4618      	mov	r0, r3
 801669a:	f7f5 feb1 	bl	800c400 <lwip_htons>
 801669e:	4603      	mov	r3, r0
 80166a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d006      	beq.n	80166b6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80166a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166aa:	3308      	adds	r3, #8
 80166ac:	2214      	movs	r2, #20
 80166ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166b0:	4618      	mov	r0, r3
 80166b2:	f000 fe58 	bl	8017366 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	88db      	ldrh	r3, [r3, #6]
 80166ba:	b29b      	uxth	r3, r3
 80166bc:	f003 0320 	and.w	r3, r3, #32
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	bf0c      	ite	eq
 80166c4:	2301      	moveq	r3, #1
 80166c6:	2300      	movne	r3, #0
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00e      	beq.n	80166f0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80166d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80166d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166d6:	4413      	add	r3, r2
 80166d8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80166da:	8b7a      	ldrh	r2, [r7, #26]
 80166dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166de:	429a      	cmp	r2, r3
 80166e0:	f0c0 80a0 	bcc.w	8016824 <ip4_reass+0x2ac>
 80166e4:	8b7b      	ldrh	r3, [r7, #26]
 80166e6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80166ea:	4293      	cmp	r3, r2
 80166ec:	f200 809a 	bhi.w	8016824 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80166f0:	69fa      	ldr	r2, [r7, #28]
 80166f2:	6879      	ldr	r1, [r7, #4]
 80166f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166f6:	f7ff fdd5 	bl	80162a4 <ip_reass_chain_frag_into_datagram_and_validate>
 80166fa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016702:	f000 809b 	beq.w	801683c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016706:	4b48      	ldr	r3, [pc, #288]	; (8016828 <ip4_reass+0x2b0>)
 8016708:	881a      	ldrh	r2, [r3, #0]
 801670a:	8c3b      	ldrh	r3, [r7, #32]
 801670c:	4413      	add	r3, r2
 801670e:	b29a      	uxth	r2, r3
 8016710:	4b45      	ldr	r3, [pc, #276]	; (8016828 <ip4_reass+0x2b0>)
 8016712:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d00d      	beq.n	8016736 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801671a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801671c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801671e:	4413      	add	r3, r2
 8016720:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016724:	8a7a      	ldrh	r2, [r7, #18]
 8016726:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672a:	7f9b      	ldrb	r3, [r3, #30]
 801672c:	f043 0301 	orr.w	r3, r3, #1
 8016730:	b2da      	uxtb	r2, r3
 8016732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016734:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016736:	697b      	ldr	r3, [r7, #20]
 8016738:	2b01      	cmp	r3, #1
 801673a:	d171      	bne.n	8016820 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801673e:	8b9b      	ldrh	r3, [r3, #28]
 8016740:	3314      	adds	r3, #20
 8016742:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016750:	685b      	ldr	r3, [r3, #4]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016758:	3308      	adds	r3, #8
 801675a:	2214      	movs	r2, #20
 801675c:	4619      	mov	r1, r3
 801675e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016760:	f000 fe01 	bl	8017366 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016764:	8a3b      	ldrh	r3, [r7, #16]
 8016766:	4618      	mov	r0, r3
 8016768:	f7f5 fe4a 	bl	800c400 <lwip_htons>
 801676c:	4603      	mov	r3, r0
 801676e:	461a      	mov	r2, r3
 8016770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016772:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016776:	2200      	movs	r2, #0
 8016778:	719a      	strb	r2, [r3, #6]
 801677a:	2200      	movs	r2, #0
 801677c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016780:	2200      	movs	r2, #0
 8016782:	729a      	strb	r2, [r3, #10]
 8016784:	2200      	movs	r2, #0
 8016786:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801678e:	e00d      	b.n	80167ac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016796:	2114      	movs	r1, #20
 8016798:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801679a:	f7f7 fab1 	bl	800dd00 <pbuf_remove_header>
      pbuf_cat(p, r);
 801679e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7f7 fc01 	bl	800dfa8 <pbuf_cat>
      r = iprh->next_pbuf;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80167ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d1ee      	bne.n	8016790 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80167b2:	4b1e      	ldr	r3, [pc, #120]	; (801682c <ip4_reass+0x2b4>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d102      	bne.n	80167c2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80167bc:	2300      	movs	r3, #0
 80167be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167c0:	e010      	b.n	80167e4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80167c2:	4b1a      	ldr	r3, [pc, #104]	; (801682c <ip4_reass+0x2b4>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167c8:	e007      	b.n	80167da <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80167ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d006      	beq.n	80167e2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80167d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d1f4      	bne.n	80167ca <ip4_reass+0x252>
 80167e0:	e000      	b.n	80167e4 <ip4_reass+0x26c>
          break;
 80167e2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80167e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167e8:	f7ff fd2e 	bl	8016248 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f7f7 fb9b 	bl	800df28 <pbuf_clen>
 80167f2:	4603      	mov	r3, r0
 80167f4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80167f6:	4b0c      	ldr	r3, [pc, #48]	; (8016828 <ip4_reass+0x2b0>)
 80167f8:	881b      	ldrh	r3, [r3, #0]
 80167fa:	8c3a      	ldrh	r2, [r7, #32]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d906      	bls.n	801680e <ip4_reass+0x296>
 8016800:	4b0b      	ldr	r3, [pc, #44]	; (8016830 <ip4_reass+0x2b8>)
 8016802:	f240 229b 	movw	r2, #667	; 0x29b
 8016806:	490b      	ldr	r1, [pc, #44]	; (8016834 <ip4_reass+0x2bc>)
 8016808:	480b      	ldr	r0, [pc, #44]	; (8016838 <ip4_reass+0x2c0>)
 801680a:	f000 fe71 	bl	80174f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801680e:	4b06      	ldr	r3, [pc, #24]	; (8016828 <ip4_reass+0x2b0>)
 8016810:	881a      	ldrh	r2, [r3, #0]
 8016812:	8c3b      	ldrh	r3, [r7, #32]
 8016814:	1ad3      	subs	r3, r2, r3
 8016816:	b29a      	uxth	r2, r3
 8016818:	4b03      	ldr	r3, [pc, #12]	; (8016828 <ip4_reass+0x2b0>)
 801681a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	e038      	b.n	8016892 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016820:	2300      	movs	r3, #0
 8016822:	e036      	b.n	8016892 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016824:	bf00      	nop
 8016826:	e00a      	b.n	801683e <ip4_reass+0x2c6>
 8016828:	20011cec 	.word	0x20011cec
 801682c:	20011ce8 	.word	0x20011ce8
 8016830:	0801d440 	.word	0x0801d440
 8016834:	0801d5b0 	.word	0x0801d5b0
 8016838:	0801d488 	.word	0x0801d488
    goto nullreturn_ipr;
 801683c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016840:	2b00      	cmp	r3, #0
 8016842:	d106      	bne.n	8016852 <ip4_reass+0x2da>
 8016844:	4b15      	ldr	r3, [pc, #84]	; (801689c <ip4_reass+0x324>)
 8016846:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801684a:	4915      	ldr	r1, [pc, #84]	; (80168a0 <ip4_reass+0x328>)
 801684c:	4815      	ldr	r0, [pc, #84]	; (80168a4 <ip4_reass+0x32c>)
 801684e:	f000 fe4f 	bl	80174f0 <iprintf>
  if (ipr->p == NULL) {
 8016852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d116      	bne.n	8016888 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801685a:	4b13      	ldr	r3, [pc, #76]	; (80168a8 <ip4_reass+0x330>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016860:	429a      	cmp	r2, r3
 8016862:	d006      	beq.n	8016872 <ip4_reass+0x2fa>
 8016864:	4b0d      	ldr	r3, [pc, #52]	; (801689c <ip4_reass+0x324>)
 8016866:	f240 22ab 	movw	r2, #683	; 0x2ab
 801686a:	4910      	ldr	r1, [pc, #64]	; (80168ac <ip4_reass+0x334>)
 801686c:	480d      	ldr	r0, [pc, #52]	; (80168a4 <ip4_reass+0x32c>)
 801686e:	f000 fe3f 	bl	80174f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016872:	2100      	movs	r1, #0
 8016874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016876:	f7ff fce7 	bl	8016248 <ip_reass_dequeue_datagram>
 801687a:	e006      	b.n	801688a <ip4_reass+0x312>
    goto nullreturn;
 801687c:	bf00      	nop
 801687e:	e004      	b.n	801688a <ip4_reass+0x312>
    goto nullreturn;
 8016880:	bf00      	nop
 8016882:	e002      	b.n	801688a <ip4_reass+0x312>
      goto nullreturn;
 8016884:	bf00      	nop
 8016886:	e000      	b.n	801688a <ip4_reass+0x312>
  }

nullreturn:
 8016888:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801688a:	6878      	ldr	r0, [r7, #4]
 801688c:	f7f7 fabe 	bl	800de0c <pbuf_free>
  return NULL;
 8016890:	2300      	movs	r3, #0
}
 8016892:	4618      	mov	r0, r3
 8016894:	3738      	adds	r7, #56	; 0x38
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	0801d440 	.word	0x0801d440
 80168a0:	0801d5cc 	.word	0x0801d5cc
 80168a4:	0801d488 	.word	0x0801d488
 80168a8:	20011ce8 	.word	0x20011ce8
 80168ac:	0801d5d8 	.word	0x0801d5d8

080168b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80168b4:	2004      	movs	r0, #4
 80168b6:	f7f6 fb93 	bl	800cfe0 <memp_malloc>
 80168ba:	4603      	mov	r3, r0
}
 80168bc:	4618      	mov	r0, r3
 80168be:	bd80      	pop	{r7, pc}

080168c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d106      	bne.n	80168dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80168ce:	4b07      	ldr	r3, [pc, #28]	; (80168ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80168d0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80168d4:	4906      	ldr	r1, [pc, #24]	; (80168f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80168d6:	4807      	ldr	r0, [pc, #28]	; (80168f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80168d8:	f000 fe0a 	bl	80174f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80168dc:	6879      	ldr	r1, [r7, #4]
 80168de:	2004      	movs	r0, #4
 80168e0:	f7f6 fbf4 	bl	800d0cc <memp_free>
}
 80168e4:	bf00      	nop
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}
 80168ec:	0801d440 	.word	0x0801d440
 80168f0:	0801d5f8 	.word	0x0801d5f8
 80168f4:	0801d488 	.word	0x0801d488

080168f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d106      	bne.n	8016918 <ipfrag_free_pbuf_custom+0x20>
 801690a:	4b11      	ldr	r3, [pc, #68]	; (8016950 <ipfrag_free_pbuf_custom+0x58>)
 801690c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016910:	4910      	ldr	r1, [pc, #64]	; (8016954 <ipfrag_free_pbuf_custom+0x5c>)
 8016912:	4811      	ldr	r0, [pc, #68]	; (8016958 <ipfrag_free_pbuf_custom+0x60>)
 8016914:	f000 fdec 	bl	80174f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016918:	68fa      	ldr	r2, [r7, #12]
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	429a      	cmp	r2, r3
 801691e:	d006      	beq.n	801692e <ipfrag_free_pbuf_custom+0x36>
 8016920:	4b0b      	ldr	r3, [pc, #44]	; (8016950 <ipfrag_free_pbuf_custom+0x58>)
 8016922:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016926:	490d      	ldr	r1, [pc, #52]	; (801695c <ipfrag_free_pbuf_custom+0x64>)
 8016928:	480b      	ldr	r0, [pc, #44]	; (8016958 <ipfrag_free_pbuf_custom+0x60>)
 801692a:	f000 fde1 	bl	80174f0 <iprintf>
  if (pcr->original != NULL) {
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	695b      	ldr	r3, [r3, #20]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d004      	beq.n	8016940 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	695b      	ldr	r3, [r3, #20]
 801693a:	4618      	mov	r0, r3
 801693c:	f7f7 fa66 	bl	800de0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016940:	68f8      	ldr	r0, [r7, #12]
 8016942:	f7ff ffbd 	bl	80168c0 <ip_frag_free_pbuf_custom_ref>
}
 8016946:	bf00      	nop
 8016948:	3710      	adds	r7, #16
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	0801d440 	.word	0x0801d440
 8016954:	0801d604 	.word	0x0801d604
 8016958:	0801d488 	.word	0x0801d488
 801695c:	0801d610 	.word	0x0801d610

08016960 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b094      	sub	sp, #80	; 0x50
 8016964:	af02      	add	r7, sp, #8
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801696c:	2300      	movs	r3, #0
 801696e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016976:	3b14      	subs	r3, #20
 8016978:	2b00      	cmp	r3, #0
 801697a:	da00      	bge.n	801697e <ip4_frag+0x1e>
 801697c:	3307      	adds	r3, #7
 801697e:	10db      	asrs	r3, r3, #3
 8016980:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016982:	2314      	movs	r3, #20
 8016984:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	685b      	ldr	r3, [r3, #4]
 801698a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801698e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	f003 030f 	and.w	r3, r3, #15
 8016998:	b2db      	uxtb	r3, r3
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	b2db      	uxtb	r3, r3
 801699e:	2b14      	cmp	r3, #20
 80169a0:	d002      	beq.n	80169a8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80169a2:	f06f 0305 	mvn.w	r3, #5
 80169a6:	e110      	b.n	8016bca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	895b      	ldrh	r3, [r3, #10]
 80169ac:	2b13      	cmp	r3, #19
 80169ae:	d809      	bhi.n	80169c4 <ip4_frag+0x64>
 80169b0:	4b88      	ldr	r3, [pc, #544]	; (8016bd4 <ip4_frag+0x274>)
 80169b2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80169b6:	4988      	ldr	r1, [pc, #544]	; (8016bd8 <ip4_frag+0x278>)
 80169b8:	4888      	ldr	r0, [pc, #544]	; (8016bdc <ip4_frag+0x27c>)
 80169ba:	f000 fd99 	bl	80174f0 <iprintf>
 80169be:	f06f 0305 	mvn.w	r3, #5
 80169c2:	e102      	b.n	8016bca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80169c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c6:	88db      	ldrh	r3, [r3, #6]
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	4618      	mov	r0, r3
 80169cc:	f7f5 fd18 	bl	800c400 <lwip_htons>
 80169d0:	4603      	mov	r3, r0
 80169d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80169d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80169de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80169e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	891b      	ldrh	r3, [r3, #8]
 80169ea:	3b14      	subs	r3, #20
 80169ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80169f0:	e0e1      	b.n	8016bb6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80169f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169f4:	00db      	lsls	r3, r3, #3
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169fc:	4293      	cmp	r3, r2
 80169fe:	bf28      	it	cs
 8016a00:	4613      	movcs	r3, r2
 8016a02:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016a04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a08:	2114      	movs	r1, #20
 8016a0a:	200e      	movs	r0, #14
 8016a0c:	f7f6 ff1a 	bl	800d844 <pbuf_alloc>
 8016a10:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	f000 80d5 	beq.w	8016bc4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1c:	895b      	ldrh	r3, [r3, #10]
 8016a1e:	2b13      	cmp	r3, #19
 8016a20:	d806      	bhi.n	8016a30 <ip4_frag+0xd0>
 8016a22:	4b6c      	ldr	r3, [pc, #432]	; (8016bd4 <ip4_frag+0x274>)
 8016a24:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016a28:	496d      	ldr	r1, [pc, #436]	; (8016be0 <ip4_frag+0x280>)
 8016a2a:	486c      	ldr	r0, [pc, #432]	; (8016bdc <ip4_frag+0x27c>)
 8016a2c:	f000 fd60 	bl	80174f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	2214      	movs	r2, #20
 8016a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f000 fc94 	bl	8017366 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016a44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016a4a:	e064      	b.n	8016b16 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	895a      	ldrh	r2, [r3, #10]
 8016a50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016a52:	1ad3      	subs	r3, r2, r3
 8016a54:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	895b      	ldrh	r3, [r3, #10]
 8016a5a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d906      	bls.n	8016a6e <ip4_frag+0x10e>
 8016a60:	4b5c      	ldr	r3, [pc, #368]	; (8016bd4 <ip4_frag+0x274>)
 8016a62:	f240 322d 	movw	r2, #813	; 0x32d
 8016a66:	495f      	ldr	r1, [pc, #380]	; (8016be4 <ip4_frag+0x284>)
 8016a68:	485c      	ldr	r0, [pc, #368]	; (8016bdc <ip4_frag+0x27c>)
 8016a6a:	f000 fd41 	bl	80174f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016a6e:	8bfa      	ldrh	r2, [r7, #30]
 8016a70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a74:	4293      	cmp	r3, r2
 8016a76:	bf28      	it	cs
 8016a78:	4613      	movcs	r3, r2
 8016a7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016a7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d105      	bne.n	8016a92 <ip4_frag+0x132>
        poff = 0;
 8016a86:	2300      	movs	r3, #0
 8016a88:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	60fb      	str	r3, [r7, #12]
        continue;
 8016a90:	e041      	b.n	8016b16 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016a92:	f7ff ff0d 	bl	80168b0 <ip_frag_alloc_pbuf_custom_ref>
 8016a96:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016a98:	69bb      	ldr	r3, [r7, #24]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d103      	bne.n	8016aa6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016aa0:	f7f7 f9b4 	bl	800de0c <pbuf_free>
        goto memerr;
 8016aa4:	e08f      	b.n	8016bc6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016aa6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016aac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016aae:	4413      	add	r3, r2
 8016ab0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016ab4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016ab8:	9201      	str	r2, [sp, #4]
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	4603      	mov	r3, r0
 8016abe:	2241      	movs	r2, #65	; 0x41
 8016ac0:	2000      	movs	r0, #0
 8016ac2:	f7f6 ffe9 	bl	800da98 <pbuf_alloced_custom>
 8016ac6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d106      	bne.n	8016adc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016ace:	69b8      	ldr	r0, [r7, #24]
 8016ad0:	f7ff fef6 	bl	80168c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ad6:	f7f7 f999 	bl	800de0c <pbuf_free>
        goto memerr;
 8016ada:	e074      	b.n	8016bc6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016adc:	68f8      	ldr	r0, [r7, #12]
 8016ade:	f7f7 fa3b 	bl	800df58 <pbuf_ref>
      pcr->original = p;
 8016ae2:	69bb      	ldr	r3, [r7, #24]
 8016ae4:	68fa      	ldr	r2, [r7, #12]
 8016ae6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016ae8:	69bb      	ldr	r3, [r7, #24]
 8016aea:	4a3f      	ldr	r2, [pc, #252]	; (8016be8 <ip4_frag+0x288>)
 8016aec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016aee:	6979      	ldr	r1, [r7, #20]
 8016af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016af2:	f7f7 fa59 	bl	800dfa8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016af6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016afe:	1ad3      	subs	r3, r2, r3
 8016b00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016b04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d004      	beq.n	8016b16 <ip4_frag+0x1b6>
        poff = 0;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016b16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d196      	bne.n	8016a4c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016b1e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016b20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b24:	4413      	add	r3, r2
 8016b26:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016b2c:	f1a3 0213 	sub.w	r2, r3, #19
 8016b30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b34:	429a      	cmp	r2, r3
 8016b36:	bfcc      	ite	gt
 8016b38:	2301      	movgt	r3, #1
 8016b3a:	2300      	movle	r3, #0
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b48:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016b4a:	6a3b      	ldr	r3, [r7, #32]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d002      	beq.n	8016b56 <ip4_frag+0x1f6>
 8016b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d003      	beq.n	8016b5e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016b56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016b5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016b5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7f5 fc4d 	bl	800c400 <lwip_htons>
 8016b66:	4603      	mov	r3, r0
 8016b68:	461a      	mov	r2, r3
 8016b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b6c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016b6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b70:	3314      	adds	r3, #20
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7f5 fc43 	bl	800c400 <lwip_htons>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	461a      	mov	r2, r3
 8016b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b80:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b84:	2200      	movs	r2, #0
 8016b86:	729a      	strb	r2, [r3, #10]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	695b      	ldr	r3, [r3, #20]
 8016b90:	687a      	ldr	r2, [r7, #4]
 8016b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b94:	68b8      	ldr	r0, [r7, #8]
 8016b96:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b9a:	f7f7 f937 	bl	800de0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016b9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ba2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016ba4:	1ad3      	subs	r3, r2, r3
 8016ba6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016baa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016bae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016bb0:	4413      	add	r3, r2
 8016bb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f47f af19 	bne.w	80169f2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e002      	b.n	8016bca <ip4_frag+0x26a>
      goto memerr;
 8016bc4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3748      	adds	r7, #72	; 0x48
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
 8016bd2:	bf00      	nop
 8016bd4:	0801d440 	.word	0x0801d440
 8016bd8:	0801d61c 	.word	0x0801d61c
 8016bdc:	0801d488 	.word	0x0801d488
 8016be0:	0801d638 	.word	0x0801d638
 8016be4:	0801d658 	.word	0x0801d658
 8016be8:	080168f9 	.word	0x080168f9

08016bec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b086      	sub	sp, #24
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
 8016bf4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016bf6:	230e      	movs	r3, #14
 8016bf8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	895b      	ldrh	r3, [r3, #10]
 8016bfe:	2b0e      	cmp	r3, #14
 8016c00:	d96e      	bls.n	8016ce0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	7bdb      	ldrb	r3, [r3, #15]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d106      	bne.n	8016c18 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c10:	3301      	adds	r3, #1
 8016c12:	b2da      	uxtb	r2, r3
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	685b      	ldr	r3, [r3, #4]
 8016c1c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	7b1a      	ldrb	r2, [r3, #12]
 8016c22:	7b5b      	ldrb	r3, [r3, #13]
 8016c24:	021b      	lsls	r3, r3, #8
 8016c26:	4313      	orrs	r3, r2
 8016c28:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	f003 0301 	and.w	r3, r3, #1
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d023      	beq.n	8016c7e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	2b01      	cmp	r3, #1
 8016c3c:	d10f      	bne.n	8016c5e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	785b      	ldrb	r3, [r3, #1]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d11b      	bne.n	8016c7e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016c4a:	2b5e      	cmp	r3, #94	; 0x5e
 8016c4c:	d117      	bne.n	8016c7e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	7b5b      	ldrb	r3, [r3, #13]
 8016c52:	f043 0310 	orr.w	r3, r3, #16
 8016c56:	b2da      	uxtb	r2, r3
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	735a      	strb	r2, [r3, #13]
 8016c5c:	e00f      	b.n	8016c7e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	2206      	movs	r2, #6
 8016c62:	4928      	ldr	r1, [pc, #160]	; (8016d04 <ethernet_input+0x118>)
 8016c64:	4618      	mov	r0, r3
 8016c66:	f000 fb6e 	bl	8017346 <memcmp>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d106      	bne.n	8016c7e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	7b5b      	ldrb	r3, [r3, #13]
 8016c74:	f043 0308 	orr.w	r3, r3, #8
 8016c78:	b2da      	uxtb	r2, r3
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016c7e:	89fb      	ldrh	r3, [r7, #14]
 8016c80:	2b08      	cmp	r3, #8
 8016c82:	d003      	beq.n	8016c8c <ethernet_input+0xa0>
 8016c84:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016c88:	d014      	beq.n	8016cb4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016c8a:	e032      	b.n	8016cf2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c92:	f003 0308 	and.w	r3, r3, #8
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d024      	beq.n	8016ce4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c9a:	8afb      	ldrh	r3, [r7, #22]
 8016c9c:	4619      	mov	r1, r3
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f7f7 f82e 	bl	800dd00 <pbuf_remove_header>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d11e      	bne.n	8016ce8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016caa:	6839      	ldr	r1, [r7, #0]
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7fe ff2b 	bl	8015b08 <ip4_input>
      break;
 8016cb2:	e013      	b.n	8016cdc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016cba:	f003 0308 	and.w	r3, r3, #8
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d014      	beq.n	8016cec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016cc2:	8afb      	ldrh	r3, [r7, #22]
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7f7 f81a 	bl	800dd00 <pbuf_remove_header>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d10e      	bne.n	8016cf0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016cd2:	6839      	ldr	r1, [r7, #0]
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f7fe f8cb 	bl	8014e70 <etharp_input>
      break;
 8016cda:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	e00c      	b.n	8016cfa <ethernet_input+0x10e>
    goto free_and_return;
 8016ce0:	bf00      	nop
 8016ce2:	e006      	b.n	8016cf2 <ethernet_input+0x106>
        goto free_and_return;
 8016ce4:	bf00      	nop
 8016ce6:	e004      	b.n	8016cf2 <ethernet_input+0x106>
        goto free_and_return;
 8016ce8:	bf00      	nop
 8016cea:	e002      	b.n	8016cf2 <ethernet_input+0x106>
        goto free_and_return;
 8016cec:	bf00      	nop
 8016cee:	e000      	b.n	8016cf2 <ethernet_input+0x106>
        goto free_and_return;
 8016cf0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f7f7 f88a 	bl	800de0c <pbuf_free>
  return ERR_OK;
 8016cf8:	2300      	movs	r3, #0
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3718      	adds	r7, #24
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	0801d8d4 	.word	0x0801d8d4

08016d08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b086      	sub	sp, #24
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
 8016d14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016d16:	8c3b      	ldrh	r3, [r7, #32]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7f5 fb71 	bl	800c400 <lwip_htons>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016d22:	210e      	movs	r1, #14
 8016d24:	68b8      	ldr	r0, [r7, #8]
 8016d26:	f7f6 ffdb 	bl	800dce0 <pbuf_add_header>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d125      	bne.n	8016d7c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	8afa      	ldrh	r2, [r7, #22]
 8016d3a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	2206      	movs	r2, #6
 8016d40:	6839      	ldr	r1, [r7, #0]
 8016d42:	4618      	mov	r0, r3
 8016d44:	f000 fb0f 	bl	8017366 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	3306      	adds	r3, #6
 8016d4c:	2206      	movs	r2, #6
 8016d4e:	6879      	ldr	r1, [r7, #4]
 8016d50:	4618      	mov	r0, r3
 8016d52:	f000 fb08 	bl	8017366 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d5c:	2b06      	cmp	r3, #6
 8016d5e:	d006      	beq.n	8016d6e <ethernet_output+0x66>
 8016d60:	4b0a      	ldr	r3, [pc, #40]	; (8016d8c <ethernet_output+0x84>)
 8016d62:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016d66:	490a      	ldr	r1, [pc, #40]	; (8016d90 <ethernet_output+0x88>)
 8016d68:	480a      	ldr	r0, [pc, #40]	; (8016d94 <ethernet_output+0x8c>)
 8016d6a:	f000 fbc1 	bl	80174f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	699b      	ldr	r3, [r3, #24]
 8016d72:	68b9      	ldr	r1, [r7, #8]
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	4798      	blx	r3
 8016d78:	4603      	mov	r3, r0
 8016d7a:	e002      	b.n	8016d82 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016d7c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016d7e:	f06f 0301 	mvn.w	r3, #1
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3718      	adds	r7, #24
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
 8016d8a:	bf00      	nop
 8016d8c:	0801d668 	.word	0x0801d668
 8016d90:	0801d6a0 	.word	0x0801d6a0
 8016d94:	0801d6d4 	.word	0x0801d6d4

08016d98 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
 8016da0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	2200      	movs	r2, #0
 8016da6:	2104      	movs	r1, #4
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7ef fdef 	bl	800698c <osMessageQueueNew>
 8016dae:	4602      	mov	r2, r0
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d102      	bne.n	8016dc2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dc0:	e000      	b.n	8016dc4 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016dc2:	2300      	movs	r3, #0
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3708      	adds	r7, #8
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}

08016dcc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7ef ff43 	bl	8006c64 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7ef ff70 	bl	8006cc8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016de8:	bf00      	nop
 8016dea:	3708      	adds	r7, #8
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	6818      	ldr	r0, [r3, #0]
 8016dfe:	4639      	mov	r1, r7
 8016e00:	2300      	movs	r3, #0
 8016e02:	2200      	movs	r2, #0
 8016e04:	f7ef fe48 	bl	8006a98 <osMessageQueuePut>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d102      	bne.n	8016e14 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	73fb      	strb	r3, [r7, #15]
 8016e12:	e001      	b.n	8016e18 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016e14:	23ff      	movs	r3, #255	; 0xff
 8016e16:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	3710      	adds	r7, #16
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b086      	sub	sp, #24
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	60b9      	str	r1, [r7, #8]
 8016e2e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016e30:	f7ef f9d8 	bl	80061e4 <osKernelGetTickCount>
 8016e34:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d013      	beq.n	8016e64 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	6818      	ldr	r0, [r3, #0]
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2200      	movs	r2, #0
 8016e44:	68b9      	ldr	r1, [r7, #8]
 8016e46:	f7ef fe9b 	bl	8006b80 <osMessageQueueGet>
 8016e4a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d105      	bne.n	8016e5e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016e52:	f7ef f9c7 	bl	80061e4 <osKernelGetTickCount>
 8016e56:	4602      	mov	r2, r0
 8016e58:	697b      	ldr	r3, [r7, #20]
 8016e5a:	1ad3      	subs	r3, r2, r3
 8016e5c:	e00f      	b.n	8016e7e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e62:	e00c      	b.n	8016e7e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	6818      	ldr	r0, [r3, #0]
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	68b9      	ldr	r1, [r7, #8]
 8016e70:	f7ef fe86 	bl	8006b80 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016e74:	f7ef f9b6 	bl	80061e4 <osKernelGetTickCount>
 8016e78:	4602      	mov	r2, r0
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3718      	adds	r7, #24
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}

08016e86 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016e86:	b580      	push	{r7, lr}
 8016e88:	b082      	sub	sp, #8
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	6078      	str	r0, [r7, #4]
 8016e8e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	6818      	ldr	r0, [r3, #0]
 8016e94:	2300      	movs	r3, #0
 8016e96:	2200      	movs	r2, #0
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	f7ef fe71 	bl	8006b80 <osMessageQueueGet>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d101      	bne.n	8016ea8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	e001      	b.n	8016eac <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3708      	adds	r7, #8
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016eb4:	b480      	push	{r7}
 8016eb6:	b083      	sub	sp, #12
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d101      	bne.n	8016ec8 <sys_mbox_valid+0x14>
    return 0;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	e000      	b.n	8016eca <sys_mbox_valid+0x16>
  else
    return 1;
 8016ec8:	2301      	movs	r3, #1
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	370c      	adds	r7, #12
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed4:	4770      	bx	lr

08016ed6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016ed6:	b480      	push	{r7}
 8016ed8:	b083      	sub	sp, #12
 8016eda:	af00      	add	r7, sp, #0
 8016edc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	601a      	str	r2, [r3, #0]
}
 8016ee4:	bf00      	nop
 8016ee6:	370c      	adds	r7, #12
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eee:	4770      	bx	lr

08016ef0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	460b      	mov	r3, r1
 8016efa:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016efc:	78fb      	ldrb	r3, [r7, #3]
 8016efe:	2200      	movs	r2, #0
 8016f00:	4619      	mov	r1, r3
 8016f02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016f06:	f7ef fbb1 	bl	800666c <osSemaphoreNew>
 8016f0a:	4602      	mov	r2, r0
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d102      	bne.n	8016f1e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f1c:	e009      	b.n	8016f32 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8016f1e:	78fb      	ldrb	r3, [r7, #3]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d105      	bne.n	8016f30 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	2100      	movs	r1, #0
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7ef fc3a 	bl	80067a4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016f30:	2300      	movs	r3, #0
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3708      	adds	r7, #8
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b084      	sub	sp, #16
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
 8016f42:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8016f44:	f7ef f94e 	bl	80061e4 <osKernelGetTickCount>
 8016f48:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d011      	beq.n	8016f74 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	6839      	ldr	r1, [r7, #0]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7ef fc24 	bl	80067a4 <osSemaphoreAcquire>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d105      	bne.n	8016f6e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8016f62:	f7ef f93f 	bl	80061e4 <osKernelGetTickCount>
 8016f66:	4602      	mov	r2, r0
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	1ad3      	subs	r3, r2, r3
 8016f6c:	e012      	b.n	8016f94 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f72:	e00f      	b.n	8016f94 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8016f74:	bf00      	nop
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7ef fc10 	bl	80067a4 <osSemaphoreAcquire>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d1f5      	bne.n	8016f76 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8016f8a:	f7ef f92b 	bl	80061e4 <osKernelGetTickCount>
 8016f8e:	4602      	mov	r2, r0
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7ef fc61 	bl	8006870 <osSemaphoreRelease>
}
 8016fae:	bf00      	nop
 8016fb0:	3708      	adds	r7, #8
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}

08016fb6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016fb6:	b580      	push	{r7, lr}
 8016fb8:	b082      	sub	sp, #8
 8016fba:	af00      	add	r7, sp, #0
 8016fbc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7ef fcac 	bl	8006920 <osSemaphoreDelete>
}
 8016fc8:	bf00      	nop
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b083      	sub	sp, #12
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d101      	bne.n	8016fe4 <sys_sem_valid+0x14>
    return 0;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e000      	b.n	8016fe6 <sys_sem_valid+0x16>
  else
    return 1;
 8016fe4:	2301      	movs	r3, #1
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	370c      	adds	r7, #12
 8016fea:	46bd      	mov	sp, r7
 8016fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff0:	4770      	bx	lr

08016ff2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016ff2:	b480      	push	{r7}
 8016ff4:	b083      	sub	sp, #12
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	601a      	str	r2, [r3, #0]
}
 8017000:	bf00      	nop
 8017002:	370c      	adds	r7, #12
 8017004:	46bd      	mov	sp, r7
 8017006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700a:	4770      	bx	lr

0801700c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017010:	2000      	movs	r0, #0
 8017012:	f7ef f9e3 	bl	80063dc <osMutexNew>
 8017016:	4603      	mov	r3, r0
 8017018:	4a01      	ldr	r2, [pc, #4]	; (8017020 <sys_init+0x14>)
 801701a:	6013      	str	r3, [r2, #0]
#endif
}
 801701c:	bf00      	nop
 801701e:	bd80      	pop	{r7, pc}
 8017020:	20011cf0 	.word	0x20011cf0

08017024 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801702c:	2000      	movs	r0, #0
 801702e:	f7ef f9d5 	bl	80063dc <osMutexNew>
 8017032:	4602      	mov	r2, r0
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d102      	bne.n	8017046 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017044:	e000      	b.n	8017048 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017060:	4618      	mov	r0, r3
 8017062:	f7ef fa55 	bl	8006510 <osMutexAcquire>
#endif
}
 8017066:	bf00      	nop
 8017068:	3708      	adds	r7, #8
 801706a:	46bd      	mov	sp, r7
 801706c:	bd80      	pop	{r7, pc}

0801706e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801706e:	b580      	push	{r7, lr}
 8017070:	b082      	sub	sp, #8
 8017072:	af00      	add	r7, sp, #0
 8017074:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	4618      	mov	r0, r3
 801707c:	f7ef faa6 	bl	80065cc <osMutexRelease>
}
 8017080:	bf00      	nop
 8017082:	3708      	adds	r7, #8
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}

08017088 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b08e      	sub	sp, #56	; 0x38
 801708c:	af00      	add	r7, sp, #0
 801708e:	60f8      	str	r0, [r7, #12]
 8017090:	60b9      	str	r1, [r7, #8]
 8017092:	607a      	str	r2, [r7, #4]
 8017094:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017096:	f107 0314 	add.w	r3, r7, #20
 801709a:	2224      	movs	r2, #36	; 0x24
 801709c:	2100      	movs	r1, #0
 801709e:	4618      	mov	r0, r3
 80170a0:	f000 f989 	bl	80173b6 <memset>
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	617b      	str	r3, [r7, #20]
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80170ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80170b0:	f107 0314 	add.w	r3, r7, #20
 80170b4:	461a      	mov	r2, r3
 80170b6:	6879      	ldr	r1, [r7, #4]
 80170b8:	68b8      	ldr	r0, [r7, #8]
 80170ba:	f7ef f8bb 	bl	8006234 <osThreadNew>
 80170be:	4603      	mov	r3, r0
#endif
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3738      	adds	r7, #56	; 0x38
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}

080170c8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80170cc:	4b04      	ldr	r3, [pc, #16]	; (80170e0 <sys_arch_protect+0x18>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80170d4:	4618      	mov	r0, r3
 80170d6:	f7ef fa1b 	bl	8006510 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80170da:	2301      	movs	r3, #1
}
 80170dc:	4618      	mov	r0, r3
 80170de:	bd80      	pop	{r7, pc}
 80170e0:	20011cf0 	.word	0x20011cf0

080170e4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b082      	sub	sp, #8
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80170ec:	4b04      	ldr	r3, [pc, #16]	; (8017100 <sys_arch_unprotect+0x1c>)
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	4618      	mov	r0, r3
 80170f2:	f7ef fa6b 	bl	80065cc <osMutexRelease>
}
 80170f6:	bf00      	nop
 80170f8:	3708      	adds	r7, #8
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	bf00      	nop
 8017100:	20011cf0 	.word	0x20011cf0

08017104 <atof>:
 8017104:	2100      	movs	r1, #0
 8017106:	f001 b971 	b.w	80183ec <strtod>
	...

0801710c <std>:
 801710c:	2300      	movs	r3, #0
 801710e:	b510      	push	{r4, lr}
 8017110:	4604      	mov	r4, r0
 8017112:	e9c0 3300 	strd	r3, r3, [r0]
 8017116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801711a:	6083      	str	r3, [r0, #8]
 801711c:	8181      	strh	r1, [r0, #12]
 801711e:	6643      	str	r3, [r0, #100]	; 0x64
 8017120:	81c2      	strh	r2, [r0, #14]
 8017122:	6183      	str	r3, [r0, #24]
 8017124:	4619      	mov	r1, r3
 8017126:	2208      	movs	r2, #8
 8017128:	305c      	adds	r0, #92	; 0x5c
 801712a:	f000 f944 	bl	80173b6 <memset>
 801712e:	4b05      	ldr	r3, [pc, #20]	; (8017144 <std+0x38>)
 8017130:	6263      	str	r3, [r4, #36]	; 0x24
 8017132:	4b05      	ldr	r3, [pc, #20]	; (8017148 <std+0x3c>)
 8017134:	62a3      	str	r3, [r4, #40]	; 0x28
 8017136:	4b05      	ldr	r3, [pc, #20]	; (801714c <std+0x40>)
 8017138:	62e3      	str	r3, [r4, #44]	; 0x2c
 801713a:	4b05      	ldr	r3, [pc, #20]	; (8017150 <std+0x44>)
 801713c:	6224      	str	r4, [r4, #32]
 801713e:	6323      	str	r3, [r4, #48]	; 0x30
 8017140:	bd10      	pop	{r4, pc}
 8017142:	bf00      	nop
 8017144:	080176d1 	.word	0x080176d1
 8017148:	080176f3 	.word	0x080176f3
 801714c:	0801772b 	.word	0x0801772b
 8017150:	0801774f 	.word	0x0801774f

08017154 <_cleanup_r>:
 8017154:	4901      	ldr	r1, [pc, #4]	; (801715c <_cleanup_r+0x8>)
 8017156:	f000 b8af 	b.w	80172b8 <_fwalk_reent>
 801715a:	bf00      	nop
 801715c:	08018649 	.word	0x08018649

08017160 <__sfmoreglue>:
 8017160:	b570      	push	{r4, r5, r6, lr}
 8017162:	2268      	movs	r2, #104	; 0x68
 8017164:	1e4d      	subs	r5, r1, #1
 8017166:	4355      	muls	r5, r2
 8017168:	460e      	mov	r6, r1
 801716a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801716e:	f000 f94b 	bl	8017408 <_malloc_r>
 8017172:	4604      	mov	r4, r0
 8017174:	b140      	cbz	r0, 8017188 <__sfmoreglue+0x28>
 8017176:	2100      	movs	r1, #0
 8017178:	e9c0 1600 	strd	r1, r6, [r0]
 801717c:	300c      	adds	r0, #12
 801717e:	60a0      	str	r0, [r4, #8]
 8017180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017184:	f000 f917 	bl	80173b6 <memset>
 8017188:	4620      	mov	r0, r4
 801718a:	bd70      	pop	{r4, r5, r6, pc}

0801718c <__sfp_lock_acquire>:
 801718c:	4801      	ldr	r0, [pc, #4]	; (8017194 <__sfp_lock_acquire+0x8>)
 801718e:	f000 b8d8 	b.w	8017342 <__retarget_lock_acquire_recursive>
 8017192:	bf00      	nop
 8017194:	20011cf5 	.word	0x20011cf5

08017198 <__sfp_lock_release>:
 8017198:	4801      	ldr	r0, [pc, #4]	; (80171a0 <__sfp_lock_release+0x8>)
 801719a:	f000 b8d3 	b.w	8017344 <__retarget_lock_release_recursive>
 801719e:	bf00      	nop
 80171a0:	20011cf5 	.word	0x20011cf5

080171a4 <__sinit_lock_acquire>:
 80171a4:	4801      	ldr	r0, [pc, #4]	; (80171ac <__sinit_lock_acquire+0x8>)
 80171a6:	f000 b8cc 	b.w	8017342 <__retarget_lock_acquire_recursive>
 80171aa:	bf00      	nop
 80171ac:	20011cf6 	.word	0x20011cf6

080171b0 <__sinit_lock_release>:
 80171b0:	4801      	ldr	r0, [pc, #4]	; (80171b8 <__sinit_lock_release+0x8>)
 80171b2:	f000 b8c7 	b.w	8017344 <__retarget_lock_release_recursive>
 80171b6:	bf00      	nop
 80171b8:	20011cf6 	.word	0x20011cf6

080171bc <__sinit>:
 80171bc:	b510      	push	{r4, lr}
 80171be:	4604      	mov	r4, r0
 80171c0:	f7ff fff0 	bl	80171a4 <__sinit_lock_acquire>
 80171c4:	69a3      	ldr	r3, [r4, #24]
 80171c6:	b11b      	cbz	r3, 80171d0 <__sinit+0x14>
 80171c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171cc:	f7ff bff0 	b.w	80171b0 <__sinit_lock_release>
 80171d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80171d4:	6523      	str	r3, [r4, #80]	; 0x50
 80171d6:	4b13      	ldr	r3, [pc, #76]	; (8017224 <__sinit+0x68>)
 80171d8:	4a13      	ldr	r2, [pc, #76]	; (8017228 <__sinit+0x6c>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80171de:	42a3      	cmp	r3, r4
 80171e0:	bf04      	itt	eq
 80171e2:	2301      	moveq	r3, #1
 80171e4:	61a3      	streq	r3, [r4, #24]
 80171e6:	4620      	mov	r0, r4
 80171e8:	f000 f820 	bl	801722c <__sfp>
 80171ec:	6060      	str	r0, [r4, #4]
 80171ee:	4620      	mov	r0, r4
 80171f0:	f000 f81c 	bl	801722c <__sfp>
 80171f4:	60a0      	str	r0, [r4, #8]
 80171f6:	4620      	mov	r0, r4
 80171f8:	f000 f818 	bl	801722c <__sfp>
 80171fc:	2200      	movs	r2, #0
 80171fe:	60e0      	str	r0, [r4, #12]
 8017200:	2104      	movs	r1, #4
 8017202:	6860      	ldr	r0, [r4, #4]
 8017204:	f7ff ff82 	bl	801710c <std>
 8017208:	68a0      	ldr	r0, [r4, #8]
 801720a:	2201      	movs	r2, #1
 801720c:	2109      	movs	r1, #9
 801720e:	f7ff ff7d 	bl	801710c <std>
 8017212:	68e0      	ldr	r0, [r4, #12]
 8017214:	2202      	movs	r2, #2
 8017216:	2112      	movs	r1, #18
 8017218:	f7ff ff78 	bl	801710c <std>
 801721c:	2301      	movs	r3, #1
 801721e:	61a3      	str	r3, [r4, #24]
 8017220:	e7d2      	b.n	80171c8 <__sinit+0xc>
 8017222:	bf00      	nop
 8017224:	0801da44 	.word	0x0801da44
 8017228:	08017155 	.word	0x08017155

0801722c <__sfp>:
 801722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801722e:	4607      	mov	r7, r0
 8017230:	f7ff ffac 	bl	801718c <__sfp_lock_acquire>
 8017234:	4b1e      	ldr	r3, [pc, #120]	; (80172b0 <__sfp+0x84>)
 8017236:	681e      	ldr	r6, [r3, #0]
 8017238:	69b3      	ldr	r3, [r6, #24]
 801723a:	b913      	cbnz	r3, 8017242 <__sfp+0x16>
 801723c:	4630      	mov	r0, r6
 801723e:	f7ff ffbd 	bl	80171bc <__sinit>
 8017242:	3648      	adds	r6, #72	; 0x48
 8017244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017248:	3b01      	subs	r3, #1
 801724a:	d503      	bpl.n	8017254 <__sfp+0x28>
 801724c:	6833      	ldr	r3, [r6, #0]
 801724e:	b30b      	cbz	r3, 8017294 <__sfp+0x68>
 8017250:	6836      	ldr	r6, [r6, #0]
 8017252:	e7f7      	b.n	8017244 <__sfp+0x18>
 8017254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017258:	b9d5      	cbnz	r5, 8017290 <__sfp+0x64>
 801725a:	4b16      	ldr	r3, [pc, #88]	; (80172b4 <__sfp+0x88>)
 801725c:	60e3      	str	r3, [r4, #12]
 801725e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017262:	6665      	str	r5, [r4, #100]	; 0x64
 8017264:	f000 f86c 	bl	8017340 <__retarget_lock_init_recursive>
 8017268:	f7ff ff96 	bl	8017198 <__sfp_lock_release>
 801726c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017270:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017274:	6025      	str	r5, [r4, #0]
 8017276:	61a5      	str	r5, [r4, #24]
 8017278:	2208      	movs	r2, #8
 801727a:	4629      	mov	r1, r5
 801727c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017280:	f000 f899 	bl	80173b6 <memset>
 8017284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801728c:	4620      	mov	r0, r4
 801728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017290:	3468      	adds	r4, #104	; 0x68
 8017292:	e7d9      	b.n	8017248 <__sfp+0x1c>
 8017294:	2104      	movs	r1, #4
 8017296:	4638      	mov	r0, r7
 8017298:	f7ff ff62 	bl	8017160 <__sfmoreglue>
 801729c:	4604      	mov	r4, r0
 801729e:	6030      	str	r0, [r6, #0]
 80172a0:	2800      	cmp	r0, #0
 80172a2:	d1d5      	bne.n	8017250 <__sfp+0x24>
 80172a4:	f7ff ff78 	bl	8017198 <__sfp_lock_release>
 80172a8:	230c      	movs	r3, #12
 80172aa:	603b      	str	r3, [r7, #0]
 80172ac:	e7ee      	b.n	801728c <__sfp+0x60>
 80172ae:	bf00      	nop
 80172b0:	0801da44 	.word	0x0801da44
 80172b4:	ffff0001 	.word	0xffff0001

080172b8 <_fwalk_reent>:
 80172b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172bc:	4606      	mov	r6, r0
 80172be:	4688      	mov	r8, r1
 80172c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172c4:	2700      	movs	r7, #0
 80172c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80172ca:	f1b9 0901 	subs.w	r9, r9, #1
 80172ce:	d505      	bpl.n	80172dc <_fwalk_reent+0x24>
 80172d0:	6824      	ldr	r4, [r4, #0]
 80172d2:	2c00      	cmp	r4, #0
 80172d4:	d1f7      	bne.n	80172c6 <_fwalk_reent+0xe>
 80172d6:	4638      	mov	r0, r7
 80172d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172dc:	89ab      	ldrh	r3, [r5, #12]
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d907      	bls.n	80172f2 <_fwalk_reent+0x3a>
 80172e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172e6:	3301      	adds	r3, #1
 80172e8:	d003      	beq.n	80172f2 <_fwalk_reent+0x3a>
 80172ea:	4629      	mov	r1, r5
 80172ec:	4630      	mov	r0, r6
 80172ee:	47c0      	blx	r8
 80172f0:	4307      	orrs	r7, r0
 80172f2:	3568      	adds	r5, #104	; 0x68
 80172f4:	e7e9      	b.n	80172ca <_fwalk_reent+0x12>
	...

080172f8 <__libc_init_array>:
 80172f8:	b570      	push	{r4, r5, r6, lr}
 80172fa:	4d0d      	ldr	r5, [pc, #52]	; (8017330 <__libc_init_array+0x38>)
 80172fc:	4c0d      	ldr	r4, [pc, #52]	; (8017334 <__libc_init_array+0x3c>)
 80172fe:	1b64      	subs	r4, r4, r5
 8017300:	10a4      	asrs	r4, r4, #2
 8017302:	2600      	movs	r6, #0
 8017304:	42a6      	cmp	r6, r4
 8017306:	d109      	bne.n	801731c <__libc_init_array+0x24>
 8017308:	4d0b      	ldr	r5, [pc, #44]	; (8017338 <__libc_init_array+0x40>)
 801730a:	4c0c      	ldr	r4, [pc, #48]	; (801733c <__libc_init_array+0x44>)
 801730c:	f003 f8f4 	bl	801a4f8 <_init>
 8017310:	1b64      	subs	r4, r4, r5
 8017312:	10a4      	asrs	r4, r4, #2
 8017314:	2600      	movs	r6, #0
 8017316:	42a6      	cmp	r6, r4
 8017318:	d105      	bne.n	8017326 <__libc_init_array+0x2e>
 801731a:	bd70      	pop	{r4, r5, r6, pc}
 801731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017320:	4798      	blx	r3
 8017322:	3601      	adds	r6, #1
 8017324:	e7ee      	b.n	8017304 <__libc_init_array+0xc>
 8017326:	f855 3b04 	ldr.w	r3, [r5], #4
 801732a:	4798      	blx	r3
 801732c:	3601      	adds	r6, #1
 801732e:	e7f2      	b.n	8017316 <__libc_init_array+0x1e>
 8017330:	0801ddd0 	.word	0x0801ddd0
 8017334:	0801ddd0 	.word	0x0801ddd0
 8017338:	0801ddd0 	.word	0x0801ddd0
 801733c:	0801ddd4 	.word	0x0801ddd4

08017340 <__retarget_lock_init_recursive>:
 8017340:	4770      	bx	lr

08017342 <__retarget_lock_acquire_recursive>:
 8017342:	4770      	bx	lr

08017344 <__retarget_lock_release_recursive>:
 8017344:	4770      	bx	lr

08017346 <memcmp>:
 8017346:	b510      	push	{r4, lr}
 8017348:	3901      	subs	r1, #1
 801734a:	4402      	add	r2, r0
 801734c:	4290      	cmp	r0, r2
 801734e:	d101      	bne.n	8017354 <memcmp+0xe>
 8017350:	2000      	movs	r0, #0
 8017352:	e005      	b.n	8017360 <memcmp+0x1a>
 8017354:	7803      	ldrb	r3, [r0, #0]
 8017356:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801735a:	42a3      	cmp	r3, r4
 801735c:	d001      	beq.n	8017362 <memcmp+0x1c>
 801735e:	1b18      	subs	r0, r3, r4
 8017360:	bd10      	pop	{r4, pc}
 8017362:	3001      	adds	r0, #1
 8017364:	e7f2      	b.n	801734c <memcmp+0x6>

08017366 <memcpy>:
 8017366:	440a      	add	r2, r1
 8017368:	4291      	cmp	r1, r2
 801736a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801736e:	d100      	bne.n	8017372 <memcpy+0xc>
 8017370:	4770      	bx	lr
 8017372:	b510      	push	{r4, lr}
 8017374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017378:	f803 4f01 	strb.w	r4, [r3, #1]!
 801737c:	4291      	cmp	r1, r2
 801737e:	d1f9      	bne.n	8017374 <memcpy+0xe>
 8017380:	bd10      	pop	{r4, pc}

08017382 <memmove>:
 8017382:	4288      	cmp	r0, r1
 8017384:	b510      	push	{r4, lr}
 8017386:	eb01 0402 	add.w	r4, r1, r2
 801738a:	d902      	bls.n	8017392 <memmove+0x10>
 801738c:	4284      	cmp	r4, r0
 801738e:	4623      	mov	r3, r4
 8017390:	d807      	bhi.n	80173a2 <memmove+0x20>
 8017392:	1e43      	subs	r3, r0, #1
 8017394:	42a1      	cmp	r1, r4
 8017396:	d008      	beq.n	80173aa <memmove+0x28>
 8017398:	f811 2b01 	ldrb.w	r2, [r1], #1
 801739c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173a0:	e7f8      	b.n	8017394 <memmove+0x12>
 80173a2:	4402      	add	r2, r0
 80173a4:	4601      	mov	r1, r0
 80173a6:	428a      	cmp	r2, r1
 80173a8:	d100      	bne.n	80173ac <memmove+0x2a>
 80173aa:	bd10      	pop	{r4, pc}
 80173ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173b4:	e7f7      	b.n	80173a6 <memmove+0x24>

080173b6 <memset>:
 80173b6:	4402      	add	r2, r0
 80173b8:	4603      	mov	r3, r0
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d100      	bne.n	80173c0 <memset+0xa>
 80173be:	4770      	bx	lr
 80173c0:	f803 1b01 	strb.w	r1, [r3], #1
 80173c4:	e7f9      	b.n	80173ba <memset+0x4>
	...

080173c8 <sbrk_aligned>:
 80173c8:	b570      	push	{r4, r5, r6, lr}
 80173ca:	4e0e      	ldr	r6, [pc, #56]	; (8017404 <sbrk_aligned+0x3c>)
 80173cc:	460c      	mov	r4, r1
 80173ce:	6831      	ldr	r1, [r6, #0]
 80173d0:	4605      	mov	r5, r0
 80173d2:	b911      	cbnz	r1, 80173da <sbrk_aligned+0x12>
 80173d4:	f000 f94c 	bl	8017670 <_sbrk_r>
 80173d8:	6030      	str	r0, [r6, #0]
 80173da:	4621      	mov	r1, r4
 80173dc:	4628      	mov	r0, r5
 80173de:	f000 f947 	bl	8017670 <_sbrk_r>
 80173e2:	1c43      	adds	r3, r0, #1
 80173e4:	d00a      	beq.n	80173fc <sbrk_aligned+0x34>
 80173e6:	1cc4      	adds	r4, r0, #3
 80173e8:	f024 0403 	bic.w	r4, r4, #3
 80173ec:	42a0      	cmp	r0, r4
 80173ee:	d007      	beq.n	8017400 <sbrk_aligned+0x38>
 80173f0:	1a21      	subs	r1, r4, r0
 80173f2:	4628      	mov	r0, r5
 80173f4:	f000 f93c 	bl	8017670 <_sbrk_r>
 80173f8:	3001      	adds	r0, #1
 80173fa:	d101      	bne.n	8017400 <sbrk_aligned+0x38>
 80173fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017400:	4620      	mov	r0, r4
 8017402:	bd70      	pop	{r4, r5, r6, pc}
 8017404:	20011cfc 	.word	0x20011cfc

08017408 <_malloc_r>:
 8017408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801740c:	1ccd      	adds	r5, r1, #3
 801740e:	f025 0503 	bic.w	r5, r5, #3
 8017412:	3508      	adds	r5, #8
 8017414:	2d0c      	cmp	r5, #12
 8017416:	bf38      	it	cc
 8017418:	250c      	movcc	r5, #12
 801741a:	2d00      	cmp	r5, #0
 801741c:	4607      	mov	r7, r0
 801741e:	db01      	blt.n	8017424 <_malloc_r+0x1c>
 8017420:	42a9      	cmp	r1, r5
 8017422:	d905      	bls.n	8017430 <_malloc_r+0x28>
 8017424:	230c      	movs	r3, #12
 8017426:	603b      	str	r3, [r7, #0]
 8017428:	2600      	movs	r6, #0
 801742a:	4630      	mov	r0, r6
 801742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017430:	4e2e      	ldr	r6, [pc, #184]	; (80174ec <_malloc_r+0xe4>)
 8017432:	f001 fcf3 	bl	8018e1c <__malloc_lock>
 8017436:	6833      	ldr	r3, [r6, #0]
 8017438:	461c      	mov	r4, r3
 801743a:	bb34      	cbnz	r4, 801748a <_malloc_r+0x82>
 801743c:	4629      	mov	r1, r5
 801743e:	4638      	mov	r0, r7
 8017440:	f7ff ffc2 	bl	80173c8 <sbrk_aligned>
 8017444:	1c43      	adds	r3, r0, #1
 8017446:	4604      	mov	r4, r0
 8017448:	d14d      	bne.n	80174e6 <_malloc_r+0xde>
 801744a:	6834      	ldr	r4, [r6, #0]
 801744c:	4626      	mov	r6, r4
 801744e:	2e00      	cmp	r6, #0
 8017450:	d140      	bne.n	80174d4 <_malloc_r+0xcc>
 8017452:	6823      	ldr	r3, [r4, #0]
 8017454:	4631      	mov	r1, r6
 8017456:	4638      	mov	r0, r7
 8017458:	eb04 0803 	add.w	r8, r4, r3
 801745c:	f000 f908 	bl	8017670 <_sbrk_r>
 8017460:	4580      	cmp	r8, r0
 8017462:	d13a      	bne.n	80174da <_malloc_r+0xd2>
 8017464:	6821      	ldr	r1, [r4, #0]
 8017466:	3503      	adds	r5, #3
 8017468:	1a6d      	subs	r5, r5, r1
 801746a:	f025 0503 	bic.w	r5, r5, #3
 801746e:	3508      	adds	r5, #8
 8017470:	2d0c      	cmp	r5, #12
 8017472:	bf38      	it	cc
 8017474:	250c      	movcc	r5, #12
 8017476:	4629      	mov	r1, r5
 8017478:	4638      	mov	r0, r7
 801747a:	f7ff ffa5 	bl	80173c8 <sbrk_aligned>
 801747e:	3001      	adds	r0, #1
 8017480:	d02b      	beq.n	80174da <_malloc_r+0xd2>
 8017482:	6823      	ldr	r3, [r4, #0]
 8017484:	442b      	add	r3, r5
 8017486:	6023      	str	r3, [r4, #0]
 8017488:	e00e      	b.n	80174a8 <_malloc_r+0xa0>
 801748a:	6822      	ldr	r2, [r4, #0]
 801748c:	1b52      	subs	r2, r2, r5
 801748e:	d41e      	bmi.n	80174ce <_malloc_r+0xc6>
 8017490:	2a0b      	cmp	r2, #11
 8017492:	d916      	bls.n	80174c2 <_malloc_r+0xba>
 8017494:	1961      	adds	r1, r4, r5
 8017496:	42a3      	cmp	r3, r4
 8017498:	6025      	str	r5, [r4, #0]
 801749a:	bf18      	it	ne
 801749c:	6059      	strne	r1, [r3, #4]
 801749e:	6863      	ldr	r3, [r4, #4]
 80174a0:	bf08      	it	eq
 80174a2:	6031      	streq	r1, [r6, #0]
 80174a4:	5162      	str	r2, [r4, r5]
 80174a6:	604b      	str	r3, [r1, #4]
 80174a8:	4638      	mov	r0, r7
 80174aa:	f104 060b 	add.w	r6, r4, #11
 80174ae:	f001 fcbb 	bl	8018e28 <__malloc_unlock>
 80174b2:	f026 0607 	bic.w	r6, r6, #7
 80174b6:	1d23      	adds	r3, r4, #4
 80174b8:	1af2      	subs	r2, r6, r3
 80174ba:	d0b6      	beq.n	801742a <_malloc_r+0x22>
 80174bc:	1b9b      	subs	r3, r3, r6
 80174be:	50a3      	str	r3, [r4, r2]
 80174c0:	e7b3      	b.n	801742a <_malloc_r+0x22>
 80174c2:	6862      	ldr	r2, [r4, #4]
 80174c4:	42a3      	cmp	r3, r4
 80174c6:	bf0c      	ite	eq
 80174c8:	6032      	streq	r2, [r6, #0]
 80174ca:	605a      	strne	r2, [r3, #4]
 80174cc:	e7ec      	b.n	80174a8 <_malloc_r+0xa0>
 80174ce:	4623      	mov	r3, r4
 80174d0:	6864      	ldr	r4, [r4, #4]
 80174d2:	e7b2      	b.n	801743a <_malloc_r+0x32>
 80174d4:	4634      	mov	r4, r6
 80174d6:	6876      	ldr	r6, [r6, #4]
 80174d8:	e7b9      	b.n	801744e <_malloc_r+0x46>
 80174da:	230c      	movs	r3, #12
 80174dc:	603b      	str	r3, [r7, #0]
 80174de:	4638      	mov	r0, r7
 80174e0:	f001 fca2 	bl	8018e28 <__malloc_unlock>
 80174e4:	e7a1      	b.n	801742a <_malloc_r+0x22>
 80174e6:	6025      	str	r5, [r4, #0]
 80174e8:	e7de      	b.n	80174a8 <_malloc_r+0xa0>
 80174ea:	bf00      	nop
 80174ec:	20011cf8 	.word	0x20011cf8

080174f0 <iprintf>:
 80174f0:	b40f      	push	{r0, r1, r2, r3}
 80174f2:	4b0a      	ldr	r3, [pc, #40]	; (801751c <iprintf+0x2c>)
 80174f4:	b513      	push	{r0, r1, r4, lr}
 80174f6:	681c      	ldr	r4, [r3, #0]
 80174f8:	b124      	cbz	r4, 8017504 <iprintf+0x14>
 80174fa:	69a3      	ldr	r3, [r4, #24]
 80174fc:	b913      	cbnz	r3, 8017504 <iprintf+0x14>
 80174fe:	4620      	mov	r0, r4
 8017500:	f7ff fe5c 	bl	80171bc <__sinit>
 8017504:	ab05      	add	r3, sp, #20
 8017506:	9a04      	ldr	r2, [sp, #16]
 8017508:	68a1      	ldr	r1, [r4, #8]
 801750a:	9301      	str	r3, [sp, #4]
 801750c:	4620      	mov	r0, r4
 801750e:	f002 fb3b 	bl	8019b88 <_vfiprintf_r>
 8017512:	b002      	add	sp, #8
 8017514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017518:	b004      	add	sp, #16
 801751a:	4770      	bx	lr
 801751c:	2000002c 	.word	0x2000002c

08017520 <rand>:
 8017520:	4b16      	ldr	r3, [pc, #88]	; (801757c <rand+0x5c>)
 8017522:	b510      	push	{r4, lr}
 8017524:	681c      	ldr	r4, [r3, #0]
 8017526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017528:	b9b3      	cbnz	r3, 8017558 <rand+0x38>
 801752a:	2018      	movs	r0, #24
 801752c:	f001 fc5c 	bl	8018de8 <malloc>
 8017530:	63a0      	str	r0, [r4, #56]	; 0x38
 8017532:	b928      	cbnz	r0, 8017540 <rand+0x20>
 8017534:	4602      	mov	r2, r0
 8017536:	4b12      	ldr	r3, [pc, #72]	; (8017580 <rand+0x60>)
 8017538:	4812      	ldr	r0, [pc, #72]	; (8017584 <rand+0x64>)
 801753a:	214e      	movs	r1, #78	; 0x4e
 801753c:	f000 ffd0 	bl	80184e0 <__assert_func>
 8017540:	4a11      	ldr	r2, [pc, #68]	; (8017588 <rand+0x68>)
 8017542:	4b12      	ldr	r3, [pc, #72]	; (801758c <rand+0x6c>)
 8017544:	e9c0 2300 	strd	r2, r3, [r0]
 8017548:	4b11      	ldr	r3, [pc, #68]	; (8017590 <rand+0x70>)
 801754a:	6083      	str	r3, [r0, #8]
 801754c:	230b      	movs	r3, #11
 801754e:	8183      	strh	r3, [r0, #12]
 8017550:	2201      	movs	r2, #1
 8017552:	2300      	movs	r3, #0
 8017554:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017558:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801755a:	4a0e      	ldr	r2, [pc, #56]	; (8017594 <rand+0x74>)
 801755c:	6920      	ldr	r0, [r4, #16]
 801755e:	6963      	ldr	r3, [r4, #20]
 8017560:	490d      	ldr	r1, [pc, #52]	; (8017598 <rand+0x78>)
 8017562:	4342      	muls	r2, r0
 8017564:	fb01 2203 	mla	r2, r1, r3, r2
 8017568:	fba0 0101 	umull	r0, r1, r0, r1
 801756c:	1c43      	adds	r3, r0, #1
 801756e:	eb42 0001 	adc.w	r0, r2, r1
 8017572:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017576:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801757a:	bd10      	pop	{r4, pc}
 801757c:	2000002c 	.word	0x2000002c
 8017580:	0801da48 	.word	0x0801da48
 8017584:	0801da5f 	.word	0x0801da5f
 8017588:	abcd330e 	.word	0xabcd330e
 801758c:	e66d1234 	.word	0xe66d1234
 8017590:	0005deec 	.word	0x0005deec
 8017594:	5851f42d 	.word	0x5851f42d
 8017598:	4c957f2d 	.word	0x4c957f2d

0801759c <cleanup_glue>:
 801759c:	b538      	push	{r3, r4, r5, lr}
 801759e:	460c      	mov	r4, r1
 80175a0:	6809      	ldr	r1, [r1, #0]
 80175a2:	4605      	mov	r5, r0
 80175a4:	b109      	cbz	r1, 80175aa <cleanup_glue+0xe>
 80175a6:	f7ff fff9 	bl	801759c <cleanup_glue>
 80175aa:	4621      	mov	r1, r4
 80175ac:	4628      	mov	r0, r5
 80175ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175b2:	f002 b917 	b.w	80197e4 <_free_r>
	...

080175b8 <_reclaim_reent>:
 80175b8:	4b2c      	ldr	r3, [pc, #176]	; (801766c <_reclaim_reent+0xb4>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	4283      	cmp	r3, r0
 80175be:	b570      	push	{r4, r5, r6, lr}
 80175c0:	4604      	mov	r4, r0
 80175c2:	d051      	beq.n	8017668 <_reclaim_reent+0xb0>
 80175c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80175c6:	b143      	cbz	r3, 80175da <_reclaim_reent+0x22>
 80175c8:	68db      	ldr	r3, [r3, #12]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d14a      	bne.n	8017664 <_reclaim_reent+0xac>
 80175ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175d0:	6819      	ldr	r1, [r3, #0]
 80175d2:	b111      	cbz	r1, 80175da <_reclaim_reent+0x22>
 80175d4:	4620      	mov	r0, r4
 80175d6:	f002 f905 	bl	80197e4 <_free_r>
 80175da:	6961      	ldr	r1, [r4, #20]
 80175dc:	b111      	cbz	r1, 80175e4 <_reclaim_reent+0x2c>
 80175de:	4620      	mov	r0, r4
 80175e0:	f002 f900 	bl	80197e4 <_free_r>
 80175e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80175e6:	b111      	cbz	r1, 80175ee <_reclaim_reent+0x36>
 80175e8:	4620      	mov	r0, r4
 80175ea:	f002 f8fb 	bl	80197e4 <_free_r>
 80175ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80175f0:	b111      	cbz	r1, 80175f8 <_reclaim_reent+0x40>
 80175f2:	4620      	mov	r0, r4
 80175f4:	f002 f8f6 	bl	80197e4 <_free_r>
 80175f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80175fa:	b111      	cbz	r1, 8017602 <_reclaim_reent+0x4a>
 80175fc:	4620      	mov	r0, r4
 80175fe:	f002 f8f1 	bl	80197e4 <_free_r>
 8017602:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017604:	b111      	cbz	r1, 801760c <_reclaim_reent+0x54>
 8017606:	4620      	mov	r0, r4
 8017608:	f002 f8ec 	bl	80197e4 <_free_r>
 801760c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801760e:	b111      	cbz	r1, 8017616 <_reclaim_reent+0x5e>
 8017610:	4620      	mov	r0, r4
 8017612:	f002 f8e7 	bl	80197e4 <_free_r>
 8017616:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017618:	b111      	cbz	r1, 8017620 <_reclaim_reent+0x68>
 801761a:	4620      	mov	r0, r4
 801761c:	f002 f8e2 	bl	80197e4 <_free_r>
 8017620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017622:	b111      	cbz	r1, 801762a <_reclaim_reent+0x72>
 8017624:	4620      	mov	r0, r4
 8017626:	f002 f8dd 	bl	80197e4 <_free_r>
 801762a:	69a3      	ldr	r3, [r4, #24]
 801762c:	b1e3      	cbz	r3, 8017668 <_reclaim_reent+0xb0>
 801762e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017630:	4620      	mov	r0, r4
 8017632:	4798      	blx	r3
 8017634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017636:	b1b9      	cbz	r1, 8017668 <_reclaim_reent+0xb0>
 8017638:	4620      	mov	r0, r4
 801763a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801763e:	f7ff bfad 	b.w	801759c <cleanup_glue>
 8017642:	5949      	ldr	r1, [r1, r5]
 8017644:	b941      	cbnz	r1, 8017658 <_reclaim_reent+0xa0>
 8017646:	3504      	adds	r5, #4
 8017648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801764a:	2d80      	cmp	r5, #128	; 0x80
 801764c:	68d9      	ldr	r1, [r3, #12]
 801764e:	d1f8      	bne.n	8017642 <_reclaim_reent+0x8a>
 8017650:	4620      	mov	r0, r4
 8017652:	f002 f8c7 	bl	80197e4 <_free_r>
 8017656:	e7ba      	b.n	80175ce <_reclaim_reent+0x16>
 8017658:	680e      	ldr	r6, [r1, #0]
 801765a:	4620      	mov	r0, r4
 801765c:	f002 f8c2 	bl	80197e4 <_free_r>
 8017660:	4631      	mov	r1, r6
 8017662:	e7ef      	b.n	8017644 <_reclaim_reent+0x8c>
 8017664:	2500      	movs	r5, #0
 8017666:	e7ef      	b.n	8017648 <_reclaim_reent+0x90>
 8017668:	bd70      	pop	{r4, r5, r6, pc}
 801766a:	bf00      	nop
 801766c:	2000002c 	.word	0x2000002c

08017670 <_sbrk_r>:
 8017670:	b538      	push	{r3, r4, r5, lr}
 8017672:	4d06      	ldr	r5, [pc, #24]	; (801768c <_sbrk_r+0x1c>)
 8017674:	2300      	movs	r3, #0
 8017676:	4604      	mov	r4, r0
 8017678:	4608      	mov	r0, r1
 801767a:	602b      	str	r3, [r5, #0]
 801767c:	f7ea f96c 	bl	8001958 <_sbrk>
 8017680:	1c43      	adds	r3, r0, #1
 8017682:	d102      	bne.n	801768a <_sbrk_r+0x1a>
 8017684:	682b      	ldr	r3, [r5, #0]
 8017686:	b103      	cbz	r3, 801768a <_sbrk_r+0x1a>
 8017688:	6023      	str	r3, [r4, #0]
 801768a:	bd38      	pop	{r3, r4, r5, pc}
 801768c:	20011d00 	.word	0x20011d00

08017690 <siprintf>:
 8017690:	b40e      	push	{r1, r2, r3}
 8017692:	b500      	push	{lr}
 8017694:	b09c      	sub	sp, #112	; 0x70
 8017696:	ab1d      	add	r3, sp, #116	; 0x74
 8017698:	9002      	str	r0, [sp, #8]
 801769a:	9006      	str	r0, [sp, #24]
 801769c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80176a0:	4809      	ldr	r0, [pc, #36]	; (80176c8 <siprintf+0x38>)
 80176a2:	9107      	str	r1, [sp, #28]
 80176a4:	9104      	str	r1, [sp, #16]
 80176a6:	4909      	ldr	r1, [pc, #36]	; (80176cc <siprintf+0x3c>)
 80176a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80176ac:	9105      	str	r1, [sp, #20]
 80176ae:	6800      	ldr	r0, [r0, #0]
 80176b0:	9301      	str	r3, [sp, #4]
 80176b2:	a902      	add	r1, sp, #8
 80176b4:	f002 f93e 	bl	8019934 <_svfiprintf_r>
 80176b8:	9b02      	ldr	r3, [sp, #8]
 80176ba:	2200      	movs	r2, #0
 80176bc:	701a      	strb	r2, [r3, #0]
 80176be:	b01c      	add	sp, #112	; 0x70
 80176c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80176c4:	b003      	add	sp, #12
 80176c6:	4770      	bx	lr
 80176c8:	2000002c 	.word	0x2000002c
 80176cc:	ffff0208 	.word	0xffff0208

080176d0 <__sread>:
 80176d0:	b510      	push	{r4, lr}
 80176d2:	460c      	mov	r4, r1
 80176d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176d8:	f002 fd1a 	bl	801a110 <_read_r>
 80176dc:	2800      	cmp	r0, #0
 80176de:	bfab      	itete	ge
 80176e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80176e2:	89a3      	ldrhlt	r3, [r4, #12]
 80176e4:	181b      	addge	r3, r3, r0
 80176e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80176ea:	bfac      	ite	ge
 80176ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80176ee:	81a3      	strhlt	r3, [r4, #12]
 80176f0:	bd10      	pop	{r4, pc}

080176f2 <__swrite>:
 80176f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176f6:	461f      	mov	r7, r3
 80176f8:	898b      	ldrh	r3, [r1, #12]
 80176fa:	05db      	lsls	r3, r3, #23
 80176fc:	4605      	mov	r5, r0
 80176fe:	460c      	mov	r4, r1
 8017700:	4616      	mov	r6, r2
 8017702:	d505      	bpl.n	8017710 <__swrite+0x1e>
 8017704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017708:	2302      	movs	r3, #2
 801770a:	2200      	movs	r2, #0
 801770c:	f001 fb5a 	bl	8018dc4 <_lseek_r>
 8017710:	89a3      	ldrh	r3, [r4, #12]
 8017712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801771a:	81a3      	strh	r3, [r4, #12]
 801771c:	4632      	mov	r2, r6
 801771e:	463b      	mov	r3, r7
 8017720:	4628      	mov	r0, r5
 8017722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017726:	f000 bec9 	b.w	80184bc <_write_r>

0801772a <__sseek>:
 801772a:	b510      	push	{r4, lr}
 801772c:	460c      	mov	r4, r1
 801772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017732:	f001 fb47 	bl	8018dc4 <_lseek_r>
 8017736:	1c43      	adds	r3, r0, #1
 8017738:	89a3      	ldrh	r3, [r4, #12]
 801773a:	bf15      	itete	ne
 801773c:	6560      	strne	r0, [r4, #84]	; 0x54
 801773e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017746:	81a3      	strheq	r3, [r4, #12]
 8017748:	bf18      	it	ne
 801774a:	81a3      	strhne	r3, [r4, #12]
 801774c:	bd10      	pop	{r4, pc}

0801774e <__sclose>:
 801774e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017752:	f000 bee3 	b.w	801851c <_close_r>

08017756 <strncmp>:
 8017756:	b510      	push	{r4, lr}
 8017758:	b17a      	cbz	r2, 801777a <strncmp+0x24>
 801775a:	4603      	mov	r3, r0
 801775c:	3901      	subs	r1, #1
 801775e:	1884      	adds	r4, r0, r2
 8017760:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017764:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017768:	4290      	cmp	r0, r2
 801776a:	d101      	bne.n	8017770 <strncmp+0x1a>
 801776c:	42a3      	cmp	r3, r4
 801776e:	d101      	bne.n	8017774 <strncmp+0x1e>
 8017770:	1a80      	subs	r0, r0, r2
 8017772:	bd10      	pop	{r4, pc}
 8017774:	2800      	cmp	r0, #0
 8017776:	d1f3      	bne.n	8017760 <strncmp+0xa>
 8017778:	e7fa      	b.n	8017770 <strncmp+0x1a>
 801777a:	4610      	mov	r0, r2
 801777c:	e7f9      	b.n	8017772 <strncmp+0x1c>

0801777e <strncpy>:
 801777e:	b510      	push	{r4, lr}
 8017780:	3901      	subs	r1, #1
 8017782:	4603      	mov	r3, r0
 8017784:	b132      	cbz	r2, 8017794 <strncpy+0x16>
 8017786:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801778a:	f803 4b01 	strb.w	r4, [r3], #1
 801778e:	3a01      	subs	r2, #1
 8017790:	2c00      	cmp	r4, #0
 8017792:	d1f7      	bne.n	8017784 <strncpy+0x6>
 8017794:	441a      	add	r2, r3
 8017796:	2100      	movs	r1, #0
 8017798:	4293      	cmp	r3, r2
 801779a:	d100      	bne.n	801779e <strncpy+0x20>
 801779c:	bd10      	pop	{r4, pc}
 801779e:	f803 1b01 	strb.w	r1, [r3], #1
 80177a2:	e7f9      	b.n	8017798 <strncpy+0x1a>

080177a4 <sulp>:
 80177a4:	b570      	push	{r4, r5, r6, lr}
 80177a6:	4604      	mov	r4, r0
 80177a8:	460d      	mov	r5, r1
 80177aa:	ec45 4b10 	vmov	d0, r4, r5
 80177ae:	4616      	mov	r6, r2
 80177b0:	f001 feb2 	bl	8019518 <__ulp>
 80177b4:	ec51 0b10 	vmov	r0, r1, d0
 80177b8:	b17e      	cbz	r6, 80177da <sulp+0x36>
 80177ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80177be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	dd09      	ble.n	80177da <sulp+0x36>
 80177c6:	051b      	lsls	r3, r3, #20
 80177c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80177cc:	2400      	movs	r4, #0
 80177ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80177d2:	4622      	mov	r2, r4
 80177d4:	462b      	mov	r3, r5
 80177d6:	f7e8 ff2f 	bl	8000638 <__aeabi_dmul>
 80177da:	bd70      	pop	{r4, r5, r6, pc}
 80177dc:	0000      	movs	r0, r0
	...

080177e0 <_strtod_l>:
 80177e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e4:	ed2d 8b02 	vpush	{d8}
 80177e8:	b09d      	sub	sp, #116	; 0x74
 80177ea:	461f      	mov	r7, r3
 80177ec:	2300      	movs	r3, #0
 80177ee:	9318      	str	r3, [sp, #96]	; 0x60
 80177f0:	4ba2      	ldr	r3, [pc, #648]	; (8017a7c <_strtod_l+0x29c>)
 80177f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	9305      	str	r3, [sp, #20]
 80177f8:	4604      	mov	r4, r0
 80177fa:	4618      	mov	r0, r3
 80177fc:	4688      	mov	r8, r1
 80177fe:	f7e8 fd07 	bl	8000210 <strlen>
 8017802:	f04f 0a00 	mov.w	sl, #0
 8017806:	4605      	mov	r5, r0
 8017808:	f04f 0b00 	mov.w	fp, #0
 801780c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017812:	781a      	ldrb	r2, [r3, #0]
 8017814:	2a2b      	cmp	r2, #43	; 0x2b
 8017816:	d04e      	beq.n	80178b6 <_strtod_l+0xd6>
 8017818:	d83b      	bhi.n	8017892 <_strtod_l+0xb2>
 801781a:	2a0d      	cmp	r2, #13
 801781c:	d834      	bhi.n	8017888 <_strtod_l+0xa8>
 801781e:	2a08      	cmp	r2, #8
 8017820:	d834      	bhi.n	801788c <_strtod_l+0xac>
 8017822:	2a00      	cmp	r2, #0
 8017824:	d03e      	beq.n	80178a4 <_strtod_l+0xc4>
 8017826:	2300      	movs	r3, #0
 8017828:	930a      	str	r3, [sp, #40]	; 0x28
 801782a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801782c:	7833      	ldrb	r3, [r6, #0]
 801782e:	2b30      	cmp	r3, #48	; 0x30
 8017830:	f040 80b0 	bne.w	8017994 <_strtod_l+0x1b4>
 8017834:	7873      	ldrb	r3, [r6, #1]
 8017836:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801783a:	2b58      	cmp	r3, #88	; 0x58
 801783c:	d168      	bne.n	8017910 <_strtod_l+0x130>
 801783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	ab18      	add	r3, sp, #96	; 0x60
 8017844:	9702      	str	r7, [sp, #8]
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	4a8d      	ldr	r2, [pc, #564]	; (8017a80 <_strtod_l+0x2a0>)
 801784a:	ab19      	add	r3, sp, #100	; 0x64
 801784c:	a917      	add	r1, sp, #92	; 0x5c
 801784e:	4620      	mov	r0, r4
 8017850:	f000 ffb0 	bl	80187b4 <__gethex>
 8017854:	f010 0707 	ands.w	r7, r0, #7
 8017858:	4605      	mov	r5, r0
 801785a:	d005      	beq.n	8017868 <_strtod_l+0x88>
 801785c:	2f06      	cmp	r7, #6
 801785e:	d12c      	bne.n	80178ba <_strtod_l+0xda>
 8017860:	3601      	adds	r6, #1
 8017862:	2300      	movs	r3, #0
 8017864:	9617      	str	r6, [sp, #92]	; 0x5c
 8017866:	930a      	str	r3, [sp, #40]	; 0x28
 8017868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801786a:	2b00      	cmp	r3, #0
 801786c:	f040 8590 	bne.w	8018390 <_strtod_l+0xbb0>
 8017870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017872:	b1eb      	cbz	r3, 80178b0 <_strtod_l+0xd0>
 8017874:	4652      	mov	r2, sl
 8017876:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801787a:	ec43 2b10 	vmov	d0, r2, r3
 801787e:	b01d      	add	sp, #116	; 0x74
 8017880:	ecbd 8b02 	vpop	{d8}
 8017884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017888:	2a20      	cmp	r2, #32
 801788a:	d1cc      	bne.n	8017826 <_strtod_l+0x46>
 801788c:	3301      	adds	r3, #1
 801788e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017890:	e7be      	b.n	8017810 <_strtod_l+0x30>
 8017892:	2a2d      	cmp	r2, #45	; 0x2d
 8017894:	d1c7      	bne.n	8017826 <_strtod_l+0x46>
 8017896:	2201      	movs	r2, #1
 8017898:	920a      	str	r2, [sp, #40]	; 0x28
 801789a:	1c5a      	adds	r2, r3, #1
 801789c:	9217      	str	r2, [sp, #92]	; 0x5c
 801789e:	785b      	ldrb	r3, [r3, #1]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1c2      	bne.n	801782a <_strtod_l+0x4a>
 80178a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80178a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	f040 856e 	bne.w	801838c <_strtod_l+0xbac>
 80178b0:	4652      	mov	r2, sl
 80178b2:	465b      	mov	r3, fp
 80178b4:	e7e1      	b.n	801787a <_strtod_l+0x9a>
 80178b6:	2200      	movs	r2, #0
 80178b8:	e7ee      	b.n	8017898 <_strtod_l+0xb8>
 80178ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80178bc:	b13a      	cbz	r2, 80178ce <_strtod_l+0xee>
 80178be:	2135      	movs	r1, #53	; 0x35
 80178c0:	a81a      	add	r0, sp, #104	; 0x68
 80178c2:	f001 ff34 	bl	801972e <__copybits>
 80178c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80178c8:	4620      	mov	r0, r4
 80178ca:	f001 faf3 	bl	8018eb4 <_Bfree>
 80178ce:	3f01      	subs	r7, #1
 80178d0:	2f04      	cmp	r7, #4
 80178d2:	d806      	bhi.n	80178e2 <_strtod_l+0x102>
 80178d4:	e8df f007 	tbb	[pc, r7]
 80178d8:	1714030a 	.word	0x1714030a
 80178dc:	0a          	.byte	0x0a
 80178dd:	00          	.byte	0x00
 80178de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80178e2:	0728      	lsls	r0, r5, #28
 80178e4:	d5c0      	bpl.n	8017868 <_strtod_l+0x88>
 80178e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80178ea:	e7bd      	b.n	8017868 <_strtod_l+0x88>
 80178ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80178f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80178f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80178f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80178fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80178fe:	e7f0      	b.n	80178e2 <_strtod_l+0x102>
 8017900:	f8df b180 	ldr.w	fp, [pc, #384]	; 8017a84 <_strtod_l+0x2a4>
 8017904:	e7ed      	b.n	80178e2 <_strtod_l+0x102>
 8017906:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801790a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801790e:	e7e8      	b.n	80178e2 <_strtod_l+0x102>
 8017910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017912:	1c5a      	adds	r2, r3, #1
 8017914:	9217      	str	r2, [sp, #92]	; 0x5c
 8017916:	785b      	ldrb	r3, [r3, #1]
 8017918:	2b30      	cmp	r3, #48	; 0x30
 801791a:	d0f9      	beq.n	8017910 <_strtod_l+0x130>
 801791c:	2b00      	cmp	r3, #0
 801791e:	d0a3      	beq.n	8017868 <_strtod_l+0x88>
 8017920:	2301      	movs	r3, #1
 8017922:	f04f 0900 	mov.w	r9, #0
 8017926:	9304      	str	r3, [sp, #16]
 8017928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801792a:	9308      	str	r3, [sp, #32]
 801792c:	f8cd 901c 	str.w	r9, [sp, #28]
 8017930:	464f      	mov	r7, r9
 8017932:	220a      	movs	r2, #10
 8017934:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017936:	7806      	ldrb	r6, [r0, #0]
 8017938:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801793c:	b2d9      	uxtb	r1, r3
 801793e:	2909      	cmp	r1, #9
 8017940:	d92a      	bls.n	8017998 <_strtod_l+0x1b8>
 8017942:	9905      	ldr	r1, [sp, #20]
 8017944:	462a      	mov	r2, r5
 8017946:	f7ff ff06 	bl	8017756 <strncmp>
 801794a:	b398      	cbz	r0, 80179b4 <_strtod_l+0x1d4>
 801794c:	2000      	movs	r0, #0
 801794e:	4632      	mov	r2, r6
 8017950:	463d      	mov	r5, r7
 8017952:	9005      	str	r0, [sp, #20]
 8017954:	4603      	mov	r3, r0
 8017956:	2a65      	cmp	r2, #101	; 0x65
 8017958:	d001      	beq.n	801795e <_strtod_l+0x17e>
 801795a:	2a45      	cmp	r2, #69	; 0x45
 801795c:	d118      	bne.n	8017990 <_strtod_l+0x1b0>
 801795e:	b91d      	cbnz	r5, 8017968 <_strtod_l+0x188>
 8017960:	9a04      	ldr	r2, [sp, #16]
 8017962:	4302      	orrs	r2, r0
 8017964:	d09e      	beq.n	80178a4 <_strtod_l+0xc4>
 8017966:	2500      	movs	r5, #0
 8017968:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801796c:	f108 0201 	add.w	r2, r8, #1
 8017970:	9217      	str	r2, [sp, #92]	; 0x5c
 8017972:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017976:	2a2b      	cmp	r2, #43	; 0x2b
 8017978:	d075      	beq.n	8017a66 <_strtod_l+0x286>
 801797a:	2a2d      	cmp	r2, #45	; 0x2d
 801797c:	d07b      	beq.n	8017a76 <_strtod_l+0x296>
 801797e:	f04f 0c00 	mov.w	ip, #0
 8017982:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017986:	2909      	cmp	r1, #9
 8017988:	f240 8082 	bls.w	8017a90 <_strtod_l+0x2b0>
 801798c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017990:	2600      	movs	r6, #0
 8017992:	e09d      	b.n	8017ad0 <_strtod_l+0x2f0>
 8017994:	2300      	movs	r3, #0
 8017996:	e7c4      	b.n	8017922 <_strtod_l+0x142>
 8017998:	2f08      	cmp	r7, #8
 801799a:	bfd8      	it	le
 801799c:	9907      	ldrle	r1, [sp, #28]
 801799e:	f100 0001 	add.w	r0, r0, #1
 80179a2:	bfda      	itte	le
 80179a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80179a8:	9307      	strle	r3, [sp, #28]
 80179aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80179ae:	3701      	adds	r7, #1
 80179b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80179b2:	e7bf      	b.n	8017934 <_strtod_l+0x154>
 80179b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80179b6:	195a      	adds	r2, r3, r5
 80179b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80179ba:	5d5a      	ldrb	r2, [r3, r5]
 80179bc:	2f00      	cmp	r7, #0
 80179be:	d037      	beq.n	8017a30 <_strtod_l+0x250>
 80179c0:	9005      	str	r0, [sp, #20]
 80179c2:	463d      	mov	r5, r7
 80179c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80179c8:	2b09      	cmp	r3, #9
 80179ca:	d912      	bls.n	80179f2 <_strtod_l+0x212>
 80179cc:	2301      	movs	r3, #1
 80179ce:	e7c2      	b.n	8017956 <_strtod_l+0x176>
 80179d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80179d2:	1c5a      	adds	r2, r3, #1
 80179d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80179d6:	785a      	ldrb	r2, [r3, #1]
 80179d8:	3001      	adds	r0, #1
 80179da:	2a30      	cmp	r2, #48	; 0x30
 80179dc:	d0f8      	beq.n	80179d0 <_strtod_l+0x1f0>
 80179de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80179e2:	2b08      	cmp	r3, #8
 80179e4:	f200 84d9 	bhi.w	801839a <_strtod_l+0xbba>
 80179e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80179ea:	9005      	str	r0, [sp, #20]
 80179ec:	2000      	movs	r0, #0
 80179ee:	9308      	str	r3, [sp, #32]
 80179f0:	4605      	mov	r5, r0
 80179f2:	3a30      	subs	r2, #48	; 0x30
 80179f4:	f100 0301 	add.w	r3, r0, #1
 80179f8:	d014      	beq.n	8017a24 <_strtod_l+0x244>
 80179fa:	9905      	ldr	r1, [sp, #20]
 80179fc:	4419      	add	r1, r3
 80179fe:	9105      	str	r1, [sp, #20]
 8017a00:	462b      	mov	r3, r5
 8017a02:	eb00 0e05 	add.w	lr, r0, r5
 8017a06:	210a      	movs	r1, #10
 8017a08:	4573      	cmp	r3, lr
 8017a0a:	d113      	bne.n	8017a34 <_strtod_l+0x254>
 8017a0c:	182b      	adds	r3, r5, r0
 8017a0e:	2b08      	cmp	r3, #8
 8017a10:	f105 0501 	add.w	r5, r5, #1
 8017a14:	4405      	add	r5, r0
 8017a16:	dc1c      	bgt.n	8017a52 <_strtod_l+0x272>
 8017a18:	9907      	ldr	r1, [sp, #28]
 8017a1a:	230a      	movs	r3, #10
 8017a1c:	fb03 2301 	mla	r3, r3, r1, r2
 8017a20:	9307      	str	r3, [sp, #28]
 8017a22:	2300      	movs	r3, #0
 8017a24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017a26:	1c51      	adds	r1, r2, #1
 8017a28:	9117      	str	r1, [sp, #92]	; 0x5c
 8017a2a:	7852      	ldrb	r2, [r2, #1]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	e7c9      	b.n	80179c4 <_strtod_l+0x1e4>
 8017a30:	4638      	mov	r0, r7
 8017a32:	e7d2      	b.n	80179da <_strtod_l+0x1fa>
 8017a34:	2b08      	cmp	r3, #8
 8017a36:	dc04      	bgt.n	8017a42 <_strtod_l+0x262>
 8017a38:	9e07      	ldr	r6, [sp, #28]
 8017a3a:	434e      	muls	r6, r1
 8017a3c:	9607      	str	r6, [sp, #28]
 8017a3e:	3301      	adds	r3, #1
 8017a40:	e7e2      	b.n	8017a08 <_strtod_l+0x228>
 8017a42:	f103 0c01 	add.w	ip, r3, #1
 8017a46:	f1bc 0f10 	cmp.w	ip, #16
 8017a4a:	bfd8      	it	le
 8017a4c:	fb01 f909 	mulle.w	r9, r1, r9
 8017a50:	e7f5      	b.n	8017a3e <_strtod_l+0x25e>
 8017a52:	2d10      	cmp	r5, #16
 8017a54:	bfdc      	itt	le
 8017a56:	230a      	movle	r3, #10
 8017a58:	fb03 2909 	mlale	r9, r3, r9, r2
 8017a5c:	e7e1      	b.n	8017a22 <_strtod_l+0x242>
 8017a5e:	2300      	movs	r3, #0
 8017a60:	9305      	str	r3, [sp, #20]
 8017a62:	2301      	movs	r3, #1
 8017a64:	e77c      	b.n	8017960 <_strtod_l+0x180>
 8017a66:	f04f 0c00 	mov.w	ip, #0
 8017a6a:	f108 0202 	add.w	r2, r8, #2
 8017a6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8017a70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017a74:	e785      	b.n	8017982 <_strtod_l+0x1a2>
 8017a76:	f04f 0c01 	mov.w	ip, #1
 8017a7a:	e7f6      	b.n	8017a6a <_strtod_l+0x28a>
 8017a7c:	0801dc28 	.word	0x0801dc28
 8017a80:	0801dac8 	.word	0x0801dac8
 8017a84:	7ff00000 	.word	0x7ff00000
 8017a88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017a8a:	1c51      	adds	r1, r2, #1
 8017a8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8017a8e:	7852      	ldrb	r2, [r2, #1]
 8017a90:	2a30      	cmp	r2, #48	; 0x30
 8017a92:	d0f9      	beq.n	8017a88 <_strtod_l+0x2a8>
 8017a94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8017a98:	2908      	cmp	r1, #8
 8017a9a:	f63f af79 	bhi.w	8017990 <_strtod_l+0x1b0>
 8017a9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017aa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017aa4:	9206      	str	r2, [sp, #24]
 8017aa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017aa8:	1c51      	adds	r1, r2, #1
 8017aaa:	9117      	str	r1, [sp, #92]	; 0x5c
 8017aac:	7852      	ldrb	r2, [r2, #1]
 8017aae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8017ab2:	2e09      	cmp	r6, #9
 8017ab4:	d937      	bls.n	8017b26 <_strtod_l+0x346>
 8017ab6:	9e06      	ldr	r6, [sp, #24]
 8017ab8:	1b89      	subs	r1, r1, r6
 8017aba:	2908      	cmp	r1, #8
 8017abc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017ac0:	dc02      	bgt.n	8017ac8 <_strtod_l+0x2e8>
 8017ac2:	4576      	cmp	r6, lr
 8017ac4:	bfa8      	it	ge
 8017ac6:	4676      	movge	r6, lr
 8017ac8:	f1bc 0f00 	cmp.w	ip, #0
 8017acc:	d000      	beq.n	8017ad0 <_strtod_l+0x2f0>
 8017ace:	4276      	negs	r6, r6
 8017ad0:	2d00      	cmp	r5, #0
 8017ad2:	d14d      	bne.n	8017b70 <_strtod_l+0x390>
 8017ad4:	9904      	ldr	r1, [sp, #16]
 8017ad6:	4301      	orrs	r1, r0
 8017ad8:	f47f aec6 	bne.w	8017868 <_strtod_l+0x88>
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f47f aee1 	bne.w	80178a4 <_strtod_l+0xc4>
 8017ae2:	2a69      	cmp	r2, #105	; 0x69
 8017ae4:	d027      	beq.n	8017b36 <_strtod_l+0x356>
 8017ae6:	dc24      	bgt.n	8017b32 <_strtod_l+0x352>
 8017ae8:	2a49      	cmp	r2, #73	; 0x49
 8017aea:	d024      	beq.n	8017b36 <_strtod_l+0x356>
 8017aec:	2a4e      	cmp	r2, #78	; 0x4e
 8017aee:	f47f aed9 	bne.w	80178a4 <_strtod_l+0xc4>
 8017af2:	499f      	ldr	r1, [pc, #636]	; (8017d70 <_strtod_l+0x590>)
 8017af4:	a817      	add	r0, sp, #92	; 0x5c
 8017af6:	f001 f8b5 	bl	8018c64 <__match>
 8017afa:	2800      	cmp	r0, #0
 8017afc:	f43f aed2 	beq.w	80178a4 <_strtod_l+0xc4>
 8017b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017b02:	781b      	ldrb	r3, [r3, #0]
 8017b04:	2b28      	cmp	r3, #40	; 0x28
 8017b06:	d12d      	bne.n	8017b64 <_strtod_l+0x384>
 8017b08:	499a      	ldr	r1, [pc, #616]	; (8017d74 <_strtod_l+0x594>)
 8017b0a:	aa1a      	add	r2, sp, #104	; 0x68
 8017b0c:	a817      	add	r0, sp, #92	; 0x5c
 8017b0e:	f001 f8bd 	bl	8018c8c <__hexnan>
 8017b12:	2805      	cmp	r0, #5
 8017b14:	d126      	bne.n	8017b64 <_strtod_l+0x384>
 8017b16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017b18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8017b1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017b20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017b24:	e6a0      	b.n	8017868 <_strtod_l+0x88>
 8017b26:	210a      	movs	r1, #10
 8017b28:	fb01 2e0e 	mla	lr, r1, lr, r2
 8017b2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017b30:	e7b9      	b.n	8017aa6 <_strtod_l+0x2c6>
 8017b32:	2a6e      	cmp	r2, #110	; 0x6e
 8017b34:	e7db      	b.n	8017aee <_strtod_l+0x30e>
 8017b36:	4990      	ldr	r1, [pc, #576]	; (8017d78 <_strtod_l+0x598>)
 8017b38:	a817      	add	r0, sp, #92	; 0x5c
 8017b3a:	f001 f893 	bl	8018c64 <__match>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	f43f aeb0 	beq.w	80178a4 <_strtod_l+0xc4>
 8017b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017b46:	498d      	ldr	r1, [pc, #564]	; (8017d7c <_strtod_l+0x59c>)
 8017b48:	3b01      	subs	r3, #1
 8017b4a:	a817      	add	r0, sp, #92	; 0x5c
 8017b4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8017b4e:	f001 f889 	bl	8018c64 <__match>
 8017b52:	b910      	cbnz	r0, 8017b5a <_strtod_l+0x37a>
 8017b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017b56:	3301      	adds	r3, #1
 8017b58:	9317      	str	r3, [sp, #92]	; 0x5c
 8017b5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8017d8c <_strtod_l+0x5ac>
 8017b5e:	f04f 0a00 	mov.w	sl, #0
 8017b62:	e681      	b.n	8017868 <_strtod_l+0x88>
 8017b64:	4886      	ldr	r0, [pc, #536]	; (8017d80 <_strtod_l+0x5a0>)
 8017b66:	f002 fae7 	bl	801a138 <nan>
 8017b6a:	ec5b ab10 	vmov	sl, fp, d0
 8017b6e:	e67b      	b.n	8017868 <_strtod_l+0x88>
 8017b70:	9b05      	ldr	r3, [sp, #20]
 8017b72:	9807      	ldr	r0, [sp, #28]
 8017b74:	1af3      	subs	r3, r6, r3
 8017b76:	2f00      	cmp	r7, #0
 8017b78:	bf08      	it	eq
 8017b7a:	462f      	moveq	r7, r5
 8017b7c:	2d10      	cmp	r5, #16
 8017b7e:	9306      	str	r3, [sp, #24]
 8017b80:	46a8      	mov	r8, r5
 8017b82:	bfa8      	it	ge
 8017b84:	f04f 0810 	movge.w	r8, #16
 8017b88:	f7e8 fcdc 	bl	8000544 <__aeabi_ui2d>
 8017b8c:	2d09      	cmp	r5, #9
 8017b8e:	4682      	mov	sl, r0
 8017b90:	468b      	mov	fp, r1
 8017b92:	dd13      	ble.n	8017bbc <_strtod_l+0x3dc>
 8017b94:	4b7b      	ldr	r3, [pc, #492]	; (8017d84 <_strtod_l+0x5a4>)
 8017b96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017b9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017b9e:	f7e8 fd4b 	bl	8000638 <__aeabi_dmul>
 8017ba2:	4682      	mov	sl, r0
 8017ba4:	4648      	mov	r0, r9
 8017ba6:	468b      	mov	fp, r1
 8017ba8:	f7e8 fccc 	bl	8000544 <__aeabi_ui2d>
 8017bac:	4602      	mov	r2, r0
 8017bae:	460b      	mov	r3, r1
 8017bb0:	4650      	mov	r0, sl
 8017bb2:	4659      	mov	r1, fp
 8017bb4:	f7e8 fb8a 	bl	80002cc <__adddf3>
 8017bb8:	4682      	mov	sl, r0
 8017bba:	468b      	mov	fp, r1
 8017bbc:	2d0f      	cmp	r5, #15
 8017bbe:	dc38      	bgt.n	8017c32 <_strtod_l+0x452>
 8017bc0:	9b06      	ldr	r3, [sp, #24]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	f43f ae50 	beq.w	8017868 <_strtod_l+0x88>
 8017bc8:	dd24      	ble.n	8017c14 <_strtod_l+0x434>
 8017bca:	2b16      	cmp	r3, #22
 8017bcc:	dc0b      	bgt.n	8017be6 <_strtod_l+0x406>
 8017bce:	496d      	ldr	r1, [pc, #436]	; (8017d84 <_strtod_l+0x5a4>)
 8017bd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017bd8:	4652      	mov	r2, sl
 8017bda:	465b      	mov	r3, fp
 8017bdc:	f7e8 fd2c 	bl	8000638 <__aeabi_dmul>
 8017be0:	4682      	mov	sl, r0
 8017be2:	468b      	mov	fp, r1
 8017be4:	e640      	b.n	8017868 <_strtod_l+0x88>
 8017be6:	9a06      	ldr	r2, [sp, #24]
 8017be8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017bec:	4293      	cmp	r3, r2
 8017bee:	db20      	blt.n	8017c32 <_strtod_l+0x452>
 8017bf0:	4c64      	ldr	r4, [pc, #400]	; (8017d84 <_strtod_l+0x5a4>)
 8017bf2:	f1c5 050f 	rsb	r5, r5, #15
 8017bf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017bfa:	4652      	mov	r2, sl
 8017bfc:	465b      	mov	r3, fp
 8017bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c02:	f7e8 fd19 	bl	8000638 <__aeabi_dmul>
 8017c06:	9b06      	ldr	r3, [sp, #24]
 8017c08:	1b5d      	subs	r5, r3, r5
 8017c0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017c0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017c12:	e7e3      	b.n	8017bdc <_strtod_l+0x3fc>
 8017c14:	9b06      	ldr	r3, [sp, #24]
 8017c16:	3316      	adds	r3, #22
 8017c18:	db0b      	blt.n	8017c32 <_strtod_l+0x452>
 8017c1a:	9b05      	ldr	r3, [sp, #20]
 8017c1c:	1b9e      	subs	r6, r3, r6
 8017c1e:	4b59      	ldr	r3, [pc, #356]	; (8017d84 <_strtod_l+0x5a4>)
 8017c20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8017c24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017c28:	4650      	mov	r0, sl
 8017c2a:	4659      	mov	r1, fp
 8017c2c:	f7e8 fe2e 	bl	800088c <__aeabi_ddiv>
 8017c30:	e7d6      	b.n	8017be0 <_strtod_l+0x400>
 8017c32:	9b06      	ldr	r3, [sp, #24]
 8017c34:	eba5 0808 	sub.w	r8, r5, r8
 8017c38:	4498      	add	r8, r3
 8017c3a:	f1b8 0f00 	cmp.w	r8, #0
 8017c3e:	dd74      	ble.n	8017d2a <_strtod_l+0x54a>
 8017c40:	f018 030f 	ands.w	r3, r8, #15
 8017c44:	d00a      	beq.n	8017c5c <_strtod_l+0x47c>
 8017c46:	494f      	ldr	r1, [pc, #316]	; (8017d84 <_strtod_l+0x5a4>)
 8017c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017c4c:	4652      	mov	r2, sl
 8017c4e:	465b      	mov	r3, fp
 8017c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c54:	f7e8 fcf0 	bl	8000638 <__aeabi_dmul>
 8017c58:	4682      	mov	sl, r0
 8017c5a:	468b      	mov	fp, r1
 8017c5c:	f038 080f 	bics.w	r8, r8, #15
 8017c60:	d04f      	beq.n	8017d02 <_strtod_l+0x522>
 8017c62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017c66:	dd22      	ble.n	8017cae <_strtod_l+0x4ce>
 8017c68:	2500      	movs	r5, #0
 8017c6a:	462e      	mov	r6, r5
 8017c6c:	9507      	str	r5, [sp, #28]
 8017c6e:	9505      	str	r5, [sp, #20]
 8017c70:	2322      	movs	r3, #34	; 0x22
 8017c72:	f8df b118 	ldr.w	fp, [pc, #280]	; 8017d8c <_strtod_l+0x5ac>
 8017c76:	6023      	str	r3, [r4, #0]
 8017c78:	f04f 0a00 	mov.w	sl, #0
 8017c7c:	9b07      	ldr	r3, [sp, #28]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	f43f adf2 	beq.w	8017868 <_strtod_l+0x88>
 8017c84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017c86:	4620      	mov	r0, r4
 8017c88:	f001 f914 	bl	8018eb4 <_Bfree>
 8017c8c:	9905      	ldr	r1, [sp, #20]
 8017c8e:	4620      	mov	r0, r4
 8017c90:	f001 f910 	bl	8018eb4 <_Bfree>
 8017c94:	4631      	mov	r1, r6
 8017c96:	4620      	mov	r0, r4
 8017c98:	f001 f90c 	bl	8018eb4 <_Bfree>
 8017c9c:	9907      	ldr	r1, [sp, #28]
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f001 f908 	bl	8018eb4 <_Bfree>
 8017ca4:	4629      	mov	r1, r5
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f001 f904 	bl	8018eb4 <_Bfree>
 8017cac:	e5dc      	b.n	8017868 <_strtod_l+0x88>
 8017cae:	4b36      	ldr	r3, [pc, #216]	; (8017d88 <_strtod_l+0x5a8>)
 8017cb0:	9304      	str	r3, [sp, #16]
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017cb8:	4650      	mov	r0, sl
 8017cba:	4659      	mov	r1, fp
 8017cbc:	4699      	mov	r9, r3
 8017cbe:	f1b8 0f01 	cmp.w	r8, #1
 8017cc2:	dc21      	bgt.n	8017d08 <_strtod_l+0x528>
 8017cc4:	b10b      	cbz	r3, 8017cca <_strtod_l+0x4ea>
 8017cc6:	4682      	mov	sl, r0
 8017cc8:	468b      	mov	fp, r1
 8017cca:	4b2f      	ldr	r3, [pc, #188]	; (8017d88 <_strtod_l+0x5a8>)
 8017ccc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017cd0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017cd4:	4652      	mov	r2, sl
 8017cd6:	465b      	mov	r3, fp
 8017cd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017cdc:	f7e8 fcac 	bl	8000638 <__aeabi_dmul>
 8017ce0:	4b2a      	ldr	r3, [pc, #168]	; (8017d8c <_strtod_l+0x5ac>)
 8017ce2:	460a      	mov	r2, r1
 8017ce4:	400b      	ands	r3, r1
 8017ce6:	492a      	ldr	r1, [pc, #168]	; (8017d90 <_strtod_l+0x5b0>)
 8017ce8:	428b      	cmp	r3, r1
 8017cea:	4682      	mov	sl, r0
 8017cec:	d8bc      	bhi.n	8017c68 <_strtod_l+0x488>
 8017cee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017cf2:	428b      	cmp	r3, r1
 8017cf4:	bf86      	itte	hi
 8017cf6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8017d94 <_strtod_l+0x5b4>
 8017cfa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8017cfe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017d02:	2300      	movs	r3, #0
 8017d04:	9304      	str	r3, [sp, #16]
 8017d06:	e084      	b.n	8017e12 <_strtod_l+0x632>
 8017d08:	f018 0f01 	tst.w	r8, #1
 8017d0c:	d005      	beq.n	8017d1a <_strtod_l+0x53a>
 8017d0e:	9b04      	ldr	r3, [sp, #16]
 8017d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d14:	f7e8 fc90 	bl	8000638 <__aeabi_dmul>
 8017d18:	2301      	movs	r3, #1
 8017d1a:	9a04      	ldr	r2, [sp, #16]
 8017d1c:	3208      	adds	r2, #8
 8017d1e:	f109 0901 	add.w	r9, r9, #1
 8017d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017d26:	9204      	str	r2, [sp, #16]
 8017d28:	e7c9      	b.n	8017cbe <_strtod_l+0x4de>
 8017d2a:	d0ea      	beq.n	8017d02 <_strtod_l+0x522>
 8017d2c:	f1c8 0800 	rsb	r8, r8, #0
 8017d30:	f018 020f 	ands.w	r2, r8, #15
 8017d34:	d00a      	beq.n	8017d4c <_strtod_l+0x56c>
 8017d36:	4b13      	ldr	r3, [pc, #76]	; (8017d84 <_strtod_l+0x5a4>)
 8017d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017d3c:	4650      	mov	r0, sl
 8017d3e:	4659      	mov	r1, fp
 8017d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d44:	f7e8 fda2 	bl	800088c <__aeabi_ddiv>
 8017d48:	4682      	mov	sl, r0
 8017d4a:	468b      	mov	fp, r1
 8017d4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017d50:	d0d7      	beq.n	8017d02 <_strtod_l+0x522>
 8017d52:	f1b8 0f1f 	cmp.w	r8, #31
 8017d56:	dd1f      	ble.n	8017d98 <_strtod_l+0x5b8>
 8017d58:	2500      	movs	r5, #0
 8017d5a:	462e      	mov	r6, r5
 8017d5c:	9507      	str	r5, [sp, #28]
 8017d5e:	9505      	str	r5, [sp, #20]
 8017d60:	2322      	movs	r3, #34	; 0x22
 8017d62:	f04f 0a00 	mov.w	sl, #0
 8017d66:	f04f 0b00 	mov.w	fp, #0
 8017d6a:	6023      	str	r3, [r4, #0]
 8017d6c:	e786      	b.n	8017c7c <_strtod_l+0x49c>
 8017d6e:	bf00      	nop
 8017d70:	0801dac3 	.word	0x0801dac3
 8017d74:	0801dadc 	.word	0x0801dadc
 8017d78:	0801daba 	.word	0x0801daba
 8017d7c:	0801dabd 	.word	0x0801dabd
 8017d80:	0801dbb0 	.word	0x0801dbb0
 8017d84:	0801dcc0 	.word	0x0801dcc0
 8017d88:	0801dc98 	.word	0x0801dc98
 8017d8c:	7ff00000 	.word	0x7ff00000
 8017d90:	7ca00000 	.word	0x7ca00000
 8017d94:	7fefffff 	.word	0x7fefffff
 8017d98:	f018 0310 	ands.w	r3, r8, #16
 8017d9c:	bf18      	it	ne
 8017d9e:	236a      	movne	r3, #106	; 0x6a
 8017da0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8018150 <_strtod_l+0x970>
 8017da4:	9304      	str	r3, [sp, #16]
 8017da6:	4650      	mov	r0, sl
 8017da8:	4659      	mov	r1, fp
 8017daa:	2300      	movs	r3, #0
 8017dac:	f018 0f01 	tst.w	r8, #1
 8017db0:	d004      	beq.n	8017dbc <_strtod_l+0x5dc>
 8017db2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017db6:	f7e8 fc3f 	bl	8000638 <__aeabi_dmul>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017dc0:	f109 0908 	add.w	r9, r9, #8
 8017dc4:	d1f2      	bne.n	8017dac <_strtod_l+0x5cc>
 8017dc6:	b10b      	cbz	r3, 8017dcc <_strtod_l+0x5ec>
 8017dc8:	4682      	mov	sl, r0
 8017dca:	468b      	mov	fp, r1
 8017dcc:	9b04      	ldr	r3, [sp, #16]
 8017dce:	b1c3      	cbz	r3, 8017e02 <_strtod_l+0x622>
 8017dd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017dd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	4659      	mov	r1, fp
 8017ddc:	dd11      	ble.n	8017e02 <_strtod_l+0x622>
 8017dde:	2b1f      	cmp	r3, #31
 8017de0:	f340 8124 	ble.w	801802c <_strtod_l+0x84c>
 8017de4:	2b34      	cmp	r3, #52	; 0x34
 8017de6:	bfde      	ittt	le
 8017de8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8017dec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8017df0:	fa03 f202 	lslle.w	r2, r3, r2
 8017df4:	f04f 0a00 	mov.w	sl, #0
 8017df8:	bfcc      	ite	gt
 8017dfa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017dfe:	ea02 0b01 	andle.w	fp, r2, r1
 8017e02:	2200      	movs	r2, #0
 8017e04:	2300      	movs	r3, #0
 8017e06:	4650      	mov	r0, sl
 8017e08:	4659      	mov	r1, fp
 8017e0a:	f7e8 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8017e0e:	2800      	cmp	r0, #0
 8017e10:	d1a2      	bne.n	8017d58 <_strtod_l+0x578>
 8017e12:	9b07      	ldr	r3, [sp, #28]
 8017e14:	9300      	str	r3, [sp, #0]
 8017e16:	9908      	ldr	r1, [sp, #32]
 8017e18:	462b      	mov	r3, r5
 8017e1a:	463a      	mov	r2, r7
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	f001 f8b1 	bl	8018f84 <__s2b>
 8017e22:	9007      	str	r0, [sp, #28]
 8017e24:	2800      	cmp	r0, #0
 8017e26:	f43f af1f 	beq.w	8017c68 <_strtod_l+0x488>
 8017e2a:	9b05      	ldr	r3, [sp, #20]
 8017e2c:	1b9e      	subs	r6, r3, r6
 8017e2e:	9b06      	ldr	r3, [sp, #24]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	bfb4      	ite	lt
 8017e34:	4633      	movlt	r3, r6
 8017e36:	2300      	movge	r3, #0
 8017e38:	930c      	str	r3, [sp, #48]	; 0x30
 8017e3a:	9b06      	ldr	r3, [sp, #24]
 8017e3c:	2500      	movs	r5, #0
 8017e3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017e42:	9312      	str	r3, [sp, #72]	; 0x48
 8017e44:	462e      	mov	r6, r5
 8017e46:	9b07      	ldr	r3, [sp, #28]
 8017e48:	4620      	mov	r0, r4
 8017e4a:	6859      	ldr	r1, [r3, #4]
 8017e4c:	f000 fff2 	bl	8018e34 <_Balloc>
 8017e50:	9005      	str	r0, [sp, #20]
 8017e52:	2800      	cmp	r0, #0
 8017e54:	f43f af0c 	beq.w	8017c70 <_strtod_l+0x490>
 8017e58:	9b07      	ldr	r3, [sp, #28]
 8017e5a:	691a      	ldr	r2, [r3, #16]
 8017e5c:	3202      	adds	r2, #2
 8017e5e:	f103 010c 	add.w	r1, r3, #12
 8017e62:	0092      	lsls	r2, r2, #2
 8017e64:	300c      	adds	r0, #12
 8017e66:	f7ff fa7e 	bl	8017366 <memcpy>
 8017e6a:	ec4b ab10 	vmov	d0, sl, fp
 8017e6e:	aa1a      	add	r2, sp, #104	; 0x68
 8017e70:	a919      	add	r1, sp, #100	; 0x64
 8017e72:	4620      	mov	r0, r4
 8017e74:	f001 fbcc 	bl	8019610 <__d2b>
 8017e78:	ec4b ab18 	vmov	d8, sl, fp
 8017e7c:	9018      	str	r0, [sp, #96]	; 0x60
 8017e7e:	2800      	cmp	r0, #0
 8017e80:	f43f aef6 	beq.w	8017c70 <_strtod_l+0x490>
 8017e84:	2101      	movs	r1, #1
 8017e86:	4620      	mov	r0, r4
 8017e88:	f001 f916 	bl	80190b8 <__i2b>
 8017e8c:	4606      	mov	r6, r0
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	f43f aeee 	beq.w	8017c70 <_strtod_l+0x490>
 8017e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017e96:	9904      	ldr	r1, [sp, #16]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	bfab      	itete	ge
 8017e9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8017e9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017ea0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017ea2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8017ea6:	bfac      	ite	ge
 8017ea8:	eb03 0902 	addge.w	r9, r3, r2
 8017eac:	1ad7      	sublt	r7, r2, r3
 8017eae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017eb0:	eba3 0801 	sub.w	r8, r3, r1
 8017eb4:	4490      	add	r8, r2
 8017eb6:	4ba1      	ldr	r3, [pc, #644]	; (801813c <_strtod_l+0x95c>)
 8017eb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8017ebc:	4598      	cmp	r8, r3
 8017ebe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017ec2:	f280 80c7 	bge.w	8018054 <_strtod_l+0x874>
 8017ec6:	eba3 0308 	sub.w	r3, r3, r8
 8017eca:	2b1f      	cmp	r3, #31
 8017ecc:	eba2 0203 	sub.w	r2, r2, r3
 8017ed0:	f04f 0101 	mov.w	r1, #1
 8017ed4:	f300 80b1 	bgt.w	801803a <_strtod_l+0x85a>
 8017ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8017edc:	930d      	str	r3, [sp, #52]	; 0x34
 8017ede:	2300      	movs	r3, #0
 8017ee0:	9308      	str	r3, [sp, #32]
 8017ee2:	eb09 0802 	add.w	r8, r9, r2
 8017ee6:	9b04      	ldr	r3, [sp, #16]
 8017ee8:	45c1      	cmp	r9, r8
 8017eea:	4417      	add	r7, r2
 8017eec:	441f      	add	r7, r3
 8017eee:	464b      	mov	r3, r9
 8017ef0:	bfa8      	it	ge
 8017ef2:	4643      	movge	r3, r8
 8017ef4:	42bb      	cmp	r3, r7
 8017ef6:	bfa8      	it	ge
 8017ef8:	463b      	movge	r3, r7
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	bfc2      	ittt	gt
 8017efe:	eba8 0803 	subgt.w	r8, r8, r3
 8017f02:	1aff      	subgt	r7, r7, r3
 8017f04:	eba9 0903 	subgt.w	r9, r9, r3
 8017f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	dd17      	ble.n	8017f3e <_strtod_l+0x75e>
 8017f0e:	4631      	mov	r1, r6
 8017f10:	461a      	mov	r2, r3
 8017f12:	4620      	mov	r0, r4
 8017f14:	f001 f990 	bl	8019238 <__pow5mult>
 8017f18:	4606      	mov	r6, r0
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	f43f aea8 	beq.w	8017c70 <_strtod_l+0x490>
 8017f20:	4601      	mov	r1, r0
 8017f22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017f24:	4620      	mov	r0, r4
 8017f26:	f001 f8dd 	bl	80190e4 <__multiply>
 8017f2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	f43f ae9f 	beq.w	8017c70 <_strtod_l+0x490>
 8017f32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017f34:	4620      	mov	r0, r4
 8017f36:	f000 ffbd 	bl	8018eb4 <_Bfree>
 8017f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f3c:	9318      	str	r3, [sp, #96]	; 0x60
 8017f3e:	f1b8 0f00 	cmp.w	r8, #0
 8017f42:	f300 808c 	bgt.w	801805e <_strtod_l+0x87e>
 8017f46:	9b06      	ldr	r3, [sp, #24]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	dd08      	ble.n	8017f5e <_strtod_l+0x77e>
 8017f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017f4e:	9905      	ldr	r1, [sp, #20]
 8017f50:	4620      	mov	r0, r4
 8017f52:	f001 f971 	bl	8019238 <__pow5mult>
 8017f56:	9005      	str	r0, [sp, #20]
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	f43f ae89 	beq.w	8017c70 <_strtod_l+0x490>
 8017f5e:	2f00      	cmp	r7, #0
 8017f60:	dd08      	ble.n	8017f74 <_strtod_l+0x794>
 8017f62:	9905      	ldr	r1, [sp, #20]
 8017f64:	463a      	mov	r2, r7
 8017f66:	4620      	mov	r0, r4
 8017f68:	f001 f9c0 	bl	80192ec <__lshift>
 8017f6c:	9005      	str	r0, [sp, #20]
 8017f6e:	2800      	cmp	r0, #0
 8017f70:	f43f ae7e 	beq.w	8017c70 <_strtod_l+0x490>
 8017f74:	f1b9 0f00 	cmp.w	r9, #0
 8017f78:	dd08      	ble.n	8017f8c <_strtod_l+0x7ac>
 8017f7a:	4631      	mov	r1, r6
 8017f7c:	464a      	mov	r2, r9
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f001 f9b4 	bl	80192ec <__lshift>
 8017f84:	4606      	mov	r6, r0
 8017f86:	2800      	cmp	r0, #0
 8017f88:	f43f ae72 	beq.w	8017c70 <_strtod_l+0x490>
 8017f8c:	9a05      	ldr	r2, [sp, #20]
 8017f8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017f90:	4620      	mov	r0, r4
 8017f92:	f001 fa37 	bl	8019404 <__mdiff>
 8017f96:	4605      	mov	r5, r0
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	f43f ae69 	beq.w	8017c70 <_strtod_l+0x490>
 8017f9e:	68c3      	ldr	r3, [r0, #12]
 8017fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	60c3      	str	r3, [r0, #12]
 8017fa6:	4631      	mov	r1, r6
 8017fa8:	f001 fa10 	bl	80193cc <__mcmp>
 8017fac:	2800      	cmp	r0, #0
 8017fae:	da60      	bge.n	8018072 <_strtod_l+0x892>
 8017fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fb2:	ea53 030a 	orrs.w	r3, r3, sl
 8017fb6:	f040 8082 	bne.w	80180be <_strtod_l+0x8de>
 8017fba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d17d      	bne.n	80180be <_strtod_l+0x8de>
 8017fc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017fc6:	0d1b      	lsrs	r3, r3, #20
 8017fc8:	051b      	lsls	r3, r3, #20
 8017fca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017fce:	d976      	bls.n	80180be <_strtod_l+0x8de>
 8017fd0:	696b      	ldr	r3, [r5, #20]
 8017fd2:	b913      	cbnz	r3, 8017fda <_strtod_l+0x7fa>
 8017fd4:	692b      	ldr	r3, [r5, #16]
 8017fd6:	2b01      	cmp	r3, #1
 8017fd8:	dd71      	ble.n	80180be <_strtod_l+0x8de>
 8017fda:	4629      	mov	r1, r5
 8017fdc:	2201      	movs	r2, #1
 8017fde:	4620      	mov	r0, r4
 8017fe0:	f001 f984 	bl	80192ec <__lshift>
 8017fe4:	4631      	mov	r1, r6
 8017fe6:	4605      	mov	r5, r0
 8017fe8:	f001 f9f0 	bl	80193cc <__mcmp>
 8017fec:	2800      	cmp	r0, #0
 8017fee:	dd66      	ble.n	80180be <_strtod_l+0x8de>
 8017ff0:	9904      	ldr	r1, [sp, #16]
 8017ff2:	4a53      	ldr	r2, [pc, #332]	; (8018140 <_strtod_l+0x960>)
 8017ff4:	465b      	mov	r3, fp
 8017ff6:	2900      	cmp	r1, #0
 8017ff8:	f000 8081 	beq.w	80180fe <_strtod_l+0x91e>
 8017ffc:	ea02 010b 	and.w	r1, r2, fp
 8018000:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018004:	dc7b      	bgt.n	80180fe <_strtod_l+0x91e>
 8018006:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801800a:	f77f aea9 	ble.w	8017d60 <_strtod_l+0x580>
 801800e:	4b4d      	ldr	r3, [pc, #308]	; (8018144 <_strtod_l+0x964>)
 8018010:	4650      	mov	r0, sl
 8018012:	4659      	mov	r1, fp
 8018014:	2200      	movs	r2, #0
 8018016:	f7e8 fb0f 	bl	8000638 <__aeabi_dmul>
 801801a:	460b      	mov	r3, r1
 801801c:	4303      	orrs	r3, r0
 801801e:	bf08      	it	eq
 8018020:	2322      	moveq	r3, #34	; 0x22
 8018022:	4682      	mov	sl, r0
 8018024:	468b      	mov	fp, r1
 8018026:	bf08      	it	eq
 8018028:	6023      	streq	r3, [r4, #0]
 801802a:	e62b      	b.n	8017c84 <_strtod_l+0x4a4>
 801802c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018030:	fa02 f303 	lsl.w	r3, r2, r3
 8018034:	ea03 0a0a 	and.w	sl, r3, sl
 8018038:	e6e3      	b.n	8017e02 <_strtod_l+0x622>
 801803a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801803e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018042:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018046:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801804a:	fa01 f308 	lsl.w	r3, r1, r8
 801804e:	9308      	str	r3, [sp, #32]
 8018050:	910d      	str	r1, [sp, #52]	; 0x34
 8018052:	e746      	b.n	8017ee2 <_strtod_l+0x702>
 8018054:	2300      	movs	r3, #0
 8018056:	9308      	str	r3, [sp, #32]
 8018058:	2301      	movs	r3, #1
 801805a:	930d      	str	r3, [sp, #52]	; 0x34
 801805c:	e741      	b.n	8017ee2 <_strtod_l+0x702>
 801805e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018060:	4642      	mov	r2, r8
 8018062:	4620      	mov	r0, r4
 8018064:	f001 f942 	bl	80192ec <__lshift>
 8018068:	9018      	str	r0, [sp, #96]	; 0x60
 801806a:	2800      	cmp	r0, #0
 801806c:	f47f af6b 	bne.w	8017f46 <_strtod_l+0x766>
 8018070:	e5fe      	b.n	8017c70 <_strtod_l+0x490>
 8018072:	465f      	mov	r7, fp
 8018074:	d16e      	bne.n	8018154 <_strtod_l+0x974>
 8018076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801807c:	b342      	cbz	r2, 80180d0 <_strtod_l+0x8f0>
 801807e:	4a32      	ldr	r2, [pc, #200]	; (8018148 <_strtod_l+0x968>)
 8018080:	4293      	cmp	r3, r2
 8018082:	d128      	bne.n	80180d6 <_strtod_l+0x8f6>
 8018084:	9b04      	ldr	r3, [sp, #16]
 8018086:	4651      	mov	r1, sl
 8018088:	b1eb      	cbz	r3, 80180c6 <_strtod_l+0x8e6>
 801808a:	4b2d      	ldr	r3, [pc, #180]	; (8018140 <_strtod_l+0x960>)
 801808c:	403b      	ands	r3, r7
 801808e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018096:	d819      	bhi.n	80180cc <_strtod_l+0x8ec>
 8018098:	0d1b      	lsrs	r3, r3, #20
 801809a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801809e:	fa02 f303 	lsl.w	r3, r2, r3
 80180a2:	4299      	cmp	r1, r3
 80180a4:	d117      	bne.n	80180d6 <_strtod_l+0x8f6>
 80180a6:	4b29      	ldr	r3, [pc, #164]	; (801814c <_strtod_l+0x96c>)
 80180a8:	429f      	cmp	r7, r3
 80180aa:	d102      	bne.n	80180b2 <_strtod_l+0x8d2>
 80180ac:	3101      	adds	r1, #1
 80180ae:	f43f addf 	beq.w	8017c70 <_strtod_l+0x490>
 80180b2:	4b23      	ldr	r3, [pc, #140]	; (8018140 <_strtod_l+0x960>)
 80180b4:	403b      	ands	r3, r7
 80180b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80180ba:	f04f 0a00 	mov.w	sl, #0
 80180be:	9b04      	ldr	r3, [sp, #16]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d1a4      	bne.n	801800e <_strtod_l+0x82e>
 80180c4:	e5de      	b.n	8017c84 <_strtod_l+0x4a4>
 80180c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180ca:	e7ea      	b.n	80180a2 <_strtod_l+0x8c2>
 80180cc:	4613      	mov	r3, r2
 80180ce:	e7e8      	b.n	80180a2 <_strtod_l+0x8c2>
 80180d0:	ea53 030a 	orrs.w	r3, r3, sl
 80180d4:	d08c      	beq.n	8017ff0 <_strtod_l+0x810>
 80180d6:	9b08      	ldr	r3, [sp, #32]
 80180d8:	b1db      	cbz	r3, 8018112 <_strtod_l+0x932>
 80180da:	423b      	tst	r3, r7
 80180dc:	d0ef      	beq.n	80180be <_strtod_l+0x8de>
 80180de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180e0:	9a04      	ldr	r2, [sp, #16]
 80180e2:	4650      	mov	r0, sl
 80180e4:	4659      	mov	r1, fp
 80180e6:	b1c3      	cbz	r3, 801811a <_strtod_l+0x93a>
 80180e8:	f7ff fb5c 	bl	80177a4 <sulp>
 80180ec:	4602      	mov	r2, r0
 80180ee:	460b      	mov	r3, r1
 80180f0:	ec51 0b18 	vmov	r0, r1, d8
 80180f4:	f7e8 f8ea 	bl	80002cc <__adddf3>
 80180f8:	4682      	mov	sl, r0
 80180fa:	468b      	mov	fp, r1
 80180fc:	e7df      	b.n	80180be <_strtod_l+0x8de>
 80180fe:	4013      	ands	r3, r2
 8018100:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018104:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018108:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801810c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018110:	e7d5      	b.n	80180be <_strtod_l+0x8de>
 8018112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018114:	ea13 0f0a 	tst.w	r3, sl
 8018118:	e7e0      	b.n	80180dc <_strtod_l+0x8fc>
 801811a:	f7ff fb43 	bl	80177a4 <sulp>
 801811e:	4602      	mov	r2, r0
 8018120:	460b      	mov	r3, r1
 8018122:	ec51 0b18 	vmov	r0, r1, d8
 8018126:	f7e8 f8cf 	bl	80002c8 <__aeabi_dsub>
 801812a:	2200      	movs	r2, #0
 801812c:	2300      	movs	r3, #0
 801812e:	4682      	mov	sl, r0
 8018130:	468b      	mov	fp, r1
 8018132:	f7e8 fce9 	bl	8000b08 <__aeabi_dcmpeq>
 8018136:	2800      	cmp	r0, #0
 8018138:	d0c1      	beq.n	80180be <_strtod_l+0x8de>
 801813a:	e611      	b.n	8017d60 <_strtod_l+0x580>
 801813c:	fffffc02 	.word	0xfffffc02
 8018140:	7ff00000 	.word	0x7ff00000
 8018144:	39500000 	.word	0x39500000
 8018148:	000fffff 	.word	0x000fffff
 801814c:	7fefffff 	.word	0x7fefffff
 8018150:	0801daf0 	.word	0x0801daf0
 8018154:	4631      	mov	r1, r6
 8018156:	4628      	mov	r0, r5
 8018158:	f001 fab6 	bl	80196c8 <__ratio>
 801815c:	ec59 8b10 	vmov	r8, r9, d0
 8018160:	ee10 0a10 	vmov	r0, s0
 8018164:	2200      	movs	r2, #0
 8018166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801816a:	4649      	mov	r1, r9
 801816c:	f7e8 fce0 	bl	8000b30 <__aeabi_dcmple>
 8018170:	2800      	cmp	r0, #0
 8018172:	d07a      	beq.n	801826a <_strtod_l+0xa8a>
 8018174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018176:	2b00      	cmp	r3, #0
 8018178:	d04a      	beq.n	8018210 <_strtod_l+0xa30>
 801817a:	4b95      	ldr	r3, [pc, #596]	; (80183d0 <_strtod_l+0xbf0>)
 801817c:	2200      	movs	r2, #0
 801817e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018182:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80183d0 <_strtod_l+0xbf0>
 8018186:	f04f 0800 	mov.w	r8, #0
 801818a:	4b92      	ldr	r3, [pc, #584]	; (80183d4 <_strtod_l+0xbf4>)
 801818c:	403b      	ands	r3, r7
 801818e:	930d      	str	r3, [sp, #52]	; 0x34
 8018190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018192:	4b91      	ldr	r3, [pc, #580]	; (80183d8 <_strtod_l+0xbf8>)
 8018194:	429a      	cmp	r2, r3
 8018196:	f040 80b0 	bne.w	80182fa <_strtod_l+0xb1a>
 801819a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801819e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80181a2:	ec4b ab10 	vmov	d0, sl, fp
 80181a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80181aa:	f001 f9b5 	bl	8019518 <__ulp>
 80181ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80181b2:	ec53 2b10 	vmov	r2, r3, d0
 80181b6:	f7e8 fa3f 	bl	8000638 <__aeabi_dmul>
 80181ba:	4652      	mov	r2, sl
 80181bc:	465b      	mov	r3, fp
 80181be:	f7e8 f885 	bl	80002cc <__adddf3>
 80181c2:	460b      	mov	r3, r1
 80181c4:	4983      	ldr	r1, [pc, #524]	; (80183d4 <_strtod_l+0xbf4>)
 80181c6:	4a85      	ldr	r2, [pc, #532]	; (80183dc <_strtod_l+0xbfc>)
 80181c8:	4019      	ands	r1, r3
 80181ca:	4291      	cmp	r1, r2
 80181cc:	4682      	mov	sl, r0
 80181ce:	d960      	bls.n	8018292 <_strtod_l+0xab2>
 80181d0:	ee18 3a90 	vmov	r3, s17
 80181d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80181d8:	4293      	cmp	r3, r2
 80181da:	d104      	bne.n	80181e6 <_strtod_l+0xa06>
 80181dc:	ee18 3a10 	vmov	r3, s16
 80181e0:	3301      	adds	r3, #1
 80181e2:	f43f ad45 	beq.w	8017c70 <_strtod_l+0x490>
 80181e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80183e8 <_strtod_l+0xc08>
 80181ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80181ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80181f0:	4620      	mov	r0, r4
 80181f2:	f000 fe5f 	bl	8018eb4 <_Bfree>
 80181f6:	9905      	ldr	r1, [sp, #20]
 80181f8:	4620      	mov	r0, r4
 80181fa:	f000 fe5b 	bl	8018eb4 <_Bfree>
 80181fe:	4631      	mov	r1, r6
 8018200:	4620      	mov	r0, r4
 8018202:	f000 fe57 	bl	8018eb4 <_Bfree>
 8018206:	4629      	mov	r1, r5
 8018208:	4620      	mov	r0, r4
 801820a:	f000 fe53 	bl	8018eb4 <_Bfree>
 801820e:	e61a      	b.n	8017e46 <_strtod_l+0x666>
 8018210:	f1ba 0f00 	cmp.w	sl, #0
 8018214:	d11b      	bne.n	801824e <_strtod_l+0xa6e>
 8018216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801821a:	b9f3      	cbnz	r3, 801825a <_strtod_l+0xa7a>
 801821c:	4b6c      	ldr	r3, [pc, #432]	; (80183d0 <_strtod_l+0xbf0>)
 801821e:	2200      	movs	r2, #0
 8018220:	4640      	mov	r0, r8
 8018222:	4649      	mov	r1, r9
 8018224:	f7e8 fc7a 	bl	8000b1c <__aeabi_dcmplt>
 8018228:	b9d0      	cbnz	r0, 8018260 <_strtod_l+0xa80>
 801822a:	4640      	mov	r0, r8
 801822c:	4649      	mov	r1, r9
 801822e:	4b6c      	ldr	r3, [pc, #432]	; (80183e0 <_strtod_l+0xc00>)
 8018230:	2200      	movs	r2, #0
 8018232:	f7e8 fa01 	bl	8000638 <__aeabi_dmul>
 8018236:	4680      	mov	r8, r0
 8018238:	4689      	mov	r9, r1
 801823a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801823e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8018242:	9315      	str	r3, [sp, #84]	; 0x54
 8018244:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018248:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801824c:	e79d      	b.n	801818a <_strtod_l+0x9aa>
 801824e:	f1ba 0f01 	cmp.w	sl, #1
 8018252:	d102      	bne.n	801825a <_strtod_l+0xa7a>
 8018254:	2f00      	cmp	r7, #0
 8018256:	f43f ad83 	beq.w	8017d60 <_strtod_l+0x580>
 801825a:	4b62      	ldr	r3, [pc, #392]	; (80183e4 <_strtod_l+0xc04>)
 801825c:	2200      	movs	r2, #0
 801825e:	e78e      	b.n	801817e <_strtod_l+0x99e>
 8018260:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80183e0 <_strtod_l+0xc00>
 8018264:	f04f 0800 	mov.w	r8, #0
 8018268:	e7e7      	b.n	801823a <_strtod_l+0xa5a>
 801826a:	4b5d      	ldr	r3, [pc, #372]	; (80183e0 <_strtod_l+0xc00>)
 801826c:	4640      	mov	r0, r8
 801826e:	4649      	mov	r1, r9
 8018270:	2200      	movs	r2, #0
 8018272:	f7e8 f9e1 	bl	8000638 <__aeabi_dmul>
 8018276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018278:	4680      	mov	r8, r0
 801827a:	4689      	mov	r9, r1
 801827c:	b933      	cbnz	r3, 801828c <_strtod_l+0xaac>
 801827e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018282:	900e      	str	r0, [sp, #56]	; 0x38
 8018284:	930f      	str	r3, [sp, #60]	; 0x3c
 8018286:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801828a:	e7dd      	b.n	8018248 <_strtod_l+0xa68>
 801828c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8018290:	e7f9      	b.n	8018286 <_strtod_l+0xaa6>
 8018292:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018296:	9b04      	ldr	r3, [sp, #16]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d1a8      	bne.n	80181ee <_strtod_l+0xa0e>
 801829c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80182a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80182a2:	0d1b      	lsrs	r3, r3, #20
 80182a4:	051b      	lsls	r3, r3, #20
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d1a1      	bne.n	80181ee <_strtod_l+0xa0e>
 80182aa:	4640      	mov	r0, r8
 80182ac:	4649      	mov	r1, r9
 80182ae:	f7e8 fce5 	bl	8000c7c <__aeabi_d2lz>
 80182b2:	f7e8 f993 	bl	80005dc <__aeabi_l2d>
 80182b6:	4602      	mov	r2, r0
 80182b8:	460b      	mov	r3, r1
 80182ba:	4640      	mov	r0, r8
 80182bc:	4649      	mov	r1, r9
 80182be:	f7e8 f803 	bl	80002c8 <__aeabi_dsub>
 80182c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80182c8:	ea43 030a 	orr.w	r3, r3, sl
 80182cc:	4313      	orrs	r3, r2
 80182ce:	4680      	mov	r8, r0
 80182d0:	4689      	mov	r9, r1
 80182d2:	d055      	beq.n	8018380 <_strtod_l+0xba0>
 80182d4:	a336      	add	r3, pc, #216	; (adr r3, 80183b0 <_strtod_l+0xbd0>)
 80182d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182da:	f7e8 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80182de:	2800      	cmp	r0, #0
 80182e0:	f47f acd0 	bne.w	8017c84 <_strtod_l+0x4a4>
 80182e4:	a334      	add	r3, pc, #208	; (adr r3, 80183b8 <_strtod_l+0xbd8>)
 80182e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ea:	4640      	mov	r0, r8
 80182ec:	4649      	mov	r1, r9
 80182ee:	f7e8 fc33 	bl	8000b58 <__aeabi_dcmpgt>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	f43f af7b 	beq.w	80181ee <_strtod_l+0xa0e>
 80182f8:	e4c4      	b.n	8017c84 <_strtod_l+0x4a4>
 80182fa:	9b04      	ldr	r3, [sp, #16]
 80182fc:	b333      	cbz	r3, 801834c <_strtod_l+0xb6c>
 80182fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018300:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018304:	d822      	bhi.n	801834c <_strtod_l+0xb6c>
 8018306:	a32e      	add	r3, pc, #184	; (adr r3, 80183c0 <_strtod_l+0xbe0>)
 8018308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801830c:	4640      	mov	r0, r8
 801830e:	4649      	mov	r1, r9
 8018310:	f7e8 fc0e 	bl	8000b30 <__aeabi_dcmple>
 8018314:	b1a0      	cbz	r0, 8018340 <_strtod_l+0xb60>
 8018316:	4649      	mov	r1, r9
 8018318:	4640      	mov	r0, r8
 801831a:	f7e8 fc27 	bl	8000b6c <__aeabi_d2uiz>
 801831e:	2801      	cmp	r0, #1
 8018320:	bf38      	it	cc
 8018322:	2001      	movcc	r0, #1
 8018324:	f7e8 f90e 	bl	8000544 <__aeabi_ui2d>
 8018328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801832a:	4680      	mov	r8, r0
 801832c:	4689      	mov	r9, r1
 801832e:	bb23      	cbnz	r3, 801837a <_strtod_l+0xb9a>
 8018330:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018334:	9010      	str	r0, [sp, #64]	; 0x40
 8018336:	9311      	str	r3, [sp, #68]	; 0x44
 8018338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801833c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018344:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018348:	1a9b      	subs	r3, r3, r2
 801834a:	9309      	str	r3, [sp, #36]	; 0x24
 801834c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018350:	eeb0 0a48 	vmov.f32	s0, s16
 8018354:	eef0 0a68 	vmov.f32	s1, s17
 8018358:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801835c:	f001 f8dc 	bl	8019518 <__ulp>
 8018360:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018364:	ec53 2b10 	vmov	r2, r3, d0
 8018368:	f7e8 f966 	bl	8000638 <__aeabi_dmul>
 801836c:	ec53 2b18 	vmov	r2, r3, d8
 8018370:	f7e7 ffac 	bl	80002cc <__adddf3>
 8018374:	4682      	mov	sl, r0
 8018376:	468b      	mov	fp, r1
 8018378:	e78d      	b.n	8018296 <_strtod_l+0xab6>
 801837a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801837e:	e7db      	b.n	8018338 <_strtod_l+0xb58>
 8018380:	a311      	add	r3, pc, #68	; (adr r3, 80183c8 <_strtod_l+0xbe8>)
 8018382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018386:	f7e8 fbc9 	bl	8000b1c <__aeabi_dcmplt>
 801838a:	e7b2      	b.n	80182f2 <_strtod_l+0xb12>
 801838c:	2300      	movs	r3, #0
 801838e:	930a      	str	r3, [sp, #40]	; 0x28
 8018390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018392:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018394:	6013      	str	r3, [r2, #0]
 8018396:	f7ff ba6b 	b.w	8017870 <_strtod_l+0x90>
 801839a:	2a65      	cmp	r2, #101	; 0x65
 801839c:	f43f ab5f 	beq.w	8017a5e <_strtod_l+0x27e>
 80183a0:	2a45      	cmp	r2, #69	; 0x45
 80183a2:	f43f ab5c 	beq.w	8017a5e <_strtod_l+0x27e>
 80183a6:	2301      	movs	r3, #1
 80183a8:	f7ff bb94 	b.w	8017ad4 <_strtod_l+0x2f4>
 80183ac:	f3af 8000 	nop.w
 80183b0:	94a03595 	.word	0x94a03595
 80183b4:	3fdfffff 	.word	0x3fdfffff
 80183b8:	35afe535 	.word	0x35afe535
 80183bc:	3fe00000 	.word	0x3fe00000
 80183c0:	ffc00000 	.word	0xffc00000
 80183c4:	41dfffff 	.word	0x41dfffff
 80183c8:	94a03595 	.word	0x94a03595
 80183cc:	3fcfffff 	.word	0x3fcfffff
 80183d0:	3ff00000 	.word	0x3ff00000
 80183d4:	7ff00000 	.word	0x7ff00000
 80183d8:	7fe00000 	.word	0x7fe00000
 80183dc:	7c9fffff 	.word	0x7c9fffff
 80183e0:	3fe00000 	.word	0x3fe00000
 80183e4:	bff00000 	.word	0xbff00000
 80183e8:	7fefffff 	.word	0x7fefffff

080183ec <strtod>:
 80183ec:	460a      	mov	r2, r1
 80183ee:	4601      	mov	r1, r0
 80183f0:	4802      	ldr	r0, [pc, #8]	; (80183fc <strtod+0x10>)
 80183f2:	4b03      	ldr	r3, [pc, #12]	; (8018400 <strtod+0x14>)
 80183f4:	6800      	ldr	r0, [r0, #0]
 80183f6:	f7ff b9f3 	b.w	80177e0 <_strtod_l>
 80183fa:	bf00      	nop
 80183fc:	2000002c 	.word	0x2000002c
 8018400:	20000094 	.word	0x20000094

08018404 <strtok>:
 8018404:	4b16      	ldr	r3, [pc, #88]	; (8018460 <strtok+0x5c>)
 8018406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018408:	681e      	ldr	r6, [r3, #0]
 801840a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801840c:	4605      	mov	r5, r0
 801840e:	b9fc      	cbnz	r4, 8018450 <strtok+0x4c>
 8018410:	2050      	movs	r0, #80	; 0x50
 8018412:	9101      	str	r1, [sp, #4]
 8018414:	f000 fce8 	bl	8018de8 <malloc>
 8018418:	9901      	ldr	r1, [sp, #4]
 801841a:	65b0      	str	r0, [r6, #88]	; 0x58
 801841c:	4602      	mov	r2, r0
 801841e:	b920      	cbnz	r0, 801842a <strtok+0x26>
 8018420:	4b10      	ldr	r3, [pc, #64]	; (8018464 <strtok+0x60>)
 8018422:	4811      	ldr	r0, [pc, #68]	; (8018468 <strtok+0x64>)
 8018424:	2157      	movs	r1, #87	; 0x57
 8018426:	f000 f85b 	bl	80184e0 <__assert_func>
 801842a:	e9c0 4400 	strd	r4, r4, [r0]
 801842e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018432:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018436:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801843a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801843e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018442:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018446:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801844a:	6184      	str	r4, [r0, #24]
 801844c:	7704      	strb	r4, [r0, #28]
 801844e:	6244      	str	r4, [r0, #36]	; 0x24
 8018450:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8018452:	2301      	movs	r3, #1
 8018454:	4628      	mov	r0, r5
 8018456:	b002      	add	sp, #8
 8018458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801845c:	f000 b806 	b.w	801846c <__strtok_r>
 8018460:	2000002c 	.word	0x2000002c
 8018464:	0801da48 	.word	0x0801da48
 8018468:	0801db18 	.word	0x0801db18

0801846c <__strtok_r>:
 801846c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801846e:	b908      	cbnz	r0, 8018474 <__strtok_r+0x8>
 8018470:	6810      	ldr	r0, [r2, #0]
 8018472:	b188      	cbz	r0, 8018498 <__strtok_r+0x2c>
 8018474:	4604      	mov	r4, r0
 8018476:	4620      	mov	r0, r4
 8018478:	f814 5b01 	ldrb.w	r5, [r4], #1
 801847c:	460f      	mov	r7, r1
 801847e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018482:	b91e      	cbnz	r6, 801848c <__strtok_r+0x20>
 8018484:	b965      	cbnz	r5, 80184a0 <__strtok_r+0x34>
 8018486:	6015      	str	r5, [r2, #0]
 8018488:	4628      	mov	r0, r5
 801848a:	e005      	b.n	8018498 <__strtok_r+0x2c>
 801848c:	42b5      	cmp	r5, r6
 801848e:	d1f6      	bne.n	801847e <__strtok_r+0x12>
 8018490:	2b00      	cmp	r3, #0
 8018492:	d1f0      	bne.n	8018476 <__strtok_r+0xa>
 8018494:	6014      	str	r4, [r2, #0]
 8018496:	7003      	strb	r3, [r0, #0]
 8018498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801849a:	461c      	mov	r4, r3
 801849c:	e00c      	b.n	80184b8 <__strtok_r+0x4c>
 801849e:	b915      	cbnz	r5, 80184a6 <__strtok_r+0x3a>
 80184a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184a4:	460e      	mov	r6, r1
 80184a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80184aa:	42ab      	cmp	r3, r5
 80184ac:	d1f7      	bne.n	801849e <__strtok_r+0x32>
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d0f3      	beq.n	801849a <__strtok_r+0x2e>
 80184b2:	2300      	movs	r3, #0
 80184b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80184b8:	6014      	str	r4, [r2, #0]
 80184ba:	e7ed      	b.n	8018498 <__strtok_r+0x2c>

080184bc <_write_r>:
 80184bc:	b538      	push	{r3, r4, r5, lr}
 80184be:	4d07      	ldr	r5, [pc, #28]	; (80184dc <_write_r+0x20>)
 80184c0:	4604      	mov	r4, r0
 80184c2:	4608      	mov	r0, r1
 80184c4:	4611      	mov	r1, r2
 80184c6:	2200      	movs	r2, #0
 80184c8:	602a      	str	r2, [r5, #0]
 80184ca:	461a      	mov	r2, r3
 80184cc:	f7e9 f9f3 	bl	80018b6 <_write>
 80184d0:	1c43      	adds	r3, r0, #1
 80184d2:	d102      	bne.n	80184da <_write_r+0x1e>
 80184d4:	682b      	ldr	r3, [r5, #0]
 80184d6:	b103      	cbz	r3, 80184da <_write_r+0x1e>
 80184d8:	6023      	str	r3, [r4, #0]
 80184da:	bd38      	pop	{r3, r4, r5, pc}
 80184dc:	20011d00 	.word	0x20011d00

080184e0 <__assert_func>:
 80184e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184e2:	4614      	mov	r4, r2
 80184e4:	461a      	mov	r2, r3
 80184e6:	4b09      	ldr	r3, [pc, #36]	; (801850c <__assert_func+0x2c>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4605      	mov	r5, r0
 80184ec:	68d8      	ldr	r0, [r3, #12]
 80184ee:	b14c      	cbz	r4, 8018504 <__assert_func+0x24>
 80184f0:	4b07      	ldr	r3, [pc, #28]	; (8018510 <__assert_func+0x30>)
 80184f2:	9100      	str	r1, [sp, #0]
 80184f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184f8:	4906      	ldr	r1, [pc, #24]	; (8018514 <__assert_func+0x34>)
 80184fa:	462b      	mov	r3, r5
 80184fc:	f000 f8e0 	bl	80186c0 <fiprintf>
 8018500:	f001 fef0 	bl	801a2e4 <abort>
 8018504:	4b04      	ldr	r3, [pc, #16]	; (8018518 <__assert_func+0x38>)
 8018506:	461c      	mov	r4, r3
 8018508:	e7f3      	b.n	80184f2 <__assert_func+0x12>
 801850a:	bf00      	nop
 801850c:	2000002c 	.word	0x2000002c
 8018510:	0801db75 	.word	0x0801db75
 8018514:	0801db82 	.word	0x0801db82
 8018518:	0801dbb0 	.word	0x0801dbb0

0801851c <_close_r>:
 801851c:	b538      	push	{r3, r4, r5, lr}
 801851e:	4d06      	ldr	r5, [pc, #24]	; (8018538 <_close_r+0x1c>)
 8018520:	2300      	movs	r3, #0
 8018522:	4604      	mov	r4, r0
 8018524:	4608      	mov	r0, r1
 8018526:	602b      	str	r3, [r5, #0]
 8018528:	f7e9 f9e1 	bl	80018ee <_close>
 801852c:	1c43      	adds	r3, r0, #1
 801852e:	d102      	bne.n	8018536 <_close_r+0x1a>
 8018530:	682b      	ldr	r3, [r5, #0]
 8018532:	b103      	cbz	r3, 8018536 <_close_r+0x1a>
 8018534:	6023      	str	r3, [r4, #0]
 8018536:	bd38      	pop	{r3, r4, r5, pc}
 8018538:	20011d00 	.word	0x20011d00

0801853c <__sflush_r>:
 801853c:	898a      	ldrh	r2, [r1, #12]
 801853e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018542:	4605      	mov	r5, r0
 8018544:	0710      	lsls	r0, r2, #28
 8018546:	460c      	mov	r4, r1
 8018548:	d458      	bmi.n	80185fc <__sflush_r+0xc0>
 801854a:	684b      	ldr	r3, [r1, #4]
 801854c:	2b00      	cmp	r3, #0
 801854e:	dc05      	bgt.n	801855c <__sflush_r+0x20>
 8018550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018552:	2b00      	cmp	r3, #0
 8018554:	dc02      	bgt.n	801855c <__sflush_r+0x20>
 8018556:	2000      	movs	r0, #0
 8018558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801855c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801855e:	2e00      	cmp	r6, #0
 8018560:	d0f9      	beq.n	8018556 <__sflush_r+0x1a>
 8018562:	2300      	movs	r3, #0
 8018564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018568:	682f      	ldr	r7, [r5, #0]
 801856a:	602b      	str	r3, [r5, #0]
 801856c:	d032      	beq.n	80185d4 <__sflush_r+0x98>
 801856e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018570:	89a3      	ldrh	r3, [r4, #12]
 8018572:	075a      	lsls	r2, r3, #29
 8018574:	d505      	bpl.n	8018582 <__sflush_r+0x46>
 8018576:	6863      	ldr	r3, [r4, #4]
 8018578:	1ac0      	subs	r0, r0, r3
 801857a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801857c:	b10b      	cbz	r3, 8018582 <__sflush_r+0x46>
 801857e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018580:	1ac0      	subs	r0, r0, r3
 8018582:	2300      	movs	r3, #0
 8018584:	4602      	mov	r2, r0
 8018586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018588:	6a21      	ldr	r1, [r4, #32]
 801858a:	4628      	mov	r0, r5
 801858c:	47b0      	blx	r6
 801858e:	1c43      	adds	r3, r0, #1
 8018590:	89a3      	ldrh	r3, [r4, #12]
 8018592:	d106      	bne.n	80185a2 <__sflush_r+0x66>
 8018594:	6829      	ldr	r1, [r5, #0]
 8018596:	291d      	cmp	r1, #29
 8018598:	d82c      	bhi.n	80185f4 <__sflush_r+0xb8>
 801859a:	4a2a      	ldr	r2, [pc, #168]	; (8018644 <__sflush_r+0x108>)
 801859c:	40ca      	lsrs	r2, r1
 801859e:	07d6      	lsls	r6, r2, #31
 80185a0:	d528      	bpl.n	80185f4 <__sflush_r+0xb8>
 80185a2:	2200      	movs	r2, #0
 80185a4:	6062      	str	r2, [r4, #4]
 80185a6:	04d9      	lsls	r1, r3, #19
 80185a8:	6922      	ldr	r2, [r4, #16]
 80185aa:	6022      	str	r2, [r4, #0]
 80185ac:	d504      	bpl.n	80185b8 <__sflush_r+0x7c>
 80185ae:	1c42      	adds	r2, r0, #1
 80185b0:	d101      	bne.n	80185b6 <__sflush_r+0x7a>
 80185b2:	682b      	ldr	r3, [r5, #0]
 80185b4:	b903      	cbnz	r3, 80185b8 <__sflush_r+0x7c>
 80185b6:	6560      	str	r0, [r4, #84]	; 0x54
 80185b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80185ba:	602f      	str	r7, [r5, #0]
 80185bc:	2900      	cmp	r1, #0
 80185be:	d0ca      	beq.n	8018556 <__sflush_r+0x1a>
 80185c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80185c4:	4299      	cmp	r1, r3
 80185c6:	d002      	beq.n	80185ce <__sflush_r+0x92>
 80185c8:	4628      	mov	r0, r5
 80185ca:	f001 f90b 	bl	80197e4 <_free_r>
 80185ce:	2000      	movs	r0, #0
 80185d0:	6360      	str	r0, [r4, #52]	; 0x34
 80185d2:	e7c1      	b.n	8018558 <__sflush_r+0x1c>
 80185d4:	6a21      	ldr	r1, [r4, #32]
 80185d6:	2301      	movs	r3, #1
 80185d8:	4628      	mov	r0, r5
 80185da:	47b0      	blx	r6
 80185dc:	1c41      	adds	r1, r0, #1
 80185de:	d1c7      	bne.n	8018570 <__sflush_r+0x34>
 80185e0:	682b      	ldr	r3, [r5, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d0c4      	beq.n	8018570 <__sflush_r+0x34>
 80185e6:	2b1d      	cmp	r3, #29
 80185e8:	d001      	beq.n	80185ee <__sflush_r+0xb2>
 80185ea:	2b16      	cmp	r3, #22
 80185ec:	d101      	bne.n	80185f2 <__sflush_r+0xb6>
 80185ee:	602f      	str	r7, [r5, #0]
 80185f0:	e7b1      	b.n	8018556 <__sflush_r+0x1a>
 80185f2:	89a3      	ldrh	r3, [r4, #12]
 80185f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185f8:	81a3      	strh	r3, [r4, #12]
 80185fa:	e7ad      	b.n	8018558 <__sflush_r+0x1c>
 80185fc:	690f      	ldr	r7, [r1, #16]
 80185fe:	2f00      	cmp	r7, #0
 8018600:	d0a9      	beq.n	8018556 <__sflush_r+0x1a>
 8018602:	0793      	lsls	r3, r2, #30
 8018604:	680e      	ldr	r6, [r1, #0]
 8018606:	bf08      	it	eq
 8018608:	694b      	ldreq	r3, [r1, #20]
 801860a:	600f      	str	r7, [r1, #0]
 801860c:	bf18      	it	ne
 801860e:	2300      	movne	r3, #0
 8018610:	eba6 0807 	sub.w	r8, r6, r7
 8018614:	608b      	str	r3, [r1, #8]
 8018616:	f1b8 0f00 	cmp.w	r8, #0
 801861a:	dd9c      	ble.n	8018556 <__sflush_r+0x1a>
 801861c:	6a21      	ldr	r1, [r4, #32]
 801861e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018620:	4643      	mov	r3, r8
 8018622:	463a      	mov	r2, r7
 8018624:	4628      	mov	r0, r5
 8018626:	47b0      	blx	r6
 8018628:	2800      	cmp	r0, #0
 801862a:	dc06      	bgt.n	801863a <__sflush_r+0xfe>
 801862c:	89a3      	ldrh	r3, [r4, #12]
 801862e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018632:	81a3      	strh	r3, [r4, #12]
 8018634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018638:	e78e      	b.n	8018558 <__sflush_r+0x1c>
 801863a:	4407      	add	r7, r0
 801863c:	eba8 0800 	sub.w	r8, r8, r0
 8018640:	e7e9      	b.n	8018616 <__sflush_r+0xda>
 8018642:	bf00      	nop
 8018644:	20400001 	.word	0x20400001

08018648 <_fflush_r>:
 8018648:	b538      	push	{r3, r4, r5, lr}
 801864a:	690b      	ldr	r3, [r1, #16]
 801864c:	4605      	mov	r5, r0
 801864e:	460c      	mov	r4, r1
 8018650:	b913      	cbnz	r3, 8018658 <_fflush_r+0x10>
 8018652:	2500      	movs	r5, #0
 8018654:	4628      	mov	r0, r5
 8018656:	bd38      	pop	{r3, r4, r5, pc}
 8018658:	b118      	cbz	r0, 8018662 <_fflush_r+0x1a>
 801865a:	6983      	ldr	r3, [r0, #24]
 801865c:	b90b      	cbnz	r3, 8018662 <_fflush_r+0x1a>
 801865e:	f7fe fdad 	bl	80171bc <__sinit>
 8018662:	4b14      	ldr	r3, [pc, #80]	; (80186b4 <_fflush_r+0x6c>)
 8018664:	429c      	cmp	r4, r3
 8018666:	d11b      	bne.n	80186a0 <_fflush_r+0x58>
 8018668:	686c      	ldr	r4, [r5, #4]
 801866a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d0ef      	beq.n	8018652 <_fflush_r+0xa>
 8018672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018674:	07d0      	lsls	r0, r2, #31
 8018676:	d404      	bmi.n	8018682 <_fflush_r+0x3a>
 8018678:	0599      	lsls	r1, r3, #22
 801867a:	d402      	bmi.n	8018682 <_fflush_r+0x3a>
 801867c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801867e:	f7fe fe60 	bl	8017342 <__retarget_lock_acquire_recursive>
 8018682:	4628      	mov	r0, r5
 8018684:	4621      	mov	r1, r4
 8018686:	f7ff ff59 	bl	801853c <__sflush_r>
 801868a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801868c:	07da      	lsls	r2, r3, #31
 801868e:	4605      	mov	r5, r0
 8018690:	d4e0      	bmi.n	8018654 <_fflush_r+0xc>
 8018692:	89a3      	ldrh	r3, [r4, #12]
 8018694:	059b      	lsls	r3, r3, #22
 8018696:	d4dd      	bmi.n	8018654 <_fflush_r+0xc>
 8018698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801869a:	f7fe fe53 	bl	8017344 <__retarget_lock_release_recursive>
 801869e:	e7d9      	b.n	8018654 <_fflush_r+0xc>
 80186a0:	4b05      	ldr	r3, [pc, #20]	; (80186b8 <_fflush_r+0x70>)
 80186a2:	429c      	cmp	r4, r3
 80186a4:	d101      	bne.n	80186aa <_fflush_r+0x62>
 80186a6:	68ac      	ldr	r4, [r5, #8]
 80186a8:	e7df      	b.n	801866a <_fflush_r+0x22>
 80186aa:	4b04      	ldr	r3, [pc, #16]	; (80186bc <_fflush_r+0x74>)
 80186ac:	429c      	cmp	r4, r3
 80186ae:	bf08      	it	eq
 80186b0:	68ec      	ldreq	r4, [r5, #12]
 80186b2:	e7da      	b.n	801866a <_fflush_r+0x22>
 80186b4:	0801da04 	.word	0x0801da04
 80186b8:	0801da24 	.word	0x0801da24
 80186bc:	0801d9e4 	.word	0x0801d9e4

080186c0 <fiprintf>:
 80186c0:	b40e      	push	{r1, r2, r3}
 80186c2:	b503      	push	{r0, r1, lr}
 80186c4:	4601      	mov	r1, r0
 80186c6:	ab03      	add	r3, sp, #12
 80186c8:	4805      	ldr	r0, [pc, #20]	; (80186e0 <fiprintf+0x20>)
 80186ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80186ce:	6800      	ldr	r0, [r0, #0]
 80186d0:	9301      	str	r3, [sp, #4]
 80186d2:	f001 fa59 	bl	8019b88 <_vfiprintf_r>
 80186d6:	b002      	add	sp, #8
 80186d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80186dc:	b003      	add	sp, #12
 80186de:	4770      	bx	lr
 80186e0:	2000002c 	.word	0x2000002c

080186e4 <rshift>:
 80186e4:	6903      	ldr	r3, [r0, #16]
 80186e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80186ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80186f2:	f100 0414 	add.w	r4, r0, #20
 80186f6:	dd45      	ble.n	8018784 <rshift+0xa0>
 80186f8:	f011 011f 	ands.w	r1, r1, #31
 80186fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018704:	d10c      	bne.n	8018720 <rshift+0x3c>
 8018706:	f100 0710 	add.w	r7, r0, #16
 801870a:	4629      	mov	r1, r5
 801870c:	42b1      	cmp	r1, r6
 801870e:	d334      	bcc.n	801877a <rshift+0x96>
 8018710:	1a9b      	subs	r3, r3, r2
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	1eea      	subs	r2, r5, #3
 8018716:	4296      	cmp	r6, r2
 8018718:	bf38      	it	cc
 801871a:	2300      	movcc	r3, #0
 801871c:	4423      	add	r3, r4
 801871e:	e015      	b.n	801874c <rshift+0x68>
 8018720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018724:	f1c1 0820 	rsb	r8, r1, #32
 8018728:	40cf      	lsrs	r7, r1
 801872a:	f105 0e04 	add.w	lr, r5, #4
 801872e:	46a1      	mov	r9, r4
 8018730:	4576      	cmp	r6, lr
 8018732:	46f4      	mov	ip, lr
 8018734:	d815      	bhi.n	8018762 <rshift+0x7e>
 8018736:	1a9a      	subs	r2, r3, r2
 8018738:	0092      	lsls	r2, r2, #2
 801873a:	3a04      	subs	r2, #4
 801873c:	3501      	adds	r5, #1
 801873e:	42ae      	cmp	r6, r5
 8018740:	bf38      	it	cc
 8018742:	2200      	movcc	r2, #0
 8018744:	18a3      	adds	r3, r4, r2
 8018746:	50a7      	str	r7, [r4, r2]
 8018748:	b107      	cbz	r7, 801874c <rshift+0x68>
 801874a:	3304      	adds	r3, #4
 801874c:	1b1a      	subs	r2, r3, r4
 801874e:	42a3      	cmp	r3, r4
 8018750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018754:	bf08      	it	eq
 8018756:	2300      	moveq	r3, #0
 8018758:	6102      	str	r2, [r0, #16]
 801875a:	bf08      	it	eq
 801875c:	6143      	streq	r3, [r0, #20]
 801875e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018762:	f8dc c000 	ldr.w	ip, [ip]
 8018766:	fa0c fc08 	lsl.w	ip, ip, r8
 801876a:	ea4c 0707 	orr.w	r7, ip, r7
 801876e:	f849 7b04 	str.w	r7, [r9], #4
 8018772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018776:	40cf      	lsrs	r7, r1
 8018778:	e7da      	b.n	8018730 <rshift+0x4c>
 801877a:	f851 cb04 	ldr.w	ip, [r1], #4
 801877e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018782:	e7c3      	b.n	801870c <rshift+0x28>
 8018784:	4623      	mov	r3, r4
 8018786:	e7e1      	b.n	801874c <rshift+0x68>

08018788 <__hexdig_fun>:
 8018788:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801878c:	2b09      	cmp	r3, #9
 801878e:	d802      	bhi.n	8018796 <__hexdig_fun+0xe>
 8018790:	3820      	subs	r0, #32
 8018792:	b2c0      	uxtb	r0, r0
 8018794:	4770      	bx	lr
 8018796:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801879a:	2b05      	cmp	r3, #5
 801879c:	d801      	bhi.n	80187a2 <__hexdig_fun+0x1a>
 801879e:	3847      	subs	r0, #71	; 0x47
 80187a0:	e7f7      	b.n	8018792 <__hexdig_fun+0xa>
 80187a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80187a6:	2b05      	cmp	r3, #5
 80187a8:	d801      	bhi.n	80187ae <__hexdig_fun+0x26>
 80187aa:	3827      	subs	r0, #39	; 0x27
 80187ac:	e7f1      	b.n	8018792 <__hexdig_fun+0xa>
 80187ae:	2000      	movs	r0, #0
 80187b0:	4770      	bx	lr
	...

080187b4 <__gethex>:
 80187b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b8:	ed2d 8b02 	vpush	{d8}
 80187bc:	b089      	sub	sp, #36	; 0x24
 80187be:	ee08 0a10 	vmov	s16, r0
 80187c2:	9304      	str	r3, [sp, #16]
 80187c4:	4bb4      	ldr	r3, [pc, #720]	; (8018a98 <__gethex+0x2e4>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	9301      	str	r3, [sp, #4]
 80187ca:	4618      	mov	r0, r3
 80187cc:	468b      	mov	fp, r1
 80187ce:	4690      	mov	r8, r2
 80187d0:	f7e7 fd1e 	bl	8000210 <strlen>
 80187d4:	9b01      	ldr	r3, [sp, #4]
 80187d6:	f8db 2000 	ldr.w	r2, [fp]
 80187da:	4403      	add	r3, r0
 80187dc:	4682      	mov	sl, r0
 80187de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80187e2:	9305      	str	r3, [sp, #20]
 80187e4:	1c93      	adds	r3, r2, #2
 80187e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80187ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80187ee:	32fe      	adds	r2, #254	; 0xfe
 80187f0:	18d1      	adds	r1, r2, r3
 80187f2:	461f      	mov	r7, r3
 80187f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80187f8:	9100      	str	r1, [sp, #0]
 80187fa:	2830      	cmp	r0, #48	; 0x30
 80187fc:	d0f8      	beq.n	80187f0 <__gethex+0x3c>
 80187fe:	f7ff ffc3 	bl	8018788 <__hexdig_fun>
 8018802:	4604      	mov	r4, r0
 8018804:	2800      	cmp	r0, #0
 8018806:	d13a      	bne.n	801887e <__gethex+0xca>
 8018808:	9901      	ldr	r1, [sp, #4]
 801880a:	4652      	mov	r2, sl
 801880c:	4638      	mov	r0, r7
 801880e:	f7fe ffa2 	bl	8017756 <strncmp>
 8018812:	4605      	mov	r5, r0
 8018814:	2800      	cmp	r0, #0
 8018816:	d168      	bne.n	80188ea <__gethex+0x136>
 8018818:	f817 000a 	ldrb.w	r0, [r7, sl]
 801881c:	eb07 060a 	add.w	r6, r7, sl
 8018820:	f7ff ffb2 	bl	8018788 <__hexdig_fun>
 8018824:	2800      	cmp	r0, #0
 8018826:	d062      	beq.n	80188ee <__gethex+0x13a>
 8018828:	4633      	mov	r3, r6
 801882a:	7818      	ldrb	r0, [r3, #0]
 801882c:	2830      	cmp	r0, #48	; 0x30
 801882e:	461f      	mov	r7, r3
 8018830:	f103 0301 	add.w	r3, r3, #1
 8018834:	d0f9      	beq.n	801882a <__gethex+0x76>
 8018836:	f7ff ffa7 	bl	8018788 <__hexdig_fun>
 801883a:	2301      	movs	r3, #1
 801883c:	fab0 f480 	clz	r4, r0
 8018840:	0964      	lsrs	r4, r4, #5
 8018842:	4635      	mov	r5, r6
 8018844:	9300      	str	r3, [sp, #0]
 8018846:	463a      	mov	r2, r7
 8018848:	4616      	mov	r6, r2
 801884a:	3201      	adds	r2, #1
 801884c:	7830      	ldrb	r0, [r6, #0]
 801884e:	f7ff ff9b 	bl	8018788 <__hexdig_fun>
 8018852:	2800      	cmp	r0, #0
 8018854:	d1f8      	bne.n	8018848 <__gethex+0x94>
 8018856:	9901      	ldr	r1, [sp, #4]
 8018858:	4652      	mov	r2, sl
 801885a:	4630      	mov	r0, r6
 801885c:	f7fe ff7b 	bl	8017756 <strncmp>
 8018860:	b980      	cbnz	r0, 8018884 <__gethex+0xd0>
 8018862:	b94d      	cbnz	r5, 8018878 <__gethex+0xc4>
 8018864:	eb06 050a 	add.w	r5, r6, sl
 8018868:	462a      	mov	r2, r5
 801886a:	4616      	mov	r6, r2
 801886c:	3201      	adds	r2, #1
 801886e:	7830      	ldrb	r0, [r6, #0]
 8018870:	f7ff ff8a 	bl	8018788 <__hexdig_fun>
 8018874:	2800      	cmp	r0, #0
 8018876:	d1f8      	bne.n	801886a <__gethex+0xb6>
 8018878:	1bad      	subs	r5, r5, r6
 801887a:	00ad      	lsls	r5, r5, #2
 801887c:	e004      	b.n	8018888 <__gethex+0xd4>
 801887e:	2400      	movs	r4, #0
 8018880:	4625      	mov	r5, r4
 8018882:	e7e0      	b.n	8018846 <__gethex+0x92>
 8018884:	2d00      	cmp	r5, #0
 8018886:	d1f7      	bne.n	8018878 <__gethex+0xc4>
 8018888:	7833      	ldrb	r3, [r6, #0]
 801888a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801888e:	2b50      	cmp	r3, #80	; 0x50
 8018890:	d13b      	bne.n	801890a <__gethex+0x156>
 8018892:	7873      	ldrb	r3, [r6, #1]
 8018894:	2b2b      	cmp	r3, #43	; 0x2b
 8018896:	d02c      	beq.n	80188f2 <__gethex+0x13e>
 8018898:	2b2d      	cmp	r3, #45	; 0x2d
 801889a:	d02e      	beq.n	80188fa <__gethex+0x146>
 801889c:	1c71      	adds	r1, r6, #1
 801889e:	f04f 0900 	mov.w	r9, #0
 80188a2:	7808      	ldrb	r0, [r1, #0]
 80188a4:	f7ff ff70 	bl	8018788 <__hexdig_fun>
 80188a8:	1e43      	subs	r3, r0, #1
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	2b18      	cmp	r3, #24
 80188ae:	d82c      	bhi.n	801890a <__gethex+0x156>
 80188b0:	f1a0 0210 	sub.w	r2, r0, #16
 80188b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80188b8:	f7ff ff66 	bl	8018788 <__hexdig_fun>
 80188bc:	1e43      	subs	r3, r0, #1
 80188be:	b2db      	uxtb	r3, r3
 80188c0:	2b18      	cmp	r3, #24
 80188c2:	d91d      	bls.n	8018900 <__gethex+0x14c>
 80188c4:	f1b9 0f00 	cmp.w	r9, #0
 80188c8:	d000      	beq.n	80188cc <__gethex+0x118>
 80188ca:	4252      	negs	r2, r2
 80188cc:	4415      	add	r5, r2
 80188ce:	f8cb 1000 	str.w	r1, [fp]
 80188d2:	b1e4      	cbz	r4, 801890e <__gethex+0x15a>
 80188d4:	9b00      	ldr	r3, [sp, #0]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	bf14      	ite	ne
 80188da:	2700      	movne	r7, #0
 80188dc:	2706      	moveq	r7, #6
 80188de:	4638      	mov	r0, r7
 80188e0:	b009      	add	sp, #36	; 0x24
 80188e2:	ecbd 8b02 	vpop	{d8}
 80188e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ea:	463e      	mov	r6, r7
 80188ec:	4625      	mov	r5, r4
 80188ee:	2401      	movs	r4, #1
 80188f0:	e7ca      	b.n	8018888 <__gethex+0xd4>
 80188f2:	f04f 0900 	mov.w	r9, #0
 80188f6:	1cb1      	adds	r1, r6, #2
 80188f8:	e7d3      	b.n	80188a2 <__gethex+0xee>
 80188fa:	f04f 0901 	mov.w	r9, #1
 80188fe:	e7fa      	b.n	80188f6 <__gethex+0x142>
 8018900:	230a      	movs	r3, #10
 8018902:	fb03 0202 	mla	r2, r3, r2, r0
 8018906:	3a10      	subs	r2, #16
 8018908:	e7d4      	b.n	80188b4 <__gethex+0x100>
 801890a:	4631      	mov	r1, r6
 801890c:	e7df      	b.n	80188ce <__gethex+0x11a>
 801890e:	1bf3      	subs	r3, r6, r7
 8018910:	3b01      	subs	r3, #1
 8018912:	4621      	mov	r1, r4
 8018914:	2b07      	cmp	r3, #7
 8018916:	dc0b      	bgt.n	8018930 <__gethex+0x17c>
 8018918:	ee18 0a10 	vmov	r0, s16
 801891c:	f000 fa8a 	bl	8018e34 <_Balloc>
 8018920:	4604      	mov	r4, r0
 8018922:	b940      	cbnz	r0, 8018936 <__gethex+0x182>
 8018924:	4b5d      	ldr	r3, [pc, #372]	; (8018a9c <__gethex+0x2e8>)
 8018926:	4602      	mov	r2, r0
 8018928:	21de      	movs	r1, #222	; 0xde
 801892a:	485d      	ldr	r0, [pc, #372]	; (8018aa0 <__gethex+0x2ec>)
 801892c:	f7ff fdd8 	bl	80184e0 <__assert_func>
 8018930:	3101      	adds	r1, #1
 8018932:	105b      	asrs	r3, r3, #1
 8018934:	e7ee      	b.n	8018914 <__gethex+0x160>
 8018936:	f100 0914 	add.w	r9, r0, #20
 801893a:	f04f 0b00 	mov.w	fp, #0
 801893e:	f1ca 0301 	rsb	r3, sl, #1
 8018942:	f8cd 9008 	str.w	r9, [sp, #8]
 8018946:	f8cd b000 	str.w	fp, [sp]
 801894a:	9306      	str	r3, [sp, #24]
 801894c:	42b7      	cmp	r7, r6
 801894e:	d340      	bcc.n	80189d2 <__gethex+0x21e>
 8018950:	9802      	ldr	r0, [sp, #8]
 8018952:	9b00      	ldr	r3, [sp, #0]
 8018954:	f840 3b04 	str.w	r3, [r0], #4
 8018958:	eba0 0009 	sub.w	r0, r0, r9
 801895c:	1080      	asrs	r0, r0, #2
 801895e:	0146      	lsls	r6, r0, #5
 8018960:	6120      	str	r0, [r4, #16]
 8018962:	4618      	mov	r0, r3
 8018964:	f000 fb58 	bl	8019018 <__hi0bits>
 8018968:	1a30      	subs	r0, r6, r0
 801896a:	f8d8 6000 	ldr.w	r6, [r8]
 801896e:	42b0      	cmp	r0, r6
 8018970:	dd63      	ble.n	8018a3a <__gethex+0x286>
 8018972:	1b87      	subs	r7, r0, r6
 8018974:	4639      	mov	r1, r7
 8018976:	4620      	mov	r0, r4
 8018978:	f000 fefc 	bl	8019774 <__any_on>
 801897c:	4682      	mov	sl, r0
 801897e:	b1a8      	cbz	r0, 80189ac <__gethex+0x1f8>
 8018980:	1e7b      	subs	r3, r7, #1
 8018982:	1159      	asrs	r1, r3, #5
 8018984:	f003 021f 	and.w	r2, r3, #31
 8018988:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801898c:	f04f 0a01 	mov.w	sl, #1
 8018990:	fa0a f202 	lsl.w	r2, sl, r2
 8018994:	420a      	tst	r2, r1
 8018996:	d009      	beq.n	80189ac <__gethex+0x1f8>
 8018998:	4553      	cmp	r3, sl
 801899a:	dd05      	ble.n	80189a8 <__gethex+0x1f4>
 801899c:	1eb9      	subs	r1, r7, #2
 801899e:	4620      	mov	r0, r4
 80189a0:	f000 fee8 	bl	8019774 <__any_on>
 80189a4:	2800      	cmp	r0, #0
 80189a6:	d145      	bne.n	8018a34 <__gethex+0x280>
 80189a8:	f04f 0a02 	mov.w	sl, #2
 80189ac:	4639      	mov	r1, r7
 80189ae:	4620      	mov	r0, r4
 80189b0:	f7ff fe98 	bl	80186e4 <rshift>
 80189b4:	443d      	add	r5, r7
 80189b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189ba:	42ab      	cmp	r3, r5
 80189bc:	da4c      	bge.n	8018a58 <__gethex+0x2a4>
 80189be:	ee18 0a10 	vmov	r0, s16
 80189c2:	4621      	mov	r1, r4
 80189c4:	f000 fa76 	bl	8018eb4 <_Bfree>
 80189c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189ca:	2300      	movs	r3, #0
 80189cc:	6013      	str	r3, [r2, #0]
 80189ce:	27a3      	movs	r7, #163	; 0xa3
 80189d0:	e785      	b.n	80188de <__gethex+0x12a>
 80189d2:	1e73      	subs	r3, r6, #1
 80189d4:	9a05      	ldr	r2, [sp, #20]
 80189d6:	9303      	str	r3, [sp, #12]
 80189d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80189dc:	4293      	cmp	r3, r2
 80189de:	d019      	beq.n	8018a14 <__gethex+0x260>
 80189e0:	f1bb 0f20 	cmp.w	fp, #32
 80189e4:	d107      	bne.n	80189f6 <__gethex+0x242>
 80189e6:	9b02      	ldr	r3, [sp, #8]
 80189e8:	9a00      	ldr	r2, [sp, #0]
 80189ea:	f843 2b04 	str.w	r2, [r3], #4
 80189ee:	9302      	str	r3, [sp, #8]
 80189f0:	2300      	movs	r3, #0
 80189f2:	9300      	str	r3, [sp, #0]
 80189f4:	469b      	mov	fp, r3
 80189f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80189fa:	f7ff fec5 	bl	8018788 <__hexdig_fun>
 80189fe:	9b00      	ldr	r3, [sp, #0]
 8018a00:	f000 000f 	and.w	r0, r0, #15
 8018a04:	fa00 f00b 	lsl.w	r0, r0, fp
 8018a08:	4303      	orrs	r3, r0
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	f10b 0b04 	add.w	fp, fp, #4
 8018a10:	9b03      	ldr	r3, [sp, #12]
 8018a12:	e00d      	b.n	8018a30 <__gethex+0x27c>
 8018a14:	9b03      	ldr	r3, [sp, #12]
 8018a16:	9a06      	ldr	r2, [sp, #24]
 8018a18:	4413      	add	r3, r2
 8018a1a:	42bb      	cmp	r3, r7
 8018a1c:	d3e0      	bcc.n	80189e0 <__gethex+0x22c>
 8018a1e:	4618      	mov	r0, r3
 8018a20:	9901      	ldr	r1, [sp, #4]
 8018a22:	9307      	str	r3, [sp, #28]
 8018a24:	4652      	mov	r2, sl
 8018a26:	f7fe fe96 	bl	8017756 <strncmp>
 8018a2a:	9b07      	ldr	r3, [sp, #28]
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	d1d7      	bne.n	80189e0 <__gethex+0x22c>
 8018a30:	461e      	mov	r6, r3
 8018a32:	e78b      	b.n	801894c <__gethex+0x198>
 8018a34:	f04f 0a03 	mov.w	sl, #3
 8018a38:	e7b8      	b.n	80189ac <__gethex+0x1f8>
 8018a3a:	da0a      	bge.n	8018a52 <__gethex+0x29e>
 8018a3c:	1a37      	subs	r7, r6, r0
 8018a3e:	4621      	mov	r1, r4
 8018a40:	ee18 0a10 	vmov	r0, s16
 8018a44:	463a      	mov	r2, r7
 8018a46:	f000 fc51 	bl	80192ec <__lshift>
 8018a4a:	1bed      	subs	r5, r5, r7
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	f100 0914 	add.w	r9, r0, #20
 8018a52:	f04f 0a00 	mov.w	sl, #0
 8018a56:	e7ae      	b.n	80189b6 <__gethex+0x202>
 8018a58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a5c:	42a8      	cmp	r0, r5
 8018a5e:	dd72      	ble.n	8018b46 <__gethex+0x392>
 8018a60:	1b45      	subs	r5, r0, r5
 8018a62:	42ae      	cmp	r6, r5
 8018a64:	dc36      	bgt.n	8018ad4 <__gethex+0x320>
 8018a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a6a:	2b02      	cmp	r3, #2
 8018a6c:	d02a      	beq.n	8018ac4 <__gethex+0x310>
 8018a6e:	2b03      	cmp	r3, #3
 8018a70:	d02c      	beq.n	8018acc <__gethex+0x318>
 8018a72:	2b01      	cmp	r3, #1
 8018a74:	d11c      	bne.n	8018ab0 <__gethex+0x2fc>
 8018a76:	42ae      	cmp	r6, r5
 8018a78:	d11a      	bne.n	8018ab0 <__gethex+0x2fc>
 8018a7a:	2e01      	cmp	r6, #1
 8018a7c:	d112      	bne.n	8018aa4 <__gethex+0x2f0>
 8018a7e:	9a04      	ldr	r2, [sp, #16]
 8018a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018a84:	6013      	str	r3, [r2, #0]
 8018a86:	2301      	movs	r3, #1
 8018a88:	6123      	str	r3, [r4, #16]
 8018a8a:	f8c9 3000 	str.w	r3, [r9]
 8018a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a90:	2762      	movs	r7, #98	; 0x62
 8018a92:	601c      	str	r4, [r3, #0]
 8018a94:	e723      	b.n	80188de <__gethex+0x12a>
 8018a96:	bf00      	nop
 8018a98:	0801dc28 	.word	0x0801dc28
 8018a9c:	0801dbb1 	.word	0x0801dbb1
 8018aa0:	0801dbc2 	.word	0x0801dbc2
 8018aa4:	1e71      	subs	r1, r6, #1
 8018aa6:	4620      	mov	r0, r4
 8018aa8:	f000 fe64 	bl	8019774 <__any_on>
 8018aac:	2800      	cmp	r0, #0
 8018aae:	d1e6      	bne.n	8018a7e <__gethex+0x2ca>
 8018ab0:	ee18 0a10 	vmov	r0, s16
 8018ab4:	4621      	mov	r1, r4
 8018ab6:	f000 f9fd 	bl	8018eb4 <_Bfree>
 8018aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018abc:	2300      	movs	r3, #0
 8018abe:	6013      	str	r3, [r2, #0]
 8018ac0:	2750      	movs	r7, #80	; 0x50
 8018ac2:	e70c      	b.n	80188de <__gethex+0x12a>
 8018ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d1f2      	bne.n	8018ab0 <__gethex+0x2fc>
 8018aca:	e7d8      	b.n	8018a7e <__gethex+0x2ca>
 8018acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d1d5      	bne.n	8018a7e <__gethex+0x2ca>
 8018ad2:	e7ed      	b.n	8018ab0 <__gethex+0x2fc>
 8018ad4:	1e6f      	subs	r7, r5, #1
 8018ad6:	f1ba 0f00 	cmp.w	sl, #0
 8018ada:	d131      	bne.n	8018b40 <__gethex+0x38c>
 8018adc:	b127      	cbz	r7, 8018ae8 <__gethex+0x334>
 8018ade:	4639      	mov	r1, r7
 8018ae0:	4620      	mov	r0, r4
 8018ae2:	f000 fe47 	bl	8019774 <__any_on>
 8018ae6:	4682      	mov	sl, r0
 8018ae8:	117b      	asrs	r3, r7, #5
 8018aea:	2101      	movs	r1, #1
 8018aec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018af0:	f007 071f 	and.w	r7, r7, #31
 8018af4:	fa01 f707 	lsl.w	r7, r1, r7
 8018af8:	421f      	tst	r7, r3
 8018afa:	4629      	mov	r1, r5
 8018afc:	4620      	mov	r0, r4
 8018afe:	bf18      	it	ne
 8018b00:	f04a 0a02 	orrne.w	sl, sl, #2
 8018b04:	1b76      	subs	r6, r6, r5
 8018b06:	f7ff fded 	bl	80186e4 <rshift>
 8018b0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018b0e:	2702      	movs	r7, #2
 8018b10:	f1ba 0f00 	cmp.w	sl, #0
 8018b14:	d048      	beq.n	8018ba8 <__gethex+0x3f4>
 8018b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b1a:	2b02      	cmp	r3, #2
 8018b1c:	d015      	beq.n	8018b4a <__gethex+0x396>
 8018b1e:	2b03      	cmp	r3, #3
 8018b20:	d017      	beq.n	8018b52 <__gethex+0x39e>
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d109      	bne.n	8018b3a <__gethex+0x386>
 8018b26:	f01a 0f02 	tst.w	sl, #2
 8018b2a:	d006      	beq.n	8018b3a <__gethex+0x386>
 8018b2c:	f8d9 0000 	ldr.w	r0, [r9]
 8018b30:	ea4a 0a00 	orr.w	sl, sl, r0
 8018b34:	f01a 0f01 	tst.w	sl, #1
 8018b38:	d10e      	bne.n	8018b58 <__gethex+0x3a4>
 8018b3a:	f047 0710 	orr.w	r7, r7, #16
 8018b3e:	e033      	b.n	8018ba8 <__gethex+0x3f4>
 8018b40:	f04f 0a01 	mov.w	sl, #1
 8018b44:	e7d0      	b.n	8018ae8 <__gethex+0x334>
 8018b46:	2701      	movs	r7, #1
 8018b48:	e7e2      	b.n	8018b10 <__gethex+0x35c>
 8018b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b4c:	f1c3 0301 	rsb	r3, r3, #1
 8018b50:	9315      	str	r3, [sp, #84]	; 0x54
 8018b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d0f0      	beq.n	8018b3a <__gethex+0x386>
 8018b58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018b5c:	f104 0314 	add.w	r3, r4, #20
 8018b60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018b64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018b68:	f04f 0c00 	mov.w	ip, #0
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b72:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8018b76:	d01c      	beq.n	8018bb2 <__gethex+0x3fe>
 8018b78:	3201      	adds	r2, #1
 8018b7a:	6002      	str	r2, [r0, #0]
 8018b7c:	2f02      	cmp	r7, #2
 8018b7e:	f104 0314 	add.w	r3, r4, #20
 8018b82:	d13f      	bne.n	8018c04 <__gethex+0x450>
 8018b84:	f8d8 2000 	ldr.w	r2, [r8]
 8018b88:	3a01      	subs	r2, #1
 8018b8a:	42b2      	cmp	r2, r6
 8018b8c:	d10a      	bne.n	8018ba4 <__gethex+0x3f0>
 8018b8e:	1171      	asrs	r1, r6, #5
 8018b90:	2201      	movs	r2, #1
 8018b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b96:	f006 061f 	and.w	r6, r6, #31
 8018b9a:	fa02 f606 	lsl.w	r6, r2, r6
 8018b9e:	421e      	tst	r6, r3
 8018ba0:	bf18      	it	ne
 8018ba2:	4617      	movne	r7, r2
 8018ba4:	f047 0720 	orr.w	r7, r7, #32
 8018ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018baa:	601c      	str	r4, [r3, #0]
 8018bac:	9b04      	ldr	r3, [sp, #16]
 8018bae:	601d      	str	r5, [r3, #0]
 8018bb0:	e695      	b.n	80188de <__gethex+0x12a>
 8018bb2:	4299      	cmp	r1, r3
 8018bb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8018bb8:	d8d8      	bhi.n	8018b6c <__gethex+0x3b8>
 8018bba:	68a3      	ldr	r3, [r4, #8]
 8018bbc:	459b      	cmp	fp, r3
 8018bbe:	db19      	blt.n	8018bf4 <__gethex+0x440>
 8018bc0:	6861      	ldr	r1, [r4, #4]
 8018bc2:	ee18 0a10 	vmov	r0, s16
 8018bc6:	3101      	adds	r1, #1
 8018bc8:	f000 f934 	bl	8018e34 <_Balloc>
 8018bcc:	4681      	mov	r9, r0
 8018bce:	b918      	cbnz	r0, 8018bd8 <__gethex+0x424>
 8018bd0:	4b1a      	ldr	r3, [pc, #104]	; (8018c3c <__gethex+0x488>)
 8018bd2:	4602      	mov	r2, r0
 8018bd4:	2184      	movs	r1, #132	; 0x84
 8018bd6:	e6a8      	b.n	801892a <__gethex+0x176>
 8018bd8:	6922      	ldr	r2, [r4, #16]
 8018bda:	3202      	adds	r2, #2
 8018bdc:	f104 010c 	add.w	r1, r4, #12
 8018be0:	0092      	lsls	r2, r2, #2
 8018be2:	300c      	adds	r0, #12
 8018be4:	f7fe fbbf 	bl	8017366 <memcpy>
 8018be8:	4621      	mov	r1, r4
 8018bea:	ee18 0a10 	vmov	r0, s16
 8018bee:	f000 f961 	bl	8018eb4 <_Bfree>
 8018bf2:	464c      	mov	r4, r9
 8018bf4:	6923      	ldr	r3, [r4, #16]
 8018bf6:	1c5a      	adds	r2, r3, #1
 8018bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018bfc:	6122      	str	r2, [r4, #16]
 8018bfe:	2201      	movs	r2, #1
 8018c00:	615a      	str	r2, [r3, #20]
 8018c02:	e7bb      	b.n	8018b7c <__gethex+0x3c8>
 8018c04:	6922      	ldr	r2, [r4, #16]
 8018c06:	455a      	cmp	r2, fp
 8018c08:	dd0b      	ble.n	8018c22 <__gethex+0x46e>
 8018c0a:	2101      	movs	r1, #1
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	f7ff fd69 	bl	80186e4 <rshift>
 8018c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c16:	3501      	adds	r5, #1
 8018c18:	42ab      	cmp	r3, r5
 8018c1a:	f6ff aed0 	blt.w	80189be <__gethex+0x20a>
 8018c1e:	2701      	movs	r7, #1
 8018c20:	e7c0      	b.n	8018ba4 <__gethex+0x3f0>
 8018c22:	f016 061f 	ands.w	r6, r6, #31
 8018c26:	d0fa      	beq.n	8018c1e <__gethex+0x46a>
 8018c28:	4453      	add	r3, sl
 8018c2a:	f1c6 0620 	rsb	r6, r6, #32
 8018c2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018c32:	f000 f9f1 	bl	8019018 <__hi0bits>
 8018c36:	42b0      	cmp	r0, r6
 8018c38:	dbe7      	blt.n	8018c0a <__gethex+0x456>
 8018c3a:	e7f0      	b.n	8018c1e <__gethex+0x46a>
 8018c3c:	0801dbb1 	.word	0x0801dbb1

08018c40 <L_shift>:
 8018c40:	f1c2 0208 	rsb	r2, r2, #8
 8018c44:	0092      	lsls	r2, r2, #2
 8018c46:	b570      	push	{r4, r5, r6, lr}
 8018c48:	f1c2 0620 	rsb	r6, r2, #32
 8018c4c:	6843      	ldr	r3, [r0, #4]
 8018c4e:	6804      	ldr	r4, [r0, #0]
 8018c50:	fa03 f506 	lsl.w	r5, r3, r6
 8018c54:	432c      	orrs	r4, r5
 8018c56:	40d3      	lsrs	r3, r2
 8018c58:	6004      	str	r4, [r0, #0]
 8018c5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018c5e:	4288      	cmp	r0, r1
 8018c60:	d3f4      	bcc.n	8018c4c <L_shift+0xc>
 8018c62:	bd70      	pop	{r4, r5, r6, pc}

08018c64 <__match>:
 8018c64:	b530      	push	{r4, r5, lr}
 8018c66:	6803      	ldr	r3, [r0, #0]
 8018c68:	3301      	adds	r3, #1
 8018c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c6e:	b914      	cbnz	r4, 8018c76 <__match+0x12>
 8018c70:	6003      	str	r3, [r0, #0]
 8018c72:	2001      	movs	r0, #1
 8018c74:	bd30      	pop	{r4, r5, pc}
 8018c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018c7e:	2d19      	cmp	r5, #25
 8018c80:	bf98      	it	ls
 8018c82:	3220      	addls	r2, #32
 8018c84:	42a2      	cmp	r2, r4
 8018c86:	d0f0      	beq.n	8018c6a <__match+0x6>
 8018c88:	2000      	movs	r0, #0
 8018c8a:	e7f3      	b.n	8018c74 <__match+0x10>

08018c8c <__hexnan>:
 8018c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c90:	680b      	ldr	r3, [r1, #0]
 8018c92:	115e      	asrs	r6, r3, #5
 8018c94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018c98:	f013 031f 	ands.w	r3, r3, #31
 8018c9c:	b087      	sub	sp, #28
 8018c9e:	bf18      	it	ne
 8018ca0:	3604      	addne	r6, #4
 8018ca2:	2500      	movs	r5, #0
 8018ca4:	1f37      	subs	r7, r6, #4
 8018ca6:	4690      	mov	r8, r2
 8018ca8:	6802      	ldr	r2, [r0, #0]
 8018caa:	9301      	str	r3, [sp, #4]
 8018cac:	4682      	mov	sl, r0
 8018cae:	f846 5c04 	str.w	r5, [r6, #-4]
 8018cb2:	46b9      	mov	r9, r7
 8018cb4:	463c      	mov	r4, r7
 8018cb6:	9502      	str	r5, [sp, #8]
 8018cb8:	46ab      	mov	fp, r5
 8018cba:	7851      	ldrb	r1, [r2, #1]
 8018cbc:	1c53      	adds	r3, r2, #1
 8018cbe:	9303      	str	r3, [sp, #12]
 8018cc0:	b341      	cbz	r1, 8018d14 <__hexnan+0x88>
 8018cc2:	4608      	mov	r0, r1
 8018cc4:	9205      	str	r2, [sp, #20]
 8018cc6:	9104      	str	r1, [sp, #16]
 8018cc8:	f7ff fd5e 	bl	8018788 <__hexdig_fun>
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	d14f      	bne.n	8018d70 <__hexnan+0xe4>
 8018cd0:	9904      	ldr	r1, [sp, #16]
 8018cd2:	9a05      	ldr	r2, [sp, #20]
 8018cd4:	2920      	cmp	r1, #32
 8018cd6:	d818      	bhi.n	8018d0a <__hexnan+0x7e>
 8018cd8:	9b02      	ldr	r3, [sp, #8]
 8018cda:	459b      	cmp	fp, r3
 8018cdc:	dd13      	ble.n	8018d06 <__hexnan+0x7a>
 8018cde:	454c      	cmp	r4, r9
 8018ce0:	d206      	bcs.n	8018cf0 <__hexnan+0x64>
 8018ce2:	2d07      	cmp	r5, #7
 8018ce4:	dc04      	bgt.n	8018cf0 <__hexnan+0x64>
 8018ce6:	462a      	mov	r2, r5
 8018ce8:	4649      	mov	r1, r9
 8018cea:	4620      	mov	r0, r4
 8018cec:	f7ff ffa8 	bl	8018c40 <L_shift>
 8018cf0:	4544      	cmp	r4, r8
 8018cf2:	d950      	bls.n	8018d96 <__hexnan+0x10a>
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	f1a4 0904 	sub.w	r9, r4, #4
 8018cfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8018cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8018d02:	464c      	mov	r4, r9
 8018d04:	461d      	mov	r5, r3
 8018d06:	9a03      	ldr	r2, [sp, #12]
 8018d08:	e7d7      	b.n	8018cba <__hexnan+0x2e>
 8018d0a:	2929      	cmp	r1, #41	; 0x29
 8018d0c:	d156      	bne.n	8018dbc <__hexnan+0x130>
 8018d0e:	3202      	adds	r2, #2
 8018d10:	f8ca 2000 	str.w	r2, [sl]
 8018d14:	f1bb 0f00 	cmp.w	fp, #0
 8018d18:	d050      	beq.n	8018dbc <__hexnan+0x130>
 8018d1a:	454c      	cmp	r4, r9
 8018d1c:	d206      	bcs.n	8018d2c <__hexnan+0xa0>
 8018d1e:	2d07      	cmp	r5, #7
 8018d20:	dc04      	bgt.n	8018d2c <__hexnan+0xa0>
 8018d22:	462a      	mov	r2, r5
 8018d24:	4649      	mov	r1, r9
 8018d26:	4620      	mov	r0, r4
 8018d28:	f7ff ff8a 	bl	8018c40 <L_shift>
 8018d2c:	4544      	cmp	r4, r8
 8018d2e:	d934      	bls.n	8018d9a <__hexnan+0x10e>
 8018d30:	f1a8 0204 	sub.w	r2, r8, #4
 8018d34:	4623      	mov	r3, r4
 8018d36:	f853 1b04 	ldr.w	r1, [r3], #4
 8018d3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8018d3e:	429f      	cmp	r7, r3
 8018d40:	d2f9      	bcs.n	8018d36 <__hexnan+0xaa>
 8018d42:	1b3b      	subs	r3, r7, r4
 8018d44:	f023 0303 	bic.w	r3, r3, #3
 8018d48:	3304      	adds	r3, #4
 8018d4a:	3401      	adds	r4, #1
 8018d4c:	3e03      	subs	r6, #3
 8018d4e:	42b4      	cmp	r4, r6
 8018d50:	bf88      	it	hi
 8018d52:	2304      	movhi	r3, #4
 8018d54:	4443      	add	r3, r8
 8018d56:	2200      	movs	r2, #0
 8018d58:	f843 2b04 	str.w	r2, [r3], #4
 8018d5c:	429f      	cmp	r7, r3
 8018d5e:	d2fb      	bcs.n	8018d58 <__hexnan+0xcc>
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	b91b      	cbnz	r3, 8018d6c <__hexnan+0xe0>
 8018d64:	4547      	cmp	r7, r8
 8018d66:	d127      	bne.n	8018db8 <__hexnan+0x12c>
 8018d68:	2301      	movs	r3, #1
 8018d6a:	603b      	str	r3, [r7, #0]
 8018d6c:	2005      	movs	r0, #5
 8018d6e:	e026      	b.n	8018dbe <__hexnan+0x132>
 8018d70:	3501      	adds	r5, #1
 8018d72:	2d08      	cmp	r5, #8
 8018d74:	f10b 0b01 	add.w	fp, fp, #1
 8018d78:	dd06      	ble.n	8018d88 <__hexnan+0xfc>
 8018d7a:	4544      	cmp	r4, r8
 8018d7c:	d9c3      	bls.n	8018d06 <__hexnan+0x7a>
 8018d7e:	2300      	movs	r3, #0
 8018d80:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d84:	2501      	movs	r5, #1
 8018d86:	3c04      	subs	r4, #4
 8018d88:	6822      	ldr	r2, [r4, #0]
 8018d8a:	f000 000f 	and.w	r0, r0, #15
 8018d8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018d92:	6022      	str	r2, [r4, #0]
 8018d94:	e7b7      	b.n	8018d06 <__hexnan+0x7a>
 8018d96:	2508      	movs	r5, #8
 8018d98:	e7b5      	b.n	8018d06 <__hexnan+0x7a>
 8018d9a:	9b01      	ldr	r3, [sp, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d0df      	beq.n	8018d60 <__hexnan+0xd4>
 8018da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018da4:	f1c3 0320 	rsb	r3, r3, #32
 8018da8:	fa22 f303 	lsr.w	r3, r2, r3
 8018dac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018db0:	401a      	ands	r2, r3
 8018db2:	f846 2c04 	str.w	r2, [r6, #-4]
 8018db6:	e7d3      	b.n	8018d60 <__hexnan+0xd4>
 8018db8:	3f04      	subs	r7, #4
 8018dba:	e7d1      	b.n	8018d60 <__hexnan+0xd4>
 8018dbc:	2004      	movs	r0, #4
 8018dbe:	b007      	add	sp, #28
 8018dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dc4 <_lseek_r>:
 8018dc4:	b538      	push	{r3, r4, r5, lr}
 8018dc6:	4d07      	ldr	r5, [pc, #28]	; (8018de4 <_lseek_r+0x20>)
 8018dc8:	4604      	mov	r4, r0
 8018dca:	4608      	mov	r0, r1
 8018dcc:	4611      	mov	r1, r2
 8018dce:	2200      	movs	r2, #0
 8018dd0:	602a      	str	r2, [r5, #0]
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	f7e8 fdb2 	bl	800193c <_lseek>
 8018dd8:	1c43      	adds	r3, r0, #1
 8018dda:	d102      	bne.n	8018de2 <_lseek_r+0x1e>
 8018ddc:	682b      	ldr	r3, [r5, #0]
 8018dde:	b103      	cbz	r3, 8018de2 <_lseek_r+0x1e>
 8018de0:	6023      	str	r3, [r4, #0]
 8018de2:	bd38      	pop	{r3, r4, r5, pc}
 8018de4:	20011d00 	.word	0x20011d00

08018de8 <malloc>:
 8018de8:	4b02      	ldr	r3, [pc, #8]	; (8018df4 <malloc+0xc>)
 8018dea:	4601      	mov	r1, r0
 8018dec:	6818      	ldr	r0, [r3, #0]
 8018dee:	f7fe bb0b 	b.w	8017408 <_malloc_r>
 8018df2:	bf00      	nop
 8018df4:	2000002c 	.word	0x2000002c

08018df8 <__ascii_mbtowc>:
 8018df8:	b082      	sub	sp, #8
 8018dfa:	b901      	cbnz	r1, 8018dfe <__ascii_mbtowc+0x6>
 8018dfc:	a901      	add	r1, sp, #4
 8018dfe:	b142      	cbz	r2, 8018e12 <__ascii_mbtowc+0x1a>
 8018e00:	b14b      	cbz	r3, 8018e16 <__ascii_mbtowc+0x1e>
 8018e02:	7813      	ldrb	r3, [r2, #0]
 8018e04:	600b      	str	r3, [r1, #0]
 8018e06:	7812      	ldrb	r2, [r2, #0]
 8018e08:	1e10      	subs	r0, r2, #0
 8018e0a:	bf18      	it	ne
 8018e0c:	2001      	movne	r0, #1
 8018e0e:	b002      	add	sp, #8
 8018e10:	4770      	bx	lr
 8018e12:	4610      	mov	r0, r2
 8018e14:	e7fb      	b.n	8018e0e <__ascii_mbtowc+0x16>
 8018e16:	f06f 0001 	mvn.w	r0, #1
 8018e1a:	e7f8      	b.n	8018e0e <__ascii_mbtowc+0x16>

08018e1c <__malloc_lock>:
 8018e1c:	4801      	ldr	r0, [pc, #4]	; (8018e24 <__malloc_lock+0x8>)
 8018e1e:	f7fe ba90 	b.w	8017342 <__retarget_lock_acquire_recursive>
 8018e22:	bf00      	nop
 8018e24:	20011cf4 	.word	0x20011cf4

08018e28 <__malloc_unlock>:
 8018e28:	4801      	ldr	r0, [pc, #4]	; (8018e30 <__malloc_unlock+0x8>)
 8018e2a:	f7fe ba8b 	b.w	8017344 <__retarget_lock_release_recursive>
 8018e2e:	bf00      	nop
 8018e30:	20011cf4 	.word	0x20011cf4

08018e34 <_Balloc>:
 8018e34:	b570      	push	{r4, r5, r6, lr}
 8018e36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e38:	4604      	mov	r4, r0
 8018e3a:	460d      	mov	r5, r1
 8018e3c:	b976      	cbnz	r6, 8018e5c <_Balloc+0x28>
 8018e3e:	2010      	movs	r0, #16
 8018e40:	f7ff ffd2 	bl	8018de8 <malloc>
 8018e44:	4602      	mov	r2, r0
 8018e46:	6260      	str	r0, [r4, #36]	; 0x24
 8018e48:	b920      	cbnz	r0, 8018e54 <_Balloc+0x20>
 8018e4a:	4b18      	ldr	r3, [pc, #96]	; (8018eac <_Balloc+0x78>)
 8018e4c:	4818      	ldr	r0, [pc, #96]	; (8018eb0 <_Balloc+0x7c>)
 8018e4e:	2166      	movs	r1, #102	; 0x66
 8018e50:	f7ff fb46 	bl	80184e0 <__assert_func>
 8018e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e58:	6006      	str	r6, [r0, #0]
 8018e5a:	60c6      	str	r6, [r0, #12]
 8018e5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018e5e:	68f3      	ldr	r3, [r6, #12]
 8018e60:	b183      	cbz	r3, 8018e84 <_Balloc+0x50>
 8018e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e64:	68db      	ldr	r3, [r3, #12]
 8018e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e6a:	b9b8      	cbnz	r0, 8018e9c <_Balloc+0x68>
 8018e6c:	2101      	movs	r1, #1
 8018e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8018e72:	1d72      	adds	r2, r6, #5
 8018e74:	0092      	lsls	r2, r2, #2
 8018e76:	4620      	mov	r0, r4
 8018e78:	f000 fc9d 	bl	80197b6 <_calloc_r>
 8018e7c:	b160      	cbz	r0, 8018e98 <_Balloc+0x64>
 8018e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e82:	e00e      	b.n	8018ea2 <_Balloc+0x6e>
 8018e84:	2221      	movs	r2, #33	; 0x21
 8018e86:	2104      	movs	r1, #4
 8018e88:	4620      	mov	r0, r4
 8018e8a:	f000 fc94 	bl	80197b6 <_calloc_r>
 8018e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e90:	60f0      	str	r0, [r6, #12]
 8018e92:	68db      	ldr	r3, [r3, #12]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d1e4      	bne.n	8018e62 <_Balloc+0x2e>
 8018e98:	2000      	movs	r0, #0
 8018e9a:	bd70      	pop	{r4, r5, r6, pc}
 8018e9c:	6802      	ldr	r2, [r0, #0]
 8018e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ea8:	e7f7      	b.n	8018e9a <_Balloc+0x66>
 8018eaa:	bf00      	nop
 8018eac:	0801da48 	.word	0x0801da48
 8018eb0:	0801dc3c 	.word	0x0801dc3c

08018eb4 <_Bfree>:
 8018eb4:	b570      	push	{r4, r5, r6, lr}
 8018eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018eb8:	4605      	mov	r5, r0
 8018eba:	460c      	mov	r4, r1
 8018ebc:	b976      	cbnz	r6, 8018edc <_Bfree+0x28>
 8018ebe:	2010      	movs	r0, #16
 8018ec0:	f7ff ff92 	bl	8018de8 <malloc>
 8018ec4:	4602      	mov	r2, r0
 8018ec6:	6268      	str	r0, [r5, #36]	; 0x24
 8018ec8:	b920      	cbnz	r0, 8018ed4 <_Bfree+0x20>
 8018eca:	4b09      	ldr	r3, [pc, #36]	; (8018ef0 <_Bfree+0x3c>)
 8018ecc:	4809      	ldr	r0, [pc, #36]	; (8018ef4 <_Bfree+0x40>)
 8018ece:	218a      	movs	r1, #138	; 0x8a
 8018ed0:	f7ff fb06 	bl	80184e0 <__assert_func>
 8018ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ed8:	6006      	str	r6, [r0, #0]
 8018eda:	60c6      	str	r6, [r0, #12]
 8018edc:	b13c      	cbz	r4, 8018eee <_Bfree+0x3a>
 8018ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018ee0:	6862      	ldr	r2, [r4, #4]
 8018ee2:	68db      	ldr	r3, [r3, #12]
 8018ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ee8:	6021      	str	r1, [r4, #0]
 8018eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018eee:	bd70      	pop	{r4, r5, r6, pc}
 8018ef0:	0801da48 	.word	0x0801da48
 8018ef4:	0801dc3c 	.word	0x0801dc3c

08018ef8 <__multadd>:
 8018ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018efc:	690d      	ldr	r5, [r1, #16]
 8018efe:	4607      	mov	r7, r0
 8018f00:	460c      	mov	r4, r1
 8018f02:	461e      	mov	r6, r3
 8018f04:	f101 0c14 	add.w	ip, r1, #20
 8018f08:	2000      	movs	r0, #0
 8018f0a:	f8dc 3000 	ldr.w	r3, [ip]
 8018f0e:	b299      	uxth	r1, r3
 8018f10:	fb02 6101 	mla	r1, r2, r1, r6
 8018f14:	0c1e      	lsrs	r6, r3, #16
 8018f16:	0c0b      	lsrs	r3, r1, #16
 8018f18:	fb02 3306 	mla	r3, r2, r6, r3
 8018f1c:	b289      	uxth	r1, r1
 8018f1e:	3001      	adds	r0, #1
 8018f20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018f24:	4285      	cmp	r5, r0
 8018f26:	f84c 1b04 	str.w	r1, [ip], #4
 8018f2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018f2e:	dcec      	bgt.n	8018f0a <__multadd+0x12>
 8018f30:	b30e      	cbz	r6, 8018f76 <__multadd+0x7e>
 8018f32:	68a3      	ldr	r3, [r4, #8]
 8018f34:	42ab      	cmp	r3, r5
 8018f36:	dc19      	bgt.n	8018f6c <__multadd+0x74>
 8018f38:	6861      	ldr	r1, [r4, #4]
 8018f3a:	4638      	mov	r0, r7
 8018f3c:	3101      	adds	r1, #1
 8018f3e:	f7ff ff79 	bl	8018e34 <_Balloc>
 8018f42:	4680      	mov	r8, r0
 8018f44:	b928      	cbnz	r0, 8018f52 <__multadd+0x5a>
 8018f46:	4602      	mov	r2, r0
 8018f48:	4b0c      	ldr	r3, [pc, #48]	; (8018f7c <__multadd+0x84>)
 8018f4a:	480d      	ldr	r0, [pc, #52]	; (8018f80 <__multadd+0x88>)
 8018f4c:	21b5      	movs	r1, #181	; 0xb5
 8018f4e:	f7ff fac7 	bl	80184e0 <__assert_func>
 8018f52:	6922      	ldr	r2, [r4, #16]
 8018f54:	3202      	adds	r2, #2
 8018f56:	f104 010c 	add.w	r1, r4, #12
 8018f5a:	0092      	lsls	r2, r2, #2
 8018f5c:	300c      	adds	r0, #12
 8018f5e:	f7fe fa02 	bl	8017366 <memcpy>
 8018f62:	4621      	mov	r1, r4
 8018f64:	4638      	mov	r0, r7
 8018f66:	f7ff ffa5 	bl	8018eb4 <_Bfree>
 8018f6a:	4644      	mov	r4, r8
 8018f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f70:	3501      	adds	r5, #1
 8018f72:	615e      	str	r6, [r3, #20]
 8018f74:	6125      	str	r5, [r4, #16]
 8018f76:	4620      	mov	r0, r4
 8018f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f7c:	0801dbb1 	.word	0x0801dbb1
 8018f80:	0801dc3c 	.word	0x0801dc3c

08018f84 <__s2b>:
 8018f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f88:	460c      	mov	r4, r1
 8018f8a:	4615      	mov	r5, r2
 8018f8c:	461f      	mov	r7, r3
 8018f8e:	2209      	movs	r2, #9
 8018f90:	3308      	adds	r3, #8
 8018f92:	4606      	mov	r6, r0
 8018f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f98:	2100      	movs	r1, #0
 8018f9a:	2201      	movs	r2, #1
 8018f9c:	429a      	cmp	r2, r3
 8018f9e:	db09      	blt.n	8018fb4 <__s2b+0x30>
 8018fa0:	4630      	mov	r0, r6
 8018fa2:	f7ff ff47 	bl	8018e34 <_Balloc>
 8018fa6:	b940      	cbnz	r0, 8018fba <__s2b+0x36>
 8018fa8:	4602      	mov	r2, r0
 8018faa:	4b19      	ldr	r3, [pc, #100]	; (8019010 <__s2b+0x8c>)
 8018fac:	4819      	ldr	r0, [pc, #100]	; (8019014 <__s2b+0x90>)
 8018fae:	21ce      	movs	r1, #206	; 0xce
 8018fb0:	f7ff fa96 	bl	80184e0 <__assert_func>
 8018fb4:	0052      	lsls	r2, r2, #1
 8018fb6:	3101      	adds	r1, #1
 8018fb8:	e7f0      	b.n	8018f9c <__s2b+0x18>
 8018fba:	9b08      	ldr	r3, [sp, #32]
 8018fbc:	6143      	str	r3, [r0, #20]
 8018fbe:	2d09      	cmp	r5, #9
 8018fc0:	f04f 0301 	mov.w	r3, #1
 8018fc4:	6103      	str	r3, [r0, #16]
 8018fc6:	dd16      	ble.n	8018ff6 <__s2b+0x72>
 8018fc8:	f104 0909 	add.w	r9, r4, #9
 8018fcc:	46c8      	mov	r8, r9
 8018fce:	442c      	add	r4, r5
 8018fd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018fd4:	4601      	mov	r1, r0
 8018fd6:	3b30      	subs	r3, #48	; 0x30
 8018fd8:	220a      	movs	r2, #10
 8018fda:	4630      	mov	r0, r6
 8018fdc:	f7ff ff8c 	bl	8018ef8 <__multadd>
 8018fe0:	45a0      	cmp	r8, r4
 8018fe2:	d1f5      	bne.n	8018fd0 <__s2b+0x4c>
 8018fe4:	f1a5 0408 	sub.w	r4, r5, #8
 8018fe8:	444c      	add	r4, r9
 8018fea:	1b2d      	subs	r5, r5, r4
 8018fec:	1963      	adds	r3, r4, r5
 8018fee:	42bb      	cmp	r3, r7
 8018ff0:	db04      	blt.n	8018ffc <__s2b+0x78>
 8018ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ff6:	340a      	adds	r4, #10
 8018ff8:	2509      	movs	r5, #9
 8018ffa:	e7f6      	b.n	8018fea <__s2b+0x66>
 8018ffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019000:	4601      	mov	r1, r0
 8019002:	3b30      	subs	r3, #48	; 0x30
 8019004:	220a      	movs	r2, #10
 8019006:	4630      	mov	r0, r6
 8019008:	f7ff ff76 	bl	8018ef8 <__multadd>
 801900c:	e7ee      	b.n	8018fec <__s2b+0x68>
 801900e:	bf00      	nop
 8019010:	0801dbb1 	.word	0x0801dbb1
 8019014:	0801dc3c 	.word	0x0801dc3c

08019018 <__hi0bits>:
 8019018:	0c03      	lsrs	r3, r0, #16
 801901a:	041b      	lsls	r3, r3, #16
 801901c:	b9d3      	cbnz	r3, 8019054 <__hi0bits+0x3c>
 801901e:	0400      	lsls	r0, r0, #16
 8019020:	2310      	movs	r3, #16
 8019022:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019026:	bf04      	itt	eq
 8019028:	0200      	lsleq	r0, r0, #8
 801902a:	3308      	addeq	r3, #8
 801902c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019030:	bf04      	itt	eq
 8019032:	0100      	lsleq	r0, r0, #4
 8019034:	3304      	addeq	r3, #4
 8019036:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801903a:	bf04      	itt	eq
 801903c:	0080      	lsleq	r0, r0, #2
 801903e:	3302      	addeq	r3, #2
 8019040:	2800      	cmp	r0, #0
 8019042:	db05      	blt.n	8019050 <__hi0bits+0x38>
 8019044:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019048:	f103 0301 	add.w	r3, r3, #1
 801904c:	bf08      	it	eq
 801904e:	2320      	moveq	r3, #32
 8019050:	4618      	mov	r0, r3
 8019052:	4770      	bx	lr
 8019054:	2300      	movs	r3, #0
 8019056:	e7e4      	b.n	8019022 <__hi0bits+0xa>

08019058 <__lo0bits>:
 8019058:	6803      	ldr	r3, [r0, #0]
 801905a:	f013 0207 	ands.w	r2, r3, #7
 801905e:	4601      	mov	r1, r0
 8019060:	d00b      	beq.n	801907a <__lo0bits+0x22>
 8019062:	07da      	lsls	r2, r3, #31
 8019064:	d423      	bmi.n	80190ae <__lo0bits+0x56>
 8019066:	0798      	lsls	r0, r3, #30
 8019068:	bf49      	itett	mi
 801906a:	085b      	lsrmi	r3, r3, #1
 801906c:	089b      	lsrpl	r3, r3, #2
 801906e:	2001      	movmi	r0, #1
 8019070:	600b      	strmi	r3, [r1, #0]
 8019072:	bf5c      	itt	pl
 8019074:	600b      	strpl	r3, [r1, #0]
 8019076:	2002      	movpl	r0, #2
 8019078:	4770      	bx	lr
 801907a:	b298      	uxth	r0, r3
 801907c:	b9a8      	cbnz	r0, 80190aa <__lo0bits+0x52>
 801907e:	0c1b      	lsrs	r3, r3, #16
 8019080:	2010      	movs	r0, #16
 8019082:	b2da      	uxtb	r2, r3
 8019084:	b90a      	cbnz	r2, 801908a <__lo0bits+0x32>
 8019086:	3008      	adds	r0, #8
 8019088:	0a1b      	lsrs	r3, r3, #8
 801908a:	071a      	lsls	r2, r3, #28
 801908c:	bf04      	itt	eq
 801908e:	091b      	lsreq	r3, r3, #4
 8019090:	3004      	addeq	r0, #4
 8019092:	079a      	lsls	r2, r3, #30
 8019094:	bf04      	itt	eq
 8019096:	089b      	lsreq	r3, r3, #2
 8019098:	3002      	addeq	r0, #2
 801909a:	07da      	lsls	r2, r3, #31
 801909c:	d403      	bmi.n	80190a6 <__lo0bits+0x4e>
 801909e:	085b      	lsrs	r3, r3, #1
 80190a0:	f100 0001 	add.w	r0, r0, #1
 80190a4:	d005      	beq.n	80190b2 <__lo0bits+0x5a>
 80190a6:	600b      	str	r3, [r1, #0]
 80190a8:	4770      	bx	lr
 80190aa:	4610      	mov	r0, r2
 80190ac:	e7e9      	b.n	8019082 <__lo0bits+0x2a>
 80190ae:	2000      	movs	r0, #0
 80190b0:	4770      	bx	lr
 80190b2:	2020      	movs	r0, #32
 80190b4:	4770      	bx	lr
	...

080190b8 <__i2b>:
 80190b8:	b510      	push	{r4, lr}
 80190ba:	460c      	mov	r4, r1
 80190bc:	2101      	movs	r1, #1
 80190be:	f7ff feb9 	bl	8018e34 <_Balloc>
 80190c2:	4602      	mov	r2, r0
 80190c4:	b928      	cbnz	r0, 80190d2 <__i2b+0x1a>
 80190c6:	4b05      	ldr	r3, [pc, #20]	; (80190dc <__i2b+0x24>)
 80190c8:	4805      	ldr	r0, [pc, #20]	; (80190e0 <__i2b+0x28>)
 80190ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80190ce:	f7ff fa07 	bl	80184e0 <__assert_func>
 80190d2:	2301      	movs	r3, #1
 80190d4:	6144      	str	r4, [r0, #20]
 80190d6:	6103      	str	r3, [r0, #16]
 80190d8:	bd10      	pop	{r4, pc}
 80190da:	bf00      	nop
 80190dc:	0801dbb1 	.word	0x0801dbb1
 80190e0:	0801dc3c 	.word	0x0801dc3c

080190e4 <__multiply>:
 80190e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190e8:	4691      	mov	r9, r2
 80190ea:	690a      	ldr	r2, [r1, #16]
 80190ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80190f0:	429a      	cmp	r2, r3
 80190f2:	bfb8      	it	lt
 80190f4:	460b      	movlt	r3, r1
 80190f6:	460c      	mov	r4, r1
 80190f8:	bfbc      	itt	lt
 80190fa:	464c      	movlt	r4, r9
 80190fc:	4699      	movlt	r9, r3
 80190fe:	6927      	ldr	r7, [r4, #16]
 8019100:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019104:	68a3      	ldr	r3, [r4, #8]
 8019106:	6861      	ldr	r1, [r4, #4]
 8019108:	eb07 060a 	add.w	r6, r7, sl
 801910c:	42b3      	cmp	r3, r6
 801910e:	b085      	sub	sp, #20
 8019110:	bfb8      	it	lt
 8019112:	3101      	addlt	r1, #1
 8019114:	f7ff fe8e 	bl	8018e34 <_Balloc>
 8019118:	b930      	cbnz	r0, 8019128 <__multiply+0x44>
 801911a:	4602      	mov	r2, r0
 801911c:	4b44      	ldr	r3, [pc, #272]	; (8019230 <__multiply+0x14c>)
 801911e:	4845      	ldr	r0, [pc, #276]	; (8019234 <__multiply+0x150>)
 8019120:	f240 115d 	movw	r1, #349	; 0x15d
 8019124:	f7ff f9dc 	bl	80184e0 <__assert_func>
 8019128:	f100 0514 	add.w	r5, r0, #20
 801912c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019130:	462b      	mov	r3, r5
 8019132:	2200      	movs	r2, #0
 8019134:	4543      	cmp	r3, r8
 8019136:	d321      	bcc.n	801917c <__multiply+0x98>
 8019138:	f104 0314 	add.w	r3, r4, #20
 801913c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019140:	f109 0314 	add.w	r3, r9, #20
 8019144:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019148:	9202      	str	r2, [sp, #8]
 801914a:	1b3a      	subs	r2, r7, r4
 801914c:	3a15      	subs	r2, #21
 801914e:	f022 0203 	bic.w	r2, r2, #3
 8019152:	3204      	adds	r2, #4
 8019154:	f104 0115 	add.w	r1, r4, #21
 8019158:	428f      	cmp	r7, r1
 801915a:	bf38      	it	cc
 801915c:	2204      	movcc	r2, #4
 801915e:	9201      	str	r2, [sp, #4]
 8019160:	9a02      	ldr	r2, [sp, #8]
 8019162:	9303      	str	r3, [sp, #12]
 8019164:	429a      	cmp	r2, r3
 8019166:	d80c      	bhi.n	8019182 <__multiply+0x9e>
 8019168:	2e00      	cmp	r6, #0
 801916a:	dd03      	ble.n	8019174 <__multiply+0x90>
 801916c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019170:	2b00      	cmp	r3, #0
 8019172:	d05a      	beq.n	801922a <__multiply+0x146>
 8019174:	6106      	str	r6, [r0, #16]
 8019176:	b005      	add	sp, #20
 8019178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801917c:	f843 2b04 	str.w	r2, [r3], #4
 8019180:	e7d8      	b.n	8019134 <__multiply+0x50>
 8019182:	f8b3 a000 	ldrh.w	sl, [r3]
 8019186:	f1ba 0f00 	cmp.w	sl, #0
 801918a:	d024      	beq.n	80191d6 <__multiply+0xf2>
 801918c:	f104 0e14 	add.w	lr, r4, #20
 8019190:	46a9      	mov	r9, r5
 8019192:	f04f 0c00 	mov.w	ip, #0
 8019196:	f85e 2b04 	ldr.w	r2, [lr], #4
 801919a:	f8d9 1000 	ldr.w	r1, [r9]
 801919e:	fa1f fb82 	uxth.w	fp, r2
 80191a2:	b289      	uxth	r1, r1
 80191a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80191a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80191ac:	f8d9 2000 	ldr.w	r2, [r9]
 80191b0:	4461      	add	r1, ip
 80191b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80191ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80191be:	b289      	uxth	r1, r1
 80191c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80191c4:	4577      	cmp	r7, lr
 80191c6:	f849 1b04 	str.w	r1, [r9], #4
 80191ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191ce:	d8e2      	bhi.n	8019196 <__multiply+0xb2>
 80191d0:	9a01      	ldr	r2, [sp, #4]
 80191d2:	f845 c002 	str.w	ip, [r5, r2]
 80191d6:	9a03      	ldr	r2, [sp, #12]
 80191d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80191dc:	3304      	adds	r3, #4
 80191de:	f1b9 0f00 	cmp.w	r9, #0
 80191e2:	d020      	beq.n	8019226 <__multiply+0x142>
 80191e4:	6829      	ldr	r1, [r5, #0]
 80191e6:	f104 0c14 	add.w	ip, r4, #20
 80191ea:	46ae      	mov	lr, r5
 80191ec:	f04f 0a00 	mov.w	sl, #0
 80191f0:	f8bc b000 	ldrh.w	fp, [ip]
 80191f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80191f8:	fb09 220b 	mla	r2, r9, fp, r2
 80191fc:	4492      	add	sl, r2
 80191fe:	b289      	uxth	r1, r1
 8019200:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019204:	f84e 1b04 	str.w	r1, [lr], #4
 8019208:	f85c 2b04 	ldr.w	r2, [ip], #4
 801920c:	f8be 1000 	ldrh.w	r1, [lr]
 8019210:	0c12      	lsrs	r2, r2, #16
 8019212:	fb09 1102 	mla	r1, r9, r2, r1
 8019216:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801921a:	4567      	cmp	r7, ip
 801921c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019220:	d8e6      	bhi.n	80191f0 <__multiply+0x10c>
 8019222:	9a01      	ldr	r2, [sp, #4]
 8019224:	50a9      	str	r1, [r5, r2]
 8019226:	3504      	adds	r5, #4
 8019228:	e79a      	b.n	8019160 <__multiply+0x7c>
 801922a:	3e01      	subs	r6, #1
 801922c:	e79c      	b.n	8019168 <__multiply+0x84>
 801922e:	bf00      	nop
 8019230:	0801dbb1 	.word	0x0801dbb1
 8019234:	0801dc3c 	.word	0x0801dc3c

08019238 <__pow5mult>:
 8019238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801923c:	4615      	mov	r5, r2
 801923e:	f012 0203 	ands.w	r2, r2, #3
 8019242:	4606      	mov	r6, r0
 8019244:	460f      	mov	r7, r1
 8019246:	d007      	beq.n	8019258 <__pow5mult+0x20>
 8019248:	4c25      	ldr	r4, [pc, #148]	; (80192e0 <__pow5mult+0xa8>)
 801924a:	3a01      	subs	r2, #1
 801924c:	2300      	movs	r3, #0
 801924e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019252:	f7ff fe51 	bl	8018ef8 <__multadd>
 8019256:	4607      	mov	r7, r0
 8019258:	10ad      	asrs	r5, r5, #2
 801925a:	d03d      	beq.n	80192d8 <__pow5mult+0xa0>
 801925c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801925e:	b97c      	cbnz	r4, 8019280 <__pow5mult+0x48>
 8019260:	2010      	movs	r0, #16
 8019262:	f7ff fdc1 	bl	8018de8 <malloc>
 8019266:	4602      	mov	r2, r0
 8019268:	6270      	str	r0, [r6, #36]	; 0x24
 801926a:	b928      	cbnz	r0, 8019278 <__pow5mult+0x40>
 801926c:	4b1d      	ldr	r3, [pc, #116]	; (80192e4 <__pow5mult+0xac>)
 801926e:	481e      	ldr	r0, [pc, #120]	; (80192e8 <__pow5mult+0xb0>)
 8019270:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019274:	f7ff f934 	bl	80184e0 <__assert_func>
 8019278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801927c:	6004      	str	r4, [r0, #0]
 801927e:	60c4      	str	r4, [r0, #12]
 8019280:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019288:	b94c      	cbnz	r4, 801929e <__pow5mult+0x66>
 801928a:	f240 2171 	movw	r1, #625	; 0x271
 801928e:	4630      	mov	r0, r6
 8019290:	f7ff ff12 	bl	80190b8 <__i2b>
 8019294:	2300      	movs	r3, #0
 8019296:	f8c8 0008 	str.w	r0, [r8, #8]
 801929a:	4604      	mov	r4, r0
 801929c:	6003      	str	r3, [r0, #0]
 801929e:	f04f 0900 	mov.w	r9, #0
 80192a2:	07eb      	lsls	r3, r5, #31
 80192a4:	d50a      	bpl.n	80192bc <__pow5mult+0x84>
 80192a6:	4639      	mov	r1, r7
 80192a8:	4622      	mov	r2, r4
 80192aa:	4630      	mov	r0, r6
 80192ac:	f7ff ff1a 	bl	80190e4 <__multiply>
 80192b0:	4639      	mov	r1, r7
 80192b2:	4680      	mov	r8, r0
 80192b4:	4630      	mov	r0, r6
 80192b6:	f7ff fdfd 	bl	8018eb4 <_Bfree>
 80192ba:	4647      	mov	r7, r8
 80192bc:	106d      	asrs	r5, r5, #1
 80192be:	d00b      	beq.n	80192d8 <__pow5mult+0xa0>
 80192c0:	6820      	ldr	r0, [r4, #0]
 80192c2:	b938      	cbnz	r0, 80192d4 <__pow5mult+0x9c>
 80192c4:	4622      	mov	r2, r4
 80192c6:	4621      	mov	r1, r4
 80192c8:	4630      	mov	r0, r6
 80192ca:	f7ff ff0b 	bl	80190e4 <__multiply>
 80192ce:	6020      	str	r0, [r4, #0]
 80192d0:	f8c0 9000 	str.w	r9, [r0]
 80192d4:	4604      	mov	r4, r0
 80192d6:	e7e4      	b.n	80192a2 <__pow5mult+0x6a>
 80192d8:	4638      	mov	r0, r7
 80192da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192de:	bf00      	nop
 80192e0:	0801dd88 	.word	0x0801dd88
 80192e4:	0801da48 	.word	0x0801da48
 80192e8:	0801dc3c 	.word	0x0801dc3c

080192ec <__lshift>:
 80192ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192f0:	460c      	mov	r4, r1
 80192f2:	6849      	ldr	r1, [r1, #4]
 80192f4:	6923      	ldr	r3, [r4, #16]
 80192f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80192fa:	68a3      	ldr	r3, [r4, #8]
 80192fc:	4607      	mov	r7, r0
 80192fe:	4691      	mov	r9, r2
 8019300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019304:	f108 0601 	add.w	r6, r8, #1
 8019308:	42b3      	cmp	r3, r6
 801930a:	db0b      	blt.n	8019324 <__lshift+0x38>
 801930c:	4638      	mov	r0, r7
 801930e:	f7ff fd91 	bl	8018e34 <_Balloc>
 8019312:	4605      	mov	r5, r0
 8019314:	b948      	cbnz	r0, 801932a <__lshift+0x3e>
 8019316:	4602      	mov	r2, r0
 8019318:	4b2a      	ldr	r3, [pc, #168]	; (80193c4 <__lshift+0xd8>)
 801931a:	482b      	ldr	r0, [pc, #172]	; (80193c8 <__lshift+0xdc>)
 801931c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019320:	f7ff f8de 	bl	80184e0 <__assert_func>
 8019324:	3101      	adds	r1, #1
 8019326:	005b      	lsls	r3, r3, #1
 8019328:	e7ee      	b.n	8019308 <__lshift+0x1c>
 801932a:	2300      	movs	r3, #0
 801932c:	f100 0114 	add.w	r1, r0, #20
 8019330:	f100 0210 	add.w	r2, r0, #16
 8019334:	4618      	mov	r0, r3
 8019336:	4553      	cmp	r3, sl
 8019338:	db37      	blt.n	80193aa <__lshift+0xbe>
 801933a:	6920      	ldr	r0, [r4, #16]
 801933c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019340:	f104 0314 	add.w	r3, r4, #20
 8019344:	f019 091f 	ands.w	r9, r9, #31
 8019348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801934c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019350:	d02f      	beq.n	80193b2 <__lshift+0xc6>
 8019352:	f1c9 0e20 	rsb	lr, r9, #32
 8019356:	468a      	mov	sl, r1
 8019358:	f04f 0c00 	mov.w	ip, #0
 801935c:	681a      	ldr	r2, [r3, #0]
 801935e:	fa02 f209 	lsl.w	r2, r2, r9
 8019362:	ea42 020c 	orr.w	r2, r2, ip
 8019366:	f84a 2b04 	str.w	r2, [sl], #4
 801936a:	f853 2b04 	ldr.w	r2, [r3], #4
 801936e:	4298      	cmp	r0, r3
 8019370:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019374:	d8f2      	bhi.n	801935c <__lshift+0x70>
 8019376:	1b03      	subs	r3, r0, r4
 8019378:	3b15      	subs	r3, #21
 801937a:	f023 0303 	bic.w	r3, r3, #3
 801937e:	3304      	adds	r3, #4
 8019380:	f104 0215 	add.w	r2, r4, #21
 8019384:	4290      	cmp	r0, r2
 8019386:	bf38      	it	cc
 8019388:	2304      	movcc	r3, #4
 801938a:	f841 c003 	str.w	ip, [r1, r3]
 801938e:	f1bc 0f00 	cmp.w	ip, #0
 8019392:	d001      	beq.n	8019398 <__lshift+0xac>
 8019394:	f108 0602 	add.w	r6, r8, #2
 8019398:	3e01      	subs	r6, #1
 801939a:	4638      	mov	r0, r7
 801939c:	612e      	str	r6, [r5, #16]
 801939e:	4621      	mov	r1, r4
 80193a0:	f7ff fd88 	bl	8018eb4 <_Bfree>
 80193a4:	4628      	mov	r0, r5
 80193a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80193ae:	3301      	adds	r3, #1
 80193b0:	e7c1      	b.n	8019336 <__lshift+0x4a>
 80193b2:	3904      	subs	r1, #4
 80193b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80193b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80193bc:	4298      	cmp	r0, r3
 80193be:	d8f9      	bhi.n	80193b4 <__lshift+0xc8>
 80193c0:	e7ea      	b.n	8019398 <__lshift+0xac>
 80193c2:	bf00      	nop
 80193c4:	0801dbb1 	.word	0x0801dbb1
 80193c8:	0801dc3c 	.word	0x0801dc3c

080193cc <__mcmp>:
 80193cc:	b530      	push	{r4, r5, lr}
 80193ce:	6902      	ldr	r2, [r0, #16]
 80193d0:	690c      	ldr	r4, [r1, #16]
 80193d2:	1b12      	subs	r2, r2, r4
 80193d4:	d10e      	bne.n	80193f4 <__mcmp+0x28>
 80193d6:	f100 0314 	add.w	r3, r0, #20
 80193da:	3114      	adds	r1, #20
 80193dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80193e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80193e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80193e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80193ec:	42a5      	cmp	r5, r4
 80193ee:	d003      	beq.n	80193f8 <__mcmp+0x2c>
 80193f0:	d305      	bcc.n	80193fe <__mcmp+0x32>
 80193f2:	2201      	movs	r2, #1
 80193f4:	4610      	mov	r0, r2
 80193f6:	bd30      	pop	{r4, r5, pc}
 80193f8:	4283      	cmp	r3, r0
 80193fa:	d3f3      	bcc.n	80193e4 <__mcmp+0x18>
 80193fc:	e7fa      	b.n	80193f4 <__mcmp+0x28>
 80193fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019402:	e7f7      	b.n	80193f4 <__mcmp+0x28>

08019404 <__mdiff>:
 8019404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019408:	460c      	mov	r4, r1
 801940a:	4606      	mov	r6, r0
 801940c:	4611      	mov	r1, r2
 801940e:	4620      	mov	r0, r4
 8019410:	4690      	mov	r8, r2
 8019412:	f7ff ffdb 	bl	80193cc <__mcmp>
 8019416:	1e05      	subs	r5, r0, #0
 8019418:	d110      	bne.n	801943c <__mdiff+0x38>
 801941a:	4629      	mov	r1, r5
 801941c:	4630      	mov	r0, r6
 801941e:	f7ff fd09 	bl	8018e34 <_Balloc>
 8019422:	b930      	cbnz	r0, 8019432 <__mdiff+0x2e>
 8019424:	4b3a      	ldr	r3, [pc, #232]	; (8019510 <__mdiff+0x10c>)
 8019426:	4602      	mov	r2, r0
 8019428:	f240 2132 	movw	r1, #562	; 0x232
 801942c:	4839      	ldr	r0, [pc, #228]	; (8019514 <__mdiff+0x110>)
 801942e:	f7ff f857 	bl	80184e0 <__assert_func>
 8019432:	2301      	movs	r3, #1
 8019434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943c:	bfa4      	itt	ge
 801943e:	4643      	movge	r3, r8
 8019440:	46a0      	movge	r8, r4
 8019442:	4630      	mov	r0, r6
 8019444:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019448:	bfa6      	itte	ge
 801944a:	461c      	movge	r4, r3
 801944c:	2500      	movge	r5, #0
 801944e:	2501      	movlt	r5, #1
 8019450:	f7ff fcf0 	bl	8018e34 <_Balloc>
 8019454:	b920      	cbnz	r0, 8019460 <__mdiff+0x5c>
 8019456:	4b2e      	ldr	r3, [pc, #184]	; (8019510 <__mdiff+0x10c>)
 8019458:	4602      	mov	r2, r0
 801945a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801945e:	e7e5      	b.n	801942c <__mdiff+0x28>
 8019460:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019464:	6926      	ldr	r6, [r4, #16]
 8019466:	60c5      	str	r5, [r0, #12]
 8019468:	f104 0914 	add.w	r9, r4, #20
 801946c:	f108 0514 	add.w	r5, r8, #20
 8019470:	f100 0e14 	add.w	lr, r0, #20
 8019474:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019478:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801947c:	f108 0210 	add.w	r2, r8, #16
 8019480:	46f2      	mov	sl, lr
 8019482:	2100      	movs	r1, #0
 8019484:	f859 3b04 	ldr.w	r3, [r9], #4
 8019488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801948c:	fa1f f883 	uxth.w	r8, r3
 8019490:	fa11 f18b 	uxtah	r1, r1, fp
 8019494:	0c1b      	lsrs	r3, r3, #16
 8019496:	eba1 0808 	sub.w	r8, r1, r8
 801949a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801949e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80194a2:	fa1f f888 	uxth.w	r8, r8
 80194a6:	1419      	asrs	r1, r3, #16
 80194a8:	454e      	cmp	r6, r9
 80194aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80194ae:	f84a 3b04 	str.w	r3, [sl], #4
 80194b2:	d8e7      	bhi.n	8019484 <__mdiff+0x80>
 80194b4:	1b33      	subs	r3, r6, r4
 80194b6:	3b15      	subs	r3, #21
 80194b8:	f023 0303 	bic.w	r3, r3, #3
 80194bc:	3304      	adds	r3, #4
 80194be:	3415      	adds	r4, #21
 80194c0:	42a6      	cmp	r6, r4
 80194c2:	bf38      	it	cc
 80194c4:	2304      	movcc	r3, #4
 80194c6:	441d      	add	r5, r3
 80194c8:	4473      	add	r3, lr
 80194ca:	469e      	mov	lr, r3
 80194cc:	462e      	mov	r6, r5
 80194ce:	4566      	cmp	r6, ip
 80194d0:	d30e      	bcc.n	80194f0 <__mdiff+0xec>
 80194d2:	f10c 0203 	add.w	r2, ip, #3
 80194d6:	1b52      	subs	r2, r2, r5
 80194d8:	f022 0203 	bic.w	r2, r2, #3
 80194dc:	3d03      	subs	r5, #3
 80194de:	45ac      	cmp	ip, r5
 80194e0:	bf38      	it	cc
 80194e2:	2200      	movcc	r2, #0
 80194e4:	441a      	add	r2, r3
 80194e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80194ea:	b17b      	cbz	r3, 801950c <__mdiff+0x108>
 80194ec:	6107      	str	r7, [r0, #16]
 80194ee:	e7a3      	b.n	8019438 <__mdiff+0x34>
 80194f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80194f4:	fa11 f288 	uxtah	r2, r1, r8
 80194f8:	1414      	asrs	r4, r2, #16
 80194fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80194fe:	b292      	uxth	r2, r2
 8019500:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019504:	f84e 2b04 	str.w	r2, [lr], #4
 8019508:	1421      	asrs	r1, r4, #16
 801950a:	e7e0      	b.n	80194ce <__mdiff+0xca>
 801950c:	3f01      	subs	r7, #1
 801950e:	e7ea      	b.n	80194e6 <__mdiff+0xe2>
 8019510:	0801dbb1 	.word	0x0801dbb1
 8019514:	0801dc3c 	.word	0x0801dc3c

08019518 <__ulp>:
 8019518:	b082      	sub	sp, #8
 801951a:	ed8d 0b00 	vstr	d0, [sp]
 801951e:	9b01      	ldr	r3, [sp, #4]
 8019520:	4912      	ldr	r1, [pc, #72]	; (801956c <__ulp+0x54>)
 8019522:	4019      	ands	r1, r3
 8019524:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019528:	2900      	cmp	r1, #0
 801952a:	dd05      	ble.n	8019538 <__ulp+0x20>
 801952c:	2200      	movs	r2, #0
 801952e:	460b      	mov	r3, r1
 8019530:	ec43 2b10 	vmov	d0, r2, r3
 8019534:	b002      	add	sp, #8
 8019536:	4770      	bx	lr
 8019538:	4249      	negs	r1, r1
 801953a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801953e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019542:	f04f 0200 	mov.w	r2, #0
 8019546:	f04f 0300 	mov.w	r3, #0
 801954a:	da04      	bge.n	8019556 <__ulp+0x3e>
 801954c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019550:	fa41 f300 	asr.w	r3, r1, r0
 8019554:	e7ec      	b.n	8019530 <__ulp+0x18>
 8019556:	f1a0 0114 	sub.w	r1, r0, #20
 801955a:	291e      	cmp	r1, #30
 801955c:	bfda      	itte	le
 801955e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019562:	fa20 f101 	lsrle.w	r1, r0, r1
 8019566:	2101      	movgt	r1, #1
 8019568:	460a      	mov	r2, r1
 801956a:	e7e1      	b.n	8019530 <__ulp+0x18>
 801956c:	7ff00000 	.word	0x7ff00000

08019570 <__b2d>:
 8019570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019572:	6905      	ldr	r5, [r0, #16]
 8019574:	f100 0714 	add.w	r7, r0, #20
 8019578:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801957c:	1f2e      	subs	r6, r5, #4
 801957e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019582:	4620      	mov	r0, r4
 8019584:	f7ff fd48 	bl	8019018 <__hi0bits>
 8019588:	f1c0 0320 	rsb	r3, r0, #32
 801958c:	280a      	cmp	r0, #10
 801958e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801960c <__b2d+0x9c>
 8019592:	600b      	str	r3, [r1, #0]
 8019594:	dc14      	bgt.n	80195c0 <__b2d+0x50>
 8019596:	f1c0 0e0b 	rsb	lr, r0, #11
 801959a:	fa24 f10e 	lsr.w	r1, r4, lr
 801959e:	42b7      	cmp	r7, r6
 80195a0:	ea41 030c 	orr.w	r3, r1, ip
 80195a4:	bf34      	ite	cc
 80195a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80195aa:	2100      	movcs	r1, #0
 80195ac:	3015      	adds	r0, #21
 80195ae:	fa04 f000 	lsl.w	r0, r4, r0
 80195b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80195b6:	ea40 0201 	orr.w	r2, r0, r1
 80195ba:	ec43 2b10 	vmov	d0, r2, r3
 80195be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195c0:	42b7      	cmp	r7, r6
 80195c2:	bf3a      	itte	cc
 80195c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80195c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80195cc:	2100      	movcs	r1, #0
 80195ce:	380b      	subs	r0, #11
 80195d0:	d017      	beq.n	8019602 <__b2d+0x92>
 80195d2:	f1c0 0c20 	rsb	ip, r0, #32
 80195d6:	fa04 f500 	lsl.w	r5, r4, r0
 80195da:	42be      	cmp	r6, r7
 80195dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80195e0:	ea45 0504 	orr.w	r5, r5, r4
 80195e4:	bf8c      	ite	hi
 80195e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80195ea:	2400      	movls	r4, #0
 80195ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80195f0:	fa01 f000 	lsl.w	r0, r1, r0
 80195f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80195f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80195fc:	ea40 0204 	orr.w	r2, r0, r4
 8019600:	e7db      	b.n	80195ba <__b2d+0x4a>
 8019602:	ea44 030c 	orr.w	r3, r4, ip
 8019606:	460a      	mov	r2, r1
 8019608:	e7d7      	b.n	80195ba <__b2d+0x4a>
 801960a:	bf00      	nop
 801960c:	3ff00000 	.word	0x3ff00000

08019610 <__d2b>:
 8019610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019614:	4689      	mov	r9, r1
 8019616:	2101      	movs	r1, #1
 8019618:	ec57 6b10 	vmov	r6, r7, d0
 801961c:	4690      	mov	r8, r2
 801961e:	f7ff fc09 	bl	8018e34 <_Balloc>
 8019622:	4604      	mov	r4, r0
 8019624:	b930      	cbnz	r0, 8019634 <__d2b+0x24>
 8019626:	4602      	mov	r2, r0
 8019628:	4b25      	ldr	r3, [pc, #148]	; (80196c0 <__d2b+0xb0>)
 801962a:	4826      	ldr	r0, [pc, #152]	; (80196c4 <__d2b+0xb4>)
 801962c:	f240 310a 	movw	r1, #778	; 0x30a
 8019630:	f7fe ff56 	bl	80184e0 <__assert_func>
 8019634:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801963c:	bb35      	cbnz	r5, 801968c <__d2b+0x7c>
 801963e:	2e00      	cmp	r6, #0
 8019640:	9301      	str	r3, [sp, #4]
 8019642:	d028      	beq.n	8019696 <__d2b+0x86>
 8019644:	4668      	mov	r0, sp
 8019646:	9600      	str	r6, [sp, #0]
 8019648:	f7ff fd06 	bl	8019058 <__lo0bits>
 801964c:	9900      	ldr	r1, [sp, #0]
 801964e:	b300      	cbz	r0, 8019692 <__d2b+0x82>
 8019650:	9a01      	ldr	r2, [sp, #4]
 8019652:	f1c0 0320 	rsb	r3, r0, #32
 8019656:	fa02 f303 	lsl.w	r3, r2, r3
 801965a:	430b      	orrs	r3, r1
 801965c:	40c2      	lsrs	r2, r0
 801965e:	6163      	str	r3, [r4, #20]
 8019660:	9201      	str	r2, [sp, #4]
 8019662:	9b01      	ldr	r3, [sp, #4]
 8019664:	61a3      	str	r3, [r4, #24]
 8019666:	2b00      	cmp	r3, #0
 8019668:	bf14      	ite	ne
 801966a:	2202      	movne	r2, #2
 801966c:	2201      	moveq	r2, #1
 801966e:	6122      	str	r2, [r4, #16]
 8019670:	b1d5      	cbz	r5, 80196a8 <__d2b+0x98>
 8019672:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019676:	4405      	add	r5, r0
 8019678:	f8c9 5000 	str.w	r5, [r9]
 801967c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019680:	f8c8 0000 	str.w	r0, [r8]
 8019684:	4620      	mov	r0, r4
 8019686:	b003      	add	sp, #12
 8019688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801968c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019690:	e7d5      	b.n	801963e <__d2b+0x2e>
 8019692:	6161      	str	r1, [r4, #20]
 8019694:	e7e5      	b.n	8019662 <__d2b+0x52>
 8019696:	a801      	add	r0, sp, #4
 8019698:	f7ff fcde 	bl	8019058 <__lo0bits>
 801969c:	9b01      	ldr	r3, [sp, #4]
 801969e:	6163      	str	r3, [r4, #20]
 80196a0:	2201      	movs	r2, #1
 80196a2:	6122      	str	r2, [r4, #16]
 80196a4:	3020      	adds	r0, #32
 80196a6:	e7e3      	b.n	8019670 <__d2b+0x60>
 80196a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80196ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80196b0:	f8c9 0000 	str.w	r0, [r9]
 80196b4:	6918      	ldr	r0, [r3, #16]
 80196b6:	f7ff fcaf 	bl	8019018 <__hi0bits>
 80196ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80196be:	e7df      	b.n	8019680 <__d2b+0x70>
 80196c0:	0801dbb1 	.word	0x0801dbb1
 80196c4:	0801dc3c 	.word	0x0801dc3c

080196c8 <__ratio>:
 80196c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196cc:	4688      	mov	r8, r1
 80196ce:	4669      	mov	r1, sp
 80196d0:	4681      	mov	r9, r0
 80196d2:	f7ff ff4d 	bl	8019570 <__b2d>
 80196d6:	a901      	add	r1, sp, #4
 80196d8:	4640      	mov	r0, r8
 80196da:	ec55 4b10 	vmov	r4, r5, d0
 80196de:	f7ff ff47 	bl	8019570 <__b2d>
 80196e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80196e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80196ea:	eba3 0c02 	sub.w	ip, r3, r2
 80196ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80196f2:	1a9b      	subs	r3, r3, r2
 80196f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80196f8:	ec51 0b10 	vmov	r0, r1, d0
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	bfd6      	itet	le
 8019700:	460a      	movle	r2, r1
 8019702:	462a      	movgt	r2, r5
 8019704:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019708:	468b      	mov	fp, r1
 801970a:	462f      	mov	r7, r5
 801970c:	bfd4      	ite	le
 801970e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019712:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019716:	4620      	mov	r0, r4
 8019718:	ee10 2a10 	vmov	r2, s0
 801971c:	465b      	mov	r3, fp
 801971e:	4639      	mov	r1, r7
 8019720:	f7e7 f8b4 	bl	800088c <__aeabi_ddiv>
 8019724:	ec41 0b10 	vmov	d0, r0, r1
 8019728:	b003      	add	sp, #12
 801972a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801972e <__copybits>:
 801972e:	3901      	subs	r1, #1
 8019730:	b570      	push	{r4, r5, r6, lr}
 8019732:	1149      	asrs	r1, r1, #5
 8019734:	6914      	ldr	r4, [r2, #16]
 8019736:	3101      	adds	r1, #1
 8019738:	f102 0314 	add.w	r3, r2, #20
 801973c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019740:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019744:	1f05      	subs	r5, r0, #4
 8019746:	42a3      	cmp	r3, r4
 8019748:	d30c      	bcc.n	8019764 <__copybits+0x36>
 801974a:	1aa3      	subs	r3, r4, r2
 801974c:	3b11      	subs	r3, #17
 801974e:	f023 0303 	bic.w	r3, r3, #3
 8019752:	3211      	adds	r2, #17
 8019754:	42a2      	cmp	r2, r4
 8019756:	bf88      	it	hi
 8019758:	2300      	movhi	r3, #0
 801975a:	4418      	add	r0, r3
 801975c:	2300      	movs	r3, #0
 801975e:	4288      	cmp	r0, r1
 8019760:	d305      	bcc.n	801976e <__copybits+0x40>
 8019762:	bd70      	pop	{r4, r5, r6, pc}
 8019764:	f853 6b04 	ldr.w	r6, [r3], #4
 8019768:	f845 6f04 	str.w	r6, [r5, #4]!
 801976c:	e7eb      	b.n	8019746 <__copybits+0x18>
 801976e:	f840 3b04 	str.w	r3, [r0], #4
 8019772:	e7f4      	b.n	801975e <__copybits+0x30>

08019774 <__any_on>:
 8019774:	f100 0214 	add.w	r2, r0, #20
 8019778:	6900      	ldr	r0, [r0, #16]
 801977a:	114b      	asrs	r3, r1, #5
 801977c:	4298      	cmp	r0, r3
 801977e:	b510      	push	{r4, lr}
 8019780:	db11      	blt.n	80197a6 <__any_on+0x32>
 8019782:	dd0a      	ble.n	801979a <__any_on+0x26>
 8019784:	f011 011f 	ands.w	r1, r1, #31
 8019788:	d007      	beq.n	801979a <__any_on+0x26>
 801978a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801978e:	fa24 f001 	lsr.w	r0, r4, r1
 8019792:	fa00 f101 	lsl.w	r1, r0, r1
 8019796:	428c      	cmp	r4, r1
 8019798:	d10b      	bne.n	80197b2 <__any_on+0x3e>
 801979a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801979e:	4293      	cmp	r3, r2
 80197a0:	d803      	bhi.n	80197aa <__any_on+0x36>
 80197a2:	2000      	movs	r0, #0
 80197a4:	bd10      	pop	{r4, pc}
 80197a6:	4603      	mov	r3, r0
 80197a8:	e7f7      	b.n	801979a <__any_on+0x26>
 80197aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80197ae:	2900      	cmp	r1, #0
 80197b0:	d0f5      	beq.n	801979e <__any_on+0x2a>
 80197b2:	2001      	movs	r0, #1
 80197b4:	e7f6      	b.n	80197a4 <__any_on+0x30>

080197b6 <_calloc_r>:
 80197b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197b8:	fba1 2402 	umull	r2, r4, r1, r2
 80197bc:	b94c      	cbnz	r4, 80197d2 <_calloc_r+0x1c>
 80197be:	4611      	mov	r1, r2
 80197c0:	9201      	str	r2, [sp, #4]
 80197c2:	f7fd fe21 	bl	8017408 <_malloc_r>
 80197c6:	9a01      	ldr	r2, [sp, #4]
 80197c8:	4605      	mov	r5, r0
 80197ca:	b930      	cbnz	r0, 80197da <_calloc_r+0x24>
 80197cc:	4628      	mov	r0, r5
 80197ce:	b003      	add	sp, #12
 80197d0:	bd30      	pop	{r4, r5, pc}
 80197d2:	220c      	movs	r2, #12
 80197d4:	6002      	str	r2, [r0, #0]
 80197d6:	2500      	movs	r5, #0
 80197d8:	e7f8      	b.n	80197cc <_calloc_r+0x16>
 80197da:	4621      	mov	r1, r4
 80197dc:	f7fd fdeb 	bl	80173b6 <memset>
 80197e0:	e7f4      	b.n	80197cc <_calloc_r+0x16>
	...

080197e4 <_free_r>:
 80197e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197e6:	2900      	cmp	r1, #0
 80197e8:	d044      	beq.n	8019874 <_free_r+0x90>
 80197ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80197ee:	9001      	str	r0, [sp, #4]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f1a1 0404 	sub.w	r4, r1, #4
 80197f6:	bfb8      	it	lt
 80197f8:	18e4      	addlt	r4, r4, r3
 80197fa:	f7ff fb0f 	bl	8018e1c <__malloc_lock>
 80197fe:	4a1e      	ldr	r2, [pc, #120]	; (8019878 <_free_r+0x94>)
 8019800:	9801      	ldr	r0, [sp, #4]
 8019802:	6813      	ldr	r3, [r2, #0]
 8019804:	b933      	cbnz	r3, 8019814 <_free_r+0x30>
 8019806:	6063      	str	r3, [r4, #4]
 8019808:	6014      	str	r4, [r2, #0]
 801980a:	b003      	add	sp, #12
 801980c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019810:	f7ff bb0a 	b.w	8018e28 <__malloc_unlock>
 8019814:	42a3      	cmp	r3, r4
 8019816:	d908      	bls.n	801982a <_free_r+0x46>
 8019818:	6825      	ldr	r5, [r4, #0]
 801981a:	1961      	adds	r1, r4, r5
 801981c:	428b      	cmp	r3, r1
 801981e:	bf01      	itttt	eq
 8019820:	6819      	ldreq	r1, [r3, #0]
 8019822:	685b      	ldreq	r3, [r3, #4]
 8019824:	1949      	addeq	r1, r1, r5
 8019826:	6021      	streq	r1, [r4, #0]
 8019828:	e7ed      	b.n	8019806 <_free_r+0x22>
 801982a:	461a      	mov	r2, r3
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	b10b      	cbz	r3, 8019834 <_free_r+0x50>
 8019830:	42a3      	cmp	r3, r4
 8019832:	d9fa      	bls.n	801982a <_free_r+0x46>
 8019834:	6811      	ldr	r1, [r2, #0]
 8019836:	1855      	adds	r5, r2, r1
 8019838:	42a5      	cmp	r5, r4
 801983a:	d10b      	bne.n	8019854 <_free_r+0x70>
 801983c:	6824      	ldr	r4, [r4, #0]
 801983e:	4421      	add	r1, r4
 8019840:	1854      	adds	r4, r2, r1
 8019842:	42a3      	cmp	r3, r4
 8019844:	6011      	str	r1, [r2, #0]
 8019846:	d1e0      	bne.n	801980a <_free_r+0x26>
 8019848:	681c      	ldr	r4, [r3, #0]
 801984a:	685b      	ldr	r3, [r3, #4]
 801984c:	6053      	str	r3, [r2, #4]
 801984e:	4421      	add	r1, r4
 8019850:	6011      	str	r1, [r2, #0]
 8019852:	e7da      	b.n	801980a <_free_r+0x26>
 8019854:	d902      	bls.n	801985c <_free_r+0x78>
 8019856:	230c      	movs	r3, #12
 8019858:	6003      	str	r3, [r0, #0]
 801985a:	e7d6      	b.n	801980a <_free_r+0x26>
 801985c:	6825      	ldr	r5, [r4, #0]
 801985e:	1961      	adds	r1, r4, r5
 8019860:	428b      	cmp	r3, r1
 8019862:	bf04      	itt	eq
 8019864:	6819      	ldreq	r1, [r3, #0]
 8019866:	685b      	ldreq	r3, [r3, #4]
 8019868:	6063      	str	r3, [r4, #4]
 801986a:	bf04      	itt	eq
 801986c:	1949      	addeq	r1, r1, r5
 801986e:	6021      	streq	r1, [r4, #0]
 8019870:	6054      	str	r4, [r2, #4]
 8019872:	e7ca      	b.n	801980a <_free_r+0x26>
 8019874:	b003      	add	sp, #12
 8019876:	bd30      	pop	{r4, r5, pc}
 8019878:	20011cf8 	.word	0x20011cf8

0801987c <__ssputs_r>:
 801987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019880:	688e      	ldr	r6, [r1, #8]
 8019882:	429e      	cmp	r6, r3
 8019884:	4682      	mov	sl, r0
 8019886:	460c      	mov	r4, r1
 8019888:	4690      	mov	r8, r2
 801988a:	461f      	mov	r7, r3
 801988c:	d838      	bhi.n	8019900 <__ssputs_r+0x84>
 801988e:	898a      	ldrh	r2, [r1, #12]
 8019890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019894:	d032      	beq.n	80198fc <__ssputs_r+0x80>
 8019896:	6825      	ldr	r5, [r4, #0]
 8019898:	6909      	ldr	r1, [r1, #16]
 801989a:	eba5 0901 	sub.w	r9, r5, r1
 801989e:	6965      	ldr	r5, [r4, #20]
 80198a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80198a8:	3301      	adds	r3, #1
 80198aa:	444b      	add	r3, r9
 80198ac:	106d      	asrs	r5, r5, #1
 80198ae:	429d      	cmp	r5, r3
 80198b0:	bf38      	it	cc
 80198b2:	461d      	movcc	r5, r3
 80198b4:	0553      	lsls	r3, r2, #21
 80198b6:	d531      	bpl.n	801991c <__ssputs_r+0xa0>
 80198b8:	4629      	mov	r1, r5
 80198ba:	f7fd fda5 	bl	8017408 <_malloc_r>
 80198be:	4606      	mov	r6, r0
 80198c0:	b950      	cbnz	r0, 80198d8 <__ssputs_r+0x5c>
 80198c2:	230c      	movs	r3, #12
 80198c4:	f8ca 3000 	str.w	r3, [sl]
 80198c8:	89a3      	ldrh	r3, [r4, #12]
 80198ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198ce:	81a3      	strh	r3, [r4, #12]
 80198d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80198d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198d8:	6921      	ldr	r1, [r4, #16]
 80198da:	464a      	mov	r2, r9
 80198dc:	f7fd fd43 	bl	8017366 <memcpy>
 80198e0:	89a3      	ldrh	r3, [r4, #12]
 80198e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80198e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198ea:	81a3      	strh	r3, [r4, #12]
 80198ec:	6126      	str	r6, [r4, #16]
 80198ee:	6165      	str	r5, [r4, #20]
 80198f0:	444e      	add	r6, r9
 80198f2:	eba5 0509 	sub.w	r5, r5, r9
 80198f6:	6026      	str	r6, [r4, #0]
 80198f8:	60a5      	str	r5, [r4, #8]
 80198fa:	463e      	mov	r6, r7
 80198fc:	42be      	cmp	r6, r7
 80198fe:	d900      	bls.n	8019902 <__ssputs_r+0x86>
 8019900:	463e      	mov	r6, r7
 8019902:	6820      	ldr	r0, [r4, #0]
 8019904:	4632      	mov	r2, r6
 8019906:	4641      	mov	r1, r8
 8019908:	f7fd fd3b 	bl	8017382 <memmove>
 801990c:	68a3      	ldr	r3, [r4, #8]
 801990e:	1b9b      	subs	r3, r3, r6
 8019910:	60a3      	str	r3, [r4, #8]
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	4433      	add	r3, r6
 8019916:	6023      	str	r3, [r4, #0]
 8019918:	2000      	movs	r0, #0
 801991a:	e7db      	b.n	80198d4 <__ssputs_r+0x58>
 801991c:	462a      	mov	r2, r5
 801991e:	f000 fd4d 	bl	801a3bc <_realloc_r>
 8019922:	4606      	mov	r6, r0
 8019924:	2800      	cmp	r0, #0
 8019926:	d1e1      	bne.n	80198ec <__ssputs_r+0x70>
 8019928:	6921      	ldr	r1, [r4, #16]
 801992a:	4650      	mov	r0, sl
 801992c:	f7ff ff5a 	bl	80197e4 <_free_r>
 8019930:	e7c7      	b.n	80198c2 <__ssputs_r+0x46>
	...

08019934 <_svfiprintf_r>:
 8019934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019938:	4698      	mov	r8, r3
 801993a:	898b      	ldrh	r3, [r1, #12]
 801993c:	061b      	lsls	r3, r3, #24
 801993e:	b09d      	sub	sp, #116	; 0x74
 8019940:	4607      	mov	r7, r0
 8019942:	460d      	mov	r5, r1
 8019944:	4614      	mov	r4, r2
 8019946:	d50e      	bpl.n	8019966 <_svfiprintf_r+0x32>
 8019948:	690b      	ldr	r3, [r1, #16]
 801994a:	b963      	cbnz	r3, 8019966 <_svfiprintf_r+0x32>
 801994c:	2140      	movs	r1, #64	; 0x40
 801994e:	f7fd fd5b 	bl	8017408 <_malloc_r>
 8019952:	6028      	str	r0, [r5, #0]
 8019954:	6128      	str	r0, [r5, #16]
 8019956:	b920      	cbnz	r0, 8019962 <_svfiprintf_r+0x2e>
 8019958:	230c      	movs	r3, #12
 801995a:	603b      	str	r3, [r7, #0]
 801995c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019960:	e0d1      	b.n	8019b06 <_svfiprintf_r+0x1d2>
 8019962:	2340      	movs	r3, #64	; 0x40
 8019964:	616b      	str	r3, [r5, #20]
 8019966:	2300      	movs	r3, #0
 8019968:	9309      	str	r3, [sp, #36]	; 0x24
 801996a:	2320      	movs	r3, #32
 801996c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019970:	f8cd 800c 	str.w	r8, [sp, #12]
 8019974:	2330      	movs	r3, #48	; 0x30
 8019976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019b20 <_svfiprintf_r+0x1ec>
 801997a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801997e:	f04f 0901 	mov.w	r9, #1
 8019982:	4623      	mov	r3, r4
 8019984:	469a      	mov	sl, r3
 8019986:	f813 2b01 	ldrb.w	r2, [r3], #1
 801998a:	b10a      	cbz	r2, 8019990 <_svfiprintf_r+0x5c>
 801998c:	2a25      	cmp	r2, #37	; 0x25
 801998e:	d1f9      	bne.n	8019984 <_svfiprintf_r+0x50>
 8019990:	ebba 0b04 	subs.w	fp, sl, r4
 8019994:	d00b      	beq.n	80199ae <_svfiprintf_r+0x7a>
 8019996:	465b      	mov	r3, fp
 8019998:	4622      	mov	r2, r4
 801999a:	4629      	mov	r1, r5
 801999c:	4638      	mov	r0, r7
 801999e:	f7ff ff6d 	bl	801987c <__ssputs_r>
 80199a2:	3001      	adds	r0, #1
 80199a4:	f000 80aa 	beq.w	8019afc <_svfiprintf_r+0x1c8>
 80199a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199aa:	445a      	add	r2, fp
 80199ac:	9209      	str	r2, [sp, #36]	; 0x24
 80199ae:	f89a 3000 	ldrb.w	r3, [sl]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	f000 80a2 	beq.w	8019afc <_svfiprintf_r+0x1c8>
 80199b8:	2300      	movs	r3, #0
 80199ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80199be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80199c2:	f10a 0a01 	add.w	sl, sl, #1
 80199c6:	9304      	str	r3, [sp, #16]
 80199c8:	9307      	str	r3, [sp, #28]
 80199ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80199ce:	931a      	str	r3, [sp, #104]	; 0x68
 80199d0:	4654      	mov	r4, sl
 80199d2:	2205      	movs	r2, #5
 80199d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199d8:	4851      	ldr	r0, [pc, #324]	; (8019b20 <_svfiprintf_r+0x1ec>)
 80199da:	f7e6 fc21 	bl	8000220 <memchr>
 80199de:	9a04      	ldr	r2, [sp, #16]
 80199e0:	b9d8      	cbnz	r0, 8019a1a <_svfiprintf_r+0xe6>
 80199e2:	06d0      	lsls	r0, r2, #27
 80199e4:	bf44      	itt	mi
 80199e6:	2320      	movmi	r3, #32
 80199e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199ec:	0711      	lsls	r1, r2, #28
 80199ee:	bf44      	itt	mi
 80199f0:	232b      	movmi	r3, #43	; 0x2b
 80199f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199f6:	f89a 3000 	ldrb.w	r3, [sl]
 80199fa:	2b2a      	cmp	r3, #42	; 0x2a
 80199fc:	d015      	beq.n	8019a2a <_svfiprintf_r+0xf6>
 80199fe:	9a07      	ldr	r2, [sp, #28]
 8019a00:	4654      	mov	r4, sl
 8019a02:	2000      	movs	r0, #0
 8019a04:	f04f 0c0a 	mov.w	ip, #10
 8019a08:	4621      	mov	r1, r4
 8019a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a0e:	3b30      	subs	r3, #48	; 0x30
 8019a10:	2b09      	cmp	r3, #9
 8019a12:	d94e      	bls.n	8019ab2 <_svfiprintf_r+0x17e>
 8019a14:	b1b0      	cbz	r0, 8019a44 <_svfiprintf_r+0x110>
 8019a16:	9207      	str	r2, [sp, #28]
 8019a18:	e014      	b.n	8019a44 <_svfiprintf_r+0x110>
 8019a1a:	eba0 0308 	sub.w	r3, r0, r8
 8019a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8019a22:	4313      	orrs	r3, r2
 8019a24:	9304      	str	r3, [sp, #16]
 8019a26:	46a2      	mov	sl, r4
 8019a28:	e7d2      	b.n	80199d0 <_svfiprintf_r+0x9c>
 8019a2a:	9b03      	ldr	r3, [sp, #12]
 8019a2c:	1d19      	adds	r1, r3, #4
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	9103      	str	r1, [sp, #12]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	bfbb      	ittet	lt
 8019a36:	425b      	neglt	r3, r3
 8019a38:	f042 0202 	orrlt.w	r2, r2, #2
 8019a3c:	9307      	strge	r3, [sp, #28]
 8019a3e:	9307      	strlt	r3, [sp, #28]
 8019a40:	bfb8      	it	lt
 8019a42:	9204      	strlt	r2, [sp, #16]
 8019a44:	7823      	ldrb	r3, [r4, #0]
 8019a46:	2b2e      	cmp	r3, #46	; 0x2e
 8019a48:	d10c      	bne.n	8019a64 <_svfiprintf_r+0x130>
 8019a4a:	7863      	ldrb	r3, [r4, #1]
 8019a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8019a4e:	d135      	bne.n	8019abc <_svfiprintf_r+0x188>
 8019a50:	9b03      	ldr	r3, [sp, #12]
 8019a52:	1d1a      	adds	r2, r3, #4
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	9203      	str	r2, [sp, #12]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	bfb8      	it	lt
 8019a5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019a60:	3402      	adds	r4, #2
 8019a62:	9305      	str	r3, [sp, #20]
 8019a64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019b30 <_svfiprintf_r+0x1fc>
 8019a68:	7821      	ldrb	r1, [r4, #0]
 8019a6a:	2203      	movs	r2, #3
 8019a6c:	4650      	mov	r0, sl
 8019a6e:	f7e6 fbd7 	bl	8000220 <memchr>
 8019a72:	b140      	cbz	r0, 8019a86 <_svfiprintf_r+0x152>
 8019a74:	2340      	movs	r3, #64	; 0x40
 8019a76:	eba0 000a 	sub.w	r0, r0, sl
 8019a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8019a7e:	9b04      	ldr	r3, [sp, #16]
 8019a80:	4303      	orrs	r3, r0
 8019a82:	3401      	adds	r4, #1
 8019a84:	9304      	str	r3, [sp, #16]
 8019a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a8a:	4826      	ldr	r0, [pc, #152]	; (8019b24 <_svfiprintf_r+0x1f0>)
 8019a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019a90:	2206      	movs	r2, #6
 8019a92:	f7e6 fbc5 	bl	8000220 <memchr>
 8019a96:	2800      	cmp	r0, #0
 8019a98:	d038      	beq.n	8019b0c <_svfiprintf_r+0x1d8>
 8019a9a:	4b23      	ldr	r3, [pc, #140]	; (8019b28 <_svfiprintf_r+0x1f4>)
 8019a9c:	bb1b      	cbnz	r3, 8019ae6 <_svfiprintf_r+0x1b2>
 8019a9e:	9b03      	ldr	r3, [sp, #12]
 8019aa0:	3307      	adds	r3, #7
 8019aa2:	f023 0307 	bic.w	r3, r3, #7
 8019aa6:	3308      	adds	r3, #8
 8019aa8:	9303      	str	r3, [sp, #12]
 8019aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019aac:	4433      	add	r3, r6
 8019aae:	9309      	str	r3, [sp, #36]	; 0x24
 8019ab0:	e767      	b.n	8019982 <_svfiprintf_r+0x4e>
 8019ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ab6:	460c      	mov	r4, r1
 8019ab8:	2001      	movs	r0, #1
 8019aba:	e7a5      	b.n	8019a08 <_svfiprintf_r+0xd4>
 8019abc:	2300      	movs	r3, #0
 8019abe:	3401      	adds	r4, #1
 8019ac0:	9305      	str	r3, [sp, #20]
 8019ac2:	4619      	mov	r1, r3
 8019ac4:	f04f 0c0a 	mov.w	ip, #10
 8019ac8:	4620      	mov	r0, r4
 8019aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ace:	3a30      	subs	r2, #48	; 0x30
 8019ad0:	2a09      	cmp	r2, #9
 8019ad2:	d903      	bls.n	8019adc <_svfiprintf_r+0x1a8>
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d0c5      	beq.n	8019a64 <_svfiprintf_r+0x130>
 8019ad8:	9105      	str	r1, [sp, #20]
 8019ada:	e7c3      	b.n	8019a64 <_svfiprintf_r+0x130>
 8019adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ae0:	4604      	mov	r4, r0
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	e7f0      	b.n	8019ac8 <_svfiprintf_r+0x194>
 8019ae6:	ab03      	add	r3, sp, #12
 8019ae8:	9300      	str	r3, [sp, #0]
 8019aea:	462a      	mov	r2, r5
 8019aec:	4b0f      	ldr	r3, [pc, #60]	; (8019b2c <_svfiprintf_r+0x1f8>)
 8019aee:	a904      	add	r1, sp, #16
 8019af0:	4638      	mov	r0, r7
 8019af2:	f3af 8000 	nop.w
 8019af6:	1c42      	adds	r2, r0, #1
 8019af8:	4606      	mov	r6, r0
 8019afa:	d1d6      	bne.n	8019aaa <_svfiprintf_r+0x176>
 8019afc:	89ab      	ldrh	r3, [r5, #12]
 8019afe:	065b      	lsls	r3, r3, #25
 8019b00:	f53f af2c 	bmi.w	801995c <_svfiprintf_r+0x28>
 8019b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b06:	b01d      	add	sp, #116	; 0x74
 8019b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b0c:	ab03      	add	r3, sp, #12
 8019b0e:	9300      	str	r3, [sp, #0]
 8019b10:	462a      	mov	r2, r5
 8019b12:	4b06      	ldr	r3, [pc, #24]	; (8019b2c <_svfiprintf_r+0x1f8>)
 8019b14:	a904      	add	r1, sp, #16
 8019b16:	4638      	mov	r0, r7
 8019b18:	f000 f9d4 	bl	8019ec4 <_printf_i>
 8019b1c:	e7eb      	b.n	8019af6 <_svfiprintf_r+0x1c2>
 8019b1e:	bf00      	nop
 8019b20:	0801dd94 	.word	0x0801dd94
 8019b24:	0801dd9e 	.word	0x0801dd9e
 8019b28:	00000000 	.word	0x00000000
 8019b2c:	0801987d 	.word	0x0801987d
 8019b30:	0801dd9a 	.word	0x0801dd9a

08019b34 <__sfputc_r>:
 8019b34:	6893      	ldr	r3, [r2, #8]
 8019b36:	3b01      	subs	r3, #1
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	b410      	push	{r4}
 8019b3c:	6093      	str	r3, [r2, #8]
 8019b3e:	da08      	bge.n	8019b52 <__sfputc_r+0x1e>
 8019b40:	6994      	ldr	r4, [r2, #24]
 8019b42:	42a3      	cmp	r3, r4
 8019b44:	db01      	blt.n	8019b4a <__sfputc_r+0x16>
 8019b46:	290a      	cmp	r1, #10
 8019b48:	d103      	bne.n	8019b52 <__sfputc_r+0x1e>
 8019b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b4e:	f000 bafb 	b.w	801a148 <__swbuf_r>
 8019b52:	6813      	ldr	r3, [r2, #0]
 8019b54:	1c58      	adds	r0, r3, #1
 8019b56:	6010      	str	r0, [r2, #0]
 8019b58:	7019      	strb	r1, [r3, #0]
 8019b5a:	4608      	mov	r0, r1
 8019b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b60:	4770      	bx	lr

08019b62 <__sfputs_r>:
 8019b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b64:	4606      	mov	r6, r0
 8019b66:	460f      	mov	r7, r1
 8019b68:	4614      	mov	r4, r2
 8019b6a:	18d5      	adds	r5, r2, r3
 8019b6c:	42ac      	cmp	r4, r5
 8019b6e:	d101      	bne.n	8019b74 <__sfputs_r+0x12>
 8019b70:	2000      	movs	r0, #0
 8019b72:	e007      	b.n	8019b84 <__sfputs_r+0x22>
 8019b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b78:	463a      	mov	r2, r7
 8019b7a:	4630      	mov	r0, r6
 8019b7c:	f7ff ffda 	bl	8019b34 <__sfputc_r>
 8019b80:	1c43      	adds	r3, r0, #1
 8019b82:	d1f3      	bne.n	8019b6c <__sfputs_r+0xa>
 8019b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019b88 <_vfiprintf_r>:
 8019b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b8c:	460d      	mov	r5, r1
 8019b8e:	b09d      	sub	sp, #116	; 0x74
 8019b90:	4614      	mov	r4, r2
 8019b92:	4698      	mov	r8, r3
 8019b94:	4606      	mov	r6, r0
 8019b96:	b118      	cbz	r0, 8019ba0 <_vfiprintf_r+0x18>
 8019b98:	6983      	ldr	r3, [r0, #24]
 8019b9a:	b90b      	cbnz	r3, 8019ba0 <_vfiprintf_r+0x18>
 8019b9c:	f7fd fb0e 	bl	80171bc <__sinit>
 8019ba0:	4b89      	ldr	r3, [pc, #548]	; (8019dc8 <_vfiprintf_r+0x240>)
 8019ba2:	429d      	cmp	r5, r3
 8019ba4:	d11b      	bne.n	8019bde <_vfiprintf_r+0x56>
 8019ba6:	6875      	ldr	r5, [r6, #4]
 8019ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019baa:	07d9      	lsls	r1, r3, #31
 8019bac:	d405      	bmi.n	8019bba <_vfiprintf_r+0x32>
 8019bae:	89ab      	ldrh	r3, [r5, #12]
 8019bb0:	059a      	lsls	r2, r3, #22
 8019bb2:	d402      	bmi.n	8019bba <_vfiprintf_r+0x32>
 8019bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bb6:	f7fd fbc4 	bl	8017342 <__retarget_lock_acquire_recursive>
 8019bba:	89ab      	ldrh	r3, [r5, #12]
 8019bbc:	071b      	lsls	r3, r3, #28
 8019bbe:	d501      	bpl.n	8019bc4 <_vfiprintf_r+0x3c>
 8019bc0:	692b      	ldr	r3, [r5, #16]
 8019bc2:	b9eb      	cbnz	r3, 8019c00 <_vfiprintf_r+0x78>
 8019bc4:	4629      	mov	r1, r5
 8019bc6:	4630      	mov	r0, r6
 8019bc8:	f000 fb1e 	bl	801a208 <__swsetup_r>
 8019bcc:	b1c0      	cbz	r0, 8019c00 <_vfiprintf_r+0x78>
 8019bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bd0:	07dc      	lsls	r4, r3, #31
 8019bd2:	d50e      	bpl.n	8019bf2 <_vfiprintf_r+0x6a>
 8019bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bd8:	b01d      	add	sp, #116	; 0x74
 8019bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bde:	4b7b      	ldr	r3, [pc, #492]	; (8019dcc <_vfiprintf_r+0x244>)
 8019be0:	429d      	cmp	r5, r3
 8019be2:	d101      	bne.n	8019be8 <_vfiprintf_r+0x60>
 8019be4:	68b5      	ldr	r5, [r6, #8]
 8019be6:	e7df      	b.n	8019ba8 <_vfiprintf_r+0x20>
 8019be8:	4b79      	ldr	r3, [pc, #484]	; (8019dd0 <_vfiprintf_r+0x248>)
 8019bea:	429d      	cmp	r5, r3
 8019bec:	bf08      	it	eq
 8019bee:	68f5      	ldreq	r5, [r6, #12]
 8019bf0:	e7da      	b.n	8019ba8 <_vfiprintf_r+0x20>
 8019bf2:	89ab      	ldrh	r3, [r5, #12]
 8019bf4:	0598      	lsls	r0, r3, #22
 8019bf6:	d4ed      	bmi.n	8019bd4 <_vfiprintf_r+0x4c>
 8019bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bfa:	f7fd fba3 	bl	8017344 <__retarget_lock_release_recursive>
 8019bfe:	e7e9      	b.n	8019bd4 <_vfiprintf_r+0x4c>
 8019c00:	2300      	movs	r3, #0
 8019c02:	9309      	str	r3, [sp, #36]	; 0x24
 8019c04:	2320      	movs	r3, #32
 8019c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c0e:	2330      	movs	r3, #48	; 0x30
 8019c10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019dd4 <_vfiprintf_r+0x24c>
 8019c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c18:	f04f 0901 	mov.w	r9, #1
 8019c1c:	4623      	mov	r3, r4
 8019c1e:	469a      	mov	sl, r3
 8019c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c24:	b10a      	cbz	r2, 8019c2a <_vfiprintf_r+0xa2>
 8019c26:	2a25      	cmp	r2, #37	; 0x25
 8019c28:	d1f9      	bne.n	8019c1e <_vfiprintf_r+0x96>
 8019c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8019c2e:	d00b      	beq.n	8019c48 <_vfiprintf_r+0xc0>
 8019c30:	465b      	mov	r3, fp
 8019c32:	4622      	mov	r2, r4
 8019c34:	4629      	mov	r1, r5
 8019c36:	4630      	mov	r0, r6
 8019c38:	f7ff ff93 	bl	8019b62 <__sfputs_r>
 8019c3c:	3001      	adds	r0, #1
 8019c3e:	f000 80aa 	beq.w	8019d96 <_vfiprintf_r+0x20e>
 8019c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c44:	445a      	add	r2, fp
 8019c46:	9209      	str	r2, [sp, #36]	; 0x24
 8019c48:	f89a 3000 	ldrb.w	r3, [sl]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	f000 80a2 	beq.w	8019d96 <_vfiprintf_r+0x20e>
 8019c52:	2300      	movs	r3, #0
 8019c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c5c:	f10a 0a01 	add.w	sl, sl, #1
 8019c60:	9304      	str	r3, [sp, #16]
 8019c62:	9307      	str	r3, [sp, #28]
 8019c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c68:	931a      	str	r3, [sp, #104]	; 0x68
 8019c6a:	4654      	mov	r4, sl
 8019c6c:	2205      	movs	r2, #5
 8019c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c72:	4858      	ldr	r0, [pc, #352]	; (8019dd4 <_vfiprintf_r+0x24c>)
 8019c74:	f7e6 fad4 	bl	8000220 <memchr>
 8019c78:	9a04      	ldr	r2, [sp, #16]
 8019c7a:	b9d8      	cbnz	r0, 8019cb4 <_vfiprintf_r+0x12c>
 8019c7c:	06d1      	lsls	r1, r2, #27
 8019c7e:	bf44      	itt	mi
 8019c80:	2320      	movmi	r3, #32
 8019c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c86:	0713      	lsls	r3, r2, #28
 8019c88:	bf44      	itt	mi
 8019c8a:	232b      	movmi	r3, #43	; 0x2b
 8019c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c90:	f89a 3000 	ldrb.w	r3, [sl]
 8019c94:	2b2a      	cmp	r3, #42	; 0x2a
 8019c96:	d015      	beq.n	8019cc4 <_vfiprintf_r+0x13c>
 8019c98:	9a07      	ldr	r2, [sp, #28]
 8019c9a:	4654      	mov	r4, sl
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	f04f 0c0a 	mov.w	ip, #10
 8019ca2:	4621      	mov	r1, r4
 8019ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ca8:	3b30      	subs	r3, #48	; 0x30
 8019caa:	2b09      	cmp	r3, #9
 8019cac:	d94e      	bls.n	8019d4c <_vfiprintf_r+0x1c4>
 8019cae:	b1b0      	cbz	r0, 8019cde <_vfiprintf_r+0x156>
 8019cb0:	9207      	str	r2, [sp, #28]
 8019cb2:	e014      	b.n	8019cde <_vfiprintf_r+0x156>
 8019cb4:	eba0 0308 	sub.w	r3, r0, r8
 8019cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8019cbc:	4313      	orrs	r3, r2
 8019cbe:	9304      	str	r3, [sp, #16]
 8019cc0:	46a2      	mov	sl, r4
 8019cc2:	e7d2      	b.n	8019c6a <_vfiprintf_r+0xe2>
 8019cc4:	9b03      	ldr	r3, [sp, #12]
 8019cc6:	1d19      	adds	r1, r3, #4
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	9103      	str	r1, [sp, #12]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	bfbb      	ittet	lt
 8019cd0:	425b      	neglt	r3, r3
 8019cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8019cd6:	9307      	strge	r3, [sp, #28]
 8019cd8:	9307      	strlt	r3, [sp, #28]
 8019cda:	bfb8      	it	lt
 8019cdc:	9204      	strlt	r2, [sp, #16]
 8019cde:	7823      	ldrb	r3, [r4, #0]
 8019ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8019ce2:	d10c      	bne.n	8019cfe <_vfiprintf_r+0x176>
 8019ce4:	7863      	ldrb	r3, [r4, #1]
 8019ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8019ce8:	d135      	bne.n	8019d56 <_vfiprintf_r+0x1ce>
 8019cea:	9b03      	ldr	r3, [sp, #12]
 8019cec:	1d1a      	adds	r2, r3, #4
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	9203      	str	r2, [sp, #12]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	bfb8      	it	lt
 8019cf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019cfa:	3402      	adds	r4, #2
 8019cfc:	9305      	str	r3, [sp, #20]
 8019cfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019de4 <_vfiprintf_r+0x25c>
 8019d02:	7821      	ldrb	r1, [r4, #0]
 8019d04:	2203      	movs	r2, #3
 8019d06:	4650      	mov	r0, sl
 8019d08:	f7e6 fa8a 	bl	8000220 <memchr>
 8019d0c:	b140      	cbz	r0, 8019d20 <_vfiprintf_r+0x198>
 8019d0e:	2340      	movs	r3, #64	; 0x40
 8019d10:	eba0 000a 	sub.w	r0, r0, sl
 8019d14:	fa03 f000 	lsl.w	r0, r3, r0
 8019d18:	9b04      	ldr	r3, [sp, #16]
 8019d1a:	4303      	orrs	r3, r0
 8019d1c:	3401      	adds	r4, #1
 8019d1e:	9304      	str	r3, [sp, #16]
 8019d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d24:	482c      	ldr	r0, [pc, #176]	; (8019dd8 <_vfiprintf_r+0x250>)
 8019d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d2a:	2206      	movs	r2, #6
 8019d2c:	f7e6 fa78 	bl	8000220 <memchr>
 8019d30:	2800      	cmp	r0, #0
 8019d32:	d03f      	beq.n	8019db4 <_vfiprintf_r+0x22c>
 8019d34:	4b29      	ldr	r3, [pc, #164]	; (8019ddc <_vfiprintf_r+0x254>)
 8019d36:	bb1b      	cbnz	r3, 8019d80 <_vfiprintf_r+0x1f8>
 8019d38:	9b03      	ldr	r3, [sp, #12]
 8019d3a:	3307      	adds	r3, #7
 8019d3c:	f023 0307 	bic.w	r3, r3, #7
 8019d40:	3308      	adds	r3, #8
 8019d42:	9303      	str	r3, [sp, #12]
 8019d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d46:	443b      	add	r3, r7
 8019d48:	9309      	str	r3, [sp, #36]	; 0x24
 8019d4a:	e767      	b.n	8019c1c <_vfiprintf_r+0x94>
 8019d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d50:	460c      	mov	r4, r1
 8019d52:	2001      	movs	r0, #1
 8019d54:	e7a5      	b.n	8019ca2 <_vfiprintf_r+0x11a>
 8019d56:	2300      	movs	r3, #0
 8019d58:	3401      	adds	r4, #1
 8019d5a:	9305      	str	r3, [sp, #20]
 8019d5c:	4619      	mov	r1, r3
 8019d5e:	f04f 0c0a 	mov.w	ip, #10
 8019d62:	4620      	mov	r0, r4
 8019d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d68:	3a30      	subs	r2, #48	; 0x30
 8019d6a:	2a09      	cmp	r2, #9
 8019d6c:	d903      	bls.n	8019d76 <_vfiprintf_r+0x1ee>
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d0c5      	beq.n	8019cfe <_vfiprintf_r+0x176>
 8019d72:	9105      	str	r1, [sp, #20]
 8019d74:	e7c3      	b.n	8019cfe <_vfiprintf_r+0x176>
 8019d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d7a:	4604      	mov	r4, r0
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	e7f0      	b.n	8019d62 <_vfiprintf_r+0x1da>
 8019d80:	ab03      	add	r3, sp, #12
 8019d82:	9300      	str	r3, [sp, #0]
 8019d84:	462a      	mov	r2, r5
 8019d86:	4b16      	ldr	r3, [pc, #88]	; (8019de0 <_vfiprintf_r+0x258>)
 8019d88:	a904      	add	r1, sp, #16
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	f3af 8000 	nop.w
 8019d90:	4607      	mov	r7, r0
 8019d92:	1c78      	adds	r0, r7, #1
 8019d94:	d1d6      	bne.n	8019d44 <_vfiprintf_r+0x1bc>
 8019d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d98:	07d9      	lsls	r1, r3, #31
 8019d9a:	d405      	bmi.n	8019da8 <_vfiprintf_r+0x220>
 8019d9c:	89ab      	ldrh	r3, [r5, #12]
 8019d9e:	059a      	lsls	r2, r3, #22
 8019da0:	d402      	bmi.n	8019da8 <_vfiprintf_r+0x220>
 8019da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019da4:	f7fd face 	bl	8017344 <__retarget_lock_release_recursive>
 8019da8:	89ab      	ldrh	r3, [r5, #12]
 8019daa:	065b      	lsls	r3, r3, #25
 8019dac:	f53f af12 	bmi.w	8019bd4 <_vfiprintf_r+0x4c>
 8019db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019db2:	e711      	b.n	8019bd8 <_vfiprintf_r+0x50>
 8019db4:	ab03      	add	r3, sp, #12
 8019db6:	9300      	str	r3, [sp, #0]
 8019db8:	462a      	mov	r2, r5
 8019dba:	4b09      	ldr	r3, [pc, #36]	; (8019de0 <_vfiprintf_r+0x258>)
 8019dbc:	a904      	add	r1, sp, #16
 8019dbe:	4630      	mov	r0, r6
 8019dc0:	f000 f880 	bl	8019ec4 <_printf_i>
 8019dc4:	e7e4      	b.n	8019d90 <_vfiprintf_r+0x208>
 8019dc6:	bf00      	nop
 8019dc8:	0801da04 	.word	0x0801da04
 8019dcc:	0801da24 	.word	0x0801da24
 8019dd0:	0801d9e4 	.word	0x0801d9e4
 8019dd4:	0801dd94 	.word	0x0801dd94
 8019dd8:	0801dd9e 	.word	0x0801dd9e
 8019ddc:	00000000 	.word	0x00000000
 8019de0:	08019b63 	.word	0x08019b63
 8019de4:	0801dd9a 	.word	0x0801dd9a

08019de8 <_printf_common>:
 8019de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dec:	4616      	mov	r6, r2
 8019dee:	4699      	mov	r9, r3
 8019df0:	688a      	ldr	r2, [r1, #8]
 8019df2:	690b      	ldr	r3, [r1, #16]
 8019df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019df8:	4293      	cmp	r3, r2
 8019dfa:	bfb8      	it	lt
 8019dfc:	4613      	movlt	r3, r2
 8019dfe:	6033      	str	r3, [r6, #0]
 8019e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e04:	4607      	mov	r7, r0
 8019e06:	460c      	mov	r4, r1
 8019e08:	b10a      	cbz	r2, 8019e0e <_printf_common+0x26>
 8019e0a:	3301      	adds	r3, #1
 8019e0c:	6033      	str	r3, [r6, #0]
 8019e0e:	6823      	ldr	r3, [r4, #0]
 8019e10:	0699      	lsls	r1, r3, #26
 8019e12:	bf42      	ittt	mi
 8019e14:	6833      	ldrmi	r3, [r6, #0]
 8019e16:	3302      	addmi	r3, #2
 8019e18:	6033      	strmi	r3, [r6, #0]
 8019e1a:	6825      	ldr	r5, [r4, #0]
 8019e1c:	f015 0506 	ands.w	r5, r5, #6
 8019e20:	d106      	bne.n	8019e30 <_printf_common+0x48>
 8019e22:	f104 0a19 	add.w	sl, r4, #25
 8019e26:	68e3      	ldr	r3, [r4, #12]
 8019e28:	6832      	ldr	r2, [r6, #0]
 8019e2a:	1a9b      	subs	r3, r3, r2
 8019e2c:	42ab      	cmp	r3, r5
 8019e2e:	dc26      	bgt.n	8019e7e <_printf_common+0x96>
 8019e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e34:	1e13      	subs	r3, r2, #0
 8019e36:	6822      	ldr	r2, [r4, #0]
 8019e38:	bf18      	it	ne
 8019e3a:	2301      	movne	r3, #1
 8019e3c:	0692      	lsls	r2, r2, #26
 8019e3e:	d42b      	bmi.n	8019e98 <_printf_common+0xb0>
 8019e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e44:	4649      	mov	r1, r9
 8019e46:	4638      	mov	r0, r7
 8019e48:	47c0      	blx	r8
 8019e4a:	3001      	adds	r0, #1
 8019e4c:	d01e      	beq.n	8019e8c <_printf_common+0xa4>
 8019e4e:	6823      	ldr	r3, [r4, #0]
 8019e50:	68e5      	ldr	r5, [r4, #12]
 8019e52:	6832      	ldr	r2, [r6, #0]
 8019e54:	f003 0306 	and.w	r3, r3, #6
 8019e58:	2b04      	cmp	r3, #4
 8019e5a:	bf08      	it	eq
 8019e5c:	1aad      	subeq	r5, r5, r2
 8019e5e:	68a3      	ldr	r3, [r4, #8]
 8019e60:	6922      	ldr	r2, [r4, #16]
 8019e62:	bf0c      	ite	eq
 8019e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e68:	2500      	movne	r5, #0
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	bfc4      	itt	gt
 8019e6e:	1a9b      	subgt	r3, r3, r2
 8019e70:	18ed      	addgt	r5, r5, r3
 8019e72:	2600      	movs	r6, #0
 8019e74:	341a      	adds	r4, #26
 8019e76:	42b5      	cmp	r5, r6
 8019e78:	d11a      	bne.n	8019eb0 <_printf_common+0xc8>
 8019e7a:	2000      	movs	r0, #0
 8019e7c:	e008      	b.n	8019e90 <_printf_common+0xa8>
 8019e7e:	2301      	movs	r3, #1
 8019e80:	4652      	mov	r2, sl
 8019e82:	4649      	mov	r1, r9
 8019e84:	4638      	mov	r0, r7
 8019e86:	47c0      	blx	r8
 8019e88:	3001      	adds	r0, #1
 8019e8a:	d103      	bne.n	8019e94 <_printf_common+0xac>
 8019e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e94:	3501      	adds	r5, #1
 8019e96:	e7c6      	b.n	8019e26 <_printf_common+0x3e>
 8019e98:	18e1      	adds	r1, r4, r3
 8019e9a:	1c5a      	adds	r2, r3, #1
 8019e9c:	2030      	movs	r0, #48	; 0x30
 8019e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019ea2:	4422      	add	r2, r4
 8019ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019eac:	3302      	adds	r3, #2
 8019eae:	e7c7      	b.n	8019e40 <_printf_common+0x58>
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	4622      	mov	r2, r4
 8019eb4:	4649      	mov	r1, r9
 8019eb6:	4638      	mov	r0, r7
 8019eb8:	47c0      	blx	r8
 8019eba:	3001      	adds	r0, #1
 8019ebc:	d0e6      	beq.n	8019e8c <_printf_common+0xa4>
 8019ebe:	3601      	adds	r6, #1
 8019ec0:	e7d9      	b.n	8019e76 <_printf_common+0x8e>
	...

08019ec4 <_printf_i>:
 8019ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ec8:	7e0f      	ldrb	r7, [r1, #24]
 8019eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019ecc:	2f78      	cmp	r7, #120	; 0x78
 8019ece:	4691      	mov	r9, r2
 8019ed0:	4680      	mov	r8, r0
 8019ed2:	460c      	mov	r4, r1
 8019ed4:	469a      	mov	sl, r3
 8019ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019eda:	d807      	bhi.n	8019eec <_printf_i+0x28>
 8019edc:	2f62      	cmp	r7, #98	; 0x62
 8019ede:	d80a      	bhi.n	8019ef6 <_printf_i+0x32>
 8019ee0:	2f00      	cmp	r7, #0
 8019ee2:	f000 80d8 	beq.w	801a096 <_printf_i+0x1d2>
 8019ee6:	2f58      	cmp	r7, #88	; 0x58
 8019ee8:	f000 80a3 	beq.w	801a032 <_printf_i+0x16e>
 8019eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ef4:	e03a      	b.n	8019f6c <_printf_i+0xa8>
 8019ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019efa:	2b15      	cmp	r3, #21
 8019efc:	d8f6      	bhi.n	8019eec <_printf_i+0x28>
 8019efe:	a101      	add	r1, pc, #4	; (adr r1, 8019f04 <_printf_i+0x40>)
 8019f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f04:	08019f5d 	.word	0x08019f5d
 8019f08:	08019f71 	.word	0x08019f71
 8019f0c:	08019eed 	.word	0x08019eed
 8019f10:	08019eed 	.word	0x08019eed
 8019f14:	08019eed 	.word	0x08019eed
 8019f18:	08019eed 	.word	0x08019eed
 8019f1c:	08019f71 	.word	0x08019f71
 8019f20:	08019eed 	.word	0x08019eed
 8019f24:	08019eed 	.word	0x08019eed
 8019f28:	08019eed 	.word	0x08019eed
 8019f2c:	08019eed 	.word	0x08019eed
 8019f30:	0801a07d 	.word	0x0801a07d
 8019f34:	08019fa1 	.word	0x08019fa1
 8019f38:	0801a05f 	.word	0x0801a05f
 8019f3c:	08019eed 	.word	0x08019eed
 8019f40:	08019eed 	.word	0x08019eed
 8019f44:	0801a09f 	.word	0x0801a09f
 8019f48:	08019eed 	.word	0x08019eed
 8019f4c:	08019fa1 	.word	0x08019fa1
 8019f50:	08019eed 	.word	0x08019eed
 8019f54:	08019eed 	.word	0x08019eed
 8019f58:	0801a067 	.word	0x0801a067
 8019f5c:	682b      	ldr	r3, [r5, #0]
 8019f5e:	1d1a      	adds	r2, r3, #4
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	602a      	str	r2, [r5, #0]
 8019f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f6c:	2301      	movs	r3, #1
 8019f6e:	e0a3      	b.n	801a0b8 <_printf_i+0x1f4>
 8019f70:	6820      	ldr	r0, [r4, #0]
 8019f72:	6829      	ldr	r1, [r5, #0]
 8019f74:	0606      	lsls	r6, r0, #24
 8019f76:	f101 0304 	add.w	r3, r1, #4
 8019f7a:	d50a      	bpl.n	8019f92 <_printf_i+0xce>
 8019f7c:	680e      	ldr	r6, [r1, #0]
 8019f7e:	602b      	str	r3, [r5, #0]
 8019f80:	2e00      	cmp	r6, #0
 8019f82:	da03      	bge.n	8019f8c <_printf_i+0xc8>
 8019f84:	232d      	movs	r3, #45	; 0x2d
 8019f86:	4276      	negs	r6, r6
 8019f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f8c:	485e      	ldr	r0, [pc, #376]	; (801a108 <_printf_i+0x244>)
 8019f8e:	230a      	movs	r3, #10
 8019f90:	e019      	b.n	8019fc6 <_printf_i+0x102>
 8019f92:	680e      	ldr	r6, [r1, #0]
 8019f94:	602b      	str	r3, [r5, #0]
 8019f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019f9a:	bf18      	it	ne
 8019f9c:	b236      	sxthne	r6, r6
 8019f9e:	e7ef      	b.n	8019f80 <_printf_i+0xbc>
 8019fa0:	682b      	ldr	r3, [r5, #0]
 8019fa2:	6820      	ldr	r0, [r4, #0]
 8019fa4:	1d19      	adds	r1, r3, #4
 8019fa6:	6029      	str	r1, [r5, #0]
 8019fa8:	0601      	lsls	r1, r0, #24
 8019faa:	d501      	bpl.n	8019fb0 <_printf_i+0xec>
 8019fac:	681e      	ldr	r6, [r3, #0]
 8019fae:	e002      	b.n	8019fb6 <_printf_i+0xf2>
 8019fb0:	0646      	lsls	r6, r0, #25
 8019fb2:	d5fb      	bpl.n	8019fac <_printf_i+0xe8>
 8019fb4:	881e      	ldrh	r6, [r3, #0]
 8019fb6:	4854      	ldr	r0, [pc, #336]	; (801a108 <_printf_i+0x244>)
 8019fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8019fba:	bf0c      	ite	eq
 8019fbc:	2308      	moveq	r3, #8
 8019fbe:	230a      	movne	r3, #10
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fc6:	6865      	ldr	r5, [r4, #4]
 8019fc8:	60a5      	str	r5, [r4, #8]
 8019fca:	2d00      	cmp	r5, #0
 8019fcc:	bfa2      	ittt	ge
 8019fce:	6821      	ldrge	r1, [r4, #0]
 8019fd0:	f021 0104 	bicge.w	r1, r1, #4
 8019fd4:	6021      	strge	r1, [r4, #0]
 8019fd6:	b90e      	cbnz	r6, 8019fdc <_printf_i+0x118>
 8019fd8:	2d00      	cmp	r5, #0
 8019fda:	d04d      	beq.n	801a078 <_printf_i+0x1b4>
 8019fdc:	4615      	mov	r5, r2
 8019fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8019fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8019fe6:	5dc7      	ldrb	r7, [r0, r7]
 8019fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019fec:	4637      	mov	r7, r6
 8019fee:	42bb      	cmp	r3, r7
 8019ff0:	460e      	mov	r6, r1
 8019ff2:	d9f4      	bls.n	8019fde <_printf_i+0x11a>
 8019ff4:	2b08      	cmp	r3, #8
 8019ff6:	d10b      	bne.n	801a010 <_printf_i+0x14c>
 8019ff8:	6823      	ldr	r3, [r4, #0]
 8019ffa:	07de      	lsls	r6, r3, #31
 8019ffc:	d508      	bpl.n	801a010 <_printf_i+0x14c>
 8019ffe:	6923      	ldr	r3, [r4, #16]
 801a000:	6861      	ldr	r1, [r4, #4]
 801a002:	4299      	cmp	r1, r3
 801a004:	bfde      	ittt	le
 801a006:	2330      	movle	r3, #48	; 0x30
 801a008:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a00c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a010:	1b52      	subs	r2, r2, r5
 801a012:	6122      	str	r2, [r4, #16]
 801a014:	f8cd a000 	str.w	sl, [sp]
 801a018:	464b      	mov	r3, r9
 801a01a:	aa03      	add	r2, sp, #12
 801a01c:	4621      	mov	r1, r4
 801a01e:	4640      	mov	r0, r8
 801a020:	f7ff fee2 	bl	8019de8 <_printf_common>
 801a024:	3001      	adds	r0, #1
 801a026:	d14c      	bne.n	801a0c2 <_printf_i+0x1fe>
 801a028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a02c:	b004      	add	sp, #16
 801a02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a032:	4835      	ldr	r0, [pc, #212]	; (801a108 <_printf_i+0x244>)
 801a034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a038:	6829      	ldr	r1, [r5, #0]
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	f851 6b04 	ldr.w	r6, [r1], #4
 801a040:	6029      	str	r1, [r5, #0]
 801a042:	061d      	lsls	r5, r3, #24
 801a044:	d514      	bpl.n	801a070 <_printf_i+0x1ac>
 801a046:	07df      	lsls	r7, r3, #31
 801a048:	bf44      	itt	mi
 801a04a:	f043 0320 	orrmi.w	r3, r3, #32
 801a04e:	6023      	strmi	r3, [r4, #0]
 801a050:	b91e      	cbnz	r6, 801a05a <_printf_i+0x196>
 801a052:	6823      	ldr	r3, [r4, #0]
 801a054:	f023 0320 	bic.w	r3, r3, #32
 801a058:	6023      	str	r3, [r4, #0]
 801a05a:	2310      	movs	r3, #16
 801a05c:	e7b0      	b.n	8019fc0 <_printf_i+0xfc>
 801a05e:	6823      	ldr	r3, [r4, #0]
 801a060:	f043 0320 	orr.w	r3, r3, #32
 801a064:	6023      	str	r3, [r4, #0]
 801a066:	2378      	movs	r3, #120	; 0x78
 801a068:	4828      	ldr	r0, [pc, #160]	; (801a10c <_printf_i+0x248>)
 801a06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a06e:	e7e3      	b.n	801a038 <_printf_i+0x174>
 801a070:	0659      	lsls	r1, r3, #25
 801a072:	bf48      	it	mi
 801a074:	b2b6      	uxthmi	r6, r6
 801a076:	e7e6      	b.n	801a046 <_printf_i+0x182>
 801a078:	4615      	mov	r5, r2
 801a07a:	e7bb      	b.n	8019ff4 <_printf_i+0x130>
 801a07c:	682b      	ldr	r3, [r5, #0]
 801a07e:	6826      	ldr	r6, [r4, #0]
 801a080:	6961      	ldr	r1, [r4, #20]
 801a082:	1d18      	adds	r0, r3, #4
 801a084:	6028      	str	r0, [r5, #0]
 801a086:	0635      	lsls	r5, r6, #24
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	d501      	bpl.n	801a090 <_printf_i+0x1cc>
 801a08c:	6019      	str	r1, [r3, #0]
 801a08e:	e002      	b.n	801a096 <_printf_i+0x1d2>
 801a090:	0670      	lsls	r0, r6, #25
 801a092:	d5fb      	bpl.n	801a08c <_printf_i+0x1c8>
 801a094:	8019      	strh	r1, [r3, #0]
 801a096:	2300      	movs	r3, #0
 801a098:	6123      	str	r3, [r4, #16]
 801a09a:	4615      	mov	r5, r2
 801a09c:	e7ba      	b.n	801a014 <_printf_i+0x150>
 801a09e:	682b      	ldr	r3, [r5, #0]
 801a0a0:	1d1a      	adds	r2, r3, #4
 801a0a2:	602a      	str	r2, [r5, #0]
 801a0a4:	681d      	ldr	r5, [r3, #0]
 801a0a6:	6862      	ldr	r2, [r4, #4]
 801a0a8:	2100      	movs	r1, #0
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	f7e6 f8b8 	bl	8000220 <memchr>
 801a0b0:	b108      	cbz	r0, 801a0b6 <_printf_i+0x1f2>
 801a0b2:	1b40      	subs	r0, r0, r5
 801a0b4:	6060      	str	r0, [r4, #4]
 801a0b6:	6863      	ldr	r3, [r4, #4]
 801a0b8:	6123      	str	r3, [r4, #16]
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0c0:	e7a8      	b.n	801a014 <_printf_i+0x150>
 801a0c2:	6923      	ldr	r3, [r4, #16]
 801a0c4:	462a      	mov	r2, r5
 801a0c6:	4649      	mov	r1, r9
 801a0c8:	4640      	mov	r0, r8
 801a0ca:	47d0      	blx	sl
 801a0cc:	3001      	adds	r0, #1
 801a0ce:	d0ab      	beq.n	801a028 <_printf_i+0x164>
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	079b      	lsls	r3, r3, #30
 801a0d4:	d413      	bmi.n	801a0fe <_printf_i+0x23a>
 801a0d6:	68e0      	ldr	r0, [r4, #12]
 801a0d8:	9b03      	ldr	r3, [sp, #12]
 801a0da:	4298      	cmp	r0, r3
 801a0dc:	bfb8      	it	lt
 801a0de:	4618      	movlt	r0, r3
 801a0e0:	e7a4      	b.n	801a02c <_printf_i+0x168>
 801a0e2:	2301      	movs	r3, #1
 801a0e4:	4632      	mov	r2, r6
 801a0e6:	4649      	mov	r1, r9
 801a0e8:	4640      	mov	r0, r8
 801a0ea:	47d0      	blx	sl
 801a0ec:	3001      	adds	r0, #1
 801a0ee:	d09b      	beq.n	801a028 <_printf_i+0x164>
 801a0f0:	3501      	adds	r5, #1
 801a0f2:	68e3      	ldr	r3, [r4, #12]
 801a0f4:	9903      	ldr	r1, [sp, #12]
 801a0f6:	1a5b      	subs	r3, r3, r1
 801a0f8:	42ab      	cmp	r3, r5
 801a0fa:	dcf2      	bgt.n	801a0e2 <_printf_i+0x21e>
 801a0fc:	e7eb      	b.n	801a0d6 <_printf_i+0x212>
 801a0fe:	2500      	movs	r5, #0
 801a100:	f104 0619 	add.w	r6, r4, #25
 801a104:	e7f5      	b.n	801a0f2 <_printf_i+0x22e>
 801a106:	bf00      	nop
 801a108:	0801dda5 	.word	0x0801dda5
 801a10c:	0801ddb6 	.word	0x0801ddb6

0801a110 <_read_r>:
 801a110:	b538      	push	{r3, r4, r5, lr}
 801a112:	4d07      	ldr	r5, [pc, #28]	; (801a130 <_read_r+0x20>)
 801a114:	4604      	mov	r4, r0
 801a116:	4608      	mov	r0, r1
 801a118:	4611      	mov	r1, r2
 801a11a:	2200      	movs	r2, #0
 801a11c:	602a      	str	r2, [r5, #0]
 801a11e:	461a      	mov	r2, r3
 801a120:	f7e7 fbac 	bl	800187c <_read>
 801a124:	1c43      	adds	r3, r0, #1
 801a126:	d102      	bne.n	801a12e <_read_r+0x1e>
 801a128:	682b      	ldr	r3, [r5, #0]
 801a12a:	b103      	cbz	r3, 801a12e <_read_r+0x1e>
 801a12c:	6023      	str	r3, [r4, #0]
 801a12e:	bd38      	pop	{r3, r4, r5, pc}
 801a130:	20011d00 	.word	0x20011d00
 801a134:	00000000 	.word	0x00000000

0801a138 <nan>:
 801a138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a140 <nan+0x8>
 801a13c:	4770      	bx	lr
 801a13e:	bf00      	nop
 801a140:	00000000 	.word	0x00000000
 801a144:	7ff80000 	.word	0x7ff80000

0801a148 <__swbuf_r>:
 801a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a14a:	460e      	mov	r6, r1
 801a14c:	4614      	mov	r4, r2
 801a14e:	4605      	mov	r5, r0
 801a150:	b118      	cbz	r0, 801a15a <__swbuf_r+0x12>
 801a152:	6983      	ldr	r3, [r0, #24]
 801a154:	b90b      	cbnz	r3, 801a15a <__swbuf_r+0x12>
 801a156:	f7fd f831 	bl	80171bc <__sinit>
 801a15a:	4b21      	ldr	r3, [pc, #132]	; (801a1e0 <__swbuf_r+0x98>)
 801a15c:	429c      	cmp	r4, r3
 801a15e:	d12b      	bne.n	801a1b8 <__swbuf_r+0x70>
 801a160:	686c      	ldr	r4, [r5, #4]
 801a162:	69a3      	ldr	r3, [r4, #24]
 801a164:	60a3      	str	r3, [r4, #8]
 801a166:	89a3      	ldrh	r3, [r4, #12]
 801a168:	071a      	lsls	r2, r3, #28
 801a16a:	d52f      	bpl.n	801a1cc <__swbuf_r+0x84>
 801a16c:	6923      	ldr	r3, [r4, #16]
 801a16e:	b36b      	cbz	r3, 801a1cc <__swbuf_r+0x84>
 801a170:	6923      	ldr	r3, [r4, #16]
 801a172:	6820      	ldr	r0, [r4, #0]
 801a174:	1ac0      	subs	r0, r0, r3
 801a176:	6963      	ldr	r3, [r4, #20]
 801a178:	b2f6      	uxtb	r6, r6
 801a17a:	4283      	cmp	r3, r0
 801a17c:	4637      	mov	r7, r6
 801a17e:	dc04      	bgt.n	801a18a <__swbuf_r+0x42>
 801a180:	4621      	mov	r1, r4
 801a182:	4628      	mov	r0, r5
 801a184:	f7fe fa60 	bl	8018648 <_fflush_r>
 801a188:	bb30      	cbnz	r0, 801a1d8 <__swbuf_r+0x90>
 801a18a:	68a3      	ldr	r3, [r4, #8]
 801a18c:	3b01      	subs	r3, #1
 801a18e:	60a3      	str	r3, [r4, #8]
 801a190:	6823      	ldr	r3, [r4, #0]
 801a192:	1c5a      	adds	r2, r3, #1
 801a194:	6022      	str	r2, [r4, #0]
 801a196:	701e      	strb	r6, [r3, #0]
 801a198:	6963      	ldr	r3, [r4, #20]
 801a19a:	3001      	adds	r0, #1
 801a19c:	4283      	cmp	r3, r0
 801a19e:	d004      	beq.n	801a1aa <__swbuf_r+0x62>
 801a1a0:	89a3      	ldrh	r3, [r4, #12]
 801a1a2:	07db      	lsls	r3, r3, #31
 801a1a4:	d506      	bpl.n	801a1b4 <__swbuf_r+0x6c>
 801a1a6:	2e0a      	cmp	r6, #10
 801a1a8:	d104      	bne.n	801a1b4 <__swbuf_r+0x6c>
 801a1aa:	4621      	mov	r1, r4
 801a1ac:	4628      	mov	r0, r5
 801a1ae:	f7fe fa4b 	bl	8018648 <_fflush_r>
 801a1b2:	b988      	cbnz	r0, 801a1d8 <__swbuf_r+0x90>
 801a1b4:	4638      	mov	r0, r7
 801a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1b8:	4b0a      	ldr	r3, [pc, #40]	; (801a1e4 <__swbuf_r+0x9c>)
 801a1ba:	429c      	cmp	r4, r3
 801a1bc:	d101      	bne.n	801a1c2 <__swbuf_r+0x7a>
 801a1be:	68ac      	ldr	r4, [r5, #8]
 801a1c0:	e7cf      	b.n	801a162 <__swbuf_r+0x1a>
 801a1c2:	4b09      	ldr	r3, [pc, #36]	; (801a1e8 <__swbuf_r+0xa0>)
 801a1c4:	429c      	cmp	r4, r3
 801a1c6:	bf08      	it	eq
 801a1c8:	68ec      	ldreq	r4, [r5, #12]
 801a1ca:	e7ca      	b.n	801a162 <__swbuf_r+0x1a>
 801a1cc:	4621      	mov	r1, r4
 801a1ce:	4628      	mov	r0, r5
 801a1d0:	f000 f81a 	bl	801a208 <__swsetup_r>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d0cb      	beq.n	801a170 <__swbuf_r+0x28>
 801a1d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a1dc:	e7ea      	b.n	801a1b4 <__swbuf_r+0x6c>
 801a1de:	bf00      	nop
 801a1e0:	0801da04 	.word	0x0801da04
 801a1e4:	0801da24 	.word	0x0801da24
 801a1e8:	0801d9e4 	.word	0x0801d9e4

0801a1ec <__ascii_wctomb>:
 801a1ec:	b149      	cbz	r1, 801a202 <__ascii_wctomb+0x16>
 801a1ee:	2aff      	cmp	r2, #255	; 0xff
 801a1f0:	bf85      	ittet	hi
 801a1f2:	238a      	movhi	r3, #138	; 0x8a
 801a1f4:	6003      	strhi	r3, [r0, #0]
 801a1f6:	700a      	strbls	r2, [r1, #0]
 801a1f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a1fc:	bf98      	it	ls
 801a1fe:	2001      	movls	r0, #1
 801a200:	4770      	bx	lr
 801a202:	4608      	mov	r0, r1
 801a204:	4770      	bx	lr
	...

0801a208 <__swsetup_r>:
 801a208:	4b32      	ldr	r3, [pc, #200]	; (801a2d4 <__swsetup_r+0xcc>)
 801a20a:	b570      	push	{r4, r5, r6, lr}
 801a20c:	681d      	ldr	r5, [r3, #0]
 801a20e:	4606      	mov	r6, r0
 801a210:	460c      	mov	r4, r1
 801a212:	b125      	cbz	r5, 801a21e <__swsetup_r+0x16>
 801a214:	69ab      	ldr	r3, [r5, #24]
 801a216:	b913      	cbnz	r3, 801a21e <__swsetup_r+0x16>
 801a218:	4628      	mov	r0, r5
 801a21a:	f7fc ffcf 	bl	80171bc <__sinit>
 801a21e:	4b2e      	ldr	r3, [pc, #184]	; (801a2d8 <__swsetup_r+0xd0>)
 801a220:	429c      	cmp	r4, r3
 801a222:	d10f      	bne.n	801a244 <__swsetup_r+0x3c>
 801a224:	686c      	ldr	r4, [r5, #4]
 801a226:	89a3      	ldrh	r3, [r4, #12]
 801a228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a22c:	0719      	lsls	r1, r3, #28
 801a22e:	d42c      	bmi.n	801a28a <__swsetup_r+0x82>
 801a230:	06dd      	lsls	r5, r3, #27
 801a232:	d411      	bmi.n	801a258 <__swsetup_r+0x50>
 801a234:	2309      	movs	r3, #9
 801a236:	6033      	str	r3, [r6, #0]
 801a238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a23c:	81a3      	strh	r3, [r4, #12]
 801a23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a242:	e03e      	b.n	801a2c2 <__swsetup_r+0xba>
 801a244:	4b25      	ldr	r3, [pc, #148]	; (801a2dc <__swsetup_r+0xd4>)
 801a246:	429c      	cmp	r4, r3
 801a248:	d101      	bne.n	801a24e <__swsetup_r+0x46>
 801a24a:	68ac      	ldr	r4, [r5, #8]
 801a24c:	e7eb      	b.n	801a226 <__swsetup_r+0x1e>
 801a24e:	4b24      	ldr	r3, [pc, #144]	; (801a2e0 <__swsetup_r+0xd8>)
 801a250:	429c      	cmp	r4, r3
 801a252:	bf08      	it	eq
 801a254:	68ec      	ldreq	r4, [r5, #12]
 801a256:	e7e6      	b.n	801a226 <__swsetup_r+0x1e>
 801a258:	0758      	lsls	r0, r3, #29
 801a25a:	d512      	bpl.n	801a282 <__swsetup_r+0x7a>
 801a25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a25e:	b141      	cbz	r1, 801a272 <__swsetup_r+0x6a>
 801a260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a264:	4299      	cmp	r1, r3
 801a266:	d002      	beq.n	801a26e <__swsetup_r+0x66>
 801a268:	4630      	mov	r0, r6
 801a26a:	f7ff fabb 	bl	80197e4 <_free_r>
 801a26e:	2300      	movs	r3, #0
 801a270:	6363      	str	r3, [r4, #52]	; 0x34
 801a272:	89a3      	ldrh	r3, [r4, #12]
 801a274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a278:	81a3      	strh	r3, [r4, #12]
 801a27a:	2300      	movs	r3, #0
 801a27c:	6063      	str	r3, [r4, #4]
 801a27e:	6923      	ldr	r3, [r4, #16]
 801a280:	6023      	str	r3, [r4, #0]
 801a282:	89a3      	ldrh	r3, [r4, #12]
 801a284:	f043 0308 	orr.w	r3, r3, #8
 801a288:	81a3      	strh	r3, [r4, #12]
 801a28a:	6923      	ldr	r3, [r4, #16]
 801a28c:	b94b      	cbnz	r3, 801a2a2 <__swsetup_r+0x9a>
 801a28e:	89a3      	ldrh	r3, [r4, #12]
 801a290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a298:	d003      	beq.n	801a2a2 <__swsetup_r+0x9a>
 801a29a:	4621      	mov	r1, r4
 801a29c:	4630      	mov	r0, r6
 801a29e:	f000 f84d 	bl	801a33c <__smakebuf_r>
 801a2a2:	89a0      	ldrh	r0, [r4, #12]
 801a2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2a8:	f010 0301 	ands.w	r3, r0, #1
 801a2ac:	d00a      	beq.n	801a2c4 <__swsetup_r+0xbc>
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	60a3      	str	r3, [r4, #8]
 801a2b2:	6963      	ldr	r3, [r4, #20]
 801a2b4:	425b      	negs	r3, r3
 801a2b6:	61a3      	str	r3, [r4, #24]
 801a2b8:	6923      	ldr	r3, [r4, #16]
 801a2ba:	b943      	cbnz	r3, 801a2ce <__swsetup_r+0xc6>
 801a2bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a2c0:	d1ba      	bne.n	801a238 <__swsetup_r+0x30>
 801a2c2:	bd70      	pop	{r4, r5, r6, pc}
 801a2c4:	0781      	lsls	r1, r0, #30
 801a2c6:	bf58      	it	pl
 801a2c8:	6963      	ldrpl	r3, [r4, #20]
 801a2ca:	60a3      	str	r3, [r4, #8]
 801a2cc:	e7f4      	b.n	801a2b8 <__swsetup_r+0xb0>
 801a2ce:	2000      	movs	r0, #0
 801a2d0:	e7f7      	b.n	801a2c2 <__swsetup_r+0xba>
 801a2d2:	bf00      	nop
 801a2d4:	2000002c 	.word	0x2000002c
 801a2d8:	0801da04 	.word	0x0801da04
 801a2dc:	0801da24 	.word	0x0801da24
 801a2e0:	0801d9e4 	.word	0x0801d9e4

0801a2e4 <abort>:
 801a2e4:	b508      	push	{r3, lr}
 801a2e6:	2006      	movs	r0, #6
 801a2e8:	f000 f8c0 	bl	801a46c <raise>
 801a2ec:	2001      	movs	r0, #1
 801a2ee:	f7e7 fabb 	bl	8001868 <_exit>

0801a2f2 <__swhatbuf_r>:
 801a2f2:	b570      	push	{r4, r5, r6, lr}
 801a2f4:	460e      	mov	r6, r1
 801a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2fa:	2900      	cmp	r1, #0
 801a2fc:	b096      	sub	sp, #88	; 0x58
 801a2fe:	4614      	mov	r4, r2
 801a300:	461d      	mov	r5, r3
 801a302:	da08      	bge.n	801a316 <__swhatbuf_r+0x24>
 801a304:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a308:	2200      	movs	r2, #0
 801a30a:	602a      	str	r2, [r5, #0]
 801a30c:	061a      	lsls	r2, r3, #24
 801a30e:	d410      	bmi.n	801a332 <__swhatbuf_r+0x40>
 801a310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a314:	e00e      	b.n	801a334 <__swhatbuf_r+0x42>
 801a316:	466a      	mov	r2, sp
 801a318:	f000 f8c4 	bl	801a4a4 <_fstat_r>
 801a31c:	2800      	cmp	r0, #0
 801a31e:	dbf1      	blt.n	801a304 <__swhatbuf_r+0x12>
 801a320:	9a01      	ldr	r2, [sp, #4]
 801a322:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a326:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a32a:	425a      	negs	r2, r3
 801a32c:	415a      	adcs	r2, r3
 801a32e:	602a      	str	r2, [r5, #0]
 801a330:	e7ee      	b.n	801a310 <__swhatbuf_r+0x1e>
 801a332:	2340      	movs	r3, #64	; 0x40
 801a334:	2000      	movs	r0, #0
 801a336:	6023      	str	r3, [r4, #0]
 801a338:	b016      	add	sp, #88	; 0x58
 801a33a:	bd70      	pop	{r4, r5, r6, pc}

0801a33c <__smakebuf_r>:
 801a33c:	898b      	ldrh	r3, [r1, #12]
 801a33e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a340:	079d      	lsls	r5, r3, #30
 801a342:	4606      	mov	r6, r0
 801a344:	460c      	mov	r4, r1
 801a346:	d507      	bpl.n	801a358 <__smakebuf_r+0x1c>
 801a348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a34c:	6023      	str	r3, [r4, #0]
 801a34e:	6123      	str	r3, [r4, #16]
 801a350:	2301      	movs	r3, #1
 801a352:	6163      	str	r3, [r4, #20]
 801a354:	b002      	add	sp, #8
 801a356:	bd70      	pop	{r4, r5, r6, pc}
 801a358:	ab01      	add	r3, sp, #4
 801a35a:	466a      	mov	r2, sp
 801a35c:	f7ff ffc9 	bl	801a2f2 <__swhatbuf_r>
 801a360:	9900      	ldr	r1, [sp, #0]
 801a362:	4605      	mov	r5, r0
 801a364:	4630      	mov	r0, r6
 801a366:	f7fd f84f 	bl	8017408 <_malloc_r>
 801a36a:	b948      	cbnz	r0, 801a380 <__smakebuf_r+0x44>
 801a36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a370:	059a      	lsls	r2, r3, #22
 801a372:	d4ef      	bmi.n	801a354 <__smakebuf_r+0x18>
 801a374:	f023 0303 	bic.w	r3, r3, #3
 801a378:	f043 0302 	orr.w	r3, r3, #2
 801a37c:	81a3      	strh	r3, [r4, #12]
 801a37e:	e7e3      	b.n	801a348 <__smakebuf_r+0xc>
 801a380:	4b0d      	ldr	r3, [pc, #52]	; (801a3b8 <__smakebuf_r+0x7c>)
 801a382:	62b3      	str	r3, [r6, #40]	; 0x28
 801a384:	89a3      	ldrh	r3, [r4, #12]
 801a386:	6020      	str	r0, [r4, #0]
 801a388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a38c:	81a3      	strh	r3, [r4, #12]
 801a38e:	9b00      	ldr	r3, [sp, #0]
 801a390:	6163      	str	r3, [r4, #20]
 801a392:	9b01      	ldr	r3, [sp, #4]
 801a394:	6120      	str	r0, [r4, #16]
 801a396:	b15b      	cbz	r3, 801a3b0 <__smakebuf_r+0x74>
 801a398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a39c:	4630      	mov	r0, r6
 801a39e:	f000 f893 	bl	801a4c8 <_isatty_r>
 801a3a2:	b128      	cbz	r0, 801a3b0 <__smakebuf_r+0x74>
 801a3a4:	89a3      	ldrh	r3, [r4, #12]
 801a3a6:	f023 0303 	bic.w	r3, r3, #3
 801a3aa:	f043 0301 	orr.w	r3, r3, #1
 801a3ae:	81a3      	strh	r3, [r4, #12]
 801a3b0:	89a0      	ldrh	r0, [r4, #12]
 801a3b2:	4305      	orrs	r5, r0
 801a3b4:	81a5      	strh	r5, [r4, #12]
 801a3b6:	e7cd      	b.n	801a354 <__smakebuf_r+0x18>
 801a3b8:	08017155 	.word	0x08017155

0801a3bc <_realloc_r>:
 801a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3c0:	4680      	mov	r8, r0
 801a3c2:	4614      	mov	r4, r2
 801a3c4:	460e      	mov	r6, r1
 801a3c6:	b921      	cbnz	r1, 801a3d2 <_realloc_r+0x16>
 801a3c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3cc:	4611      	mov	r1, r2
 801a3ce:	f7fd b81b 	b.w	8017408 <_malloc_r>
 801a3d2:	b92a      	cbnz	r2, 801a3e0 <_realloc_r+0x24>
 801a3d4:	f7ff fa06 	bl	80197e4 <_free_r>
 801a3d8:	4625      	mov	r5, r4
 801a3da:	4628      	mov	r0, r5
 801a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3e0:	f000 f882 	bl	801a4e8 <_malloc_usable_size_r>
 801a3e4:	4284      	cmp	r4, r0
 801a3e6:	4607      	mov	r7, r0
 801a3e8:	d802      	bhi.n	801a3f0 <_realloc_r+0x34>
 801a3ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a3ee:	d812      	bhi.n	801a416 <_realloc_r+0x5a>
 801a3f0:	4621      	mov	r1, r4
 801a3f2:	4640      	mov	r0, r8
 801a3f4:	f7fd f808 	bl	8017408 <_malloc_r>
 801a3f8:	4605      	mov	r5, r0
 801a3fa:	2800      	cmp	r0, #0
 801a3fc:	d0ed      	beq.n	801a3da <_realloc_r+0x1e>
 801a3fe:	42bc      	cmp	r4, r7
 801a400:	4622      	mov	r2, r4
 801a402:	4631      	mov	r1, r6
 801a404:	bf28      	it	cs
 801a406:	463a      	movcs	r2, r7
 801a408:	f7fc ffad 	bl	8017366 <memcpy>
 801a40c:	4631      	mov	r1, r6
 801a40e:	4640      	mov	r0, r8
 801a410:	f7ff f9e8 	bl	80197e4 <_free_r>
 801a414:	e7e1      	b.n	801a3da <_realloc_r+0x1e>
 801a416:	4635      	mov	r5, r6
 801a418:	e7df      	b.n	801a3da <_realloc_r+0x1e>

0801a41a <_raise_r>:
 801a41a:	291f      	cmp	r1, #31
 801a41c:	b538      	push	{r3, r4, r5, lr}
 801a41e:	4604      	mov	r4, r0
 801a420:	460d      	mov	r5, r1
 801a422:	d904      	bls.n	801a42e <_raise_r+0x14>
 801a424:	2316      	movs	r3, #22
 801a426:	6003      	str	r3, [r0, #0]
 801a428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a42c:	bd38      	pop	{r3, r4, r5, pc}
 801a42e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a430:	b112      	cbz	r2, 801a438 <_raise_r+0x1e>
 801a432:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a436:	b94b      	cbnz	r3, 801a44c <_raise_r+0x32>
 801a438:	4620      	mov	r0, r4
 801a43a:	f000 f831 	bl	801a4a0 <_getpid_r>
 801a43e:	462a      	mov	r2, r5
 801a440:	4601      	mov	r1, r0
 801a442:	4620      	mov	r0, r4
 801a444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a448:	f000 b818 	b.w	801a47c <_kill_r>
 801a44c:	2b01      	cmp	r3, #1
 801a44e:	d00a      	beq.n	801a466 <_raise_r+0x4c>
 801a450:	1c59      	adds	r1, r3, #1
 801a452:	d103      	bne.n	801a45c <_raise_r+0x42>
 801a454:	2316      	movs	r3, #22
 801a456:	6003      	str	r3, [r0, #0]
 801a458:	2001      	movs	r0, #1
 801a45a:	e7e7      	b.n	801a42c <_raise_r+0x12>
 801a45c:	2400      	movs	r4, #0
 801a45e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a462:	4628      	mov	r0, r5
 801a464:	4798      	blx	r3
 801a466:	2000      	movs	r0, #0
 801a468:	e7e0      	b.n	801a42c <_raise_r+0x12>
	...

0801a46c <raise>:
 801a46c:	4b02      	ldr	r3, [pc, #8]	; (801a478 <raise+0xc>)
 801a46e:	4601      	mov	r1, r0
 801a470:	6818      	ldr	r0, [r3, #0]
 801a472:	f7ff bfd2 	b.w	801a41a <_raise_r>
 801a476:	bf00      	nop
 801a478:	2000002c 	.word	0x2000002c

0801a47c <_kill_r>:
 801a47c:	b538      	push	{r3, r4, r5, lr}
 801a47e:	4d07      	ldr	r5, [pc, #28]	; (801a49c <_kill_r+0x20>)
 801a480:	2300      	movs	r3, #0
 801a482:	4604      	mov	r4, r0
 801a484:	4608      	mov	r0, r1
 801a486:	4611      	mov	r1, r2
 801a488:	602b      	str	r3, [r5, #0]
 801a48a:	f7e7 f9db 	bl	8001844 <_kill>
 801a48e:	1c43      	adds	r3, r0, #1
 801a490:	d102      	bne.n	801a498 <_kill_r+0x1c>
 801a492:	682b      	ldr	r3, [r5, #0]
 801a494:	b103      	cbz	r3, 801a498 <_kill_r+0x1c>
 801a496:	6023      	str	r3, [r4, #0]
 801a498:	bd38      	pop	{r3, r4, r5, pc}
 801a49a:	bf00      	nop
 801a49c:	20011d00 	.word	0x20011d00

0801a4a0 <_getpid_r>:
 801a4a0:	f7e7 b9c8 	b.w	8001834 <_getpid>

0801a4a4 <_fstat_r>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	4d07      	ldr	r5, [pc, #28]	; (801a4c4 <_fstat_r+0x20>)
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	4608      	mov	r0, r1
 801a4ae:	4611      	mov	r1, r2
 801a4b0:	602b      	str	r3, [r5, #0]
 801a4b2:	f7e7 fa28 	bl	8001906 <_fstat>
 801a4b6:	1c43      	adds	r3, r0, #1
 801a4b8:	d102      	bne.n	801a4c0 <_fstat_r+0x1c>
 801a4ba:	682b      	ldr	r3, [r5, #0]
 801a4bc:	b103      	cbz	r3, 801a4c0 <_fstat_r+0x1c>
 801a4be:	6023      	str	r3, [r4, #0]
 801a4c0:	bd38      	pop	{r3, r4, r5, pc}
 801a4c2:	bf00      	nop
 801a4c4:	20011d00 	.word	0x20011d00

0801a4c8 <_isatty_r>:
 801a4c8:	b538      	push	{r3, r4, r5, lr}
 801a4ca:	4d06      	ldr	r5, [pc, #24]	; (801a4e4 <_isatty_r+0x1c>)
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	4604      	mov	r4, r0
 801a4d0:	4608      	mov	r0, r1
 801a4d2:	602b      	str	r3, [r5, #0]
 801a4d4:	f7e7 fa27 	bl	8001926 <_isatty>
 801a4d8:	1c43      	adds	r3, r0, #1
 801a4da:	d102      	bne.n	801a4e2 <_isatty_r+0x1a>
 801a4dc:	682b      	ldr	r3, [r5, #0]
 801a4de:	b103      	cbz	r3, 801a4e2 <_isatty_r+0x1a>
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	bd38      	pop	{r3, r4, r5, pc}
 801a4e4:	20011d00 	.word	0x20011d00

0801a4e8 <_malloc_usable_size_r>:
 801a4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4ec:	1f18      	subs	r0, r3, #4
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	bfbc      	itt	lt
 801a4f2:	580b      	ldrlt	r3, [r1, r0]
 801a4f4:	18c0      	addlt	r0, r0, r3
 801a4f6:	4770      	bx	lr

0801a4f8 <_init>:
 801a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4fa:	bf00      	nop
 801a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4fe:	bc08      	pop	{r3}
 801a500:	469e      	mov	lr, r3
 801a502:	4770      	bx	lr

0801a504 <_fini>:
 801a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a506:	bf00      	nop
 801a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a50a:	bc08      	pop	{r3}
 801a50c:	469e      	mov	lr, r3
 801a50e:	4770      	bx	lr
